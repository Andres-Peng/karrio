/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Purplship Open Source Multi-carrier Shipping API
 *  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services. 
 *
 * OpenAPI spec version: v1-2021.0
 * Contact: hello@purplship.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://app.purplship.com/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class AlternateBaseAPI
 */
export class AlternateBaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetchAPI: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Address
     */
    id?: string;
    /**
     *  The address postal code  **(required for shipment purchase)** 
     * @type {string}
     * @memberof Address
     */
    postal_code?: string;
    /**
     *  The address city.  **(required for shipment purchase)** 
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The party frederal tax id
     * @type {string}
     * @memberof Address
     */
    federal_tax_id?: string;
    /**
     * The party state id
     * @type {string}
     * @memberof Address
     */
    state_tax_id?: string;
    /**
     *  attention to  **(required for shipment purchase)** 
     * @type {string}
     * @memberof Address
     */
    person_name?: string;
    /**
     * The company name if the party is a company
     * @type {string}
     * @memberof Address
     */
    company_name?: string;
    /**
     * The address country code
     * @type {string}
     * @memberof Address
     */
    country_code: Address.CountryCodeEnum;
    /**
     * The party email
     * @type {string}
     * @memberof Address
     */
    email?: string;
    /**
     * The party phone number.
     * @type {string}
     * @memberof Address
     */
    phone_number?: string;
    /**
     * The address state code
     * @type {string}
     * @memberof Address
     */
    state_code?: string;
    /**
     * The address suburb if known
     * @type {string}
     * @memberof Address
     */
    suburb?: string;
    /**
     * Indicate if the address is residential or commercial (enterprise)
     * @type {boolean}
     * @memberof Address
     */
    residential?: boolean;
    /**
     *  The address line with street number <br/> **(required for shipment purchase)** 
     * @type {string}
     * @memberof Address
     */
    address_line1?: string;
    /**
     * The address line with suite number
     * @type {string}
     * @memberof Address
     */
    address_line2?: string;
}

/**
 * @export
 * @namespace Address
 */
export namespace Address {
    /**
     * @export
     * @enum {string}
     */
    export enum CountryCodeEnum {
        AD = <any> 'AD',
        AE = <any> 'AE',
        AF = <any> 'AF',
        AG = <any> 'AG',
        AI = <any> 'AI',
        AL = <any> 'AL',
        AM = <any> 'AM',
        AN = <any> 'AN',
        AO = <any> 'AO',
        AR = <any> 'AR',
        AS = <any> 'AS',
        AT = <any> 'AT',
        AU = <any> 'AU',
        AW = <any> 'AW',
        AZ = <any> 'AZ',
        BA = <any> 'BA',
        BB = <any> 'BB',
        BD = <any> 'BD',
        BE = <any> 'BE',
        BF = <any> 'BF',
        BG = <any> 'BG',
        BH = <any> 'BH',
        BI = <any> 'BI',
        BJ = <any> 'BJ',
        BM = <any> 'BM',
        BN = <any> 'BN',
        BO = <any> 'BO',
        BR = <any> 'BR',
        BS = <any> 'BS',
        BT = <any> 'BT',
        BW = <any> 'BW',
        BY = <any> 'BY',
        BZ = <any> 'BZ',
        CA = <any> 'CA',
        CD = <any> 'CD',
        CF = <any> 'CF',
        CG = <any> 'CG',
        CH = <any> 'CH',
        CI = <any> 'CI',
        CK = <any> 'CK',
        CL = <any> 'CL',
        CM = <any> 'CM',
        CN = <any> 'CN',
        CO = <any> 'CO',
        CR = <any> 'CR',
        CU = <any> 'CU',
        CV = <any> 'CV',
        CY = <any> 'CY',
        CZ = <any> 'CZ',
        DE = <any> 'DE',
        DJ = <any> 'DJ',
        DK = <any> 'DK',
        DM = <any> 'DM',
        DO = <any> 'DO',
        DZ = <any> 'DZ',
        EC = <any> 'EC',
        EE = <any> 'EE',
        EG = <any> 'EG',
        ER = <any> 'ER',
        ES = <any> 'ES',
        ET = <any> 'ET',
        FI = <any> 'FI',
        FJ = <any> 'FJ',
        FK = <any> 'FK',
        FM = <any> 'FM',
        FO = <any> 'FO',
        FR = <any> 'FR',
        GA = <any> 'GA',
        GB = <any> 'GB',
        GD = <any> 'GD',
        GE = <any> 'GE',
        GF = <any> 'GF',
        GG = <any> 'GG',
        GH = <any> 'GH',
        GI = <any> 'GI',
        GL = <any> 'GL',
        GM = <any> 'GM',
        GN = <any> 'GN',
        GP = <any> 'GP',
        GQ = <any> 'GQ',
        GR = <any> 'GR',
        GT = <any> 'GT',
        GU = <any> 'GU',
        GW = <any> 'GW',
        GY = <any> 'GY',
        HK = <any> 'HK',
        HN = <any> 'HN',
        HR = <any> 'HR',
        HT = <any> 'HT',
        HU = <any> 'HU',
        IC = <any> 'IC',
        ID = <any> 'ID',
        IE = <any> 'IE',
        IL = <any> 'IL',
        IN = <any> 'IN',
        IQ = <any> 'IQ',
        IR = <any> 'IR',
        IS = <any> 'IS',
        IT = <any> 'IT',
        JE = <any> 'JE',
        JM = <any> 'JM',
        JO = <any> 'JO',
        JP = <any> 'JP',
        KE = <any> 'KE',
        KG = <any> 'KG',
        KH = <any> 'KH',
        KI = <any> 'KI',
        KM = <any> 'KM',
        KN = <any> 'KN',
        KP = <any> 'KP',
        KR = <any> 'KR',
        KV = <any> 'KV',
        KW = <any> 'KW',
        KY = <any> 'KY',
        KZ = <any> 'KZ',
        LA = <any> 'LA',
        LB = <any> 'LB',
        LC = <any> 'LC',
        LI = <any> 'LI',
        LK = <any> 'LK',
        LR = <any> 'LR',
        LS = <any> 'LS',
        LT = <any> 'LT',
        LU = <any> 'LU',
        LV = <any> 'LV',
        LY = <any> 'LY',
        MA = <any> 'MA',
        MC = <any> 'MC',
        MD = <any> 'MD',
        ME = <any> 'ME',
        MG = <any> 'MG',
        MH = <any> 'MH',
        MK = <any> 'MK',
        ML = <any> 'ML',
        MM = <any> 'MM',
        MN = <any> 'MN',
        MO = <any> 'MO',
        MP = <any> 'MP',
        MQ = <any> 'MQ',
        MR = <any> 'MR',
        MS = <any> 'MS',
        MT = <any> 'MT',
        MU = <any> 'MU',
        MV = <any> 'MV',
        MW = <any> 'MW',
        MX = <any> 'MX',
        MY = <any> 'MY',
        MZ = <any> 'MZ',
        NA = <any> 'NA',
        NC = <any> 'NC',
        NE = <any> 'NE',
        NG = <any> 'NG',
        NI = <any> 'NI',
        NL = <any> 'NL',
        NO = <any> 'NO',
        NP = <any> 'NP',
        NR = <any> 'NR',
        NU = <any> 'NU',
        NZ = <any> 'NZ',
        OM = <any> 'OM',
        PA = <any> 'PA',
        PE = <any> 'PE',
        PF = <any> 'PF',
        PG = <any> 'PG',
        PH = <any> 'PH',
        PK = <any> 'PK',
        PL = <any> 'PL',
        PR = <any> 'PR',
        PT = <any> 'PT',
        PW = <any> 'PW',
        PY = <any> 'PY',
        QA = <any> 'QA',
        RE = <any> 'RE',
        RO = <any> 'RO',
        RS = <any> 'RS',
        RU = <any> 'RU',
        RW = <any> 'RW',
        SA = <any> 'SA',
        SB = <any> 'SB',
        SC = <any> 'SC',
        SD = <any> 'SD',
        SE = <any> 'SE',
        SG = <any> 'SG',
        SH = <any> 'SH',
        SI = <any> 'SI',
        SK = <any> 'SK',
        SL = <any> 'SL',
        SM = <any> 'SM',
        SN = <any> 'SN',
        SO = <any> 'SO',
        SR = <any> 'SR',
        SS = <any> 'SS',
        ST = <any> 'ST',
        SV = <any> 'SV',
        SY = <any> 'SY',
        SZ = <any> 'SZ',
        TC = <any> 'TC',
        TD = <any> 'TD',
        TG = <any> 'TG',
        TH = <any> 'TH',
        TJ = <any> 'TJ',
        TL = <any> 'TL',
        TN = <any> 'TN',
        TO = <any> 'TO',
        TR = <any> 'TR',
        TT = <any> 'TT',
        TV = <any> 'TV',
        TW = <any> 'TW',
        TZ = <any> 'TZ',
        UA = <any> 'UA',
        UG = <any> 'UG',
        US = <any> 'US',
        UY = <any> 'UY',
        UZ = <any> 'UZ',
        VA = <any> 'VA',
        VC = <any> 'VC',
        VE = <any> 'VE',
        VG = <any> 'VG',
        VI = <any> 'VI',
        VN = <any> 'VN',
        VU = <any> 'VU',
        WS = <any> 'WS',
        XB = <any> 'XB',
        XC = <any> 'XC',
        XE = <any> 'XE',
        XM = <any> 'XM',
        XN = <any> 'XN',
        XS = <any> 'XS',
        XY = <any> 'XY',
        YE = <any> 'YE',
        YT = <any> 'YT',
        ZA = <any> 'ZA',
        ZM = <any> 'ZM',
        ZW = <any> 'ZW'
    }
}
/**
 * 
 * @export
 * @interface AddressData
 */
export interface AddressData {
    /**
     *  The address postal code  **(required for shipment purchase)** 
     * @type {string}
     * @memberof AddressData
     */
    postal_code?: string;
    /**
     *  The address city.  **(required for shipment purchase)** 
     * @type {string}
     * @memberof AddressData
     */
    city?: string;
    /**
     * The party frederal tax id
     * @type {string}
     * @memberof AddressData
     */
    federal_tax_id?: string;
    /**
     * The party state id
     * @type {string}
     * @memberof AddressData
     */
    state_tax_id?: string;
    /**
     *  attention to  **(required for shipment purchase)** 
     * @type {string}
     * @memberof AddressData
     */
    person_name?: string;
    /**
     * The company name if the party is a company
     * @type {string}
     * @memberof AddressData
     */
    company_name?: string;
    /**
     * The address country code
     * @type {string}
     * @memberof AddressData
     */
    country_code: AddressData.CountryCodeEnum;
    /**
     * The party email
     * @type {string}
     * @memberof AddressData
     */
    email?: string;
    /**
     * The party phone number.
     * @type {string}
     * @memberof AddressData
     */
    phone_number?: string;
    /**
     * The address state code
     * @type {string}
     * @memberof AddressData
     */
    state_code?: string;
    /**
     * The address suburb if known
     * @type {string}
     * @memberof AddressData
     */
    suburb?: string;
    /**
     * Indicate if the address is residential or commercial (enterprise)
     * @type {boolean}
     * @memberof AddressData
     */
    residential?: boolean;
    /**
     *  The address line with street number <br/> **(required for shipment purchase)** 
     * @type {string}
     * @memberof AddressData
     */
    address_line1?: string;
    /**
     * The address line with suite number
     * @type {string}
     * @memberof AddressData
     */
    address_line2?: string;
}

/**
 * @export
 * @namespace AddressData
 */
export namespace AddressData {
    /**
     * @export
     * @enum {string}
     */
    export enum CountryCodeEnum {
        AD = <any> 'AD',
        AE = <any> 'AE',
        AF = <any> 'AF',
        AG = <any> 'AG',
        AI = <any> 'AI',
        AL = <any> 'AL',
        AM = <any> 'AM',
        AN = <any> 'AN',
        AO = <any> 'AO',
        AR = <any> 'AR',
        AS = <any> 'AS',
        AT = <any> 'AT',
        AU = <any> 'AU',
        AW = <any> 'AW',
        AZ = <any> 'AZ',
        BA = <any> 'BA',
        BB = <any> 'BB',
        BD = <any> 'BD',
        BE = <any> 'BE',
        BF = <any> 'BF',
        BG = <any> 'BG',
        BH = <any> 'BH',
        BI = <any> 'BI',
        BJ = <any> 'BJ',
        BM = <any> 'BM',
        BN = <any> 'BN',
        BO = <any> 'BO',
        BR = <any> 'BR',
        BS = <any> 'BS',
        BT = <any> 'BT',
        BW = <any> 'BW',
        BY = <any> 'BY',
        BZ = <any> 'BZ',
        CA = <any> 'CA',
        CD = <any> 'CD',
        CF = <any> 'CF',
        CG = <any> 'CG',
        CH = <any> 'CH',
        CI = <any> 'CI',
        CK = <any> 'CK',
        CL = <any> 'CL',
        CM = <any> 'CM',
        CN = <any> 'CN',
        CO = <any> 'CO',
        CR = <any> 'CR',
        CU = <any> 'CU',
        CV = <any> 'CV',
        CY = <any> 'CY',
        CZ = <any> 'CZ',
        DE = <any> 'DE',
        DJ = <any> 'DJ',
        DK = <any> 'DK',
        DM = <any> 'DM',
        DO = <any> 'DO',
        DZ = <any> 'DZ',
        EC = <any> 'EC',
        EE = <any> 'EE',
        EG = <any> 'EG',
        ER = <any> 'ER',
        ES = <any> 'ES',
        ET = <any> 'ET',
        FI = <any> 'FI',
        FJ = <any> 'FJ',
        FK = <any> 'FK',
        FM = <any> 'FM',
        FO = <any> 'FO',
        FR = <any> 'FR',
        GA = <any> 'GA',
        GB = <any> 'GB',
        GD = <any> 'GD',
        GE = <any> 'GE',
        GF = <any> 'GF',
        GG = <any> 'GG',
        GH = <any> 'GH',
        GI = <any> 'GI',
        GL = <any> 'GL',
        GM = <any> 'GM',
        GN = <any> 'GN',
        GP = <any> 'GP',
        GQ = <any> 'GQ',
        GR = <any> 'GR',
        GT = <any> 'GT',
        GU = <any> 'GU',
        GW = <any> 'GW',
        GY = <any> 'GY',
        HK = <any> 'HK',
        HN = <any> 'HN',
        HR = <any> 'HR',
        HT = <any> 'HT',
        HU = <any> 'HU',
        IC = <any> 'IC',
        ID = <any> 'ID',
        IE = <any> 'IE',
        IL = <any> 'IL',
        IN = <any> 'IN',
        IQ = <any> 'IQ',
        IR = <any> 'IR',
        IS = <any> 'IS',
        IT = <any> 'IT',
        JE = <any> 'JE',
        JM = <any> 'JM',
        JO = <any> 'JO',
        JP = <any> 'JP',
        KE = <any> 'KE',
        KG = <any> 'KG',
        KH = <any> 'KH',
        KI = <any> 'KI',
        KM = <any> 'KM',
        KN = <any> 'KN',
        KP = <any> 'KP',
        KR = <any> 'KR',
        KV = <any> 'KV',
        KW = <any> 'KW',
        KY = <any> 'KY',
        KZ = <any> 'KZ',
        LA = <any> 'LA',
        LB = <any> 'LB',
        LC = <any> 'LC',
        LI = <any> 'LI',
        LK = <any> 'LK',
        LR = <any> 'LR',
        LS = <any> 'LS',
        LT = <any> 'LT',
        LU = <any> 'LU',
        LV = <any> 'LV',
        LY = <any> 'LY',
        MA = <any> 'MA',
        MC = <any> 'MC',
        MD = <any> 'MD',
        ME = <any> 'ME',
        MG = <any> 'MG',
        MH = <any> 'MH',
        MK = <any> 'MK',
        ML = <any> 'ML',
        MM = <any> 'MM',
        MN = <any> 'MN',
        MO = <any> 'MO',
        MP = <any> 'MP',
        MQ = <any> 'MQ',
        MR = <any> 'MR',
        MS = <any> 'MS',
        MT = <any> 'MT',
        MU = <any> 'MU',
        MV = <any> 'MV',
        MW = <any> 'MW',
        MX = <any> 'MX',
        MY = <any> 'MY',
        MZ = <any> 'MZ',
        NA = <any> 'NA',
        NC = <any> 'NC',
        NE = <any> 'NE',
        NG = <any> 'NG',
        NI = <any> 'NI',
        NL = <any> 'NL',
        NO = <any> 'NO',
        NP = <any> 'NP',
        NR = <any> 'NR',
        NU = <any> 'NU',
        NZ = <any> 'NZ',
        OM = <any> 'OM',
        PA = <any> 'PA',
        PE = <any> 'PE',
        PF = <any> 'PF',
        PG = <any> 'PG',
        PH = <any> 'PH',
        PK = <any> 'PK',
        PL = <any> 'PL',
        PR = <any> 'PR',
        PT = <any> 'PT',
        PW = <any> 'PW',
        PY = <any> 'PY',
        QA = <any> 'QA',
        RE = <any> 'RE',
        RO = <any> 'RO',
        RS = <any> 'RS',
        RU = <any> 'RU',
        RW = <any> 'RW',
        SA = <any> 'SA',
        SB = <any> 'SB',
        SC = <any> 'SC',
        SD = <any> 'SD',
        SE = <any> 'SE',
        SG = <any> 'SG',
        SH = <any> 'SH',
        SI = <any> 'SI',
        SK = <any> 'SK',
        SL = <any> 'SL',
        SM = <any> 'SM',
        SN = <any> 'SN',
        SO = <any> 'SO',
        SR = <any> 'SR',
        SS = <any> 'SS',
        ST = <any> 'ST',
        SV = <any> 'SV',
        SY = <any> 'SY',
        SZ = <any> 'SZ',
        TC = <any> 'TC',
        TD = <any> 'TD',
        TG = <any> 'TG',
        TH = <any> 'TH',
        TJ = <any> 'TJ',
        TL = <any> 'TL',
        TN = <any> 'TN',
        TO = <any> 'TO',
        TR = <any> 'TR',
        TT = <any> 'TT',
        TV = <any> 'TV',
        TW = <any> 'TW',
        TZ = <any> 'TZ',
        UA = <any> 'UA',
        UG = <any> 'UG',
        US = <any> 'US',
        UY = <any> 'UY',
        UZ = <any> 'UZ',
        VA = <any> 'VA',
        VC = <any> 'VC',
        VE = <any> 'VE',
        VG = <any> 'VG',
        VI = <any> 'VI',
        VN = <any> 'VN',
        VU = <any> 'VU',
        WS = <any> 'WS',
        XB = <any> 'XB',
        XC = <any> 'XC',
        XE = <any> 'XE',
        XM = <any> 'XM',
        XN = <any> 'XN',
        XS = <any> 'XS',
        XY = <any> 'XY',
        YE = <any> 'YE',
        YT = <any> 'YT',
        ZA = <any> 'ZA',
        ZM = <any> 'ZM',
        ZW = <any> 'ZW'
    }
}
/**
 * 
 * @export
 * @interface CarrierSettings
 */
export interface CarrierSettings {
    /**
     * A unique address identifier
     * @type {string}
     * @memberof CarrierSettings
     */
    id: string;
    /**
     * Indicates a carrier (type)
     * @type {string}
     * @memberof CarrierSettings
     */
    carrier_name: CarrierSettings.CarrierNameEnum;
    /**
     * Indicates a specific carrier configuration name.
     * @type {string}
     * @memberof CarrierSettings
     */
    carrier_id: string;
    /**
     *  The test flag indicates whether to use a carrier configured for test.  
     * @type {boolean}
     * @memberof CarrierSettings
     */
    test: boolean;
    /**
     *  The active flag indicates whether the carrier account is active or not.  
     * @type {boolean}
     * @memberof CarrierSettings
     */
    active: boolean;
}

/**
 * @export
 * @namespace CarrierSettings
 */
export namespace CarrierSettings {
    /**
     * @export
     * @enum {string}
     */
    export enum CarrierNameEnum {
        Canadapost = <any> 'canadapost',
        DhlExpress = <any> 'dhl_express',
        FedexExpress = <any> 'fedex_express',
        PurolatorCourier = <any> 'purolator_courier',
        UpsPackage = <any> 'ups_package',
        Eshipper = <any> 'eshipper',
        Freightcom = <any> 'freightcom'
    }
}
/**
 * The pickup cost details
 * @export
 * @interface Charge
 */
export interface Charge {
    /**
     * The charge description
     * @type {string}
     * @memberof Charge
     */
    name?: string;
    /**
     * The charge monetary value
     * @type {number}
     * @memberof Charge
     */
    amount?: number;
    /**
     * The charge amount currency
     * @type {string}
     * @memberof Charge
     */
    currency?: string;
}
/**
 * The parcel content items
 * @export
 * @interface Commodity
 */
export interface Commodity {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Commodity
     */
    id?: string;
    /**
     * The commodity's weight
     * @type {number}
     * @memberof Commodity
     */
    weight: number;
    /**
     * The commodity's weight unit
     * @type {string}
     * @memberof Commodity
     */
    weight_unit: Commodity.WeightUnitEnum;
    /**
     * A description of the commodity
     * @type {string}
     * @memberof Commodity
     */
    description?: string;
    /**
     * The commodity's quantity (number or item)
     * @type {number}
     * @memberof Commodity
     */
    quantity?: number;
    /**
     * The commodity's sku number
     * @type {string}
     * @memberof Commodity
     */
    sku?: string;
    /**
     * The monetary value of the commodity
     * @type {number}
     * @memberof Commodity
     */
    value_amount?: number;
    /**
     * The currency of the commodity value amount
     * @type {string}
     * @memberof Commodity
     */
    value_currency?: string;
    /**
     * The origin or manufacture country
     * @type {string}
     * @memberof Commodity
     */
    origin_country?: string;
}

/**
 * @export
 * @namespace Commodity
 */
export namespace Commodity {
    /**
     * @export
     * @enum {string}
     */
    export enum WeightUnitEnum {
        KG = <any> 'KG',
        LB = <any> 'LB'
    }
}
/**
 * 
 * @export
 * @interface Customs
 */
export interface Customs {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Customs
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Customs
     */
    aes?: string;
    /**
     * 
     * @type {string}
     * @memberof Customs
     */
    eel_pfc?: string;
    /**
     * 
     * @type {string}
     * @memberof Customs
     */
    content_type?: Customs.ContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Customs
     */
    content_description?: string;
    /**
     * The customs 'term of trade' also known as 'incoterm'
     * @type {string}
     * @memberof Customs
     */
    incoterm?: Customs.IncotermEnum;
    /**
     * The parcel content items
     * @type {Array<Commodity>}
     * @memberof Customs
     */
    commodities?: Array<Commodity>;
    /**
     * 
     * @type {Payment}
     * @memberof Customs
     */
    duty?: Payment;
    /**
     * The invoice reference number
     * @type {string}
     * @memberof Customs
     */
    invoice?: string;
    /**
     * Indicates if the shipment is commercial
     * @type {boolean}
     * @memberof Customs
     */
    commercial_invoice?: boolean;
    /**
     * Indicate that signer certified confirmed all
     * @type {boolean}
     * @memberof Customs
     */
    certify?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Customs
     */
    signer?: string;
    /**
     * 
     * @type {string}
     * @memberof Customs
     */
    certificate_number?: string;
    /**
     * 
     * @type {any}
     * @memberof Customs
     */
    options?: any;
}

/**
 * @export
 * @namespace Customs
 */
export namespace Customs {
    /**
     * @export
     * @enum {string}
     */
    export enum ContentTypeEnum {
        Documents = <any> 'documents',
        Gift = <any> 'gift',
        Sample = <any> 'sample',
        Merchandise = <any> 'merchandise',
        ReturnMerchandise = <any> 'return_merchandise',
        Other = <any> 'other'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum IncotermEnum {
        CFR = <any> 'CFR',
        CIF = <any> 'CIF',
        CIP = <any> 'CIP',
        CPT = <any> 'CPT',
        DAF = <any> 'DAF',
        DDP = <any> 'DDP',
        DDU = <any> 'DDU',
        DEQ = <any> 'DEQ',
        DES = <any> 'DES',
        EXW = <any> 'EXW',
        FAS = <any> 'FAS',
        FCA = <any> 'FCA',
        FOB = <any> 'FOB'
    }
}
/**
 * 
 * @export
 * @interface CustomsData
 */
export interface CustomsData {
    /**
     * 
     * @type {string}
     * @memberof CustomsData
     */
    aes?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomsData
     */
    eel_pfc?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomsData
     */
    content_type?: CustomsData.ContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomsData
     */
    content_description?: string;
    /**
     * The customs 'term of trade' also known as 'incoterm'
     * @type {string}
     * @memberof CustomsData
     */
    incoterm?: CustomsData.IncotermEnum;
    /**
     * The parcel content items
     * @type {Array<Commodity>}
     * @memberof CustomsData
     */
    commodities?: Array<Commodity>;
    /**
     * 
     * @type {Payment}
     * @memberof CustomsData
     */
    duty?: Payment;
    /**
     * The invoice reference number
     * @type {string}
     * @memberof CustomsData
     */
    invoice?: string;
    /**
     * Indicates if the shipment is commercial
     * @type {boolean}
     * @memberof CustomsData
     */
    commercial_invoice?: boolean;
    /**
     * Indicate that signer certified confirmed all
     * @type {boolean}
     * @memberof CustomsData
     */
    certify?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomsData
     */
    signer?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomsData
     */
    certificate_number?: string;
    /**
     * 
     * @type {any}
     * @memberof CustomsData
     */
    options?: any;
}

/**
 * @export
 * @namespace CustomsData
 */
export namespace CustomsData {
    /**
     * @export
     * @enum {string}
     */
    export enum ContentTypeEnum {
        Documents = <any> 'documents',
        Gift = <any> 'gift',
        Sample = <any> 'sample',
        Merchandise = <any> 'merchandise',
        ReturnMerchandise = <any> 'return_merchandise',
        Other = <any> 'other'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum IncotermEnum {
        CFR = <any> 'CFR',
        CIF = <any> 'CIF',
        CIP = <any> 'CIP',
        CPT = <any> 'CPT',
        DAF = <any> 'DAF',
        DDP = <any> 'DDP',
        DDU = <any> 'DDU',
        DEQ = <any> 'DEQ',
        DES = <any> 'DES',
        EXW = <any> 'EXW',
        FAS = <any> 'FAS',
        FCA = <any> 'FCA',
        FOB = <any> 'FOB'
    }
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * The list of error messages
     * @type {Array<Message>}
     * @memberof ErrorResponse
     */
    messages?: Array<Message>;
}
/**
 * 
 * @export
 * @interface LabelPrintingRequest
 */
export interface LabelPrintingRequest {
    /**
     *  PDF file name.  eg: shipment-[trackingNumber] 
     * @type {string}
     * @memberof LabelPrintingRequest
     */
    name: string;
    /**
     * Shipment base64 label
     * @type {string}
     * @memberof LabelPrintingRequest
     */
    label: string;
}
/**
 * The list of error messages
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * The targeted carrier
     * @type {string}
     * @memberof Message
     */
    carrier_name: string;
    /**
     * The targeted carrier name (unique identifier)
     * @type {string}
     * @memberof Message
     */
    carrier_id: string;
    /**
     * The error or warning message
     * @type {string}
     * @memberof Message
     */
    message?: string;
    /**
     * The message code
     * @type {string}
     * @memberof Message
     */
    code?: string;
    /**
     * any additional details
     * @type {{ [key: string]: string; }}
     * @memberof Message
     */
    details?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Operation
 */
export interface Operation {
    /**
     * Operation performed
     * @type {string}
     * @memberof Operation
     */
    operation: string;
    /**
     * Specify whether the operation was successful
     * @type {boolean}
     * @memberof Operation
     */
    success: boolean;
}
/**
 * 
 * @export
 * @interface OperationConfirmation
 */
export interface OperationConfirmation {
    /**
     * Operation performed
     * @type {string}
     * @memberof OperationConfirmation
     */
    operation: string;
    /**
     * Specify whether the operation was successful
     * @type {boolean}
     * @memberof OperationConfirmation
     */
    success: boolean;
    /**
     * The operation carrier
     * @type {string}
     * @memberof OperationConfirmation
     */
    carrier_name: string;
    /**
     * The targeted carrier's name (unique identifier)
     * @type {string}
     * @memberof OperationConfirmation
     */
    carrier_id: string;
}
/**
 * 
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
    /**
     * The list of note or warning messages
     * @type {Array<Message>}
     * @memberof OperationResponse
     */
    messages?: Array<Message>;
    /**
     * 
     * @type {OperationConfirmation}
     * @memberof OperationResponse
     */
    confirmation?: OperationConfirmation;
}
/**
 * 
 * @export
 * @interface Parcel
 */
export interface Parcel {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Parcel
     */
    id?: string;
    /**
     * The parcel's weight
     * @type {number}
     * @memberof Parcel
     */
    weight: number;
    /**
     * The parcel's width
     * @type {number}
     * @memberof Parcel
     */
    width?: number;
    /**
     * The parcel's height
     * @type {number}
     * @memberof Parcel
     */
    height?: number;
    /**
     * The parcel's length
     * @type {number}
     * @memberof Parcel
     */
    length?: number;
    /**
     *  The parcel's packaging type.  **Note that the packaging is optional when using a package preset**  values: <br/>- **envelope**<br/>- **pak**<br/>- **tube**<br/>- **pallet**<br/>- **small_box**<br/>- **medium_box**<br/>- **your_packaging**  For specific carriers packaging type, please consult [the reference](#operation/references). 
     * @type {string}
     * @memberof Parcel
     */
    packaging_type?: string;
    /**
     *  The parcel's package preset.  For specific carriers package preset, please consult [the reference](#operation/references). 
     * @type {string}
     * @memberof Parcel
     */
    package_preset?: string;
    /**
     * The parcel's description
     * @type {string}
     * @memberof Parcel
     */
    description?: string;
    /**
     * The parcel's content description
     * @type {string}
     * @memberof Parcel
     */
    content?: string;
    /**
     * Indicates if the parcel is composed of documents only
     * @type {boolean}
     * @memberof Parcel
     */
    is_document?: boolean;
    /**
     * The parcel's weight unit
     * @type {string}
     * @memberof Parcel
     */
    weight_unit: Parcel.WeightUnitEnum;
    /**
     * The parcel's dimension unit
     * @type {string}
     * @memberof Parcel
     */
    dimension_unit?: Parcel.DimensionUnitEnum;
}

/**
 * @export
 * @namespace Parcel
 */
export namespace Parcel {
    /**
     * @export
     * @enum {string}
     */
    export enum WeightUnitEnum {
        KG = <any> 'KG',
        LB = <any> 'LB'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum DimensionUnitEnum {
        CM = <any> 'CM',
        IN = <any> 'IN'
    }
}
/**
 * 
 * @export
 * @interface ParcelData
 */
export interface ParcelData {
    /**
     * The parcel's weight
     * @type {number}
     * @memberof ParcelData
     */
    weight: number;
    /**
     * The parcel's width
     * @type {number}
     * @memberof ParcelData
     */
    width?: number;
    /**
     * The parcel's height
     * @type {number}
     * @memberof ParcelData
     */
    height?: number;
    /**
     * The parcel's length
     * @type {number}
     * @memberof ParcelData
     */
    length?: number;
    /**
     *  The parcel's packaging type.  **Note that the packaging is optional when using a package preset**  values: <br/>- **envelope**<br/>- **pak**<br/>- **tube**<br/>- **pallet**<br/>- **small_box**<br/>- **medium_box**<br/>- **your_packaging**  For specific carriers packaging type, please consult [the reference](#operation/references). 
     * @type {string}
     * @memberof ParcelData
     */
    packaging_type?: string;
    /**
     *  The parcel's package preset.  For specific carriers package preset, please consult [the reference](#operation/references). 
     * @type {string}
     * @memberof ParcelData
     */
    package_preset?: string;
    /**
     * The parcel's description
     * @type {string}
     * @memberof ParcelData
     */
    description?: string;
    /**
     * The parcel's content description
     * @type {string}
     * @memberof ParcelData
     */
    content?: string;
    /**
     * Indicates if the parcel is composed of documents only
     * @type {boolean}
     * @memberof ParcelData
     */
    is_document?: boolean;
    /**
     * The parcel's weight unit
     * @type {string}
     * @memberof ParcelData
     */
    weight_unit: ParcelData.WeightUnitEnum;
    /**
     * The parcel's dimension unit
     * @type {string}
     * @memberof ParcelData
     */
    dimension_unit?: ParcelData.DimensionUnitEnum;
}

/**
 * @export
 * @namespace ParcelData
 */
export namespace ParcelData {
    /**
     * @export
     * @enum {string}
     */
    export enum WeightUnitEnum {
        KG = <any> 'KG',
        LB = <any> 'LB'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum DimensionUnitEnum {
        CM = <any> 'CM',
        IN = <any> 'IN'
    }
}
/**
 *  The payment details.<br/> Note that this is required for a Dutiable parcel shipped internationally. 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Payment
     */
    id?: string;
    /**
     * The payment payer
     * @type {string}
     * @memberof Payment
     */
    paid_by: Payment.PaidByEnum;
    /**
     * The payment amount if known
     * @type {number}
     * @memberof Payment
     */
    amount?: number;
    /**
     * The payment amount currency
     * @type {string}
     * @memberof Payment
     */
    currency: Payment.CurrencyEnum;
    /**
     * The selected rate carrier payer account number
     * @type {string}
     * @memberof Payment
     */
    account_number?: string;
    /**
     * 
     * @type {Address}
     * @memberof Payment
     */
    contact?: Address;
}

/**
 * @export
 * @namespace Payment
 */
export namespace Payment {
    /**
     * @export
     * @enum {string}
     */
    export enum PaidByEnum {
        Sender = <any> 'sender',
        Recipient = <any> 'recipient',
        ThirdParty = <any> 'third_party'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        EUR = <any> 'EUR',
        AED = <any> 'AED',
        USD = <any> 'USD',
        XCD = <any> 'XCD',
        AMD = <any> 'AMD',
        ANG = <any> 'ANG',
        AOA = <any> 'AOA',
        ARS = <any> 'ARS',
        AUD = <any> 'AUD',
        AWG = <any> 'AWG',
        AZN = <any> 'AZN',
        BAM = <any> 'BAM',
        BBD = <any> 'BBD',
        BDT = <any> 'BDT',
        XOF = <any> 'XOF',
        BGN = <any> 'BGN',
        BHD = <any> 'BHD',
        BIF = <any> 'BIF',
        BMD = <any> 'BMD',
        BND = <any> 'BND',
        BOB = <any> 'BOB',
        BRL = <any> 'BRL',
        BSD = <any> 'BSD',
        BTN = <any> 'BTN',
        BWP = <any> 'BWP',
        BYN = <any> 'BYN',
        BZD = <any> 'BZD',
        CAD = <any> 'CAD',
        CDF = <any> 'CDF',
        XAF = <any> 'XAF',
        CHF = <any> 'CHF',
        NZD = <any> 'NZD',
        CLP = <any> 'CLP',
        CNY = <any> 'CNY',
        COP = <any> 'COP',
        CRC = <any> 'CRC',
        CUC = <any> 'CUC',
        CVE = <any> 'CVE',
        CZK = <any> 'CZK',
        DJF = <any> 'DJF',
        DKK = <any> 'DKK',
        DOP = <any> 'DOP',
        DZD = <any> 'DZD',
        EGP = <any> 'EGP',
        ERN = <any> 'ERN',
        ETB = <any> 'ETB',
        FJD = <any> 'FJD',
        GBP = <any> 'GBP',
        GEL = <any> 'GEL',
        GHS = <any> 'GHS',
        GMD = <any> 'GMD',
        GNF = <any> 'GNF',
        GTQ = <any> 'GTQ',
        GYD = <any> 'GYD',
        HKD = <any> 'HKD',
        HNL = <any> 'HNL',
        HRK = <any> 'HRK',
        HTG = <any> 'HTG',
        HUF = <any> 'HUF',
        IDR = <any> 'IDR',
        ILS = <any> 'ILS',
        INR = <any> 'INR',
        IRR = <any> 'IRR',
        ISK = <any> 'ISK',
        JMD = <any> 'JMD',
        JOD = <any> 'JOD',
        JPY = <any> 'JPY',
        KES = <any> 'KES',
        KGS = <any> 'KGS',
        KHR = <any> 'KHR',
        KMF = <any> 'KMF',
        KPW = <any> 'KPW',
        KRW = <any> 'KRW',
        KWD = <any> 'KWD',
        KYD = <any> 'KYD',
        KZT = <any> 'KZT',
        LAK = <any> 'LAK',
        LKR = <any> 'LKR',
        LRD = <any> 'LRD',
        LSL = <any> 'LSL',
        LYD = <any> 'LYD',
        MAD = <any> 'MAD',
        MDL = <any> 'MDL',
        MGA = <any> 'MGA',
        MKD = <any> 'MKD',
        MMK = <any> 'MMK',
        MNT = <any> 'MNT',
        MOP = <any> 'MOP',
        MRO = <any> 'MRO',
        MUR = <any> 'MUR',
        MVR = <any> 'MVR',
        MWK = <any> 'MWK',
        MXN = <any> 'MXN',
        MYR = <any> 'MYR',
        MZN = <any> 'MZN',
        NAD = <any> 'NAD',
        XPF = <any> 'XPF',
        NGN = <any> 'NGN',
        NIO = <any> 'NIO',
        NOK = <any> 'NOK',
        NPR = <any> 'NPR',
        OMR = <any> 'OMR',
        PEN = <any> 'PEN',
        PGK = <any> 'PGK',
        PHP = <any> 'PHP',
        PKR = <any> 'PKR',
        PLN = <any> 'PLN',
        PYG = <any> 'PYG',
        QAR = <any> 'QAR',
        RSD = <any> 'RSD',
        RUB = <any> 'RUB',
        RWF = <any> 'RWF',
        SAR = <any> 'SAR',
        SBD = <any> 'SBD',
        SCR = <any> 'SCR',
        SDG = <any> 'SDG',
        SEK = <any> 'SEK',
        SGD = <any> 'SGD',
        SHP = <any> 'SHP',
        SLL = <any> 'SLL',
        SOS = <any> 'SOS',
        SRD = <any> 'SRD',
        SSP = <any> 'SSP',
        STD = <any> 'STD',
        SYP = <any> 'SYP',
        SZL = <any> 'SZL',
        THB = <any> 'THB',
        TJS = <any> 'TJS',
        TND = <any> 'TND',
        TOP = <any> 'TOP',
        TRY = <any> 'TRY',
        TTD = <any> 'TTD',
        TWD = <any> 'TWD',
        TZS = <any> 'TZS',
        UAH = <any> 'UAH',
        UYU = <any> 'UYU',
        UZS = <any> 'UZS',
        VEF = <any> 'VEF',
        VND = <any> 'VND',
        VUV = <any> 'VUV',
        WST = <any> 'WST',
        YER = <any> 'YER',
        ZAR = <any> 'ZAR'
    }
}
/**
 * The payment details
 * @export
 * @interface PaymentData
 */
export interface PaymentData {
    /**
     * The payment payer
     * @type {string}
     * @memberof PaymentData
     */
    paid_by: PaymentData.PaidByEnum;
    /**
     * The payment amount if known
     * @type {number}
     * @memberof PaymentData
     */
    amount?: number;
    /**
     * The payment amount currency
     * @type {string}
     * @memberof PaymentData
     */
    currency: PaymentData.CurrencyEnum;
    /**
     * The selected rate carrier payer account number
     * @type {string}
     * @memberof PaymentData
     */
    account_number?: string;
    /**
     * 
     * @type {Address}
     * @memberof PaymentData
     */
    contact?: Address;
}

/**
 * @export
 * @namespace PaymentData
 */
export namespace PaymentData {
    /**
     * @export
     * @enum {string}
     */
    export enum PaidByEnum {
        Sender = <any> 'sender',
        Recipient = <any> 'recipient',
        ThirdParty = <any> 'third_party'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        EUR = <any> 'EUR',
        AED = <any> 'AED',
        USD = <any> 'USD',
        XCD = <any> 'XCD',
        AMD = <any> 'AMD',
        ANG = <any> 'ANG',
        AOA = <any> 'AOA',
        ARS = <any> 'ARS',
        AUD = <any> 'AUD',
        AWG = <any> 'AWG',
        AZN = <any> 'AZN',
        BAM = <any> 'BAM',
        BBD = <any> 'BBD',
        BDT = <any> 'BDT',
        XOF = <any> 'XOF',
        BGN = <any> 'BGN',
        BHD = <any> 'BHD',
        BIF = <any> 'BIF',
        BMD = <any> 'BMD',
        BND = <any> 'BND',
        BOB = <any> 'BOB',
        BRL = <any> 'BRL',
        BSD = <any> 'BSD',
        BTN = <any> 'BTN',
        BWP = <any> 'BWP',
        BYN = <any> 'BYN',
        BZD = <any> 'BZD',
        CAD = <any> 'CAD',
        CDF = <any> 'CDF',
        XAF = <any> 'XAF',
        CHF = <any> 'CHF',
        NZD = <any> 'NZD',
        CLP = <any> 'CLP',
        CNY = <any> 'CNY',
        COP = <any> 'COP',
        CRC = <any> 'CRC',
        CUC = <any> 'CUC',
        CVE = <any> 'CVE',
        CZK = <any> 'CZK',
        DJF = <any> 'DJF',
        DKK = <any> 'DKK',
        DOP = <any> 'DOP',
        DZD = <any> 'DZD',
        EGP = <any> 'EGP',
        ERN = <any> 'ERN',
        ETB = <any> 'ETB',
        FJD = <any> 'FJD',
        GBP = <any> 'GBP',
        GEL = <any> 'GEL',
        GHS = <any> 'GHS',
        GMD = <any> 'GMD',
        GNF = <any> 'GNF',
        GTQ = <any> 'GTQ',
        GYD = <any> 'GYD',
        HKD = <any> 'HKD',
        HNL = <any> 'HNL',
        HRK = <any> 'HRK',
        HTG = <any> 'HTG',
        HUF = <any> 'HUF',
        IDR = <any> 'IDR',
        ILS = <any> 'ILS',
        INR = <any> 'INR',
        IRR = <any> 'IRR',
        ISK = <any> 'ISK',
        JMD = <any> 'JMD',
        JOD = <any> 'JOD',
        JPY = <any> 'JPY',
        KES = <any> 'KES',
        KGS = <any> 'KGS',
        KHR = <any> 'KHR',
        KMF = <any> 'KMF',
        KPW = <any> 'KPW',
        KRW = <any> 'KRW',
        KWD = <any> 'KWD',
        KYD = <any> 'KYD',
        KZT = <any> 'KZT',
        LAK = <any> 'LAK',
        LKR = <any> 'LKR',
        LRD = <any> 'LRD',
        LSL = <any> 'LSL',
        LYD = <any> 'LYD',
        MAD = <any> 'MAD',
        MDL = <any> 'MDL',
        MGA = <any> 'MGA',
        MKD = <any> 'MKD',
        MMK = <any> 'MMK',
        MNT = <any> 'MNT',
        MOP = <any> 'MOP',
        MRO = <any> 'MRO',
        MUR = <any> 'MUR',
        MVR = <any> 'MVR',
        MWK = <any> 'MWK',
        MXN = <any> 'MXN',
        MYR = <any> 'MYR',
        MZN = <any> 'MZN',
        NAD = <any> 'NAD',
        XPF = <any> 'XPF',
        NGN = <any> 'NGN',
        NIO = <any> 'NIO',
        NOK = <any> 'NOK',
        NPR = <any> 'NPR',
        OMR = <any> 'OMR',
        PEN = <any> 'PEN',
        PGK = <any> 'PGK',
        PHP = <any> 'PHP',
        PKR = <any> 'PKR',
        PLN = <any> 'PLN',
        PYG = <any> 'PYG',
        QAR = <any> 'QAR',
        RSD = <any> 'RSD',
        RUB = <any> 'RUB',
        RWF = <any> 'RWF',
        SAR = <any> 'SAR',
        SBD = <any> 'SBD',
        SCR = <any> 'SCR',
        SDG = <any> 'SDG',
        SEK = <any> 'SEK',
        SGD = <any> 'SGD',
        SHP = <any> 'SHP',
        SLL = <any> 'SLL',
        SOS = <any> 'SOS',
        SRD = <any> 'SRD',
        SSP = <any> 'SSP',
        STD = <any> 'STD',
        SYP = <any> 'SYP',
        SZL = <any> 'SZL',
        THB = <any> 'THB',
        TJS = <any> 'TJS',
        TND = <any> 'TND',
        TOP = <any> 'TOP',
        TRY = <any> 'TRY',
        TTD = <any> 'TTD',
        TWD = <any> 'TWD',
        TZS = <any> 'TZS',
        UAH = <any> 'UAH',
        UYU = <any> 'UYU',
        UZS = <any> 'UZS',
        VEF = <any> 'VEF',
        VND = <any> 'VND',
        VUV = <any> 'VUV',
        WST = <any> 'WST',
        YER = <any> 'YER',
        ZAR = <any> 'ZAR'
    }
}
/**
 * 
 * @export
 * @interface Pickup
 */
export interface Pickup {
    /**
     * A unique pickup identifier
     * @type {string}
     * @memberof Pickup
     */
    id?: string;
    /**
     * The pickup carrier
     * @type {string}
     * @memberof Pickup
     */
    carrier_name: string;
    /**
     * The pickup carrier configured name
     * @type {string}
     * @memberof Pickup
     */
    carrier_id: string;
    /**
     * The pickup confirmation identifier
     * @type {string}
     * @memberof Pickup
     */
    confirmation_number: string;
    /**
     * The pickup date
     * @type {string}
     * @memberof Pickup
     */
    pickup_date?: string;
    /**
     * 
     * @type {Charge}
     * @memberof Pickup
     */
    pickup_charge?: Charge;
    /**
     * The pickup expected ready time
     * @type {string}
     * @memberof Pickup
     */
    ready_time?: string;
    /**
     * The pickup expected closing or late time
     * @type {string}
     * @memberof Pickup
     */
    closing_time?: string;
    /**
     * 
     * @type {Address}
     * @memberof Pickup
     */
    address: Address;
    /**
     * The shipment parcels to pickup.
     * @type {Array<Parcel>}
     * @memberof Pickup
     */
    parcels: Array<Parcel>;
    /**
     *  The pickup instruction.  eg: Handle with care. 
     * @type {string}
     * @memberof Pickup
     */
    instruction?: string;
    /**
     *  The package(s) location.  eg: Behind the entrance door. 
     * @type {string}
     * @memberof Pickup
     */
    package_location?: string;
    /**
     * Advanced carrier specific pickup options
     * @type {any}
     * @memberof Pickup
     */
    options?: any;
    /**
     * Specified whether it was created with a carrier in test mode
     * @type {boolean}
     * @memberof Pickup
     */
    test_mode: boolean;
}
/**
 * 
 * @export
 * @interface PickupCancelData
 */
export interface PickupCancelData {
    /**
     * The reason of the pickup cancellation
     * @type {string}
     * @memberof PickupCancelData
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface PickupCancelRequest
 */
export interface PickupCancelRequest {
    /**
     * The pickup confirmation identifier
     * @type {string}
     * @memberof PickupCancelRequest
     */
    confirmation_number: string;
    /**
     * 
     * @type {AddressData}
     * @memberof PickupCancelRequest
     */
    address?: AddressData;
    /**
     *  The pickup date  Date Format: `YYYY-MM-DD` 
     * @type {string}
     * @memberof PickupCancelRequest
     */
    pickup_date?: string;
    /**
     * The reason of the pickup cancellation
     * @type {string}
     * @memberof PickupCancelRequest
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface PickupData
 */
export interface PickupData {
    /**
     *  The expected pickup date  Date Format: `YYYY-MM-DD` 
     * @type {string}
     * @memberof PickupData
     */
    pickup_date: string;
    /**
     * 
     * @type {AddressData}
     * @memberof PickupData
     */
    address?: AddressData;
    /**
     *  The ready time for pickup.  Time Format: `HH:MM` 
     * @type {string}
     * @memberof PickupData
     */
    ready_time: string;
    /**
     *  The closing or late time of the pickup  Time Format: `HH:MM` 
     * @type {string}
     * @memberof PickupData
     */
    closing_time: string;
    /**
     *  The pickup instruction.  eg: Handle with care. 
     * @type {string}
     * @memberof PickupData
     */
    instruction?: string;
    /**
     *  The package(s) location.  eg: Behind the entrance door. 
     * @type {string}
     * @memberof PickupData
     */
    package_location?: string;
    /**
     * Advanced carrier specific pickup options
     * @type {any}
     * @memberof PickupData
     */
    options?: any;
    /**
     * The list of shipments to be picked up
     * @type {Array<string>}
     * @memberof PickupData
     */
    tracking_numbers: Array<string>;
}
/**
 * 
 * @export
 * @interface PickupRequest
 */
export interface PickupRequest {
    /**
     *  The expected pickup date  Date Format: `YYYY-MM-DD` 
     * @type {string}
     * @memberof PickupRequest
     */
    pickup_date: string;
    /**
     * 
     * @type {AddressData}
     * @memberof PickupRequest
     */
    address: AddressData;
    /**
     * The shipment parcels to pickup.
     * @type {Array<ParcelData>}
     * @memberof PickupRequest
     */
    parcels: Array<ParcelData>;
    /**
     *  The ready time for pickup.  Time Format: `HH:MM` 
     * @type {string}
     * @memberof PickupRequest
     */
    ready_time: string;
    /**
     *  The closing or late time of the pickup  Time Format: `HH:MM` 
     * @type {string}
     * @memberof PickupRequest
     */
    closing_time: string;
    /**
     *  The pickup instruction.  eg: Handle with care. 
     * @type {string}
     * @memberof PickupRequest
     */
    instruction?: string;
    /**
     *  The package(s) location.  eg: Behind the entrance door. 
     * @type {string}
     * @memberof PickupRequest
     */
    package_location?: string;
    /**
     * Advanced carrier specific pickup options
     * @type {any}
     * @memberof PickupRequest
     */
    options?: any;
}
/**
 * 
 * @export
 * @interface PickupResponse
 */
export interface PickupResponse {
    /**
     * The list of note or warning messages
     * @type {Array<Message>}
     * @memberof PickupResponse
     */
    messages?: Array<Message>;
    /**
     * 
     * @type {Pickup}
     * @memberof PickupResponse
     */
    pickup?: Pickup;
}
/**
 * 
 * @export
 * @interface PickupUpdateData
 */
export interface PickupUpdateData {
    /**
     *  The expected pickup date  Date Format: YYYY-MM-DD 
     * @type {string}
     * @memberof PickupUpdateData
     */
    pickup_date?: string;
    /**
     * 
     * @type {AddressData}
     * @memberof PickupUpdateData
     */
    address?: AddressData;
    /**
     * The ready time for pickup.
     * @type {string}
     * @memberof PickupUpdateData
     */
    ready_time?: string;
    /**
     * The closing or late time of the pickup
     * @type {string}
     * @memberof PickupUpdateData
     */
    closing_time?: string;
    /**
     *  The pickup instruction.  eg: Handle with care. 
     * @type {string}
     * @memberof PickupUpdateData
     */
    instruction?: string;
    /**
     *  The package(s) location.  eg: Behind the entrance door. 
     * @type {string}
     * @memberof PickupUpdateData
     */
    package_location?: string;
    /**
     * Advanced carrier specific pickup options
     * @type {any}
     * @memberof PickupUpdateData
     */
    options?: any;
    /**
     * The list of shipments to be picked up
     * @type {Array<string>}
     * @memberof PickupUpdateData
     */
    tracking_numbers?: Array<string>;
    /**
     * pickup identification number
     * @type {string}
     * @memberof PickupUpdateData
     */
    confirmation_number: string;
}
/**
 * 
 * @export
 * @interface PickupUpdateRequest
 */
export interface PickupUpdateRequest {
    /**
     *  The expected pickup date  Date Format: `YYYY-MM-DD` 
     * @type {string}
     * @memberof PickupUpdateRequest
     */
    pickup_date: string;
    /**
     * 
     * @type {Address}
     * @memberof PickupUpdateRequest
     */
    address: Address;
    /**
     * The shipment parcels to pickup.
     * @type {Array<Parcel>}
     * @memberof PickupUpdateRequest
     */
    parcels: Array<Parcel>;
    /**
     * pickup identification number
     * @type {string}
     * @memberof PickupUpdateRequest
     */
    confirmation_number: string;
    /**
     *  The ready time for pickup.  Time Format: `HH:MM` 
     * @type {string}
     * @memberof PickupUpdateRequest
     */
    ready_time: string;
    /**
     *  The closing or late time of the pickup  Time Format: `HH:MM` 
     * @type {string}
     * @memberof PickupUpdateRequest
     */
    closing_time: string;
    /**
     *  The pickup instruction.  eg: Handle with care. 
     * @type {string}
     * @memberof PickupUpdateRequest
     */
    instruction?: string;
    /**
     *  The package(s) location.  eg: Behind the entrance door. 
     * @type {string}
     * @memberof PickupUpdateRequest
     */
    package_location?: string;
    /**
     * Advanced carrier specific pickup options
     * @type {any}
     * @memberof PickupUpdateRequest
     */
    options?: any;
}
/**
 * The list of returned rates
 * @export
 * @interface Rate
 */
export interface Rate {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Rate
     */
    id?: string;
    /**
     * The rate's carrier
     * @type {string}
     * @memberof Rate
     */
    carrier_name: string;
    /**
     * The targeted carrier's name (unique identifier)
     * @type {string}
     * @memberof Rate
     */
    carrier_id: string;
    /**
     * The rate monetary values currency code
     * @type {string}
     * @memberof Rate
     */
    currency: string;
    /**
     * The carrier's rate (quote) service
     * @type {string}
     * @memberof Rate
     */
    service?: string;
    /**
     * The monetary amount of the discount on the rate
     * @type {number}
     * @memberof Rate
     */
    discount?: number;
    /**
     *  The rate's monetary amount of the base charge.<br/> This is the net amount of the rate before additional charges 
     * @type {number}
     * @memberof Rate
     */
    base_charge?: number;
    /**
     *  The rate's monetary amount of the total charge.<br/> This is the gross amount of the rate after adding the additional charges 
     * @type {number}
     * @memberof Rate
     */
    total_charge?: number;
    /**
     * The monetary amount of the duties and taxes if applied
     * @type {number}
     * @memberof Rate
     */
    duties_and_taxes?: number;
    /**
     * The estimated delivery transit days
     * @type {number}
     * @memberof Rate
     */
    transit_days?: number;
    /**
     * list of the rate's additional charges
     * @type {Array<Charge>}
     * @memberof Rate
     */
    extra_charges?: Array<Charge>;
    /**
     * provider specific metadata
     * @type {any}
     * @memberof Rate
     */
    meta?: any;
    /**
     * The system carrier configuration id
     * @type {string}
     * @memberof Rate
     */
    carrier_ref?: string;
    /**
     * Specified whether it was created with a carrier in test mode
     * @type {boolean}
     * @memberof Rate
     */
    test_mode: boolean;
}
/**
 * 
 * @export
 * @interface RateRequest
 */
export interface RateRequest {
    /**
     * 
     * @type {Address}
     * @memberof RateRequest
     */
    shipper: Address;
    /**
     * 
     * @type {Address}
     * @memberof RateRequest
     */
    recipient: Address;
    /**
     * The shipment's parcels
     * @type {Array<Parcel>}
     * @memberof RateRequest
     */
    parcels: Array<Parcel>;
    /**
     *  The requested carrier service for the shipment.<br/> Please consult [the reference](#operation/references) for specific carriers services.  Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier. 
     * @type {Array<string>}
     * @memberof RateRequest
     */
    services?: Array<string>;
    /**
     *  The options available for the shipment.  Please consult [the reference](#operation/references) for additional specific carriers options. 
     * @type {any}
     * @memberof RateRequest
     */
    options?: any;
    /**
     * The shipment reference
     * @type {string}
     * @memberof RateRequest
     */
    reference?: string;
    /**
     *  The list of configured carriers you wish to get rates from. 
     * @type {Array<string>}
     * @memberof RateRequest
     */
    carrier_ids?: Array<string>;
}
/**
 * 
 * @export
 * @interface RateResponse
 */
export interface RateResponse {
    /**
     * The list of note or warning messages
     * @type {Array<Message>}
     * @memberof RateResponse
     */
    messages?: Array<Message>;
    /**
     * The list of returned rates
     * @type {Array<Rate>}
     * @memberof RateResponse
     */
    rates: Array<Rate>;
}
/**
 * 
 * @export
 * @interface References
 */
export interface References {
    /**
     * 
     * @type {any}
     * @memberof References
     */
    countries: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    currencies: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    carriers: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    customs_content_type: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    incoterms: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    states: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    services: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    options: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    package_presets: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    packaging_types: any;
    /**
     * 
     * @type {any}
     * @memberof References
     */
    payment_types: any;
}
/**
 * 
 * @export
 * @interface Shipment
 */
export interface Shipment {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Shipment
     */
    id?: string;
    /**
     * The current Shipment status
     * @type {string}
     * @memberof Shipment
     */
    status?: Shipment.StatusEnum;
    /**
     * The shipment carrier
     * @type {string}
     * @memberof Shipment
     */
    carrier_name?: string;
    /**
     * The shipment carrier configured identifier
     * @type {string}
     * @memberof Shipment
     */
    carrier_id?: string;
    /**
     * The shipment label in base64 string
     * @type {string}
     * @memberof Shipment
     */
    label?: string;
    /**
     * The shipment tracking number
     * @type {string}
     * @memberof Shipment
     */
    tracking_number?: string;
    /**
     * The shipment carrier system identifier
     * @type {string}
     * @memberof Shipment
     */
    shipment_identifier?: string;
    /**
     * 
     * @type {Rate}
     * @memberof Shipment
     */
    selected_rate?: Rate;
    /**
     * The shipment selected rate.
     * @type {string}
     * @memberof Shipment
     */
    selected_rate_id?: string;
    /**
     * The list for shipment rates fetched previously
     * @type {Array<Rate>}
     * @memberof Shipment
     */
    rates?: Array<Rate>;
    /**
     * The shipment tracking url
     * @type {string}
     * @memberof Shipment
     */
    tracking_url?: string;
    /**
     * The selected service
     * @type {string}
     * @memberof Shipment
     */
    service?: string;
    /**
     * 
     * @type {Address}
     * @memberof Shipment
     */
    shipper: Address;
    /**
     * 
     * @type {Address}
     * @memberof Shipment
     */
    recipient: Address;
    /**
     * The shipment's parcels
     * @type {Array<Parcel>}
     * @memberof Shipment
     */
    parcels: Array<Parcel>;
    /**
     *  The carriers services requested for the shipment.  Please consult [the reference](#operation/references) for specific carriers services.<br/> Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier. 
     * @type {Array<string>}
     * @memberof Shipment
     */
    services?: Array<string>;
    /**
     *  The options available for the shipment.<br/> Please consult [the reference](#operation/references) for additional specific carriers options. 
     * @type {any}
     * @memberof Shipment
     */
    options?: any;
    /**
     * 
     * @type {Payment}
     * @memberof Shipment
     */
    payment?: Payment;
    /**
     * 
     * @type {Customs}
     * @memberof Shipment
     */
    customs?: Customs;
    /**
     * The shipment reference
     * @type {string}
     * @memberof Shipment
     */
    reference?: string;
    /**
     * The shipment label file type.
     * @type {string}
     * @memberof Shipment
     */
    label_type?: Shipment.LabelTypeEnum;
    /**
     *  The list of configured carriers you wish to get rates from.  *Note that the request will be sent to all carriers in nothing is specified* 
     * @type {Array<string>}
     * @memberof Shipment
     */
    carrier_ids?: Array<string>;
    /**
     * provider specific metadata
     * @type {any}
     * @memberof Shipment
     */
    meta?: any;
    /**
     *  The shipment creation date  Date Format: `YYYY-MM-DD` 
     * @type {string}
     * @memberof Shipment
     */
    created_at: string;
    /**
     * Specified whether it was created with a carrier in test mode
     * @type {boolean}
     * @memberof Shipment
     */
    test_mode: boolean;
    /**
     * The list of note or warning messages
     * @type {Array<Message>}
     * @memberof Shipment
     */
    messages?: Array<Message>;
}

/**
 * @export
 * @namespace Shipment
 */
export namespace Shipment {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Created = <any> 'created',
        Purchased = <any> 'purchased',
        Transit = <any> 'transit',
        Delivered = <any> 'delivered'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LabelTypeEnum {
        PDF = <any> 'PDF',
        ZPL = <any> 'ZPL'
    }
}
/**
 * 
 * @export
 * @interface ShipmentCancelRequest
 */
export interface ShipmentCancelRequest {
    /**
     * The shipment identifier returned during creation
     * @type {string}
     * @memberof ShipmentCancelRequest
     */
    shipment_identifier: string;
    /**
     * The selected shipment service
     * @type {string}
     * @memberof ShipmentCancelRequest
     */
    service?: string;
    /**
     * Advanced carrier specific cancellation options
     * @type {any}
     * @memberof ShipmentCancelRequest
     */
    options?: any;
}
/**
 * 
 * @export
 * @interface ShipmentData
 */
export interface ShipmentData {
    /**
     * 
     * @type {AddressData}
     * @memberof ShipmentData
     */
    shipper: AddressData;
    /**
     * 
     * @type {AddressData}
     * @memberof ShipmentData
     */
    recipient: AddressData;
    /**
     * The shipment's parcels
     * @type {Array<ParcelData>}
     * @memberof ShipmentData
     */
    parcels: Array<ParcelData>;
    /**
     *  The options available for the shipment.<br/> Please consult [the reference](#operation/references) for additional specific carriers options. 
     * @type {any}
     * @memberof ShipmentData
     */
    options?: any;
    /**
     * 
     * @type {PaymentData}
     * @memberof ShipmentData
     */
    payment?: PaymentData;
    /**
     * 
     * @type {CustomsData}
     * @memberof ShipmentData
     */
    customs?: CustomsData;
    /**
     * The shipment reference
     * @type {string}
     * @memberof ShipmentData
     */
    reference?: string;
    /**
     * The shipment label file type.
     * @type {string}
     * @memberof ShipmentData
     */
    label_type?: ShipmentData.LabelTypeEnum;
    /**
     *  The requested carrier service for the shipment.  Please consult [the reference](#operation/references) for specific carriers services.<br/> Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier. 
     * @type {Array<string>}
     * @memberof ShipmentData
     */
    services?: Array<string>;
    /**
     *  The list of configured carriers you wish to get rates from.  *Note that the request will be sent to all carriers in nothing is specified* 
     * @type {Array<string>}
     * @memberof ShipmentData
     */
    carrier_ids?: Array<string>;
}

/**
 * @export
 * @namespace ShipmentData
 */
export namespace ShipmentData {
    /**
     * @export
     * @enum {string}
     */
    export enum LabelTypeEnum {
        PDF = <any> 'PDF',
        ZPL = <any> 'ZPL'
    }
}
/**
 * 
 * @export
 * @interface ShipmentPurchaseData
 */
export interface ShipmentPurchaseData {
    /**
     * The shipment selected rate.
     * @type {string}
     * @memberof ShipmentPurchaseData
     */
    selected_rate_id: string;
    /**
     * The shipment label file type.
     * @type {string}
     * @memberof ShipmentPurchaseData
     */
    label_type?: ShipmentPurchaseData.LabelTypeEnum;
    /**
     * 
     * @type {Payment}
     * @memberof ShipmentPurchaseData
     */
    payment?: Payment;
}

/**
 * @export
 * @namespace ShipmentPurchaseData
 */
export namespace ShipmentPurchaseData {
    /**
     * @export
     * @enum {string}
     */
    export enum LabelTypeEnum {
        PDF = <any> 'PDF',
        ZPL = <any> 'ZPL'
    }
}
/**
 * 
 * @export
 * @interface ShippingRequest
 */
export interface ShippingRequest {
    /**
     * 
     * @type {AddressData}
     * @memberof ShippingRequest
     */
    shipper: AddressData;
    /**
     * 
     * @type {AddressData}
     * @memberof ShippingRequest
     */
    recipient: AddressData;
    /**
     * The shipment's parcels
     * @type {Array<ParcelData>}
     * @memberof ShippingRequest
     */
    parcels: Array<ParcelData>;
    /**
     *  The options available for the shipment.<br/> Please consult [the reference](#operation/references) for additional specific carriers options. 
     * @type {any}
     * @memberof ShippingRequest
     */
    options?: any;
    /**
     * 
     * @type {Payment}
     * @memberof ShippingRequest
     */
    payment: Payment;
    /**
     * 
     * @type {CustomsData}
     * @memberof ShippingRequest
     */
    customs?: CustomsData;
    /**
     * The shipment reference
     * @type {string}
     * @memberof ShippingRequest
     */
    reference?: string;
    /**
     * The shipment label file type.
     * @type {string}
     * @memberof ShippingRequest
     */
    label_type?: ShippingRequest.LabelTypeEnum;
    /**
     * The shipment selected rate.
     * @type {string}
     * @memberof ShippingRequest
     */
    selected_rate_id: string;
    /**
     * The list for shipment rates fetched previously
     * @type {Array<Rate>}
     * @memberof ShippingRequest
     */
    rates: Array<Rate>;
}

/**
 * @export
 * @namespace ShippingRequest
 */
export namespace ShippingRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum LabelTypeEnum {
        PDF = <any> 'PDF',
        ZPL = <any> 'ZPL'
    }
}
/**
 * The tracking details events
 * @export
 * @interface TrackingEvent
 */
export interface TrackingEvent {
    /**
     * The tracking event's date
     * @type {string}
     * @memberof TrackingEvent
     */
    date: string;
    /**
     * The tracking event's description
     * @type {string}
     * @memberof TrackingEvent
     */
    description: string;
    /**
     * The tracking event's location
     * @type {string}
     * @memberof TrackingEvent
     */
    location: string;
    /**
     * The tracking event's code
     * @type {string}
     * @memberof TrackingEvent
     */
    code?: string;
    /**
     * The tracking event's time
     * @type {string}
     * @memberof TrackingEvent
     */
    time?: string;
    /**
     * The tracking signature on delivery
     * @type {string}
     * @memberof TrackingEvent
     */
    signatory?: string;
}
/**
 * 
 * @export
 * @interface TrackingResponse
 */
export interface TrackingResponse {
    /**
     * The list of note or warning messages
     * @type {Array<Message>}
     * @memberof TrackingResponse
     */
    messages?: Array<Message>;
    /**
     * 
     * @type {TrackingStatus}
     * @memberof TrackingResponse
     */
    tracking?: TrackingStatus;
}
/**
 * The tracking details retrieved
 * @export
 * @interface TrackingStatus
 */
export interface TrackingStatus {
    /**
     * A unique identifier
     * @type {string}
     * @memberof TrackingStatus
     */
    id?: string;
    /**
     * The tracking carrier
     * @type {string}
     * @memberof TrackingStatus
     */
    carrier_name: string;
    /**
     * The tracking carrier configured identifier
     * @type {string}
     * @memberof TrackingStatus
     */
    carrier_id: string;
    /**
     * The shipment tracking number
     * @type {string}
     * @memberof TrackingStatus
     */
    tracking_number: string;
    /**
     * The tracking details events
     * @type {Array<TrackingEvent>}
     * @memberof TrackingStatus
     */
    events?: Array<TrackingEvent>;
    /**
     * Specified whether it was created with a carrier in test mode
     * @type {boolean}
     * @memberof TrackingStatus
     */
    test_mode: boolean;
}
/**
 * AddressesApi - fetch parameter creator
 * @export
 */
export const AddressesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new address.
         * @summary Create an address
         * @param {AddressData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: AddressData, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/addresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddressData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all addresses.
         * @summary List all addresses
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/addresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an address.
         * @summary Retrieve an address
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieve.');
            }
            const localVarPath = `/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an address.
         * @summary Update an address
         * @param {AddressData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: AddressData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update.');
            }
            const localVarPath = `/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddressData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesApi - functional programming interface
 * @export
 */
export const AddressesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new address.
         * @summary Create an address
         * @param {AddressData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: AddressData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Address> {
            const localVarFetchArgs = AddressesApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all addresses.
         * @summary List all addresses
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Address>> {
            const localVarFetchArgs = AddressesApiFetchParamCreator(configuration).list(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve an address.
         * @summary Retrieve an address
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Address> {
            const localVarFetchArgs = AddressesApiFetchParamCreator(configuration).retrieve(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * update an address.
         * @summary Update an address
         * @param {AddressData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: AddressData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Address> {
            const localVarFetchArgs = AddressesApiFetchParamCreator(configuration).update(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AddressesApi - factory interface
 * @export
 */
export const AddressesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a new address.
         * @summary Create an address
         * @param {AddressData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: AddressData, options?: any) {
            return AddressesApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * Retrieve all addresses.
         * @summary List all addresses
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any) {
            return AddressesApiFp(configuration).list(limit, offset, options)(fetch, basePath);
        },
        /**
         * Retrieve an address.
         * @summary Retrieve an address
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any) {
            return AddressesApiFp(configuration).retrieve(id, options)(fetch, basePath);
        },
        /**
         * update an address.
         * @summary Update an address
         * @param {AddressData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: AddressData, id: string, options?: any) {
            return AddressesApiFp(configuration).update(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export class AddressesApi extends BaseAPI {
    /**
     * Create a new address.
     * @summary Create an address
     * @param {AddressData} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public create(body: AddressData, options?: any) {
        return AddressesApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all addresses.
     * @summary List all addresses
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public list(limit?: number, offset?: number, options?: any) {
        return AddressesApiFp(this.configuration).list(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve an address.
     * @summary Retrieve an address
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public retrieve(id: string, options?: any) {
        return AddressesApiFp(this.configuration).retrieve(id, options)(this.fetch, this.basePath);
    }

    /**
     * update an address.
     * @summary Update an address
     * @param {AddressData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public update(body: AddressData, id: string, options?: any) {
        return AddressesApiFp(this.configuration).update(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * CarriersApi - fetch parameter creator
 * @export
 */
export const CarriersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of configured carriers
         * @summary List all carriers
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [carrier_name] Indicates a carrier (type)
         * @param {boolean} [test] The test flag filter carrier configured in test mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, carrier_name?: string, test?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/carriers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (carrier_name !== undefined) {
                localVarQueryParameter['carrier_name'] = carrier_name;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarriersApi - functional programming interface
 * @export
 */
export const CarriersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the list of configured carriers
         * @summary List all carriers
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [carrier_name] Indicates a carrier (type)
         * @param {boolean} [test] The test flag filter carrier configured in test mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, carrier_name?: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CarrierSettings>> {
            const localVarFetchArgs = CarriersApiFetchParamCreator(configuration).list(limit, offset, carrier_name, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CarriersApi - factory interface
 * @export
 */
export const CarriersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns the list of configured carriers
         * @summary List all carriers
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [carrier_name] Indicates a carrier (type)
         * @param {boolean} [test] The test flag filter carrier configured in test mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, carrier_name?: string, test?: boolean, options?: any) {
            return CarriersApiFp(configuration).list(limit, offset, carrier_name, test, options)(fetch, basePath);
        },
    };
};

/**
 * CarriersApi - object-oriented interface
 * @export
 * @class CarriersApi
 * @extends {BaseAPI}
 */
export class CarriersApi extends BaseAPI {
    /**
     * Returns the list of configured carriers
     * @summary List all carriers
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [carrier_name] Indicates a carrier (type)
     * @param {boolean} [test] The test flag filter carrier configured in test mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApi
     */
    public list(limit?: number, offset?: number, carrier_name?: string, test?: boolean, options?: any) {
        return CarriersApiFp(this.configuration).list(limit, offset, carrier_name, test, options)(this.fetch, this.basePath);
    }

}
/**
 * CustomsApi - fetch parameter creator
 * @export
 */
export const CustomsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new customs declaration.
         * @summary Create a customs info
         * @param {CustomsData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CustomsData, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/customs_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CustomsData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Discard a customs declaration.
         * @summary Discard a customs info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discard(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling discard.');
            }
            const localVarPath = `/customs_info/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all stored customs declarations.
         * @summary List all customs info
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/customs_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve customs declaration.
         * @summary Retrieve a customs info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieve.');
            }
            const localVarPath = `/customs_info/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * modify an existing customs declaration.
         * @summary Update a customs info
         * @param {CustomsData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: CustomsData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update.');
            }
            const localVarPath = `/customs_info/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CustomsData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomsApi - functional programming interface
 * @export
 */
export const CustomsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new customs declaration.
         * @summary Create a customs info
         * @param {CustomsData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CustomsData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customs> {
            const localVarFetchArgs = CustomsApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Discard a customs declaration.
         * @summary Discard a customs info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discard(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Operation> {
            const localVarFetchArgs = CustomsApiFetchParamCreator(configuration).discard(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all stored customs declarations.
         * @summary List all customs info
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Customs>> {
            const localVarFetchArgs = CustomsApiFetchParamCreator(configuration).list(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve customs declaration.
         * @summary Retrieve a customs info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customs> {
            const localVarFetchArgs = CustomsApiFetchParamCreator(configuration).retrieve(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * modify an existing customs declaration.
         * @summary Update a customs info
         * @param {CustomsData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: CustomsData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customs> {
            const localVarFetchArgs = CustomsApiFetchParamCreator(configuration).update(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CustomsApi - factory interface
 * @export
 */
export const CustomsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a new customs declaration.
         * @summary Create a customs info
         * @param {CustomsData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CustomsData, options?: any) {
            return CustomsApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * Discard a customs declaration.
         * @summary Discard a customs info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discard(id: string, options?: any) {
            return CustomsApiFp(configuration).discard(id, options)(fetch, basePath);
        },
        /**
         * Retrieve all stored customs declarations.
         * @summary List all customs info
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any) {
            return CustomsApiFp(configuration).list(limit, offset, options)(fetch, basePath);
        },
        /**
         * Retrieve customs declaration.
         * @summary Retrieve a customs info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any) {
            return CustomsApiFp(configuration).retrieve(id, options)(fetch, basePath);
        },
        /**
         * modify an existing customs declaration.
         * @summary Update a customs info
         * @param {CustomsData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: CustomsData, id: string, options?: any) {
            return CustomsApiFp(configuration).update(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * CustomsApi - object-oriented interface
 * @export
 * @class CustomsApi
 * @extends {BaseAPI}
 */
export class CustomsApi extends BaseAPI {
    /**
     * Create a new customs declaration.
     * @summary Create a customs info
     * @param {CustomsData} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomsApi
     */
    public create(body: CustomsData, options?: any) {
        return CustomsApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * Discard a customs declaration.
     * @summary Discard a customs info
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomsApi
     */
    public discard(id: string, options?: any) {
        return CustomsApiFp(this.configuration).discard(id, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all stored customs declarations.
     * @summary List all customs info
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomsApi
     */
    public list(limit?: number, offset?: number, options?: any) {
        return CustomsApiFp(this.configuration).list(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve customs declaration.
     * @summary Retrieve a customs info
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomsApi
     */
    public retrieve(id: string, options?: any) {
        return CustomsApiFp(this.configuration).retrieve(id, options)(this.fetch, this.basePath);
    }

    /**
     * modify an existing customs declaration.
     * @summary Update a customs info
     * @param {CustomsData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomsApi
     */
    public update(body: CustomsData, id: string, options?: any) {
        return CustomsApiFp(this.configuration).update(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * ParcelsApi - fetch parameter creator
 * @export
 */
export const ParcelsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new parcel.
         * @summary Create a parcel
         * @param {ParcelData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: ParcelData, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/parcels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParcelData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a parcel.
         * @summary Remove a parcel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discard(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling discard.');
            }
            const localVarPath = `/parcels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all stored parcels.
         * @summary List all parcels
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/parcels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a parcel.
         * @summary Retrieve a parcel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieve.');
            }
            const localVarPath = `/parcels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * modify an existing parcel's details.
         * @summary Update a parcel
         * @param {ParcelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: ParcelData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update.');
            }
            const localVarPath = `/parcels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParcelData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParcelsApi - functional programming interface
 * @export
 */
export const ParcelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new parcel.
         * @summary Create a parcel
         * @param {ParcelData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: ParcelData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Parcel> {
            const localVarFetchArgs = ParcelsApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove a parcel.
         * @summary Remove a parcel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discard(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Operation> {
            const localVarFetchArgs = ParcelsApiFetchParamCreator(configuration).discard(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all stored parcels.
         * @summary List all parcels
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Parcel>> {
            const localVarFetchArgs = ParcelsApiFetchParamCreator(configuration).list(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a parcel.
         * @summary Retrieve a parcel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Parcel> {
            const localVarFetchArgs = ParcelsApiFetchParamCreator(configuration).retrieve(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * modify an existing parcel's details.
         * @summary Update a parcel
         * @param {ParcelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: ParcelData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Parcel> {
            const localVarFetchArgs = ParcelsApiFetchParamCreator(configuration).update(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ParcelsApi - factory interface
 * @export
 */
export const ParcelsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a new parcel.
         * @summary Create a parcel
         * @param {ParcelData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: ParcelData, options?: any) {
            return ParcelsApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * Remove a parcel.
         * @summary Remove a parcel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discard(id: string, options?: any) {
            return ParcelsApiFp(configuration).discard(id, options)(fetch, basePath);
        },
        /**
         * Retrieve all stored parcels.
         * @summary List all parcels
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any) {
            return ParcelsApiFp(configuration).list(limit, offset, options)(fetch, basePath);
        },
        /**
         * Retrieve a parcel.
         * @summary Retrieve a parcel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any) {
            return ParcelsApiFp(configuration).retrieve(id, options)(fetch, basePath);
        },
        /**
         * modify an existing parcel's details.
         * @summary Update a parcel
         * @param {ParcelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: ParcelData, id: string, options?: any) {
            return ParcelsApiFp(configuration).update(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * ParcelsApi - object-oriented interface
 * @export
 * @class ParcelsApi
 * @extends {BaseAPI}
 */
export class ParcelsApi extends BaseAPI {
    /**
     * Create a new parcel.
     * @summary Create a parcel
     * @param {ParcelData} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParcelsApi
     */
    public create(body: ParcelData, options?: any) {
        return ParcelsApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * Remove a parcel.
     * @summary Remove a parcel
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParcelsApi
     */
    public discard(id: string, options?: any) {
        return ParcelsApiFp(this.configuration).discard(id, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all stored parcels.
     * @summary List all parcels
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParcelsApi
     */
    public list(limit?: number, offset?: number, options?: any) {
        return ParcelsApiFp(this.configuration).list(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve a parcel.
     * @summary Retrieve a parcel
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParcelsApi
     */
    public retrieve(id: string, options?: any) {
        return ParcelsApiFp(this.configuration).retrieve(id, options)(this.fetch, this.basePath);
    }

    /**
     * modify an existing parcel's details.
     * @summary Update a parcel
     * @param {ParcelData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParcelsApi
     */
    public update(body: ParcelData, id: string, options?: any) {
        return ParcelsApiFp(this.configuration).update(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * PickupsApi - fetch parameter creator
 * @export
 */
export const PickupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a pickup of one or more shipments.
         * @summary Cancel a pickup
         * @param {PickupCancelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(body: PickupCancelData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cancel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancel.');
            }
            const localVarPath = `/pickups/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PickupCancelData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all scheduled pickups.
         * @summary List shipment pickups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/pickups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a scheduled pickup.
         * @summary Retrieve a pickup
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieve.');
            }
            const localVarPath = `/pickups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule a pickup for one or many shipments with labels already purchased.
         * @summary Schedule a pickup
         * @param {PickupData} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedule(body: PickupData, carrier_name: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling schedule.');
            }
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling schedule.');
            }
            const localVarPath = `/pickups/{carrier_name}/schedule`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PickupData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a pickup for one or many shipments with labels already purchased.
         * @summary Update a pickup
         * @param {PickupUpdateData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: PickupUpdateData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update.');
            }
            const localVarPath = `/pickups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PickupUpdateData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PickupsApi - functional programming interface
 * @export
 */
export const PickupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Cancel a pickup of one or more shipments.
         * @summary Cancel a pickup
         * @param {PickupCancelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(body: PickupCancelData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationConfirmation> {
            const localVarFetchArgs = PickupsApiFetchParamCreator(configuration).cancel(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all scheduled pickups.
         * @summary List shipment pickups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pickup>> {
            const localVarFetchArgs = PickupsApiFetchParamCreator(configuration).list(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a scheduled pickup.
         * @summary Retrieve a pickup
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Pickup> {
            const localVarFetchArgs = PickupsApiFetchParamCreator(configuration).retrieve(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Schedule a pickup for one or many shipments with labels already purchased.
         * @summary Schedule a pickup
         * @param {PickupData} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedule(body: PickupData, carrier_name: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Pickup> {
            const localVarFetchArgs = PickupsApiFetchParamCreator(configuration).schedule(body, carrier_name, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Modify a pickup for one or many shipments with labels already purchased.
         * @summary Update a pickup
         * @param {PickupUpdateData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: PickupUpdateData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationConfirmation> {
            const localVarFetchArgs = PickupsApiFetchParamCreator(configuration).update(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PickupsApi - factory interface
 * @export
 */
export const PickupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Cancel a pickup of one or more shipments.
         * @summary Cancel a pickup
         * @param {PickupCancelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(body: PickupCancelData, id: string, options?: any) {
            return PickupsApiFp(configuration).cancel(body, id, options)(fetch, basePath);
        },
        /**
         * Retrieve all scheduled pickups.
         * @summary List shipment pickups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any) {
            return PickupsApiFp(configuration).list(limit, offset, options)(fetch, basePath);
        },
        /**
         * Retrieve a scheduled pickup.
         * @summary Retrieve a pickup
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any) {
            return PickupsApiFp(configuration).retrieve(id, options)(fetch, basePath);
        },
        /**
         * Schedule a pickup for one or many shipments with labels already purchased.
         * @summary Schedule a pickup
         * @param {PickupData} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedule(body: PickupData, carrier_name: string, test?: boolean, options?: any) {
            return PickupsApiFp(configuration).schedule(body, carrier_name, test, options)(fetch, basePath);
        },
        /**
         * Modify a pickup for one or many shipments with labels already purchased.
         * @summary Update a pickup
         * @param {PickupUpdateData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: PickupUpdateData, id: string, options?: any) {
            return PickupsApiFp(configuration).update(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * PickupsApi - object-oriented interface
 * @export
 * @class PickupsApi
 * @extends {BaseAPI}
 */
export class PickupsApi extends BaseAPI {
    /**
     * Cancel a pickup of one or more shipments.
     * @summary Cancel a pickup
     * @param {PickupCancelData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickupsApi
     */
    public cancel(body: PickupCancelData, id: string, options?: any) {
        return PickupsApiFp(this.configuration).cancel(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all scheduled pickups.
     * @summary List shipment pickups
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickupsApi
     */
    public list(limit?: number, offset?: number, options?: any) {
        return PickupsApiFp(this.configuration).list(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve a scheduled pickup.
     * @summary Retrieve a pickup
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickupsApi
     */
    public retrieve(id: string, options?: any) {
        return PickupsApiFp(this.configuration).retrieve(id, options)(this.fetch, this.basePath);
    }

    /**
     * Schedule a pickup for one or many shipments with labels already purchased.
     * @summary Schedule a pickup
     * @param {PickupData} body 
     * @param {string} carrier_name 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickupsApi
     */
    public schedule(body: PickupData, carrier_name: string, test?: boolean, options?: any) {
        return PickupsApiFp(this.configuration).schedule(body, carrier_name, test, options)(this.fetch, this.basePath);
    }

    /**
     * Modify a pickup for one or many shipments with labels already purchased.
     * @summary Update a pickup
     * @param {PickupUpdateData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickupsApi
     */
    public update(body: PickupUpdateData, id: string, options?: any) {
        return PickupsApiFp(this.configuration).update(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * ProxyApi - fetch parameter creator
 * @export
 */
export const ProxyApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
         * @summary Buy a shipment label
         * @param {ShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyLabel(body: ShippingRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling buyLabel.');
            }
            const localVarPath = `/proxy/shipping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ShippingRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a pickup previously scheduled
         * @summary Cancel a pickup
         * @param {PickupCancelRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPickup(body: PickupCancelRequest, carrier_name: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cancelPickup.');
            }
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling cancelPickup.');
            }
            const localVarPath = `/proxy/pickups/{carrier_name}/cancel`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PickupCancelRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available. 
         * @summary Fetch shipment rates
         * @param {RateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(body: RateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fetch.');
            }
            const localVarPath = `/proxy/rates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule one or many parcels pickup
         * @summary Schedule a pickup
         * @param {PickupRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulePickup(body: PickupRequest, carrier_name: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling schedulePickup.');
            }
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling schedulePickup.');
            }
            const localVarPath = `/proxy/pickups/{carrier_name}`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PickupRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can track a shipment by specifying the carrier and the shipment tracking number.
         * @summary Track a shipment
         * @param {string} carrier_name 
         * @param {string} tracking_number 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackShipment(carrier_name: string, tracking_number: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling trackShipment.');
            }
            // verify required parameter 'tracking_number' is not null or undefined
            if (tracking_number === null || tracking_number === undefined) {
                throw new RequiredError('tracking_number','Required parameter tracking_number was null or undefined when calling trackShipment.');
            }
            const localVarPath = `/proxy/tracking/{carrier_name}/{tracking_number}`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)))
                .replace(`{${"tracking_number"}}`, encodeURIComponent(String(tracking_number)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a scheduled pickup
         * @summary Update a pickup
         * @param {PickupUpdateRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePickup(body: PickupUpdateRequest, carrier_name: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePickup.');
            }
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling updatePickup.');
            }
            const localVarPath = `/proxy/pickups/{carrier_name}`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PickupUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a shipment and the label previously created
         * @summary Void a shipment label
         * @param {ShipmentCancelRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidLabel(body: ShipmentCancelRequest, carrier_name: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling voidLabel.');
            }
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling voidLabel.');
            }
            const localVarPath = `/proxy/shipping/{carrier_name}/cancel`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ShipmentCancelRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProxyApi - functional programming interface
 * @export
 */
export const ProxyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
         * @summary Buy a shipment label
         * @param {ShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyLabel(body: ShippingRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).buyLabel(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Cancel a pickup previously scheduled
         * @summary Cancel a pickup
         * @param {PickupCancelRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPickup(body: PickupCancelRequest, carrier_name: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResponse> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).cancelPickup(body, carrier_name, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available. 
         * @summary Fetch shipment rates
         * @param {RateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(body: RateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RateResponse> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).fetch(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Schedule one or many parcels pickup
         * @summary Schedule a pickup
         * @param {PickupRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulePickup(body: PickupRequest, carrier_name: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PickupResponse> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).schedulePickup(body, carrier_name, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * You can track a shipment by specifying the carrier and the shipment tracking number.
         * @summary Track a shipment
         * @param {string} carrier_name 
         * @param {string} tracking_number 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackShipment(carrier_name: string, tracking_number: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrackingResponse> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).trackShipment(carrier_name, tracking_number, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Modify a scheduled pickup
         * @summary Update a pickup
         * @param {PickupUpdateRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePickup(body: PickupUpdateRequest, carrier_name: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PickupResponse> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).updatePickup(body, carrier_name, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Cancel a shipment and the label previously created
         * @summary Void a shipment label
         * @param {ShipmentCancelRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidLabel(body: ShipmentCancelRequest, carrier_name: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResponse> {
            const localVarFetchArgs = ProxyApiFetchParamCreator(configuration).voidLabel(body, carrier_name, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProxyApi - factory interface
 * @export
 */
export const ProxyApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
         * @summary Buy a shipment label
         * @param {ShippingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyLabel(body: ShippingRequest, options?: any) {
            return ProxyApiFp(configuration).buyLabel(body, options)(fetch, basePath);
        },
        /**
         * Cancel a pickup previously scheduled
         * @summary Cancel a pickup
         * @param {PickupCancelRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPickup(body: PickupCancelRequest, carrier_name: string, test?: boolean, options?: any) {
            return ProxyApiFp(configuration).cancelPickup(body, carrier_name, test, options)(fetch, basePath);
        },
        /**
         *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available. 
         * @summary Fetch shipment rates
         * @param {RateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(body: RateRequest, options?: any) {
            return ProxyApiFp(configuration).fetch(body, options)(fetch, basePath);
        },
        /**
         * Schedule one or many parcels pickup
         * @summary Schedule a pickup
         * @param {PickupRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulePickup(body: PickupRequest, carrier_name: string, test?: boolean, options?: any) {
            return ProxyApiFp(configuration).schedulePickup(body, carrier_name, test, options)(fetch, basePath);
        },
        /**
         * You can track a shipment by specifying the carrier and the shipment tracking number.
         * @summary Track a shipment
         * @param {string} carrier_name 
         * @param {string} tracking_number 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackShipment(carrier_name: string, tracking_number: string, test?: boolean, options?: any) {
            return ProxyApiFp(configuration).trackShipment(carrier_name, tracking_number, test, options)(fetch, basePath);
        },
        /**
         * Modify a scheduled pickup
         * @summary Update a pickup
         * @param {PickupUpdateRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePickup(body: PickupUpdateRequest, carrier_name: string, test?: boolean, options?: any) {
            return ProxyApiFp(configuration).updatePickup(body, carrier_name, test, options)(fetch, basePath);
        },
        /**
         * Cancel a shipment and the label previously created
         * @summary Void a shipment label
         * @param {ShipmentCancelRequest} body 
         * @param {string} carrier_name 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidLabel(body: ShipmentCancelRequest, carrier_name: string, test?: boolean, options?: any) {
            return ProxyApiFp(configuration).voidLabel(body, carrier_name, test, options)(fetch, basePath);
        },
    };
};

/**
 * ProxyApi - object-oriented interface
 * @export
 * @class ProxyApi
 * @extends {AlternateBaseAPI}
 */
export class ProxyApi extends AlternateBaseAPI {
    /**
     * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
     * @summary Buy a shipment label
     * @param {ShippingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public buyLabel(body: ShippingRequest, options?: any) {
        return ProxyApiFp(this.configuration).buyLabel(body, options)(this.fetchAPI, this.basePath);
    }

    /**
     * Cancel a pickup previously scheduled
     * @summary Cancel a pickup
     * @param {PickupCancelRequest} body 
     * @param {string} carrier_name 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public cancelPickup(body: PickupCancelRequest, carrier_name: string, test?: boolean, options?: any) {
        return ProxyApiFp(this.configuration).cancelPickup(body, carrier_name, test, options)(this.fetchAPI, this.basePath);
    }

    /**
     *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available. 
     * @summary Fetch shipment rates
     * @param {RateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public fetch(body: RateRequest, options?: any) {
        return ProxyApiFp(this.configuration).fetch(body, options)(this.fetchAPI, this.basePath);
    }

    /**
     * Schedule one or many parcels pickup
     * @summary Schedule a pickup
     * @param {PickupRequest} body 
     * @param {string} carrier_name 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public schedulePickup(body: PickupRequest, carrier_name: string, test?: boolean, options?: any) {
        return ProxyApiFp(this.configuration).schedulePickup(body, carrier_name, test, options)(this.fetchAPI, this.basePath);
    }

    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * @summary Track a shipment
     * @param {string} carrier_name 
     * @param {string} tracking_number 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public trackShipment(carrier_name: string, tracking_number: string, test?: boolean, options?: any) {
        return ProxyApiFp(this.configuration).trackShipment(carrier_name, tracking_number, test, options)(this.fetchAPI, this.basePath);
    }

    /**
     * Modify a scheduled pickup
     * @summary Update a pickup
     * @param {PickupUpdateRequest} body 
     * @param {string} carrier_name 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public updatePickup(body: PickupUpdateRequest, carrier_name: string, test?: boolean, options?: any) {
        return ProxyApiFp(this.configuration).updatePickup(body, carrier_name, test, options)(this.fetchAPI, this.basePath);
    }

    /**
     * Cancel a shipment and the label previously created
     * @summary Void a shipment label
     * @param {ShipmentCancelRequest} body 
     * @param {string} carrier_name 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public voidLabel(body: ShipmentCancelRequest, carrier_name: string, test?: boolean, options?: any) {
        return ProxyApiFp(this.configuration).voidLabel(body, carrier_name, test, options)(this.fetchAPI, this.basePath);
    }

}
/**
 * ShipmentsApi - fetch parameter creator
 * @export
 */
export const ShipmentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add the customs declaration for the shipment if non existent.
         * @summary Add shipment customs declaration
         * @param {CustomsData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustoms(body: CustomsData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addCustoms.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addCustoms.');
            }
            const localVarPath = `/shipments/{id}/customs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CustomsData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a parcel to an existing shipment for a multi-parcel shipment.
         * @summary Add a parcel to a shipment
         * @param {ParcelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParcel(body: ParcelData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addParcel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addParcel.');
            }
            const localVarPath = `/shipments/{id}/parcels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParcelData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Void a shipment with the associated label.
         * @summary Cancel a shipment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancel.');
            }
            const localVarPath = `/shipments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new shipment instance.
         * @summary Create a shipment
         * @param {ShipmentData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: ShipmentData, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/shipments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ShipmentData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all shipments.
         * @summary List all shipments
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/shipments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Select your preferred rates to buy a shipment label.
         * @summary Buy a shipment label
         * @param {ShipmentPurchaseData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchase(body: ShipmentPurchaseData, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling purchase.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling purchase.');
            }
            const localVarPath = `/shipments/{id}/purchase`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ShipmentPurchaseData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh the list of the shipment rates
         * @summary Fetch new shipment rates
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling rates.');
            }
            const localVarPath = `/shipments/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a shipment.
         * @summary Retrieve a shipment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieve.');
            }
            const localVarPath = `/shipments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add one or many options to your shipment.<br/> **eg:**<br/> - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  ```json {     \"insurance\": 120,     \"currency\": \"USD\" } ```  And many more, check additional options available in the [reference](#operation/all_references).
         * @summary Add shipment options
         * @param {any} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOptions(body: any, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setOptions.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setOptions.');
            }
            const localVarPath = `/shipments/{id}/options`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentsApi - functional programming interface
 * @export
 */
export const ShipmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add the customs declaration for the shipment if non existent.
         * @summary Add shipment customs declaration
         * @param {CustomsData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustoms(body: CustomsData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).addCustoms(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add a parcel to an existing shipment for a multi-parcel shipment.
         * @summary Add a parcel to a shipment
         * @param {ParcelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParcel(body: ParcelData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).addParcel(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Void a shipment with the associated label.
         * @summary Cancel a shipment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResponse> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).cancel(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new shipment instance.
         * @summary Create a shipment
         * @param {ShipmentData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: ShipmentData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all shipments.
         * @summary List all shipments
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Shipment>> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).list(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Select your preferred rates to buy a shipment label.
         * @summary Buy a shipment label
         * @param {ShipmentPurchaseData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchase(body: ShipmentPurchaseData, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).purchase(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Refresh the list of the shipment rates
         * @summary Fetch new shipment rates
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).rates(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a shipment.
         * @summary Retrieve a shipment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).retrieve(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add one or many options to your shipment.<br/> **eg:**<br/> - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  ```json {     \"insurance\": 120,     \"currency\": \"USD\" } ```  And many more, check additional options available in the [reference](#operation/all_references).
         * @summary Add shipment options
         * @param {any} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOptions(body: any, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shipment> {
            const localVarFetchArgs = ShipmentsApiFetchParamCreator(configuration).setOptions(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ShipmentsApi - factory interface
 * @export
 */
export const ShipmentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Add the customs declaration for the shipment if non existent.
         * @summary Add shipment customs declaration
         * @param {CustomsData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustoms(body: CustomsData, id: string, options?: any) {
            return ShipmentsApiFp(configuration).addCustoms(body, id, options)(fetch, basePath);
        },
        /**
         * Add a parcel to an existing shipment for a multi-parcel shipment.
         * @summary Add a parcel to a shipment
         * @param {ParcelData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParcel(body: ParcelData, id: string, options?: any) {
            return ShipmentsApiFp(configuration).addParcel(body, id, options)(fetch, basePath);
        },
        /**
         * Void a shipment with the associated label.
         * @summary Cancel a shipment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(id: string, options?: any) {
            return ShipmentsApiFp(configuration).cancel(id, options)(fetch, basePath);
        },
        /**
         * Create a new shipment instance.
         * @summary Create a shipment
         * @param {ShipmentData} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: ShipmentData, options?: any) {
            return ShipmentsApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * Retrieve all shipments.
         * @summary List all shipments
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(limit?: number, offset?: number, options?: any) {
            return ShipmentsApiFp(configuration).list(limit, offset, options)(fetch, basePath);
        },
        /**
         * Select your preferred rates to buy a shipment label.
         * @summary Buy a shipment label
         * @param {ShipmentPurchaseData} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchase(body: ShipmentPurchaseData, id: string, options?: any) {
            return ShipmentsApiFp(configuration).purchase(body, id, options)(fetch, basePath);
        },
        /**
         * Refresh the list of the shipment rates
         * @summary Fetch new shipment rates
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates(id: string, options?: any) {
            return ShipmentsApiFp(configuration).rates(id, options)(fetch, basePath);
        },
        /**
         * Retrieve a shipment.
         * @summary Retrieve a shipment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any) {
            return ShipmentsApiFp(configuration).retrieve(id, options)(fetch, basePath);
        },
        /**
         * Add one or many options to your shipment.<br/> **eg:**<br/> - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  ```json {     \"insurance\": 120,     \"currency\": \"USD\" } ```  And many more, check additional options available in the [reference](#operation/all_references).
         * @summary Add shipment options
         * @param {any} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOptions(body: any, id: string, options?: any) {
            return ShipmentsApiFp(configuration).setOptions(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * ShipmentsApi - object-oriented interface
 * @export
 * @class ShipmentsApi
 * @extends {BaseAPI}
 */
export class ShipmentsApi extends BaseAPI {
    /**
     * Add the customs declaration for the shipment if non existent.
     * @summary Add shipment customs declaration
     * @param {CustomsData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public addCustoms(body: CustomsData, id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).addCustoms(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Add a parcel to an existing shipment for a multi-parcel shipment.
     * @summary Add a parcel to a shipment
     * @param {ParcelData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public addParcel(body: ParcelData, id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).addParcel(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Void a shipment with the associated label.
     * @summary Cancel a shipment
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public cancel(id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).cancel(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new shipment instance.
     * @summary Create a shipment
     * @param {ShipmentData} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public create(body: ShipmentData, options?: any) {
        return ShipmentsApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all shipments.
     * @summary List all shipments
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public list(limit?: number, offset?: number, options?: any) {
        return ShipmentsApiFp(this.configuration).list(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Select your preferred rates to buy a shipment label.
     * @summary Buy a shipment label
     * @param {ShipmentPurchaseData} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public purchase(body: ShipmentPurchaseData, id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).purchase(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Refresh the list of the shipment rates
     * @summary Fetch new shipment rates
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public rates(id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).rates(id, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve a shipment.
     * @summary Retrieve a shipment
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public retrieve(id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).retrieve(id, options)(this.fetch, this.basePath);
    }

    /**
     * Add one or many options to your shipment.<br/> **eg:**<br/> - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  ```json {     \"insurance\": 120,     \"currency\": \"USD\" } ```  And many more, check additional options available in the [reference](#operation/all_references).
     * @summary Add shipment options
     * @param {any} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public setOptions(body: any, id: string, options?: any) {
        return ShipmentsApiFp(this.configuration).setOptions(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * TrackingApi - fetch parameter creator
 * @export
 */
export const TrackingApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API retrieves or creates (if non existent) a tracking status object containing the details and events of a shipping in progress.
         * @summary Retrieve a tracking status
         * @param {string} carrier_name 
     * @param {string} carrier_name 
         * @param {string} carrier_name 
         * @param {string} tracking_number 
     * @param {string} tracking_number 
         * @param {string} tracking_number 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(carrier_name: string, tracking_number: string, test?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'carrier_name' is not null or undefined
            if (carrier_name === null || carrier_name === undefined) {
                throw new RequiredError('carrier_name','Required parameter carrier_name was null or undefined when calling retrieve.');
            }
            // verify required parameter 'tracking_number' is not null or undefined
            if (tracking_number === null || tracking_number === undefined) {
                throw new RequiredError('tracking_number','Required parameter tracking_number was null or undefined when calling retrieve.');
            }
            const localVarPath = `/tracking_status/{carrier_name}/{tracking_number}`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrier_name)))
                .replace(`{${"tracking_number"}}`, encodeURIComponent(String(tracking_number)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all tracking statuses.
         * @summary List all tracking statuses
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statuses(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/tracking_status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrackingApi - functional programming interface
 * @export
 */
export const TrackingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API retrieves or creates (if non existent) a tracking status object containing the details and events of a shipping in progress.
         * @summary Retrieve a tracking status
         * @param {string} carrier_name 
         * @param {string} tracking_number 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(carrier_name: string, tracking_number: string, test?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrackingStatus> {
            const localVarFetchArgs = TrackingApiFetchParamCreator(configuration).retrieve(carrier_name, tracking_number, test, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all tracking statuses.
         * @summary List all tracking statuses
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statuses(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TrackingStatus>> {
            const localVarFetchArgs = TrackingApiFetchParamCreator(configuration).statuses(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TrackingApi - factory interface
 * @export
 */
export const TrackingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This API retrieves or creates (if non existent) a tracking status object containing the details and events of a shipping in progress.
         * @summary Retrieve a tracking status
         * @param {string} carrier_name 
         * @param {string} tracking_number 
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(carrier_name: string, tracking_number: string, test?: boolean, options?: any) {
            return TrackingApiFp(configuration).retrieve(carrier_name, tracking_number, test, options)(fetch, basePath);
        },
        /**
         * Retrieve all tracking statuses.
         * @summary List all tracking statuses
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statuses(limit?: number, offset?: number, options?: any) {
            return TrackingApiFp(configuration).statuses(limit, offset, options)(fetch, basePath);
        },
    };
};

/**
 * TrackingApi - object-oriented interface
 * @export
 * @class TrackingApi
 * @extends {BaseAPI}
 */
export class TrackingApi extends BaseAPI {
    /**
     * This API retrieves or creates (if non existent) a tracking status object containing the details and events of a shipping in progress.
     * @summary Retrieve a tracking status
     * @param {string} carrier_name 
         * @param {string} carrier_name 
     * @param {string} carrier_name 
     * @param {string} tracking_number 
         * @param {string} tracking_number 
     * @param {string} tracking_number 
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
         * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {boolean} [test]  The test flag indicates whether to use a carrier configured for test.  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingApi
     */
    public retrieve(carrier_name: string, tracking_number: string, test?: boolean, options?: any) {
        return TrackingApiFp(this.configuration).retrieve(carrier_name, tracking_number, test, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all tracking statuses.
     * @summary List all tracking statuses
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingApi
     */
    public statuses(limit?: number, offset?: number, options?: any) {
        return TrackingApiFp(this.configuration).statuses(limit, offset, options)(this.fetch, this.basePath);
    }

}
/**
 * UtilsApi - fetch parameter creator
 * @export
 */
export const UtilsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a label PDF file.
         * @summary Print a Label
         * @param {LabelPrintingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printLabel(body: LabelPrintingRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling printLabel.');
            }
            const localVarPath = `/labels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LabelPrintingRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  ## Countries  <details>  Code | Name  --- | ---  AD | Andorra AE | United Arab Emirates AF | Afghanistan AG | Antigua AI | Anguilla AL | Albania AM | Armenia AN | Netherlands Antilles AO | Angola AR | Argentina AS | American Samoa AT | Austria AU | Australia AW | Aruba AZ | Azerbaijan BA | Bosnia And Herzegovina BB | Barbados BD | Bangladesh BE | Belgium BF | Burkina Faso BG | Bulgaria BH | Bahrain BI | Burundi BJ | Benin BM | Bermuda BN | Brunei BO | Bolivia BR | Brazil BS | Bahamas BT | Bhutan BW | Botswana BY | Belarus BZ | Belize CA | Canada CD | Congo, The Democratic Republic Of CF | Central African Republic CG | Congo CH | Switzerland CI | Cote D Ivoire CK | Cook Islands CL | Chile CM | Cameroon CN | China, Peoples Republic CO | Colombia CR | Costa Rica CU | Cuba CV | Cape Verde CY | Cyprus CZ | Czech Republic, The DE | Germany DJ | Djibouti DK | Denmark DM | Dominica DO | Dominican Republic DZ | Algeria EC | Ecuador EE | Estonia EG | Egypt ER | Eritrea ES | Spain ET | Ethiopia FI | Finland FJ | Fiji FK | Falkland Islands FM | Micronesia, Federated States Of FO | Faroe Islands FR | France GA | Gabon GB | United Kingdom GD | Grenada GE | Georgia GF | French Guyana GG | Guernsey GH | Ghana GI | Gibraltar GL | Greenland GM | Gambia GN | Guinea Republic GP | Guadeloupe GQ | Guinea-equatorial GR | Greece GT | Guatemala GU | Guam GW | Guinea-bissau GY | Guyana (british) HK | Hong Kong HN | Honduras HR | Croatia HT | Haiti HU | Hungary IC | Canary Islands, The ID | Indonesia IE | Ireland, Republic Of IL | Israel IN | India IQ | Iraq IR | Iran (islamic Republic Of) IS | Iceland IT | Italy JE | Jersey JM | Jamaica JO | Jordan JP | Japan KE | Kenya KG | Kyrgyzstan KH | Cambodia KI | Kiribati KM | Comoros KN | St. Kitts KP | Korea, The D.p.r Of (north K.) KR | Korea, Republic Of (south K.) KV | Kosovo KW | Kuwait KY | Cayman Islands KZ | Kazakhstan LA | Lao Peoples Democratic Republic LB | Lebanon LC | St. Lucia LI | Liechtenstein LK | Sri Lanka LR | Liberia LS | Lesotho LT | Lithuania LU | Luxembourg LV | Latvia LY | Libya MA | Morocco MC | Monaco MD | Moldova, Republic Of ME | Montenegro, Republic Of MG | Madagascar MH | Marshall Islands MK | Macedonia, Republic Of ML | Mali MM | Myanmar MN | Mongolia MO | Macau MP | Commonwealth No. Mariana Islands MQ | Martinique MR | Mauritania MS | Montserrat MT | Malta MU | Mauritius MV | Maldives MW | Malawi MX | Mexico MY | Malaysia MZ | Mozambique NA | Namibia NC | New Caledonia NE | Niger NG | Nigeria NI | Nicaragua NL | Netherlands, The NO | Norway NP | Nepal NR | Nauru, Republic Of NU | Niue NZ | New Zealand OM | Oman PA | Panama PE | Peru PF | Tahiti PG | Papua New Guinea PH | Philippines, The PK | Pakistan PL | Poland PR | Puerto Rico PT | Portugal PW | Palau PY | Paraguay QA | Qatar RE | Reunion, Island Of RO | Romania RS | Serbia, Republic Of RU | Russian Federation, The RW | Rwanda SA | Saudi Arabia SB | Solomon Islands SC | Seychelles SD | Sudan SE | Sweden SG | Singapore SH | Saint Helena SI | Slovenia SK | Slovakia SL | Sierra Leone SM | San Marino SN | Senegal SO | Somalia SR | Suriname SS | South Sudan ST | Sao Tome And Principe SV | El Salvador SY | Syria SZ | Swaziland TC | Turks And Caicos Islands TD | Chad TG | Togo TH | Thailand TJ | Tajikistan TL | Timor Leste TN | Tunisia TO | Tonga TR | Turkey TT | Trinidad And Tobago TV | Tuvalu TW | Taiwan TZ | Tanzania UA | Ukraine UG | Uganda US | United States UY | Uruguay UZ | Uzbekistan VA | Vatican City State VC | St. Vincent VE | Venezuela VG | British Virgin Islands VI | U.S. Virgin Islands VN | Vietnam VU | Vanuatu WS | Samoa XB | Bonaire XC | Curacao XE | St. Eustatius XM | St. Maarten XN | Nevis XS | Somaliland, Rep Of (north Somalia) XY | St. Barthelemy YE | Yemen, Republic Of YT | Mayotte ZA | South Africa ZM | Zambia ZW | Zimbabwe  </details><br/>   ## States and Provinces  <details>   ### United Arab Emirates  <details>  Code | Name  --- | ---  AB | Abu Dhabi AJ | Ajman DU | Dubai FU | Fujairah RA | Ras al-Khaimah SH | Sharjah UM | Umm al-Qaiwain  </details><br/>   ### Canada  <details>  Code | Name  --- | ---  AB | Alberta BC | British Columbia MB | Manitoba NB | New Brunswick NL | Newfoundland NT | Northwest Territories NS | Nova Scotia NU | Nunavut ON | Ontario PE | Prince Edward Island QC | Quebec SK | Saskatchewan YT | Yukon  </details><br/>   ### China, Peoples Republic  <details>  Code | Name  --- | ---  anhui | Anhui hainan | Hainan jiangxi | Jiangxi shanghai | Shanghai beijing | Beijing hebei | Hebei jilin | Jilin shanxi | Shanxi chongqing | Chongqing heilongjiang | Heilongjiang liaoning | Liaoning sichuan | Sichuan fujian | Fujian henan | Henan nei_mongol | Nei Mongol tianjin | Tianjin gansu | Gansu hubei | Hubei qinghai | Qinghai xinjiang | Xinjiang guangdong | Guangdong hunan | Hunan shaanxi | Shaanxi yunnan | Yunnan guizhou | Guizhou jiangsu | Jiangsu shandong | Shandong zhejiang | Zhejiang  </details><br/>   ### India  <details>  Code | Name  --- | ---  AN | Andaman & Nicobar (U.T) AP | Andhra Pradesh AR | Arunachal Pradesh AS | Assam BR | Bihar CG | Chattisgarh CH | Chandigarh (U.T.) DD | Daman & Diu (U.T.) DL | Delhi (U.T.) DN | Dadra and Nagar Haveli (U.T.) GA | Goa GJ | Gujarat HP | Himachal Pradesh HR | Haryana JH | Jharkhand JK | Jammu & Kashmir KA | Karnataka KL | Kerala LD | Lakshadweep (U.T) MH | Maharashtra ML | Meghalaya MN | Manipur MP | Madhya Pradesh MZ | Mizoram NL | Nagaland OR | Orissa PB | Punjab PY | Puducherry (U.T.) RJ | Rajasthan SK | Sikkim TN | Tamil Nadu TR | Tripura UA | Uttaranchal UP | Uttar Pradesh WB | West Bengal  </details><br/>   ### Mexico  <details>  Code | Name  --- | ---  AG | Aguascalientes BC | Baja California BS | Baja California Sur CM | Campeche CS | Chiapas CH | Chihuahua CO | Coahuila CL | Colima DF | Ciudad de México DG | Durango GT | Guanajuato GR | Guerrero HG | Hidalgo JA | Jalisco EM | Estado de México MI | Michoacán MO | Morelos NA | Nayarit NL | Nuevo León OA | Oaxaca PU | Puebla QE | Querétaro QR | Quintana Roo SL | San Luis Potosí SI | Sinaloa SO | Sonora TB | Tabasco TM | Tamaulipas TL | Tlaxcala VE | Veracruz YU | Yucatán ZA | Zacatecas  </details><br/>   ### United States  <details>  Code | Name  --- | ---  AL | Alabama AK | Alaska AZ | Arizona AR | Arkansas CA | California CO | Colorado CT | Connecticut DE | Delaware DC | District of Columbia FL | Florida GA | Georgia HI | Hawaii ID | Idaho IL | Illinois IN | Indiana IA | Iowa KS | Kansas KY | Kentucky LA | Louisiana ME | Maine MD | Maryland MA | Massachusetts MI | Michigan MN | Minnesota MS | Mississippi MO | Missouri MT | Montana NE | Nebraska NV | Nevada NH | New Hampshire NJ | New Jersey NM | New Mexico NY | New York NC | North Carolina ND | North Dakota OH | Ohio OK | Oklahoma OR | Oregon PA | Pennsylvania RI | Rhode Island SC | South Carolina SD | South Dakota TN | Tennessee TX | Texas UT | Utah VT | Vermont VA | Virginia WA | Washington State WV | West Virginia WI | Wisconsin WY | Wyoming PR | Puerto Rico  </details><br/>   </details><br/>  ## Currencies  <details>  Code | Name  --- | ---  EUR | Euro AED | UAE Dirham USD | US Dollar XCD | East Caribbean Dollar AMD | Dran ANG | Netherlands Antilles Guilder AOA | Kwanza ARS | Argentine Peso AUD | Australian Dollar AWG | Aruba Guilder AZN | Manat BAM | Convertible Marks BBD | Barbadian Dollar BDT | Taka XOF | CFA Franc West Africa BGN | Bulgarian Lev BHD | Bahraini Dinar BIF | Burundese Franc BMD | Bermudian Dollar BND | Brunei Dollar BOB | Boliviano BRL | Real BSD | Bahamian Dollar BTN | Ngultrum BWP | Pula BYN | Belarussian Ruble BZD | Belize Dollar CAD | Canadian Dollar CDF | Franc Congolais XAF | CFA Franc Central Africa CHF | Swiss Franc NZD | New Zealand Dollar CLP | New Chile Peso CNY | Yuan (Ren Min Bi) COP | Colombian Peso CRC | Costa Rican Colon CUC | Peso Convertible CVE | Cape Verde Escudo CZK | Czech Koruna DJF | Djibouti Franc DKK | Danish Krone DOP | Dominican Republic Peso DZD | Algerian Dinar EGP | Egyptian Pound ERN | Nakfa ETB | Birr FJD | Fijian Dollar GBP | Pound Sterling GEL | Georgian Lari GHS | Cedi GMD | Dalasi GNF | Guinea Franc GTQ | Quetzal GYD | Guyanan Dollar HKD | Hong Kong Dollar HNL | Lempira HRK | Croatian Kuna HTG | Gourde HUF | Forint IDR | Rupiah ILS | New Israeli Shekel INR | Indian Rupee IRR | Iranian Rial ISK | Icelandic Krona JMD | Jamaican Dollar JOD | Jordanian Dinar JPY | Yen KES | Kenyan Shilling KGS | Som KHR | Khmer Rial KMF | Comoros Franc KPW | North Korean Won KRW | Won KWD | Kuwaiti Dinar KYD | Cayman Islands Dollar KZT | Tenge LAK | Kip LKR | Sri Lankan Rupee LRD | Liberian Dollar LSL | Loti LYD | Libyan Dinar MAD | Moroccan Dirham MDL | Leu MGA | Ariary MKD | Denar MMK | Kyat MNT | Tugrik MOP | Pataca MRO | Ouguiya MUR | Mauritius Rupee MVR | Rufiyaa MWK | Kwacha MXN | Mexican Nuevo Peso MYR | Ringgit MZN | Mozambique Metical NAD | Namibian Dollar XPF | CFP Franc NGN | Naira NIO | Cordoba Oro NOK | Norwegian Krone NPR | Nepalese Rupee OMR | Omani Rial PEN | Nuevo Sol PGK | Kina PHP | Phillipines Peso PKR | Pakistani Rupee PLN | Zloty PYG | Guarani QAR | Qatar Rial RSD | Serbia, Dinars RUB | Russian Ruble RWF | Rwanda Franc SAR | Saudi Riyal SBD | Solomon Islands Dollar SCR | Seychelles Rupee SDG | Sudanese Pound SEK | Swedish Krona SGD | Singapore Dollar SHP | St. Helena Pound SLL | Leone SOS | Somali Shilling SRD | Suriname Dollar SSP | South Sudanese pound STD | Dobra SYP | Syrian Pound SZL | Lilangeni THB | Baht TJS | Somoni TND | Tunisian Dinar TOP | Pa'anga TRY | New Turkish Lira TTD | Trinidad and Tobago Dollar TWD | New Taiwan Dollar TZS | Tanzanian Shilling UAH | Hryvna UYU | Peso Uruguayo UZS | Sum VEF | Bolivar Fuerte VND | Dong VUV | Vanuatu Vatu WST | Tala YER | Yemeni Riyal ZAR | South African Rand  </details><br/>   ## Packaging Types  <details>   ### Multi-carrier (purplship)  <details>  Code | Identifier --- | --- envelope | Small Envelope pak | Pak tube | Tube pallet | Pallet small_box | Small Box medium_box | Medium Box your_packaging | Your Packaging  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_flyer_smalls | FLY dhl_parcels_conveyables | COY dhl_non_conveyables | NCY dhl_pallets | PAL dhl_double_pallets | DBL dhl_box | BOX  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_envelope | FEDEX_ENVELOPE fedex_pak | FEDEX_PAK fedex_box | FEDEX_BOX fedex_10_kg_box | FEDEX_10KG_BOX fedex_25_kg_box | FEDEX_25KG_BOX fedex_tube | FEDEX_TUBE your_packaging | YOUR_PACKAGING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_envelope | Envelope purolator_express_pack | Pack purolator_express_box | Box purolator_customer_packaging | Customer Packaging  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_unknown | 00 ups_letter | 01 ups_package | 02 ups_tube | 03 ups_pak | 04 ups_express_box | 21 ups_box_25_kg | 24 ups_box_10_kg | 25 ups_pallet | 30 ups_small_express_box | 2a ups_medium_express_box | 2b ups_large_express_box | 2c  </details><br/>   </details><br/>   ## Package Preset  <details>   ### Canada Post  <details>  Code | Dimensions | Note --- | --- | --- canadapost_mailing_box | 15.2 x 1.0 x 10.2 | height x length x width canadapost_extra_small_mailing_box | 14.0 x 14.0 x 14.0 | height x length x width canadapost_small_mailing_box | 22.9 x 6.4 x 28.6 | height x length x width canadapost_medium_mailing_box | 23.5 x 13.3 x 31.0 | height x length x width canadapost_large_mailing_box | 30.5 x 9.5 x 38.1 | height x length x width canadapost_extra_large_mailing_box | 30.5 x 21.6 x 40.0 | height x length x width canadapost_corrugated_small_box | 32.0 x 32.0 x 42.0 | height x length x width canadapost_corrugated_medium_box | 38.0 x 32.0 x 46.0 | height x length x width canadapost_corrugated_large_box | 46.0 x 40.6 x 46.0 | height x length x width canadapost_xexpresspost_certified_envelope | 15.9 x 1.5 x 0.5 x 26.0 | height x length x weight x width canadapost_xexpresspost_national_large_envelope | 29.2 x 1.5 x 1.36 x 40.0 | height x length x weight x width  </details><br/>   ### DHL Express  <details>  Code | Dimensions | Note --- | --- | --- dhl_express_envelope | 27.5 x 1.0 x 0.5 x 35.0 | height x length x weight x width dhl_express_standard_flyer | 30.0 x 1.5 x 2.0 x 40.0 | height x length x weight x width dhl_express_large_flyer | 37.5 x 1.5 x 3.0 x 47.5 | height x length x weight x width dhl_express_box_2 | 18.2 x 10.0 x 1.0 x 33.7 | height x length x weight x width dhl_express_box_3 | 32.0 x 5.2 x 2.0 x 33.6 | height x length x weight x width dhl_express_box_4 | 32.2 x 18.0 x 5.0 x 33.7 | height x length x weight x width dhl_express_box_5 | 32.2 x 34.5 x 10.0 x 33.7 | height x length x weight x width dhl_express_box_6 | 35.9 x 36.9 x 15.0 x 41.7 | height x length x weight x width dhl_express_box_7 | 40.4 x 38.9 x 20.0 x 48.1 | height x length x weight x width dhl_express_box_8 | 44.4 x 40.9 x 25.0 x 54.2 | height x length x weight x width dhl_express_tube | 15.0 x 15.0 x 5.0 x 96.0 | height x length x weight x width dhl_didgeridoo_box | 13.0 x 162.0 x 10.0 x 13.0 | height x length x weight x width dhl_jumbo_box | 42.7 x 33.0 x 30.0 x 45.0 | height x length x weight x width dhl_jumbo_box_junior | 34.0 x 24.1 x 20.0 x 39.9 | height x length x weight x width  </details><br/>   ### FedEx Express  <details>  Code | Dimensions | Note --- | --- | --- fedex_envelope_legal_size | 15.5 x 1.0 x 9.5 | height x weight x width fedex_padded_pak | 14.75 x 2.2 x 11.75 | height x weight x width fedex_polyethylene_pak | 15.5 x 2.2 x 12.0 | height x weight x width fedex_clinical_pak | 18.0 x 2.2 x 13.5 | height x weight x width fedex_small_box | 10.9 x 1.5 x 20.0 x 12.25 | height x length x weight x width fedex_medium_box | 11.5 x 2.38 x 20.0 x 13.25 | height x length x weight x width fedex_large_box | 12.38 x 3.0 x 20.0 x 17.88 | height x length x weight x width fedex_10_kg_box | 12.94 x 10.19 x 10.0 x 15.81 | height x length x weight x width fedex_25_kg_box | 16.56 x 13.19 x 25.0 x 21.56 | height x length x weight x width fedex_tube | 6.0 x 6.0 x 20.0 x 38.0 | height x length x weight x width  </details><br/>   ### Purolator Courier  <details>  Code | Dimensions | Note --- | --- | --- purolator_express_envelope | 1.5 x 1.0 x 12.5 | length x weight x width purolator_express_pack | 1.0 x 3.0 x 12.5 | length x weight x width purolator_express_box | 3.5 x 7.0 | length x weight  </details><br/>   ### UPS Package  <details>  Code | Dimensions | Note --- | --- | --- ups_small_express_box | 11.0 x 2.0 x 30.0 x 13.0 | height x length x weight x width ups_medium_express_box | 11.0 x 3.0 x 30.0 x 16.0 | height x length x weight x width ups_large_express_box | 13.0 x 3.0 x 30.0 x 18.0 | height x length x weight x width ups_express_tube | 6.0 x 6.0 x 38.0 | height x length x width ups_express_pak | 11.75 x 1.5 x 16.0 | height x length x width ups_world_document_box | 12.5 x 3.0 x 17.5 | height x length x width  </details><br/>   </details><br/>   ## Shipment Options  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_signature | SO canadapost_coverage | COV canadapost_collect_on_delivery | COD canadapost_proof_of_age_required_18 | PA18 canadapost_proof_of_age_required_19 | PA19 canadapost_card_for_pickup | HFP canadapost_do_not_safe_drop | DNS canadapost_leave_at_door | LAD canadapost_deliver_to_post_office | D2PO canadapost_return_at_senders_expense | RASE canadapost_return_to_sender | RTS canadapost_abandon | ABAN  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | 0A dhl_mailroom_management | 0B dhl_pallet_administration | 0C dhl_warehousing | 0D dhl_express_logistics_centre | 0E dhl_strategic_parts_centre | 0F dhl_local_distribution_centre | 0G dhl_terminal_handling | 0H dhl_cross_docking | 0I dhl_inventory_management | 0J dhl_loading_unloading | 0K dhl_product_kitting | 0L dhl_priority_account_desk | 0M dhl_document_archiving | 0N dhl_saturday_delivery | AA dhl_saturday_pickup | AB dhl_holiday_delivery | AC dhl_holiday_pickup | AD dhl_domestic_saturday_delivery | AG dhl_standard | BA dhl_globalmail_item | BB dhl_letter | BC dhl_packet | BD dhl_letter_plus | BE dhl_packet_plus | BF dhl_elevated_risk | CA dhl_restricted_destination | CB dhl_security_validation | CC dhl_secure_protection | CD dhl_proof_of_identity | CE dhl_secure_storage | CF dhl_diplomatic_material | CG dhl_smart_sensor | CH dhl_visa_program | CI dhl_onboard_courier | CJ dhl_secure_safebox | CK dhl_smart_sentry | CL dhl_split_duties_and_tax | DC dhl_duties_and_taxes_paid | DD dhl_receiver_paid | DE dhl_duties_and_taxes_unpaid | DS dhl_import_billing | DT dhl_importer_of_record | DU dhl_go_green_carbon_neutral | EA dhl_go_green_carbon_footprint | EB dhl_go_green_carbon_estimate | EC dhl_fuel_surcharge_b | FB dhl_fuel_surcharge_c | FC dhl_fuel_surcharge_f | FF dhl_smartphone_box | GA dhl_laptop_box | GB dhl_bottle_box | GC dhl_repacking | GD dhl_tablet_box | GE dhl_filler_material | GF dhl_packaging | GG dhl_diplomatic_bag | GH dhl_pallet_box | GI dhl_lock_box | GJ dhl_lithium_ion_pi965_section_ii | HB dhl_dry_ice_un1845 | HC dhl_lithium_ion_pi965_966_section_ii | HD dhl_dangerous_goods | HE dhl_perishable_cargo | HG dhl_excepted_quantity | HH dhl_spill_cleaning | HI dhl_consumer_commodities | HK dhl_limited_quantities_adr | HL dhl_lithium_metal_pi969_section_ii | HM dhl_adr_load_exemption | HN dhl_lithium_ion_pi967_section_ii | HV dhl_lithium_metal_pi970_section_ii | HW dhl_biological_un3373 | HY dhl_extended_liability | IB dhl_contract_insurance | IC dhl_shipment_insurance | II dhl_delivery_notification | JA dhl_pickup_notification | JC dhl_proactive_tracking | JD dhl_performance_reporting | JE dhl_prealert_notification | JY dhl_change_of_billing | KA dhl_cash_on_delivery | KB dhl_printed_invoice | KD dhl_waybill_copy | KE dhl_import_paperwork | KF dhl_payment_on_pickup | KY dhl_shipment_intercept | LA dhl_shipment_redirect | LC dhl_storage_at_facility | LE dhl_cold_storage | LG dhl_specific_routing | LH dhl_service_recovery | LV dhl_alternative_address | LW dhl_hold_for_collection | LX dhl_address_correction_a | MA dhl_address_correction_b | MB dhl_neutral_delivery | NN dhl_remote_area_pickup | OB dhl_remote_area_delivery_c | OC dhl_out_of_service_area | OE dhl_remote_area_delivery_o | OO dhl_shipment_preparation | PA dhl_shipment_labeling | PB dhl_shipment_consolidation | PC dhl_relabeling_data_entry | PD dhl_preprinted_waybill | PE dhl_piece_labelling | PS dhl_data_staging_03 | PT dhl_data_staging_06 | PU dhl_data_staging_12 | PV dhl_data_staging_24 | PW dhl_standard_pickup | PX dhl_scheduled_pickup | PY dhl_dedicated_pickup | QA dhl_early_pickup | QB dhl_late_pickup | QD dhl_residential_pickup | QE dhl_loading_waiting | QF dhl_bypass_injection | QH dhl_direct_injection | QI dhl_drop_off_at_facility | QY dhl_delivery_signature | SA dhl_content_signature | SB dhl_named_signature | SC dhl_adult_signature | SD dhl_contract_signature | SE dhl_alternative_signature | SW dhl_no_signature_required | SX dhl_dedicated_delivery | TA dhl_early_delivery | TB dhl_time_window_delivery | TC dhl_evening_delivery | TD dhl_delivery_on_appointment | TE dhl_return_undeliverable | TG dhl_swap_delivery | TH dhl_unloading_waiting | TJ dhl_residential_delivery | TK dhl_repeat_delivery | TN dhl_alternative_date | TT dhl_no_partial_delivery | TU dhl_service_point_24_7 | TV dhl_pre_9_00 | TW dhl_pre_10_30 | TX dhl_pre_12_00 | TY dhl_thermo_packaging | UA dhl_ambient_vialsafe | UB dhl_ambient_non_insulated | UC dhl_ambient_insulated | UD dhl_ambient_extreme | UE dhl_chilled_box_s | UF dhl_chilled_box_m | UG dhl_chilled_box_l | UH dhl_frozen_no_ice_s | UI dhl_frozen_no_ice_m | UJ dhl_frozen_no_ice_l | UK dhl_frozen_ice_sticks_s | UL dhl_frozen_ice_sticks_m | UM dhl_frozen_ice_sticks_l | UN dhl_frozen_ice_plates_s | UO dhl_frozen_ice_plates_m | UP dhl_frozen_ice_plates_l | UQ dhl_combination_no_ice | UR dhl_combination_dry_ice | US dhl_frozen_ice_sticks_e | UT dhl_frozen_ice_plates_e | UV dhl_customer_tcp_1 | UW dhl_thermo_accessories | VA dhl_absorbent_sleeve | VB dhl_cooland_wrap | VC dhl_dry_ice_supplies | VD dhl_pressure_bag_s | VE dhl_pressure_bag_m | VF dhl_pressure_bag_l | VG dhl_informal_clearance | WA dhl_formal_clearance | WB dhl_payment_deferment | WC dhl_clearance_authorization | WD dhl_multiline_entry | WE dhl_post_clearance_modification | WF dhl_handover_to_broker | WG dhl_physical_intervention | WH dhl_bio_phyto_veterinary_controls | WI dhl_obtaining_permits_and_licences | WJ dhl_bonded_storage | WK dhl_bonded_transit_documents | WL dhl_temporary_import_export | WM dhl_under_bond_guarantee | WN dhl_export_declaration | WO dhl_exporter_validation | WP dhl_certificate_of_origin | WQ dhl_document_translation | WR dhl_personal_effects | WS dhl_paperless_trade | WY dhl_import_export_taxes | XB dhl_unrecoverable_origin_tax | XC dhl_quarantine_inspection | XD dhl_merchandise_process | XE dhl_domestic_postal_tax | XF dhl_tier_two_tax | XG dhl_tier_three_tax | XH dhl_import_penalty | XI dhl_cargo_zone_process | XJ dhl_import_export_duties | XX dhl_premium_09_00 | Y1 dhl_premium_10_30 | Y2 dhl_premium_12_00 | Y3 dhl_over_sized_piece_b | YB dhl_over_handled_piece_c | YC dhl_multipiece_shipment | YE dhl_over_weight_piece_f | YF dhl_over_sized_piece_g | YG dhl_over_handled_piece_h | YH dhl_premium_9_00_i | YI dhl_premium_10_30_j | YJ dhl_premium_12_00_k | YK dhl_paket_shipment | YV dhl_breakbulk_mother | YW dhl_breakbulk_baby | YX dhl_over_weight_piece_y | YY dhl_customer_claim | ZA dhl_damage_compensation | ZB dhl_loss_compensation | ZC dhl_customer_rebate | ZD dhl_e_com_discount | ZE  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_blind_shipment | BLIND_SHIPMENT fedex_broker_select_option | BROKER_SELECT_OPTION fedex_call_before_delivery | CALL_BEFORE_DELIVERY fedex_cod | COD fedex_cod_remittance | COD_REMITTANCE fedex_custom_delivery_window | CUSTOM_DELIVERY_WINDOW fedex_cut_flowers | CUT_FLOWERS fedex_dangerous_goods | DANGEROUS_GOODS fedex_delivery_on_invoice_acceptance | DELIVERY_ON_INVOICE_ACCEPTANCE fedex_detention | DETENTION fedex_do_not_break_down_pallets | DO_NOT_BREAK_DOWN_PALLETS fedex_do_not_stack_pallets | DO_NOT_STACK_PALLETS fedex_dry_ice | DRY_ICE fedex_east_coast_special | EAST_COAST_SPECIAL fedex_electronic_trade_documents | ELECTRONIC_TRADE_DOCUMENTS fedex_event_notification | EVENT_NOTIFICATION fedex_exclude_from_consolidation | EXCLUDE_FROM_CONSOLIDATION fedex_exclusive_use | EXCLUSIVE_USE fedex_exhibition_delivery | EXHIBITION_DELIVERY fedex_exhibition_pickup | EXHIBITION_PICKUP fedex_expedited_alternate_delivery_route | EXPEDITED_ALTERNATE_DELIVERY_ROUTE fedex_expedited_one_day_earlier | EXPEDITED_ONE_DAY_EARLIER fedex_expedited_service_monitoring_and_delivery | EXPEDITED_SERVICE_MONITORING_AND_DELIVERY fedex_expedited_standard_day_early_delivery | EXPEDITED_STANDARD_DAY_EARLY_DELIVERY fedex_extra_labor | EXTRA_LABOR fedex_extreme_length | EXTREME_LENGTH fedex_one_rate | FEDEX_ONE_RATE fedex_flatbed_trailer | FLATBED_TRAILER fedex_food | FOOD fedex_freight_guarantee | FREIGHT_GUARANTEE fedex_freight_to_collect | FREIGHT_TO_COLLECT fedex_future_day_shipment | FUTURE_DAY_SHIPMENT fedex_hold_at_location | HOLD_AT_LOCATION fedex_holiday_delivery | HOLIDAY_DELIVERY fedex_holiday_guarantee | HOLIDAY_GUARANTEE fedex_home_delivery_premium | HOME_DELIVERY_PREMIUM fedex_inside_delivery | INSIDE_DELIVERY fedex_inside_pickup | INSIDE_PICKUP fedex_international_controlled_export_service | INTERNATIONAL_CONTROLLED_EXPORT_SERVICE fedex_international_mail_service | INTERNATIONAL_MAIL_SERVICE fedex_international_traffic_in_arms_regulations | INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS fedex_liftgate_delivery | LIFTGATE_DELIVERY fedex_liftgate_pickup | LIFTGATE_PICKUP fedex_limited_access_delivery | LIMITED_ACCESS_DELIVERY fedex_limited_access_pickup | LIMITED_ACCESS_PICKUP fedex_marking_or_tagging | MARKING_OR_TAGGING fedex_non_business_time | NON_BUSINESS_TIME fedex_pallet_shrinkwrap | PALLET_SHRINKWRAP fedex_pallet_weight_allowance | PALLET_WEIGHT_ALLOWANCE fedex_pallets_provided | PALLETS_PROVIDED fedex_pending_complete | PENDING_COMPLETE fedex_pending_shipment | PENDING_SHIPMENT fedex_permit | PERMIT fedex_pharmacy_delivery | PHARMACY_DELIVERY fedex_poison | POISON fedex_port_delivery | PORT_DELIVERY fedex_port_pickup | PORT_PICKUP fedex_pre_delivery_notification | PRE_DELIVERY_NOTIFICATION fedex_pre_eig_processing | PRE_EIG_PROCESSING fedex_pre_multiplier_processing | PRE_MULTIPLIER_PROCESSING fedex_protection_from_freezing | PROTECTION_FROM_FREEZING fedex_regional_mall_delivery | REGIONAL_MALL_DELIVERY fedex_regional_mall_pickup | REGIONAL_MALL_PICKUP fedex_return_shipment | RETURN_SHIPMENT fedex_returns_clearance | RETURNS_CLEARANCE fedex_returns_clearance_special_routing_required | RETURNS_CLEARANCE_SPECIAL_ROUTING_REQUIRED fedex_saturday_delivery | SATURDAY_DELIVERY fedex_saturday_pickup | SATURDAY_PICKUP fedex_shipment_assembly | SHIPMENT_ASSEMBLY fedex_sort_and_segregate | SORT_AND_SEGREGATE fedex_special_delivery | SPECIAL_DELIVERY fedex_special_equipment | SPECIAL_EQUIPMENT fedex_storage | STORAGE fedex_sunday_delivery | SUNDAY_DELIVERY fedex_third_party_consignee | THIRD_PARTY_CONSIGNEE fedex_top_load | TOP_LOAD fedex_usps_delivery | USPS_DELIVERY fedex_usps_pickup | USPS_PICKUP fedex_weighing | WEIGHING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_dangerous_goods | Dangerous Goods purolator_chain_of_signature | Chain of Signature purolator_express_cheque | ExpressCheque purolator_hold_for_pickup | Hold For Pickup purolator_return_services | Return Services purolator_saturday_service | Saturday Service purolator_origin_signature_not_required | Origin Signature Not Required (OSNR) purolator_adult_signature_required | Adult Signature Required (ASR) purolator_special_handling | Special Handling  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_saturday_delivery_indicator | SaturdayDeliveryIndicator ups_access_point_cod | AccessPointCOD ups_deliver_to_addressee_only_indicator | DeliverToAddresseeOnlyIndicator ups_direct_delivery_only_indicator | DirectDeliveryOnlyIndicator ups_cod | COD ups_delivery_confirmation | DeliveryConfirmation ups_return_of_document_indicator | ReturnOfDocumentIndicator ups_up_scarbonneutral_indicator | UPScarbonneutralIndicator ups_certificate_of_origin_indicator | CertificateOfOriginIndicator ups_pickup_options | PickupOptions ups_delivery_options | DeliveryOptions ups_restricted_articles | RestrictedArticles ups_shipper_export_declaration_indicator | ShipperExportDeclarationIndicator ups_commercial_invoice_removal_indicator | CommercialInvoiceRemovalIndicator ups_import_control | ImportControl ups_return_service | ReturnService ups_sdl_shipment_indicator | SDLShipmentIndicator ups_epra_indicator | EPRAIndicator  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_saturday_pickup_required | saturdayPickupRequired freightcom_homeland_security | homelandSecurity freightcom_exhibition_convention_site | exhibitionConventionSite freightcom_military_base_delivery | militaryBaseDelivery freightcom_customs_in_bond_freight | customsIn_bondFreight freightcom_limited_access | limitedAccess freightcom_excess_length | excessLength freightcom_tailgate_pickup | tailgatePickup freightcom_residential_pickup | residentialPickup freightcom_cross_border_fee | crossBorderFee freightcom_notify_recipient | notifyRecipient freightcom_single_shipment | singleShipment freightcom_tailgate_delivery | tailgateDelivery freightcom_residential_delivery | residentialDelivery freightcom_insurance_type | insuranceType freightcom_inside_delivery | insideDelivery freightcom_is_saturday_service | isSaturdayService freightcom_dangerous_goods_type | dangerousGoodsType freightcom_stackable | stackable  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_saturday_pickup_required | saturdayPickupRequired eshipper_homeland_security | homelandSecurity eshipper_exhibition_convention_site | exhibitionConventionSite eshipper_military_base_delivery | militaryBaseDelivery eshipper_customs_in_bond_freight | customsIn_bondFreight eshipper_limited_access | limitedAccess eshipper_excess_length | excessLength eshipper_tailgate_pickup | tailgatePickup eshipper_residential_pickup | residentialPickup eshipper_cross_border_fee | crossBorderFee eshipper_notify_recipient | notifyRecipient eshipper_single_shipment | singleShipment eshipper_tailgate_delivery | tailgateDelivery eshipper_residential_delivery | residentialDelivery eshipper_insurance_type | insuranceType eshipper_inside_delivery | insideDelivery eshipper_is_saturday_service | isSaturdayService eshipper_dangerous_goods_type | dangerousGoodsType eshipper_stackable | stackable  </details><br/>   </details><br/>   ## Shipment Services  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_regular_parcel | DOM.RP canadapost_expedited_parcel | DOM.EP canadapost_xpresspost | DOM.XP canadapost_priority | DOM.PC canadapost_library_books | DOM.LIB canadapost_expedited_parcel_usa | USA.EP canadapost_priority_worldwide_envelope_usa | USA.PW.ENV canadapost_priority_worldwide_pak_usa | USA.PW.PAK canadapost_priority_worldwide_parcel_usa | USA.PW.PARCEL canadapost_small_packet_usa_air | USA.SP.AIR canadapost_tracked_packet_usa | USA.TP canadapost_tracked_packet_usa_lvm | USA.TP.LVM canadapost_xpresspost_usa | USA.XP canadapost_xpresspost_international | INT.XP canadapost_international_parcel_air | INT.IP.AIR canadapost_international_parcel_surface | INT.IP.SURF canadapost_priority_worldwide_envelope_intl | INT.PW.ENV canadapost_priority_worldwide_pak_intl | INT.PW.PAK canadapost_priority_worldwide_parcel_intl | INT.PW.PARCEL canadapost_small_packet_international_air | INT.SP.AIR canadapost_small_packet_international_surface | INT.SP.SURF canadapost_tracked_packet_international | INT.TP  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | LOGISTICS SERVICES dhl_domestic_express_12_00_doc | DOMESTIC EXPRESS 12:00 DOC dhl_b2_c_doc | B2C DOC dhl_b2_c_nondoc | B2C NONDOC dhl_jetline | JETLINE dhl_sprintline | SPRINTLINE dhl_express_easy_doc | EXPRESS EASY DOC dhl_express_easy_nondoc | EXPRESS EASY NONDOC dhl_europack_doc | EUROPACK DOC dhl_auto_reversals | AUTO REVERSALS dhl_breakbulk_express_doc | BREAKBULK EXPRESS DOC dhl_medical_express_doc | MEDICAL EXPRESS DOC dhl_express_worldwide_doc | EXPRESS WORLDWIDE DOC dhl_express_9_00_nondoc | EXPRESS 9:00 NONDOC dhl_freight_worldwide_nondoc | FREIGHT WORLDWIDE NONDOC dhl_domestic_economy_select_doc | DOMESTIC ECONOMY SELECT DOC dhl_economy_select_nondoc | ECONOMY SELECT NONDOC dhl_domestic_express_9_00_doc | DOMESTIC EXPRESS 9:00 DOC dhl_jumbo_box_nondoc | JUMBO BOX NONDOC dhl_express_9_00_doc | EXPRESS 9:00 DOC dhl_express_10_30_doc | EXPRESS 10:30 DOC dhl_express_10_30_nondoc | EXPRESS 10:30 NONDOC dhl_domestic_express_doc | DOMESTIC EXPRESS DOC dhl_domestic_express_10_30_doc | DOMESTIC EXPRESS 10:30 DOC dhl_express_worldwide_nondoc | EXPRESS WORLDWIDE NONDOC dhl_medical_express_nondoc | MEDICAL EXPRESS NONDOC dhl_globalmail_business_doc | GLOBALMAIL BUSINESS DOC dhl_same_day_doc | SAME DAY DOC dhl_express_12_00_doc | EXPRESS 12:00 DOC dhl_europack_nondoc | EUROPACK NONDOC dhl_economy_select_doc | ECONOMY SELECT DOC dhl_express_envelope_doc | EXPRESS ENVELOPE DOC dhl_express_12_00_nondoc | EXPRESS 12:00 NONDOC dhl_destination_charges | Destination Charges  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_europe_first_international_priority | EUROPE_FIRST_INTERNATIONAL_PRIORITY fedex_1_day_freight | FEDEX_1_DAY_FREIGHT fedex_2_day | FEDEX_2_DAY fedex_2_day_am | FEDEX_2_DAY_AM fedex_2_day_freight | FEDEX_2_DAY_FREIGHT fedex_3_day_freight | FEDEX_3_DAY_FREIGHT fedex_cargo_airport_to_airport | FEDEX_CARGO_AIRPORT_TO_AIRPORT fedex_cargo_freight_forwarding | FEDEX_CARGO_FREIGHT_FORWARDING fedex_cargo_international_express_freight | FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT fedex_cargo_international_premium | FEDEX_CARGO_INTERNATIONAL_PREMIUM fedex_cargo_mail | FEDEX_CARGO_MAIL fedex_cargo_registered_mail | FEDEX_CARGO_REGISTERED_MAIL fedex_cargo_surface_mail | FEDEX_CARGO_SURFACE_MAIL fedex_custom_critical_air_expedite | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE fedex_custom_critical_air_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_air_expedite_network | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK fedex_custom_critical_charter_air | FEDEX_CUSTOM_CRITICAL_CHARTER_AIR fedex_custom_critical_point_to_point | FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT fedex_custom_critical_surface_expedite | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE fedex_custom_critical_surface_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_temp_assure_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR fedex_custom_critical_temp_assure_validated_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR fedex_custom_critical_white_glove_services | FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES fedex_distance_deferred | FEDEX_DISTANCE_DEFERRED fedex_express_saver | FEDEX_EXPRESS_SAVER fedex_first_freight | FEDEX_FIRST_FREIGHT fedex_freight_economy | FEDEX_FREIGHT_ECONOMY fedex_freight_priority | FEDEX_FREIGHT_PRIORITY fedex_ground | FEDEX_GROUND fedex_international_priority_plus | FEDEX_INTERNATIONAL_PRIORITY_PLUS fedex_next_day_afternoon | FEDEX_NEXT_DAY_AFTERNOON fedex_next_day_early_morning | FEDEX_NEXT_DAY_EARLY_MORNING fedex_next_day_end_of_day | FEDEX_NEXT_DAY_END_OF_DAY fedex_next_day_freight | FEDEX_NEXT_DAY_FREIGHT fedex_next_day_mid_morning | FEDEX_NEXT_DAY_MID_MORNING fedex_first_overnight | FIRST_OVERNIGHT fedex_ground_home_delivery | GROUND_HOME_DELIVERY fedex_international_distribution_freight | INTERNATIONAL_DISTRIBUTION_FREIGHT fedex_international_economy | INTERNATIONAL_ECONOMY fedex_international_economy_distribution | INTERNATIONAL_ECONOMY_DISTRIBUTION fedex_international_economy_freight | INTERNATIONAL_ECONOMY_FREIGHT fedex_international_first | INTERNATIONAL_FIRST fedex_international_ground | INTERNATIONAL_GROUND fedex_international_priority | INTERNATIONAL_PRIORITY fedex_international_priority_distribution | INTERNATIONAL_PRIORITY_DISTRIBUTION fedex_international_priority_express | INTERNATIONAL_PRIORITY_EXPRESS fedex_international_priority_freight | INTERNATIONAL_PRIORITY_FREIGHT fedex_priority_overnight | PRIORITY_OVERNIGHT fedex_same_day | SAME_DAY fedex_same_day_city | SAME_DAY_CITY fedex_same_day_metro_afternoon | SAME_DAY_METRO_AFTERNOON fedex_same_day_metro_morning | SAME_DAY_METRO_MORNING fedex_same_day_metro_rush | SAME_DAY_METRO_RUSH fedex_smart_post | SMART_POST fedex_standard_overnight | STANDARD_OVERNIGHT fedex_transborder_distribution_consolidation | TRANSBORDER_DISTRIBUTION_CONSOLIDATION  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_9_am | PurolatorExpress9AM purolator_express_us | PurolatorExpressU.S. purolator_express_10_30_am | PurolatorExpress10:30AM purolator_express_us_9_am | PurolatorExpressU.S.9AM purolator_express_12_pm | PurolatorExpress12PM purolator_express_us_10_30_am | PurolatorExpressU.S.10:30AM purolator_express | PurolatorExpress purolator_express_us_12_00 | PurolatorExpressU.S.12:00 purolator_express_evening | PurolatorExpressEvening purolator_express_envelope_us | PurolatorExpressEnvelopeU.S. purolator_express_envelope_9_am | PurolatorExpressEnvelope9AM purolator_express_us_envelope_9_am | PurolatorExpressU.S.Envelope9AM purolator_express_envelope_10_30_am | PurolatorExpressEnvelope10:30AM purolator_express_us_envelope_10_30_am | PurolatorExpressU.S.Envelope10:30AM purolator_express_envelope_12_pm | PurolatorExpressEnvelope12PM purolator_express_us_envelope_12_00 | PurolatorExpressU.S.Envelope12:00 purolator_express_envelope | PurolatorExpressEnvelope purolator_express_pack_us | PurolatorExpressPackU.S. purolator_express_envelope_evening | PurolatorExpressEnvelopeEvening purolator_express_us_pack_9_am | PurolatorExpressU.S.Pack9AM purolator_express_pack_9_am | PurolatorExpressPack9AM purolator_express_us_pack_10_30_am | PurolatorExpressU.S.Pack10:30AM purolator_express_pack10_30_am | PurolatorExpressPack10:30AM purolator_express_us_pack_12_00 | PurolatorExpressU.S.Pack12:00 purolator_express_pack_12_pm | PurolatorExpressPack12PM purolator_express_box_us | PurolatorExpressBoxU.S. purolator_express_pack | PurolatorExpressPack purolator_express_us_box_9_am | PurolatorExpressU.S.Box9AM purolator_express_pack_evening | PurolatorExpressPackEvening purolator_express_us_box_10_30_am | PurolatorExpressU.S.Box10:30AM purolator_express_box_9_am | PurolatorExpressBox9AM purolator_express_us_box_12_00 | PurolatorExpressU.S.Box12:00 purolator_express_box_10_30_am | PurolatorExpressBox10:30AM purolator_ground_us | PurolatorGroundU.S. purolator_express_box_12_pm | PurolatorExpressBox12PM purolator_express_international | PurolatorExpressInternational purolator_express_box | PurolatorExpressBox purolator_express_international_9_am | PurolatorExpressInternational9AM purolator_express_box_evening | PurolatorExpressBoxEvening purolator_express_international_10_30_am | PurolatorExpressInternational10:30AM purolator_ground | PurolatorGround purolator_express_international_12_00 | PurolatorExpressInternational12:00 purolator_ground9_am | PurolatorGround9AM purolator_express_envelope_international | PurolatorExpressEnvelopeInternational purolator_ground10_30_am | PurolatorGround10:30AM purolator_express_international_envelope_9_am | PurolatorExpressInternationalEnvelope9AM purolator_ground_evening | PurolatorGroundEvening purolator_express_international_envelope_10_30_am | PurolatorExpressInternationalEnvelope10:30AM purolator_quick_ship | PurolatorQuickShip purolator_express_international_envelope_12_00 | PurolatorExpressInternationalEnvelope12:00 purolator_quick_ship_envelope | PurolatorQuickShipEnvelope purolator_express_pack_international | PurolatorExpressPackInternational purolator_quick_ship_pack | PurolatorQuickShipPack purolator_express_international_pack_9_am | PurolatorExpressInternationalPack9AM purolator_quick_ship_box | PurolatorQuickShipBox purolator_express_international_pack_10_30_am | PurolatorExpressInternationalPack10:30AM purolator_express_international_pack_12_00 | PurolatorExpressInternationalPack12:00 purolator_express_box_international | PurolatorExpressBoxInternational purolator_express_international_box_9_am | PurolatorExpressInternationalBox9AM purolator_express_international_box_10_30_am | PurolatorExpressInternationalBox10:30AM purolator_express_international_box_12_00 | PurolatorExpressInternationalBox12:00  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_standard | 11 ups_worldwide_expedited | 08 ups_worldwide_express | 07 ups_worldwide_express_plus | 54 ups_worldwide_saver | 65 ups_2nd_day_air | 02 ups_2nd_day_air_am | 59 ups_3_day_select | 12 ups_expedited_mail_innovations | M4 ups_first_class_mail | M2 ups_ground | 03 ups_next_day_air | 01 ups_next_day_air_early | 14 ups_next_day_air_saver | 13 ups_priority_mail | M3 ups_access_point_economy | 70 ups_today_dedicated_courier | 83 ups_today_express | 85 ups_today_express_saver | 86 ups_today_standard | 82 ups_worldwide_express_freight | 96 ups_priority_mail_innovations | M5 ups_economy_mail_innovations | M6  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_central_transport | 2029 freigthcom_estes | 2107 freigthcom_usf_holland | 1911 freightcom_dicom_ground | 3700 freightcom_ground | 3400 freightcom_select | 3404 freightcom_overnight | 3407 freightcom_purolator_ground | 4000 freightcom_purolator_express | 4003 freightcom_purolator_express_9_am | 4004 freightcom_purolator_express_10_30_am | 4005 freightcom_fedex_express_saver | 4100 freightcom_fedex_ground | 4101 freightcom_fedex_2_day | 4102 freightcom_fedex_priority_overnight | 4104 freightcom_fedex_standard_overnight | 4105 freightcom_fedex_first_overnight | 4106 freightcom_fedex_international_economy | 4109 freightcom_ups_standard | 4600 freightcom_ups_expedited | 4601 freightcom_ups_express_saver | 4602 freightcom_ups_express | 4603 freightcom_ups_express_early | 4604 freightcom_ups_3_day_select | 4605 freightcom_ups_worldwide_expedited | 4606 freightcom_ups_worldwide_express | 4607 freightcom_fedex_international_priority | 4108 freightcom_ups_worldwide_express_saver | 4609 freightcom_purolator_ground_us | 4016 freightcom_purolator_express_us | 4015 freightcom_purolator_express_us_10_30_am | 4014 freightcom_ups_worldwide_express_plus | 4608 freightcom_purolator_express_us_9_am | 4013 freightcom_express_easy | 5202 freightcom_express_10_30 | 5208 freightcom_express_worldwide | 5211 freightcom_express_12_00 | 5215 freightcom_economy_select | 5216 freightcom_dayr_e_comm_am_service | 5706 freightcom_dayr_e_comm_ground_service | 5707 freightcom_regular_parcel | 6301 freightcom_expedited_parcel | 6300 freightcom_xpresspost | 6303 freightcom_priority | 6302  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_fedex_priority | 1 eshipper_fedex_first_overnight | 2 eshipper_fedex_ground | 3 eshipper_fedex_standard_overnight | 28 eshipper_fedex_2nd_day | 29 eshipper_fedex_express_saver | 30 eshipper_fedex_international_economy | 35 eshipper_purolator_air | 4 eshipper_purolator_air_9_am | 5 eshipper_purolator_air_10_30 | 6 eshipper_puro_letter | 7 eshipper_puro_letter_9_am | 8 eshipper_puro_letter_10_30 | 9 eshipper_puro_pak | 10 eshipper_puro_pak_9_am | 11 eshipper_puro_pak_10_30 | 12 eshipper_purolator_ground | 13 eshipper_purolator_ground_9_am | 19 eshipper_purolator_ground_10_30 | 20 eshipper_canada_worldwide_same_day | 14 eshipper_canada_worldwide_next_flight_out | 15 eshipper_canada_worldwide_air_freight | 16 eshipper_canada_worldwide_ltl | 17 eshipper_dhl_express_worldwide | 101 eshipper_dhl_express_12_pm | 103 eshipper_dhl_express_10_30_am | 102 eshipper_dhl_esi_export | 104 eshipper_dhl_international_express | 106 eshipper_ups_express_next_day_air | 600 eshipper_ups_expedited_second_day_air | 601 eshipper_ups_worldwide_express | 602 eshipper_ups_worldwide_expedited | 603 eshipper_ups_standard_ground | 604 eshipper_ups_express_early_am_next_day_air_early_am | 605 eshipper_ups_three_day_select | 606 eshipper_ups_saver | 607 eshipper_ups_ground | 608 eshipper_next_day_saver | 609 eshipper_worldwide_express_plus | 610 eshipper_second_day_air_am | 611 eshipper_canada_post_priority | 500 eshipper_canada_post_xpress_post | 501 eshipper_canada_post_expedited | 502 eshipper_canada_post_regular | 503 eshipper_canada_post_xpress_post_usa | 504 eshipper_canada_post_xpress_post_intl | 505 eshipper_canada_post_air_parcel_intl | 506 eshipper_canada_post_surface_parcel_intl | 507 eshipper_canada_post_expedited_parcel_usa | 508 eshipper_tst_ltl | 1100 eshipper_ltl_chicago_suburban_express | 1500 eshipper_ltl_fedex_freight_east | 1501 eshipper_ltl_fedex_freight_west | 1502 eshipper_ltl_mid_states_express | 1503 eshipper_ltl_new_england_motor_freight | 1504 eshipper_ltl_new_penn | 1505 eshipper_ltl_oak_harbor | 1506 eshipper_ltl_pitt_ohio | 1507 eshipper_ltl_r_l_carriers | 1508 eshipper_ltl_saia | 1509 eshipper_ltl_usf_reddaway | 1510 eshipper_ltl_vitran_express | 1511 eshipper_ltl_wilson_trucking | 1512 eshipper_ltl_yellow_transportation | 1513 eshipper_ltl_roadway | 1514 eshipper_ltl_fedex_national | 1515 eshipper_wilson_trucking_tfc | 1800 eshipper_aaa_cooper_transportation | 1801 eshipper_roadrunner_dawes | 1802 eshipper_new_england_motor_freight | 1803 eshipper_new_penn_motor_express | 1804 eshipper_dayton_freight | 1805 eshipper_southeastern_freightway | 1806 eshipper_saia_inc | 1807 eshipper_conway | 1808 eshipper_roadway | 1809 eshipper_usf_reddaway | 1810 eshipper_usf_holland | 1811 eshipper_dependable_highway_express | 1812 eshipper_day_and_ross | 1813 eshipper_day_and_ross_r_and_l | 1814 eshipper_ups | 1815 eshipper_aaa_cooper | 1816 eshipper_ama_transportation | 1817 eshipper_averitt_express | 1818 eshipper_central_freight | 1819 eshipper_conway_us | 1820 eshipper_dayton | 1821 eshipper_drug_transport | 1822 eshipper_estes | 1823 eshipper_land_air_express | 1824 eshipper_fedex_west | 1825 eshipper_fedex_national | 1826 eshipper_usf_holland_us | 1827 eshipper_lakeville_m_express | 1828 eshipper_milan_express | 1829 eshipper_nebraska_transport | 1830 eshipper_new_england | 1831 eshipper_new_penn | 1832 eshipper_a_duie_pyle | 1833 eshipper_roadway_us | 1834 eshipper_usf_reddaway_us | 1835 eshipper_rhody_transportation | 1836 eshipper_saia_motor_freight | 1837 eshipper_southeastern_frgt | 1838 eshipper_pitt_ohio | 1839 eshipper_ward | 1840 eshipper_wilson | 1841 eshipper_chi_cargo | 1842 eshipper_tax_air | 1843 eshipper_fedex_east | 1844 eshipper_central_transport | 1845 eshipper_roadrunner | 1846 eshipper_r_and_l_carriers | 1847 eshipper_estes_us | 1848 eshipper_yrc_roadway | 1849 eshipper_central_transport_us | 1850 eshipper_absolute_transportation_services | 1851 eshipper_blue_sky_express | 1852 eshipper_galasso_trucking | 1853 eshipper_griley_air_freight | 1854 eshipper_jet_transportation | 1855 eshipper_metro_transportation_logistics | 1856 eshipper_oak_harbor | 1857 eshipper_stream_links_express | 1858 eshipper_tiffany_trucking | 1859 eshipper_ups_freight | 1860 eshipper_roadrunner_us | 1861 eshipper_global_mail_parcel_priority | 3500 eshipper_global_mail_parcel_standard | 3501 eshipper_global_mail_packet_plus_priority | 3502 eshipper_global_mail_packet_priority | 3503 eshipper_global_mail_packet_standard | 3504 eshipper_global_mail_business_priority | 3505 eshipper_global_mail_business_standard | 3506 eshipper_global_mail_parcel_direct_priority | 3507 eshipper_global_mail_parcel_direct_standard | 3508 eshipper_ground | 4500 eshipper_select_parcel | 4504 eshipper_express_parcel | 4507  </details><br/>   </details><br/>  
         * @summary Data References
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        references(options: any = {}): FetchArgs {
            const localVarPath = `/references`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsApi - functional programming interface
 * @export
 */
export const UtilsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a label PDF file.
         * @summary Print a Label
         * @param {LabelPrintingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printLabel(body: LabelPrintingRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UtilsApiFetchParamCreator(configuration).printLabel(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  ## Countries  <details>  Code | Name  --- | ---  AD | Andorra AE | United Arab Emirates AF | Afghanistan AG | Antigua AI | Anguilla AL | Albania AM | Armenia AN | Netherlands Antilles AO | Angola AR | Argentina AS | American Samoa AT | Austria AU | Australia AW | Aruba AZ | Azerbaijan BA | Bosnia And Herzegovina BB | Barbados BD | Bangladesh BE | Belgium BF | Burkina Faso BG | Bulgaria BH | Bahrain BI | Burundi BJ | Benin BM | Bermuda BN | Brunei BO | Bolivia BR | Brazil BS | Bahamas BT | Bhutan BW | Botswana BY | Belarus BZ | Belize CA | Canada CD | Congo, The Democratic Republic Of CF | Central African Republic CG | Congo CH | Switzerland CI | Cote D Ivoire CK | Cook Islands CL | Chile CM | Cameroon CN | China, Peoples Republic CO | Colombia CR | Costa Rica CU | Cuba CV | Cape Verde CY | Cyprus CZ | Czech Republic, The DE | Germany DJ | Djibouti DK | Denmark DM | Dominica DO | Dominican Republic DZ | Algeria EC | Ecuador EE | Estonia EG | Egypt ER | Eritrea ES | Spain ET | Ethiopia FI | Finland FJ | Fiji FK | Falkland Islands FM | Micronesia, Federated States Of FO | Faroe Islands FR | France GA | Gabon GB | United Kingdom GD | Grenada GE | Georgia GF | French Guyana GG | Guernsey GH | Ghana GI | Gibraltar GL | Greenland GM | Gambia GN | Guinea Republic GP | Guadeloupe GQ | Guinea-equatorial GR | Greece GT | Guatemala GU | Guam GW | Guinea-bissau GY | Guyana (british) HK | Hong Kong HN | Honduras HR | Croatia HT | Haiti HU | Hungary IC | Canary Islands, The ID | Indonesia IE | Ireland, Republic Of IL | Israel IN | India IQ | Iraq IR | Iran (islamic Republic Of) IS | Iceland IT | Italy JE | Jersey JM | Jamaica JO | Jordan JP | Japan KE | Kenya KG | Kyrgyzstan KH | Cambodia KI | Kiribati KM | Comoros KN | St. Kitts KP | Korea, The D.p.r Of (north K.) KR | Korea, Republic Of (south K.) KV | Kosovo KW | Kuwait KY | Cayman Islands KZ | Kazakhstan LA | Lao Peoples Democratic Republic LB | Lebanon LC | St. Lucia LI | Liechtenstein LK | Sri Lanka LR | Liberia LS | Lesotho LT | Lithuania LU | Luxembourg LV | Latvia LY | Libya MA | Morocco MC | Monaco MD | Moldova, Republic Of ME | Montenegro, Republic Of MG | Madagascar MH | Marshall Islands MK | Macedonia, Republic Of ML | Mali MM | Myanmar MN | Mongolia MO | Macau MP | Commonwealth No. Mariana Islands MQ | Martinique MR | Mauritania MS | Montserrat MT | Malta MU | Mauritius MV | Maldives MW | Malawi MX | Mexico MY | Malaysia MZ | Mozambique NA | Namibia NC | New Caledonia NE | Niger NG | Nigeria NI | Nicaragua NL | Netherlands, The NO | Norway NP | Nepal NR | Nauru, Republic Of NU | Niue NZ | New Zealand OM | Oman PA | Panama PE | Peru PF | Tahiti PG | Papua New Guinea PH | Philippines, The PK | Pakistan PL | Poland PR | Puerto Rico PT | Portugal PW | Palau PY | Paraguay QA | Qatar RE | Reunion, Island Of RO | Romania RS | Serbia, Republic Of RU | Russian Federation, The RW | Rwanda SA | Saudi Arabia SB | Solomon Islands SC | Seychelles SD | Sudan SE | Sweden SG | Singapore SH | Saint Helena SI | Slovenia SK | Slovakia SL | Sierra Leone SM | San Marino SN | Senegal SO | Somalia SR | Suriname SS | South Sudan ST | Sao Tome And Principe SV | El Salvador SY | Syria SZ | Swaziland TC | Turks And Caicos Islands TD | Chad TG | Togo TH | Thailand TJ | Tajikistan TL | Timor Leste TN | Tunisia TO | Tonga TR | Turkey TT | Trinidad And Tobago TV | Tuvalu TW | Taiwan TZ | Tanzania UA | Ukraine UG | Uganda US | United States UY | Uruguay UZ | Uzbekistan VA | Vatican City State VC | St. Vincent VE | Venezuela VG | British Virgin Islands VI | U.S. Virgin Islands VN | Vietnam VU | Vanuatu WS | Samoa XB | Bonaire XC | Curacao XE | St. Eustatius XM | St. Maarten XN | Nevis XS | Somaliland, Rep Of (north Somalia) XY | St. Barthelemy YE | Yemen, Republic Of YT | Mayotte ZA | South Africa ZM | Zambia ZW | Zimbabwe  </details><br/>   ## States and Provinces  <details>   ### United Arab Emirates  <details>  Code | Name  --- | ---  AB | Abu Dhabi AJ | Ajman DU | Dubai FU | Fujairah RA | Ras al-Khaimah SH | Sharjah UM | Umm al-Qaiwain  </details><br/>   ### Canada  <details>  Code | Name  --- | ---  AB | Alberta BC | British Columbia MB | Manitoba NB | New Brunswick NL | Newfoundland NT | Northwest Territories NS | Nova Scotia NU | Nunavut ON | Ontario PE | Prince Edward Island QC | Quebec SK | Saskatchewan YT | Yukon  </details><br/>   ### China, Peoples Republic  <details>  Code | Name  --- | ---  anhui | Anhui hainan | Hainan jiangxi | Jiangxi shanghai | Shanghai beijing | Beijing hebei | Hebei jilin | Jilin shanxi | Shanxi chongqing | Chongqing heilongjiang | Heilongjiang liaoning | Liaoning sichuan | Sichuan fujian | Fujian henan | Henan nei_mongol | Nei Mongol tianjin | Tianjin gansu | Gansu hubei | Hubei qinghai | Qinghai xinjiang | Xinjiang guangdong | Guangdong hunan | Hunan shaanxi | Shaanxi yunnan | Yunnan guizhou | Guizhou jiangsu | Jiangsu shandong | Shandong zhejiang | Zhejiang  </details><br/>   ### India  <details>  Code | Name  --- | ---  AN | Andaman & Nicobar (U.T) AP | Andhra Pradesh AR | Arunachal Pradesh AS | Assam BR | Bihar CG | Chattisgarh CH | Chandigarh (U.T.) DD | Daman & Diu (U.T.) DL | Delhi (U.T.) DN | Dadra and Nagar Haveli (U.T.) GA | Goa GJ | Gujarat HP | Himachal Pradesh HR | Haryana JH | Jharkhand JK | Jammu & Kashmir KA | Karnataka KL | Kerala LD | Lakshadweep (U.T) MH | Maharashtra ML | Meghalaya MN | Manipur MP | Madhya Pradesh MZ | Mizoram NL | Nagaland OR | Orissa PB | Punjab PY | Puducherry (U.T.) RJ | Rajasthan SK | Sikkim TN | Tamil Nadu TR | Tripura UA | Uttaranchal UP | Uttar Pradesh WB | West Bengal  </details><br/>   ### Mexico  <details>  Code | Name  --- | ---  AG | Aguascalientes BC | Baja California BS | Baja California Sur CM | Campeche CS | Chiapas CH | Chihuahua CO | Coahuila CL | Colima DF | Ciudad de México DG | Durango GT | Guanajuato GR | Guerrero HG | Hidalgo JA | Jalisco EM | Estado de México MI | Michoacán MO | Morelos NA | Nayarit NL | Nuevo León OA | Oaxaca PU | Puebla QE | Querétaro QR | Quintana Roo SL | San Luis Potosí SI | Sinaloa SO | Sonora TB | Tabasco TM | Tamaulipas TL | Tlaxcala VE | Veracruz YU | Yucatán ZA | Zacatecas  </details><br/>   ### United States  <details>  Code | Name  --- | ---  AL | Alabama AK | Alaska AZ | Arizona AR | Arkansas CA | California CO | Colorado CT | Connecticut DE | Delaware DC | District of Columbia FL | Florida GA | Georgia HI | Hawaii ID | Idaho IL | Illinois IN | Indiana IA | Iowa KS | Kansas KY | Kentucky LA | Louisiana ME | Maine MD | Maryland MA | Massachusetts MI | Michigan MN | Minnesota MS | Mississippi MO | Missouri MT | Montana NE | Nebraska NV | Nevada NH | New Hampshire NJ | New Jersey NM | New Mexico NY | New York NC | North Carolina ND | North Dakota OH | Ohio OK | Oklahoma OR | Oregon PA | Pennsylvania RI | Rhode Island SC | South Carolina SD | South Dakota TN | Tennessee TX | Texas UT | Utah VT | Vermont VA | Virginia WA | Washington State WV | West Virginia WI | Wisconsin WY | Wyoming PR | Puerto Rico  </details><br/>   </details><br/>  ## Currencies  <details>  Code | Name  --- | ---  EUR | Euro AED | UAE Dirham USD | US Dollar XCD | East Caribbean Dollar AMD | Dran ANG | Netherlands Antilles Guilder AOA | Kwanza ARS | Argentine Peso AUD | Australian Dollar AWG | Aruba Guilder AZN | Manat BAM | Convertible Marks BBD | Barbadian Dollar BDT | Taka XOF | CFA Franc West Africa BGN | Bulgarian Lev BHD | Bahraini Dinar BIF | Burundese Franc BMD | Bermudian Dollar BND | Brunei Dollar BOB | Boliviano BRL | Real BSD | Bahamian Dollar BTN | Ngultrum BWP | Pula BYN | Belarussian Ruble BZD | Belize Dollar CAD | Canadian Dollar CDF | Franc Congolais XAF | CFA Franc Central Africa CHF | Swiss Franc NZD | New Zealand Dollar CLP | New Chile Peso CNY | Yuan (Ren Min Bi) COP | Colombian Peso CRC | Costa Rican Colon CUC | Peso Convertible CVE | Cape Verde Escudo CZK | Czech Koruna DJF | Djibouti Franc DKK | Danish Krone DOP | Dominican Republic Peso DZD | Algerian Dinar EGP | Egyptian Pound ERN | Nakfa ETB | Birr FJD | Fijian Dollar GBP | Pound Sterling GEL | Georgian Lari GHS | Cedi GMD | Dalasi GNF | Guinea Franc GTQ | Quetzal GYD | Guyanan Dollar HKD | Hong Kong Dollar HNL | Lempira HRK | Croatian Kuna HTG | Gourde HUF | Forint IDR | Rupiah ILS | New Israeli Shekel INR | Indian Rupee IRR | Iranian Rial ISK | Icelandic Krona JMD | Jamaican Dollar JOD | Jordanian Dinar JPY | Yen KES | Kenyan Shilling KGS | Som KHR | Khmer Rial KMF | Comoros Franc KPW | North Korean Won KRW | Won KWD | Kuwaiti Dinar KYD | Cayman Islands Dollar KZT | Tenge LAK | Kip LKR | Sri Lankan Rupee LRD | Liberian Dollar LSL | Loti LYD | Libyan Dinar MAD | Moroccan Dirham MDL | Leu MGA | Ariary MKD | Denar MMK | Kyat MNT | Tugrik MOP | Pataca MRO | Ouguiya MUR | Mauritius Rupee MVR | Rufiyaa MWK | Kwacha MXN | Mexican Nuevo Peso MYR | Ringgit MZN | Mozambique Metical NAD | Namibian Dollar XPF | CFP Franc NGN | Naira NIO | Cordoba Oro NOK | Norwegian Krone NPR | Nepalese Rupee OMR | Omani Rial PEN | Nuevo Sol PGK | Kina PHP | Phillipines Peso PKR | Pakistani Rupee PLN | Zloty PYG | Guarani QAR | Qatar Rial RSD | Serbia, Dinars RUB | Russian Ruble RWF | Rwanda Franc SAR | Saudi Riyal SBD | Solomon Islands Dollar SCR | Seychelles Rupee SDG | Sudanese Pound SEK | Swedish Krona SGD | Singapore Dollar SHP | St. Helena Pound SLL | Leone SOS | Somali Shilling SRD | Suriname Dollar SSP | South Sudanese pound STD | Dobra SYP | Syrian Pound SZL | Lilangeni THB | Baht TJS | Somoni TND | Tunisian Dinar TOP | Pa'anga TRY | New Turkish Lira TTD | Trinidad and Tobago Dollar TWD | New Taiwan Dollar TZS | Tanzanian Shilling UAH | Hryvna UYU | Peso Uruguayo UZS | Sum VEF | Bolivar Fuerte VND | Dong VUV | Vanuatu Vatu WST | Tala YER | Yemeni Riyal ZAR | South African Rand  </details><br/>   ## Packaging Types  <details>   ### Multi-carrier (purplship)  <details>  Code | Identifier --- | --- envelope | Small Envelope pak | Pak tube | Tube pallet | Pallet small_box | Small Box medium_box | Medium Box your_packaging | Your Packaging  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_flyer_smalls | FLY dhl_parcels_conveyables | COY dhl_non_conveyables | NCY dhl_pallets | PAL dhl_double_pallets | DBL dhl_box | BOX  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_envelope | FEDEX_ENVELOPE fedex_pak | FEDEX_PAK fedex_box | FEDEX_BOX fedex_10_kg_box | FEDEX_10KG_BOX fedex_25_kg_box | FEDEX_25KG_BOX fedex_tube | FEDEX_TUBE your_packaging | YOUR_PACKAGING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_envelope | Envelope purolator_express_pack | Pack purolator_express_box | Box purolator_customer_packaging | Customer Packaging  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_unknown | 00 ups_letter | 01 ups_package | 02 ups_tube | 03 ups_pak | 04 ups_express_box | 21 ups_box_25_kg | 24 ups_box_10_kg | 25 ups_pallet | 30 ups_small_express_box | 2a ups_medium_express_box | 2b ups_large_express_box | 2c  </details><br/>   </details><br/>   ## Package Preset  <details>   ### Canada Post  <details>  Code | Dimensions | Note --- | --- | --- canadapost_mailing_box | 15.2 x 1.0 x 10.2 | height x length x width canadapost_extra_small_mailing_box | 14.0 x 14.0 x 14.0 | height x length x width canadapost_small_mailing_box | 22.9 x 6.4 x 28.6 | height x length x width canadapost_medium_mailing_box | 23.5 x 13.3 x 31.0 | height x length x width canadapost_large_mailing_box | 30.5 x 9.5 x 38.1 | height x length x width canadapost_extra_large_mailing_box | 30.5 x 21.6 x 40.0 | height x length x width canadapost_corrugated_small_box | 32.0 x 32.0 x 42.0 | height x length x width canadapost_corrugated_medium_box | 38.0 x 32.0 x 46.0 | height x length x width canadapost_corrugated_large_box | 46.0 x 40.6 x 46.0 | height x length x width canadapost_xexpresspost_certified_envelope | 15.9 x 1.5 x 0.5 x 26.0 | height x length x weight x width canadapost_xexpresspost_national_large_envelope | 29.2 x 1.5 x 1.36 x 40.0 | height x length x weight x width  </details><br/>   ### DHL Express  <details>  Code | Dimensions | Note --- | --- | --- dhl_express_envelope | 27.5 x 1.0 x 0.5 x 35.0 | height x length x weight x width dhl_express_standard_flyer | 30.0 x 1.5 x 2.0 x 40.0 | height x length x weight x width dhl_express_large_flyer | 37.5 x 1.5 x 3.0 x 47.5 | height x length x weight x width dhl_express_box_2 | 18.2 x 10.0 x 1.0 x 33.7 | height x length x weight x width dhl_express_box_3 | 32.0 x 5.2 x 2.0 x 33.6 | height x length x weight x width dhl_express_box_4 | 32.2 x 18.0 x 5.0 x 33.7 | height x length x weight x width dhl_express_box_5 | 32.2 x 34.5 x 10.0 x 33.7 | height x length x weight x width dhl_express_box_6 | 35.9 x 36.9 x 15.0 x 41.7 | height x length x weight x width dhl_express_box_7 | 40.4 x 38.9 x 20.0 x 48.1 | height x length x weight x width dhl_express_box_8 | 44.4 x 40.9 x 25.0 x 54.2 | height x length x weight x width dhl_express_tube | 15.0 x 15.0 x 5.0 x 96.0 | height x length x weight x width dhl_didgeridoo_box | 13.0 x 162.0 x 10.0 x 13.0 | height x length x weight x width dhl_jumbo_box | 42.7 x 33.0 x 30.0 x 45.0 | height x length x weight x width dhl_jumbo_box_junior | 34.0 x 24.1 x 20.0 x 39.9 | height x length x weight x width  </details><br/>   ### FedEx Express  <details>  Code | Dimensions | Note --- | --- | --- fedex_envelope_legal_size | 15.5 x 1.0 x 9.5 | height x weight x width fedex_padded_pak | 14.75 x 2.2 x 11.75 | height x weight x width fedex_polyethylene_pak | 15.5 x 2.2 x 12.0 | height x weight x width fedex_clinical_pak | 18.0 x 2.2 x 13.5 | height x weight x width fedex_small_box | 10.9 x 1.5 x 20.0 x 12.25 | height x length x weight x width fedex_medium_box | 11.5 x 2.38 x 20.0 x 13.25 | height x length x weight x width fedex_large_box | 12.38 x 3.0 x 20.0 x 17.88 | height x length x weight x width fedex_10_kg_box | 12.94 x 10.19 x 10.0 x 15.81 | height x length x weight x width fedex_25_kg_box | 16.56 x 13.19 x 25.0 x 21.56 | height x length x weight x width fedex_tube | 6.0 x 6.0 x 20.0 x 38.0 | height x length x weight x width  </details><br/>   ### Purolator Courier  <details>  Code | Dimensions | Note --- | --- | --- purolator_express_envelope | 1.5 x 1.0 x 12.5 | length x weight x width purolator_express_pack | 1.0 x 3.0 x 12.5 | length x weight x width purolator_express_box | 3.5 x 7.0 | length x weight  </details><br/>   ### UPS Package  <details>  Code | Dimensions | Note --- | --- | --- ups_small_express_box | 11.0 x 2.0 x 30.0 x 13.0 | height x length x weight x width ups_medium_express_box | 11.0 x 3.0 x 30.0 x 16.0 | height x length x weight x width ups_large_express_box | 13.0 x 3.0 x 30.0 x 18.0 | height x length x weight x width ups_express_tube | 6.0 x 6.0 x 38.0 | height x length x width ups_express_pak | 11.75 x 1.5 x 16.0 | height x length x width ups_world_document_box | 12.5 x 3.0 x 17.5 | height x length x width  </details><br/>   </details><br/>   ## Shipment Options  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_signature | SO canadapost_coverage | COV canadapost_collect_on_delivery | COD canadapost_proof_of_age_required_18 | PA18 canadapost_proof_of_age_required_19 | PA19 canadapost_card_for_pickup | HFP canadapost_do_not_safe_drop | DNS canadapost_leave_at_door | LAD canadapost_deliver_to_post_office | D2PO canadapost_return_at_senders_expense | RASE canadapost_return_to_sender | RTS canadapost_abandon | ABAN  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | 0A dhl_mailroom_management | 0B dhl_pallet_administration | 0C dhl_warehousing | 0D dhl_express_logistics_centre | 0E dhl_strategic_parts_centre | 0F dhl_local_distribution_centre | 0G dhl_terminal_handling | 0H dhl_cross_docking | 0I dhl_inventory_management | 0J dhl_loading_unloading | 0K dhl_product_kitting | 0L dhl_priority_account_desk | 0M dhl_document_archiving | 0N dhl_saturday_delivery | AA dhl_saturday_pickup | AB dhl_holiday_delivery | AC dhl_holiday_pickup | AD dhl_domestic_saturday_delivery | AG dhl_standard | BA dhl_globalmail_item | BB dhl_letter | BC dhl_packet | BD dhl_letter_plus | BE dhl_packet_plus | BF dhl_elevated_risk | CA dhl_restricted_destination | CB dhl_security_validation | CC dhl_secure_protection | CD dhl_proof_of_identity | CE dhl_secure_storage | CF dhl_diplomatic_material | CG dhl_smart_sensor | CH dhl_visa_program | CI dhl_onboard_courier | CJ dhl_secure_safebox | CK dhl_smart_sentry | CL dhl_split_duties_and_tax | DC dhl_duties_and_taxes_paid | DD dhl_receiver_paid | DE dhl_duties_and_taxes_unpaid | DS dhl_import_billing | DT dhl_importer_of_record | DU dhl_go_green_carbon_neutral | EA dhl_go_green_carbon_footprint | EB dhl_go_green_carbon_estimate | EC dhl_fuel_surcharge_b | FB dhl_fuel_surcharge_c | FC dhl_fuel_surcharge_f | FF dhl_smartphone_box | GA dhl_laptop_box | GB dhl_bottle_box | GC dhl_repacking | GD dhl_tablet_box | GE dhl_filler_material | GF dhl_packaging | GG dhl_diplomatic_bag | GH dhl_pallet_box | GI dhl_lock_box | GJ dhl_lithium_ion_pi965_section_ii | HB dhl_dry_ice_un1845 | HC dhl_lithium_ion_pi965_966_section_ii | HD dhl_dangerous_goods | HE dhl_perishable_cargo | HG dhl_excepted_quantity | HH dhl_spill_cleaning | HI dhl_consumer_commodities | HK dhl_limited_quantities_adr | HL dhl_lithium_metal_pi969_section_ii | HM dhl_adr_load_exemption | HN dhl_lithium_ion_pi967_section_ii | HV dhl_lithium_metal_pi970_section_ii | HW dhl_biological_un3373 | HY dhl_extended_liability | IB dhl_contract_insurance | IC dhl_shipment_insurance | II dhl_delivery_notification | JA dhl_pickup_notification | JC dhl_proactive_tracking | JD dhl_performance_reporting | JE dhl_prealert_notification | JY dhl_change_of_billing | KA dhl_cash_on_delivery | KB dhl_printed_invoice | KD dhl_waybill_copy | KE dhl_import_paperwork | KF dhl_payment_on_pickup | KY dhl_shipment_intercept | LA dhl_shipment_redirect | LC dhl_storage_at_facility | LE dhl_cold_storage | LG dhl_specific_routing | LH dhl_service_recovery | LV dhl_alternative_address | LW dhl_hold_for_collection | LX dhl_address_correction_a | MA dhl_address_correction_b | MB dhl_neutral_delivery | NN dhl_remote_area_pickup | OB dhl_remote_area_delivery_c | OC dhl_out_of_service_area | OE dhl_remote_area_delivery_o | OO dhl_shipment_preparation | PA dhl_shipment_labeling | PB dhl_shipment_consolidation | PC dhl_relabeling_data_entry | PD dhl_preprinted_waybill | PE dhl_piece_labelling | PS dhl_data_staging_03 | PT dhl_data_staging_06 | PU dhl_data_staging_12 | PV dhl_data_staging_24 | PW dhl_standard_pickup | PX dhl_scheduled_pickup | PY dhl_dedicated_pickup | QA dhl_early_pickup | QB dhl_late_pickup | QD dhl_residential_pickup | QE dhl_loading_waiting | QF dhl_bypass_injection | QH dhl_direct_injection | QI dhl_drop_off_at_facility | QY dhl_delivery_signature | SA dhl_content_signature | SB dhl_named_signature | SC dhl_adult_signature | SD dhl_contract_signature | SE dhl_alternative_signature | SW dhl_no_signature_required | SX dhl_dedicated_delivery | TA dhl_early_delivery | TB dhl_time_window_delivery | TC dhl_evening_delivery | TD dhl_delivery_on_appointment | TE dhl_return_undeliverable | TG dhl_swap_delivery | TH dhl_unloading_waiting | TJ dhl_residential_delivery | TK dhl_repeat_delivery | TN dhl_alternative_date | TT dhl_no_partial_delivery | TU dhl_service_point_24_7 | TV dhl_pre_9_00 | TW dhl_pre_10_30 | TX dhl_pre_12_00 | TY dhl_thermo_packaging | UA dhl_ambient_vialsafe | UB dhl_ambient_non_insulated | UC dhl_ambient_insulated | UD dhl_ambient_extreme | UE dhl_chilled_box_s | UF dhl_chilled_box_m | UG dhl_chilled_box_l | UH dhl_frozen_no_ice_s | UI dhl_frozen_no_ice_m | UJ dhl_frozen_no_ice_l | UK dhl_frozen_ice_sticks_s | UL dhl_frozen_ice_sticks_m | UM dhl_frozen_ice_sticks_l | UN dhl_frozen_ice_plates_s | UO dhl_frozen_ice_plates_m | UP dhl_frozen_ice_plates_l | UQ dhl_combination_no_ice | UR dhl_combination_dry_ice | US dhl_frozen_ice_sticks_e | UT dhl_frozen_ice_plates_e | UV dhl_customer_tcp_1 | UW dhl_thermo_accessories | VA dhl_absorbent_sleeve | VB dhl_cooland_wrap | VC dhl_dry_ice_supplies | VD dhl_pressure_bag_s | VE dhl_pressure_bag_m | VF dhl_pressure_bag_l | VG dhl_informal_clearance | WA dhl_formal_clearance | WB dhl_payment_deferment | WC dhl_clearance_authorization | WD dhl_multiline_entry | WE dhl_post_clearance_modification | WF dhl_handover_to_broker | WG dhl_physical_intervention | WH dhl_bio_phyto_veterinary_controls | WI dhl_obtaining_permits_and_licences | WJ dhl_bonded_storage | WK dhl_bonded_transit_documents | WL dhl_temporary_import_export | WM dhl_under_bond_guarantee | WN dhl_export_declaration | WO dhl_exporter_validation | WP dhl_certificate_of_origin | WQ dhl_document_translation | WR dhl_personal_effects | WS dhl_paperless_trade | WY dhl_import_export_taxes | XB dhl_unrecoverable_origin_tax | XC dhl_quarantine_inspection | XD dhl_merchandise_process | XE dhl_domestic_postal_tax | XF dhl_tier_two_tax | XG dhl_tier_three_tax | XH dhl_import_penalty | XI dhl_cargo_zone_process | XJ dhl_import_export_duties | XX dhl_premium_09_00 | Y1 dhl_premium_10_30 | Y2 dhl_premium_12_00 | Y3 dhl_over_sized_piece_b | YB dhl_over_handled_piece_c | YC dhl_multipiece_shipment | YE dhl_over_weight_piece_f | YF dhl_over_sized_piece_g | YG dhl_over_handled_piece_h | YH dhl_premium_9_00_i | YI dhl_premium_10_30_j | YJ dhl_premium_12_00_k | YK dhl_paket_shipment | YV dhl_breakbulk_mother | YW dhl_breakbulk_baby | YX dhl_over_weight_piece_y | YY dhl_customer_claim | ZA dhl_damage_compensation | ZB dhl_loss_compensation | ZC dhl_customer_rebate | ZD dhl_e_com_discount | ZE  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_blind_shipment | BLIND_SHIPMENT fedex_broker_select_option | BROKER_SELECT_OPTION fedex_call_before_delivery | CALL_BEFORE_DELIVERY fedex_cod | COD fedex_cod_remittance | COD_REMITTANCE fedex_custom_delivery_window | CUSTOM_DELIVERY_WINDOW fedex_cut_flowers | CUT_FLOWERS fedex_dangerous_goods | DANGEROUS_GOODS fedex_delivery_on_invoice_acceptance | DELIVERY_ON_INVOICE_ACCEPTANCE fedex_detention | DETENTION fedex_do_not_break_down_pallets | DO_NOT_BREAK_DOWN_PALLETS fedex_do_not_stack_pallets | DO_NOT_STACK_PALLETS fedex_dry_ice | DRY_ICE fedex_east_coast_special | EAST_COAST_SPECIAL fedex_electronic_trade_documents | ELECTRONIC_TRADE_DOCUMENTS fedex_event_notification | EVENT_NOTIFICATION fedex_exclude_from_consolidation | EXCLUDE_FROM_CONSOLIDATION fedex_exclusive_use | EXCLUSIVE_USE fedex_exhibition_delivery | EXHIBITION_DELIVERY fedex_exhibition_pickup | EXHIBITION_PICKUP fedex_expedited_alternate_delivery_route | EXPEDITED_ALTERNATE_DELIVERY_ROUTE fedex_expedited_one_day_earlier | EXPEDITED_ONE_DAY_EARLIER fedex_expedited_service_monitoring_and_delivery | EXPEDITED_SERVICE_MONITORING_AND_DELIVERY fedex_expedited_standard_day_early_delivery | EXPEDITED_STANDARD_DAY_EARLY_DELIVERY fedex_extra_labor | EXTRA_LABOR fedex_extreme_length | EXTREME_LENGTH fedex_one_rate | FEDEX_ONE_RATE fedex_flatbed_trailer | FLATBED_TRAILER fedex_food | FOOD fedex_freight_guarantee | FREIGHT_GUARANTEE fedex_freight_to_collect | FREIGHT_TO_COLLECT fedex_future_day_shipment | FUTURE_DAY_SHIPMENT fedex_hold_at_location | HOLD_AT_LOCATION fedex_holiday_delivery | HOLIDAY_DELIVERY fedex_holiday_guarantee | HOLIDAY_GUARANTEE fedex_home_delivery_premium | HOME_DELIVERY_PREMIUM fedex_inside_delivery | INSIDE_DELIVERY fedex_inside_pickup | INSIDE_PICKUP fedex_international_controlled_export_service | INTERNATIONAL_CONTROLLED_EXPORT_SERVICE fedex_international_mail_service | INTERNATIONAL_MAIL_SERVICE fedex_international_traffic_in_arms_regulations | INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS fedex_liftgate_delivery | LIFTGATE_DELIVERY fedex_liftgate_pickup | LIFTGATE_PICKUP fedex_limited_access_delivery | LIMITED_ACCESS_DELIVERY fedex_limited_access_pickup | LIMITED_ACCESS_PICKUP fedex_marking_or_tagging | MARKING_OR_TAGGING fedex_non_business_time | NON_BUSINESS_TIME fedex_pallet_shrinkwrap | PALLET_SHRINKWRAP fedex_pallet_weight_allowance | PALLET_WEIGHT_ALLOWANCE fedex_pallets_provided | PALLETS_PROVIDED fedex_pending_complete | PENDING_COMPLETE fedex_pending_shipment | PENDING_SHIPMENT fedex_permit | PERMIT fedex_pharmacy_delivery | PHARMACY_DELIVERY fedex_poison | POISON fedex_port_delivery | PORT_DELIVERY fedex_port_pickup | PORT_PICKUP fedex_pre_delivery_notification | PRE_DELIVERY_NOTIFICATION fedex_pre_eig_processing | PRE_EIG_PROCESSING fedex_pre_multiplier_processing | PRE_MULTIPLIER_PROCESSING fedex_protection_from_freezing | PROTECTION_FROM_FREEZING fedex_regional_mall_delivery | REGIONAL_MALL_DELIVERY fedex_regional_mall_pickup | REGIONAL_MALL_PICKUP fedex_return_shipment | RETURN_SHIPMENT fedex_returns_clearance | RETURNS_CLEARANCE fedex_returns_clearance_special_routing_required | RETURNS_CLEARANCE_SPECIAL_ROUTING_REQUIRED fedex_saturday_delivery | SATURDAY_DELIVERY fedex_saturday_pickup | SATURDAY_PICKUP fedex_shipment_assembly | SHIPMENT_ASSEMBLY fedex_sort_and_segregate | SORT_AND_SEGREGATE fedex_special_delivery | SPECIAL_DELIVERY fedex_special_equipment | SPECIAL_EQUIPMENT fedex_storage | STORAGE fedex_sunday_delivery | SUNDAY_DELIVERY fedex_third_party_consignee | THIRD_PARTY_CONSIGNEE fedex_top_load | TOP_LOAD fedex_usps_delivery | USPS_DELIVERY fedex_usps_pickup | USPS_PICKUP fedex_weighing | WEIGHING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_dangerous_goods | Dangerous Goods purolator_chain_of_signature | Chain of Signature purolator_express_cheque | ExpressCheque purolator_hold_for_pickup | Hold For Pickup purolator_return_services | Return Services purolator_saturday_service | Saturday Service purolator_origin_signature_not_required | Origin Signature Not Required (OSNR) purolator_adult_signature_required | Adult Signature Required (ASR) purolator_special_handling | Special Handling  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_saturday_delivery_indicator | SaturdayDeliveryIndicator ups_access_point_cod | AccessPointCOD ups_deliver_to_addressee_only_indicator | DeliverToAddresseeOnlyIndicator ups_direct_delivery_only_indicator | DirectDeliveryOnlyIndicator ups_cod | COD ups_delivery_confirmation | DeliveryConfirmation ups_return_of_document_indicator | ReturnOfDocumentIndicator ups_up_scarbonneutral_indicator | UPScarbonneutralIndicator ups_certificate_of_origin_indicator | CertificateOfOriginIndicator ups_pickup_options | PickupOptions ups_delivery_options | DeliveryOptions ups_restricted_articles | RestrictedArticles ups_shipper_export_declaration_indicator | ShipperExportDeclarationIndicator ups_commercial_invoice_removal_indicator | CommercialInvoiceRemovalIndicator ups_import_control | ImportControl ups_return_service | ReturnService ups_sdl_shipment_indicator | SDLShipmentIndicator ups_epra_indicator | EPRAIndicator  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_saturday_pickup_required | saturdayPickupRequired freightcom_homeland_security | homelandSecurity freightcom_exhibition_convention_site | exhibitionConventionSite freightcom_military_base_delivery | militaryBaseDelivery freightcom_customs_in_bond_freight | customsIn_bondFreight freightcom_limited_access | limitedAccess freightcom_excess_length | excessLength freightcom_tailgate_pickup | tailgatePickup freightcom_residential_pickup | residentialPickup freightcom_cross_border_fee | crossBorderFee freightcom_notify_recipient | notifyRecipient freightcom_single_shipment | singleShipment freightcom_tailgate_delivery | tailgateDelivery freightcom_residential_delivery | residentialDelivery freightcom_insurance_type | insuranceType freightcom_inside_delivery | insideDelivery freightcom_is_saturday_service | isSaturdayService freightcom_dangerous_goods_type | dangerousGoodsType freightcom_stackable | stackable  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_saturday_pickup_required | saturdayPickupRequired eshipper_homeland_security | homelandSecurity eshipper_exhibition_convention_site | exhibitionConventionSite eshipper_military_base_delivery | militaryBaseDelivery eshipper_customs_in_bond_freight | customsIn_bondFreight eshipper_limited_access | limitedAccess eshipper_excess_length | excessLength eshipper_tailgate_pickup | tailgatePickup eshipper_residential_pickup | residentialPickup eshipper_cross_border_fee | crossBorderFee eshipper_notify_recipient | notifyRecipient eshipper_single_shipment | singleShipment eshipper_tailgate_delivery | tailgateDelivery eshipper_residential_delivery | residentialDelivery eshipper_insurance_type | insuranceType eshipper_inside_delivery | insideDelivery eshipper_is_saturday_service | isSaturdayService eshipper_dangerous_goods_type | dangerousGoodsType eshipper_stackable | stackable  </details><br/>   </details><br/>   ## Shipment Services  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_regular_parcel | DOM.RP canadapost_expedited_parcel | DOM.EP canadapost_xpresspost | DOM.XP canadapost_priority | DOM.PC canadapost_library_books | DOM.LIB canadapost_expedited_parcel_usa | USA.EP canadapost_priority_worldwide_envelope_usa | USA.PW.ENV canadapost_priority_worldwide_pak_usa | USA.PW.PAK canadapost_priority_worldwide_parcel_usa | USA.PW.PARCEL canadapost_small_packet_usa_air | USA.SP.AIR canadapost_tracked_packet_usa | USA.TP canadapost_tracked_packet_usa_lvm | USA.TP.LVM canadapost_xpresspost_usa | USA.XP canadapost_xpresspost_international | INT.XP canadapost_international_parcel_air | INT.IP.AIR canadapost_international_parcel_surface | INT.IP.SURF canadapost_priority_worldwide_envelope_intl | INT.PW.ENV canadapost_priority_worldwide_pak_intl | INT.PW.PAK canadapost_priority_worldwide_parcel_intl | INT.PW.PARCEL canadapost_small_packet_international_air | INT.SP.AIR canadapost_small_packet_international_surface | INT.SP.SURF canadapost_tracked_packet_international | INT.TP  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | LOGISTICS SERVICES dhl_domestic_express_12_00_doc | DOMESTIC EXPRESS 12:00 DOC dhl_b2_c_doc | B2C DOC dhl_b2_c_nondoc | B2C NONDOC dhl_jetline | JETLINE dhl_sprintline | SPRINTLINE dhl_express_easy_doc | EXPRESS EASY DOC dhl_express_easy_nondoc | EXPRESS EASY NONDOC dhl_europack_doc | EUROPACK DOC dhl_auto_reversals | AUTO REVERSALS dhl_breakbulk_express_doc | BREAKBULK EXPRESS DOC dhl_medical_express_doc | MEDICAL EXPRESS DOC dhl_express_worldwide_doc | EXPRESS WORLDWIDE DOC dhl_express_9_00_nondoc | EXPRESS 9:00 NONDOC dhl_freight_worldwide_nondoc | FREIGHT WORLDWIDE NONDOC dhl_domestic_economy_select_doc | DOMESTIC ECONOMY SELECT DOC dhl_economy_select_nondoc | ECONOMY SELECT NONDOC dhl_domestic_express_9_00_doc | DOMESTIC EXPRESS 9:00 DOC dhl_jumbo_box_nondoc | JUMBO BOX NONDOC dhl_express_9_00_doc | EXPRESS 9:00 DOC dhl_express_10_30_doc | EXPRESS 10:30 DOC dhl_express_10_30_nondoc | EXPRESS 10:30 NONDOC dhl_domestic_express_doc | DOMESTIC EXPRESS DOC dhl_domestic_express_10_30_doc | DOMESTIC EXPRESS 10:30 DOC dhl_express_worldwide_nondoc | EXPRESS WORLDWIDE NONDOC dhl_medical_express_nondoc | MEDICAL EXPRESS NONDOC dhl_globalmail_business_doc | GLOBALMAIL BUSINESS DOC dhl_same_day_doc | SAME DAY DOC dhl_express_12_00_doc | EXPRESS 12:00 DOC dhl_europack_nondoc | EUROPACK NONDOC dhl_economy_select_doc | ECONOMY SELECT DOC dhl_express_envelope_doc | EXPRESS ENVELOPE DOC dhl_express_12_00_nondoc | EXPRESS 12:00 NONDOC dhl_destination_charges | Destination Charges  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_europe_first_international_priority | EUROPE_FIRST_INTERNATIONAL_PRIORITY fedex_1_day_freight | FEDEX_1_DAY_FREIGHT fedex_2_day | FEDEX_2_DAY fedex_2_day_am | FEDEX_2_DAY_AM fedex_2_day_freight | FEDEX_2_DAY_FREIGHT fedex_3_day_freight | FEDEX_3_DAY_FREIGHT fedex_cargo_airport_to_airport | FEDEX_CARGO_AIRPORT_TO_AIRPORT fedex_cargo_freight_forwarding | FEDEX_CARGO_FREIGHT_FORWARDING fedex_cargo_international_express_freight | FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT fedex_cargo_international_premium | FEDEX_CARGO_INTERNATIONAL_PREMIUM fedex_cargo_mail | FEDEX_CARGO_MAIL fedex_cargo_registered_mail | FEDEX_CARGO_REGISTERED_MAIL fedex_cargo_surface_mail | FEDEX_CARGO_SURFACE_MAIL fedex_custom_critical_air_expedite | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE fedex_custom_critical_air_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_air_expedite_network | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK fedex_custom_critical_charter_air | FEDEX_CUSTOM_CRITICAL_CHARTER_AIR fedex_custom_critical_point_to_point | FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT fedex_custom_critical_surface_expedite | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE fedex_custom_critical_surface_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_temp_assure_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR fedex_custom_critical_temp_assure_validated_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR fedex_custom_critical_white_glove_services | FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES fedex_distance_deferred | FEDEX_DISTANCE_DEFERRED fedex_express_saver | FEDEX_EXPRESS_SAVER fedex_first_freight | FEDEX_FIRST_FREIGHT fedex_freight_economy | FEDEX_FREIGHT_ECONOMY fedex_freight_priority | FEDEX_FREIGHT_PRIORITY fedex_ground | FEDEX_GROUND fedex_international_priority_plus | FEDEX_INTERNATIONAL_PRIORITY_PLUS fedex_next_day_afternoon | FEDEX_NEXT_DAY_AFTERNOON fedex_next_day_early_morning | FEDEX_NEXT_DAY_EARLY_MORNING fedex_next_day_end_of_day | FEDEX_NEXT_DAY_END_OF_DAY fedex_next_day_freight | FEDEX_NEXT_DAY_FREIGHT fedex_next_day_mid_morning | FEDEX_NEXT_DAY_MID_MORNING fedex_first_overnight | FIRST_OVERNIGHT fedex_ground_home_delivery | GROUND_HOME_DELIVERY fedex_international_distribution_freight | INTERNATIONAL_DISTRIBUTION_FREIGHT fedex_international_economy | INTERNATIONAL_ECONOMY fedex_international_economy_distribution | INTERNATIONAL_ECONOMY_DISTRIBUTION fedex_international_economy_freight | INTERNATIONAL_ECONOMY_FREIGHT fedex_international_first | INTERNATIONAL_FIRST fedex_international_ground | INTERNATIONAL_GROUND fedex_international_priority | INTERNATIONAL_PRIORITY fedex_international_priority_distribution | INTERNATIONAL_PRIORITY_DISTRIBUTION fedex_international_priority_express | INTERNATIONAL_PRIORITY_EXPRESS fedex_international_priority_freight | INTERNATIONAL_PRIORITY_FREIGHT fedex_priority_overnight | PRIORITY_OVERNIGHT fedex_same_day | SAME_DAY fedex_same_day_city | SAME_DAY_CITY fedex_same_day_metro_afternoon | SAME_DAY_METRO_AFTERNOON fedex_same_day_metro_morning | SAME_DAY_METRO_MORNING fedex_same_day_metro_rush | SAME_DAY_METRO_RUSH fedex_smart_post | SMART_POST fedex_standard_overnight | STANDARD_OVERNIGHT fedex_transborder_distribution_consolidation | TRANSBORDER_DISTRIBUTION_CONSOLIDATION  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_9_am | PurolatorExpress9AM purolator_express_us | PurolatorExpressU.S. purolator_express_10_30_am | PurolatorExpress10:30AM purolator_express_us_9_am | PurolatorExpressU.S.9AM purolator_express_12_pm | PurolatorExpress12PM purolator_express_us_10_30_am | PurolatorExpressU.S.10:30AM purolator_express | PurolatorExpress purolator_express_us_12_00 | PurolatorExpressU.S.12:00 purolator_express_evening | PurolatorExpressEvening purolator_express_envelope_us | PurolatorExpressEnvelopeU.S. purolator_express_envelope_9_am | PurolatorExpressEnvelope9AM purolator_express_us_envelope_9_am | PurolatorExpressU.S.Envelope9AM purolator_express_envelope_10_30_am | PurolatorExpressEnvelope10:30AM purolator_express_us_envelope_10_30_am | PurolatorExpressU.S.Envelope10:30AM purolator_express_envelope_12_pm | PurolatorExpressEnvelope12PM purolator_express_us_envelope_12_00 | PurolatorExpressU.S.Envelope12:00 purolator_express_envelope | PurolatorExpressEnvelope purolator_express_pack_us | PurolatorExpressPackU.S. purolator_express_envelope_evening | PurolatorExpressEnvelopeEvening purolator_express_us_pack_9_am | PurolatorExpressU.S.Pack9AM purolator_express_pack_9_am | PurolatorExpressPack9AM purolator_express_us_pack_10_30_am | PurolatorExpressU.S.Pack10:30AM purolator_express_pack10_30_am | PurolatorExpressPack10:30AM purolator_express_us_pack_12_00 | PurolatorExpressU.S.Pack12:00 purolator_express_pack_12_pm | PurolatorExpressPack12PM purolator_express_box_us | PurolatorExpressBoxU.S. purolator_express_pack | PurolatorExpressPack purolator_express_us_box_9_am | PurolatorExpressU.S.Box9AM purolator_express_pack_evening | PurolatorExpressPackEvening purolator_express_us_box_10_30_am | PurolatorExpressU.S.Box10:30AM purolator_express_box_9_am | PurolatorExpressBox9AM purolator_express_us_box_12_00 | PurolatorExpressU.S.Box12:00 purolator_express_box_10_30_am | PurolatorExpressBox10:30AM purolator_ground_us | PurolatorGroundU.S. purolator_express_box_12_pm | PurolatorExpressBox12PM purolator_express_international | PurolatorExpressInternational purolator_express_box | PurolatorExpressBox purolator_express_international_9_am | PurolatorExpressInternational9AM purolator_express_box_evening | PurolatorExpressBoxEvening purolator_express_international_10_30_am | PurolatorExpressInternational10:30AM purolator_ground | PurolatorGround purolator_express_international_12_00 | PurolatorExpressInternational12:00 purolator_ground9_am | PurolatorGround9AM purolator_express_envelope_international | PurolatorExpressEnvelopeInternational purolator_ground10_30_am | PurolatorGround10:30AM purolator_express_international_envelope_9_am | PurolatorExpressInternationalEnvelope9AM purolator_ground_evening | PurolatorGroundEvening purolator_express_international_envelope_10_30_am | PurolatorExpressInternationalEnvelope10:30AM purolator_quick_ship | PurolatorQuickShip purolator_express_international_envelope_12_00 | PurolatorExpressInternationalEnvelope12:00 purolator_quick_ship_envelope | PurolatorQuickShipEnvelope purolator_express_pack_international | PurolatorExpressPackInternational purolator_quick_ship_pack | PurolatorQuickShipPack purolator_express_international_pack_9_am | PurolatorExpressInternationalPack9AM purolator_quick_ship_box | PurolatorQuickShipBox purolator_express_international_pack_10_30_am | PurolatorExpressInternationalPack10:30AM purolator_express_international_pack_12_00 | PurolatorExpressInternationalPack12:00 purolator_express_box_international | PurolatorExpressBoxInternational purolator_express_international_box_9_am | PurolatorExpressInternationalBox9AM purolator_express_international_box_10_30_am | PurolatorExpressInternationalBox10:30AM purolator_express_international_box_12_00 | PurolatorExpressInternationalBox12:00  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_standard | 11 ups_worldwide_expedited | 08 ups_worldwide_express | 07 ups_worldwide_express_plus | 54 ups_worldwide_saver | 65 ups_2nd_day_air | 02 ups_2nd_day_air_am | 59 ups_3_day_select | 12 ups_expedited_mail_innovations | M4 ups_first_class_mail | M2 ups_ground | 03 ups_next_day_air | 01 ups_next_day_air_early | 14 ups_next_day_air_saver | 13 ups_priority_mail | M3 ups_access_point_economy | 70 ups_today_dedicated_courier | 83 ups_today_express | 85 ups_today_express_saver | 86 ups_today_standard | 82 ups_worldwide_express_freight | 96 ups_priority_mail_innovations | M5 ups_economy_mail_innovations | M6  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_central_transport | 2029 freigthcom_estes | 2107 freigthcom_usf_holland | 1911 freightcom_dicom_ground | 3700 freightcom_ground | 3400 freightcom_select | 3404 freightcom_overnight | 3407 freightcom_purolator_ground | 4000 freightcom_purolator_express | 4003 freightcom_purolator_express_9_am | 4004 freightcom_purolator_express_10_30_am | 4005 freightcom_fedex_express_saver | 4100 freightcom_fedex_ground | 4101 freightcom_fedex_2_day | 4102 freightcom_fedex_priority_overnight | 4104 freightcom_fedex_standard_overnight | 4105 freightcom_fedex_first_overnight | 4106 freightcom_fedex_international_economy | 4109 freightcom_ups_standard | 4600 freightcom_ups_expedited | 4601 freightcom_ups_express_saver | 4602 freightcom_ups_express | 4603 freightcom_ups_express_early | 4604 freightcom_ups_3_day_select | 4605 freightcom_ups_worldwide_expedited | 4606 freightcom_ups_worldwide_express | 4607 freightcom_fedex_international_priority | 4108 freightcom_ups_worldwide_express_saver | 4609 freightcom_purolator_ground_us | 4016 freightcom_purolator_express_us | 4015 freightcom_purolator_express_us_10_30_am | 4014 freightcom_ups_worldwide_express_plus | 4608 freightcom_purolator_express_us_9_am | 4013 freightcom_express_easy | 5202 freightcom_express_10_30 | 5208 freightcom_express_worldwide | 5211 freightcom_express_12_00 | 5215 freightcom_economy_select | 5216 freightcom_dayr_e_comm_am_service | 5706 freightcom_dayr_e_comm_ground_service | 5707 freightcom_regular_parcel | 6301 freightcom_expedited_parcel | 6300 freightcom_xpresspost | 6303 freightcom_priority | 6302  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_fedex_priority | 1 eshipper_fedex_first_overnight | 2 eshipper_fedex_ground | 3 eshipper_fedex_standard_overnight | 28 eshipper_fedex_2nd_day | 29 eshipper_fedex_express_saver | 30 eshipper_fedex_international_economy | 35 eshipper_purolator_air | 4 eshipper_purolator_air_9_am | 5 eshipper_purolator_air_10_30 | 6 eshipper_puro_letter | 7 eshipper_puro_letter_9_am | 8 eshipper_puro_letter_10_30 | 9 eshipper_puro_pak | 10 eshipper_puro_pak_9_am | 11 eshipper_puro_pak_10_30 | 12 eshipper_purolator_ground | 13 eshipper_purolator_ground_9_am | 19 eshipper_purolator_ground_10_30 | 20 eshipper_canada_worldwide_same_day | 14 eshipper_canada_worldwide_next_flight_out | 15 eshipper_canada_worldwide_air_freight | 16 eshipper_canada_worldwide_ltl | 17 eshipper_dhl_express_worldwide | 101 eshipper_dhl_express_12_pm | 103 eshipper_dhl_express_10_30_am | 102 eshipper_dhl_esi_export | 104 eshipper_dhl_international_express | 106 eshipper_ups_express_next_day_air | 600 eshipper_ups_expedited_second_day_air | 601 eshipper_ups_worldwide_express | 602 eshipper_ups_worldwide_expedited | 603 eshipper_ups_standard_ground | 604 eshipper_ups_express_early_am_next_day_air_early_am | 605 eshipper_ups_three_day_select | 606 eshipper_ups_saver | 607 eshipper_ups_ground | 608 eshipper_next_day_saver | 609 eshipper_worldwide_express_plus | 610 eshipper_second_day_air_am | 611 eshipper_canada_post_priority | 500 eshipper_canada_post_xpress_post | 501 eshipper_canada_post_expedited | 502 eshipper_canada_post_regular | 503 eshipper_canada_post_xpress_post_usa | 504 eshipper_canada_post_xpress_post_intl | 505 eshipper_canada_post_air_parcel_intl | 506 eshipper_canada_post_surface_parcel_intl | 507 eshipper_canada_post_expedited_parcel_usa | 508 eshipper_tst_ltl | 1100 eshipper_ltl_chicago_suburban_express | 1500 eshipper_ltl_fedex_freight_east | 1501 eshipper_ltl_fedex_freight_west | 1502 eshipper_ltl_mid_states_express | 1503 eshipper_ltl_new_england_motor_freight | 1504 eshipper_ltl_new_penn | 1505 eshipper_ltl_oak_harbor | 1506 eshipper_ltl_pitt_ohio | 1507 eshipper_ltl_r_l_carriers | 1508 eshipper_ltl_saia | 1509 eshipper_ltl_usf_reddaway | 1510 eshipper_ltl_vitran_express | 1511 eshipper_ltl_wilson_trucking | 1512 eshipper_ltl_yellow_transportation | 1513 eshipper_ltl_roadway | 1514 eshipper_ltl_fedex_national | 1515 eshipper_wilson_trucking_tfc | 1800 eshipper_aaa_cooper_transportation | 1801 eshipper_roadrunner_dawes | 1802 eshipper_new_england_motor_freight | 1803 eshipper_new_penn_motor_express | 1804 eshipper_dayton_freight | 1805 eshipper_southeastern_freightway | 1806 eshipper_saia_inc | 1807 eshipper_conway | 1808 eshipper_roadway | 1809 eshipper_usf_reddaway | 1810 eshipper_usf_holland | 1811 eshipper_dependable_highway_express | 1812 eshipper_day_and_ross | 1813 eshipper_day_and_ross_r_and_l | 1814 eshipper_ups | 1815 eshipper_aaa_cooper | 1816 eshipper_ama_transportation | 1817 eshipper_averitt_express | 1818 eshipper_central_freight | 1819 eshipper_conway_us | 1820 eshipper_dayton | 1821 eshipper_drug_transport | 1822 eshipper_estes | 1823 eshipper_land_air_express | 1824 eshipper_fedex_west | 1825 eshipper_fedex_national | 1826 eshipper_usf_holland_us | 1827 eshipper_lakeville_m_express | 1828 eshipper_milan_express | 1829 eshipper_nebraska_transport | 1830 eshipper_new_england | 1831 eshipper_new_penn | 1832 eshipper_a_duie_pyle | 1833 eshipper_roadway_us | 1834 eshipper_usf_reddaway_us | 1835 eshipper_rhody_transportation | 1836 eshipper_saia_motor_freight | 1837 eshipper_southeastern_frgt | 1838 eshipper_pitt_ohio | 1839 eshipper_ward | 1840 eshipper_wilson | 1841 eshipper_chi_cargo | 1842 eshipper_tax_air | 1843 eshipper_fedex_east | 1844 eshipper_central_transport | 1845 eshipper_roadrunner | 1846 eshipper_r_and_l_carriers | 1847 eshipper_estes_us | 1848 eshipper_yrc_roadway | 1849 eshipper_central_transport_us | 1850 eshipper_absolute_transportation_services | 1851 eshipper_blue_sky_express | 1852 eshipper_galasso_trucking | 1853 eshipper_griley_air_freight | 1854 eshipper_jet_transportation | 1855 eshipper_metro_transportation_logistics | 1856 eshipper_oak_harbor | 1857 eshipper_stream_links_express | 1858 eshipper_tiffany_trucking | 1859 eshipper_ups_freight | 1860 eshipper_roadrunner_us | 1861 eshipper_global_mail_parcel_priority | 3500 eshipper_global_mail_parcel_standard | 3501 eshipper_global_mail_packet_plus_priority | 3502 eshipper_global_mail_packet_priority | 3503 eshipper_global_mail_packet_standard | 3504 eshipper_global_mail_business_priority | 3505 eshipper_global_mail_business_standard | 3506 eshipper_global_mail_parcel_direct_priority | 3507 eshipper_global_mail_parcel_direct_standard | 3508 eshipper_ground | 4500 eshipper_select_parcel | 4504 eshipper_express_parcel | 4507  </details><br/>   </details><br/>  
         * @summary Data References
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        references(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<References> {
            const localVarFetchArgs = UtilsApiFetchParamCreator(configuration).references(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UtilsApi - factory interface
 * @export
 */
export const UtilsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns a label PDF file.
         * @summary Print a Label
         * @param {LabelPrintingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printLabel(body: LabelPrintingRequest, options?: any) {
            return UtilsApiFp(configuration).printLabel(body, options)(fetch, basePath);
        },
        /**
         *  ## Countries  <details>  Code | Name  --- | ---  AD | Andorra AE | United Arab Emirates AF | Afghanistan AG | Antigua AI | Anguilla AL | Albania AM | Armenia AN | Netherlands Antilles AO | Angola AR | Argentina AS | American Samoa AT | Austria AU | Australia AW | Aruba AZ | Azerbaijan BA | Bosnia And Herzegovina BB | Barbados BD | Bangladesh BE | Belgium BF | Burkina Faso BG | Bulgaria BH | Bahrain BI | Burundi BJ | Benin BM | Bermuda BN | Brunei BO | Bolivia BR | Brazil BS | Bahamas BT | Bhutan BW | Botswana BY | Belarus BZ | Belize CA | Canada CD | Congo, The Democratic Republic Of CF | Central African Republic CG | Congo CH | Switzerland CI | Cote D Ivoire CK | Cook Islands CL | Chile CM | Cameroon CN | China, Peoples Republic CO | Colombia CR | Costa Rica CU | Cuba CV | Cape Verde CY | Cyprus CZ | Czech Republic, The DE | Germany DJ | Djibouti DK | Denmark DM | Dominica DO | Dominican Republic DZ | Algeria EC | Ecuador EE | Estonia EG | Egypt ER | Eritrea ES | Spain ET | Ethiopia FI | Finland FJ | Fiji FK | Falkland Islands FM | Micronesia, Federated States Of FO | Faroe Islands FR | France GA | Gabon GB | United Kingdom GD | Grenada GE | Georgia GF | French Guyana GG | Guernsey GH | Ghana GI | Gibraltar GL | Greenland GM | Gambia GN | Guinea Republic GP | Guadeloupe GQ | Guinea-equatorial GR | Greece GT | Guatemala GU | Guam GW | Guinea-bissau GY | Guyana (british) HK | Hong Kong HN | Honduras HR | Croatia HT | Haiti HU | Hungary IC | Canary Islands, The ID | Indonesia IE | Ireland, Republic Of IL | Israel IN | India IQ | Iraq IR | Iran (islamic Republic Of) IS | Iceland IT | Italy JE | Jersey JM | Jamaica JO | Jordan JP | Japan KE | Kenya KG | Kyrgyzstan KH | Cambodia KI | Kiribati KM | Comoros KN | St. Kitts KP | Korea, The D.p.r Of (north K.) KR | Korea, Republic Of (south K.) KV | Kosovo KW | Kuwait KY | Cayman Islands KZ | Kazakhstan LA | Lao Peoples Democratic Republic LB | Lebanon LC | St. Lucia LI | Liechtenstein LK | Sri Lanka LR | Liberia LS | Lesotho LT | Lithuania LU | Luxembourg LV | Latvia LY | Libya MA | Morocco MC | Monaco MD | Moldova, Republic Of ME | Montenegro, Republic Of MG | Madagascar MH | Marshall Islands MK | Macedonia, Republic Of ML | Mali MM | Myanmar MN | Mongolia MO | Macau MP | Commonwealth No. Mariana Islands MQ | Martinique MR | Mauritania MS | Montserrat MT | Malta MU | Mauritius MV | Maldives MW | Malawi MX | Mexico MY | Malaysia MZ | Mozambique NA | Namibia NC | New Caledonia NE | Niger NG | Nigeria NI | Nicaragua NL | Netherlands, The NO | Norway NP | Nepal NR | Nauru, Republic Of NU | Niue NZ | New Zealand OM | Oman PA | Panama PE | Peru PF | Tahiti PG | Papua New Guinea PH | Philippines, The PK | Pakistan PL | Poland PR | Puerto Rico PT | Portugal PW | Palau PY | Paraguay QA | Qatar RE | Reunion, Island Of RO | Romania RS | Serbia, Republic Of RU | Russian Federation, The RW | Rwanda SA | Saudi Arabia SB | Solomon Islands SC | Seychelles SD | Sudan SE | Sweden SG | Singapore SH | Saint Helena SI | Slovenia SK | Slovakia SL | Sierra Leone SM | San Marino SN | Senegal SO | Somalia SR | Suriname SS | South Sudan ST | Sao Tome And Principe SV | El Salvador SY | Syria SZ | Swaziland TC | Turks And Caicos Islands TD | Chad TG | Togo TH | Thailand TJ | Tajikistan TL | Timor Leste TN | Tunisia TO | Tonga TR | Turkey TT | Trinidad And Tobago TV | Tuvalu TW | Taiwan TZ | Tanzania UA | Ukraine UG | Uganda US | United States UY | Uruguay UZ | Uzbekistan VA | Vatican City State VC | St. Vincent VE | Venezuela VG | British Virgin Islands VI | U.S. Virgin Islands VN | Vietnam VU | Vanuatu WS | Samoa XB | Bonaire XC | Curacao XE | St. Eustatius XM | St. Maarten XN | Nevis XS | Somaliland, Rep Of (north Somalia) XY | St. Barthelemy YE | Yemen, Republic Of YT | Mayotte ZA | South Africa ZM | Zambia ZW | Zimbabwe  </details><br/>   ## States and Provinces  <details>   ### United Arab Emirates  <details>  Code | Name  --- | ---  AB | Abu Dhabi AJ | Ajman DU | Dubai FU | Fujairah RA | Ras al-Khaimah SH | Sharjah UM | Umm al-Qaiwain  </details><br/>   ### Canada  <details>  Code | Name  --- | ---  AB | Alberta BC | British Columbia MB | Manitoba NB | New Brunswick NL | Newfoundland NT | Northwest Territories NS | Nova Scotia NU | Nunavut ON | Ontario PE | Prince Edward Island QC | Quebec SK | Saskatchewan YT | Yukon  </details><br/>   ### China, Peoples Republic  <details>  Code | Name  --- | ---  anhui | Anhui hainan | Hainan jiangxi | Jiangxi shanghai | Shanghai beijing | Beijing hebei | Hebei jilin | Jilin shanxi | Shanxi chongqing | Chongqing heilongjiang | Heilongjiang liaoning | Liaoning sichuan | Sichuan fujian | Fujian henan | Henan nei_mongol | Nei Mongol tianjin | Tianjin gansu | Gansu hubei | Hubei qinghai | Qinghai xinjiang | Xinjiang guangdong | Guangdong hunan | Hunan shaanxi | Shaanxi yunnan | Yunnan guizhou | Guizhou jiangsu | Jiangsu shandong | Shandong zhejiang | Zhejiang  </details><br/>   ### India  <details>  Code | Name  --- | ---  AN | Andaman & Nicobar (U.T) AP | Andhra Pradesh AR | Arunachal Pradesh AS | Assam BR | Bihar CG | Chattisgarh CH | Chandigarh (U.T.) DD | Daman & Diu (U.T.) DL | Delhi (U.T.) DN | Dadra and Nagar Haveli (U.T.) GA | Goa GJ | Gujarat HP | Himachal Pradesh HR | Haryana JH | Jharkhand JK | Jammu & Kashmir KA | Karnataka KL | Kerala LD | Lakshadweep (U.T) MH | Maharashtra ML | Meghalaya MN | Manipur MP | Madhya Pradesh MZ | Mizoram NL | Nagaland OR | Orissa PB | Punjab PY | Puducherry (U.T.) RJ | Rajasthan SK | Sikkim TN | Tamil Nadu TR | Tripura UA | Uttaranchal UP | Uttar Pradesh WB | West Bengal  </details><br/>   ### Mexico  <details>  Code | Name  --- | ---  AG | Aguascalientes BC | Baja California BS | Baja California Sur CM | Campeche CS | Chiapas CH | Chihuahua CO | Coahuila CL | Colima DF | Ciudad de México DG | Durango GT | Guanajuato GR | Guerrero HG | Hidalgo JA | Jalisco EM | Estado de México MI | Michoacán MO | Morelos NA | Nayarit NL | Nuevo León OA | Oaxaca PU | Puebla QE | Querétaro QR | Quintana Roo SL | San Luis Potosí SI | Sinaloa SO | Sonora TB | Tabasco TM | Tamaulipas TL | Tlaxcala VE | Veracruz YU | Yucatán ZA | Zacatecas  </details><br/>   ### United States  <details>  Code | Name  --- | ---  AL | Alabama AK | Alaska AZ | Arizona AR | Arkansas CA | California CO | Colorado CT | Connecticut DE | Delaware DC | District of Columbia FL | Florida GA | Georgia HI | Hawaii ID | Idaho IL | Illinois IN | Indiana IA | Iowa KS | Kansas KY | Kentucky LA | Louisiana ME | Maine MD | Maryland MA | Massachusetts MI | Michigan MN | Minnesota MS | Mississippi MO | Missouri MT | Montana NE | Nebraska NV | Nevada NH | New Hampshire NJ | New Jersey NM | New Mexico NY | New York NC | North Carolina ND | North Dakota OH | Ohio OK | Oklahoma OR | Oregon PA | Pennsylvania RI | Rhode Island SC | South Carolina SD | South Dakota TN | Tennessee TX | Texas UT | Utah VT | Vermont VA | Virginia WA | Washington State WV | West Virginia WI | Wisconsin WY | Wyoming PR | Puerto Rico  </details><br/>   </details><br/>  ## Currencies  <details>  Code | Name  --- | ---  EUR | Euro AED | UAE Dirham USD | US Dollar XCD | East Caribbean Dollar AMD | Dran ANG | Netherlands Antilles Guilder AOA | Kwanza ARS | Argentine Peso AUD | Australian Dollar AWG | Aruba Guilder AZN | Manat BAM | Convertible Marks BBD | Barbadian Dollar BDT | Taka XOF | CFA Franc West Africa BGN | Bulgarian Lev BHD | Bahraini Dinar BIF | Burundese Franc BMD | Bermudian Dollar BND | Brunei Dollar BOB | Boliviano BRL | Real BSD | Bahamian Dollar BTN | Ngultrum BWP | Pula BYN | Belarussian Ruble BZD | Belize Dollar CAD | Canadian Dollar CDF | Franc Congolais XAF | CFA Franc Central Africa CHF | Swiss Franc NZD | New Zealand Dollar CLP | New Chile Peso CNY | Yuan (Ren Min Bi) COP | Colombian Peso CRC | Costa Rican Colon CUC | Peso Convertible CVE | Cape Verde Escudo CZK | Czech Koruna DJF | Djibouti Franc DKK | Danish Krone DOP | Dominican Republic Peso DZD | Algerian Dinar EGP | Egyptian Pound ERN | Nakfa ETB | Birr FJD | Fijian Dollar GBP | Pound Sterling GEL | Georgian Lari GHS | Cedi GMD | Dalasi GNF | Guinea Franc GTQ | Quetzal GYD | Guyanan Dollar HKD | Hong Kong Dollar HNL | Lempira HRK | Croatian Kuna HTG | Gourde HUF | Forint IDR | Rupiah ILS | New Israeli Shekel INR | Indian Rupee IRR | Iranian Rial ISK | Icelandic Krona JMD | Jamaican Dollar JOD | Jordanian Dinar JPY | Yen KES | Kenyan Shilling KGS | Som KHR | Khmer Rial KMF | Comoros Franc KPW | North Korean Won KRW | Won KWD | Kuwaiti Dinar KYD | Cayman Islands Dollar KZT | Tenge LAK | Kip LKR | Sri Lankan Rupee LRD | Liberian Dollar LSL | Loti LYD | Libyan Dinar MAD | Moroccan Dirham MDL | Leu MGA | Ariary MKD | Denar MMK | Kyat MNT | Tugrik MOP | Pataca MRO | Ouguiya MUR | Mauritius Rupee MVR | Rufiyaa MWK | Kwacha MXN | Mexican Nuevo Peso MYR | Ringgit MZN | Mozambique Metical NAD | Namibian Dollar XPF | CFP Franc NGN | Naira NIO | Cordoba Oro NOK | Norwegian Krone NPR | Nepalese Rupee OMR | Omani Rial PEN | Nuevo Sol PGK | Kina PHP | Phillipines Peso PKR | Pakistani Rupee PLN | Zloty PYG | Guarani QAR | Qatar Rial RSD | Serbia, Dinars RUB | Russian Ruble RWF | Rwanda Franc SAR | Saudi Riyal SBD | Solomon Islands Dollar SCR | Seychelles Rupee SDG | Sudanese Pound SEK | Swedish Krona SGD | Singapore Dollar SHP | St. Helena Pound SLL | Leone SOS | Somali Shilling SRD | Suriname Dollar SSP | South Sudanese pound STD | Dobra SYP | Syrian Pound SZL | Lilangeni THB | Baht TJS | Somoni TND | Tunisian Dinar TOP | Pa'anga TRY | New Turkish Lira TTD | Trinidad and Tobago Dollar TWD | New Taiwan Dollar TZS | Tanzanian Shilling UAH | Hryvna UYU | Peso Uruguayo UZS | Sum VEF | Bolivar Fuerte VND | Dong VUV | Vanuatu Vatu WST | Tala YER | Yemeni Riyal ZAR | South African Rand  </details><br/>   ## Packaging Types  <details>   ### Multi-carrier (purplship)  <details>  Code | Identifier --- | --- envelope | Small Envelope pak | Pak tube | Tube pallet | Pallet small_box | Small Box medium_box | Medium Box your_packaging | Your Packaging  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_flyer_smalls | FLY dhl_parcels_conveyables | COY dhl_non_conveyables | NCY dhl_pallets | PAL dhl_double_pallets | DBL dhl_box | BOX  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_envelope | FEDEX_ENVELOPE fedex_pak | FEDEX_PAK fedex_box | FEDEX_BOX fedex_10_kg_box | FEDEX_10KG_BOX fedex_25_kg_box | FEDEX_25KG_BOX fedex_tube | FEDEX_TUBE your_packaging | YOUR_PACKAGING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_envelope | Envelope purolator_express_pack | Pack purolator_express_box | Box purolator_customer_packaging | Customer Packaging  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_unknown | 00 ups_letter | 01 ups_package | 02 ups_tube | 03 ups_pak | 04 ups_express_box | 21 ups_box_25_kg | 24 ups_box_10_kg | 25 ups_pallet | 30 ups_small_express_box | 2a ups_medium_express_box | 2b ups_large_express_box | 2c  </details><br/>   </details><br/>   ## Package Preset  <details>   ### Canada Post  <details>  Code | Dimensions | Note --- | --- | --- canadapost_mailing_box | 15.2 x 1.0 x 10.2 | height x length x width canadapost_extra_small_mailing_box | 14.0 x 14.0 x 14.0 | height x length x width canadapost_small_mailing_box | 22.9 x 6.4 x 28.6 | height x length x width canadapost_medium_mailing_box | 23.5 x 13.3 x 31.0 | height x length x width canadapost_large_mailing_box | 30.5 x 9.5 x 38.1 | height x length x width canadapost_extra_large_mailing_box | 30.5 x 21.6 x 40.0 | height x length x width canadapost_corrugated_small_box | 32.0 x 32.0 x 42.0 | height x length x width canadapost_corrugated_medium_box | 38.0 x 32.0 x 46.0 | height x length x width canadapost_corrugated_large_box | 46.0 x 40.6 x 46.0 | height x length x width canadapost_xexpresspost_certified_envelope | 15.9 x 1.5 x 0.5 x 26.0 | height x length x weight x width canadapost_xexpresspost_national_large_envelope | 29.2 x 1.5 x 1.36 x 40.0 | height x length x weight x width  </details><br/>   ### DHL Express  <details>  Code | Dimensions | Note --- | --- | --- dhl_express_envelope | 27.5 x 1.0 x 0.5 x 35.0 | height x length x weight x width dhl_express_standard_flyer | 30.0 x 1.5 x 2.0 x 40.0 | height x length x weight x width dhl_express_large_flyer | 37.5 x 1.5 x 3.0 x 47.5 | height x length x weight x width dhl_express_box_2 | 18.2 x 10.0 x 1.0 x 33.7 | height x length x weight x width dhl_express_box_3 | 32.0 x 5.2 x 2.0 x 33.6 | height x length x weight x width dhl_express_box_4 | 32.2 x 18.0 x 5.0 x 33.7 | height x length x weight x width dhl_express_box_5 | 32.2 x 34.5 x 10.0 x 33.7 | height x length x weight x width dhl_express_box_6 | 35.9 x 36.9 x 15.0 x 41.7 | height x length x weight x width dhl_express_box_7 | 40.4 x 38.9 x 20.0 x 48.1 | height x length x weight x width dhl_express_box_8 | 44.4 x 40.9 x 25.0 x 54.2 | height x length x weight x width dhl_express_tube | 15.0 x 15.0 x 5.0 x 96.0 | height x length x weight x width dhl_didgeridoo_box | 13.0 x 162.0 x 10.0 x 13.0 | height x length x weight x width dhl_jumbo_box | 42.7 x 33.0 x 30.0 x 45.0 | height x length x weight x width dhl_jumbo_box_junior | 34.0 x 24.1 x 20.0 x 39.9 | height x length x weight x width  </details><br/>   ### FedEx Express  <details>  Code | Dimensions | Note --- | --- | --- fedex_envelope_legal_size | 15.5 x 1.0 x 9.5 | height x weight x width fedex_padded_pak | 14.75 x 2.2 x 11.75 | height x weight x width fedex_polyethylene_pak | 15.5 x 2.2 x 12.0 | height x weight x width fedex_clinical_pak | 18.0 x 2.2 x 13.5 | height x weight x width fedex_small_box | 10.9 x 1.5 x 20.0 x 12.25 | height x length x weight x width fedex_medium_box | 11.5 x 2.38 x 20.0 x 13.25 | height x length x weight x width fedex_large_box | 12.38 x 3.0 x 20.0 x 17.88 | height x length x weight x width fedex_10_kg_box | 12.94 x 10.19 x 10.0 x 15.81 | height x length x weight x width fedex_25_kg_box | 16.56 x 13.19 x 25.0 x 21.56 | height x length x weight x width fedex_tube | 6.0 x 6.0 x 20.0 x 38.0 | height x length x weight x width  </details><br/>   ### Purolator Courier  <details>  Code | Dimensions | Note --- | --- | --- purolator_express_envelope | 1.5 x 1.0 x 12.5 | length x weight x width purolator_express_pack | 1.0 x 3.0 x 12.5 | length x weight x width purolator_express_box | 3.5 x 7.0 | length x weight  </details><br/>   ### UPS Package  <details>  Code | Dimensions | Note --- | --- | --- ups_small_express_box | 11.0 x 2.0 x 30.0 x 13.0 | height x length x weight x width ups_medium_express_box | 11.0 x 3.0 x 30.0 x 16.0 | height x length x weight x width ups_large_express_box | 13.0 x 3.0 x 30.0 x 18.0 | height x length x weight x width ups_express_tube | 6.0 x 6.0 x 38.0 | height x length x width ups_express_pak | 11.75 x 1.5 x 16.0 | height x length x width ups_world_document_box | 12.5 x 3.0 x 17.5 | height x length x width  </details><br/>   </details><br/>   ## Shipment Options  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_signature | SO canadapost_coverage | COV canadapost_collect_on_delivery | COD canadapost_proof_of_age_required_18 | PA18 canadapost_proof_of_age_required_19 | PA19 canadapost_card_for_pickup | HFP canadapost_do_not_safe_drop | DNS canadapost_leave_at_door | LAD canadapost_deliver_to_post_office | D2PO canadapost_return_at_senders_expense | RASE canadapost_return_to_sender | RTS canadapost_abandon | ABAN  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | 0A dhl_mailroom_management | 0B dhl_pallet_administration | 0C dhl_warehousing | 0D dhl_express_logistics_centre | 0E dhl_strategic_parts_centre | 0F dhl_local_distribution_centre | 0G dhl_terminal_handling | 0H dhl_cross_docking | 0I dhl_inventory_management | 0J dhl_loading_unloading | 0K dhl_product_kitting | 0L dhl_priority_account_desk | 0M dhl_document_archiving | 0N dhl_saturday_delivery | AA dhl_saturday_pickup | AB dhl_holiday_delivery | AC dhl_holiday_pickup | AD dhl_domestic_saturday_delivery | AG dhl_standard | BA dhl_globalmail_item | BB dhl_letter | BC dhl_packet | BD dhl_letter_plus | BE dhl_packet_plus | BF dhl_elevated_risk | CA dhl_restricted_destination | CB dhl_security_validation | CC dhl_secure_protection | CD dhl_proof_of_identity | CE dhl_secure_storage | CF dhl_diplomatic_material | CG dhl_smart_sensor | CH dhl_visa_program | CI dhl_onboard_courier | CJ dhl_secure_safebox | CK dhl_smart_sentry | CL dhl_split_duties_and_tax | DC dhl_duties_and_taxes_paid | DD dhl_receiver_paid | DE dhl_duties_and_taxes_unpaid | DS dhl_import_billing | DT dhl_importer_of_record | DU dhl_go_green_carbon_neutral | EA dhl_go_green_carbon_footprint | EB dhl_go_green_carbon_estimate | EC dhl_fuel_surcharge_b | FB dhl_fuel_surcharge_c | FC dhl_fuel_surcharge_f | FF dhl_smartphone_box | GA dhl_laptop_box | GB dhl_bottle_box | GC dhl_repacking | GD dhl_tablet_box | GE dhl_filler_material | GF dhl_packaging | GG dhl_diplomatic_bag | GH dhl_pallet_box | GI dhl_lock_box | GJ dhl_lithium_ion_pi965_section_ii | HB dhl_dry_ice_un1845 | HC dhl_lithium_ion_pi965_966_section_ii | HD dhl_dangerous_goods | HE dhl_perishable_cargo | HG dhl_excepted_quantity | HH dhl_spill_cleaning | HI dhl_consumer_commodities | HK dhl_limited_quantities_adr | HL dhl_lithium_metal_pi969_section_ii | HM dhl_adr_load_exemption | HN dhl_lithium_ion_pi967_section_ii | HV dhl_lithium_metal_pi970_section_ii | HW dhl_biological_un3373 | HY dhl_extended_liability | IB dhl_contract_insurance | IC dhl_shipment_insurance | II dhl_delivery_notification | JA dhl_pickup_notification | JC dhl_proactive_tracking | JD dhl_performance_reporting | JE dhl_prealert_notification | JY dhl_change_of_billing | KA dhl_cash_on_delivery | KB dhl_printed_invoice | KD dhl_waybill_copy | KE dhl_import_paperwork | KF dhl_payment_on_pickup | KY dhl_shipment_intercept | LA dhl_shipment_redirect | LC dhl_storage_at_facility | LE dhl_cold_storage | LG dhl_specific_routing | LH dhl_service_recovery | LV dhl_alternative_address | LW dhl_hold_for_collection | LX dhl_address_correction_a | MA dhl_address_correction_b | MB dhl_neutral_delivery | NN dhl_remote_area_pickup | OB dhl_remote_area_delivery_c | OC dhl_out_of_service_area | OE dhl_remote_area_delivery_o | OO dhl_shipment_preparation | PA dhl_shipment_labeling | PB dhl_shipment_consolidation | PC dhl_relabeling_data_entry | PD dhl_preprinted_waybill | PE dhl_piece_labelling | PS dhl_data_staging_03 | PT dhl_data_staging_06 | PU dhl_data_staging_12 | PV dhl_data_staging_24 | PW dhl_standard_pickup | PX dhl_scheduled_pickup | PY dhl_dedicated_pickup | QA dhl_early_pickup | QB dhl_late_pickup | QD dhl_residential_pickup | QE dhl_loading_waiting | QF dhl_bypass_injection | QH dhl_direct_injection | QI dhl_drop_off_at_facility | QY dhl_delivery_signature | SA dhl_content_signature | SB dhl_named_signature | SC dhl_adult_signature | SD dhl_contract_signature | SE dhl_alternative_signature | SW dhl_no_signature_required | SX dhl_dedicated_delivery | TA dhl_early_delivery | TB dhl_time_window_delivery | TC dhl_evening_delivery | TD dhl_delivery_on_appointment | TE dhl_return_undeliverable | TG dhl_swap_delivery | TH dhl_unloading_waiting | TJ dhl_residential_delivery | TK dhl_repeat_delivery | TN dhl_alternative_date | TT dhl_no_partial_delivery | TU dhl_service_point_24_7 | TV dhl_pre_9_00 | TW dhl_pre_10_30 | TX dhl_pre_12_00 | TY dhl_thermo_packaging | UA dhl_ambient_vialsafe | UB dhl_ambient_non_insulated | UC dhl_ambient_insulated | UD dhl_ambient_extreme | UE dhl_chilled_box_s | UF dhl_chilled_box_m | UG dhl_chilled_box_l | UH dhl_frozen_no_ice_s | UI dhl_frozen_no_ice_m | UJ dhl_frozen_no_ice_l | UK dhl_frozen_ice_sticks_s | UL dhl_frozen_ice_sticks_m | UM dhl_frozen_ice_sticks_l | UN dhl_frozen_ice_plates_s | UO dhl_frozen_ice_plates_m | UP dhl_frozen_ice_plates_l | UQ dhl_combination_no_ice | UR dhl_combination_dry_ice | US dhl_frozen_ice_sticks_e | UT dhl_frozen_ice_plates_e | UV dhl_customer_tcp_1 | UW dhl_thermo_accessories | VA dhl_absorbent_sleeve | VB dhl_cooland_wrap | VC dhl_dry_ice_supplies | VD dhl_pressure_bag_s | VE dhl_pressure_bag_m | VF dhl_pressure_bag_l | VG dhl_informal_clearance | WA dhl_formal_clearance | WB dhl_payment_deferment | WC dhl_clearance_authorization | WD dhl_multiline_entry | WE dhl_post_clearance_modification | WF dhl_handover_to_broker | WG dhl_physical_intervention | WH dhl_bio_phyto_veterinary_controls | WI dhl_obtaining_permits_and_licences | WJ dhl_bonded_storage | WK dhl_bonded_transit_documents | WL dhl_temporary_import_export | WM dhl_under_bond_guarantee | WN dhl_export_declaration | WO dhl_exporter_validation | WP dhl_certificate_of_origin | WQ dhl_document_translation | WR dhl_personal_effects | WS dhl_paperless_trade | WY dhl_import_export_taxes | XB dhl_unrecoverable_origin_tax | XC dhl_quarantine_inspection | XD dhl_merchandise_process | XE dhl_domestic_postal_tax | XF dhl_tier_two_tax | XG dhl_tier_three_tax | XH dhl_import_penalty | XI dhl_cargo_zone_process | XJ dhl_import_export_duties | XX dhl_premium_09_00 | Y1 dhl_premium_10_30 | Y2 dhl_premium_12_00 | Y3 dhl_over_sized_piece_b | YB dhl_over_handled_piece_c | YC dhl_multipiece_shipment | YE dhl_over_weight_piece_f | YF dhl_over_sized_piece_g | YG dhl_over_handled_piece_h | YH dhl_premium_9_00_i | YI dhl_premium_10_30_j | YJ dhl_premium_12_00_k | YK dhl_paket_shipment | YV dhl_breakbulk_mother | YW dhl_breakbulk_baby | YX dhl_over_weight_piece_y | YY dhl_customer_claim | ZA dhl_damage_compensation | ZB dhl_loss_compensation | ZC dhl_customer_rebate | ZD dhl_e_com_discount | ZE  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_blind_shipment | BLIND_SHIPMENT fedex_broker_select_option | BROKER_SELECT_OPTION fedex_call_before_delivery | CALL_BEFORE_DELIVERY fedex_cod | COD fedex_cod_remittance | COD_REMITTANCE fedex_custom_delivery_window | CUSTOM_DELIVERY_WINDOW fedex_cut_flowers | CUT_FLOWERS fedex_dangerous_goods | DANGEROUS_GOODS fedex_delivery_on_invoice_acceptance | DELIVERY_ON_INVOICE_ACCEPTANCE fedex_detention | DETENTION fedex_do_not_break_down_pallets | DO_NOT_BREAK_DOWN_PALLETS fedex_do_not_stack_pallets | DO_NOT_STACK_PALLETS fedex_dry_ice | DRY_ICE fedex_east_coast_special | EAST_COAST_SPECIAL fedex_electronic_trade_documents | ELECTRONIC_TRADE_DOCUMENTS fedex_event_notification | EVENT_NOTIFICATION fedex_exclude_from_consolidation | EXCLUDE_FROM_CONSOLIDATION fedex_exclusive_use | EXCLUSIVE_USE fedex_exhibition_delivery | EXHIBITION_DELIVERY fedex_exhibition_pickup | EXHIBITION_PICKUP fedex_expedited_alternate_delivery_route | EXPEDITED_ALTERNATE_DELIVERY_ROUTE fedex_expedited_one_day_earlier | EXPEDITED_ONE_DAY_EARLIER fedex_expedited_service_monitoring_and_delivery | EXPEDITED_SERVICE_MONITORING_AND_DELIVERY fedex_expedited_standard_day_early_delivery | EXPEDITED_STANDARD_DAY_EARLY_DELIVERY fedex_extra_labor | EXTRA_LABOR fedex_extreme_length | EXTREME_LENGTH fedex_one_rate | FEDEX_ONE_RATE fedex_flatbed_trailer | FLATBED_TRAILER fedex_food | FOOD fedex_freight_guarantee | FREIGHT_GUARANTEE fedex_freight_to_collect | FREIGHT_TO_COLLECT fedex_future_day_shipment | FUTURE_DAY_SHIPMENT fedex_hold_at_location | HOLD_AT_LOCATION fedex_holiday_delivery | HOLIDAY_DELIVERY fedex_holiday_guarantee | HOLIDAY_GUARANTEE fedex_home_delivery_premium | HOME_DELIVERY_PREMIUM fedex_inside_delivery | INSIDE_DELIVERY fedex_inside_pickup | INSIDE_PICKUP fedex_international_controlled_export_service | INTERNATIONAL_CONTROLLED_EXPORT_SERVICE fedex_international_mail_service | INTERNATIONAL_MAIL_SERVICE fedex_international_traffic_in_arms_regulations | INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS fedex_liftgate_delivery | LIFTGATE_DELIVERY fedex_liftgate_pickup | LIFTGATE_PICKUP fedex_limited_access_delivery | LIMITED_ACCESS_DELIVERY fedex_limited_access_pickup | LIMITED_ACCESS_PICKUP fedex_marking_or_tagging | MARKING_OR_TAGGING fedex_non_business_time | NON_BUSINESS_TIME fedex_pallet_shrinkwrap | PALLET_SHRINKWRAP fedex_pallet_weight_allowance | PALLET_WEIGHT_ALLOWANCE fedex_pallets_provided | PALLETS_PROVIDED fedex_pending_complete | PENDING_COMPLETE fedex_pending_shipment | PENDING_SHIPMENT fedex_permit | PERMIT fedex_pharmacy_delivery | PHARMACY_DELIVERY fedex_poison | POISON fedex_port_delivery | PORT_DELIVERY fedex_port_pickup | PORT_PICKUP fedex_pre_delivery_notification | PRE_DELIVERY_NOTIFICATION fedex_pre_eig_processing | PRE_EIG_PROCESSING fedex_pre_multiplier_processing | PRE_MULTIPLIER_PROCESSING fedex_protection_from_freezing | PROTECTION_FROM_FREEZING fedex_regional_mall_delivery | REGIONAL_MALL_DELIVERY fedex_regional_mall_pickup | REGIONAL_MALL_PICKUP fedex_return_shipment | RETURN_SHIPMENT fedex_returns_clearance | RETURNS_CLEARANCE fedex_returns_clearance_special_routing_required | RETURNS_CLEARANCE_SPECIAL_ROUTING_REQUIRED fedex_saturday_delivery | SATURDAY_DELIVERY fedex_saturday_pickup | SATURDAY_PICKUP fedex_shipment_assembly | SHIPMENT_ASSEMBLY fedex_sort_and_segregate | SORT_AND_SEGREGATE fedex_special_delivery | SPECIAL_DELIVERY fedex_special_equipment | SPECIAL_EQUIPMENT fedex_storage | STORAGE fedex_sunday_delivery | SUNDAY_DELIVERY fedex_third_party_consignee | THIRD_PARTY_CONSIGNEE fedex_top_load | TOP_LOAD fedex_usps_delivery | USPS_DELIVERY fedex_usps_pickup | USPS_PICKUP fedex_weighing | WEIGHING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_dangerous_goods | Dangerous Goods purolator_chain_of_signature | Chain of Signature purolator_express_cheque | ExpressCheque purolator_hold_for_pickup | Hold For Pickup purolator_return_services | Return Services purolator_saturday_service | Saturday Service purolator_origin_signature_not_required | Origin Signature Not Required (OSNR) purolator_adult_signature_required | Adult Signature Required (ASR) purolator_special_handling | Special Handling  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_saturday_delivery_indicator | SaturdayDeliveryIndicator ups_access_point_cod | AccessPointCOD ups_deliver_to_addressee_only_indicator | DeliverToAddresseeOnlyIndicator ups_direct_delivery_only_indicator | DirectDeliveryOnlyIndicator ups_cod | COD ups_delivery_confirmation | DeliveryConfirmation ups_return_of_document_indicator | ReturnOfDocumentIndicator ups_up_scarbonneutral_indicator | UPScarbonneutralIndicator ups_certificate_of_origin_indicator | CertificateOfOriginIndicator ups_pickup_options | PickupOptions ups_delivery_options | DeliveryOptions ups_restricted_articles | RestrictedArticles ups_shipper_export_declaration_indicator | ShipperExportDeclarationIndicator ups_commercial_invoice_removal_indicator | CommercialInvoiceRemovalIndicator ups_import_control | ImportControl ups_return_service | ReturnService ups_sdl_shipment_indicator | SDLShipmentIndicator ups_epra_indicator | EPRAIndicator  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_saturday_pickup_required | saturdayPickupRequired freightcom_homeland_security | homelandSecurity freightcom_exhibition_convention_site | exhibitionConventionSite freightcom_military_base_delivery | militaryBaseDelivery freightcom_customs_in_bond_freight | customsIn_bondFreight freightcom_limited_access | limitedAccess freightcom_excess_length | excessLength freightcom_tailgate_pickup | tailgatePickup freightcom_residential_pickup | residentialPickup freightcom_cross_border_fee | crossBorderFee freightcom_notify_recipient | notifyRecipient freightcom_single_shipment | singleShipment freightcom_tailgate_delivery | tailgateDelivery freightcom_residential_delivery | residentialDelivery freightcom_insurance_type | insuranceType freightcom_inside_delivery | insideDelivery freightcom_is_saturday_service | isSaturdayService freightcom_dangerous_goods_type | dangerousGoodsType freightcom_stackable | stackable  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_saturday_pickup_required | saturdayPickupRequired eshipper_homeland_security | homelandSecurity eshipper_exhibition_convention_site | exhibitionConventionSite eshipper_military_base_delivery | militaryBaseDelivery eshipper_customs_in_bond_freight | customsIn_bondFreight eshipper_limited_access | limitedAccess eshipper_excess_length | excessLength eshipper_tailgate_pickup | tailgatePickup eshipper_residential_pickup | residentialPickup eshipper_cross_border_fee | crossBorderFee eshipper_notify_recipient | notifyRecipient eshipper_single_shipment | singleShipment eshipper_tailgate_delivery | tailgateDelivery eshipper_residential_delivery | residentialDelivery eshipper_insurance_type | insuranceType eshipper_inside_delivery | insideDelivery eshipper_is_saturday_service | isSaturdayService eshipper_dangerous_goods_type | dangerousGoodsType eshipper_stackable | stackable  </details><br/>   </details><br/>   ## Shipment Services  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_regular_parcel | DOM.RP canadapost_expedited_parcel | DOM.EP canadapost_xpresspost | DOM.XP canadapost_priority | DOM.PC canadapost_library_books | DOM.LIB canadapost_expedited_parcel_usa | USA.EP canadapost_priority_worldwide_envelope_usa | USA.PW.ENV canadapost_priority_worldwide_pak_usa | USA.PW.PAK canadapost_priority_worldwide_parcel_usa | USA.PW.PARCEL canadapost_small_packet_usa_air | USA.SP.AIR canadapost_tracked_packet_usa | USA.TP canadapost_tracked_packet_usa_lvm | USA.TP.LVM canadapost_xpresspost_usa | USA.XP canadapost_xpresspost_international | INT.XP canadapost_international_parcel_air | INT.IP.AIR canadapost_international_parcel_surface | INT.IP.SURF canadapost_priority_worldwide_envelope_intl | INT.PW.ENV canadapost_priority_worldwide_pak_intl | INT.PW.PAK canadapost_priority_worldwide_parcel_intl | INT.PW.PARCEL canadapost_small_packet_international_air | INT.SP.AIR canadapost_small_packet_international_surface | INT.SP.SURF canadapost_tracked_packet_international | INT.TP  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | LOGISTICS SERVICES dhl_domestic_express_12_00_doc | DOMESTIC EXPRESS 12:00 DOC dhl_b2_c_doc | B2C DOC dhl_b2_c_nondoc | B2C NONDOC dhl_jetline | JETLINE dhl_sprintline | SPRINTLINE dhl_express_easy_doc | EXPRESS EASY DOC dhl_express_easy_nondoc | EXPRESS EASY NONDOC dhl_europack_doc | EUROPACK DOC dhl_auto_reversals | AUTO REVERSALS dhl_breakbulk_express_doc | BREAKBULK EXPRESS DOC dhl_medical_express_doc | MEDICAL EXPRESS DOC dhl_express_worldwide_doc | EXPRESS WORLDWIDE DOC dhl_express_9_00_nondoc | EXPRESS 9:00 NONDOC dhl_freight_worldwide_nondoc | FREIGHT WORLDWIDE NONDOC dhl_domestic_economy_select_doc | DOMESTIC ECONOMY SELECT DOC dhl_economy_select_nondoc | ECONOMY SELECT NONDOC dhl_domestic_express_9_00_doc | DOMESTIC EXPRESS 9:00 DOC dhl_jumbo_box_nondoc | JUMBO BOX NONDOC dhl_express_9_00_doc | EXPRESS 9:00 DOC dhl_express_10_30_doc | EXPRESS 10:30 DOC dhl_express_10_30_nondoc | EXPRESS 10:30 NONDOC dhl_domestic_express_doc | DOMESTIC EXPRESS DOC dhl_domestic_express_10_30_doc | DOMESTIC EXPRESS 10:30 DOC dhl_express_worldwide_nondoc | EXPRESS WORLDWIDE NONDOC dhl_medical_express_nondoc | MEDICAL EXPRESS NONDOC dhl_globalmail_business_doc | GLOBALMAIL BUSINESS DOC dhl_same_day_doc | SAME DAY DOC dhl_express_12_00_doc | EXPRESS 12:00 DOC dhl_europack_nondoc | EUROPACK NONDOC dhl_economy_select_doc | ECONOMY SELECT DOC dhl_express_envelope_doc | EXPRESS ENVELOPE DOC dhl_express_12_00_nondoc | EXPRESS 12:00 NONDOC dhl_destination_charges | Destination Charges  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_europe_first_international_priority | EUROPE_FIRST_INTERNATIONAL_PRIORITY fedex_1_day_freight | FEDEX_1_DAY_FREIGHT fedex_2_day | FEDEX_2_DAY fedex_2_day_am | FEDEX_2_DAY_AM fedex_2_day_freight | FEDEX_2_DAY_FREIGHT fedex_3_day_freight | FEDEX_3_DAY_FREIGHT fedex_cargo_airport_to_airport | FEDEX_CARGO_AIRPORT_TO_AIRPORT fedex_cargo_freight_forwarding | FEDEX_CARGO_FREIGHT_FORWARDING fedex_cargo_international_express_freight | FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT fedex_cargo_international_premium | FEDEX_CARGO_INTERNATIONAL_PREMIUM fedex_cargo_mail | FEDEX_CARGO_MAIL fedex_cargo_registered_mail | FEDEX_CARGO_REGISTERED_MAIL fedex_cargo_surface_mail | FEDEX_CARGO_SURFACE_MAIL fedex_custom_critical_air_expedite | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE fedex_custom_critical_air_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_air_expedite_network | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK fedex_custom_critical_charter_air | FEDEX_CUSTOM_CRITICAL_CHARTER_AIR fedex_custom_critical_point_to_point | FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT fedex_custom_critical_surface_expedite | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE fedex_custom_critical_surface_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_temp_assure_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR fedex_custom_critical_temp_assure_validated_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR fedex_custom_critical_white_glove_services | FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES fedex_distance_deferred | FEDEX_DISTANCE_DEFERRED fedex_express_saver | FEDEX_EXPRESS_SAVER fedex_first_freight | FEDEX_FIRST_FREIGHT fedex_freight_economy | FEDEX_FREIGHT_ECONOMY fedex_freight_priority | FEDEX_FREIGHT_PRIORITY fedex_ground | FEDEX_GROUND fedex_international_priority_plus | FEDEX_INTERNATIONAL_PRIORITY_PLUS fedex_next_day_afternoon | FEDEX_NEXT_DAY_AFTERNOON fedex_next_day_early_morning | FEDEX_NEXT_DAY_EARLY_MORNING fedex_next_day_end_of_day | FEDEX_NEXT_DAY_END_OF_DAY fedex_next_day_freight | FEDEX_NEXT_DAY_FREIGHT fedex_next_day_mid_morning | FEDEX_NEXT_DAY_MID_MORNING fedex_first_overnight | FIRST_OVERNIGHT fedex_ground_home_delivery | GROUND_HOME_DELIVERY fedex_international_distribution_freight | INTERNATIONAL_DISTRIBUTION_FREIGHT fedex_international_economy | INTERNATIONAL_ECONOMY fedex_international_economy_distribution | INTERNATIONAL_ECONOMY_DISTRIBUTION fedex_international_economy_freight | INTERNATIONAL_ECONOMY_FREIGHT fedex_international_first | INTERNATIONAL_FIRST fedex_international_ground | INTERNATIONAL_GROUND fedex_international_priority | INTERNATIONAL_PRIORITY fedex_international_priority_distribution | INTERNATIONAL_PRIORITY_DISTRIBUTION fedex_international_priority_express | INTERNATIONAL_PRIORITY_EXPRESS fedex_international_priority_freight | INTERNATIONAL_PRIORITY_FREIGHT fedex_priority_overnight | PRIORITY_OVERNIGHT fedex_same_day | SAME_DAY fedex_same_day_city | SAME_DAY_CITY fedex_same_day_metro_afternoon | SAME_DAY_METRO_AFTERNOON fedex_same_day_metro_morning | SAME_DAY_METRO_MORNING fedex_same_day_metro_rush | SAME_DAY_METRO_RUSH fedex_smart_post | SMART_POST fedex_standard_overnight | STANDARD_OVERNIGHT fedex_transborder_distribution_consolidation | TRANSBORDER_DISTRIBUTION_CONSOLIDATION  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_9_am | PurolatorExpress9AM purolator_express_us | PurolatorExpressU.S. purolator_express_10_30_am | PurolatorExpress10:30AM purolator_express_us_9_am | PurolatorExpressU.S.9AM purolator_express_12_pm | PurolatorExpress12PM purolator_express_us_10_30_am | PurolatorExpressU.S.10:30AM purolator_express | PurolatorExpress purolator_express_us_12_00 | PurolatorExpressU.S.12:00 purolator_express_evening | PurolatorExpressEvening purolator_express_envelope_us | PurolatorExpressEnvelopeU.S. purolator_express_envelope_9_am | PurolatorExpressEnvelope9AM purolator_express_us_envelope_9_am | PurolatorExpressU.S.Envelope9AM purolator_express_envelope_10_30_am | PurolatorExpressEnvelope10:30AM purolator_express_us_envelope_10_30_am | PurolatorExpressU.S.Envelope10:30AM purolator_express_envelope_12_pm | PurolatorExpressEnvelope12PM purolator_express_us_envelope_12_00 | PurolatorExpressU.S.Envelope12:00 purolator_express_envelope | PurolatorExpressEnvelope purolator_express_pack_us | PurolatorExpressPackU.S. purolator_express_envelope_evening | PurolatorExpressEnvelopeEvening purolator_express_us_pack_9_am | PurolatorExpressU.S.Pack9AM purolator_express_pack_9_am | PurolatorExpressPack9AM purolator_express_us_pack_10_30_am | PurolatorExpressU.S.Pack10:30AM purolator_express_pack10_30_am | PurolatorExpressPack10:30AM purolator_express_us_pack_12_00 | PurolatorExpressU.S.Pack12:00 purolator_express_pack_12_pm | PurolatorExpressPack12PM purolator_express_box_us | PurolatorExpressBoxU.S. purolator_express_pack | PurolatorExpressPack purolator_express_us_box_9_am | PurolatorExpressU.S.Box9AM purolator_express_pack_evening | PurolatorExpressPackEvening purolator_express_us_box_10_30_am | PurolatorExpressU.S.Box10:30AM purolator_express_box_9_am | PurolatorExpressBox9AM purolator_express_us_box_12_00 | PurolatorExpressU.S.Box12:00 purolator_express_box_10_30_am | PurolatorExpressBox10:30AM purolator_ground_us | PurolatorGroundU.S. purolator_express_box_12_pm | PurolatorExpressBox12PM purolator_express_international | PurolatorExpressInternational purolator_express_box | PurolatorExpressBox purolator_express_international_9_am | PurolatorExpressInternational9AM purolator_express_box_evening | PurolatorExpressBoxEvening purolator_express_international_10_30_am | PurolatorExpressInternational10:30AM purolator_ground | PurolatorGround purolator_express_international_12_00 | PurolatorExpressInternational12:00 purolator_ground9_am | PurolatorGround9AM purolator_express_envelope_international | PurolatorExpressEnvelopeInternational purolator_ground10_30_am | PurolatorGround10:30AM purolator_express_international_envelope_9_am | PurolatorExpressInternationalEnvelope9AM purolator_ground_evening | PurolatorGroundEvening purolator_express_international_envelope_10_30_am | PurolatorExpressInternationalEnvelope10:30AM purolator_quick_ship | PurolatorQuickShip purolator_express_international_envelope_12_00 | PurolatorExpressInternationalEnvelope12:00 purolator_quick_ship_envelope | PurolatorQuickShipEnvelope purolator_express_pack_international | PurolatorExpressPackInternational purolator_quick_ship_pack | PurolatorQuickShipPack purolator_express_international_pack_9_am | PurolatorExpressInternationalPack9AM purolator_quick_ship_box | PurolatorQuickShipBox purolator_express_international_pack_10_30_am | PurolatorExpressInternationalPack10:30AM purolator_express_international_pack_12_00 | PurolatorExpressInternationalPack12:00 purolator_express_box_international | PurolatorExpressBoxInternational purolator_express_international_box_9_am | PurolatorExpressInternationalBox9AM purolator_express_international_box_10_30_am | PurolatorExpressInternationalBox10:30AM purolator_express_international_box_12_00 | PurolatorExpressInternationalBox12:00  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_standard | 11 ups_worldwide_expedited | 08 ups_worldwide_express | 07 ups_worldwide_express_plus | 54 ups_worldwide_saver | 65 ups_2nd_day_air | 02 ups_2nd_day_air_am | 59 ups_3_day_select | 12 ups_expedited_mail_innovations | M4 ups_first_class_mail | M2 ups_ground | 03 ups_next_day_air | 01 ups_next_day_air_early | 14 ups_next_day_air_saver | 13 ups_priority_mail | M3 ups_access_point_economy | 70 ups_today_dedicated_courier | 83 ups_today_express | 85 ups_today_express_saver | 86 ups_today_standard | 82 ups_worldwide_express_freight | 96 ups_priority_mail_innovations | M5 ups_economy_mail_innovations | M6  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_central_transport | 2029 freigthcom_estes | 2107 freigthcom_usf_holland | 1911 freightcom_dicom_ground | 3700 freightcom_ground | 3400 freightcom_select | 3404 freightcom_overnight | 3407 freightcom_purolator_ground | 4000 freightcom_purolator_express | 4003 freightcom_purolator_express_9_am | 4004 freightcom_purolator_express_10_30_am | 4005 freightcom_fedex_express_saver | 4100 freightcom_fedex_ground | 4101 freightcom_fedex_2_day | 4102 freightcom_fedex_priority_overnight | 4104 freightcom_fedex_standard_overnight | 4105 freightcom_fedex_first_overnight | 4106 freightcom_fedex_international_economy | 4109 freightcom_ups_standard | 4600 freightcom_ups_expedited | 4601 freightcom_ups_express_saver | 4602 freightcom_ups_express | 4603 freightcom_ups_express_early | 4604 freightcom_ups_3_day_select | 4605 freightcom_ups_worldwide_expedited | 4606 freightcom_ups_worldwide_express | 4607 freightcom_fedex_international_priority | 4108 freightcom_ups_worldwide_express_saver | 4609 freightcom_purolator_ground_us | 4016 freightcom_purolator_express_us | 4015 freightcom_purolator_express_us_10_30_am | 4014 freightcom_ups_worldwide_express_plus | 4608 freightcom_purolator_express_us_9_am | 4013 freightcom_express_easy | 5202 freightcom_express_10_30 | 5208 freightcom_express_worldwide | 5211 freightcom_express_12_00 | 5215 freightcom_economy_select | 5216 freightcom_dayr_e_comm_am_service | 5706 freightcom_dayr_e_comm_ground_service | 5707 freightcom_regular_parcel | 6301 freightcom_expedited_parcel | 6300 freightcom_xpresspost | 6303 freightcom_priority | 6302  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_fedex_priority | 1 eshipper_fedex_first_overnight | 2 eshipper_fedex_ground | 3 eshipper_fedex_standard_overnight | 28 eshipper_fedex_2nd_day | 29 eshipper_fedex_express_saver | 30 eshipper_fedex_international_economy | 35 eshipper_purolator_air | 4 eshipper_purolator_air_9_am | 5 eshipper_purolator_air_10_30 | 6 eshipper_puro_letter | 7 eshipper_puro_letter_9_am | 8 eshipper_puro_letter_10_30 | 9 eshipper_puro_pak | 10 eshipper_puro_pak_9_am | 11 eshipper_puro_pak_10_30 | 12 eshipper_purolator_ground | 13 eshipper_purolator_ground_9_am | 19 eshipper_purolator_ground_10_30 | 20 eshipper_canada_worldwide_same_day | 14 eshipper_canada_worldwide_next_flight_out | 15 eshipper_canada_worldwide_air_freight | 16 eshipper_canada_worldwide_ltl | 17 eshipper_dhl_express_worldwide | 101 eshipper_dhl_express_12_pm | 103 eshipper_dhl_express_10_30_am | 102 eshipper_dhl_esi_export | 104 eshipper_dhl_international_express | 106 eshipper_ups_express_next_day_air | 600 eshipper_ups_expedited_second_day_air | 601 eshipper_ups_worldwide_express | 602 eshipper_ups_worldwide_expedited | 603 eshipper_ups_standard_ground | 604 eshipper_ups_express_early_am_next_day_air_early_am | 605 eshipper_ups_three_day_select | 606 eshipper_ups_saver | 607 eshipper_ups_ground | 608 eshipper_next_day_saver | 609 eshipper_worldwide_express_plus | 610 eshipper_second_day_air_am | 611 eshipper_canada_post_priority | 500 eshipper_canada_post_xpress_post | 501 eshipper_canada_post_expedited | 502 eshipper_canada_post_regular | 503 eshipper_canada_post_xpress_post_usa | 504 eshipper_canada_post_xpress_post_intl | 505 eshipper_canada_post_air_parcel_intl | 506 eshipper_canada_post_surface_parcel_intl | 507 eshipper_canada_post_expedited_parcel_usa | 508 eshipper_tst_ltl | 1100 eshipper_ltl_chicago_suburban_express | 1500 eshipper_ltl_fedex_freight_east | 1501 eshipper_ltl_fedex_freight_west | 1502 eshipper_ltl_mid_states_express | 1503 eshipper_ltl_new_england_motor_freight | 1504 eshipper_ltl_new_penn | 1505 eshipper_ltl_oak_harbor | 1506 eshipper_ltl_pitt_ohio | 1507 eshipper_ltl_r_l_carriers | 1508 eshipper_ltl_saia | 1509 eshipper_ltl_usf_reddaway | 1510 eshipper_ltl_vitran_express | 1511 eshipper_ltl_wilson_trucking | 1512 eshipper_ltl_yellow_transportation | 1513 eshipper_ltl_roadway | 1514 eshipper_ltl_fedex_national | 1515 eshipper_wilson_trucking_tfc | 1800 eshipper_aaa_cooper_transportation | 1801 eshipper_roadrunner_dawes | 1802 eshipper_new_england_motor_freight | 1803 eshipper_new_penn_motor_express | 1804 eshipper_dayton_freight | 1805 eshipper_southeastern_freightway | 1806 eshipper_saia_inc | 1807 eshipper_conway | 1808 eshipper_roadway | 1809 eshipper_usf_reddaway | 1810 eshipper_usf_holland | 1811 eshipper_dependable_highway_express | 1812 eshipper_day_and_ross | 1813 eshipper_day_and_ross_r_and_l | 1814 eshipper_ups | 1815 eshipper_aaa_cooper | 1816 eshipper_ama_transportation | 1817 eshipper_averitt_express | 1818 eshipper_central_freight | 1819 eshipper_conway_us | 1820 eshipper_dayton | 1821 eshipper_drug_transport | 1822 eshipper_estes | 1823 eshipper_land_air_express | 1824 eshipper_fedex_west | 1825 eshipper_fedex_national | 1826 eshipper_usf_holland_us | 1827 eshipper_lakeville_m_express | 1828 eshipper_milan_express | 1829 eshipper_nebraska_transport | 1830 eshipper_new_england | 1831 eshipper_new_penn | 1832 eshipper_a_duie_pyle | 1833 eshipper_roadway_us | 1834 eshipper_usf_reddaway_us | 1835 eshipper_rhody_transportation | 1836 eshipper_saia_motor_freight | 1837 eshipper_southeastern_frgt | 1838 eshipper_pitt_ohio | 1839 eshipper_ward | 1840 eshipper_wilson | 1841 eshipper_chi_cargo | 1842 eshipper_tax_air | 1843 eshipper_fedex_east | 1844 eshipper_central_transport | 1845 eshipper_roadrunner | 1846 eshipper_r_and_l_carriers | 1847 eshipper_estes_us | 1848 eshipper_yrc_roadway | 1849 eshipper_central_transport_us | 1850 eshipper_absolute_transportation_services | 1851 eshipper_blue_sky_express | 1852 eshipper_galasso_trucking | 1853 eshipper_griley_air_freight | 1854 eshipper_jet_transportation | 1855 eshipper_metro_transportation_logistics | 1856 eshipper_oak_harbor | 1857 eshipper_stream_links_express | 1858 eshipper_tiffany_trucking | 1859 eshipper_ups_freight | 1860 eshipper_roadrunner_us | 1861 eshipper_global_mail_parcel_priority | 3500 eshipper_global_mail_parcel_standard | 3501 eshipper_global_mail_packet_plus_priority | 3502 eshipper_global_mail_packet_priority | 3503 eshipper_global_mail_packet_standard | 3504 eshipper_global_mail_business_priority | 3505 eshipper_global_mail_business_standard | 3506 eshipper_global_mail_parcel_direct_priority | 3507 eshipper_global_mail_parcel_direct_standard | 3508 eshipper_ground | 4500 eshipper_select_parcel | 4504 eshipper_express_parcel | 4507  </details><br/>   </details><br/>  
         * @summary Data References
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        references(options?: any) {
            return UtilsApiFp(configuration).references(options)(fetch, basePath);
        },
    };
};

/**
 * UtilsApi - object-oriented interface
 * @export
 * @class UtilsApi
 * @extends {BaseAPI}
 */
export class UtilsApi extends BaseAPI {
    /**
     * Returns a label PDF file.
     * @summary Print a Label
     * @param {LabelPrintingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public printLabel(body: LabelPrintingRequest, options?: any) {
        return UtilsApiFp(this.configuration).printLabel(body, options)(this.fetch, this.basePath);
    }

    /**
     *  ## Countries  <details>  Code | Name  --- | ---  AD | Andorra AE | United Arab Emirates AF | Afghanistan AG | Antigua AI | Anguilla AL | Albania AM | Armenia AN | Netherlands Antilles AO | Angola AR | Argentina AS | American Samoa AT | Austria AU | Australia AW | Aruba AZ | Azerbaijan BA | Bosnia And Herzegovina BB | Barbados BD | Bangladesh BE | Belgium BF | Burkina Faso BG | Bulgaria BH | Bahrain BI | Burundi BJ | Benin BM | Bermuda BN | Brunei BO | Bolivia BR | Brazil BS | Bahamas BT | Bhutan BW | Botswana BY | Belarus BZ | Belize CA | Canada CD | Congo, The Democratic Republic Of CF | Central African Republic CG | Congo CH | Switzerland CI | Cote D Ivoire CK | Cook Islands CL | Chile CM | Cameroon CN | China, Peoples Republic CO | Colombia CR | Costa Rica CU | Cuba CV | Cape Verde CY | Cyprus CZ | Czech Republic, The DE | Germany DJ | Djibouti DK | Denmark DM | Dominica DO | Dominican Republic DZ | Algeria EC | Ecuador EE | Estonia EG | Egypt ER | Eritrea ES | Spain ET | Ethiopia FI | Finland FJ | Fiji FK | Falkland Islands FM | Micronesia, Federated States Of FO | Faroe Islands FR | France GA | Gabon GB | United Kingdom GD | Grenada GE | Georgia GF | French Guyana GG | Guernsey GH | Ghana GI | Gibraltar GL | Greenland GM | Gambia GN | Guinea Republic GP | Guadeloupe GQ | Guinea-equatorial GR | Greece GT | Guatemala GU | Guam GW | Guinea-bissau GY | Guyana (british) HK | Hong Kong HN | Honduras HR | Croatia HT | Haiti HU | Hungary IC | Canary Islands, The ID | Indonesia IE | Ireland, Republic Of IL | Israel IN | India IQ | Iraq IR | Iran (islamic Republic Of) IS | Iceland IT | Italy JE | Jersey JM | Jamaica JO | Jordan JP | Japan KE | Kenya KG | Kyrgyzstan KH | Cambodia KI | Kiribati KM | Comoros KN | St. Kitts KP | Korea, The D.p.r Of (north K.) KR | Korea, Republic Of (south K.) KV | Kosovo KW | Kuwait KY | Cayman Islands KZ | Kazakhstan LA | Lao Peoples Democratic Republic LB | Lebanon LC | St. Lucia LI | Liechtenstein LK | Sri Lanka LR | Liberia LS | Lesotho LT | Lithuania LU | Luxembourg LV | Latvia LY | Libya MA | Morocco MC | Monaco MD | Moldova, Republic Of ME | Montenegro, Republic Of MG | Madagascar MH | Marshall Islands MK | Macedonia, Republic Of ML | Mali MM | Myanmar MN | Mongolia MO | Macau MP | Commonwealth No. Mariana Islands MQ | Martinique MR | Mauritania MS | Montserrat MT | Malta MU | Mauritius MV | Maldives MW | Malawi MX | Mexico MY | Malaysia MZ | Mozambique NA | Namibia NC | New Caledonia NE | Niger NG | Nigeria NI | Nicaragua NL | Netherlands, The NO | Norway NP | Nepal NR | Nauru, Republic Of NU | Niue NZ | New Zealand OM | Oman PA | Panama PE | Peru PF | Tahiti PG | Papua New Guinea PH | Philippines, The PK | Pakistan PL | Poland PR | Puerto Rico PT | Portugal PW | Palau PY | Paraguay QA | Qatar RE | Reunion, Island Of RO | Romania RS | Serbia, Republic Of RU | Russian Federation, The RW | Rwanda SA | Saudi Arabia SB | Solomon Islands SC | Seychelles SD | Sudan SE | Sweden SG | Singapore SH | Saint Helena SI | Slovenia SK | Slovakia SL | Sierra Leone SM | San Marino SN | Senegal SO | Somalia SR | Suriname SS | South Sudan ST | Sao Tome And Principe SV | El Salvador SY | Syria SZ | Swaziland TC | Turks And Caicos Islands TD | Chad TG | Togo TH | Thailand TJ | Tajikistan TL | Timor Leste TN | Tunisia TO | Tonga TR | Turkey TT | Trinidad And Tobago TV | Tuvalu TW | Taiwan TZ | Tanzania UA | Ukraine UG | Uganda US | United States UY | Uruguay UZ | Uzbekistan VA | Vatican City State VC | St. Vincent VE | Venezuela VG | British Virgin Islands VI | U.S. Virgin Islands VN | Vietnam VU | Vanuatu WS | Samoa XB | Bonaire XC | Curacao XE | St. Eustatius XM | St. Maarten XN | Nevis XS | Somaliland, Rep Of (north Somalia) XY | St. Barthelemy YE | Yemen, Republic Of YT | Mayotte ZA | South Africa ZM | Zambia ZW | Zimbabwe  </details><br/>   ## States and Provinces  <details>   ### United Arab Emirates  <details>  Code | Name  --- | ---  AB | Abu Dhabi AJ | Ajman DU | Dubai FU | Fujairah RA | Ras al-Khaimah SH | Sharjah UM | Umm al-Qaiwain  </details><br/>   ### Canada  <details>  Code | Name  --- | ---  AB | Alberta BC | British Columbia MB | Manitoba NB | New Brunswick NL | Newfoundland NT | Northwest Territories NS | Nova Scotia NU | Nunavut ON | Ontario PE | Prince Edward Island QC | Quebec SK | Saskatchewan YT | Yukon  </details><br/>   ### China, Peoples Republic  <details>  Code | Name  --- | ---  anhui | Anhui hainan | Hainan jiangxi | Jiangxi shanghai | Shanghai beijing | Beijing hebei | Hebei jilin | Jilin shanxi | Shanxi chongqing | Chongqing heilongjiang | Heilongjiang liaoning | Liaoning sichuan | Sichuan fujian | Fujian henan | Henan nei_mongol | Nei Mongol tianjin | Tianjin gansu | Gansu hubei | Hubei qinghai | Qinghai xinjiang | Xinjiang guangdong | Guangdong hunan | Hunan shaanxi | Shaanxi yunnan | Yunnan guizhou | Guizhou jiangsu | Jiangsu shandong | Shandong zhejiang | Zhejiang  </details><br/>   ### India  <details>  Code | Name  --- | ---  AN | Andaman & Nicobar (U.T) AP | Andhra Pradesh AR | Arunachal Pradesh AS | Assam BR | Bihar CG | Chattisgarh CH | Chandigarh (U.T.) DD | Daman & Diu (U.T.) DL | Delhi (U.T.) DN | Dadra and Nagar Haveli (U.T.) GA | Goa GJ | Gujarat HP | Himachal Pradesh HR | Haryana JH | Jharkhand JK | Jammu & Kashmir KA | Karnataka KL | Kerala LD | Lakshadweep (U.T) MH | Maharashtra ML | Meghalaya MN | Manipur MP | Madhya Pradesh MZ | Mizoram NL | Nagaland OR | Orissa PB | Punjab PY | Puducherry (U.T.) RJ | Rajasthan SK | Sikkim TN | Tamil Nadu TR | Tripura UA | Uttaranchal UP | Uttar Pradesh WB | West Bengal  </details><br/>   ### Mexico  <details>  Code | Name  --- | ---  AG | Aguascalientes BC | Baja California BS | Baja California Sur CM | Campeche CS | Chiapas CH | Chihuahua CO | Coahuila CL | Colima DF | Ciudad de México DG | Durango GT | Guanajuato GR | Guerrero HG | Hidalgo JA | Jalisco EM | Estado de México MI | Michoacán MO | Morelos NA | Nayarit NL | Nuevo León OA | Oaxaca PU | Puebla QE | Querétaro QR | Quintana Roo SL | San Luis Potosí SI | Sinaloa SO | Sonora TB | Tabasco TM | Tamaulipas TL | Tlaxcala VE | Veracruz YU | Yucatán ZA | Zacatecas  </details><br/>   ### United States  <details>  Code | Name  --- | ---  AL | Alabama AK | Alaska AZ | Arizona AR | Arkansas CA | California CO | Colorado CT | Connecticut DE | Delaware DC | District of Columbia FL | Florida GA | Georgia HI | Hawaii ID | Idaho IL | Illinois IN | Indiana IA | Iowa KS | Kansas KY | Kentucky LA | Louisiana ME | Maine MD | Maryland MA | Massachusetts MI | Michigan MN | Minnesota MS | Mississippi MO | Missouri MT | Montana NE | Nebraska NV | Nevada NH | New Hampshire NJ | New Jersey NM | New Mexico NY | New York NC | North Carolina ND | North Dakota OH | Ohio OK | Oklahoma OR | Oregon PA | Pennsylvania RI | Rhode Island SC | South Carolina SD | South Dakota TN | Tennessee TX | Texas UT | Utah VT | Vermont VA | Virginia WA | Washington State WV | West Virginia WI | Wisconsin WY | Wyoming PR | Puerto Rico  </details><br/>   </details><br/>  ## Currencies  <details>  Code | Name  --- | ---  EUR | Euro AED | UAE Dirham USD | US Dollar XCD | East Caribbean Dollar AMD | Dran ANG | Netherlands Antilles Guilder AOA | Kwanza ARS | Argentine Peso AUD | Australian Dollar AWG | Aruba Guilder AZN | Manat BAM | Convertible Marks BBD | Barbadian Dollar BDT | Taka XOF | CFA Franc West Africa BGN | Bulgarian Lev BHD | Bahraini Dinar BIF | Burundese Franc BMD | Bermudian Dollar BND | Brunei Dollar BOB | Boliviano BRL | Real BSD | Bahamian Dollar BTN | Ngultrum BWP | Pula BYN | Belarussian Ruble BZD | Belize Dollar CAD | Canadian Dollar CDF | Franc Congolais XAF | CFA Franc Central Africa CHF | Swiss Franc NZD | New Zealand Dollar CLP | New Chile Peso CNY | Yuan (Ren Min Bi) COP | Colombian Peso CRC | Costa Rican Colon CUC | Peso Convertible CVE | Cape Verde Escudo CZK | Czech Koruna DJF | Djibouti Franc DKK | Danish Krone DOP | Dominican Republic Peso DZD | Algerian Dinar EGP | Egyptian Pound ERN | Nakfa ETB | Birr FJD | Fijian Dollar GBP | Pound Sterling GEL | Georgian Lari GHS | Cedi GMD | Dalasi GNF | Guinea Franc GTQ | Quetzal GYD | Guyanan Dollar HKD | Hong Kong Dollar HNL | Lempira HRK | Croatian Kuna HTG | Gourde HUF | Forint IDR | Rupiah ILS | New Israeli Shekel INR | Indian Rupee IRR | Iranian Rial ISK | Icelandic Krona JMD | Jamaican Dollar JOD | Jordanian Dinar JPY | Yen KES | Kenyan Shilling KGS | Som KHR | Khmer Rial KMF | Comoros Franc KPW | North Korean Won KRW | Won KWD | Kuwaiti Dinar KYD | Cayman Islands Dollar KZT | Tenge LAK | Kip LKR | Sri Lankan Rupee LRD | Liberian Dollar LSL | Loti LYD | Libyan Dinar MAD | Moroccan Dirham MDL | Leu MGA | Ariary MKD | Denar MMK | Kyat MNT | Tugrik MOP | Pataca MRO | Ouguiya MUR | Mauritius Rupee MVR | Rufiyaa MWK | Kwacha MXN | Mexican Nuevo Peso MYR | Ringgit MZN | Mozambique Metical NAD | Namibian Dollar XPF | CFP Franc NGN | Naira NIO | Cordoba Oro NOK | Norwegian Krone NPR | Nepalese Rupee OMR | Omani Rial PEN | Nuevo Sol PGK | Kina PHP | Phillipines Peso PKR | Pakistani Rupee PLN | Zloty PYG | Guarani QAR | Qatar Rial RSD | Serbia, Dinars RUB | Russian Ruble RWF | Rwanda Franc SAR | Saudi Riyal SBD | Solomon Islands Dollar SCR | Seychelles Rupee SDG | Sudanese Pound SEK | Swedish Krona SGD | Singapore Dollar SHP | St. Helena Pound SLL | Leone SOS | Somali Shilling SRD | Suriname Dollar SSP | South Sudanese pound STD | Dobra SYP | Syrian Pound SZL | Lilangeni THB | Baht TJS | Somoni TND | Tunisian Dinar TOP | Pa'anga TRY | New Turkish Lira TTD | Trinidad and Tobago Dollar TWD | New Taiwan Dollar TZS | Tanzanian Shilling UAH | Hryvna UYU | Peso Uruguayo UZS | Sum VEF | Bolivar Fuerte VND | Dong VUV | Vanuatu Vatu WST | Tala YER | Yemeni Riyal ZAR | South African Rand  </details><br/>   ## Packaging Types  <details>   ### Multi-carrier (purplship)  <details>  Code | Identifier --- | --- envelope | Small Envelope pak | Pak tube | Tube pallet | Pallet small_box | Small Box medium_box | Medium Box your_packaging | Your Packaging  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_flyer_smalls | FLY dhl_parcels_conveyables | COY dhl_non_conveyables | NCY dhl_pallets | PAL dhl_double_pallets | DBL dhl_box | BOX  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_envelope | FEDEX_ENVELOPE fedex_pak | FEDEX_PAK fedex_box | FEDEX_BOX fedex_10_kg_box | FEDEX_10KG_BOX fedex_25_kg_box | FEDEX_25KG_BOX fedex_tube | FEDEX_TUBE your_packaging | YOUR_PACKAGING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_envelope | Envelope purolator_express_pack | Pack purolator_express_box | Box purolator_customer_packaging | Customer Packaging  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_unknown | 00 ups_letter | 01 ups_package | 02 ups_tube | 03 ups_pak | 04 ups_express_box | 21 ups_box_25_kg | 24 ups_box_10_kg | 25 ups_pallet | 30 ups_small_express_box | 2a ups_medium_express_box | 2b ups_large_express_box | 2c  </details><br/>   </details><br/>   ## Package Preset  <details>   ### Canada Post  <details>  Code | Dimensions | Note --- | --- | --- canadapost_mailing_box | 15.2 x 1.0 x 10.2 | height x length x width canadapost_extra_small_mailing_box | 14.0 x 14.0 x 14.0 | height x length x width canadapost_small_mailing_box | 22.9 x 6.4 x 28.6 | height x length x width canadapost_medium_mailing_box | 23.5 x 13.3 x 31.0 | height x length x width canadapost_large_mailing_box | 30.5 x 9.5 x 38.1 | height x length x width canadapost_extra_large_mailing_box | 30.5 x 21.6 x 40.0 | height x length x width canadapost_corrugated_small_box | 32.0 x 32.0 x 42.0 | height x length x width canadapost_corrugated_medium_box | 38.0 x 32.0 x 46.0 | height x length x width canadapost_corrugated_large_box | 46.0 x 40.6 x 46.0 | height x length x width canadapost_xexpresspost_certified_envelope | 15.9 x 1.5 x 0.5 x 26.0 | height x length x weight x width canadapost_xexpresspost_national_large_envelope | 29.2 x 1.5 x 1.36 x 40.0 | height x length x weight x width  </details><br/>   ### DHL Express  <details>  Code | Dimensions | Note --- | --- | --- dhl_express_envelope | 27.5 x 1.0 x 0.5 x 35.0 | height x length x weight x width dhl_express_standard_flyer | 30.0 x 1.5 x 2.0 x 40.0 | height x length x weight x width dhl_express_large_flyer | 37.5 x 1.5 x 3.0 x 47.5 | height x length x weight x width dhl_express_box_2 | 18.2 x 10.0 x 1.0 x 33.7 | height x length x weight x width dhl_express_box_3 | 32.0 x 5.2 x 2.0 x 33.6 | height x length x weight x width dhl_express_box_4 | 32.2 x 18.0 x 5.0 x 33.7 | height x length x weight x width dhl_express_box_5 | 32.2 x 34.5 x 10.0 x 33.7 | height x length x weight x width dhl_express_box_6 | 35.9 x 36.9 x 15.0 x 41.7 | height x length x weight x width dhl_express_box_7 | 40.4 x 38.9 x 20.0 x 48.1 | height x length x weight x width dhl_express_box_8 | 44.4 x 40.9 x 25.0 x 54.2 | height x length x weight x width dhl_express_tube | 15.0 x 15.0 x 5.0 x 96.0 | height x length x weight x width dhl_didgeridoo_box | 13.0 x 162.0 x 10.0 x 13.0 | height x length x weight x width dhl_jumbo_box | 42.7 x 33.0 x 30.0 x 45.0 | height x length x weight x width dhl_jumbo_box_junior | 34.0 x 24.1 x 20.0 x 39.9 | height x length x weight x width  </details><br/>   ### FedEx Express  <details>  Code | Dimensions | Note --- | --- | --- fedex_envelope_legal_size | 15.5 x 1.0 x 9.5 | height x weight x width fedex_padded_pak | 14.75 x 2.2 x 11.75 | height x weight x width fedex_polyethylene_pak | 15.5 x 2.2 x 12.0 | height x weight x width fedex_clinical_pak | 18.0 x 2.2 x 13.5 | height x weight x width fedex_small_box | 10.9 x 1.5 x 20.0 x 12.25 | height x length x weight x width fedex_medium_box | 11.5 x 2.38 x 20.0 x 13.25 | height x length x weight x width fedex_large_box | 12.38 x 3.0 x 20.0 x 17.88 | height x length x weight x width fedex_10_kg_box | 12.94 x 10.19 x 10.0 x 15.81 | height x length x weight x width fedex_25_kg_box | 16.56 x 13.19 x 25.0 x 21.56 | height x length x weight x width fedex_tube | 6.0 x 6.0 x 20.0 x 38.0 | height x length x weight x width  </details><br/>   ### Purolator Courier  <details>  Code | Dimensions | Note --- | --- | --- purolator_express_envelope | 1.5 x 1.0 x 12.5 | length x weight x width purolator_express_pack | 1.0 x 3.0 x 12.5 | length x weight x width purolator_express_box | 3.5 x 7.0 | length x weight  </details><br/>   ### UPS Package  <details>  Code | Dimensions | Note --- | --- | --- ups_small_express_box | 11.0 x 2.0 x 30.0 x 13.0 | height x length x weight x width ups_medium_express_box | 11.0 x 3.0 x 30.0 x 16.0 | height x length x weight x width ups_large_express_box | 13.0 x 3.0 x 30.0 x 18.0 | height x length x weight x width ups_express_tube | 6.0 x 6.0 x 38.0 | height x length x width ups_express_pak | 11.75 x 1.5 x 16.0 | height x length x width ups_world_document_box | 12.5 x 3.0 x 17.5 | height x length x width  </details><br/>   </details><br/>   ## Shipment Options  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_signature | SO canadapost_coverage | COV canadapost_collect_on_delivery | COD canadapost_proof_of_age_required_18 | PA18 canadapost_proof_of_age_required_19 | PA19 canadapost_card_for_pickup | HFP canadapost_do_not_safe_drop | DNS canadapost_leave_at_door | LAD canadapost_deliver_to_post_office | D2PO canadapost_return_at_senders_expense | RASE canadapost_return_to_sender | RTS canadapost_abandon | ABAN  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | 0A dhl_mailroom_management | 0B dhl_pallet_administration | 0C dhl_warehousing | 0D dhl_express_logistics_centre | 0E dhl_strategic_parts_centre | 0F dhl_local_distribution_centre | 0G dhl_terminal_handling | 0H dhl_cross_docking | 0I dhl_inventory_management | 0J dhl_loading_unloading | 0K dhl_product_kitting | 0L dhl_priority_account_desk | 0M dhl_document_archiving | 0N dhl_saturday_delivery | AA dhl_saturday_pickup | AB dhl_holiday_delivery | AC dhl_holiday_pickup | AD dhl_domestic_saturday_delivery | AG dhl_standard | BA dhl_globalmail_item | BB dhl_letter | BC dhl_packet | BD dhl_letter_plus | BE dhl_packet_plus | BF dhl_elevated_risk | CA dhl_restricted_destination | CB dhl_security_validation | CC dhl_secure_protection | CD dhl_proof_of_identity | CE dhl_secure_storage | CF dhl_diplomatic_material | CG dhl_smart_sensor | CH dhl_visa_program | CI dhl_onboard_courier | CJ dhl_secure_safebox | CK dhl_smart_sentry | CL dhl_split_duties_and_tax | DC dhl_duties_and_taxes_paid | DD dhl_receiver_paid | DE dhl_duties_and_taxes_unpaid | DS dhl_import_billing | DT dhl_importer_of_record | DU dhl_go_green_carbon_neutral | EA dhl_go_green_carbon_footprint | EB dhl_go_green_carbon_estimate | EC dhl_fuel_surcharge_b | FB dhl_fuel_surcharge_c | FC dhl_fuel_surcharge_f | FF dhl_smartphone_box | GA dhl_laptop_box | GB dhl_bottle_box | GC dhl_repacking | GD dhl_tablet_box | GE dhl_filler_material | GF dhl_packaging | GG dhl_diplomatic_bag | GH dhl_pallet_box | GI dhl_lock_box | GJ dhl_lithium_ion_pi965_section_ii | HB dhl_dry_ice_un1845 | HC dhl_lithium_ion_pi965_966_section_ii | HD dhl_dangerous_goods | HE dhl_perishable_cargo | HG dhl_excepted_quantity | HH dhl_spill_cleaning | HI dhl_consumer_commodities | HK dhl_limited_quantities_adr | HL dhl_lithium_metal_pi969_section_ii | HM dhl_adr_load_exemption | HN dhl_lithium_ion_pi967_section_ii | HV dhl_lithium_metal_pi970_section_ii | HW dhl_biological_un3373 | HY dhl_extended_liability | IB dhl_contract_insurance | IC dhl_shipment_insurance | II dhl_delivery_notification | JA dhl_pickup_notification | JC dhl_proactive_tracking | JD dhl_performance_reporting | JE dhl_prealert_notification | JY dhl_change_of_billing | KA dhl_cash_on_delivery | KB dhl_printed_invoice | KD dhl_waybill_copy | KE dhl_import_paperwork | KF dhl_payment_on_pickup | KY dhl_shipment_intercept | LA dhl_shipment_redirect | LC dhl_storage_at_facility | LE dhl_cold_storage | LG dhl_specific_routing | LH dhl_service_recovery | LV dhl_alternative_address | LW dhl_hold_for_collection | LX dhl_address_correction_a | MA dhl_address_correction_b | MB dhl_neutral_delivery | NN dhl_remote_area_pickup | OB dhl_remote_area_delivery_c | OC dhl_out_of_service_area | OE dhl_remote_area_delivery_o | OO dhl_shipment_preparation | PA dhl_shipment_labeling | PB dhl_shipment_consolidation | PC dhl_relabeling_data_entry | PD dhl_preprinted_waybill | PE dhl_piece_labelling | PS dhl_data_staging_03 | PT dhl_data_staging_06 | PU dhl_data_staging_12 | PV dhl_data_staging_24 | PW dhl_standard_pickup | PX dhl_scheduled_pickup | PY dhl_dedicated_pickup | QA dhl_early_pickup | QB dhl_late_pickup | QD dhl_residential_pickup | QE dhl_loading_waiting | QF dhl_bypass_injection | QH dhl_direct_injection | QI dhl_drop_off_at_facility | QY dhl_delivery_signature | SA dhl_content_signature | SB dhl_named_signature | SC dhl_adult_signature | SD dhl_contract_signature | SE dhl_alternative_signature | SW dhl_no_signature_required | SX dhl_dedicated_delivery | TA dhl_early_delivery | TB dhl_time_window_delivery | TC dhl_evening_delivery | TD dhl_delivery_on_appointment | TE dhl_return_undeliverable | TG dhl_swap_delivery | TH dhl_unloading_waiting | TJ dhl_residential_delivery | TK dhl_repeat_delivery | TN dhl_alternative_date | TT dhl_no_partial_delivery | TU dhl_service_point_24_7 | TV dhl_pre_9_00 | TW dhl_pre_10_30 | TX dhl_pre_12_00 | TY dhl_thermo_packaging | UA dhl_ambient_vialsafe | UB dhl_ambient_non_insulated | UC dhl_ambient_insulated | UD dhl_ambient_extreme | UE dhl_chilled_box_s | UF dhl_chilled_box_m | UG dhl_chilled_box_l | UH dhl_frozen_no_ice_s | UI dhl_frozen_no_ice_m | UJ dhl_frozen_no_ice_l | UK dhl_frozen_ice_sticks_s | UL dhl_frozen_ice_sticks_m | UM dhl_frozen_ice_sticks_l | UN dhl_frozen_ice_plates_s | UO dhl_frozen_ice_plates_m | UP dhl_frozen_ice_plates_l | UQ dhl_combination_no_ice | UR dhl_combination_dry_ice | US dhl_frozen_ice_sticks_e | UT dhl_frozen_ice_plates_e | UV dhl_customer_tcp_1 | UW dhl_thermo_accessories | VA dhl_absorbent_sleeve | VB dhl_cooland_wrap | VC dhl_dry_ice_supplies | VD dhl_pressure_bag_s | VE dhl_pressure_bag_m | VF dhl_pressure_bag_l | VG dhl_informal_clearance | WA dhl_formal_clearance | WB dhl_payment_deferment | WC dhl_clearance_authorization | WD dhl_multiline_entry | WE dhl_post_clearance_modification | WF dhl_handover_to_broker | WG dhl_physical_intervention | WH dhl_bio_phyto_veterinary_controls | WI dhl_obtaining_permits_and_licences | WJ dhl_bonded_storage | WK dhl_bonded_transit_documents | WL dhl_temporary_import_export | WM dhl_under_bond_guarantee | WN dhl_export_declaration | WO dhl_exporter_validation | WP dhl_certificate_of_origin | WQ dhl_document_translation | WR dhl_personal_effects | WS dhl_paperless_trade | WY dhl_import_export_taxes | XB dhl_unrecoverable_origin_tax | XC dhl_quarantine_inspection | XD dhl_merchandise_process | XE dhl_domestic_postal_tax | XF dhl_tier_two_tax | XG dhl_tier_three_tax | XH dhl_import_penalty | XI dhl_cargo_zone_process | XJ dhl_import_export_duties | XX dhl_premium_09_00 | Y1 dhl_premium_10_30 | Y2 dhl_premium_12_00 | Y3 dhl_over_sized_piece_b | YB dhl_over_handled_piece_c | YC dhl_multipiece_shipment | YE dhl_over_weight_piece_f | YF dhl_over_sized_piece_g | YG dhl_over_handled_piece_h | YH dhl_premium_9_00_i | YI dhl_premium_10_30_j | YJ dhl_premium_12_00_k | YK dhl_paket_shipment | YV dhl_breakbulk_mother | YW dhl_breakbulk_baby | YX dhl_over_weight_piece_y | YY dhl_customer_claim | ZA dhl_damage_compensation | ZB dhl_loss_compensation | ZC dhl_customer_rebate | ZD dhl_e_com_discount | ZE  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_blind_shipment | BLIND_SHIPMENT fedex_broker_select_option | BROKER_SELECT_OPTION fedex_call_before_delivery | CALL_BEFORE_DELIVERY fedex_cod | COD fedex_cod_remittance | COD_REMITTANCE fedex_custom_delivery_window | CUSTOM_DELIVERY_WINDOW fedex_cut_flowers | CUT_FLOWERS fedex_dangerous_goods | DANGEROUS_GOODS fedex_delivery_on_invoice_acceptance | DELIVERY_ON_INVOICE_ACCEPTANCE fedex_detention | DETENTION fedex_do_not_break_down_pallets | DO_NOT_BREAK_DOWN_PALLETS fedex_do_not_stack_pallets | DO_NOT_STACK_PALLETS fedex_dry_ice | DRY_ICE fedex_east_coast_special | EAST_COAST_SPECIAL fedex_electronic_trade_documents | ELECTRONIC_TRADE_DOCUMENTS fedex_event_notification | EVENT_NOTIFICATION fedex_exclude_from_consolidation | EXCLUDE_FROM_CONSOLIDATION fedex_exclusive_use | EXCLUSIVE_USE fedex_exhibition_delivery | EXHIBITION_DELIVERY fedex_exhibition_pickup | EXHIBITION_PICKUP fedex_expedited_alternate_delivery_route | EXPEDITED_ALTERNATE_DELIVERY_ROUTE fedex_expedited_one_day_earlier | EXPEDITED_ONE_DAY_EARLIER fedex_expedited_service_monitoring_and_delivery | EXPEDITED_SERVICE_MONITORING_AND_DELIVERY fedex_expedited_standard_day_early_delivery | EXPEDITED_STANDARD_DAY_EARLY_DELIVERY fedex_extra_labor | EXTRA_LABOR fedex_extreme_length | EXTREME_LENGTH fedex_one_rate | FEDEX_ONE_RATE fedex_flatbed_trailer | FLATBED_TRAILER fedex_food | FOOD fedex_freight_guarantee | FREIGHT_GUARANTEE fedex_freight_to_collect | FREIGHT_TO_COLLECT fedex_future_day_shipment | FUTURE_DAY_SHIPMENT fedex_hold_at_location | HOLD_AT_LOCATION fedex_holiday_delivery | HOLIDAY_DELIVERY fedex_holiday_guarantee | HOLIDAY_GUARANTEE fedex_home_delivery_premium | HOME_DELIVERY_PREMIUM fedex_inside_delivery | INSIDE_DELIVERY fedex_inside_pickup | INSIDE_PICKUP fedex_international_controlled_export_service | INTERNATIONAL_CONTROLLED_EXPORT_SERVICE fedex_international_mail_service | INTERNATIONAL_MAIL_SERVICE fedex_international_traffic_in_arms_regulations | INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS fedex_liftgate_delivery | LIFTGATE_DELIVERY fedex_liftgate_pickup | LIFTGATE_PICKUP fedex_limited_access_delivery | LIMITED_ACCESS_DELIVERY fedex_limited_access_pickup | LIMITED_ACCESS_PICKUP fedex_marking_or_tagging | MARKING_OR_TAGGING fedex_non_business_time | NON_BUSINESS_TIME fedex_pallet_shrinkwrap | PALLET_SHRINKWRAP fedex_pallet_weight_allowance | PALLET_WEIGHT_ALLOWANCE fedex_pallets_provided | PALLETS_PROVIDED fedex_pending_complete | PENDING_COMPLETE fedex_pending_shipment | PENDING_SHIPMENT fedex_permit | PERMIT fedex_pharmacy_delivery | PHARMACY_DELIVERY fedex_poison | POISON fedex_port_delivery | PORT_DELIVERY fedex_port_pickup | PORT_PICKUP fedex_pre_delivery_notification | PRE_DELIVERY_NOTIFICATION fedex_pre_eig_processing | PRE_EIG_PROCESSING fedex_pre_multiplier_processing | PRE_MULTIPLIER_PROCESSING fedex_protection_from_freezing | PROTECTION_FROM_FREEZING fedex_regional_mall_delivery | REGIONAL_MALL_DELIVERY fedex_regional_mall_pickup | REGIONAL_MALL_PICKUP fedex_return_shipment | RETURN_SHIPMENT fedex_returns_clearance | RETURNS_CLEARANCE fedex_returns_clearance_special_routing_required | RETURNS_CLEARANCE_SPECIAL_ROUTING_REQUIRED fedex_saturday_delivery | SATURDAY_DELIVERY fedex_saturday_pickup | SATURDAY_PICKUP fedex_shipment_assembly | SHIPMENT_ASSEMBLY fedex_sort_and_segregate | SORT_AND_SEGREGATE fedex_special_delivery | SPECIAL_DELIVERY fedex_special_equipment | SPECIAL_EQUIPMENT fedex_storage | STORAGE fedex_sunday_delivery | SUNDAY_DELIVERY fedex_third_party_consignee | THIRD_PARTY_CONSIGNEE fedex_top_load | TOP_LOAD fedex_usps_delivery | USPS_DELIVERY fedex_usps_pickup | USPS_PICKUP fedex_weighing | WEIGHING  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_dangerous_goods | Dangerous Goods purolator_chain_of_signature | Chain of Signature purolator_express_cheque | ExpressCheque purolator_hold_for_pickup | Hold For Pickup purolator_return_services | Return Services purolator_saturday_service | Saturday Service purolator_origin_signature_not_required | Origin Signature Not Required (OSNR) purolator_adult_signature_required | Adult Signature Required (ASR) purolator_special_handling | Special Handling  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_saturday_delivery_indicator | SaturdayDeliveryIndicator ups_access_point_cod | AccessPointCOD ups_deliver_to_addressee_only_indicator | DeliverToAddresseeOnlyIndicator ups_direct_delivery_only_indicator | DirectDeliveryOnlyIndicator ups_cod | COD ups_delivery_confirmation | DeliveryConfirmation ups_return_of_document_indicator | ReturnOfDocumentIndicator ups_up_scarbonneutral_indicator | UPScarbonneutralIndicator ups_certificate_of_origin_indicator | CertificateOfOriginIndicator ups_pickup_options | PickupOptions ups_delivery_options | DeliveryOptions ups_restricted_articles | RestrictedArticles ups_shipper_export_declaration_indicator | ShipperExportDeclarationIndicator ups_commercial_invoice_removal_indicator | CommercialInvoiceRemovalIndicator ups_import_control | ImportControl ups_return_service | ReturnService ups_sdl_shipment_indicator | SDLShipmentIndicator ups_epra_indicator | EPRAIndicator  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_saturday_pickup_required | saturdayPickupRequired freightcom_homeland_security | homelandSecurity freightcom_exhibition_convention_site | exhibitionConventionSite freightcom_military_base_delivery | militaryBaseDelivery freightcom_customs_in_bond_freight | customsIn_bondFreight freightcom_limited_access | limitedAccess freightcom_excess_length | excessLength freightcom_tailgate_pickup | tailgatePickup freightcom_residential_pickup | residentialPickup freightcom_cross_border_fee | crossBorderFee freightcom_notify_recipient | notifyRecipient freightcom_single_shipment | singleShipment freightcom_tailgate_delivery | tailgateDelivery freightcom_residential_delivery | residentialDelivery freightcom_insurance_type | insuranceType freightcom_inside_delivery | insideDelivery freightcom_is_saturday_service | isSaturdayService freightcom_dangerous_goods_type | dangerousGoodsType freightcom_stackable | stackable  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_saturday_pickup_required | saturdayPickupRequired eshipper_homeland_security | homelandSecurity eshipper_exhibition_convention_site | exhibitionConventionSite eshipper_military_base_delivery | militaryBaseDelivery eshipper_customs_in_bond_freight | customsIn_bondFreight eshipper_limited_access | limitedAccess eshipper_excess_length | excessLength eshipper_tailgate_pickup | tailgatePickup eshipper_residential_pickup | residentialPickup eshipper_cross_border_fee | crossBorderFee eshipper_notify_recipient | notifyRecipient eshipper_single_shipment | singleShipment eshipper_tailgate_delivery | tailgateDelivery eshipper_residential_delivery | residentialDelivery eshipper_insurance_type | insuranceType eshipper_inside_delivery | insideDelivery eshipper_is_saturday_service | isSaturdayService eshipper_dangerous_goods_type | dangerousGoodsType eshipper_stackable | stackable  </details><br/>   </details><br/>   ## Shipment Services  <details>   ### Canada Post  <details>  Code | Identifier --- | --- canadapost_regular_parcel | DOM.RP canadapost_expedited_parcel | DOM.EP canadapost_xpresspost | DOM.XP canadapost_priority | DOM.PC canadapost_library_books | DOM.LIB canadapost_expedited_parcel_usa | USA.EP canadapost_priority_worldwide_envelope_usa | USA.PW.ENV canadapost_priority_worldwide_pak_usa | USA.PW.PAK canadapost_priority_worldwide_parcel_usa | USA.PW.PARCEL canadapost_small_packet_usa_air | USA.SP.AIR canadapost_tracked_packet_usa | USA.TP canadapost_tracked_packet_usa_lvm | USA.TP.LVM canadapost_xpresspost_usa | USA.XP canadapost_xpresspost_international | INT.XP canadapost_international_parcel_air | INT.IP.AIR canadapost_international_parcel_surface | INT.IP.SURF canadapost_priority_worldwide_envelope_intl | INT.PW.ENV canadapost_priority_worldwide_pak_intl | INT.PW.PAK canadapost_priority_worldwide_parcel_intl | INT.PW.PARCEL canadapost_small_packet_international_air | INT.SP.AIR canadapost_small_packet_international_surface | INT.SP.SURF canadapost_tracked_packet_international | INT.TP  </details><br/>   ### DHL Express  <details>  Code | Identifier --- | --- dhl_logistics_services | LOGISTICS SERVICES dhl_domestic_express_12_00_doc | DOMESTIC EXPRESS 12:00 DOC dhl_b2_c_doc | B2C DOC dhl_b2_c_nondoc | B2C NONDOC dhl_jetline | JETLINE dhl_sprintline | SPRINTLINE dhl_express_easy_doc | EXPRESS EASY DOC dhl_express_easy_nondoc | EXPRESS EASY NONDOC dhl_europack_doc | EUROPACK DOC dhl_auto_reversals | AUTO REVERSALS dhl_breakbulk_express_doc | BREAKBULK EXPRESS DOC dhl_medical_express_doc | MEDICAL EXPRESS DOC dhl_express_worldwide_doc | EXPRESS WORLDWIDE DOC dhl_express_9_00_nondoc | EXPRESS 9:00 NONDOC dhl_freight_worldwide_nondoc | FREIGHT WORLDWIDE NONDOC dhl_domestic_economy_select_doc | DOMESTIC ECONOMY SELECT DOC dhl_economy_select_nondoc | ECONOMY SELECT NONDOC dhl_domestic_express_9_00_doc | DOMESTIC EXPRESS 9:00 DOC dhl_jumbo_box_nondoc | JUMBO BOX NONDOC dhl_express_9_00_doc | EXPRESS 9:00 DOC dhl_express_10_30_doc | EXPRESS 10:30 DOC dhl_express_10_30_nondoc | EXPRESS 10:30 NONDOC dhl_domestic_express_doc | DOMESTIC EXPRESS DOC dhl_domestic_express_10_30_doc | DOMESTIC EXPRESS 10:30 DOC dhl_express_worldwide_nondoc | EXPRESS WORLDWIDE NONDOC dhl_medical_express_nondoc | MEDICAL EXPRESS NONDOC dhl_globalmail_business_doc | GLOBALMAIL BUSINESS DOC dhl_same_day_doc | SAME DAY DOC dhl_express_12_00_doc | EXPRESS 12:00 DOC dhl_europack_nondoc | EUROPACK NONDOC dhl_economy_select_doc | ECONOMY SELECT DOC dhl_express_envelope_doc | EXPRESS ENVELOPE DOC dhl_express_12_00_nondoc | EXPRESS 12:00 NONDOC dhl_destination_charges | Destination Charges  </details><br/>   ### FedEx Express  <details>  Code | Identifier --- | --- fedex_europe_first_international_priority | EUROPE_FIRST_INTERNATIONAL_PRIORITY fedex_1_day_freight | FEDEX_1_DAY_FREIGHT fedex_2_day | FEDEX_2_DAY fedex_2_day_am | FEDEX_2_DAY_AM fedex_2_day_freight | FEDEX_2_DAY_FREIGHT fedex_3_day_freight | FEDEX_3_DAY_FREIGHT fedex_cargo_airport_to_airport | FEDEX_CARGO_AIRPORT_TO_AIRPORT fedex_cargo_freight_forwarding | FEDEX_CARGO_FREIGHT_FORWARDING fedex_cargo_international_express_freight | FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT fedex_cargo_international_premium | FEDEX_CARGO_INTERNATIONAL_PREMIUM fedex_cargo_mail | FEDEX_CARGO_MAIL fedex_cargo_registered_mail | FEDEX_CARGO_REGISTERED_MAIL fedex_cargo_surface_mail | FEDEX_CARGO_SURFACE_MAIL fedex_custom_critical_air_expedite | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE fedex_custom_critical_air_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_air_expedite_network | FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK fedex_custom_critical_charter_air | FEDEX_CUSTOM_CRITICAL_CHARTER_AIR fedex_custom_critical_point_to_point | FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT fedex_custom_critical_surface_expedite | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE fedex_custom_critical_surface_expedite_exclusive_use | FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE fedex_custom_critical_temp_assure_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR fedex_custom_critical_temp_assure_validated_air | FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR fedex_custom_critical_white_glove_services | FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES fedex_distance_deferred | FEDEX_DISTANCE_DEFERRED fedex_express_saver | FEDEX_EXPRESS_SAVER fedex_first_freight | FEDEX_FIRST_FREIGHT fedex_freight_economy | FEDEX_FREIGHT_ECONOMY fedex_freight_priority | FEDEX_FREIGHT_PRIORITY fedex_ground | FEDEX_GROUND fedex_international_priority_plus | FEDEX_INTERNATIONAL_PRIORITY_PLUS fedex_next_day_afternoon | FEDEX_NEXT_DAY_AFTERNOON fedex_next_day_early_morning | FEDEX_NEXT_DAY_EARLY_MORNING fedex_next_day_end_of_day | FEDEX_NEXT_DAY_END_OF_DAY fedex_next_day_freight | FEDEX_NEXT_DAY_FREIGHT fedex_next_day_mid_morning | FEDEX_NEXT_DAY_MID_MORNING fedex_first_overnight | FIRST_OVERNIGHT fedex_ground_home_delivery | GROUND_HOME_DELIVERY fedex_international_distribution_freight | INTERNATIONAL_DISTRIBUTION_FREIGHT fedex_international_economy | INTERNATIONAL_ECONOMY fedex_international_economy_distribution | INTERNATIONAL_ECONOMY_DISTRIBUTION fedex_international_economy_freight | INTERNATIONAL_ECONOMY_FREIGHT fedex_international_first | INTERNATIONAL_FIRST fedex_international_ground | INTERNATIONAL_GROUND fedex_international_priority | INTERNATIONAL_PRIORITY fedex_international_priority_distribution | INTERNATIONAL_PRIORITY_DISTRIBUTION fedex_international_priority_express | INTERNATIONAL_PRIORITY_EXPRESS fedex_international_priority_freight | INTERNATIONAL_PRIORITY_FREIGHT fedex_priority_overnight | PRIORITY_OVERNIGHT fedex_same_day | SAME_DAY fedex_same_day_city | SAME_DAY_CITY fedex_same_day_metro_afternoon | SAME_DAY_METRO_AFTERNOON fedex_same_day_metro_morning | SAME_DAY_METRO_MORNING fedex_same_day_metro_rush | SAME_DAY_METRO_RUSH fedex_smart_post | SMART_POST fedex_standard_overnight | STANDARD_OVERNIGHT fedex_transborder_distribution_consolidation | TRANSBORDER_DISTRIBUTION_CONSOLIDATION  </details><br/>   ### Purolator Courier  <details>  Code | Identifier --- | --- purolator_express_9_am | PurolatorExpress9AM purolator_express_us | PurolatorExpressU.S. purolator_express_10_30_am | PurolatorExpress10:30AM purolator_express_us_9_am | PurolatorExpressU.S.9AM purolator_express_12_pm | PurolatorExpress12PM purolator_express_us_10_30_am | PurolatorExpressU.S.10:30AM purolator_express | PurolatorExpress purolator_express_us_12_00 | PurolatorExpressU.S.12:00 purolator_express_evening | PurolatorExpressEvening purolator_express_envelope_us | PurolatorExpressEnvelopeU.S. purolator_express_envelope_9_am | PurolatorExpressEnvelope9AM purolator_express_us_envelope_9_am | PurolatorExpressU.S.Envelope9AM purolator_express_envelope_10_30_am | PurolatorExpressEnvelope10:30AM purolator_express_us_envelope_10_30_am | PurolatorExpressU.S.Envelope10:30AM purolator_express_envelope_12_pm | PurolatorExpressEnvelope12PM purolator_express_us_envelope_12_00 | PurolatorExpressU.S.Envelope12:00 purolator_express_envelope | PurolatorExpressEnvelope purolator_express_pack_us | PurolatorExpressPackU.S. purolator_express_envelope_evening | PurolatorExpressEnvelopeEvening purolator_express_us_pack_9_am | PurolatorExpressU.S.Pack9AM purolator_express_pack_9_am | PurolatorExpressPack9AM purolator_express_us_pack_10_30_am | PurolatorExpressU.S.Pack10:30AM purolator_express_pack10_30_am | PurolatorExpressPack10:30AM purolator_express_us_pack_12_00 | PurolatorExpressU.S.Pack12:00 purolator_express_pack_12_pm | PurolatorExpressPack12PM purolator_express_box_us | PurolatorExpressBoxU.S. purolator_express_pack | PurolatorExpressPack purolator_express_us_box_9_am | PurolatorExpressU.S.Box9AM purolator_express_pack_evening | PurolatorExpressPackEvening purolator_express_us_box_10_30_am | PurolatorExpressU.S.Box10:30AM purolator_express_box_9_am | PurolatorExpressBox9AM purolator_express_us_box_12_00 | PurolatorExpressU.S.Box12:00 purolator_express_box_10_30_am | PurolatorExpressBox10:30AM purolator_ground_us | PurolatorGroundU.S. purolator_express_box_12_pm | PurolatorExpressBox12PM purolator_express_international | PurolatorExpressInternational purolator_express_box | PurolatorExpressBox purolator_express_international_9_am | PurolatorExpressInternational9AM purolator_express_box_evening | PurolatorExpressBoxEvening purolator_express_international_10_30_am | PurolatorExpressInternational10:30AM purolator_ground | PurolatorGround purolator_express_international_12_00 | PurolatorExpressInternational12:00 purolator_ground9_am | PurolatorGround9AM purolator_express_envelope_international | PurolatorExpressEnvelopeInternational purolator_ground10_30_am | PurolatorGround10:30AM purolator_express_international_envelope_9_am | PurolatorExpressInternationalEnvelope9AM purolator_ground_evening | PurolatorGroundEvening purolator_express_international_envelope_10_30_am | PurolatorExpressInternationalEnvelope10:30AM purolator_quick_ship | PurolatorQuickShip purolator_express_international_envelope_12_00 | PurolatorExpressInternationalEnvelope12:00 purolator_quick_ship_envelope | PurolatorQuickShipEnvelope purolator_express_pack_international | PurolatorExpressPackInternational purolator_quick_ship_pack | PurolatorQuickShipPack purolator_express_international_pack_9_am | PurolatorExpressInternationalPack9AM purolator_quick_ship_box | PurolatorQuickShipBox purolator_express_international_pack_10_30_am | PurolatorExpressInternationalPack10:30AM purolator_express_international_pack_12_00 | PurolatorExpressInternationalPack12:00 purolator_express_box_international | PurolatorExpressBoxInternational purolator_express_international_box_9_am | PurolatorExpressInternationalBox9AM purolator_express_international_box_10_30_am | PurolatorExpressInternationalBox10:30AM purolator_express_international_box_12_00 | PurolatorExpressInternationalBox12:00  </details><br/>   ### UPS Package  <details>  Code | Identifier --- | --- ups_standard | 11 ups_worldwide_expedited | 08 ups_worldwide_express | 07 ups_worldwide_express_plus | 54 ups_worldwide_saver | 65 ups_2nd_day_air | 02 ups_2nd_day_air_am | 59 ups_3_day_select | 12 ups_expedited_mail_innovations | M4 ups_first_class_mail | M2 ups_ground | 03 ups_next_day_air | 01 ups_next_day_air_early | 14 ups_next_day_air_saver | 13 ups_priority_mail | M3 ups_access_point_economy | 70 ups_today_dedicated_courier | 83 ups_today_express | 85 ups_today_express_saver | 86 ups_today_standard | 82 ups_worldwide_express_freight | 96 ups_priority_mail_innovations | M5 ups_economy_mail_innovations | M6  </details><br/>   ### Freightcom  <details>  Code | Identifier --- | --- freightcom_central_transport | 2029 freigthcom_estes | 2107 freigthcom_usf_holland | 1911 freightcom_dicom_ground | 3700 freightcom_ground | 3400 freightcom_select | 3404 freightcom_overnight | 3407 freightcom_purolator_ground | 4000 freightcom_purolator_express | 4003 freightcom_purolator_express_9_am | 4004 freightcom_purolator_express_10_30_am | 4005 freightcom_fedex_express_saver | 4100 freightcom_fedex_ground | 4101 freightcom_fedex_2_day | 4102 freightcom_fedex_priority_overnight | 4104 freightcom_fedex_standard_overnight | 4105 freightcom_fedex_first_overnight | 4106 freightcom_fedex_international_economy | 4109 freightcom_ups_standard | 4600 freightcom_ups_expedited | 4601 freightcom_ups_express_saver | 4602 freightcom_ups_express | 4603 freightcom_ups_express_early | 4604 freightcom_ups_3_day_select | 4605 freightcom_ups_worldwide_expedited | 4606 freightcom_ups_worldwide_express | 4607 freightcom_fedex_international_priority | 4108 freightcom_ups_worldwide_express_saver | 4609 freightcom_purolator_ground_us | 4016 freightcom_purolator_express_us | 4015 freightcom_purolator_express_us_10_30_am | 4014 freightcom_ups_worldwide_express_plus | 4608 freightcom_purolator_express_us_9_am | 4013 freightcom_express_easy | 5202 freightcom_express_10_30 | 5208 freightcom_express_worldwide | 5211 freightcom_express_12_00 | 5215 freightcom_economy_select | 5216 freightcom_dayr_e_comm_am_service | 5706 freightcom_dayr_e_comm_ground_service | 5707 freightcom_regular_parcel | 6301 freightcom_expedited_parcel | 6300 freightcom_xpresspost | 6303 freightcom_priority | 6302  </details><br/>   ### eShipper  <details>  Code | Identifier --- | --- eshipper_fedex_priority | 1 eshipper_fedex_first_overnight | 2 eshipper_fedex_ground | 3 eshipper_fedex_standard_overnight | 28 eshipper_fedex_2nd_day | 29 eshipper_fedex_express_saver | 30 eshipper_fedex_international_economy | 35 eshipper_purolator_air | 4 eshipper_purolator_air_9_am | 5 eshipper_purolator_air_10_30 | 6 eshipper_puro_letter | 7 eshipper_puro_letter_9_am | 8 eshipper_puro_letter_10_30 | 9 eshipper_puro_pak | 10 eshipper_puro_pak_9_am | 11 eshipper_puro_pak_10_30 | 12 eshipper_purolator_ground | 13 eshipper_purolator_ground_9_am | 19 eshipper_purolator_ground_10_30 | 20 eshipper_canada_worldwide_same_day | 14 eshipper_canada_worldwide_next_flight_out | 15 eshipper_canada_worldwide_air_freight | 16 eshipper_canada_worldwide_ltl | 17 eshipper_dhl_express_worldwide | 101 eshipper_dhl_express_12_pm | 103 eshipper_dhl_express_10_30_am | 102 eshipper_dhl_esi_export | 104 eshipper_dhl_international_express | 106 eshipper_ups_express_next_day_air | 600 eshipper_ups_expedited_second_day_air | 601 eshipper_ups_worldwide_express | 602 eshipper_ups_worldwide_expedited | 603 eshipper_ups_standard_ground | 604 eshipper_ups_express_early_am_next_day_air_early_am | 605 eshipper_ups_three_day_select | 606 eshipper_ups_saver | 607 eshipper_ups_ground | 608 eshipper_next_day_saver | 609 eshipper_worldwide_express_plus | 610 eshipper_second_day_air_am | 611 eshipper_canada_post_priority | 500 eshipper_canada_post_xpress_post | 501 eshipper_canada_post_expedited | 502 eshipper_canada_post_regular | 503 eshipper_canada_post_xpress_post_usa | 504 eshipper_canada_post_xpress_post_intl | 505 eshipper_canada_post_air_parcel_intl | 506 eshipper_canada_post_surface_parcel_intl | 507 eshipper_canada_post_expedited_parcel_usa | 508 eshipper_tst_ltl | 1100 eshipper_ltl_chicago_suburban_express | 1500 eshipper_ltl_fedex_freight_east | 1501 eshipper_ltl_fedex_freight_west | 1502 eshipper_ltl_mid_states_express | 1503 eshipper_ltl_new_england_motor_freight | 1504 eshipper_ltl_new_penn | 1505 eshipper_ltl_oak_harbor | 1506 eshipper_ltl_pitt_ohio | 1507 eshipper_ltl_r_l_carriers | 1508 eshipper_ltl_saia | 1509 eshipper_ltl_usf_reddaway | 1510 eshipper_ltl_vitran_express | 1511 eshipper_ltl_wilson_trucking | 1512 eshipper_ltl_yellow_transportation | 1513 eshipper_ltl_roadway | 1514 eshipper_ltl_fedex_national | 1515 eshipper_wilson_trucking_tfc | 1800 eshipper_aaa_cooper_transportation | 1801 eshipper_roadrunner_dawes | 1802 eshipper_new_england_motor_freight | 1803 eshipper_new_penn_motor_express | 1804 eshipper_dayton_freight | 1805 eshipper_southeastern_freightway | 1806 eshipper_saia_inc | 1807 eshipper_conway | 1808 eshipper_roadway | 1809 eshipper_usf_reddaway | 1810 eshipper_usf_holland | 1811 eshipper_dependable_highway_express | 1812 eshipper_day_and_ross | 1813 eshipper_day_and_ross_r_and_l | 1814 eshipper_ups | 1815 eshipper_aaa_cooper | 1816 eshipper_ama_transportation | 1817 eshipper_averitt_express | 1818 eshipper_central_freight | 1819 eshipper_conway_us | 1820 eshipper_dayton | 1821 eshipper_drug_transport | 1822 eshipper_estes | 1823 eshipper_land_air_express | 1824 eshipper_fedex_west | 1825 eshipper_fedex_national | 1826 eshipper_usf_holland_us | 1827 eshipper_lakeville_m_express | 1828 eshipper_milan_express | 1829 eshipper_nebraska_transport | 1830 eshipper_new_england | 1831 eshipper_new_penn | 1832 eshipper_a_duie_pyle | 1833 eshipper_roadway_us | 1834 eshipper_usf_reddaway_us | 1835 eshipper_rhody_transportation | 1836 eshipper_saia_motor_freight | 1837 eshipper_southeastern_frgt | 1838 eshipper_pitt_ohio | 1839 eshipper_ward | 1840 eshipper_wilson | 1841 eshipper_chi_cargo | 1842 eshipper_tax_air | 1843 eshipper_fedex_east | 1844 eshipper_central_transport | 1845 eshipper_roadrunner | 1846 eshipper_r_and_l_carriers | 1847 eshipper_estes_us | 1848 eshipper_yrc_roadway | 1849 eshipper_central_transport_us | 1850 eshipper_absolute_transportation_services | 1851 eshipper_blue_sky_express | 1852 eshipper_galasso_trucking | 1853 eshipper_griley_air_freight | 1854 eshipper_jet_transportation | 1855 eshipper_metro_transportation_logistics | 1856 eshipper_oak_harbor | 1857 eshipper_stream_links_express | 1858 eshipper_tiffany_trucking | 1859 eshipper_ups_freight | 1860 eshipper_roadrunner_us | 1861 eshipper_global_mail_parcel_priority | 3500 eshipper_global_mail_parcel_standard | 3501 eshipper_global_mail_packet_plus_priority | 3502 eshipper_global_mail_packet_priority | 3503 eshipper_global_mail_packet_standard | 3504 eshipper_global_mail_business_priority | 3505 eshipper_global_mail_business_standard | 3506 eshipper_global_mail_parcel_direct_priority | 3507 eshipper_global_mail_parcel_direct_standard | 3508 eshipper_ground | 4500 eshipper_select_parcel | 4504 eshipper_express_parcel | 4507  </details><br/>   </details><br/>  
     * @summary Data References
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public references(options?: any) {
        return UtilsApiFp(this.configuration).references(options)(this.fetch, this.basePath);
    }

}
