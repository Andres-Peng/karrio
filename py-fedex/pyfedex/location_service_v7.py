#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun 12 20:55:49 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', 'pyfedex/location_service_v7.py')
#
# Command line arguments:
#    /Fedex/FedExWebServicesStandardXSD/LocationsService_v7.xsd
#
# Command line:
#    generateDS --no-namespace-defs -o "pyfedex/location_service_v7.py"  /Fedex/FedExWebServicesStandardXSD/LocationsService_v7.xsd
#
# Current working directory (os.getcwd()):
#   py_fedex
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a
    container of "address parts" which should be handled as a unit
    (such as a city-state-ZIP combination within the US)."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None):
        self.original_tagname_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.CountryName = CountryName
        self.Residential = Residential
        self.GeographicCoordinates = GeographicCoordinates
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value): self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_CountryName(self): return self.CountryName
    def set_CountryName(self, CountryName): self.CountryName = CountryName
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def get_GeographicCoordinates(self): return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates): self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StreetLines>%s</ns:StreetLines>%s' % (self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:City>%s</ns:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StateOrProvinceCode>%s</ns:StateOrProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PostalCode>%s</ns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:UrbanizationCode>%s</ns:UrbanizationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryCode>%s</ns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.CountryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryName>%s</ns:CountryName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), eol_))
        if self.Residential is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Residential>%s</ns:Residential>%s' % (self.gds_format_boolean(self.Residential, input_name='Residential'), eol_))
        if self.GeographicCoordinates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GeographicCoordinates>%s</ns:GeographicCoordinates>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'CountryName':
            CountryName_ = child_.text
            CountryName_ = self.gds_validate_string(CountryName_, node, 'CountryName')
            self.CountryName = CountryName_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
        elif nodeName_ == 'GeographicCoordinates':
            GeographicCoordinates_ = child_.text
            GeographicCoordinates_ = self.gds_validate_string(GeographicCoordinates_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = GeographicCoordinates_
# end class Address


class AddressAncillaryDetail(GeneratedsSuper):
    """Additional information about a physical location, such as suite
    number, cross street, floor number in a building. These details
    are not typically a part of a standard address definition;
    however, these details might help locate the address."""
    subclass = None
    superclass = None
    def __init__(self, LocationInCity=None, LocationInProperty=None, Accessibility=None, Building=None, Department=None, RoomFloor=None, Suite=None, Apartment=None, Room=None, CrossStreet=None, AdditionalDescriptions=None):
        self.original_tagname_ = None
        self.LocationInCity = LocationInCity
        self.LocationInProperty = LocationInProperty
        self.Accessibility = Accessibility
        self.validate_LocationAccessibilityType(self.Accessibility)
        self.Building = Building
        self.Department = Department
        self.RoomFloor = RoomFloor
        self.Suite = Suite
        self.Apartment = Apartment
        self.Room = Room
        self.CrossStreet = CrossStreet
        if AdditionalDescriptions is None:
            self.AdditionalDescriptions = []
        else:
            self.AdditionalDescriptions = AdditionalDescriptions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressAncillaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressAncillaryDetail.subclass:
            return AddressAncillaryDetail.subclass(*args_, **kwargs_)
        else:
            return AddressAncillaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LocationInCity(self): return self.LocationInCity
    def set_LocationInCity(self, LocationInCity): self.LocationInCity = LocationInCity
    def get_LocationInProperty(self): return self.LocationInProperty
    def set_LocationInProperty(self, LocationInProperty): self.LocationInProperty = LocationInProperty
    def get_Accessibility(self): return self.Accessibility
    def set_Accessibility(self, Accessibility): self.Accessibility = Accessibility
    def get_Building(self): return self.Building
    def set_Building(self, Building): self.Building = Building
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_RoomFloor(self): return self.RoomFloor
    def set_RoomFloor(self, RoomFloor): self.RoomFloor = RoomFloor
    def get_Suite(self): return self.Suite
    def set_Suite(self, Suite): self.Suite = Suite
    def get_Apartment(self): return self.Apartment
    def set_Apartment(self, Apartment): self.Apartment = Apartment
    def get_Room(self): return self.Room
    def set_Room(self, Room): self.Room = Room
    def get_CrossStreet(self): return self.CrossStreet
    def set_CrossStreet(self, CrossStreet): self.CrossStreet = CrossStreet
    def get_AdditionalDescriptions(self): return self.AdditionalDescriptions
    def set_AdditionalDescriptions(self, AdditionalDescriptions): self.AdditionalDescriptions = AdditionalDescriptions
    def add_AdditionalDescriptions(self, value): self.AdditionalDescriptions.append(value)
    def insert_AdditionalDescriptions_at(self, index, value): self.AdditionalDescriptions.insert(index, value)
    def replace_AdditionalDescriptions_at(self, index, value): self.AdditionalDescriptions[index] = value
    def validate_LocationAccessibilityType(self, value):
        # Validate type LocationAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INSIDE', 'OUTSIDE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationAccessibilityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LocationInCity is not None or
            self.LocationInProperty is not None or
            self.Accessibility is not None or
            self.Building is not None or
            self.Department is not None or
            self.RoomFloor is not None or
            self.Suite is not None or
            self.Apartment is not None or
            self.Room is not None or
            self.CrossStreet is not None or
            self.AdditionalDescriptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='AddressAncillaryDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressAncillaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressAncillaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='AddressAncillaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressAncillaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressAncillaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocationInCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationInCity>%s</ns:LocationInCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationInCity), input_name='LocationInCity')), eol_))
        if self.LocationInProperty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationInProperty>%s</ns:LocationInProperty>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationInProperty), input_name='LocationInProperty')), eol_))
        if self.Accessibility is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Accessibility>%s</ns:Accessibility>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), eol_))
        if self.Building is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Building>%s</ns:Building>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Building), input_name='Building')), eol_))
        if self.Department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Department>%s</ns:Department>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), eol_))
        if self.RoomFloor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RoomFloor>%s</ns:RoomFloor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RoomFloor), input_name='RoomFloor')), eol_))
        if self.Suite is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Suite>%s</ns:Suite>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Suite), input_name='Suite')), eol_))
        if self.Apartment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Apartment>%s</ns:Apartment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Apartment), input_name='Apartment')), eol_))
        if self.Room is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Room>%s</ns:Room>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Room), input_name='Room')), eol_))
        if self.CrossStreet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CrossStreet>%s</ns:CrossStreet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CrossStreet), input_name='CrossStreet')), eol_))
        for AdditionalDescriptions_ in self.AdditionalDescriptions:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AdditionalDescriptions>%s</ns:AdditionalDescriptions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AdditionalDescriptions_), input_name='AdditionalDescriptions')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LocationInCity':
            LocationInCity_ = child_.text
            LocationInCity_ = self.gds_validate_string(LocationInCity_, node, 'LocationInCity')
            self.LocationInCity = LocationInCity_
        elif nodeName_ == 'LocationInProperty':
            LocationInProperty_ = child_.text
            LocationInProperty_ = self.gds_validate_string(LocationInProperty_, node, 'LocationInProperty')
            self.LocationInProperty = LocationInProperty_
        elif nodeName_ == 'Accessibility':
            Accessibility_ = child_.text
            Accessibility_ = self.gds_validate_string(Accessibility_, node, 'Accessibility')
            self.Accessibility = Accessibility_
            # validate type LocationAccessibilityType
            self.validate_LocationAccessibilityType(self.Accessibility)
        elif nodeName_ == 'Building':
            Building_ = child_.text
            Building_ = self.gds_validate_string(Building_, node, 'Building')
            self.Building = Building_
        elif nodeName_ == 'Department':
            Department_ = child_.text
            Department_ = self.gds_validate_string(Department_, node, 'Department')
            self.Department = Department_
        elif nodeName_ == 'RoomFloor':
            RoomFloor_ = child_.text
            RoomFloor_ = self.gds_validate_string(RoomFloor_, node, 'RoomFloor')
            self.RoomFloor = RoomFloor_
        elif nodeName_ == 'Suite':
            Suite_ = child_.text
            Suite_ = self.gds_validate_string(Suite_, node, 'Suite')
            self.Suite = Suite_
        elif nodeName_ == 'Apartment':
            Apartment_ = child_.text
            Apartment_ = self.gds_validate_string(Apartment_, node, 'Apartment')
            self.Apartment = Apartment_
        elif nodeName_ == 'Room':
            Room_ = child_.text
            Room_ = self.gds_validate_string(Room_, node, 'Room')
            self.Room = Room_
        elif nodeName_ == 'CrossStreet':
            CrossStreet_ = child_.text
            CrossStreet_ = self.gds_validate_string(CrossStreet_, node, 'CrossStreet')
            self.CrossStreet = CrossStreet_
        elif nodeName_ == 'AdditionalDescriptions':
            AdditionalDescriptions_ = child_.text
            AdditionalDescriptions_ = self.gds_validate_string(AdditionalDescriptions_, node, 'AdditionalDescriptions')
            self.AdditionalDescriptions.append(AdditionalDescriptions_)
# end class AddressAncillaryDetail


class AddressToLocationRelationshipDetail(GeneratedsSuper):
    """Specifies the relationship between the address specificed and the
    address of the FedEx Location in terms of distance."""
    subclass = None
    superclass = None
    def __init__(self, MatchedAddress=None, MatchedAddressGeographicCoordinates=None, DistanceAndLocationDetails=None):
        self.original_tagname_ = None
        self.MatchedAddress = MatchedAddress
        self.MatchedAddressGeographicCoordinates = MatchedAddressGeographicCoordinates
        if DistanceAndLocationDetails is None:
            self.DistanceAndLocationDetails = []
        else:
            self.DistanceAndLocationDetails = DistanceAndLocationDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressToLocationRelationshipDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressToLocationRelationshipDetail.subclass:
            return AddressToLocationRelationshipDetail.subclass(*args_, **kwargs_)
        else:
            return AddressToLocationRelationshipDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MatchedAddress(self): return self.MatchedAddress
    def set_MatchedAddress(self, MatchedAddress): self.MatchedAddress = MatchedAddress
    def get_MatchedAddressGeographicCoordinates(self): return self.MatchedAddressGeographicCoordinates
    def set_MatchedAddressGeographicCoordinates(self, MatchedAddressGeographicCoordinates): self.MatchedAddressGeographicCoordinates = MatchedAddressGeographicCoordinates
    def get_DistanceAndLocationDetails(self): return self.DistanceAndLocationDetails
    def set_DistanceAndLocationDetails(self, DistanceAndLocationDetails): self.DistanceAndLocationDetails = DistanceAndLocationDetails
    def add_DistanceAndLocationDetails(self, value): self.DistanceAndLocationDetails.append(value)
    def insert_DistanceAndLocationDetails_at(self, index, value): self.DistanceAndLocationDetails.insert(index, value)
    def replace_DistanceAndLocationDetails_at(self, index, value): self.DistanceAndLocationDetails[index] = value
    def hasContent_(self):
        if (
            self.MatchedAddress is not None or
            self.MatchedAddressGeographicCoordinates is not None or
            self.DistanceAndLocationDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='AddressToLocationRelationshipDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressToLocationRelationshipDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressToLocationRelationshipDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='AddressToLocationRelationshipDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressToLocationRelationshipDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressToLocationRelationshipDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MatchedAddress is not None:
            self.MatchedAddress.export(outfile, level, namespace_, name_='MatchedAddress', pretty_print=pretty_print)
        if self.MatchedAddressGeographicCoordinates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MatchedAddressGeographicCoordinates>%s</ns:MatchedAddressGeographicCoordinates>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MatchedAddressGeographicCoordinates), input_name='MatchedAddressGeographicCoordinates')), eol_))
        for DistanceAndLocationDetails_ in self.DistanceAndLocationDetails:
            DistanceAndLocationDetails_.export(outfile, level, namespace_, name_='DistanceAndLocationDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MatchedAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.MatchedAddress = obj_
            obj_.original_tagname_ = 'MatchedAddress'
        elif nodeName_ == 'MatchedAddressGeographicCoordinates':
            MatchedAddressGeographicCoordinates_ = child_.text
            MatchedAddressGeographicCoordinates_ = self.gds_validate_string(MatchedAddressGeographicCoordinates_, node, 'MatchedAddressGeographicCoordinates')
            self.MatchedAddressGeographicCoordinates = MatchedAddressGeographicCoordinates_
        elif nodeName_ == 'DistanceAndLocationDetails':
            obj_ = DistanceAndLocationDetail.factory()
            obj_.build(child_)
            self.DistanceAndLocationDetails.append(obj_)
            obj_.original_tagname_ = 'DistanceAndLocationDetails'
# end class AddressToLocationRelationshipDetail


class CarrierDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Carrier=None, ServiceCategory=None, ServiceType=None, CountryRelationship=None, NormalLatestDropOffDetails=None, ExceptionalLatestDropOffDetails=None, EffectiveLatestDropOffDetails=None, ShippingHolidays=None):
        self.original_tagname_ = None
        self.Carrier = Carrier
        self.validate_CarrierCodeType(self.Carrier)
        self.ServiceCategory = ServiceCategory
        self.validate_ServiceCategoryType(self.ServiceCategory)
        self.ServiceType = ServiceType
        self.validate_ServiceType(self.ServiceType)
        self.CountryRelationship = CountryRelationship
        self.validate_CountryRelationshipType(self.CountryRelationship)
        if NormalLatestDropOffDetails is None:
            self.NormalLatestDropOffDetails = []
        else:
            self.NormalLatestDropOffDetails = NormalLatestDropOffDetails
        if ExceptionalLatestDropOffDetails is None:
            self.ExceptionalLatestDropOffDetails = []
        else:
            self.ExceptionalLatestDropOffDetails = ExceptionalLatestDropOffDetails
        self.EffectiveLatestDropOffDetails = EffectiveLatestDropOffDetails
        if ShippingHolidays is None:
            self.ShippingHolidays = []
        else:
            self.ShippingHolidays = ShippingHolidays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierDetail.subclass:
            return CarrierDetail.subclass(*args_, **kwargs_)
        else:
            return CarrierDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def get_ServiceCategory(self): return self.ServiceCategory
    def set_ServiceCategory(self, ServiceCategory): self.ServiceCategory = ServiceCategory
    def get_ServiceType(self): return self.ServiceType
    def set_ServiceType(self, ServiceType): self.ServiceType = ServiceType
    def get_CountryRelationship(self): return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship): self.CountryRelationship = CountryRelationship
    def get_NormalLatestDropOffDetails(self): return self.NormalLatestDropOffDetails
    def set_NormalLatestDropOffDetails(self, NormalLatestDropOffDetails): self.NormalLatestDropOffDetails = NormalLatestDropOffDetails
    def add_NormalLatestDropOffDetails(self, value): self.NormalLatestDropOffDetails.append(value)
    def insert_NormalLatestDropOffDetails_at(self, index, value): self.NormalLatestDropOffDetails.insert(index, value)
    def replace_NormalLatestDropOffDetails_at(self, index, value): self.NormalLatestDropOffDetails[index] = value
    def get_ExceptionalLatestDropOffDetails(self): return self.ExceptionalLatestDropOffDetails
    def set_ExceptionalLatestDropOffDetails(self, ExceptionalLatestDropOffDetails): self.ExceptionalLatestDropOffDetails = ExceptionalLatestDropOffDetails
    def add_ExceptionalLatestDropOffDetails(self, value): self.ExceptionalLatestDropOffDetails.append(value)
    def insert_ExceptionalLatestDropOffDetails_at(self, index, value): self.ExceptionalLatestDropOffDetails.insert(index, value)
    def replace_ExceptionalLatestDropOffDetails_at(self, index, value): self.ExceptionalLatestDropOffDetails[index] = value
    def get_EffectiveLatestDropOffDetails(self): return self.EffectiveLatestDropOffDetails
    def set_EffectiveLatestDropOffDetails(self, EffectiveLatestDropOffDetails): self.EffectiveLatestDropOffDetails = EffectiveLatestDropOffDetails
    def get_ShippingHolidays(self): return self.ShippingHolidays
    def set_ShippingHolidays(self, ShippingHolidays): self.ShippingHolidays = ShippingHolidays
    def add_ShippingHolidays(self, value): self.ShippingHolidays.append(value)
    def insert_ShippingHolidays_at(self, index, value): self.ShippingHolidays.insert(index, value)
    def replace_ShippingHolidays_at(self, index, value): self.ShippingHolidays[index] = value
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_ServiceCategoryType(self, value):
        # Validate type ServiceCategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EXPRESS_FREIGHT', 'EXPRESS_PARCEL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceCategoryType' % {"value" : value.encode("utf-8")} )
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def validate_CountryRelationshipType(self, value):
        # Validate type CountryRelationshipType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DOMESTIC', 'INTERNATIONAL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CountryRelationshipType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.ServiceCategory is not None or
            self.ServiceType is not None or
            self.CountryRelationship is not None or
            self.NormalLatestDropOffDetails or
            self.ExceptionalLatestDropOffDetails or
            self.EffectiveLatestDropOffDetails is not None or
            self.ShippingHolidays
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CarrierDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CarrierDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CarrierDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CarrierDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CarrierDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Carrier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Carrier>%s</ns:Carrier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Carrier), input_name='Carrier')), eol_))
        if self.ServiceCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceCategory>%s</ns:ServiceCategory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceCategory), input_name='ServiceCategory')), eol_))
        if self.ServiceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceType>%s</ns:ServiceType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), eol_))
        if self.CountryRelationship is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryRelationship>%s</ns:CountryRelationship>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryRelationship), input_name='CountryRelationship')), eol_))
        for NormalLatestDropOffDetails_ in self.NormalLatestDropOffDetails:
            NormalLatestDropOffDetails_.export(outfile, level, namespace_, name_='NormalLatestDropOffDetails', pretty_print=pretty_print)
        for ExceptionalLatestDropOffDetails_ in self.ExceptionalLatestDropOffDetails:
            ExceptionalLatestDropOffDetails_.export(outfile, level, namespace_, name_='ExceptionalLatestDropOffDetails', pretty_print=pretty_print)
        if self.EffectiveLatestDropOffDetails is not None:
            self.EffectiveLatestDropOffDetails.export(outfile, level, namespace_, name_='EffectiveLatestDropOffDetails', pretty_print=pretty_print)
        for ShippingHolidays_ in self.ShippingHolidays:
            ShippingHolidays_.export(outfile, level, namespace_, name_='ShippingHolidays', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Carrier':
            Carrier_ = child_.text
            Carrier_ = self.gds_validate_string(Carrier_, node, 'Carrier')
            self.Carrier = Carrier_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.Carrier)
        elif nodeName_ == 'ServiceCategory':
            ServiceCategory_ = child_.text
            ServiceCategory_ = self.gds_validate_string(ServiceCategory_, node, 'ServiceCategory')
            self.ServiceCategory = ServiceCategory_
            # validate type ServiceCategoryType
            self.validate_ServiceCategoryType(self.ServiceCategory)
        elif nodeName_ == 'ServiceType':
            ServiceType_ = child_.text
            ServiceType_ = self.gds_validate_string(ServiceType_, node, 'ServiceType')
            self.ServiceType = ServiceType_
            # validate type ServiceType
            self.validate_ServiceType(self.ServiceType)
        elif nodeName_ == 'CountryRelationship':
            CountryRelationship_ = child_.text
            CountryRelationship_ = self.gds_validate_string(CountryRelationship_, node, 'CountryRelationship')
            self.CountryRelationship = CountryRelationship_
            # validate type CountryRelationshipType
            self.validate_CountryRelationshipType(self.CountryRelationship)
        elif nodeName_ == 'NormalLatestDropOffDetails':
            obj_ = LatestDropOffDetail.factory()
            obj_.build(child_)
            self.NormalLatestDropOffDetails.append(obj_)
            obj_.original_tagname_ = 'NormalLatestDropOffDetails'
        elif nodeName_ == 'ExceptionalLatestDropOffDetails':
            obj_ = LatestDropOffDetail.factory()
            obj_.build(child_)
            self.ExceptionalLatestDropOffDetails.append(obj_)
            obj_.original_tagname_ = 'ExceptionalLatestDropOffDetails'
        elif nodeName_ == 'EffectiveLatestDropOffDetails':
            obj_ = LatestDropOffDetail.factory()
            obj_.build(child_)
            self.EffectiveLatestDropOffDetails = obj_
            obj_.original_tagname_ = 'EffectiveLatestDropOffDetails'
        elif nodeName_ == 'ShippingHolidays':
            obj_ = ShippingHoliday.factory()
            obj_.build(child_)
            self.ShippingHolidays.append(obj_)
            obj_.original_tagname_ = 'ShippingHolidays'
# end class CarrierDetail


class ClearanceCountryDetail(GeneratedsSuper):
    """Specifies the special services supported at the clearance location
    for an individual destination country."""
    subclass = None
    superclass = None
    def __init__(self, ClearanceCountry=None, SpecialServicesSupported=None):
        self.original_tagname_ = None
        self.ClearanceCountry = ClearanceCountry
        if SpecialServicesSupported is None:
            self.SpecialServicesSupported = []
        else:
            self.SpecialServicesSupported = SpecialServicesSupported
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClearanceCountryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClearanceCountryDetail.subclass:
            return ClearanceCountryDetail.subclass(*args_, **kwargs_)
        else:
            return ClearanceCountryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClearanceCountry(self): return self.ClearanceCountry
    def set_ClearanceCountry(self, ClearanceCountry): self.ClearanceCountry = ClearanceCountry
    def get_SpecialServicesSupported(self): return self.SpecialServicesSupported
    def set_SpecialServicesSupported(self, SpecialServicesSupported): self.SpecialServicesSupported = SpecialServicesSupported
    def add_SpecialServicesSupported(self, value): self.SpecialServicesSupported.append(value)
    def insert_SpecialServicesSupported_at(self, index, value): self.SpecialServicesSupported.insert(index, value)
    def replace_SpecialServicesSupported_at(self, index, value): self.SpecialServicesSupported[index] = value
    def validate_PackageSpecialServiceType(self, value):
        # Validate type PackageSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ALCOHOL', 'APPOINTMENT_DELIVERY', 'BATTERY', 'COD', 'DANGEROUS_GOODS', 'DRY_ICE', 'NON_STANDARD_CONTAINER', 'PIECE_COUNT_VERIFICATION', 'PRIORITY_ALERT', 'SIGNATURE_OPTION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackageSpecialServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ClearanceCountry is not None or
            self.SpecialServicesSupported
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ClearanceCountryDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClearanceCountryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClearanceCountryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ClearanceCountryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClearanceCountryDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClearanceCountryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClearanceCountry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ClearanceCountry>%s</ns:ClearanceCountry>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceCountry), input_name='ClearanceCountry')), eol_))
        for SpecialServicesSupported_ in self.SpecialServicesSupported:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SpecialServicesSupported>%s</ns:SpecialServicesSupported>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SpecialServicesSupported_), input_name='SpecialServicesSupported')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClearanceCountry':
            ClearanceCountry_ = child_.text
            ClearanceCountry_ = self.gds_validate_string(ClearanceCountry_, node, 'ClearanceCountry')
            self.ClearanceCountry = ClearanceCountry_
        elif nodeName_ == 'SpecialServicesSupported':
            SpecialServicesSupported_ = child_.text
            SpecialServicesSupported_ = self.gds_validate_string(SpecialServicesSupported_, node, 'SpecialServicesSupported')
            self.SpecialServicesSupported.append(SpecialServicesSupported_)
            # validate type PackageSpecialServiceType
            self.validate_PackageSpecialServiceType(self.SpecialServicesSupported[-1])
# end class ClearanceCountryDetail


class ClearanceLocationDetail(GeneratedsSuper):
    """Specifies the details about the countries supported by this
    location."""
    subclass = None
    superclass = None
    def __init__(self, ServicesSupported=None, ConsolidationType=None, ClearanceLocationType=None, SpecialServicesSupported=None, ClearanceCountries=None, ClearanceRoutingCode=None):
        self.original_tagname_ = None
        if ServicesSupported is None:
            self.ServicesSupported = []
        else:
            self.ServicesSupported = ServicesSupported
        self.ConsolidationType = ConsolidationType
        self.validate_ConsolidationType(self.ConsolidationType)
        self.ClearanceLocationType = ClearanceLocationType
        self.validate_DistributionClearanceType(self.ClearanceLocationType)
        if SpecialServicesSupported is None:
            self.SpecialServicesSupported = []
        else:
            self.SpecialServicesSupported = SpecialServicesSupported
        if ClearanceCountries is None:
            self.ClearanceCountries = []
        else:
            self.ClearanceCountries = ClearanceCountries
        self.ClearanceRoutingCode = ClearanceRoutingCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClearanceLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClearanceLocationDetail.subclass:
            return ClearanceLocationDetail.subclass(*args_, **kwargs_)
        else:
            return ClearanceLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServicesSupported(self): return self.ServicesSupported
    def set_ServicesSupported(self, ServicesSupported): self.ServicesSupported = ServicesSupported
    def add_ServicesSupported(self, value): self.ServicesSupported.append(value)
    def insert_ServicesSupported_at(self, index, value): self.ServicesSupported.insert(index, value)
    def replace_ServicesSupported_at(self, index, value): self.ServicesSupported[index] = value
    def get_ConsolidationType(self): return self.ConsolidationType
    def set_ConsolidationType(self, ConsolidationType): self.ConsolidationType = ConsolidationType
    def get_ClearanceLocationType(self): return self.ClearanceLocationType
    def set_ClearanceLocationType(self, ClearanceLocationType): self.ClearanceLocationType = ClearanceLocationType
    def get_SpecialServicesSupported(self): return self.SpecialServicesSupported
    def set_SpecialServicesSupported(self, SpecialServicesSupported): self.SpecialServicesSupported = SpecialServicesSupported
    def add_SpecialServicesSupported(self, value): self.SpecialServicesSupported.append(value)
    def insert_SpecialServicesSupported_at(self, index, value): self.SpecialServicesSupported.insert(index, value)
    def replace_SpecialServicesSupported_at(self, index, value): self.SpecialServicesSupported[index] = value
    def get_ClearanceCountries(self): return self.ClearanceCountries
    def set_ClearanceCountries(self, ClearanceCountries): self.ClearanceCountries = ClearanceCountries
    def add_ClearanceCountries(self, value): self.ClearanceCountries.append(value)
    def insert_ClearanceCountries_at(self, index, value): self.ClearanceCountries.insert(index, value)
    def replace_ClearanceCountries_at(self, index, value): self.ClearanceCountries[index] = value
    def get_ClearanceRoutingCode(self): return self.ClearanceRoutingCode
    def set_ClearanceRoutingCode(self, ClearanceRoutingCode): self.ClearanceRoutingCode = ClearanceRoutingCode
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def validate_ConsolidationType(self, value):
        # Validate type ConsolidationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_GROUND_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'TRANSBORDER_DISTRIBUTION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ConsolidationType' % {"value" : value.encode("utf-8")} )
    def validate_DistributionClearanceType(self, value):
        # Validate type DistributionClearanceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DESTINATION_COUNTRY_CLEARANCE', 'SINGLE_POINT_OF_CLEARANCE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DistributionClearanceType' % {"value" : value.encode("utf-8")} )
    def validate_PackageSpecialServiceType(self, value):
        # Validate type PackageSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ALCOHOL', 'APPOINTMENT_DELIVERY', 'BATTERY', 'COD', 'DANGEROUS_GOODS', 'DRY_ICE', 'NON_STANDARD_CONTAINER', 'PIECE_COUNT_VERIFICATION', 'PRIORITY_ALERT', 'SIGNATURE_OPTION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackageSpecialServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServicesSupported or
            self.ConsolidationType is not None or
            self.ClearanceLocationType is not None or
            self.SpecialServicesSupported or
            self.ClearanceCountries or
            self.ClearanceRoutingCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ClearanceLocationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClearanceLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClearanceLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ClearanceLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClearanceLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClearanceLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ServicesSupported_ in self.ServicesSupported:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServicesSupported>%s</ns:ServicesSupported>%s' % (self.gds_encode(self.gds_format_string(quote_xml(ServicesSupported_), input_name='ServicesSupported')), eol_))
        if self.ConsolidationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ConsolidationType>%s</ns:ConsolidationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConsolidationType), input_name='ConsolidationType')), eol_))
        if self.ClearanceLocationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ClearanceLocationType>%s</ns:ClearanceLocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceLocationType), input_name='ClearanceLocationType')), eol_))
        for SpecialServicesSupported_ in self.SpecialServicesSupported:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SpecialServicesSupported>%s</ns:SpecialServicesSupported>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SpecialServicesSupported_), input_name='SpecialServicesSupported')), eol_))
        for ClearanceCountries_ in self.ClearanceCountries:
            ClearanceCountries_.export(outfile, level, namespace_, name_='ClearanceCountries', pretty_print=pretty_print)
        if self.ClearanceRoutingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ClearanceRoutingCode>%s</ns:ClearanceRoutingCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceRoutingCode), input_name='ClearanceRoutingCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServicesSupported':
            ServicesSupported_ = child_.text
            ServicesSupported_ = self.gds_validate_string(ServicesSupported_, node, 'ServicesSupported')
            self.ServicesSupported.append(ServicesSupported_)
            # validate type ServiceType
            self.validate_ServiceType(self.ServicesSupported[-1])
        elif nodeName_ == 'ConsolidationType':
            ConsolidationType_ = child_.text
            ConsolidationType_ = self.gds_validate_string(ConsolidationType_, node, 'ConsolidationType')
            self.ConsolidationType = ConsolidationType_
            # validate type ConsolidationType
            self.validate_ConsolidationType(self.ConsolidationType)
        elif nodeName_ == 'ClearanceLocationType':
            ClearanceLocationType_ = child_.text
            ClearanceLocationType_ = self.gds_validate_string(ClearanceLocationType_, node, 'ClearanceLocationType')
            self.ClearanceLocationType = ClearanceLocationType_
            # validate type DistributionClearanceType
            self.validate_DistributionClearanceType(self.ClearanceLocationType)
        elif nodeName_ == 'SpecialServicesSupported':
            SpecialServicesSupported_ = child_.text
            SpecialServicesSupported_ = self.gds_validate_string(SpecialServicesSupported_, node, 'SpecialServicesSupported')
            self.SpecialServicesSupported.append(SpecialServicesSupported_)
            # validate type PackageSpecialServiceType
            self.validate_PackageSpecialServiceType(self.SpecialServicesSupported[-1])
        elif nodeName_ == 'ClearanceCountries':
            obj_ = ClearanceCountryDetail.factory()
            obj_.build(child_)
            self.ClearanceCountries.append(obj_)
            obj_.original_tagname_ = 'ClearanceCountries'
        elif nodeName_ == 'ClearanceRoutingCode':
            ClearanceRoutingCode_ = child_.text
            ClearanceRoutingCode_ = self.gds_validate_string(ClearanceRoutingCode_, node, 'ClearanceRoutingCode')
            self.ClearanceRoutingCode = ClearanceRoutingCode_
# end class ClearanceLocationDetail


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, MeterInstance=None, IntegratorId=None, Region=None, Localization=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.MeterInstance = MeterInstance
        self.IntegratorId = IntegratorId
        self.Region = Region
        self.validate_ExpressRegionCode(self.Region)
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_MeterInstance(self): return self.MeterInstance
    def set_MeterInstance(self, MeterInstance): self.MeterInstance = MeterInstance
    def get_IntegratorId(self): return self.IntegratorId
    def set_IntegratorId(self, IntegratorId): self.IntegratorId = IntegratorId
    def get_Region(self): return self.Region
    def set_Region(self, Region): self.Region = Region
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def validate_ExpressRegionCode(self, value):
        # Validate type ExpressRegionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['APAC', 'CA', 'EMEA', 'LAC', 'US']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ExpressRegionCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.MeterInstance is not None or
            self.IntegratorId is not None or
            self.Region is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AccountNumber>%s</ns:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.MeterNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MeterNumber>%s</ns:MeterNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), eol_))
        if self.MeterInstance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MeterInstance>%s</ns:MeterInstance>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MeterInstance), input_name='MeterInstance')), eol_))
        if self.IntegratorId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:IntegratorId>%s</ns:IntegratorId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), eol_))
        if self.Region is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Region>%s</ns:Region>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'MeterInstance':
            MeterInstance_ = child_.text
            MeterInstance_ = self.gds_validate_string(MeterInstance_, node, 'MeterInstance')
            self.MeterInstance = MeterInstance_
        elif nodeName_ == 'IntegratorId':
            IntegratorId_ = child_.text
            IntegratorId_ = self.gds_validate_string(IntegratorId_, node, 'IntegratorId')
            self.IntegratorId = IntegratorId_
        elif nodeName_ == 'Region':
            Region_ = child_.text
            Region_ = self.gds_validate_string(Region_, node, 'Region')
            self.Region = Region_
            # validate type ExpressRegionCode
            self.validate_ExpressRegionCode(self.Region)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.ContactId = ContactId
        self.PersonName = PersonName
        self.Title = Title
        self.CompanyName = CompanyName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.PagerNumber = PagerNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactId(self): return self.ContactId
    def set_ContactId(self, ContactId): self.ContactId = ContactId
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self): return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber): self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self): return self.PagerNumber
    def set_PagerNumber(self, PagerNumber): self.PagerNumber = PagerNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Contact', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ContactId>%s</ns:ContactId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContactId), input_name='ContactId')), eol_))
        if self.PersonName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonName>%s</ns:PersonName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), eol_))
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Title>%s</ns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CompanyName>%s</ns:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneExtension>%s</ns:PhoneExtension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), eol_))
        if self.TollFreePhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TollFreePhoneNumber>%s</ns:TollFreePhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), eol_))
        if self.PagerNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagerNumber>%s</ns:PagerNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), eol_))
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:FaxNumber>%s</ns:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EMailAddress>%s</ns:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactId':
            ContactId_ = child_.text
            ContactId_ = self.gds_validate_string(ContactId_, node, 'ContactId')
            self.ContactId = ContactId_
        elif nodeName_ == 'PersonName':
            PersonName_ = child_.text
            PersonName_ = self.gds_validate_string(PersonName_, node, 'PersonName')
            self.PersonName = PersonName_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
        elif nodeName_ == 'TollFreePhoneNumber':
            TollFreePhoneNumber_ = child_.text
            TollFreePhoneNumber_ = self.gds_validate_string(TollFreePhoneNumber_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = TollFreePhoneNumber_
        elif nodeName_ == 'PagerNumber':
            PagerNumber_ = child_.text
            PagerNumber_ = self.gds_validate_string(PagerNumber_, node, 'PagerNumber')
            self.PagerNumber = PagerNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class Contact


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.original_tagname_ = None
        self.Value = Value
        self.Units = Units
        self.validate_DistanceUnits(self.Units)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Distance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['KM', 'MI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DistanceUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Distance', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Distance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Distance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Distance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Distance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type DistanceUnits
            self.validate_DistanceUnits(self.Units)
# end class Distance


class DistanceAndLocationDetail(GeneratedsSuper):
    """Specifies the location details and other information relevant to the
    location that is derived from the inputs provided in the
    request."""
    subclass = None
    superclass = None
    def __init__(self, Distance=None, ReservationAvailabilityDetail=None, SupportedRedirectToHoldServices=None, LocationDetail=None):
        self.original_tagname_ = None
        self.Distance = Distance
        self.ReservationAvailabilityDetail = ReservationAvailabilityDetail
        if SupportedRedirectToHoldServices is None:
            self.SupportedRedirectToHoldServices = []
        else:
            self.SupportedRedirectToHoldServices = SupportedRedirectToHoldServices
        self.LocationDetail = LocationDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DistanceAndLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DistanceAndLocationDetail.subclass:
            return DistanceAndLocationDetail.subclass(*args_, **kwargs_)
        else:
            return DistanceAndLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Distance(self): return self.Distance
    def set_Distance(self, Distance): self.Distance = Distance
    def get_ReservationAvailabilityDetail(self): return self.ReservationAvailabilityDetail
    def set_ReservationAvailabilityDetail(self, ReservationAvailabilityDetail): self.ReservationAvailabilityDetail = ReservationAvailabilityDetail
    def get_SupportedRedirectToHoldServices(self): return self.SupportedRedirectToHoldServices
    def set_SupportedRedirectToHoldServices(self, SupportedRedirectToHoldServices): self.SupportedRedirectToHoldServices = SupportedRedirectToHoldServices
    def add_SupportedRedirectToHoldServices(self, value): self.SupportedRedirectToHoldServices.append(value)
    def insert_SupportedRedirectToHoldServices_at(self, index, value): self.SupportedRedirectToHoldServices.insert(index, value)
    def replace_SupportedRedirectToHoldServices_at(self, index, value): self.SupportedRedirectToHoldServices[index] = value
    def get_LocationDetail(self): return self.LocationDetail
    def set_LocationDetail(self, LocationDetail): self.LocationDetail = LocationDetail
    def validate_SupportedRedirectToHoldServiceType(self, value):
        # Validate type SupportedRedirectToHoldServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_EXPRESS', 'FEDEX_GROUND', 'FEDEX_GROUND_HOME_DELIVERY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SupportedRedirectToHoldServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Distance is not None or
            self.ReservationAvailabilityDetail is not None or
            self.SupportedRedirectToHoldServices or
            self.LocationDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DistanceAndLocationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DistanceAndLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DistanceAndLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DistanceAndLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DistanceAndLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DistanceAndLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Distance is not None:
            self.Distance.export(outfile, level, namespace_, name_='Distance', pretty_print=pretty_print)
        if self.ReservationAvailabilityDetail is not None:
            self.ReservationAvailabilityDetail.export(outfile, level, namespace_, name_='ReservationAvailabilityDetail', pretty_print=pretty_print)
        for SupportedRedirectToHoldServices_ in self.SupportedRedirectToHoldServices:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SupportedRedirectToHoldServices>%s</ns:SupportedRedirectToHoldServices>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SupportedRedirectToHoldServices_), input_name='SupportedRedirectToHoldServices')), eol_))
        if self.LocationDetail is not None:
            self.LocationDetail.export(outfile, level, namespace_, name_='LocationDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Distance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.Distance = obj_
            obj_.original_tagname_ = 'Distance'
        elif nodeName_ == 'ReservationAvailabilityDetail':
            obj_ = ReservationAvailabilityDetail.factory()
            obj_.build(child_)
            self.ReservationAvailabilityDetail = obj_
            obj_.original_tagname_ = 'ReservationAvailabilityDetail'
        elif nodeName_ == 'SupportedRedirectToHoldServices':
            SupportedRedirectToHoldServices_ = child_.text
            SupportedRedirectToHoldServices_ = self.gds_validate_string(SupportedRedirectToHoldServices_, node, 'SupportedRedirectToHoldServices')
            self.SupportedRedirectToHoldServices.append(SupportedRedirectToHoldServices_)
            # validate type SupportedRedirectToHoldServiceType
            self.validate_SupportedRedirectToHoldServiceType(self.SupportedRedirectToHoldServices[-1])
        elif nodeName_ == 'LocationDetail':
            obj_ = LocationDetail.factory()
            obj_.build(child_)
            self.LocationDetail = obj_
            obj_.original_tagname_ = 'LocationDetail'
# end class DistanceAndLocationDetail


class Holiday(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Date=None):
        self.original_tagname_ = None
        self.Name = Name
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Holiday)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Holiday.subclass:
            return Holiday.subclass(*args_, **kwargs_)
        else:
            return Holiday(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Holiday', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Holiday')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Holiday')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Holiday', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Holiday'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Holiday', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Name>%s</ns:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Date>%s</ns:Date>%s' % (self.gds_format_date(self.Date, input_name='Date'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
# end class Holiday


class LatestDropOffDetail(GeneratedsSuper):
    """Specifies the latest time by which a package can be dropped off at a
    FedEx location."""
    subclass = None
    superclass = None
    def __init__(self, DayOfWeek=None, Time=None, Overlays=None):
        self.original_tagname_ = None
        self.DayOfWeek = DayOfWeek
        self.validate_DayOfWeekType(self.DayOfWeek)
        if isinstance(Time, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Time, '%H:%M:%S').time()
        else:
            initvalue_ = Time
        self.Time = initvalue_
        if Overlays is None:
            self.Overlays = []
        else:
            self.Overlays = Overlays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LatestDropOffDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LatestDropOffDetail.subclass:
            return LatestDropOffDetail.subclass(*args_, **kwargs_)
        else:
            return LatestDropOffDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DayOfWeek(self): return self.DayOfWeek
    def set_DayOfWeek(self, DayOfWeek): self.DayOfWeek = DayOfWeek
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_Overlays(self): return self.Overlays
    def set_Overlays(self, Overlays): self.Overlays = Overlays
    def add_Overlays(self, value): self.Overlays.append(value)
    def insert_Overlays_at(self, index, value): self.Overlays.insert(index, value)
    def replace_Overlays_at(self, index, value): self.Overlays[index] = value
    def validate_DayOfWeekType(self, value):
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DayOfWeekType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DayOfWeek is not None or
            self.Time is not None or
            self.Overlays
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LatestDropOffDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LatestDropOffDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LatestDropOffDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LatestDropOffDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LatestDropOffDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LatestDropOffDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DayOfWeek is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DayOfWeek>%s</ns:DayOfWeek>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeek), input_name='DayOfWeek')), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Time>%s</ns:Time>%s' % (self.gds_format_time(self.Time, input_name='Time'), eol_))
        for Overlays_ in self.Overlays:
            Overlays_.export(outfile, level, namespace_, name_='Overlays', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DayOfWeek':
            DayOfWeek_ = child_.text
            DayOfWeek_ = self.gds_validate_string(DayOfWeek_, node, 'DayOfWeek')
            self.DayOfWeek = DayOfWeek_
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.DayOfWeek)
        elif nodeName_ == 'Time':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Time = dval_
        elif nodeName_ == 'Overlays':
            obj_ = LatestDropoffOverlayDetail.factory()
            obj_.build(child_)
            self.Overlays.append(obj_)
            obj_.original_tagname_ = 'Overlays'
# end class LatestDropOffDetail


class LatestDropoffOverlayDetail(GeneratedsSuper):
    """Specifies the time and reason to overlay the last drop off time for
    a carrier at a FedEx location."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Time=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_LatestDropOffOverlayType(self.Type)
        if isinstance(Time, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Time, '%H:%M:%S').time()
        else:
            initvalue_ = Time
        self.Time = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LatestDropoffOverlayDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LatestDropoffOverlayDetail.subclass:
            return LatestDropoffOverlayDetail.subclass(*args_, **kwargs_)
        else:
            return LatestDropoffOverlayDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def validate_LatestDropOffOverlayType(self, value):
        # Validate type LatestDropOffOverlayType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['US_WEST_COAST']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LatestDropOffOverlayType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LatestDropoffOverlayDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LatestDropoffOverlayDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LatestDropoffOverlayDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LatestDropoffOverlayDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LatestDropoffOverlayDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LatestDropoffOverlayDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Time>%s</ns:Time>%s' % (self.gds_format_time(self.Time, input_name='Time'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type LatestDropOffOverlayType
            self.validate_LatestDropOffOverlayType(self.Type)
        elif nodeName_ == 'Time':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Time = dval_
# end class LatestDropoffOverlayDetail


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.original_tagname_ = None
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LanguageCode>%s</ns:LanguageCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), eol_))
        if self.LocaleCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocaleCode>%s</ns:LocaleCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class LocationContactAndAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None, AddressAncillaryDetail=None):
        self.original_tagname_ = None
        self.Contact = Contact
        self.Address = Address
        self.AddressAncillaryDetail = AddressAncillaryDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationContactAndAddress.subclass:
            return LocationContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return LocationContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AddressAncillaryDetail(self): return self.AddressAncillaryDetail
    def set_AddressAncillaryDetail(self, AddressAncillaryDetail): self.AddressAncillaryDetail = AddressAncillaryDetail
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None or
            self.AddressAncillaryDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LocationContactAndAddress', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LocationContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LocationContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LocationContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AddressAncillaryDetail is not None:
            self.AddressAncillaryDetail.export(outfile, level, namespace_, name_='AddressAncillaryDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AddressAncillaryDetail':
            obj_ = AddressAncillaryDetail.factory()
            obj_.build(child_)
            self.AddressAncillaryDetail = obj_
            obj_.original_tagname_ = 'AddressAncillaryDetail'
# end class LocationContactAndAddress


class LocationDetail(GeneratedsSuper):
    """Describes an individual location providing a set of customer service
    features."""
    subclass = None
    superclass = None
    def __init__(self, LocationId=None, StoreNumber=None, LocationContactAndAddress=None, SpecialInstructions=None, GeographicCoordinates=None, TimeZoneOffset=None, LocationType=None, Attributes=None, ClearanceLocationDetail=None, ServicingLocationDetails=None, AcceptedCurrency=None, LocationHolidays=None, MapUrl=None, EntityId=None, NormalHours=None, ExceptionalHours=None, HoursForEffectiveDate=None, CarrierDetails=None):
        self.original_tagname_ = None
        self.LocationId = LocationId
        self.StoreNumber = StoreNumber
        self.LocationContactAndAddress = LocationContactAndAddress
        self.SpecialInstructions = SpecialInstructions
        self.GeographicCoordinates = GeographicCoordinates
        self.TimeZoneOffset = TimeZoneOffset
        self.LocationType = LocationType
        self.validate_FedExLocationType(self.LocationType)
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.ClearanceLocationDetail = ClearanceLocationDetail
        if ServicingLocationDetails is None:
            self.ServicingLocationDetails = []
        else:
            self.ServicingLocationDetails = ServicingLocationDetails
        self.AcceptedCurrency = AcceptedCurrency
        if LocationHolidays is None:
            self.LocationHolidays = []
        else:
            self.LocationHolidays = LocationHolidays
        self.MapUrl = MapUrl
        self.EntityId = EntityId
        if NormalHours is None:
            self.NormalHours = []
        else:
            self.NormalHours = NormalHours
        if ExceptionalHours is None:
            self.ExceptionalHours = []
        else:
            self.ExceptionalHours = ExceptionalHours
        if HoursForEffectiveDate is None:
            self.HoursForEffectiveDate = []
        else:
            self.HoursForEffectiveDate = HoursForEffectiveDate
        if CarrierDetails is None:
            self.CarrierDetails = []
        else:
            self.CarrierDetails = CarrierDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationDetail.subclass:
            return LocationDetail.subclass(*args_, **kwargs_)
        else:
            return LocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LocationId(self): return self.LocationId
    def set_LocationId(self, LocationId): self.LocationId = LocationId
    def get_StoreNumber(self): return self.StoreNumber
    def set_StoreNumber(self, StoreNumber): self.StoreNumber = StoreNumber
    def get_LocationContactAndAddress(self): return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress): self.LocationContactAndAddress = LocationContactAndAddress
    def get_SpecialInstructions(self): return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions): self.SpecialInstructions = SpecialInstructions
    def get_GeographicCoordinates(self): return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates): self.GeographicCoordinates = GeographicCoordinates
    def get_TimeZoneOffset(self): return self.TimeZoneOffset
    def set_TimeZoneOffset(self, TimeZoneOffset): self.TimeZoneOffset = TimeZoneOffset
    def get_LocationType(self): return self.LocationType
    def set_LocationType(self, LocationType): self.LocationType = LocationType
    def get_Attributes(self): return self.Attributes
    def set_Attributes(self, Attributes): self.Attributes = Attributes
    def add_Attributes(self, value): self.Attributes.append(value)
    def insert_Attributes_at(self, index, value): self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value): self.Attributes[index] = value
    def get_ClearanceLocationDetail(self): return self.ClearanceLocationDetail
    def set_ClearanceLocationDetail(self, ClearanceLocationDetail): self.ClearanceLocationDetail = ClearanceLocationDetail
    def get_ServicingLocationDetails(self): return self.ServicingLocationDetails
    def set_ServicingLocationDetails(self, ServicingLocationDetails): self.ServicingLocationDetails = ServicingLocationDetails
    def add_ServicingLocationDetails(self, value): self.ServicingLocationDetails.append(value)
    def insert_ServicingLocationDetails_at(self, index, value): self.ServicingLocationDetails.insert(index, value)
    def replace_ServicingLocationDetails_at(self, index, value): self.ServicingLocationDetails[index] = value
    def get_AcceptedCurrency(self): return self.AcceptedCurrency
    def set_AcceptedCurrency(self, AcceptedCurrency): self.AcceptedCurrency = AcceptedCurrency
    def get_LocationHolidays(self): return self.LocationHolidays
    def set_LocationHolidays(self, LocationHolidays): self.LocationHolidays = LocationHolidays
    def add_LocationHolidays(self, value): self.LocationHolidays.append(value)
    def insert_LocationHolidays_at(self, index, value): self.LocationHolidays.insert(index, value)
    def replace_LocationHolidays_at(self, index, value): self.LocationHolidays[index] = value
    def get_MapUrl(self): return self.MapUrl
    def set_MapUrl(self, MapUrl): self.MapUrl = MapUrl
    def get_EntityId(self): return self.EntityId
    def set_EntityId(self, EntityId): self.EntityId = EntityId
    def get_NormalHours(self): return self.NormalHours
    def set_NormalHours(self, NormalHours): self.NormalHours = NormalHours
    def add_NormalHours(self, value): self.NormalHours.append(value)
    def insert_NormalHours_at(self, index, value): self.NormalHours.insert(index, value)
    def replace_NormalHours_at(self, index, value): self.NormalHours[index] = value
    def get_ExceptionalHours(self): return self.ExceptionalHours
    def set_ExceptionalHours(self, ExceptionalHours): self.ExceptionalHours = ExceptionalHours
    def add_ExceptionalHours(self, value): self.ExceptionalHours.append(value)
    def insert_ExceptionalHours_at(self, index, value): self.ExceptionalHours.insert(index, value)
    def replace_ExceptionalHours_at(self, index, value): self.ExceptionalHours[index] = value
    def get_HoursForEffectiveDate(self): return self.HoursForEffectiveDate
    def set_HoursForEffectiveDate(self, HoursForEffectiveDate): self.HoursForEffectiveDate = HoursForEffectiveDate
    def add_HoursForEffectiveDate(self, value): self.HoursForEffectiveDate.append(value)
    def insert_HoursForEffectiveDate_at(self, index, value): self.HoursForEffectiveDate.insert(index, value)
    def replace_HoursForEffectiveDate_at(self, index, value): self.HoursForEffectiveDate[index] = value
    def get_CarrierDetails(self): return self.CarrierDetails
    def set_CarrierDetails(self, CarrierDetails): self.CarrierDetails = CarrierDetails
    def add_CarrierDetails(self, value): self.CarrierDetails.append(value)
    def insert_CarrierDetails_at(self, index, value): self.CarrierDetails.insert(index, value)
    def replace_CarrierDetails_at(self, index, value): self.CarrierDetails[index] = value
    def validate_FedExLocationType(self, value):
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SMART_POST_HUB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FedExLocationType' % {"value" : value.encode("utf-8")} )
    def validate_LocationAttributesType(self, value):
        # Validate type LocationAttributesType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCEPTS_CASH', 'ALREADY_OPEN', 'CLEARANCE_SERVICES', 'COPY_AND_PRINT_SERVICES', 'DANGEROUS_GOODS_SERVICES', 'DIRECT_MAIL_SERVICES', 'DOMESTIC_SHIPPING_SERVICES', 'DROP_BOX', 'EXPRESS_FREIGHT_DROPOFFS', 'EXPRESS_PARCEL_DROPOFFS', 'FEDEX_FREIGHT_DROPOFFS', 'GROUND_DROPOFFS', 'GROUND_HOME_DELIVERY_DROPOFFS', 'INTERNATIONAL_SHIPPING_SERVICES', 'LOCATION_IS_IN_AIRPORT', 'NOTARY_SERVICES', 'OBSERVES_DAY_LIGHT_SAVING_TIMES', 'OPEN_TWENTY_FOUR_HOURS', 'PACKAGING_SUPPLIES', 'PACK_AND_SHIP', 'PASSPORT_PHOTO_SERVICES', 'RETURNS_SERVICES', 'SAME_DAY_CITY_DROPOFFS', 'SAME_DAY_DROPOFFS', 'SATURDAY_DROPOFFS', 'SATURDAY_EXPRESS_HOLD_AT_LOCATION', 'SHIP_AND_GET', 'SIGNS_AND_BANNERS_SERVICE', 'SONY_PICTURE_STATION', 'VIDEO_CONFERENCING', 'WEEKDAY_EXPRESS_HOLD_AT_LOCATION', 'WEEKDAY_GROUND_HOLD_AT_LOCATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationAttributesType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LocationId is not None or
            self.StoreNumber is not None or
            self.LocationContactAndAddress is not None or
            self.SpecialInstructions is not None or
            self.GeographicCoordinates is not None or
            self.TimeZoneOffset is not None or
            self.LocationType is not None or
            self.Attributes or
            self.ClearanceLocationDetail is not None or
            self.ServicingLocationDetails or
            self.AcceptedCurrency is not None or
            self.LocationHolidays or
            self.MapUrl is not None or
            self.EntityId is not None or
            self.NormalHours or
            self.ExceptionalHours or
            self.HoursForEffectiveDate or
            self.CarrierDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LocationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationId>%s</ns:LocationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), eol_))
        if self.StoreNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StoreNumber>%s</ns:StoreNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StoreNumber), input_name='StoreNumber')), eol_))
        if self.LocationContactAndAddress is not None:
            self.LocationContactAndAddress.export(outfile, level, namespace_, name_='LocationContactAndAddress', pretty_print=pretty_print)
        if self.SpecialInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SpecialInstructions>%s</ns:SpecialInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), eol_))
        if self.GeographicCoordinates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GeographicCoordinates>%s</ns:GeographicCoordinates>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), eol_))
        if self.TimeZoneOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TimeZoneOffset>%s</ns:TimeZoneOffset>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TimeZoneOffset), input_name='TimeZoneOffset')), eol_))
        if self.LocationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationType>%s</ns:LocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationType), input_name='LocationType')), eol_))
        for Attributes_ in self.Attributes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Attributes>%s</ns:Attributes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), eol_))
        if self.ClearanceLocationDetail is not None:
            self.ClearanceLocationDetail.export(outfile, level, namespace_, name_='ClearanceLocationDetail', pretty_print=pretty_print)
        for ServicingLocationDetails_ in self.ServicingLocationDetails:
            ServicingLocationDetails_.export(outfile, level, namespace_, name_='ServicingLocationDetails', pretty_print=pretty_print)
        if self.AcceptedCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AcceptedCurrency>%s</ns:AcceptedCurrency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AcceptedCurrency), input_name='AcceptedCurrency')), eol_))
        for LocationHolidays_ in self.LocationHolidays:
            LocationHolidays_.export(outfile, level, namespace_, name_='LocationHolidays', pretty_print=pretty_print)
        if self.MapUrl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MapUrl>%s</ns:MapUrl>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MapUrl), input_name='MapUrl')), eol_))
        if self.EntityId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EntityId>%s</ns:EntityId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EntityId), input_name='EntityId')), eol_))
        for NormalHours_ in self.NormalHours:
            NormalHours_.export(outfile, level, namespace_, name_='NormalHours', pretty_print=pretty_print)
        for ExceptionalHours_ in self.ExceptionalHours:
            ExceptionalHours_.export(outfile, level, namespace_, name_='ExceptionalHours', pretty_print=pretty_print)
        for HoursForEffectiveDate_ in self.HoursForEffectiveDate:
            HoursForEffectiveDate_.export(outfile, level, namespace_, name_='HoursForEffectiveDate', pretty_print=pretty_print)
        for CarrierDetails_ in self.CarrierDetails:
            CarrierDetails_.export(outfile, level, namespace_, name_='CarrierDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LocationId':
            LocationId_ = child_.text
            LocationId_ = self.gds_validate_string(LocationId_, node, 'LocationId')
            self.LocationId = LocationId_
        elif nodeName_ == 'StoreNumber':
            StoreNumber_ = child_.text
            StoreNumber_ = self.gds_validate_string(StoreNumber_, node, 'StoreNumber')
            self.StoreNumber = StoreNumber_
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = LocationContactAndAddress.factory()
            obj_.build(child_)
            self.LocationContactAndAddress = obj_
            obj_.original_tagname_ = 'LocationContactAndAddress'
        elif nodeName_ == 'SpecialInstructions':
            SpecialInstructions_ = child_.text
            SpecialInstructions_ = self.gds_validate_string(SpecialInstructions_, node, 'SpecialInstructions')
            self.SpecialInstructions = SpecialInstructions_
        elif nodeName_ == 'GeographicCoordinates':
            GeographicCoordinates_ = child_.text
            GeographicCoordinates_ = self.gds_validate_string(GeographicCoordinates_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = GeographicCoordinates_
        elif nodeName_ == 'TimeZoneOffset':
            TimeZoneOffset_ = child_.text
            TimeZoneOffset_ = self.gds_validate_string(TimeZoneOffset_, node, 'TimeZoneOffset')
            self.TimeZoneOffset = TimeZoneOffset_
        elif nodeName_ == 'LocationType':
            LocationType_ = child_.text
            LocationType_ = self.gds_validate_string(LocationType_, node, 'LocationType')
            self.LocationType = LocationType_
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.LocationType)
        elif nodeName_ == 'Attributes':
            Attributes_ = child_.text
            Attributes_ = self.gds_validate_string(Attributes_, node, 'Attributes')
            self.Attributes.append(Attributes_)
            # validate type LocationAttributesType
            self.validate_LocationAttributesType(self.Attributes[-1])
        elif nodeName_ == 'ClearanceLocationDetail':
            obj_ = ClearanceLocationDetail.factory()
            obj_.build(child_)
            self.ClearanceLocationDetail = obj_
            obj_.original_tagname_ = 'ClearanceLocationDetail'
        elif nodeName_ == 'ServicingLocationDetails':
            obj_ = LocationIdentificationDetail.factory()
            obj_.build(child_)
            self.ServicingLocationDetails.append(obj_)
            obj_.original_tagname_ = 'ServicingLocationDetails'
        elif nodeName_ == 'AcceptedCurrency':
            AcceptedCurrency_ = child_.text
            AcceptedCurrency_ = self.gds_validate_string(AcceptedCurrency_, node, 'AcceptedCurrency')
            self.AcceptedCurrency = AcceptedCurrency_
        elif nodeName_ == 'LocationHolidays':
            obj_ = Holiday.factory()
            obj_.build(child_)
            self.LocationHolidays.append(obj_)
            obj_.original_tagname_ = 'LocationHolidays'
        elif nodeName_ == 'MapUrl':
            MapUrl_ = child_.text
            MapUrl_ = self.gds_validate_string(MapUrl_, node, 'MapUrl')
            self.MapUrl = MapUrl_
        elif nodeName_ == 'EntityId':
            EntityId_ = child_.text
            EntityId_ = self.gds_validate_string(EntityId_, node, 'EntityId')
            self.EntityId = EntityId_
        elif nodeName_ == 'NormalHours':
            obj_ = LocationHours.factory()
            obj_.build(child_)
            self.NormalHours.append(obj_)
            obj_.original_tagname_ = 'NormalHours'
        elif nodeName_ == 'ExceptionalHours':
            obj_ = LocationHours.factory()
            obj_.build(child_)
            self.ExceptionalHours.append(obj_)
            obj_.original_tagname_ = 'ExceptionalHours'
        elif nodeName_ == 'HoursForEffectiveDate':
            obj_ = LocationHours.factory()
            obj_.build(child_)
            self.HoursForEffectiveDate.append(obj_)
            obj_.original_tagname_ = 'HoursForEffectiveDate'
        elif nodeName_ == 'CarrierDetails':
            obj_ = CarrierDetail.factory()
            obj_.build(child_)
            self.CarrierDetails.append(obj_)
            obj_.original_tagname_ = 'CarrierDetails'
# end class LocationDetail


class LocationHours(GeneratedsSuper):
    """Specifies the location hours for a location."""
    subclass = None
    superclass = None
    def __init__(self, DayofWeek=None, OperationalHours=None, Hours=None):
        self.original_tagname_ = None
        self.DayofWeek = DayofWeek
        self.validate_DayOfWeekType(self.DayofWeek)
        self.OperationalHours = OperationalHours
        self.validate_OperationalHoursType(self.OperationalHours)
        if Hours is None:
            self.Hours = []
        else:
            self.Hours = Hours
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationHours)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationHours.subclass:
            return LocationHours.subclass(*args_, **kwargs_)
        else:
            return LocationHours(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DayofWeek(self): return self.DayofWeek
    def set_DayofWeek(self, DayofWeek): self.DayofWeek = DayofWeek
    def get_OperationalHours(self): return self.OperationalHours
    def set_OperationalHours(self, OperationalHours): self.OperationalHours = OperationalHours
    def get_Hours(self): return self.Hours
    def set_Hours(self, Hours): self.Hours = Hours
    def add_Hours(self, value): self.Hours.append(value)
    def insert_Hours_at(self, index, value): self.Hours.insert(index, value)
    def replace_Hours_at(self, index, value): self.Hours[index] = value
    def validate_DayOfWeekType(self, value):
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DayOfWeekType' % {"value" : value.encode("utf-8")} )
    def validate_OperationalHoursType(self, value):
        # Validate type OperationalHoursType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CLOSED_ALL_DAY', 'OPEN_ALL_DAY', 'OPEN_BY_HOURS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OperationalHoursType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DayofWeek is not None or
            self.OperationalHours is not None or
            self.Hours
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LocationHours', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationHours')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationHours')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LocationHours', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LocationHours'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LocationHours', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DayofWeek is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DayofWeek>%s</ns:DayofWeek>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DayofWeek), input_name='DayofWeek')), eol_))
        if self.OperationalHours is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OperationalHours>%s</ns:OperationalHours>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OperationalHours), input_name='OperationalHours')), eol_))
        for Hours_ in self.Hours:
            Hours_.export(outfile, level, namespace_, name_='Hours', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DayofWeek':
            DayofWeek_ = child_.text
            DayofWeek_ = self.gds_validate_string(DayofWeek_, node, 'DayofWeek')
            self.DayofWeek = DayofWeek_
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.DayofWeek)
        elif nodeName_ == 'OperationalHours':
            OperationalHours_ = child_.text
            OperationalHours_ = self.gds_validate_string(OperationalHours_, node, 'OperationalHours')
            self.OperationalHours = OperationalHours_
            # validate type OperationalHoursType
            self.validate_OperationalHoursType(self.OperationalHours)
        elif nodeName_ == 'Hours':
            obj_ = TimeRange.factory()
            obj_.build(child_)
            self.Hours.append(obj_)
            obj_.original_tagname_ = 'Hours'
# end class LocationHours


class LocationIdentificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, Number=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_FedExLocationType(self.Type)
        self.Id = Id
        self.Number = Number
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationIdentificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationIdentificationDetail.subclass:
            return LocationIdentificationDetail.subclass(*args_, **kwargs_)
        else:
            return LocationIdentificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def validate_FedExLocationType(self, value):
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SMART_POST_HUB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FedExLocationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Id is not None or
            self.Number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LocationIdentificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationIdentificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationIdentificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LocationIdentificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LocationIdentificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LocationIdentificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Id>%s</ns:Id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), eol_))
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Number>%s</ns:Number>%s' % (self.gds_format_integer(self.Number, input_name='Number'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.Type)
        elif nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Number':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Number')
            self.Number = ival_
# end class LocationIdentificationDetail


class LocationSortDetail(GeneratedsSuper):
    """Specifies the criterion and order to be used to sort the location
    details."""
    subclass = None
    superclass = None
    def __init__(self, Criterion=None, Order=None):
        self.original_tagname_ = None
        self.Criterion = Criterion
        self.validate_LocationSortCriteriaType(self.Criterion)
        self.Order = Order
        self.validate_LocationSortOrderType(self.Order)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationSortDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationSortDetail.subclass:
            return LocationSortDetail.subclass(*args_, **kwargs_)
        else:
            return LocationSortDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Criterion(self): return self.Criterion
    def set_Criterion(self, Criterion): self.Criterion = Criterion
    def get_Order(self): return self.Order
    def set_Order(self, Order): self.Order = Order
    def validate_LocationSortCriteriaType(self, value):
        # Validate type LocationSortCriteriaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DISTANCE', 'LATEST_EXPRESS_DROPOFF_TIME', 'LATEST_GROUND_DROPOFF_TIME', 'LOCATION_TYPE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationSortCriteriaType' % {"value" : value.encode("utf-8")} )
    def validate_LocationSortOrderType(self, value):
        # Validate type LocationSortOrderType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HIGHEST_TO_LOWEST', 'LOWEST_TO_HIGHEST']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationSortOrderType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Criterion is not None or
            self.Order is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LocationSortDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationSortDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationSortDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LocationSortDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LocationSortDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LocationSortDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Criterion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Criterion>%s</ns:Criterion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Criterion), input_name='Criterion')), eol_))
        if self.Order is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Order>%s</ns:Order>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Order), input_name='Order')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Criterion':
            Criterion_ = child_.text
            Criterion_ = self.gds_validate_string(Criterion_, node, 'Criterion')
            self.Criterion = Criterion_
            # validate type LocationSortCriteriaType
            self.validate_LocationSortCriteriaType(self.Criterion)
        elif nodeName_ == 'Order':
            Order_ = child_.text
            Order_ = self.gds_validate_string(Order_, node, 'Order')
            self.Order = Order_
            # validate type LocationSortOrderType
            self.validate_LocationSortOrderType(self.Order)
# end class LocationSortDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.original_tagname_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value): self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value): self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Severity>%s</ns:Severity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Source>%s</ns:Source>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Code>%s</ns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Message>%s</ns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalizedMessage>%s</ns:LocalizedMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), eol_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.original_tagname_ = None
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Id>%s</ns:Id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class ReservationAvailabilityDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Attributes=None):
        self.original_tagname_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReservationAvailabilityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReservationAvailabilityDetail.subclass:
            return ReservationAvailabilityDetail.subclass(*args_, **kwargs_)
        else:
            return ReservationAvailabilityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Attributes(self): return self.Attributes
    def set_Attributes(self, Attributes): self.Attributes = Attributes
    def add_Attributes(self, value): self.Attributes.append(value)
    def insert_Attributes_at(self, index, value): self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value): self.Attributes[index] = value
    def validate_ReservationAttributesType(self, value):
        # Validate type ReservationAttributesType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RESERVATION_AVAILABLE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReservationAttributesType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Attributes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ReservationAvailabilityDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReservationAvailabilityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReservationAvailabilityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ReservationAvailabilityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReservationAvailabilityDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReservationAvailabilityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Attributes_ in self.Attributes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Attributes>%s</ns:Attributes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Attributes':
            Attributes_ = child_.text
            Attributes_ = self.gds_validate_string(Attributes_, node, 'Attributes')
            self.Attributes.append(Attributes_)
            # validate type ReservationAttributesType
            self.validate_ReservationAttributesType(self.Attributes[-1])
# end class ReservationAvailabilityDetail


class SearchLocationConstraints(GeneratedsSuper):
    """Specifies additional constraints on the attributes of the locations
    being searched."""
    subclass = None
    superclass = None
    def __init__(self, RadiusDistance=None, ExpressDropOffTimeNeeded=None, ResultsFilters=None, SupportedRedirectToHoldServices=None, RequiredLocationAttributes=None, ResultsToSkip=None, ResultsRequested=None, LocationContentOptions=None, LocationTypesToInclude=None):
        self.original_tagname_ = None
        self.RadiusDistance = RadiusDistance
        if isinstance(ExpressDropOffTimeNeeded, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpressDropOffTimeNeeded, '%H:%M:%S').time()
        else:
            initvalue_ = ExpressDropOffTimeNeeded
        self.ExpressDropOffTimeNeeded = initvalue_
        if ResultsFilters is None:
            self.ResultsFilters = []
        else:
            self.ResultsFilters = ResultsFilters
        if SupportedRedirectToHoldServices is None:
            self.SupportedRedirectToHoldServices = []
        else:
            self.SupportedRedirectToHoldServices = SupportedRedirectToHoldServices
        if RequiredLocationAttributes is None:
            self.RequiredLocationAttributes = []
        else:
            self.RequiredLocationAttributes = RequiredLocationAttributes
        self.ResultsToSkip = ResultsToSkip
        self.ResultsRequested = ResultsRequested
        if LocationContentOptions is None:
            self.LocationContentOptions = []
        else:
            self.LocationContentOptions = LocationContentOptions
        if LocationTypesToInclude is None:
            self.LocationTypesToInclude = []
        else:
            self.LocationTypesToInclude = LocationTypesToInclude
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchLocationConstraints)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchLocationConstraints.subclass:
            return SearchLocationConstraints.subclass(*args_, **kwargs_)
        else:
            return SearchLocationConstraints(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RadiusDistance(self): return self.RadiusDistance
    def set_RadiusDistance(self, RadiusDistance): self.RadiusDistance = RadiusDistance
    def get_ExpressDropOffTimeNeeded(self): return self.ExpressDropOffTimeNeeded
    def set_ExpressDropOffTimeNeeded(self, ExpressDropOffTimeNeeded): self.ExpressDropOffTimeNeeded = ExpressDropOffTimeNeeded
    def get_ResultsFilters(self): return self.ResultsFilters
    def set_ResultsFilters(self, ResultsFilters): self.ResultsFilters = ResultsFilters
    def add_ResultsFilters(self, value): self.ResultsFilters.append(value)
    def insert_ResultsFilters_at(self, index, value): self.ResultsFilters.insert(index, value)
    def replace_ResultsFilters_at(self, index, value): self.ResultsFilters[index] = value
    def get_SupportedRedirectToHoldServices(self): return self.SupportedRedirectToHoldServices
    def set_SupportedRedirectToHoldServices(self, SupportedRedirectToHoldServices): self.SupportedRedirectToHoldServices = SupportedRedirectToHoldServices
    def add_SupportedRedirectToHoldServices(self, value): self.SupportedRedirectToHoldServices.append(value)
    def insert_SupportedRedirectToHoldServices_at(self, index, value): self.SupportedRedirectToHoldServices.insert(index, value)
    def replace_SupportedRedirectToHoldServices_at(self, index, value): self.SupportedRedirectToHoldServices[index] = value
    def get_RequiredLocationAttributes(self): return self.RequiredLocationAttributes
    def set_RequiredLocationAttributes(self, RequiredLocationAttributes): self.RequiredLocationAttributes = RequiredLocationAttributes
    def add_RequiredLocationAttributes(self, value): self.RequiredLocationAttributes.append(value)
    def insert_RequiredLocationAttributes_at(self, index, value): self.RequiredLocationAttributes.insert(index, value)
    def replace_RequiredLocationAttributes_at(self, index, value): self.RequiredLocationAttributes[index] = value
    def get_ResultsToSkip(self): return self.ResultsToSkip
    def set_ResultsToSkip(self, ResultsToSkip): self.ResultsToSkip = ResultsToSkip
    def get_ResultsRequested(self): return self.ResultsRequested
    def set_ResultsRequested(self, ResultsRequested): self.ResultsRequested = ResultsRequested
    def get_LocationContentOptions(self): return self.LocationContentOptions
    def set_LocationContentOptions(self, LocationContentOptions): self.LocationContentOptions = LocationContentOptions
    def add_LocationContentOptions(self, value): self.LocationContentOptions.append(value)
    def insert_LocationContentOptions_at(self, index, value): self.LocationContentOptions.insert(index, value)
    def replace_LocationContentOptions_at(self, index, value): self.LocationContentOptions[index] = value
    def get_LocationTypesToInclude(self): return self.LocationTypesToInclude
    def set_LocationTypesToInclude(self, LocationTypesToInclude): self.LocationTypesToInclude = LocationTypesToInclude
    def add_LocationTypesToInclude(self, value): self.LocationTypesToInclude.append(value)
    def insert_LocationTypesToInclude_at(self, index, value): self.LocationTypesToInclude.insert(index, value)
    def replace_LocationTypesToInclude_at(self, index, value): self.LocationTypesToInclude[index] = value
    def validate_LocationSearchFilterType(self, value):
        # Validate type LocationSearchFilterType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EXCLUDE_LOCATIONS_OUTSIDE_COUNTRY', 'EXCLUDE_LOCATIONS_OUTSIDE_STATE_OR_PROVINCE', 'EXCLUDE_UNAVAILABLE_LOCATIONS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationSearchFilterType' % {"value" : value.encode("utf-8")} )
    def validate_SupportedRedirectToHoldServiceType(self, value):
        # Validate type SupportedRedirectToHoldServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_EXPRESS', 'FEDEX_GROUND', 'FEDEX_GROUND_HOME_DELIVERY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SupportedRedirectToHoldServiceType' % {"value" : value.encode("utf-8")} )
    def validate_LocationAttributesType(self, value):
        # Validate type LocationAttributesType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCEPTS_CASH', 'ALREADY_OPEN', 'CLEARANCE_SERVICES', 'COPY_AND_PRINT_SERVICES', 'DANGEROUS_GOODS_SERVICES', 'DIRECT_MAIL_SERVICES', 'DOMESTIC_SHIPPING_SERVICES', 'DROP_BOX', 'EXPRESS_FREIGHT_DROPOFFS', 'EXPRESS_PARCEL_DROPOFFS', 'FEDEX_FREIGHT_DROPOFFS', 'GROUND_DROPOFFS', 'GROUND_HOME_DELIVERY_DROPOFFS', 'INTERNATIONAL_SHIPPING_SERVICES', 'LOCATION_IS_IN_AIRPORT', 'NOTARY_SERVICES', 'OBSERVES_DAY_LIGHT_SAVING_TIMES', 'OPEN_TWENTY_FOUR_HOURS', 'PACKAGING_SUPPLIES', 'PACK_AND_SHIP', 'PASSPORT_PHOTO_SERVICES', 'RETURNS_SERVICES', 'SAME_DAY_CITY_DROPOFFS', 'SAME_DAY_DROPOFFS', 'SATURDAY_DROPOFFS', 'SATURDAY_EXPRESS_HOLD_AT_LOCATION', 'SHIP_AND_GET', 'SIGNS_AND_BANNERS_SERVICE', 'SONY_PICTURE_STATION', 'VIDEO_CONFERENCING', 'WEEKDAY_EXPRESS_HOLD_AT_LOCATION', 'WEEKDAY_GROUND_HOLD_AT_LOCATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationAttributesType' % {"value" : value.encode("utf-8")} )
    def validate_LocationContentOptionType(self, value):
        # Validate type LocationContentOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HOLIDAYS', 'LOCATION_DROPOFF_TIMES', 'MAP_URL', 'TIMEZONE_OFFSET']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationContentOptionType' % {"value" : value.encode("utf-8")} )
    def validate_FedExLocationType(self, value):
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SMART_POST_HUB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FedExLocationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.RadiusDistance is not None or
            self.ExpressDropOffTimeNeeded is not None or
            self.ResultsFilters or
            self.SupportedRedirectToHoldServices or
            self.RequiredLocationAttributes or
            self.ResultsToSkip is not None or
            self.ResultsRequested is not None or
            self.LocationContentOptions or
            self.LocationTypesToInclude
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SearchLocationConstraints', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchLocationConstraints')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SearchLocationConstraints')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SearchLocationConstraints', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SearchLocationConstraints'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SearchLocationConstraints', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RadiusDistance is not None:
            self.RadiusDistance.export(outfile, level, namespace_, name_='RadiusDistance', pretty_print=pretty_print)
        if self.ExpressDropOffTimeNeeded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ExpressDropOffTimeNeeded>%s</ns:ExpressDropOffTimeNeeded>%s' % (self.gds_format_time(self.ExpressDropOffTimeNeeded, input_name='ExpressDropOffTimeNeeded'), eol_))
        for ResultsFilters_ in self.ResultsFilters:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ResultsFilters>%s</ns:ResultsFilters>%s' % (self.gds_encode(self.gds_format_string(quote_xml(ResultsFilters_), input_name='ResultsFilters')), eol_))
        for SupportedRedirectToHoldServices_ in self.SupportedRedirectToHoldServices:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SupportedRedirectToHoldServices>%s</ns:SupportedRedirectToHoldServices>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SupportedRedirectToHoldServices_), input_name='SupportedRedirectToHoldServices')), eol_))
        for RequiredLocationAttributes_ in self.RequiredLocationAttributes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RequiredLocationAttributes>%s</ns:RequiredLocationAttributes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(RequiredLocationAttributes_), input_name='RequiredLocationAttributes')), eol_))
        if self.ResultsToSkip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ResultsToSkip>%s</ns:ResultsToSkip>%s' % (self.gds_format_integer(self.ResultsToSkip, input_name='ResultsToSkip'), eol_))
        if self.ResultsRequested is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ResultsRequested>%s</ns:ResultsRequested>%s' % (self.gds_format_integer(self.ResultsRequested, input_name='ResultsRequested'), eol_))
        for LocationContentOptions_ in self.LocationContentOptions:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationContentOptions>%s</ns:LocationContentOptions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(LocationContentOptions_), input_name='LocationContentOptions')), eol_))
        for LocationTypesToInclude_ in self.LocationTypesToInclude:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationTypesToInclude>%s</ns:LocationTypesToInclude>%s' % (self.gds_encode(self.gds_format_string(quote_xml(LocationTypesToInclude_), input_name='LocationTypesToInclude')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RadiusDistance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.RadiusDistance = obj_
            obj_.original_tagname_ = 'RadiusDistance'
        elif nodeName_ == 'ExpressDropOffTimeNeeded':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.ExpressDropOffTimeNeeded = dval_
        elif nodeName_ == 'ResultsFilters':
            ResultsFilters_ = child_.text
            ResultsFilters_ = self.gds_validate_string(ResultsFilters_, node, 'ResultsFilters')
            self.ResultsFilters.append(ResultsFilters_)
            # validate type LocationSearchFilterType
            self.validate_LocationSearchFilterType(self.ResultsFilters[-1])
        elif nodeName_ == 'SupportedRedirectToHoldServices':
            SupportedRedirectToHoldServices_ = child_.text
            SupportedRedirectToHoldServices_ = self.gds_validate_string(SupportedRedirectToHoldServices_, node, 'SupportedRedirectToHoldServices')
            self.SupportedRedirectToHoldServices.append(SupportedRedirectToHoldServices_)
            # validate type SupportedRedirectToHoldServiceType
            self.validate_SupportedRedirectToHoldServiceType(self.SupportedRedirectToHoldServices[-1])
        elif nodeName_ == 'RequiredLocationAttributes':
            RequiredLocationAttributes_ = child_.text
            RequiredLocationAttributes_ = self.gds_validate_string(RequiredLocationAttributes_, node, 'RequiredLocationAttributes')
            self.RequiredLocationAttributes.append(RequiredLocationAttributes_)
            # validate type LocationAttributesType
            self.validate_LocationAttributesType(self.RequiredLocationAttributes[-1])
        elif nodeName_ == 'ResultsToSkip':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ResultsToSkip')
            self.ResultsToSkip = ival_
        elif nodeName_ == 'ResultsRequested':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ResultsRequested')
            self.ResultsRequested = ival_
        elif nodeName_ == 'LocationContentOptions':
            LocationContentOptions_ = child_.text
            LocationContentOptions_ = self.gds_validate_string(LocationContentOptions_, node, 'LocationContentOptions')
            self.LocationContentOptions.append(LocationContentOptions_)
            # validate type LocationContentOptionType
            self.validate_LocationContentOptionType(self.LocationContentOptions[-1])
        elif nodeName_ == 'LocationTypesToInclude':
            LocationTypesToInclude_ = child_.text
            LocationTypesToInclude_ = self.gds_validate_string(LocationTypesToInclude_, node, 'LocationTypesToInclude')
            self.LocationTypesToInclude.append(LocationTypesToInclude_)
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.LocationTypesToInclude[-1])
# end class SearchLocationConstraints


class SearchLocationsReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, TotalResultsAvailable=None, ResultsReturned=None, FormattedAddress=None, AddressToLocationRelationships=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.TotalResultsAvailable = TotalResultsAvailable
        self.ResultsReturned = ResultsReturned
        self.FormattedAddress = FormattedAddress
        if AddressToLocationRelationships is None:
            self.AddressToLocationRelationships = []
        else:
            self.AddressToLocationRelationships = AddressToLocationRelationships
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchLocationsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchLocationsReply.subclass:
            return SearchLocationsReply.subclass(*args_, **kwargs_)
        else:
            return SearchLocationsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_TotalResultsAvailable(self): return self.TotalResultsAvailable
    def set_TotalResultsAvailable(self, TotalResultsAvailable): self.TotalResultsAvailable = TotalResultsAvailable
    def get_ResultsReturned(self): return self.ResultsReturned
    def set_ResultsReturned(self, ResultsReturned): self.ResultsReturned = ResultsReturned
    def get_FormattedAddress(self): return self.FormattedAddress
    def set_FormattedAddress(self, FormattedAddress): self.FormattedAddress = FormattedAddress
    def get_AddressToLocationRelationships(self): return self.AddressToLocationRelationships
    def set_AddressToLocationRelationships(self, AddressToLocationRelationships): self.AddressToLocationRelationships = AddressToLocationRelationships
    def add_AddressToLocationRelationships(self, value): self.AddressToLocationRelationships.append(value)
    def insert_AddressToLocationRelationships_at(self, index, value): self.AddressToLocationRelationships.insert(index, value)
    def replace_AddressToLocationRelationships_at(self, index, value): self.AddressToLocationRelationships[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.TotalResultsAvailable is not None or
            self.ResultsReturned is not None or
            self.FormattedAddress is not None or
            self.AddressToLocationRelationships
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SearchLocationsReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchLocationsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SearchLocationsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SearchLocationsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SearchLocationsReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SearchLocationsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.TotalResultsAvailable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TotalResultsAvailable>%s</ns:TotalResultsAvailable>%s' % (self.gds_format_integer(self.TotalResultsAvailable, input_name='TotalResultsAvailable'), eol_))
        if self.ResultsReturned is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ResultsReturned>%s</ns:ResultsReturned>%s' % (self.gds_format_integer(self.ResultsReturned, input_name='ResultsReturned'), eol_))
        if self.FormattedAddress is not None:
            self.FormattedAddress.export(outfile, level, namespace_, name_='FormattedAddress', pretty_print=pretty_print)
        for AddressToLocationRelationships_ in self.AddressToLocationRelationships:
            AddressToLocationRelationships_.export(outfile, level, namespace_, name_='AddressToLocationRelationships', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'TotalResultsAvailable':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalResultsAvailable')
            self.TotalResultsAvailable = ival_
        elif nodeName_ == 'ResultsReturned':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ResultsReturned')
            self.ResultsReturned = ival_
        elif nodeName_ == 'FormattedAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.FormattedAddress = obj_
            obj_.original_tagname_ = 'FormattedAddress'
        elif nodeName_ == 'AddressToLocationRelationships':
            obj_ = AddressToLocationRelationshipDetail.factory()
            obj_.build(child_)
            self.AddressToLocationRelationships.append(obj_)
            obj_.original_tagname_ = 'AddressToLocationRelationships'
# end class SearchLocationsReply


class SearchLocationsRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, EffectiveDate=None, LocationsSearchCriterion=None, UniqueTrackingNumber=None, Address=None, PhoneNumber=None, GeographicCoordinates=None, MultipleMatchesAction=None, SortDetail=None, Constraints=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.LocationsSearchCriterion = LocationsSearchCriterion
        self.validate_LocationsSearchCriteriaType(self.LocationsSearchCriterion)
        self.UniqueTrackingNumber = UniqueTrackingNumber
        self.Address = Address
        self.PhoneNumber = PhoneNumber
        self.GeographicCoordinates = GeographicCoordinates
        self.MultipleMatchesAction = MultipleMatchesAction
        self.validate_MultipleMatchesActionType(self.MultipleMatchesAction)
        self.SortDetail = SortDetail
        self.Constraints = Constraints
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchLocationsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchLocationsRequest.subclass:
            return SearchLocationsRequest.subclass(*args_, **kwargs_)
        else:
            return SearchLocationsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_LocationsSearchCriterion(self): return self.LocationsSearchCriterion
    def set_LocationsSearchCriterion(self, LocationsSearchCriterion): self.LocationsSearchCriterion = LocationsSearchCriterion
    def get_UniqueTrackingNumber(self): return self.UniqueTrackingNumber
    def set_UniqueTrackingNumber(self, UniqueTrackingNumber): self.UniqueTrackingNumber = UniqueTrackingNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_GeographicCoordinates(self): return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates): self.GeographicCoordinates = GeographicCoordinates
    def get_MultipleMatchesAction(self): return self.MultipleMatchesAction
    def set_MultipleMatchesAction(self, MultipleMatchesAction): self.MultipleMatchesAction = MultipleMatchesAction
    def get_SortDetail(self): return self.SortDetail
    def set_SortDetail(self, SortDetail): self.SortDetail = SortDetail
    def get_Constraints(self): return self.Constraints
    def set_Constraints(self, Constraints): self.Constraints = Constraints
    def validate_LocationsSearchCriteriaType(self, value):
        # Validate type LocationsSearchCriteriaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ADDRESS', 'GEOGRAPHIC_COORDINATES', 'PHONE_NUMBER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LocationsSearchCriteriaType' % {"value" : value.encode("utf-8")} )
    def validate_MultipleMatchesActionType(self, value):
        # Validate type MultipleMatchesActionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RETURN_ALL', 'RETURN_ERROR', 'RETURN_FIRST']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MultipleMatchesActionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.EffectiveDate is not None or
            self.LocationsSearchCriterion is not None or
            self.UniqueTrackingNumber is not None or
            self.Address is not None or
            self.PhoneNumber is not None or
            self.GeographicCoordinates is not None or
            self.MultipleMatchesAction is not None or
            self.SortDetail is not None or
            self.Constraints is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SearchLocationsRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchLocationsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SearchLocationsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SearchLocationsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SearchLocationsRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SearchLocationsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EffectiveDate>%s</ns:EffectiveDate>%s' % (self.gds_format_date(self.EffectiveDate, input_name='EffectiveDate'), eol_))
        if self.LocationsSearchCriterion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationsSearchCriterion>%s</ns:LocationsSearchCriterion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationsSearchCriterion), input_name='LocationsSearchCriterion')), eol_))
        if self.UniqueTrackingNumber is not None:
            self.UniqueTrackingNumber.export(outfile, level, namespace_, name_='UniqueTrackingNumber', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.GeographicCoordinates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GeographicCoordinates>%s</ns:GeographicCoordinates>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), eol_))
        if self.MultipleMatchesAction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MultipleMatchesAction>%s</ns:MultipleMatchesAction>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MultipleMatchesAction), input_name='MultipleMatchesAction')), eol_))
        if self.SortDetail is not None:
            self.SortDetail.export(outfile, level, namespace_, name_='SortDetail', pretty_print=pretty_print)
        if self.Constraints is not None:
            self.Constraints.export(outfile, level, namespace_, name_='Constraints', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EffectiveDate = dval_
        elif nodeName_ == 'LocationsSearchCriterion':
            LocationsSearchCriterion_ = child_.text
            LocationsSearchCriterion_ = self.gds_validate_string(LocationsSearchCriterion_, node, 'LocationsSearchCriterion')
            self.LocationsSearchCriterion = LocationsSearchCriterion_
            # validate type LocationsSearchCriteriaType
            self.validate_LocationsSearchCriteriaType(self.LocationsSearchCriterion)
        elif nodeName_ == 'UniqueTrackingNumber':
            obj_ = UniqueTrackingNumber.factory()
            obj_.build(child_)
            self.UniqueTrackingNumber = obj_
            obj_.original_tagname_ = 'UniqueTrackingNumber'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'GeographicCoordinates':
            GeographicCoordinates_ = child_.text
            GeographicCoordinates_ = self.gds_validate_string(GeographicCoordinates_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = GeographicCoordinates_
        elif nodeName_ == 'MultipleMatchesAction':
            MultipleMatchesAction_ = child_.text
            MultipleMatchesAction_ = self.gds_validate_string(MultipleMatchesAction_, node, 'MultipleMatchesAction')
            self.MultipleMatchesAction = MultipleMatchesAction_
            # validate type MultipleMatchesActionType
            self.validate_MultipleMatchesActionType(self.MultipleMatchesAction)
        elif nodeName_ == 'SortDetail':
            obj_ = LocationSortDetail.factory()
            obj_.build(child_)
            self.SortDetail = obj_
            obj_.original_tagname_ = 'SortDetail'
        elif nodeName_ == 'Constraints':
            obj_ = SearchLocationConstraints.factory()
            obj_.build(child_)
            self.Constraints = obj_
            obj_.original_tagname_ = 'Constraints'
# end class SearchLocationsRequest


class ShippingHoliday(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Holiday=None, UnavailableActions=None):
        self.original_tagname_ = None
        self.Holiday = Holiday
        if UnavailableActions is None:
            self.UnavailableActions = []
        else:
            self.UnavailableActions = UnavailableActions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingHoliday)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingHoliday.subclass:
            return ShippingHoliday.subclass(*args_, **kwargs_)
        else:
            return ShippingHoliday(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Holiday(self): return self.Holiday
    def set_Holiday(self, Holiday): self.Holiday = Holiday
    def get_UnavailableActions(self): return self.UnavailableActions
    def set_UnavailableActions(self, UnavailableActions): self.UnavailableActions = UnavailableActions
    def add_UnavailableActions(self, value): self.UnavailableActions.append(value)
    def insert_UnavailableActions_at(self, index, value): self.UnavailableActions.insert(index, value)
    def replace_UnavailableActions_at(self, index, value): self.UnavailableActions[index] = value
    def validate_ShippingActionType(self, value):
        # Validate type ShippingActionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DELIVERIES', 'PICKUPS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShippingActionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Holiday is not None or
            self.UnavailableActions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShippingHoliday', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingHoliday')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingHoliday')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShippingHoliday', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingHoliday'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingHoliday', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Holiday is not None:
            self.Holiday.export(outfile, level, namespace_, name_='Holiday', pretty_print=pretty_print)
        for UnavailableActions_ in self.UnavailableActions:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:UnavailableActions>%s</ns:UnavailableActions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(UnavailableActions_), input_name='UnavailableActions')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Holiday':
            obj_ = Holiday.factory()
            obj_.build(child_)
            self.Holiday = obj_
            obj_.original_tagname_ = 'Holiday'
        elif nodeName_ == 'UnavailableActions':
            UnavailableActions_ = child_.text
            UnavailableActions_ = self.gds_validate_string(UnavailableActions_, node, 'UnavailableActions')
            self.UnavailableActions.append(UnavailableActions_)
            # validate type ShippingActionType
            self.validate_ShippingActionType(self.UnavailableActions[-1])
# end class ShippingHoliday


class TimeRange(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None):
        self.original_tagname_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%H:%M:%S').time()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%H:%M:%S').time()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeRange.subclass:
            return TimeRange.subclass(*args_, **kwargs_)
        else:
            return TimeRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Begins(self): return self.Begins
    def set_Begins(self, Begins): self.Begins = Begins
    def get_Ends(self): return self.Ends
    def set_Ends(self, Ends): self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TimeRange', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TimeRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TimeRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TimeRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Begins>%s</ns:Begins>%s' % (self.gds_format_time(self.Begins, input_name='Begins'), eol_))
        if self.Ends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Ends>%s</ns:Ends>%s' % (self.gds_format_time(self.Ends, input_name='Ends'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Begins = dval_
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Ends = dval_
# end class TimeRange


class TransactionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.original_tagname_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerTransactionId>%s</ns:CustomerTransactionId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TransactionDetail


class UniqueTrackingNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, TrackingNumberUniqueIdentifier=None, ShipDate=None):
        self.original_tagname_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UniqueTrackingNumber)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UniqueTrackingNumber.subclass:
            return UniqueTrackingNumber.subclass(*args_, **kwargs_)
        else:
            return UniqueTrackingNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_TrackingNumberUniqueIdentifier(self): return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier): self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.ShipDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='UniqueTrackingNumber', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UniqueTrackingNumber')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UniqueTrackingNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='UniqueTrackingNumber', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='UniqueTrackingNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='UniqueTrackingNumber', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumberUniqueIdentifier>%s</ns:TrackingNumberUniqueIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), eol_))
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDate>%s</ns:ShipDate>%s' % (self.gds_format_date(self.ShipDate, input_name='ShipDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            TrackingNumberUniqueIdentifier_ = child_.text
            TrackingNumberUniqueIdentifier_ = self.gds_validate_string(TrackingNumberUniqueIdentifier_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier_
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
# end class UniqueTrackingNumber


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None):
        self.original_tagname_ = None
        self.ParentCredential = ParentCredential
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ParentCredential(self): return self.ParentCredential
    def set_ParentCredential(self, ParentCredential): self.ParentCredential = ParentCredential
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            self.ParentCredential.export(outfile, level, namespace_, name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.original_tagname_ = None
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Key>%s</ns:Key>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), eol_))
        if self.Password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Password>%s</ns:Password>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.original_tagname_ = None
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceId>%s</ns:ServiceId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), eol_))
        if self.Major is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Major>%s</ns:Major>%s' % (self.gds_format_integer(self.Major, input_name='Major'), eol_))
        if self.Intermediate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Intermediate>%s</ns:Intermediate>%s' % (self.gds_format_integer(self.Intermediate, input_name='Intermediate'), eol_))
        if self.Minor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Minor>%s</ns:Minor>%s' % (self.gds_format_integer(self.Minor, input_name='Minor'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


GDSClassesMapping = {
    'SearchLocationsReply': SearchLocationsReply,
    'SearchLocationsRequest': SearchLocationsRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SearchLocationsReply'
        rootClass = SearchLocationsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/locs/v7"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SearchLocationsReply'
        rootClass = SearchLocationsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SearchLocationsReply'
        rootClass = SearchLocationsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/locs/v7"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SearchLocationsReply'
        rootClass = SearchLocationsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from location_service_v7 import *\n\n')
        sys.stdout.write('import location_service_v7 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AddressAncillaryDetail",
    "AddressToLocationRelationshipDetail",
    "CarrierDetail",
    "ClearanceCountryDetail",
    "ClearanceLocationDetail",
    "ClientDetail",
    "Contact",
    "Distance",
    "DistanceAndLocationDetail",
    "Holiday",
    "LatestDropOffDetail",
    "LatestDropoffOverlayDetail",
    "Localization",
    "LocationContactAndAddress",
    "LocationDetail",
    "LocationHours",
    "LocationIdentificationDetail",
    "LocationSortDetail",
    "Notification",
    "NotificationParameter",
    "ReservationAvailabilityDetail",
    "SearchLocationConstraints",
    "SearchLocationsReply",
    "SearchLocationsRequest",
    "ShippingHoliday",
    "TimeRange",
    "TransactionDetail",
    "UniqueTrackingNumber",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail"
]
