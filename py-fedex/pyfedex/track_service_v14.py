#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun 12 20:56:13 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', 'pyfedex/track_service_v14.py')
#
# Command line arguments:
#    /Fedex/FedExWebServicesStandardXSD/TrackService_v14.xsd
#
# Command line:
#    generateDS --no-namespace-defs -o "pyfedex/track_service_v14.py"  /Fedex/FedExWebServicesStandardXSD/TrackService_v14.xsd
#
# Current working directory (os.getcwd()):
#   py_fedex
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a
    container of "address parts" which should be handled as a unit
    (such as a city-state-ZIP combination within the US)."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None):
        self.original_tagname_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.CountryName = CountryName
        self.Residential = Residential
        self.GeographicCoordinates = GeographicCoordinates
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value): self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_CountryName(self): return self.CountryName
    def set_CountryName(self, CountryName): self.CountryName = CountryName
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def get_GeographicCoordinates(self): return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates): self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StreetLines>%s</ns:StreetLines>%s' % (self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:City>%s</ns:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StateOrProvinceCode>%s</ns:StateOrProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PostalCode>%s</ns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:UrbanizationCode>%s</ns:UrbanizationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryCode>%s</ns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.CountryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryName>%s</ns:CountryName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), eol_))
        if self.Residential is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Residential>%s</ns:Residential>%s' % (self.gds_format_boolean(self.Residential, input_name='Residential'), eol_))
        if self.GeographicCoordinates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GeographicCoordinates>%s</ns:GeographicCoordinates>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'CountryName':
            CountryName_ = child_.text
            CountryName_ = self.gds_validate_string(CountryName_, node, 'CountryName')
            self.CountryName = CountryName_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
        elif nodeName_ == 'GeographicCoordinates':
            GeographicCoordinates_ = child_.text
            GeographicCoordinates_ = self.gds_validate_string(GeographicCoordinates_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = GeographicCoordinates_
# end class Address


class AppointmentDetail(GeneratedsSuper):
    """Specifies the different appointment times on a specific date."""
    subclass = None
    superclass = None
    def __init__(self, Date=None, WindowDetails=None):
        self.original_tagname_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        if WindowDetails is None:
            self.WindowDetails = []
        else:
            self.WindowDetails = WindowDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppointmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppointmentDetail.subclass:
            return AppointmentDetail.subclass(*args_, **kwargs_)
        else:
            return AppointmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_WindowDetails(self): return self.WindowDetails
    def set_WindowDetails(self, WindowDetails): self.WindowDetails = WindowDetails
    def add_WindowDetails(self, value): self.WindowDetails.append(value)
    def insert_WindowDetails_at(self, index, value): self.WindowDetails.insert(index, value)
    def replace_WindowDetails_at(self, index, value): self.WindowDetails[index] = value
    def hasContent_(self):
        if (
            self.Date is not None or
            self.WindowDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='AppointmentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppointmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AppointmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='AppointmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AppointmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AppointmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Date>%s</ns:Date>%s' % (self.gds_format_date(self.Date, input_name='Date'), eol_))
        for WindowDetails_ in self.WindowDetails:
            WindowDetails_.export(outfile, level, namespace_, name_='WindowDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'WindowDetails':
            obj_ = AppointmentTimeDetail.factory()
            obj_.build(child_)
            self.WindowDetails.append(obj_)
            obj_.original_tagname_ = 'WindowDetails'
# end class AppointmentDetail


class AppointmentTimeDetail(GeneratedsSuper):
    """Specifies the details about the appointment time window."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Window=None, Description=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_AppointmentWindowType(self.Type)
        self.Window = Window
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppointmentTimeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppointmentTimeDetail.subclass:
            return AppointmentTimeDetail.subclass(*args_, **kwargs_)
        else:
            return AppointmentTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Window(self): return self.Window
    def set_Window(self, Window): self.Window = Window
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_AppointmentWindowType(self, value):
        # Validate type AppointmentWindowType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AFTERNOON', 'LATE_AFTERNOON', 'MID_DAY', 'MORNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AppointmentWindowType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Window is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='AppointmentTimeDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppointmentTimeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AppointmentTimeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='AppointmentTimeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AppointmentTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AppointmentTimeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Window is not None:
            self.Window.export(outfile, level, namespace_, name_='Window', pretty_print=pretty_print)
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type AppointmentWindowType
            self.validate_AppointmentWindowType(self.Type)
        elif nodeName_ == 'Window':
            obj_ = LocalTimeRange.factory()
            obj_.build(child_)
            self.Window = obj_
            obj_.original_tagname_ = 'Window'
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class AppointmentTimeDetail


class AvailableImagesDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Size=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_AvailableImageType(self.Type)
        self.Size = Size
        self.validate_ImageSizeType(self.Size)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AvailableImagesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AvailableImagesDetail.subclass:
            return AvailableImagesDetail.subclass(*args_, **kwargs_)
        else:
            return AvailableImagesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Size(self): return self.Size
    def set_Size(self, Size): self.Size = Size
    def validate_AvailableImageType(self, value):
        # Validate type AvailableImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BILL_OF_LADING', 'SIGNATURE_PROOF_OF_DELIVERY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AvailableImageType' % {"value" : value.encode("utf-8")} )
    def validate_ImageSizeType(self, value):
        # Validate type ImageSizeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['LARGE', 'SMALL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ImageSizeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Size is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='AvailableImagesDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AvailableImagesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AvailableImagesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='AvailableImagesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AvailableImagesDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AvailableImagesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Size>%s</ns:Size>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Size), input_name='Size')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type AvailableImageType
            self.validate_AvailableImageType(self.Type)
        elif nodeName_ == 'Size':
            Size_ = child_.text
            Size_ = self.gds_validate_string(Size_, node, 'Size')
            self.Size = Size_
            # validate type ImageSizeType
            self.validate_ImageSizeType(self.Size)
# end class AvailableImagesDetail


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, IntegratorId=None, Localization=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.IntegratorId = IntegratorId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_IntegratorId(self): return self.IntegratorId
    def set_IntegratorId(self, IntegratorId): self.IntegratorId = IntegratorId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.IntegratorId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AccountNumber>%s</ns:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.MeterNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MeterNumber>%s</ns:MeterNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), eol_))
        if self.IntegratorId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:IntegratorId>%s</ns:IntegratorId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'IntegratorId':
            IntegratorId_ = child_.text
            IntegratorId_ = self.gds_validate_string(IntegratorId_, node, 'IntegratorId')
            self.IntegratorId = IntegratorId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class Commodity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityId=None, Name=None, NumberOfPieces=None, Description=None, Purpose=None, CountryOfManufacture=None, HarmonizedCode=None, Weight=None, Quantity=None, QuantityUnits=None, AdditionalMeasures=None, UnitPrice=None, CustomsValue=None, ExciseConditions=None, ExportLicenseNumber=None, ExportLicenseExpirationDate=None, CIMarksAndNumbers=None, PartNumber=None, NaftaDetail=None):
        self.original_tagname_ = None
        self.CommodityId = CommodityId
        self.Name = Name
        self.NumberOfPieces = NumberOfPieces
        self.Description = Description
        self.Purpose = Purpose
        self.validate_CommodityPurposeType(self.Purpose)
        self.CountryOfManufacture = CountryOfManufacture
        self.HarmonizedCode = HarmonizedCode
        self.Weight = Weight
        self.Quantity = Quantity
        self.QuantityUnits = QuantityUnits
        if AdditionalMeasures is None:
            self.AdditionalMeasures = []
        else:
            self.AdditionalMeasures = AdditionalMeasures
        self.UnitPrice = UnitPrice
        self.CustomsValue = CustomsValue
        if ExciseConditions is None:
            self.ExciseConditions = []
        else:
            self.ExciseConditions = ExciseConditions
        self.ExportLicenseNumber = ExportLicenseNumber
        if isinstance(ExportLicenseExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExportLicenseExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExportLicenseExpirationDate
        self.ExportLicenseExpirationDate = initvalue_
        self.CIMarksAndNumbers = CIMarksAndNumbers
        self.PartNumber = PartNumber
        self.NaftaDetail = NaftaDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Commodity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Commodity.subclass:
            return Commodity.subclass(*args_, **kwargs_)
        else:
            return Commodity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityId(self): return self.CommodityId
    def set_CommodityId(self, CommodityId): self.CommodityId = CommodityId
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_NumberOfPieces(self): return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces): self.NumberOfPieces = NumberOfPieces
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Purpose(self): return self.Purpose
    def set_Purpose(self, Purpose): self.Purpose = Purpose
    def get_CountryOfManufacture(self): return self.CountryOfManufacture
    def set_CountryOfManufacture(self, CountryOfManufacture): self.CountryOfManufacture = CountryOfManufacture
    def get_HarmonizedCode(self): return self.HarmonizedCode
    def set_HarmonizedCode(self, HarmonizedCode): self.HarmonizedCode = HarmonizedCode
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUnits(self): return self.QuantityUnits
    def set_QuantityUnits(self, QuantityUnits): self.QuantityUnits = QuantityUnits
    def get_AdditionalMeasures(self): return self.AdditionalMeasures
    def set_AdditionalMeasures(self, AdditionalMeasures): self.AdditionalMeasures = AdditionalMeasures
    def add_AdditionalMeasures(self, value): self.AdditionalMeasures.append(value)
    def insert_AdditionalMeasures_at(self, index, value): self.AdditionalMeasures.insert(index, value)
    def replace_AdditionalMeasures_at(self, index, value): self.AdditionalMeasures[index] = value
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_CustomsValue(self): return self.CustomsValue
    def set_CustomsValue(self, CustomsValue): self.CustomsValue = CustomsValue
    def get_ExciseConditions(self): return self.ExciseConditions
    def set_ExciseConditions(self, ExciseConditions): self.ExciseConditions = ExciseConditions
    def add_ExciseConditions(self, value): self.ExciseConditions.append(value)
    def insert_ExciseConditions_at(self, index, value): self.ExciseConditions.insert(index, value)
    def replace_ExciseConditions_at(self, index, value): self.ExciseConditions[index] = value
    def get_ExportLicenseNumber(self): return self.ExportLicenseNumber
    def set_ExportLicenseNumber(self, ExportLicenseNumber): self.ExportLicenseNumber = ExportLicenseNumber
    def get_ExportLicenseExpirationDate(self): return self.ExportLicenseExpirationDate
    def set_ExportLicenseExpirationDate(self, ExportLicenseExpirationDate): self.ExportLicenseExpirationDate = ExportLicenseExpirationDate
    def get_CIMarksAndNumbers(self): return self.CIMarksAndNumbers
    def set_CIMarksAndNumbers(self, CIMarksAndNumbers): self.CIMarksAndNumbers = CIMarksAndNumbers
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def get_NaftaDetail(self): return self.NaftaDetail
    def set_NaftaDetail(self, NaftaDetail): self.NaftaDetail = NaftaDetail
    def validate_CommodityPurposeType(self, value):
        # Validate type CommodityPurposeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BUSINESS', 'CONSUMER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CommodityPurposeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CommodityId is not None or
            self.Name is not None or
            self.NumberOfPieces is not None or
            self.Description is not None or
            self.Purpose is not None or
            self.CountryOfManufacture is not None or
            self.HarmonizedCode is not None or
            self.Weight is not None or
            self.Quantity is not None or
            self.QuantityUnits is not None or
            self.AdditionalMeasures or
            self.UnitPrice is not None or
            self.CustomsValue is not None or
            self.ExciseConditions or
            self.ExportLicenseNumber is not None or
            self.ExportLicenseExpirationDate is not None or
            self.CIMarksAndNumbers is not None or
            self.PartNumber is not None or
            self.NaftaDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Commodity', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Commodity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Commodity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Commodity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Commodity'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Commodity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CommodityId>%s</ns:CommodityId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityId), input_name='CommodityId')), eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Name>%s</ns:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.NumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NumberOfPieces>%s</ns:NumberOfPieces>%s' % (self.gds_format_integer(self.NumberOfPieces, input_name='NumberOfPieces'), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Purpose is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Purpose>%s</ns:Purpose>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Purpose), input_name='Purpose')), eol_))
        if self.CountryOfManufacture is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryOfManufacture>%s</ns:CountryOfManufacture>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryOfManufacture), input_name='CountryOfManufacture')), eol_))
        if self.HarmonizedCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HarmonizedCode>%s</ns:HarmonizedCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HarmonizedCode), input_name='HarmonizedCode')), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Quantity>%s</ns:Quantity>%s' % (self.gds_format_float(self.Quantity, input_name='Quantity'), eol_))
        if self.QuantityUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:QuantityUnits>%s</ns:QuantityUnits>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUnits), input_name='QuantityUnits')), eol_))
        for AdditionalMeasures_ in self.AdditionalMeasures:
            AdditionalMeasures_.export(outfile, level, namespace_, name_='AdditionalMeasures', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            self.CustomsValue.export(outfile, level, namespace_, name_='CustomsValue', pretty_print=pretty_print)
        for ExciseConditions_ in self.ExciseConditions:
            ExciseConditions_.export(outfile, level, namespace_, name_='ExciseConditions', pretty_print=pretty_print)
        if self.ExportLicenseNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ExportLicenseNumber>%s</ns:ExportLicenseNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportLicenseNumber), input_name='ExportLicenseNumber')), eol_))
        if self.ExportLicenseExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ExportLicenseExpirationDate>%s</ns:ExportLicenseExpirationDate>%s' % (self.gds_format_date(self.ExportLicenseExpirationDate, input_name='ExportLicenseExpirationDate'), eol_))
        if self.CIMarksAndNumbers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CIMarksAndNumbers>%s</ns:CIMarksAndNumbers>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CIMarksAndNumbers), input_name='CIMarksAndNumbers')), eol_))
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PartNumber>%s</ns:PartNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), eol_))
        if self.NaftaDetail is not None:
            self.NaftaDetail.export(outfile, level, namespace_, name_='NaftaDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityId':
            CommodityId_ = child_.text
            CommodityId_ = self.gds_validate_string(CommodityId_, node, 'CommodityId')
            self.CommodityId = CommodityId_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'NumberOfPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPieces')
            self.NumberOfPieces = ival_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Purpose':
            Purpose_ = child_.text
            Purpose_ = self.gds_validate_string(Purpose_, node, 'Purpose')
            self.Purpose = Purpose_
            # validate type CommodityPurposeType
            self.validate_CommodityPurposeType(self.Purpose)
        elif nodeName_ == 'CountryOfManufacture':
            CountryOfManufacture_ = child_.text
            CountryOfManufacture_ = self.gds_validate_string(CountryOfManufacture_, node, 'CountryOfManufacture')
            self.CountryOfManufacture = CountryOfManufacture_
        elif nodeName_ == 'HarmonizedCode':
            HarmonizedCode_ = child_.text
            HarmonizedCode_ = self.gds_validate_string(HarmonizedCode_, node, 'HarmonizedCode')
            self.HarmonizedCode = HarmonizedCode_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Quantity':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'QuantityUnits':
            QuantityUnits_ = child_.text
            QuantityUnits_ = self.gds_validate_string(QuantityUnits_, node, 'QuantityUnits')
            self.QuantityUnits = QuantityUnits_
        elif nodeName_ == 'AdditionalMeasures':
            obj_ = Measure.factory()
            obj_.build(child_)
            self.AdditionalMeasures.append(obj_)
            obj_.original_tagname_ = 'AdditionalMeasures'
        elif nodeName_ == 'UnitPrice':
            obj_ = Money.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'CustomsValue':
            obj_ = Money.factory()
            obj_.build(child_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'ExciseConditions':
            obj_ = EdtExciseCondition.factory()
            obj_.build(child_)
            self.ExciseConditions.append(obj_)
            obj_.original_tagname_ = 'ExciseConditions'
        elif nodeName_ == 'ExportLicenseNumber':
            ExportLicenseNumber_ = child_.text
            ExportLicenseNumber_ = self.gds_validate_string(ExportLicenseNumber_, node, 'ExportLicenseNumber')
            self.ExportLicenseNumber = ExportLicenseNumber_
        elif nodeName_ == 'ExportLicenseExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExportLicenseExpirationDate = dval_
        elif nodeName_ == 'CIMarksAndNumbers':
            CIMarksAndNumbers_ = child_.text
            CIMarksAndNumbers_ = self.gds_validate_string(CIMarksAndNumbers_, node, 'CIMarksAndNumbers')
            self.CIMarksAndNumbers = CIMarksAndNumbers_
        elif nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
        elif nodeName_ == 'NaftaDetail':
            obj_ = NaftaCommodityDetail.factory()
            obj_.build(child_)
            self.NaftaDetail = obj_
            obj_.original_tagname_ = 'NaftaDetail'
# end class Commodity


class CompletedTrackDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, DuplicateWaybill=None, MoreData=None, PagingToken=None, TrackDetailsCount=None, TrackDetails=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.DuplicateWaybill = DuplicateWaybill
        self.MoreData = MoreData
        self.PagingToken = PagingToken
        self.TrackDetailsCount = TrackDetailsCount
        if TrackDetails is None:
            self.TrackDetails = []
        else:
            self.TrackDetails = TrackDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedTrackDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedTrackDetail.subclass:
            return CompletedTrackDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedTrackDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_DuplicateWaybill(self): return self.DuplicateWaybill
    def set_DuplicateWaybill(self, DuplicateWaybill): self.DuplicateWaybill = DuplicateWaybill
    def get_MoreData(self): return self.MoreData
    def set_MoreData(self, MoreData): self.MoreData = MoreData
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_TrackDetailsCount(self): return self.TrackDetailsCount
    def set_TrackDetailsCount(self, TrackDetailsCount): self.TrackDetailsCount = TrackDetailsCount
    def get_TrackDetails(self): return self.TrackDetails
    def set_TrackDetails(self, TrackDetails): self.TrackDetails = TrackDetails
    def add_TrackDetails(self, value): self.TrackDetails.append(value)
    def insert_TrackDetails_at(self, index, value): self.TrackDetails.insert(index, value)
    def replace_TrackDetails_at(self, index, value): self.TrackDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.DuplicateWaybill is not None or
            self.MoreData is not None or
            self.PagingToken is not None or
            self.TrackDetailsCount is not None or
            self.TrackDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CompletedTrackDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedTrackDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompletedTrackDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CompletedTrackDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CompletedTrackDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CompletedTrackDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.DuplicateWaybill is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DuplicateWaybill>%s</ns:DuplicateWaybill>%s' % (self.gds_format_boolean(self.DuplicateWaybill, input_name='DuplicateWaybill'), eol_))
        if self.MoreData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MoreData>%s</ns:MoreData>%s' % (self.gds_format_boolean(self.MoreData, input_name='MoreData'), eol_))
        if self.PagingToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagingToken>%s</ns:PagingToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), eol_))
        if self.TrackDetailsCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackDetailsCount>%s</ns:TrackDetailsCount>%s' % (self.gds_format_integer(self.TrackDetailsCount, input_name='TrackDetailsCount'), eol_))
        for TrackDetails_ in self.TrackDetails:
            TrackDetails_.export(outfile, level, namespace_, name_='TrackDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'DuplicateWaybill':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DuplicateWaybill')
            self.DuplicateWaybill = ival_
        elif nodeName_ == 'MoreData':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'MoreData')
            self.MoreData = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'TrackDetailsCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TrackDetailsCount')
            self.TrackDetailsCount = ival_
        elif nodeName_ == 'TrackDetails':
            obj_ = TrackDetail.factory()
            obj_.build(child_)
            self.TrackDetails.append(obj_)
            obj_.original_tagname_ = 'TrackDetails'
# end class CompletedTrackDetail


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    subclass = None
    superclass = None
    def __init__(self, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.PersonName = PersonName
        self.Title = Title
        self.CompanyName = CompanyName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.PagerNumber = PagerNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self): return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber): self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self): return self.PagerNumber
    def set_PagerNumber(self, PagerNumber): self.PagerNumber = PagerNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Contact', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonName>%s</ns:PersonName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), eol_))
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Title>%s</ns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CompanyName>%s</ns:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneExtension>%s</ns:PhoneExtension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), eol_))
        if self.TollFreePhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TollFreePhoneNumber>%s</ns:TollFreePhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), eol_))
        if self.PagerNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagerNumber>%s</ns:PagerNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), eol_))
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:FaxNumber>%s</ns:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EMailAddress>%s</ns:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PersonName':
            PersonName_ = child_.text
            PersonName_ = self.gds_validate_string(PersonName_, node, 'PersonName')
            self.PersonName = PersonName_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
        elif nodeName_ == 'TollFreePhoneNumber':
            TollFreePhoneNumber_ = child_.text
            TollFreePhoneNumber_ = self.gds_validate_string(TollFreePhoneNumber_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = TollFreePhoneNumber_
        elif nodeName_ == 'PagerNumber':
            PagerNumber_ = child_.text
            PagerNumber_ = self.gds_validate_string(PagerNumber_, node, 'PagerNumber')
            self.PagerNumber = PagerNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None):
        self.original_tagname_ = None
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ContactAndAddress


class ContentRecord(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumber=None, ItemNumber=None, ReceivedQuantity=None, Description=None):
        self.original_tagname_ = None
        self.PartNumber = PartNumber
        self.ItemNumber = ItemNumber
        self.ReceivedQuantity = ReceivedQuantity
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentRecord)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentRecord.subclass:
            return ContentRecord.subclass(*args_, **kwargs_)
        else:
            return ContentRecord(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def get_ItemNumber(self): return self.ItemNumber
    def set_ItemNumber(self, ItemNumber): self.ItemNumber = ItemNumber
    def get_ReceivedQuantity(self): return self.ReceivedQuantity
    def set_ReceivedQuantity(self, ReceivedQuantity): self.ReceivedQuantity = ReceivedQuantity
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.PartNumber is not None or
            self.ItemNumber is not None or
            self.ReceivedQuantity is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ContentRecord', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentRecord')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContentRecord')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ContentRecord', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ContentRecord'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ContentRecord', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PartNumber>%s</ns:PartNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), eol_))
        if self.ItemNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ItemNumber>%s</ns:ItemNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ItemNumber), input_name='ItemNumber')), eol_))
        if self.ReceivedQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ReceivedQuantity>%s</ns:ReceivedQuantity>%s' % (self.gds_format_integer(self.ReceivedQuantity, input_name='ReceivedQuantity'), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
        elif nodeName_ == 'ItemNumber':
            ItemNumber_ = child_.text
            ItemNumber_ = self.gds_validate_string(ItemNumber_, node, 'ItemNumber')
            self.ItemNumber = ItemNumber_
        elif nodeName_ == 'ReceivedQuantity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ReceivedQuantity')
            self.ReceivedQuantity = ival_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ContentRecord


class CustomerExceptionRequestDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, StatusCode=None, StatusDescription=None, CreateTime=None):
        self.original_tagname_ = None
        self.Id = Id
        self.StatusCode = StatusCode
        self.StatusDescription = StatusDescription
        if isinstance(CreateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreateTime
        self.CreateTime = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerExceptionRequestDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerExceptionRequestDetail.subclass:
            return CustomerExceptionRequestDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerExceptionRequestDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_StatusDescription(self): return self.StatusDescription
    def set_StatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def get_CreateTime(self): return self.CreateTime
    def set_CreateTime(self, CreateTime): self.CreateTime = CreateTime
    def hasContent_(self):
        if (
            self.Id is not None or
            self.StatusCode is not None or
            self.StatusDescription is not None or
            self.CreateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CustomerExceptionRequestDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerExceptionRequestDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerExceptionRequestDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CustomerExceptionRequestDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CustomerExceptionRequestDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CustomerExceptionRequestDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Id>%s</ns:Id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), eol_))
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusCode>%s</ns:StatusCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), eol_))
        if self.StatusDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusDescription>%s</ns:StatusDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), eol_))
        if self.CreateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CreateTime>%s</ns:CreateTime>%s' % (self.gds_format_datetime(self.CreateTime, input_name='CreateTime'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'StatusDescription':
            StatusDescription_ = child_.text
            StatusDescription_ = self.gds_validate_string(StatusDescription_, node, 'StatusDescription')
            self.StatusDescription = StatusDescription_
        elif nodeName_ == 'CreateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreateTime = dval_
# end class CustomerExceptionRequestDetail


class CustomsOptionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_CustomsOptionType(self.Type)
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsOptionDetail.subclass:
            return CustomsOptionDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_CustomsOptionType(self, value):
        # Validate type CustomsOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['COURTESY_RETURN_LABEL', 'EXHIBITION_TRADE_SHOW', 'FAULTY_ITEM', 'FOLLOWING_REPAIR', 'FOR_REPAIR', 'ITEM_FOR_LOAN', 'OTHER', 'REJECTED', 'REPLACEMENT', 'TRIAL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CustomsOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CustomsOptionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomsOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CustomsOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CustomsOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CustomsOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type CustomsOptionType
            self.validate_CustomsOptionType(self.Type)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CustomsOptionDetail


class DateRange(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None):
        self.original_tagname_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%Y-%m-%d').date()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%Y-%m-%d').date()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Begins(self): return self.Begins
    def set_Begins(self, Begins): self.Begins = Begins
    def get_Ends(self): return self.Ends
    def set_Ends(self, Ends): self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DateRange', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DateRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DateRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Begins>%s</ns:Begins>%s' % (self.gds_format_date(self.Begins, input_name='Begins'), eol_))
        if self.Ends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Ends>%s</ns:Ends>%s' % (self.gds_format_date(self.Ends, input_name='Ends'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Begins = dval_
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Ends = dval_
# end class DateRange


class DeliveryOptionEligibilityDetail(GeneratedsSuper):
    """Details about the eligibility for a delivery option."""
    subclass = None
    superclass = None
    def __init__(self, Option=None, Eligibility=None):
        self.original_tagname_ = None
        self.Option = Option
        self.validate_DeliveryOptionType(self.Option)
        self.Eligibility = Eligibility
        self.validate_EligibilityType(self.Eligibility)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOptionEligibilityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOptionEligibilityDetail.subclass:
            return DeliveryOptionEligibilityDetail.subclass(*args_, **kwargs_)
        else:
            return DeliveryOptionEligibilityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_Eligibility(self): return self.Eligibility
    def set_Eligibility(self, Eligibility): self.Eligibility = Eligibility
    def validate_DeliveryOptionType(self, value):
        # Validate type DeliveryOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INDIRECT_SIGNATURE_RELEASE', 'REDIRECT_TO_HOLD_AT_LOCATION', 'REROUTE', 'RESCHEDULE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DeliveryOptionType' % {"value" : value.encode("utf-8")} )
    def validate_EligibilityType(self, value):
        # Validate type EligibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ELIGIBLE', 'INELIGIBLE', 'POSSIBLY_ELIGIBLE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EligibilityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Option is not None or
            self.Eligibility is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DeliveryOptionEligibilityDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOptionEligibilityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryOptionEligibilityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DeliveryOptionEligibilityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DeliveryOptionEligibilityDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DeliveryOptionEligibilityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Option>%s</ns:Option>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), eol_))
        if self.Eligibility is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Eligibility>%s</ns:Eligibility>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Eligibility), input_name='Eligibility')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            Option_ = child_.text
            Option_ = self.gds_validate_string(Option_, node, 'Option')
            self.Option = Option_
            # validate type DeliveryOptionType
            self.validate_DeliveryOptionType(self.Option)
        elif nodeName_ == 'Eligibility':
            Eligibility_ = child_.text
            Eligibility_ = self.gds_validate_string(Eligibility_, node, 'Eligibility')
            self.Eligibility = Eligibility_
            # validate type EligibilityType
            self.validate_EligibilityType(self.Eligibility)
# end class DeliveryOptionEligibilityDetail


class Dimensions(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None):
        self.original_tagname_ = None
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.Units = Units
        self.validate_LinearUnits(self.Units)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_LinearUnits(self, value):
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CM', 'IN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LinearUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Dimensions', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Dimensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Dimensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Length>%s</ns:Length>%s' % (self.gds_format_integer(self.Length, input_name='Length'), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Width>%s</ns:Width>%s' % (self.gds_format_integer(self.Width, input_name='Width'), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Height>%s</ns:Height>%s' % (self.gds_format_integer(self.Height, input_name='Height'), eol_))
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Length':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
        elif nodeName_ == 'Width':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
        elif nodeName_ == 'Height':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class Dimensions


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.original_tagname_ = None
        self.Value = Value
        self.Units = Units
        self.validate_DistanceUnits(self.Units)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Distance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['KM', 'MI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DistanceUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Distance', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Distance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Distance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Distance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Distance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type DistanceUnits
            self.validate_DistanceUnits(self.Units)
# end class Distance


class DocumentPart(GeneratedsSuper):
    """Successive parts of the document (only one, for PDF documents)."""
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, Content=None):
        self.original_tagname_ = None
        self.SequenceNumber = SequenceNumber
        self.Content = Content
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentPart)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentPart.subclass:
            return DocumentPart.subclass(*args_, **kwargs_)
        else:
            return DocumentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SequenceNumber(self): return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber): self.SequenceNumber = SequenceNumber
    def get_Content(self): return self.Content
    def set_Content(self, Content): self.Content = Content
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DocumentPart', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentPart')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DocumentPart')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DocumentPart', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DocumentPart'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DocumentPart', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SequenceNumber>%s</ns:SequenceNumber>%s' % (self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), eol_))
        if self.Content is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Content>%s</ns:Content>%s' % (self.gds_format_base64(self.Content, input_name='Content'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
        elif nodeName_ == 'Content':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Content')
            else:
                bval_ = None
            self.Content = bval_
# end class DocumentPart


class EMailDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Name=None):
        self.original_tagname_ = None
        self.EmailAddress = EmailAddress
        self.Name = Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailDetail.subclass:
            return EMailDetail.subclass(*args_, **kwargs_)
        else:
            return EMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EmailAddress(self): return self.EmailAddress
    def set_EmailAddress(self, EmailAddress): self.EmailAddress = EmailAddress
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EMailDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EmailAddress>%s</ns:EmailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Name>%s</ns:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EmailAddress':
            EmailAddress_ = child_.text
            EmailAddress_ = self.gds_validate_string(EmailAddress_, node, 'EmailAddress')
            self.EmailAddress = EmailAddress_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
# end class EMailDetail


class EdtExciseCondition(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Category=None, Value=None):
        self.original_tagname_ = None
        self.Category = Category
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdtExciseCondition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdtExciseCondition.subclass:
            return EdtExciseCondition.subclass(*args_, **kwargs_)
        else:
            return EdtExciseCondition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Category is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EdtExciseCondition', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdtExciseCondition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EdtExciseCondition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EdtExciseCondition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EdtExciseCondition'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EdtExciseCondition', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Category is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Category>%s</ns:Category>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Category), input_name='Category')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Category':
            Category_ = child_.text
            Category_ = self.gds_validate_string(Category_, node, 'Category')
            self.Category = Category_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class EdtExciseCondition


class GetTrackingDocumentsReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Documents=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if Documents is None:
            self.Documents = []
        else:
            self.Documents = Documents
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetTrackingDocumentsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetTrackingDocumentsReply.subclass:
            return GetTrackingDocumentsReply.subclass(*args_, **kwargs_)
        else:
            return GetTrackingDocumentsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Documents(self): return self.Documents
    def set_Documents(self, Documents): self.Documents = Documents
    def add_Documents(self, value): self.Documents.append(value)
    def insert_Documents_at(self, index, value): self.Documents.insert(index, value)
    def replace_Documents_at(self, index, value): self.Documents[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Documents
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='GetTrackingDocumentsReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetTrackingDocumentsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetTrackingDocumentsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='GetTrackingDocumentsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GetTrackingDocumentsReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GetTrackingDocumentsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        for Documents_ in self.Documents:
            Documents_.export(outfile, level, namespace_, name_='Documents', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Documents':
            obj_ = TrackingDocument.factory()
            obj_.build(child_)
            self.Documents.append(obj_)
            obj_.original_tagname_ = 'Documents'
# end class GetTrackingDocumentsReply


class GetTrackingDocumentsRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, SelectionDetails=None, TrackingDocumentSpecification=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if SelectionDetails is None:
            self.SelectionDetails = []
        else:
            self.SelectionDetails = SelectionDetails
        self.TrackingDocumentSpecification = TrackingDocumentSpecification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetTrackingDocumentsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetTrackingDocumentsRequest.subclass:
            return GetTrackingDocumentsRequest.subclass(*args_, **kwargs_)
        else:
            return GetTrackingDocumentsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_SelectionDetails(self): return self.SelectionDetails
    def set_SelectionDetails(self, SelectionDetails): self.SelectionDetails = SelectionDetails
    def add_SelectionDetails(self, value): self.SelectionDetails.append(value)
    def insert_SelectionDetails_at(self, index, value): self.SelectionDetails.insert(index, value)
    def replace_SelectionDetails_at(self, index, value): self.SelectionDetails[index] = value
    def get_TrackingDocumentSpecification(self): return self.TrackingDocumentSpecification
    def set_TrackingDocumentSpecification(self, TrackingDocumentSpecification): self.TrackingDocumentSpecification = TrackingDocumentSpecification
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.SelectionDetails or
            self.TrackingDocumentSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='GetTrackingDocumentsRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetTrackingDocumentsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetTrackingDocumentsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='GetTrackingDocumentsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GetTrackingDocumentsRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GetTrackingDocumentsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        for SelectionDetails_ in self.SelectionDetails:
            SelectionDetails_.export(outfile, level, namespace_, name_='SelectionDetails', pretty_print=pretty_print)
        if self.TrackingDocumentSpecification is not None:
            self.TrackingDocumentSpecification.export(outfile, level, namespace_, name_='TrackingDocumentSpecification', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'SelectionDetails':
            obj_ = TrackSelectionDetail.factory()
            obj_.build(child_)
            self.SelectionDetails.append(obj_)
            obj_.original_tagname_ = 'SelectionDetails'
        elif nodeName_ == 'TrackingDocumentSpecification':
            obj_ = TrackingDocumentSpecification.factory()
            obj_.build(child_)
            self.TrackingDocumentSpecification = obj_
            obj_.original_tagname_ = 'TrackingDocumentSpecification'
# end class GetTrackingDocumentsRequest


class LocalTimeRange(GeneratedsSuper):
    """Time Range specified in local time."""
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None):
        self.original_tagname_ = None
        self.Begins = Begins
        self.Ends = Ends
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocalTimeRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocalTimeRange.subclass:
            return LocalTimeRange.subclass(*args_, **kwargs_)
        else:
            return LocalTimeRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Begins(self): return self.Begins
    def set_Begins(self, Begins): self.Begins = Begins
    def get_Ends(self): return self.Ends
    def set_Ends(self, Ends): self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='LocalTimeRange', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocalTimeRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocalTimeRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='LocalTimeRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LocalTimeRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LocalTimeRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Begins>%s</ns:Begins>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Begins), input_name='Begins')), eol_))
        if self.Ends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Ends>%s</ns:Ends>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Ends), input_name='Ends')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Begins':
            Begins_ = child_.text
            Begins_ = self.gds_validate_string(Begins_, node, 'Begins')
            self.Begins = Begins_
        elif nodeName_ == 'Ends':
            Ends_ = child_.text
            Ends_ = self.gds_validate_string(Ends_, node, 'Ends')
            self.Ends = Ends_
# end class LocalTimeRange


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.original_tagname_ = None
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LanguageCode>%s</ns:LanguageCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), eol_))
        if self.LocaleCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocaleCode>%s</ns:LocaleCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class Measure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Units=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Units = Units
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Measure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Measure.subclass:
            return Measure.subclass(*args_, **kwargs_)
        else:
            return Measure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Measure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Measure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Measure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Measure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Measure'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Measure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Quantity>%s</ns:Quantity>%s' % (self.gds_format_float(self.Quantity, input_name='Quantity'), eol_))
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
# end class Measure


class Money(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None):
        self.original_tagname_ = None
        self.Currency = Currency
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Money)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Money', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Money')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Money')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Money', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Money', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Currency>%s</ns:Currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), eol_))
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Amount>%s</ns:Amount>%s' % (self.gds_format_float(self.Amount, input_name='Amount'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'Amount':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Amount')
            self.Amount = fval_
# end class Money


class NaftaCommodityDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PreferenceCriterion=None, ProducerDetermination=None, ProducerId=None, NetCostMethod=None, NetCostDateRange=None):
        self.original_tagname_ = None
        self.PreferenceCriterion = PreferenceCriterion
        self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        self.ProducerDetermination = ProducerDetermination
        self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        self.ProducerId = ProducerId
        self.NetCostMethod = NetCostMethod
        self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        self.NetCostDateRange = NetCostDateRange
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaCommodityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaCommodityDetail.subclass:
            return NaftaCommodityDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaCommodityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PreferenceCriterion(self): return self.PreferenceCriterion
    def set_PreferenceCriterion(self, PreferenceCriterion): self.PreferenceCriterion = PreferenceCriterion
    def get_ProducerDetermination(self): return self.ProducerDetermination
    def set_ProducerDetermination(self, ProducerDetermination): self.ProducerDetermination = ProducerDetermination
    def get_ProducerId(self): return self.ProducerId
    def set_ProducerId(self, ProducerId): self.ProducerId = ProducerId
    def get_NetCostMethod(self): return self.NetCostMethod
    def set_NetCostMethod(self, NetCostMethod): self.NetCostMethod = NetCostMethod
    def get_NetCostDateRange(self): return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange): self.NetCostDateRange = NetCostDateRange
    def validate_NaftaPreferenceCriterionCode(self, value):
        # Validate type NaftaPreferenceCriterionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'B', 'C', 'D', 'E', 'F']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NaftaPreferenceCriterionCode' % {"value" : value.encode("utf-8")} )
    def validate_NaftaProducerDeterminationCode(self, value):
        # Validate type NaftaProducerDeterminationCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['NO_1', 'NO_2', 'NO_3', 'YES']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NaftaProducerDeterminationCode' % {"value" : value.encode("utf-8")} )
    def validate_NaftaNetCostMethodCode(self, value):
        # Validate type NaftaNetCostMethodCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['NC', 'NO']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NaftaNetCostMethodCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PreferenceCriterion is not None or
            self.ProducerDetermination is not None or
            self.ProducerId is not None or
            self.NetCostMethod is not None or
            self.NetCostDateRange is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NaftaCommodityDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaCommodityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NaftaCommodityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NaftaCommodityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NaftaCommodityDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NaftaCommodityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PreferenceCriterion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PreferenceCriterion>%s</ns:PreferenceCriterion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriterion), input_name='PreferenceCriterion')), eol_))
        if self.ProducerDetermination is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ProducerDetermination>%s</ns:ProducerDetermination>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProducerDetermination), input_name='ProducerDetermination')), eol_))
        if self.ProducerId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ProducerId>%s</ns:ProducerId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProducerId), input_name='ProducerId')), eol_))
        if self.NetCostMethod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NetCostMethod>%s</ns:NetCostMethod>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NetCostMethod), input_name='NetCostMethod')), eol_))
        if self.NetCostDateRange is not None:
            self.NetCostDateRange.export(outfile, level, namespace_, name_='NetCostDateRange', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PreferenceCriterion':
            PreferenceCriterion_ = child_.text
            PreferenceCriterion_ = self.gds_validate_string(PreferenceCriterion_, node, 'PreferenceCriterion')
            self.PreferenceCriterion = PreferenceCriterion_
            # validate type NaftaPreferenceCriterionCode
            self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        elif nodeName_ == 'ProducerDetermination':
            ProducerDetermination_ = child_.text
            ProducerDetermination_ = self.gds_validate_string(ProducerDetermination_, node, 'ProducerDetermination')
            self.ProducerDetermination = ProducerDetermination_
            # validate type NaftaProducerDeterminationCode
            self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        elif nodeName_ == 'ProducerId':
            ProducerId_ = child_.text
            ProducerId_ = self.gds_validate_string(ProducerId_, node, 'ProducerId')
            self.ProducerId = ProducerId_
        elif nodeName_ == 'NetCostMethod':
            NetCostMethod_ = child_.text
            NetCostMethod_ = self.gds_validate_string(NetCostMethod_, node, 'NetCostMethod')
            self.NetCostMethod = NetCostMethod_
            # validate type NaftaNetCostMethodCode
            self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        elif nodeName_ == 'NetCostDateRange':
            obj_ = DateRange.factory()
            obj_.build(child_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
# end class NaftaCommodityDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.original_tagname_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value): self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value): self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Severity>%s</ns:Severity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Source>%s</ns:Source>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Code>%s</ns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Message>%s</ns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalizedMessage>%s</ns:LocalizedMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), eol_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NotificationType=None, EmailDetail=None, Localization=None):
        self.original_tagname_ = None
        self.NotificationType = NotificationType
        self.validate_NotificationType(self.NotificationType)
        self.EmailDetail = EmailDetail
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationDetail.subclass:
            return NotificationDetail.subclass(*args_, **kwargs_)
        else:
            return NotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationType(self): return self.NotificationType
    def set_NotificationType(self, NotificationType): self.NotificationType = NotificationType
    def get_EmailDetail(self): return self.EmailDetail
    def set_EmailDetail(self, EmailDetail): self.EmailDetail = EmailDetail
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def validate_NotificationType(self, value):
        # Validate type NotificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EMAIL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NotificationType is not None or
            self.EmailDetail is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NotificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NotificationType>%s</ns:NotificationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), eol_))
        if self.EmailDetail is not None:
            self.EmailDetail.export(outfile, level, namespace_, name_='EmailDetail', pretty_print=pretty_print)
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationType':
            NotificationType_ = child_.text
            NotificationType_ = self.gds_validate_string(NotificationType_, node, 'NotificationType')
            self.NotificationType = NotificationType_
            # validate type NotificationType
            self.validate_NotificationType(self.NotificationType)
        elif nodeName_ == 'EmailDetail':
            obj_ = EMailDetail.factory()
            obj_.build(child_)
            self.EmailDetail = obj_
            obj_.original_tagname_ = 'EmailDetail'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class NotificationDetail


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.original_tagname_ = None
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Id>%s</ns:Id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class PagingDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PagingToken=None, NumberOfResultsPerPage=None):
        self.original_tagname_ = None
        self.PagingToken = PagingToken
        self.NumberOfResultsPerPage = NumberOfResultsPerPage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PagingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PagingDetail.subclass:
            return PagingDetail.subclass(*args_, **kwargs_)
        else:
            return PagingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_NumberOfResultsPerPage(self): return self.NumberOfResultsPerPage
    def set_NumberOfResultsPerPage(self, NumberOfResultsPerPage): self.NumberOfResultsPerPage = NumberOfResultsPerPage
    def hasContent_(self):
        if (
            self.PagingToken is not None or
            self.NumberOfResultsPerPage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PagingDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PagingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PagingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PagingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PagingDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PagingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PagingToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagingToken>%s</ns:PagingToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), eol_))
        if self.NumberOfResultsPerPage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NumberOfResultsPerPage>%s</ns:NumberOfResultsPerPage>%s' % (self.gds_format_integer(self.NumberOfResultsPerPage, input_name='NumberOfResultsPerPage'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'NumberOfResultsPerPage':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfResultsPerPage')
            self.NumberOfResultsPerPage = ival_
# end class PagingDetail


class PieceCountVerificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CountLocationType=None, Count=None, Description=None):
        self.original_tagname_ = None
        self.CountLocationType = CountLocationType
        self.validate_PieceCountLocationType(self.CountLocationType)
        self.Count = Count
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PieceCountVerificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PieceCountVerificationDetail.subclass:
            return PieceCountVerificationDetail.subclass(*args_, **kwargs_)
        else:
            return PieceCountVerificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountLocationType(self): return self.CountLocationType
    def set_CountLocationType(self, CountLocationType): self.CountLocationType = CountLocationType
    def get_Count(self): return self.Count
    def set_Count(self, Count): self.Count = Count
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_PieceCountLocationType(self, value):
        # Validate type PieceCountLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DESTINATION', 'ORIGIN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PieceCountLocationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CountLocationType is not None or
            self.Count is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PieceCountVerificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PieceCountVerificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PieceCountVerificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PieceCountVerificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PieceCountVerificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PieceCountVerificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountLocationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountLocationType>%s</ns:CountLocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountLocationType), input_name='CountLocationType')), eol_))
        if self.Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Count>%s</ns:Count>%s' % (self.gds_format_integer(self.Count, input_name='Count'), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountLocationType':
            CountLocationType_ = child_.text
            CountLocationType_ = self.gds_validate_string(CountLocationType_, node, 'CountLocationType')
            self.CountLocationType = CountLocationType_
            # validate type PieceCountLocationType
            self.validate_PieceCountLocationType(self.CountLocationType)
        elif nodeName_ == 'Count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class PieceCountVerificationDetail


class SendNotificationsReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DuplicateWaybill=None, MoreDataAvailable=None, PagingToken=None, Packages=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.DuplicateWaybill = DuplicateWaybill
        self.MoreDataAvailable = MoreDataAvailable
        self.PagingToken = PagingToken
        if Packages is None:
            self.Packages = []
        else:
            self.Packages = Packages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SendNotificationsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SendNotificationsReply.subclass:
            return SendNotificationsReply.subclass(*args_, **kwargs_)
        else:
            return SendNotificationsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_DuplicateWaybill(self): return self.DuplicateWaybill
    def set_DuplicateWaybill(self, DuplicateWaybill): self.DuplicateWaybill = DuplicateWaybill
    def get_MoreDataAvailable(self): return self.MoreDataAvailable
    def set_MoreDataAvailable(self, MoreDataAvailable): self.MoreDataAvailable = MoreDataAvailable
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_Packages(self): return self.Packages
    def set_Packages(self, Packages): self.Packages = Packages
    def add_Packages(self, value): self.Packages.append(value)
    def insert_Packages_at(self, index, value): self.Packages.insert(index, value)
    def replace_Packages_at(self, index, value): self.Packages[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DuplicateWaybill is not None or
            self.MoreDataAvailable is not None or
            self.PagingToken is not None or
            self.Packages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SendNotificationsReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SendNotificationsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SendNotificationsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SendNotificationsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SendNotificationsReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SendNotificationsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.DuplicateWaybill is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DuplicateWaybill>%s</ns:DuplicateWaybill>%s' % (self.gds_format_boolean(self.DuplicateWaybill, input_name='DuplicateWaybill'), eol_))
        if self.MoreDataAvailable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MoreDataAvailable>%s</ns:MoreDataAvailable>%s' % (self.gds_format_boolean(self.MoreDataAvailable, input_name='MoreDataAvailable'), eol_))
        if self.PagingToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagingToken>%s</ns:PagingToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), eol_))
        for Packages_ in self.Packages:
            Packages_.export(outfile, level, namespace_, name_='Packages', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'DuplicateWaybill':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DuplicateWaybill')
            self.DuplicateWaybill = ival_
        elif nodeName_ == 'MoreDataAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'MoreDataAvailable')
            self.MoreDataAvailable = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'Packages':
            obj_ = TrackNotificationPackage.factory()
            obj_.build(child_)
            self.Packages.append(obj_)
            obj_.original_tagname_ = 'Packages'
# end class SendNotificationsReply


class SendNotificationsRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, TrackingNumber=None, MultiPiece=None, PagingToken=None, TrackingNumberUniqueId=None, ShipDateRangeBegin=None, ShipDateRangeEnd=None, SenderEMailAddress=None, SenderContactName=None, EventNotificationDetail=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.TrackingNumber = TrackingNumber
        self.MultiPiece = MultiPiece
        self.PagingToken = PagingToken
        self.TrackingNumberUniqueId = TrackingNumberUniqueId
        if isinstance(ShipDateRangeBegin, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeBegin, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeBegin
        self.ShipDateRangeBegin = initvalue_
        if isinstance(ShipDateRangeEnd, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeEnd, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeEnd
        self.ShipDateRangeEnd = initvalue_
        self.SenderEMailAddress = SenderEMailAddress
        self.SenderContactName = SenderContactName
        self.EventNotificationDetail = EventNotificationDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SendNotificationsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SendNotificationsRequest.subclass:
            return SendNotificationsRequest.subclass(*args_, **kwargs_)
        else:
            return SendNotificationsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_MultiPiece(self): return self.MultiPiece
    def set_MultiPiece(self, MultiPiece): self.MultiPiece = MultiPiece
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_TrackingNumberUniqueId(self): return self.TrackingNumberUniqueId
    def set_TrackingNumberUniqueId(self, TrackingNumberUniqueId): self.TrackingNumberUniqueId = TrackingNumberUniqueId
    def get_ShipDateRangeBegin(self): return self.ShipDateRangeBegin
    def set_ShipDateRangeBegin(self, ShipDateRangeBegin): self.ShipDateRangeBegin = ShipDateRangeBegin
    def get_ShipDateRangeEnd(self): return self.ShipDateRangeEnd
    def set_ShipDateRangeEnd(self, ShipDateRangeEnd): self.ShipDateRangeEnd = ShipDateRangeEnd
    def get_SenderEMailAddress(self): return self.SenderEMailAddress
    def set_SenderEMailAddress(self, SenderEMailAddress): self.SenderEMailAddress = SenderEMailAddress
    def get_SenderContactName(self): return self.SenderContactName
    def set_SenderContactName(self, SenderContactName): self.SenderContactName = SenderContactName
    def get_EventNotificationDetail(self): return self.EventNotificationDetail
    def set_EventNotificationDetail(self, EventNotificationDetail): self.EventNotificationDetail = EventNotificationDetail
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.TrackingNumber is not None or
            self.MultiPiece is not None or
            self.PagingToken is not None or
            self.TrackingNumberUniqueId is not None or
            self.ShipDateRangeBegin is not None or
            self.ShipDateRangeEnd is not None or
            self.SenderEMailAddress is not None or
            self.SenderContactName is not None or
            self.EventNotificationDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SendNotificationsRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SendNotificationsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SendNotificationsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SendNotificationsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SendNotificationsRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SendNotificationsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.MultiPiece is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MultiPiece>%s</ns:MultiPiece>%s' % (self.gds_format_boolean(self.MultiPiece, input_name='MultiPiece'), eol_))
        if self.PagingToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagingToken>%s</ns:PagingToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), eol_))
        if self.TrackingNumberUniqueId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumberUniqueId>%s</ns:TrackingNumberUniqueId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueId), input_name='TrackingNumberUniqueId')), eol_))
        if self.ShipDateRangeBegin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDateRangeBegin>%s</ns:ShipDateRangeBegin>%s' % (self.gds_format_date(self.ShipDateRangeBegin, input_name='ShipDateRangeBegin'), eol_))
        if self.ShipDateRangeEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDateRangeEnd>%s</ns:ShipDateRangeEnd>%s' % (self.gds_format_date(self.ShipDateRangeEnd, input_name='ShipDateRangeEnd'), eol_))
        if self.SenderEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SenderEMailAddress>%s</ns:SenderEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SenderEMailAddress), input_name='SenderEMailAddress')), eol_))
        if self.SenderContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SenderContactName>%s</ns:SenderContactName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SenderContactName), input_name='SenderContactName')), eol_))
        if self.EventNotificationDetail is not None:
            self.EventNotificationDetail.export(outfile, level, namespace_, name_='EventNotificationDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'MultiPiece':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'MultiPiece')
            self.MultiPiece = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'TrackingNumberUniqueId':
            TrackingNumberUniqueId_ = child_.text
            TrackingNumberUniqueId_ = self.gds_validate_string(TrackingNumberUniqueId_, node, 'TrackingNumberUniqueId')
            self.TrackingNumberUniqueId = TrackingNumberUniqueId_
        elif nodeName_ == 'ShipDateRangeBegin':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeBegin = dval_
        elif nodeName_ == 'ShipDateRangeEnd':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeEnd = dval_
        elif nodeName_ == 'SenderEMailAddress':
            SenderEMailAddress_ = child_.text
            SenderEMailAddress_ = self.gds_validate_string(SenderEMailAddress_, node, 'SenderEMailAddress')
            self.SenderEMailAddress = SenderEMailAddress_
        elif nodeName_ == 'SenderContactName':
            SenderContactName_ = child_.text
            SenderContactName_ = self.gds_validate_string(SenderContactName_, node, 'SenderContactName')
            self.SenderContactName = SenderContactName_
        elif nodeName_ == 'EventNotificationDetail':
            obj_ = ShipmentEventNotificationDetail.factory()
            obj_.build(child_)
            self.EventNotificationDetail = obj_
            obj_.original_tagname_ = 'EventNotificationDetail'
# end class SendNotificationsRequest


class ShipmentEventNotificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, EventNotifications=None):
        self.original_tagname_ = None
        self.AggregationType = AggregationType
        self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        self.PersonalMessage = PersonalMessage
        if EventNotifications is None:
            self.EventNotifications = []
        else:
            self.EventNotifications = EventNotifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationDetail.subclass:
            return ShipmentEventNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AggregationType(self): return self.AggregationType
    def set_AggregationType(self, AggregationType): self.AggregationType = AggregationType
    def get_PersonalMessage(self): return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage): self.PersonalMessage = PersonalMessage
    def get_EventNotifications(self): return self.EventNotifications
    def set_EventNotifications(self, EventNotifications): self.EventNotifications = EventNotifications
    def add_EventNotifications(self, value): self.EventNotifications.append(value)
    def insert_EventNotifications_at(self, index, value): self.EventNotifications.insert(index, value)
    def replace_EventNotifications_at(self, index, value): self.EventNotifications[index] = value
    def validate_ShipmentNotificationAggregationType(self, value):
        # Validate type ShipmentNotificationAggregationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PER_PACKAGE', 'PER_SHIPMENT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipmentNotificationAggregationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.EventNotifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentEventNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentEventNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentEventNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AggregationType>%s</ns:AggregationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AggregationType), input_name='AggregationType')), eol_))
        if self.PersonalMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonalMessage>%s</ns:PersonalMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), eol_))
        for EventNotifications_ in self.EventNotifications:
            EventNotifications_.export(outfile, level, namespace_, name_='EventNotifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AggregationType':
            AggregationType_ = child_.text
            AggregationType_ = self.gds_validate_string(AggregationType_, node, 'AggregationType')
            self.AggregationType = AggregationType_
            # validate type ShipmentNotificationAggregationType
            self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        elif nodeName_ == 'PersonalMessage':
            PersonalMessage_ = child_.text
            PersonalMessage_ = self.gds_validate_string(PersonalMessage_, node, 'PersonalMessage')
            self.PersonalMessage = PersonalMessage_
        elif nodeName_ == 'EventNotifications':
            obj_ = ShipmentEventNotificationSpecification.factory()
            obj_.build(child_)
            self.EventNotifications.append(obj_)
            obj_.original_tagname_ = 'EventNotifications'
# end class ShipmentEventNotificationDetail


class ShipmentEventNotificationSpecification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Role=None, Events=None, NotificationDetail=None, FormatSpecification=None):
        self.original_tagname_ = None
        self.Role = Role
        self.validate_ShipmentNotificationRoleType(self.Role)
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.NotificationDetail = NotificationDetail
        self.FormatSpecification = FormatSpecification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationSpecification.subclass:
            return ShipmentEventNotificationSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Role(self): return self.Role
    def set_Role(self, Role): self.Role = Role
    def get_Events(self): return self.Events
    def set_Events(self, Events): self.Events = Events
    def add_Events(self, value): self.Events.append(value)
    def insert_Events_at(self, index, value): self.Events.insert(index, value)
    def replace_Events_at(self, index, value): self.Events[index] = value
    def get_NotificationDetail(self): return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail): self.NotificationDetail = NotificationDetail
    def get_FormatSpecification(self): return self.FormatSpecification
    def set_FormatSpecification(self, FormatSpecification): self.FormatSpecification = FormatSpecification
    def validate_ShipmentNotificationRoleType(self, value):
        # Validate type ShipmentNotificationRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipmentNotificationRoleType' % {"value" : value.encode("utf-8")} )
    def validate_NotificationEventType(self, value):
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_SHIPMENT', 'ON_TENDER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationEventType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Role is not None or
            self.Events or
            self.NotificationDetail is not None or
            self.FormatSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationSpecification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentEventNotificationSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentEventNotificationSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentEventNotificationSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Role>%s</ns:Role>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), eol_))
        for Events_ in self.Events:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Events>%s</ns:Events>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Events_), input_name='Events')), eol_))
        if self.NotificationDetail is not None:
            self.NotificationDetail.export(outfile, level, namespace_, name_='NotificationDetail', pretty_print=pretty_print)
        if self.FormatSpecification is not None:
            self.FormatSpecification.export(outfile, level, namespace_, name_='FormatSpecification', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Role':
            Role_ = child_.text
            Role_ = self.gds_validate_string(Role_, node, 'Role')
            self.Role = Role_
            # validate type ShipmentNotificationRoleType
            self.validate_ShipmentNotificationRoleType(self.Role)
        elif nodeName_ == 'Events':
            Events_ = child_.text
            Events_ = self.gds_validate_string(Events_, node, 'Events')
            self.Events.append(Events_)
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.Events[-1])
        elif nodeName_ == 'NotificationDetail':
            obj_ = NotificationDetail.factory()
            obj_.build(child_)
            self.NotificationDetail = obj_
            obj_.original_tagname_ = 'NotificationDetail'
        elif nodeName_ == 'FormatSpecification':
            obj_ = ShipmentNotificationFormatSpecification.factory()
            obj_.build(child_)
            self.FormatSpecification = obj_
            obj_.original_tagname_ = 'FormatSpecification'
# end class ShipmentEventNotificationSpecification


class ShipmentNotificationFormatSpecification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_NotificationFormatType(self.Type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentNotificationFormatSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentNotificationFormatSpecification.subclass:
            return ShipmentNotificationFormatSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentNotificationFormatSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_NotificationFormatType(self, value):
        # Validate type NotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HTML', 'TEXT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationFormatType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentNotificationFormatSpecification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentNotificationFormatSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentNotificationFormatSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentNotificationFormatSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentNotificationFormatSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentNotificationFormatSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type NotificationFormatType
            self.validate_NotificationFormatType(self.Type)
# end class ShipmentNotificationFormatSpecification


class SignatureImageDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Image=None, Notifications=None):
        self.original_tagname_ = None
        self.Image = Image
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureImageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureImageDetail.subclass:
            return SignatureImageDetail.subclass(*args_, **kwargs_)
        else:
            return SignatureImageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Image(self): return self.Image
    def set_Image(self, Image): self.Image = Image
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def hasContent_(self):
        if (
            self.Image is not None or
            self.Notifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SignatureImageDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureImageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureImageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SignatureImageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SignatureImageDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SignatureImageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Image is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Image>%s</ns:Image>%s' % (self.gds_format_base64(self.Image, input_name='Image'), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Image':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Image')
            else:
                bval_ = None
            self.Image = bval_
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
# end class SignatureImageDetail


class SpecialInstructionStatusDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Status=None, StatusCreateTime=None):
        self.original_tagname_ = None
        self.Status = Status
        self.validate_SpecialInstructionsStatusCode(self.Status)
        if isinstance(StatusCreateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StatusCreateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StatusCreateTime
        self.StatusCreateTime = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialInstructionStatusDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialInstructionStatusDetail.subclass:
            return SpecialInstructionStatusDetail.subclass(*args_, **kwargs_)
        else:
            return SpecialInstructionStatusDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_StatusCreateTime(self): return self.StatusCreateTime
    def set_StatusCreateTime(self, StatusCreateTime): self.StatusCreateTime = StatusCreateTime
    def validate_SpecialInstructionsStatusCode(self, value):
        # Validate type SpecialInstructionsStatusCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCEPTED', 'CANCELLED', 'DENIED', 'HELD', 'MODIFIED', 'RELINQUISHED', 'REQUESTED', 'SET']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialInstructionsStatusCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Status is not None or
            self.StatusCreateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SpecialInstructionStatusDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialInstructionStatusDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialInstructionStatusDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SpecialInstructionStatusDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SpecialInstructionStatusDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SpecialInstructionStatusDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Status>%s</ns:Status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), eol_))
        if self.StatusCreateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusCreateTime>%s</ns:StatusCreateTime>%s' % (self.gds_format_datetime(self.StatusCreateTime, input_name='StatusCreateTime'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
            # validate type SpecialInstructionsStatusCode
            self.validate_SpecialInstructionsStatusCode(self.Status)
        elif nodeName_ == 'StatusCreateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StatusCreateTime = dval_
# end class SpecialInstructionStatusDetail


class StringBarcode(GeneratedsSuper):
    """Each instance of this data type represents a barcode whose content
    must be represented as ASCII text (i.e. not binary data)."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_StringBarcodeType(self.Type)
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringBarcode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringBarcode.subclass:
            return StringBarcode.subclass(*args_, **kwargs_)
        else:
            return StringBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def validate_StringBarcodeType(self, value):
        # Validate type StringBarcodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ADDRESS', 'ASTRA', 'FEDEX_1D', 'GROUND', 'POSTAL', 'USPS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StringBarcodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='StringBarcode', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringBarcode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StringBarcode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='StringBarcode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='StringBarcode'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='StringBarcode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type StringBarcodeType
            self.validate_StringBarcodeType(self.Type)
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class StringBarcode


class TrackAdvanceNotificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EstimatedTimeOfArrival=None, Reason=None, Status=None, StatusDescription=None, StatusTime=None):
        self.original_tagname_ = None
        if isinstance(EstimatedTimeOfArrival, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EstimatedTimeOfArrival, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EstimatedTimeOfArrival
        self.EstimatedTimeOfArrival = initvalue_
        self.Reason = Reason
        self.Status = Status
        self.validate_TrackAdvanceNotificationStatusType(self.Status)
        self.StatusDescription = StatusDescription
        if isinstance(StatusTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StatusTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StatusTime
        self.StatusTime = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAdvanceNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAdvanceNotificationDetail.subclass:
            return TrackAdvanceNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return TrackAdvanceNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EstimatedTimeOfArrival(self): return self.EstimatedTimeOfArrival
    def set_EstimatedTimeOfArrival(self, EstimatedTimeOfArrival): self.EstimatedTimeOfArrival = EstimatedTimeOfArrival
    def get_Reason(self): return self.Reason
    def set_Reason(self, Reason): self.Reason = Reason
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_StatusDescription(self): return self.StatusDescription
    def set_StatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def get_StatusTime(self): return self.StatusTime
    def set_StatusTime(self, StatusTime): self.StatusTime = StatusTime
    def validate_TrackAdvanceNotificationStatusType(self, value):
        # Validate type TrackAdvanceNotificationStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BACK_ON_TRACK', 'FAIL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackAdvanceNotificationStatusType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.EstimatedTimeOfArrival is not None or
            self.Reason is not None or
            self.Status is not None or
            self.StatusDescription is not None or
            self.StatusTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackAdvanceNotificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAdvanceNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackAdvanceNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackAdvanceNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackAdvanceNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackAdvanceNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EstimatedTimeOfArrival is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EstimatedTimeOfArrival>%s</ns:EstimatedTimeOfArrival>%s' % (self.gds_format_datetime(self.EstimatedTimeOfArrival, input_name='EstimatedTimeOfArrival'), eol_))
        if self.Reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Reason>%s</ns:Reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Status>%s</ns:Status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), eol_))
        if self.StatusDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusDescription>%s</ns:StatusDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), eol_))
        if self.StatusTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusTime>%s</ns:StatusTime>%s' % (self.gds_format_datetime(self.StatusTime, input_name='StatusTime'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EstimatedTimeOfArrival':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EstimatedTimeOfArrival = dval_
        elif nodeName_ == 'Reason':
            Reason_ = child_.text
            Reason_ = self.gds_validate_string(Reason_, node, 'Reason')
            self.Reason = Reason_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
            # validate type TrackAdvanceNotificationStatusType
            self.validate_TrackAdvanceNotificationStatusType(self.Status)
        elif nodeName_ == 'StatusDescription':
            StatusDescription_ = child_.text
            StatusDescription_ = self.gds_validate_string(StatusDescription_, node, 'StatusDescription')
            self.StatusDescription = StatusDescription_
        elif nodeName_ == 'StatusTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StatusTime = dval_
# end class TrackAdvanceNotificationDetail


class TrackChargeDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, ChargeAmount=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_TrackChargeDetailType(self.Type)
        self.ChargeAmount = ChargeAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackChargeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackChargeDetail.subclass:
            return TrackChargeDetail.subclass(*args_, **kwargs_)
        else:
            return TrackChargeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_ChargeAmount(self): return self.ChargeAmount
    def set_ChargeAmount(self, ChargeAmount): self.ChargeAmount = ChargeAmount
    def validate_TrackChargeDetailType(self, value):
        # Validate type TrackChargeDetailType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ORIGINAL_CHARGES']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackChargeDetailType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ChargeAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackChargeDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackChargeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackChargeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackChargeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackChargeDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackChargeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.ChargeAmount is not None:
            self.ChargeAmount.export(outfile, level, namespace_, name_='ChargeAmount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TrackChargeDetailType
            self.validate_TrackChargeDetailType(self.Type)
        elif nodeName_ == 'ChargeAmount':
            obj_ = Money.factory()
            obj_.build(child_)
            self.ChargeAmount = obj_
            obj_.original_tagname_ = 'ChargeAmount'
# end class TrackChargeDetail


class TrackDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Notification=None, TrackingNumber=None, Barcode=None, TrackingNumberUniqueIdentifier=None, StatusDetail=None, InformationNotes=None, CustomerExceptionRequests=None, Reconciliation=None, ServiceCommitMessage=None, DestinationServiceArea=None, DestinationServiceAreaDescription=None, CarrierCode=None, OperatingCompany=None, OperatingCompanyOrCarrierDescription=None, CartageAgentCompanyName=None, ProductionLocationContactAndAddress=None, OtherIdentifiers=None, FormId=None, Service=None, PackageWeight=None, PackageDimensions=None, PackageDimensionalWeight=None, ShipmentWeight=None, Packaging=None, PackagingType=None, PhysicalPackagingType=None, PackageSequenceNumber=None, PackageCount=None, CreatorSoftwareId=None, Charges=None, NickName=None, Notes=None, Attributes=None, ShipmentContents=None, PackageContents=None, ClearanceLocationCode=None, Commodities=None, ReturnDetail=None, CustomsOptionDetails=None, AdvanceNotificationDetail=None, SpecialHandlings=None, Payments=None, Shipper=None, PossessionStatus=None, ShipperAddress=None, OriginLocationAddress=None, OriginStationId=None, DatesOrTimes=None, TotalTransitDistance=None, DistanceToDestination=None, SpecialInstructions=None, Recipient=None, LastUpdatedDestinationAddress=None, DestinationAddress=None, HoldAtLocationContact=None, HoldAtLocationAddress=None, DestinationStationId=None, DestinationLocationAddress=None, DestinationLocationType=None, DestinationLocationTimeZoneOffset=None, ActualDeliveryAddress=None, OfficeOrderDeliveryMethod=None, DeliveryLocationType=None, DeliveryLocationDescription=None, DeliveryAttempts=None, DeliverySignatureName=None, PieceCountVerificationDetails=None, TotalUniqueAddressCountInConsolidation=None, AvailableImages=None, Signature=None, NotificationEventsAvailable=None, SplitShipmentParts=None, DeliveryOptionEligibilityDetails=None, Events=None):
        self.original_tagname_ = None
        self.Notification = Notification
        self.TrackingNumber = TrackingNumber
        self.Barcode = Barcode
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.StatusDetail = StatusDetail
        if InformationNotes is None:
            self.InformationNotes = []
        else:
            self.InformationNotes = InformationNotes
        if CustomerExceptionRequests is None:
            self.CustomerExceptionRequests = []
        else:
            self.CustomerExceptionRequests = CustomerExceptionRequests
        self.Reconciliation = Reconciliation
        self.ServiceCommitMessage = ServiceCommitMessage
        self.DestinationServiceArea = DestinationServiceArea
        self.DestinationServiceAreaDescription = DestinationServiceAreaDescription
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.OperatingCompany = OperatingCompany
        self.validate_OperatingCompanyType(self.OperatingCompany)
        self.OperatingCompanyOrCarrierDescription = OperatingCompanyOrCarrierDescription
        self.CartageAgentCompanyName = CartageAgentCompanyName
        self.ProductionLocationContactAndAddress = ProductionLocationContactAndAddress
        if OtherIdentifiers is None:
            self.OtherIdentifiers = []
        else:
            self.OtherIdentifiers = OtherIdentifiers
        self.FormId = FormId
        self.Service = Service
        self.PackageWeight = PackageWeight
        self.PackageDimensions = PackageDimensions
        self.PackageDimensionalWeight = PackageDimensionalWeight
        self.ShipmentWeight = ShipmentWeight
        self.Packaging = Packaging
        self.PackagingType = PackagingType
        self.validate_PackagingType(self.PackagingType)
        self.PhysicalPackagingType = PhysicalPackagingType
        self.validate_PhysicalPackagingType(self.PhysicalPackagingType)
        self.PackageSequenceNumber = PackageSequenceNumber
        self.PackageCount = PackageCount
        self.CreatorSoftwareId = CreatorSoftwareId
        if Charges is None:
            self.Charges = []
        else:
            self.Charges = Charges
        self.NickName = NickName
        self.Notes = Notes
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        if ShipmentContents is None:
            self.ShipmentContents = []
        else:
            self.ShipmentContents = ShipmentContents
        if PackageContents is None:
            self.PackageContents = []
        else:
            self.PackageContents = PackageContents
        self.ClearanceLocationCode = ClearanceLocationCode
        if Commodities is None:
            self.Commodities = []
        else:
            self.Commodities = Commodities
        self.ReturnDetail = ReturnDetail
        if CustomsOptionDetails is None:
            self.CustomsOptionDetails = []
        else:
            self.CustomsOptionDetails = CustomsOptionDetails
        self.AdvanceNotificationDetail = AdvanceNotificationDetail
        if SpecialHandlings is None:
            self.SpecialHandlings = []
        else:
            self.SpecialHandlings = SpecialHandlings
        if Payments is None:
            self.Payments = []
        else:
            self.Payments = Payments
        self.Shipper = Shipper
        self.PossessionStatus = PossessionStatus
        self.validate_TrackPossessionStatusType(self.PossessionStatus)
        self.ShipperAddress = ShipperAddress
        self.OriginLocationAddress = OriginLocationAddress
        self.OriginStationId = OriginStationId
        if DatesOrTimes is None:
            self.DatesOrTimes = []
        else:
            self.DatesOrTimes = DatesOrTimes
        self.TotalTransitDistance = TotalTransitDistance
        self.DistanceToDestination = DistanceToDestination
        if SpecialInstructions is None:
            self.SpecialInstructions = []
        else:
            self.SpecialInstructions = SpecialInstructions
        self.Recipient = Recipient
        self.LastUpdatedDestinationAddress = LastUpdatedDestinationAddress
        self.DestinationAddress = DestinationAddress
        self.HoldAtLocationContact = HoldAtLocationContact
        self.HoldAtLocationAddress = HoldAtLocationAddress
        self.DestinationStationId = DestinationStationId
        self.DestinationLocationAddress = DestinationLocationAddress
        self.DestinationLocationType = DestinationLocationType
        self.validate_FedExLocationType(self.DestinationLocationType)
        self.DestinationLocationTimeZoneOffset = DestinationLocationTimeZoneOffset
        self.ActualDeliveryAddress = ActualDeliveryAddress
        self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod
        self.validate_OfficeOrderDeliveryMethodType(self.OfficeOrderDeliveryMethod)
        self.DeliveryLocationType = DeliveryLocationType
        self.validate_TrackDeliveryLocationType(self.DeliveryLocationType)
        self.DeliveryLocationDescription = DeliveryLocationDescription
        self.DeliveryAttempts = DeliveryAttempts
        self.DeliverySignatureName = DeliverySignatureName
        if PieceCountVerificationDetails is None:
            self.PieceCountVerificationDetails = []
        else:
            self.PieceCountVerificationDetails = PieceCountVerificationDetails
        self.TotalUniqueAddressCountInConsolidation = TotalUniqueAddressCountInConsolidation
        if AvailableImages is None:
            self.AvailableImages = []
        else:
            self.AvailableImages = AvailableImages
        self.Signature = Signature
        if NotificationEventsAvailable is None:
            self.NotificationEventsAvailable = []
        else:
            self.NotificationEventsAvailable = NotificationEventsAvailable
        if SplitShipmentParts is None:
            self.SplitShipmentParts = []
        else:
            self.SplitShipmentParts = SplitShipmentParts
        if DeliveryOptionEligibilityDetails is None:
            self.DeliveryOptionEligibilityDetails = []
        else:
            self.DeliveryOptionEligibilityDetails = DeliveryOptionEligibilityDetails
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackDetail.subclass:
            return TrackDetail.subclass(*args_, **kwargs_)
        else:
            return TrackDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Notification(self): return self.Notification
    def set_Notification(self, Notification): self.Notification = Notification
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_Barcode(self): return self.Barcode
    def set_Barcode(self, Barcode): self.Barcode = Barcode
    def get_TrackingNumberUniqueIdentifier(self): return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier): self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_StatusDetail(self): return self.StatusDetail
    def set_StatusDetail(self, StatusDetail): self.StatusDetail = StatusDetail
    def get_InformationNotes(self): return self.InformationNotes
    def set_InformationNotes(self, InformationNotes): self.InformationNotes = InformationNotes
    def add_InformationNotes(self, value): self.InformationNotes.append(value)
    def insert_InformationNotes_at(self, index, value): self.InformationNotes.insert(index, value)
    def replace_InformationNotes_at(self, index, value): self.InformationNotes[index] = value
    def get_CustomerExceptionRequests(self): return self.CustomerExceptionRequests
    def set_CustomerExceptionRequests(self, CustomerExceptionRequests): self.CustomerExceptionRequests = CustomerExceptionRequests
    def add_CustomerExceptionRequests(self, value): self.CustomerExceptionRequests.append(value)
    def insert_CustomerExceptionRequests_at(self, index, value): self.CustomerExceptionRequests.insert(index, value)
    def replace_CustomerExceptionRequests_at(self, index, value): self.CustomerExceptionRequests[index] = value
    def get_Reconciliation(self): return self.Reconciliation
    def set_Reconciliation(self, Reconciliation): self.Reconciliation = Reconciliation
    def get_ServiceCommitMessage(self): return self.ServiceCommitMessage
    def set_ServiceCommitMessage(self, ServiceCommitMessage): self.ServiceCommitMessage = ServiceCommitMessage
    def get_DestinationServiceArea(self): return self.DestinationServiceArea
    def set_DestinationServiceArea(self, DestinationServiceArea): self.DestinationServiceArea = DestinationServiceArea
    def get_DestinationServiceAreaDescription(self): return self.DestinationServiceAreaDescription
    def set_DestinationServiceAreaDescription(self, DestinationServiceAreaDescription): self.DestinationServiceAreaDescription = DestinationServiceAreaDescription
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def get_OperatingCompany(self): return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany): self.OperatingCompany = OperatingCompany
    def get_OperatingCompanyOrCarrierDescription(self): return self.OperatingCompanyOrCarrierDescription
    def set_OperatingCompanyOrCarrierDescription(self, OperatingCompanyOrCarrierDescription): self.OperatingCompanyOrCarrierDescription = OperatingCompanyOrCarrierDescription
    def get_CartageAgentCompanyName(self): return self.CartageAgentCompanyName
    def set_CartageAgentCompanyName(self, CartageAgentCompanyName): self.CartageAgentCompanyName = CartageAgentCompanyName
    def get_ProductionLocationContactAndAddress(self): return self.ProductionLocationContactAndAddress
    def set_ProductionLocationContactAndAddress(self, ProductionLocationContactAndAddress): self.ProductionLocationContactAndAddress = ProductionLocationContactAndAddress
    def get_OtherIdentifiers(self): return self.OtherIdentifiers
    def set_OtherIdentifiers(self, OtherIdentifiers): self.OtherIdentifiers = OtherIdentifiers
    def add_OtherIdentifiers(self, value): self.OtherIdentifiers.append(value)
    def insert_OtherIdentifiers_at(self, index, value): self.OtherIdentifiers.insert(index, value)
    def replace_OtherIdentifiers_at(self, index, value): self.OtherIdentifiers[index] = value
    def get_FormId(self): return self.FormId
    def set_FormId(self, FormId): self.FormId = FormId
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_PackageWeight(self): return self.PackageWeight
    def set_PackageWeight(self, PackageWeight): self.PackageWeight = PackageWeight
    def get_PackageDimensions(self): return self.PackageDimensions
    def set_PackageDimensions(self, PackageDimensions): self.PackageDimensions = PackageDimensions
    def get_PackageDimensionalWeight(self): return self.PackageDimensionalWeight
    def set_PackageDimensionalWeight(self, PackageDimensionalWeight): self.PackageDimensionalWeight = PackageDimensionalWeight
    def get_ShipmentWeight(self): return self.ShipmentWeight
    def set_ShipmentWeight(self, ShipmentWeight): self.ShipmentWeight = ShipmentWeight
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_PhysicalPackagingType(self): return self.PhysicalPackagingType
    def set_PhysicalPackagingType(self, PhysicalPackagingType): self.PhysicalPackagingType = PhysicalPackagingType
    def get_PackageSequenceNumber(self): return self.PackageSequenceNumber
    def set_PackageSequenceNumber(self, PackageSequenceNumber): self.PackageSequenceNumber = PackageSequenceNumber
    def get_PackageCount(self): return self.PackageCount
    def set_PackageCount(self, PackageCount): self.PackageCount = PackageCount
    def get_CreatorSoftwareId(self): return self.CreatorSoftwareId
    def set_CreatorSoftwareId(self, CreatorSoftwareId): self.CreatorSoftwareId = CreatorSoftwareId
    def get_Charges(self): return self.Charges
    def set_Charges(self, Charges): self.Charges = Charges
    def add_Charges(self, value): self.Charges.append(value)
    def insert_Charges_at(self, index, value): self.Charges.insert(index, value)
    def replace_Charges_at(self, index, value): self.Charges[index] = value
    def get_NickName(self): return self.NickName
    def set_NickName(self, NickName): self.NickName = NickName
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Attributes(self): return self.Attributes
    def set_Attributes(self, Attributes): self.Attributes = Attributes
    def add_Attributes(self, value): self.Attributes.append(value)
    def insert_Attributes_at(self, index, value): self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value): self.Attributes[index] = value
    def get_ShipmentContents(self): return self.ShipmentContents
    def set_ShipmentContents(self, ShipmentContents): self.ShipmentContents = ShipmentContents
    def add_ShipmentContents(self, value): self.ShipmentContents.append(value)
    def insert_ShipmentContents_at(self, index, value): self.ShipmentContents.insert(index, value)
    def replace_ShipmentContents_at(self, index, value): self.ShipmentContents[index] = value
    def get_PackageContents(self): return self.PackageContents
    def set_PackageContents(self, PackageContents): self.PackageContents = PackageContents
    def add_PackageContents(self, value): self.PackageContents.append(value)
    def insert_PackageContents_at(self, index, value): self.PackageContents.insert(index, value)
    def replace_PackageContents_at(self, index, value): self.PackageContents[index] = value
    def get_ClearanceLocationCode(self): return self.ClearanceLocationCode
    def set_ClearanceLocationCode(self, ClearanceLocationCode): self.ClearanceLocationCode = ClearanceLocationCode
    def get_Commodities(self): return self.Commodities
    def set_Commodities(self, Commodities): self.Commodities = Commodities
    def add_Commodities(self, value): self.Commodities.append(value)
    def insert_Commodities_at(self, index, value): self.Commodities.insert(index, value)
    def replace_Commodities_at(self, index, value): self.Commodities[index] = value
    def get_ReturnDetail(self): return self.ReturnDetail
    def set_ReturnDetail(self, ReturnDetail): self.ReturnDetail = ReturnDetail
    def get_CustomsOptionDetails(self): return self.CustomsOptionDetails
    def set_CustomsOptionDetails(self, CustomsOptionDetails): self.CustomsOptionDetails = CustomsOptionDetails
    def add_CustomsOptionDetails(self, value): self.CustomsOptionDetails.append(value)
    def insert_CustomsOptionDetails_at(self, index, value): self.CustomsOptionDetails.insert(index, value)
    def replace_CustomsOptionDetails_at(self, index, value): self.CustomsOptionDetails[index] = value
    def get_AdvanceNotificationDetail(self): return self.AdvanceNotificationDetail
    def set_AdvanceNotificationDetail(self, AdvanceNotificationDetail): self.AdvanceNotificationDetail = AdvanceNotificationDetail
    def get_SpecialHandlings(self): return self.SpecialHandlings
    def set_SpecialHandlings(self, SpecialHandlings): self.SpecialHandlings = SpecialHandlings
    def add_SpecialHandlings(self, value): self.SpecialHandlings.append(value)
    def insert_SpecialHandlings_at(self, index, value): self.SpecialHandlings.insert(index, value)
    def replace_SpecialHandlings_at(self, index, value): self.SpecialHandlings[index] = value
    def get_Payments(self): return self.Payments
    def set_Payments(self, Payments): self.Payments = Payments
    def add_Payments(self, value): self.Payments.append(value)
    def insert_Payments_at(self, index, value): self.Payments.insert(index, value)
    def replace_Payments_at(self, index, value): self.Payments[index] = value
    def get_Shipper(self): return self.Shipper
    def set_Shipper(self, Shipper): self.Shipper = Shipper
    def get_PossessionStatus(self): return self.PossessionStatus
    def set_PossessionStatus(self, PossessionStatus): self.PossessionStatus = PossessionStatus
    def get_ShipperAddress(self): return self.ShipperAddress
    def set_ShipperAddress(self, ShipperAddress): self.ShipperAddress = ShipperAddress
    def get_OriginLocationAddress(self): return self.OriginLocationAddress
    def set_OriginLocationAddress(self, OriginLocationAddress): self.OriginLocationAddress = OriginLocationAddress
    def get_OriginStationId(self): return self.OriginStationId
    def set_OriginStationId(self, OriginStationId): self.OriginStationId = OriginStationId
    def get_DatesOrTimes(self): return self.DatesOrTimes
    def set_DatesOrTimes(self, DatesOrTimes): self.DatesOrTimes = DatesOrTimes
    def add_DatesOrTimes(self, value): self.DatesOrTimes.append(value)
    def insert_DatesOrTimes_at(self, index, value): self.DatesOrTimes.insert(index, value)
    def replace_DatesOrTimes_at(self, index, value): self.DatesOrTimes[index] = value
    def get_TotalTransitDistance(self): return self.TotalTransitDistance
    def set_TotalTransitDistance(self, TotalTransitDistance): self.TotalTransitDistance = TotalTransitDistance
    def get_DistanceToDestination(self): return self.DistanceToDestination
    def set_DistanceToDestination(self, DistanceToDestination): self.DistanceToDestination = DistanceToDestination
    def get_SpecialInstructions(self): return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions): self.SpecialInstructions = SpecialInstructions
    def add_SpecialInstructions(self, value): self.SpecialInstructions.append(value)
    def insert_SpecialInstructions_at(self, index, value): self.SpecialInstructions.insert(index, value)
    def replace_SpecialInstructions_at(self, index, value): self.SpecialInstructions[index] = value
    def get_Recipient(self): return self.Recipient
    def set_Recipient(self, Recipient): self.Recipient = Recipient
    def get_LastUpdatedDestinationAddress(self): return self.LastUpdatedDestinationAddress
    def set_LastUpdatedDestinationAddress(self, LastUpdatedDestinationAddress): self.LastUpdatedDestinationAddress = LastUpdatedDestinationAddress
    def get_DestinationAddress(self): return self.DestinationAddress
    def set_DestinationAddress(self, DestinationAddress): self.DestinationAddress = DestinationAddress
    def get_HoldAtLocationContact(self): return self.HoldAtLocationContact
    def set_HoldAtLocationContact(self, HoldAtLocationContact): self.HoldAtLocationContact = HoldAtLocationContact
    def get_HoldAtLocationAddress(self): return self.HoldAtLocationAddress
    def set_HoldAtLocationAddress(self, HoldAtLocationAddress): self.HoldAtLocationAddress = HoldAtLocationAddress
    def get_DestinationStationId(self): return self.DestinationStationId
    def set_DestinationStationId(self, DestinationStationId): self.DestinationStationId = DestinationStationId
    def get_DestinationLocationAddress(self): return self.DestinationLocationAddress
    def set_DestinationLocationAddress(self, DestinationLocationAddress): self.DestinationLocationAddress = DestinationLocationAddress
    def get_DestinationLocationType(self): return self.DestinationLocationType
    def set_DestinationLocationType(self, DestinationLocationType): self.DestinationLocationType = DestinationLocationType
    def get_DestinationLocationTimeZoneOffset(self): return self.DestinationLocationTimeZoneOffset
    def set_DestinationLocationTimeZoneOffset(self, DestinationLocationTimeZoneOffset): self.DestinationLocationTimeZoneOffset = DestinationLocationTimeZoneOffset
    def get_ActualDeliveryAddress(self): return self.ActualDeliveryAddress
    def set_ActualDeliveryAddress(self, ActualDeliveryAddress): self.ActualDeliveryAddress = ActualDeliveryAddress
    def get_OfficeOrderDeliveryMethod(self): return self.OfficeOrderDeliveryMethod
    def set_OfficeOrderDeliveryMethod(self, OfficeOrderDeliveryMethod): self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod
    def get_DeliveryLocationType(self): return self.DeliveryLocationType
    def set_DeliveryLocationType(self, DeliveryLocationType): self.DeliveryLocationType = DeliveryLocationType
    def get_DeliveryLocationDescription(self): return self.DeliveryLocationDescription
    def set_DeliveryLocationDescription(self, DeliveryLocationDescription): self.DeliveryLocationDescription = DeliveryLocationDescription
    def get_DeliveryAttempts(self): return self.DeliveryAttempts
    def set_DeliveryAttempts(self, DeliveryAttempts): self.DeliveryAttempts = DeliveryAttempts
    def get_DeliverySignatureName(self): return self.DeliverySignatureName
    def set_DeliverySignatureName(self, DeliverySignatureName): self.DeliverySignatureName = DeliverySignatureName
    def get_PieceCountVerificationDetails(self): return self.PieceCountVerificationDetails
    def set_PieceCountVerificationDetails(self, PieceCountVerificationDetails): self.PieceCountVerificationDetails = PieceCountVerificationDetails
    def add_PieceCountVerificationDetails(self, value): self.PieceCountVerificationDetails.append(value)
    def insert_PieceCountVerificationDetails_at(self, index, value): self.PieceCountVerificationDetails.insert(index, value)
    def replace_PieceCountVerificationDetails_at(self, index, value): self.PieceCountVerificationDetails[index] = value
    def get_TotalUniqueAddressCountInConsolidation(self): return self.TotalUniqueAddressCountInConsolidation
    def set_TotalUniqueAddressCountInConsolidation(self, TotalUniqueAddressCountInConsolidation): self.TotalUniqueAddressCountInConsolidation = TotalUniqueAddressCountInConsolidation
    def get_AvailableImages(self): return self.AvailableImages
    def set_AvailableImages(self, AvailableImages): self.AvailableImages = AvailableImages
    def add_AvailableImages(self, value): self.AvailableImages.append(value)
    def insert_AvailableImages_at(self, index, value): self.AvailableImages.insert(index, value)
    def replace_AvailableImages_at(self, index, value): self.AvailableImages[index] = value
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def get_NotificationEventsAvailable(self): return self.NotificationEventsAvailable
    def set_NotificationEventsAvailable(self, NotificationEventsAvailable): self.NotificationEventsAvailable = NotificationEventsAvailable
    def add_NotificationEventsAvailable(self, value): self.NotificationEventsAvailable.append(value)
    def insert_NotificationEventsAvailable_at(self, index, value): self.NotificationEventsAvailable.insert(index, value)
    def replace_NotificationEventsAvailable_at(self, index, value): self.NotificationEventsAvailable[index] = value
    def get_SplitShipmentParts(self): return self.SplitShipmentParts
    def set_SplitShipmentParts(self, SplitShipmentParts): self.SplitShipmentParts = SplitShipmentParts
    def add_SplitShipmentParts(self, value): self.SplitShipmentParts.append(value)
    def insert_SplitShipmentParts_at(self, index, value): self.SplitShipmentParts.insert(index, value)
    def replace_SplitShipmentParts_at(self, index, value): self.SplitShipmentParts[index] = value
    def get_DeliveryOptionEligibilityDetails(self): return self.DeliveryOptionEligibilityDetails
    def set_DeliveryOptionEligibilityDetails(self, DeliveryOptionEligibilityDetails): self.DeliveryOptionEligibilityDetails = DeliveryOptionEligibilityDetails
    def add_DeliveryOptionEligibilityDetails(self, value): self.DeliveryOptionEligibilityDetails.append(value)
    def insert_DeliveryOptionEligibilityDetails_at(self, index, value): self.DeliveryOptionEligibilityDetails.insert(index, value)
    def replace_DeliveryOptionEligibilityDetails_at(self, index, value): self.DeliveryOptionEligibilityDetails[index] = value
    def get_Events(self): return self.Events
    def set_Events(self, Events): self.Events = Events
    def add_Events(self, value): self.Events.append(value)
    def insert_Events_at(self, index, value): self.Events.insert(index, value)
    def replace_Events_at(self, index, value): self.Events[index] = value
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_OperatingCompanyType(self, value):
        # Validate type OperatingCompanyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_CARGO', 'FEDEX_CORPORATE_SERVICES', 'FEDEX_CORPORATION', 'FEDEX_CUSTOMER_INFORMATION_SYSTEMS', 'FEDEX_CUSTOM_CRITICAL', 'FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_KINKOS', 'FEDEX_OFFICE', 'FEDEX_SERVICES', 'FEDEX_TRADE_NETWORKS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OperatingCompanyType' % {"value" : value.encode("utf-8")} )
    def validate_PackagingType(self, value):
        # Validate type PackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_10KG_BOX', 'FEDEX_25KG_BOX', 'FEDEX_BOX', 'FEDEX_ENVELOPE', 'FEDEX_EXTRA_LARGE_BOX', 'FEDEX_LARGE_BOX', 'FEDEX_MEDIUM_BOX', 'FEDEX_PAK', 'FEDEX_SMALL_BOX', 'FEDEX_TUBE', 'YOUR_PACKAGING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackagingType' % {"value" : value.encode("utf-8")} )
    def validate_PhysicalPackagingType(self, value):
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CAGE', 'CARTON', 'CASE', 'CHEST', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PACKAGE', 'PAIL', 'PALLET', 'PARCEL', 'PIECE', 'REEL', 'ROLL', 'SACK', 'SHRINK_WRAPPED', 'SKID', 'TANK', 'TOTE_BIN', 'TUBE', 'UNIT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : value.encode("utf-8")} )
    def validate_TrackDetailAttributeType(self, value):
        # Validate type TrackDetailAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INCLUDED_IN_WATCHLIST']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackDetailAttributeType' % {"value" : value.encode("utf-8")} )
    def validate_TrackPossessionStatusType(self, value):
        # Validate type TrackPossessionStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BROKER', 'CARRIER', 'CUSTOMS', 'RECIPIENT', 'SHIPPER', 'SPLIT_STATUS', 'TRANSFER_PARTNER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackPossessionStatusType' % {"value" : value.encode("utf-8")} )
    def validate_FedExLocationType(self, value):
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SMART_POST_HUB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FedExLocationType' % {"value" : value.encode("utf-8")} )
    def validate_OfficeOrderDeliveryMethodType(self, value):
        # Validate type OfficeOrderDeliveryMethodType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['COURIER', 'OTHER', 'PICKUP', 'SHIPMENT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OfficeOrderDeliveryMethodType' % {"value" : value.encode("utf-8")} )
    def validate_TrackDeliveryLocationType(self, value):
        # Validate type TrackDeliveryLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['APARTMENT_OFFICE', 'FEDEX_LOCATION', 'GATE_HOUSE', 'GUARD_OR_SECURITY_STATION', 'IN_BOND_OR_CAGE', 'LEASING_OFFICE', 'MAILROOM', 'MAIN_OFFICE', 'MANAGER_OFFICE', 'OTHER', 'PHARMACY', 'RECEPTIONIST_OR_FRONT_DESK', 'RENTAL_OFFICE', 'RESIDENCE', 'SHIPPING_RECEIVING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackDeliveryLocationType' % {"value" : value.encode("utf-8")} )
    def validate_NotificationEventType(self, value):
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_SHIPMENT', 'ON_TENDER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationEventType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Notification is not None or
            self.TrackingNumber is not None or
            self.Barcode is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.StatusDetail is not None or
            self.InformationNotes or
            self.CustomerExceptionRequests or
            self.Reconciliation is not None or
            self.ServiceCommitMessage is not None or
            self.DestinationServiceArea is not None or
            self.DestinationServiceAreaDescription is not None or
            self.CarrierCode is not None or
            self.OperatingCompany is not None or
            self.OperatingCompanyOrCarrierDescription is not None or
            self.CartageAgentCompanyName is not None or
            self.ProductionLocationContactAndAddress is not None or
            self.OtherIdentifiers or
            self.FormId is not None or
            self.Service is not None or
            self.PackageWeight is not None or
            self.PackageDimensions is not None or
            self.PackageDimensionalWeight is not None or
            self.ShipmentWeight is not None or
            self.Packaging is not None or
            self.PackagingType is not None or
            self.PhysicalPackagingType is not None or
            self.PackageSequenceNumber is not None or
            self.PackageCount is not None or
            self.CreatorSoftwareId is not None or
            self.Charges or
            self.NickName is not None or
            self.Notes is not None or
            self.Attributes or
            self.ShipmentContents or
            self.PackageContents or
            self.ClearanceLocationCode is not None or
            self.Commodities or
            self.ReturnDetail is not None or
            self.CustomsOptionDetails or
            self.AdvanceNotificationDetail is not None or
            self.SpecialHandlings or
            self.Payments or
            self.Shipper is not None or
            self.PossessionStatus is not None or
            self.ShipperAddress is not None or
            self.OriginLocationAddress is not None or
            self.OriginStationId is not None or
            self.DatesOrTimes or
            self.TotalTransitDistance is not None or
            self.DistanceToDestination is not None or
            self.SpecialInstructions or
            self.Recipient is not None or
            self.LastUpdatedDestinationAddress is not None or
            self.DestinationAddress is not None or
            self.HoldAtLocationContact is not None or
            self.HoldAtLocationAddress is not None or
            self.DestinationStationId is not None or
            self.DestinationLocationAddress is not None or
            self.DestinationLocationType is not None or
            self.DestinationLocationTimeZoneOffset is not None or
            self.ActualDeliveryAddress is not None or
            self.OfficeOrderDeliveryMethod is not None or
            self.DeliveryLocationType is not None or
            self.DeliveryLocationDescription is not None or
            self.DeliveryAttempts is not None or
            self.DeliverySignatureName is not None or
            self.PieceCountVerificationDetails or
            self.TotalUniqueAddressCountInConsolidation is not None or
            self.AvailableImages or
            self.Signature is not None or
            self.NotificationEventsAvailable or
            self.SplitShipmentParts or
            self.DeliveryOptionEligibilityDetails or
            self.Events
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Notification is not None:
            self.Notification.export(outfile, level, namespace_, name_='Notification', pretty_print=pretty_print)
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.Barcode is not None:
            self.Barcode.export(outfile, level, namespace_, name_='Barcode', pretty_print=pretty_print)
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumberUniqueIdentifier>%s</ns:TrackingNumberUniqueIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), eol_))
        if self.StatusDetail is not None:
            self.StatusDetail.export(outfile, level, namespace_, name_='StatusDetail', pretty_print=pretty_print)
        for InformationNotes_ in self.InformationNotes:
            InformationNotes_.export(outfile, level, namespace_, name_='InformationNotes', pretty_print=pretty_print)
        for CustomerExceptionRequests_ in self.CustomerExceptionRequests:
            CustomerExceptionRequests_.export(outfile, level, namespace_, name_='CustomerExceptionRequests', pretty_print=pretty_print)
        if self.Reconciliation is not None:
            self.Reconciliation.export(outfile, level, namespace_, name_='Reconciliation', pretty_print=pretty_print)
        if self.ServiceCommitMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceCommitMessage>%s</ns:ServiceCommitMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceCommitMessage), input_name='ServiceCommitMessage')), eol_))
        if self.DestinationServiceArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DestinationServiceArea>%s</ns:DestinationServiceArea>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceArea), input_name='DestinationServiceArea')), eol_))
        if self.DestinationServiceAreaDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DestinationServiceAreaDescription>%s</ns:DestinationServiceAreaDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceAreaDescription), input_name='DestinationServiceAreaDescription')), eol_))
        if self.CarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CarrierCode>%s</ns:CarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), eol_))
        if self.OperatingCompany is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OperatingCompany>%s</ns:OperatingCompany>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompany), input_name='OperatingCompany')), eol_))
        if self.OperatingCompanyOrCarrierDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OperatingCompanyOrCarrierDescription>%s</ns:OperatingCompanyOrCarrierDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompanyOrCarrierDescription), input_name='OperatingCompanyOrCarrierDescription')), eol_))
        if self.CartageAgentCompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CartageAgentCompanyName>%s</ns:CartageAgentCompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CartageAgentCompanyName), input_name='CartageAgentCompanyName')), eol_))
        if self.ProductionLocationContactAndAddress is not None:
            self.ProductionLocationContactAndAddress.export(outfile, level, namespace_, name_='ProductionLocationContactAndAddress', pretty_print=pretty_print)
        for OtherIdentifiers_ in self.OtherIdentifiers:
            OtherIdentifiers_.export(outfile, level, namespace_, name_='OtherIdentifiers', pretty_print=pretty_print)
        if self.FormId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:FormId>%s</ns:FormId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), eol_))
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.PackageWeight is not None:
            self.PackageWeight.export(outfile, level, namespace_, name_='PackageWeight', pretty_print=pretty_print)
        if self.PackageDimensions is not None:
            self.PackageDimensions.export(outfile, level, namespace_, name_='PackageDimensions', pretty_print=pretty_print)
        if self.PackageDimensionalWeight is not None:
            self.PackageDimensionalWeight.export(outfile, level, namespace_, name_='PackageDimensionalWeight', pretty_print=pretty_print)
        if self.ShipmentWeight is not None:
            self.ShipmentWeight.export(outfile, level, namespace_, name_='ShipmentWeight', pretty_print=pretty_print)
        if self.Packaging is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Packaging>%s</ns:Packaging>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Packaging), input_name='Packaging')), eol_))
        if self.PackagingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackagingType>%s</ns:PackagingType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), eol_))
        if self.PhysicalPackagingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhysicalPackagingType>%s</ns:PhysicalPackagingType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhysicalPackagingType), input_name='PhysicalPackagingType')), eol_))
        if self.PackageSequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageSequenceNumber>%s</ns:PackageSequenceNumber>%s' % (self.gds_format_integer(self.PackageSequenceNumber, input_name='PackageSequenceNumber'), eol_))
        if self.PackageCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageCount>%s</ns:PackageCount>%s' % (self.gds_format_integer(self.PackageCount, input_name='PackageCount'), eol_))
        if self.CreatorSoftwareId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CreatorSoftwareId>%s</ns:CreatorSoftwareId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CreatorSoftwareId), input_name='CreatorSoftwareId')), eol_))
        for Charges_ in self.Charges:
            Charges_.export(outfile, level, namespace_, name_='Charges', pretty_print=pretty_print)
        if self.NickName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NickName>%s</ns:NickName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NickName), input_name='NickName')), eol_))
        if self.Notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Notes>%s</ns:Notes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Notes), input_name='Notes')), eol_))
        for Attributes_ in self.Attributes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Attributes>%s</ns:Attributes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), eol_))
        for ShipmentContents_ in self.ShipmentContents:
            ShipmentContents_.export(outfile, level, namespace_, name_='ShipmentContents', pretty_print=pretty_print)
        for PackageContents_ in self.PackageContents:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageContents>%s</ns:PackageContents>%s' % (self.gds_encode(self.gds_format_string(quote_xml(PackageContents_), input_name='PackageContents')), eol_))
        if self.ClearanceLocationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ClearanceLocationCode>%s</ns:ClearanceLocationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceLocationCode), input_name='ClearanceLocationCode')), eol_))
        for Commodities_ in self.Commodities:
            Commodities_.export(outfile, level, namespace_, name_='Commodities', pretty_print=pretty_print)
        if self.ReturnDetail is not None:
            self.ReturnDetail.export(outfile, level, namespace_, name_='ReturnDetail', pretty_print=pretty_print)
        for CustomsOptionDetails_ in self.CustomsOptionDetails:
            CustomsOptionDetails_.export(outfile, level, namespace_, name_='CustomsOptionDetails', pretty_print=pretty_print)
        if self.AdvanceNotificationDetail is not None:
            self.AdvanceNotificationDetail.export(outfile, level, namespace_, name_='AdvanceNotificationDetail', pretty_print=pretty_print)
        for SpecialHandlings_ in self.SpecialHandlings:
            SpecialHandlings_.export(outfile, level, namespace_, name_='SpecialHandlings', pretty_print=pretty_print)
        for Payments_ in self.Payments:
            Payments_.export(outfile, level, namespace_, name_='Payments', pretty_print=pretty_print)
        if self.Shipper is not None:
            self.Shipper.export(outfile, level, namespace_, name_='Shipper', pretty_print=pretty_print)
        if self.PossessionStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PossessionStatus>%s</ns:PossessionStatus>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PossessionStatus), input_name='PossessionStatus')), eol_))
        if self.ShipperAddress is not None:
            self.ShipperAddress.export(outfile, level, namespace_, name_='ShipperAddress', pretty_print=pretty_print)
        if self.OriginLocationAddress is not None:
            self.OriginLocationAddress.export(outfile, level, namespace_, name_='OriginLocationAddress', pretty_print=pretty_print)
        if self.OriginStationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OriginStationId>%s</ns:OriginStationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginStationId), input_name='OriginStationId')), eol_))
        for DatesOrTimes_ in self.DatesOrTimes:
            DatesOrTimes_.export(outfile, level, namespace_, name_='DatesOrTimes', pretty_print=pretty_print)
        if self.TotalTransitDistance is not None:
            self.TotalTransitDistance.export(outfile, level, namespace_, name_='TotalTransitDistance', pretty_print=pretty_print)
        if self.DistanceToDestination is not None:
            self.DistanceToDestination.export(outfile, level, namespace_, name_='DistanceToDestination', pretty_print=pretty_print)
        for SpecialInstructions_ in self.SpecialInstructions:
            SpecialInstructions_.export(outfile, level, namespace_, name_='SpecialInstructions', pretty_print=pretty_print)
        if self.Recipient is not None:
            self.Recipient.export(outfile, level, namespace_, name_='Recipient', pretty_print=pretty_print)
        if self.LastUpdatedDestinationAddress is not None:
            self.LastUpdatedDestinationAddress.export(outfile, level, namespace_, name_='LastUpdatedDestinationAddress', pretty_print=pretty_print)
        if self.DestinationAddress is not None:
            self.DestinationAddress.export(outfile, level, namespace_, name_='DestinationAddress', pretty_print=pretty_print)
        if self.HoldAtLocationContact is not None:
            self.HoldAtLocationContact.export(outfile, level, namespace_, name_='HoldAtLocationContact', pretty_print=pretty_print)
        if self.HoldAtLocationAddress is not None:
            self.HoldAtLocationAddress.export(outfile, level, namespace_, name_='HoldAtLocationAddress', pretty_print=pretty_print)
        if self.DestinationStationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DestinationStationId>%s</ns:DestinationStationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationStationId), input_name='DestinationStationId')), eol_))
        if self.DestinationLocationAddress is not None:
            self.DestinationLocationAddress.export(outfile, level, namespace_, name_='DestinationLocationAddress', pretty_print=pretty_print)
        if self.DestinationLocationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DestinationLocationType>%s</ns:DestinationLocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationLocationType), input_name='DestinationLocationType')), eol_))
        if self.DestinationLocationTimeZoneOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DestinationLocationTimeZoneOffset>%s</ns:DestinationLocationTimeZoneOffset>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationLocationTimeZoneOffset), input_name='DestinationLocationTimeZoneOffset')), eol_))
        if self.ActualDeliveryAddress is not None:
            self.ActualDeliveryAddress.export(outfile, level, namespace_, name_='ActualDeliveryAddress', pretty_print=pretty_print)
        if self.OfficeOrderDeliveryMethod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OfficeOrderDeliveryMethod>%s</ns:OfficeOrderDeliveryMethod>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OfficeOrderDeliveryMethod), input_name='OfficeOrderDeliveryMethod')), eol_))
        if self.DeliveryLocationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DeliveryLocationType>%s</ns:DeliveryLocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryLocationType), input_name='DeliveryLocationType')), eol_))
        if self.DeliveryLocationDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DeliveryLocationDescription>%s</ns:DeliveryLocationDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryLocationDescription), input_name='DeliveryLocationDescription')), eol_))
        if self.DeliveryAttempts is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DeliveryAttempts>%s</ns:DeliveryAttempts>%s' % (self.gds_format_integer(self.DeliveryAttempts, input_name='DeliveryAttempts'), eol_))
        if self.DeliverySignatureName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DeliverySignatureName>%s</ns:DeliverySignatureName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliverySignatureName), input_name='DeliverySignatureName')), eol_))
        for PieceCountVerificationDetails_ in self.PieceCountVerificationDetails:
            PieceCountVerificationDetails_.export(outfile, level, namespace_, name_='PieceCountVerificationDetails', pretty_print=pretty_print)
        if self.TotalUniqueAddressCountInConsolidation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TotalUniqueAddressCountInConsolidation>%s</ns:TotalUniqueAddressCountInConsolidation>%s' % (self.gds_format_integer(self.TotalUniqueAddressCountInConsolidation, input_name='TotalUniqueAddressCountInConsolidation'), eol_))
        for AvailableImages_ in self.AvailableImages:
            AvailableImages_.export(outfile, level, namespace_, name_='AvailableImages', pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(outfile, level, namespace_, name_='Signature', pretty_print=pretty_print)
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NotificationEventsAvailable>%s</ns:NotificationEventsAvailable>%s' % (self.gds_encode(self.gds_format_string(quote_xml(NotificationEventsAvailable_), input_name='NotificationEventsAvailable')), eol_))
        for SplitShipmentParts_ in self.SplitShipmentParts:
            SplitShipmentParts_.export(outfile, level, namespace_, name_='SplitShipmentParts', pretty_print=pretty_print)
        for DeliveryOptionEligibilityDetails_ in self.DeliveryOptionEligibilityDetails:
            DeliveryOptionEligibilityDetails_.export(outfile, level, namespace_, name_='DeliveryOptionEligibilityDetails', pretty_print=pretty_print)
        for Events_ in self.Events:
            Events_.export(outfile, level, namespace_, name_='Events', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Notification':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notification = obj_
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'Barcode':
            obj_ = StringBarcode.factory()
            obj_.build(child_)
            self.Barcode = obj_
            obj_.original_tagname_ = 'Barcode'
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            TrackingNumberUniqueIdentifier_ = child_.text
            TrackingNumberUniqueIdentifier_ = self.gds_validate_string(TrackingNumberUniqueIdentifier_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier_
        elif nodeName_ == 'StatusDetail':
            obj_ = TrackStatusDetail.factory()
            obj_.build(child_)
            self.StatusDetail = obj_
            obj_.original_tagname_ = 'StatusDetail'
        elif nodeName_ == 'InformationNotes':
            obj_ = TrackInformationNoteDetail.factory()
            obj_.build(child_)
            self.InformationNotes.append(obj_)
            obj_.original_tagname_ = 'InformationNotes'
        elif nodeName_ == 'CustomerExceptionRequests':
            obj_ = CustomerExceptionRequestDetail.factory()
            obj_.build(child_)
            self.CustomerExceptionRequests.append(obj_)
            obj_.original_tagname_ = 'CustomerExceptionRequests'
        elif nodeName_ == 'Reconciliation':
            obj_ = TrackReconciliation.factory()
            obj_.build(child_)
            self.Reconciliation = obj_
            obj_.original_tagname_ = 'Reconciliation'
        elif nodeName_ == 'ServiceCommitMessage':
            ServiceCommitMessage_ = child_.text
            ServiceCommitMessage_ = self.gds_validate_string(ServiceCommitMessage_, node, 'ServiceCommitMessage')
            self.ServiceCommitMessage = ServiceCommitMessage_
        elif nodeName_ == 'DestinationServiceArea':
            DestinationServiceArea_ = child_.text
            DestinationServiceArea_ = self.gds_validate_string(DestinationServiceArea_, node, 'DestinationServiceArea')
            self.DestinationServiceArea = DestinationServiceArea_
        elif nodeName_ == 'DestinationServiceAreaDescription':
            DestinationServiceAreaDescription_ = child_.text
            DestinationServiceAreaDescription_ = self.gds_validate_string(DestinationServiceAreaDescription_, node, 'DestinationServiceAreaDescription')
            self.DestinationServiceAreaDescription = DestinationServiceAreaDescription_
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'OperatingCompany':
            OperatingCompany_ = child_.text
            OperatingCompany_ = self.gds_validate_string(OperatingCompany_, node, 'OperatingCompany')
            self.OperatingCompany = OperatingCompany_
            # validate type OperatingCompanyType
            self.validate_OperatingCompanyType(self.OperatingCompany)
        elif nodeName_ == 'OperatingCompanyOrCarrierDescription':
            OperatingCompanyOrCarrierDescription_ = child_.text
            OperatingCompanyOrCarrierDescription_ = self.gds_validate_string(OperatingCompanyOrCarrierDescription_, node, 'OperatingCompanyOrCarrierDescription')
            self.OperatingCompanyOrCarrierDescription = OperatingCompanyOrCarrierDescription_
        elif nodeName_ == 'CartageAgentCompanyName':
            CartageAgentCompanyName_ = child_.text
            CartageAgentCompanyName_ = self.gds_validate_string(CartageAgentCompanyName_, node, 'CartageAgentCompanyName')
            self.CartageAgentCompanyName = CartageAgentCompanyName_
        elif nodeName_ == 'ProductionLocationContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.ProductionLocationContactAndAddress = obj_
            obj_.original_tagname_ = 'ProductionLocationContactAndAddress'
        elif nodeName_ == 'OtherIdentifiers':
            obj_ = TrackOtherIdentifierDetail.factory()
            obj_.build(child_)
            self.OtherIdentifiers.append(obj_)
            obj_.original_tagname_ = 'OtherIdentifiers'
        elif nodeName_ == 'FormId':
            FormId_ = child_.text
            FormId_ = self.gds_validate_string(FormId_, node, 'FormId')
            self.FormId = FormId_
        elif nodeName_ == 'Service':
            obj_ = TrackServiceDescriptionDetail.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'PackageWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.PackageWeight = obj_
            obj_.original_tagname_ = 'PackageWeight'
        elif nodeName_ == 'PackageDimensions':
            obj_ = Dimensions.factory()
            obj_.build(child_)
            self.PackageDimensions = obj_
            obj_.original_tagname_ = 'PackageDimensions'
        elif nodeName_ == 'PackageDimensionalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.PackageDimensionalWeight = obj_
            obj_.original_tagname_ = 'PackageDimensionalWeight'
        elif nodeName_ == 'ShipmentWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.ShipmentWeight = obj_
            obj_.original_tagname_ = 'ShipmentWeight'
        elif nodeName_ == 'Packaging':
            Packaging_ = child_.text
            Packaging_ = self.gds_validate_string(Packaging_, node, 'Packaging')
            self.Packaging = Packaging_
        elif nodeName_ == 'PackagingType':
            PackagingType_ = child_.text
            PackagingType_ = self.gds_validate_string(PackagingType_, node, 'PackagingType')
            self.PackagingType = PackagingType_
            # validate type PackagingType
            self.validate_PackagingType(self.PackagingType)
        elif nodeName_ == 'PhysicalPackagingType':
            PhysicalPackagingType_ = child_.text
            PhysicalPackagingType_ = self.gds_validate_string(PhysicalPackagingType_, node, 'PhysicalPackagingType')
            self.PhysicalPackagingType = PhysicalPackagingType_
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.PhysicalPackagingType)
        elif nodeName_ == 'PackageSequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageSequenceNumber')
            self.PackageSequenceNumber = ival_
        elif nodeName_ == 'PackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
        elif nodeName_ == 'CreatorSoftwareId':
            CreatorSoftwareId_ = child_.text
            CreatorSoftwareId_ = self.gds_validate_string(CreatorSoftwareId_, node, 'CreatorSoftwareId')
            self.CreatorSoftwareId = CreatorSoftwareId_
        elif nodeName_ == 'Charges':
            obj_ = TrackChargeDetail.factory()
            obj_.build(child_)
            self.Charges.append(obj_)
            obj_.original_tagname_ = 'Charges'
        elif nodeName_ == 'NickName':
            NickName_ = child_.text
            NickName_ = self.gds_validate_string(NickName_, node, 'NickName')
            self.NickName = NickName_
        elif nodeName_ == 'Notes':
            Notes_ = child_.text
            Notes_ = self.gds_validate_string(Notes_, node, 'Notes')
            self.Notes = Notes_
        elif nodeName_ == 'Attributes':
            Attributes_ = child_.text
            Attributes_ = self.gds_validate_string(Attributes_, node, 'Attributes')
            self.Attributes.append(Attributes_)
            # validate type TrackDetailAttributeType
            self.validate_TrackDetailAttributeType(self.Attributes[-1])
        elif nodeName_ == 'ShipmentContents':
            obj_ = ContentRecord.factory()
            obj_.build(child_)
            self.ShipmentContents.append(obj_)
            obj_.original_tagname_ = 'ShipmentContents'
        elif nodeName_ == 'PackageContents':
            PackageContents_ = child_.text
            PackageContents_ = self.gds_validate_string(PackageContents_, node, 'PackageContents')
            self.PackageContents.append(PackageContents_)
        elif nodeName_ == 'ClearanceLocationCode':
            ClearanceLocationCode_ = child_.text
            ClearanceLocationCode_ = self.gds_validate_string(ClearanceLocationCode_, node, 'ClearanceLocationCode')
            self.ClearanceLocationCode = ClearanceLocationCode_
        elif nodeName_ == 'Commodities':
            obj_ = Commodity.factory()
            obj_.build(child_)
            self.Commodities.append(obj_)
            obj_.original_tagname_ = 'Commodities'
        elif nodeName_ == 'ReturnDetail':
            obj_ = TrackReturnDetail.factory()
            obj_.build(child_)
            self.ReturnDetail = obj_
            obj_.original_tagname_ = 'ReturnDetail'
        elif nodeName_ == 'CustomsOptionDetails':
            obj_ = CustomsOptionDetail.factory()
            obj_.build(child_)
            self.CustomsOptionDetails.append(obj_)
            obj_.original_tagname_ = 'CustomsOptionDetails'
        elif nodeName_ == 'AdvanceNotificationDetail':
            obj_ = TrackAdvanceNotificationDetail.factory()
            obj_.build(child_)
            self.AdvanceNotificationDetail = obj_
            obj_.original_tagname_ = 'AdvanceNotificationDetail'
        elif nodeName_ == 'SpecialHandlings':
            obj_ = TrackSpecialHandling.factory()
            obj_.build(child_)
            self.SpecialHandlings.append(obj_)
            obj_.original_tagname_ = 'SpecialHandlings'
        elif nodeName_ == 'Payments':
            obj_ = TrackPayment.factory()
            obj_.build(child_)
            self.Payments.append(obj_)
            obj_.original_tagname_ = 'Payments'
        elif nodeName_ == 'Shipper':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'PossessionStatus':
            PossessionStatus_ = child_.text
            PossessionStatus_ = self.gds_validate_string(PossessionStatus_, node, 'PossessionStatus')
            self.PossessionStatus = PossessionStatus_
            # validate type TrackPossessionStatusType
            self.validate_TrackPossessionStatusType(self.PossessionStatus)
        elif nodeName_ == 'ShipperAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.ShipperAddress = obj_
            obj_.original_tagname_ = 'ShipperAddress'
        elif nodeName_ == 'OriginLocationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.OriginLocationAddress = obj_
            obj_.original_tagname_ = 'OriginLocationAddress'
        elif nodeName_ == 'OriginStationId':
            OriginStationId_ = child_.text
            OriginStationId_ = self.gds_validate_string(OriginStationId_, node, 'OriginStationId')
            self.OriginStationId = OriginStationId_
        elif nodeName_ == 'DatesOrTimes':
            obj_ = TrackingDateOrTimestamp.factory()
            obj_.build(child_)
            self.DatesOrTimes.append(obj_)
            obj_.original_tagname_ = 'DatesOrTimes'
        elif nodeName_ == 'TotalTransitDistance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.TotalTransitDistance = obj_
            obj_.original_tagname_ = 'TotalTransitDistance'
        elif nodeName_ == 'DistanceToDestination':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.DistanceToDestination = obj_
            obj_.original_tagname_ = 'DistanceToDestination'
        elif nodeName_ == 'SpecialInstructions':
            obj_ = TrackSpecialInstruction.factory()
            obj_.build(child_)
            self.SpecialInstructions.append(obj_)
            obj_.original_tagname_ = 'SpecialInstructions'
        elif nodeName_ == 'Recipient':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'LastUpdatedDestinationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.LastUpdatedDestinationAddress = obj_
            obj_.original_tagname_ = 'LastUpdatedDestinationAddress'
        elif nodeName_ == 'DestinationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.DestinationAddress = obj_
            obj_.original_tagname_ = 'DestinationAddress'
        elif nodeName_ == 'HoldAtLocationContact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.HoldAtLocationContact = obj_
            obj_.original_tagname_ = 'HoldAtLocationContact'
        elif nodeName_ == 'HoldAtLocationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.HoldAtLocationAddress = obj_
            obj_.original_tagname_ = 'HoldAtLocationAddress'
        elif nodeName_ == 'DestinationStationId':
            DestinationStationId_ = child_.text
            DestinationStationId_ = self.gds_validate_string(DestinationStationId_, node, 'DestinationStationId')
            self.DestinationStationId = DestinationStationId_
        elif nodeName_ == 'DestinationLocationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.DestinationLocationAddress = obj_
            obj_.original_tagname_ = 'DestinationLocationAddress'
        elif nodeName_ == 'DestinationLocationType':
            DestinationLocationType_ = child_.text
            DestinationLocationType_ = self.gds_validate_string(DestinationLocationType_, node, 'DestinationLocationType')
            self.DestinationLocationType = DestinationLocationType_
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.DestinationLocationType)
        elif nodeName_ == 'DestinationLocationTimeZoneOffset':
            DestinationLocationTimeZoneOffset_ = child_.text
            DestinationLocationTimeZoneOffset_ = self.gds_validate_string(DestinationLocationTimeZoneOffset_, node, 'DestinationLocationTimeZoneOffset')
            self.DestinationLocationTimeZoneOffset = DestinationLocationTimeZoneOffset_
        elif nodeName_ == 'ActualDeliveryAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.ActualDeliveryAddress = obj_
            obj_.original_tagname_ = 'ActualDeliveryAddress'
        elif nodeName_ == 'OfficeOrderDeliveryMethod':
            OfficeOrderDeliveryMethod_ = child_.text
            OfficeOrderDeliveryMethod_ = self.gds_validate_string(OfficeOrderDeliveryMethod_, node, 'OfficeOrderDeliveryMethod')
            self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod_
            # validate type OfficeOrderDeliveryMethodType
            self.validate_OfficeOrderDeliveryMethodType(self.OfficeOrderDeliveryMethod)
        elif nodeName_ == 'DeliveryLocationType':
            DeliveryLocationType_ = child_.text
            DeliveryLocationType_ = self.gds_validate_string(DeliveryLocationType_, node, 'DeliveryLocationType')
            self.DeliveryLocationType = DeliveryLocationType_
            # validate type TrackDeliveryLocationType
            self.validate_TrackDeliveryLocationType(self.DeliveryLocationType)
        elif nodeName_ == 'DeliveryLocationDescription':
            DeliveryLocationDescription_ = child_.text
            DeliveryLocationDescription_ = self.gds_validate_string(DeliveryLocationDescription_, node, 'DeliveryLocationDescription')
            self.DeliveryLocationDescription = DeliveryLocationDescription_
        elif nodeName_ == 'DeliveryAttempts':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DeliveryAttempts')
            self.DeliveryAttempts = ival_
        elif nodeName_ == 'DeliverySignatureName':
            DeliverySignatureName_ = child_.text
            DeliverySignatureName_ = self.gds_validate_string(DeliverySignatureName_, node, 'DeliverySignatureName')
            self.DeliverySignatureName = DeliverySignatureName_
        elif nodeName_ == 'PieceCountVerificationDetails':
            obj_ = PieceCountVerificationDetail.factory()
            obj_.build(child_)
            self.PieceCountVerificationDetails.append(obj_)
            obj_.original_tagname_ = 'PieceCountVerificationDetails'
        elif nodeName_ == 'TotalUniqueAddressCountInConsolidation':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalUniqueAddressCountInConsolidation')
            self.TotalUniqueAddressCountInConsolidation = ival_
        elif nodeName_ == 'AvailableImages':
            obj_ = AvailableImagesDetail.factory()
            obj_.build(child_)
            self.AvailableImages.append(obj_)
            obj_.original_tagname_ = 'AvailableImages'
        elif nodeName_ == 'Signature':
            obj_ = SignatureImageDetail.factory()
            obj_.build(child_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'NotificationEventsAvailable':
            NotificationEventsAvailable_ = child_.text
            NotificationEventsAvailable_ = self.gds_validate_string(NotificationEventsAvailable_, node, 'NotificationEventsAvailable')
            self.NotificationEventsAvailable.append(NotificationEventsAvailable_)
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.NotificationEventsAvailable[-1])
        elif nodeName_ == 'SplitShipmentParts':
            obj_ = TrackSplitShipmentPart.factory()
            obj_.build(child_)
            self.SplitShipmentParts.append(obj_)
            obj_.original_tagname_ = 'SplitShipmentParts'
        elif nodeName_ == 'DeliveryOptionEligibilityDetails':
            obj_ = DeliveryOptionEligibilityDetail.factory()
            obj_.build(child_)
            self.DeliveryOptionEligibilityDetails.append(obj_)
            obj_.original_tagname_ = 'DeliveryOptionEligibilityDetails'
        elif nodeName_ == 'Events':
            obj_ = TrackEvent.factory()
            obj_.build(child_)
            self.Events.append(obj_)
            obj_.original_tagname_ = 'Events'
# end class TrackDetail


class TrackEvent(GeneratedsSuper):
    """FedEx scanning information about a package."""
    subclass = None
    superclass = None
    def __init__(self, Timestamp=None, EventType=None, EventDescription=None, StatusExceptionCode=None, StatusExceptionDescription=None, Address=None, StationId=None, ArrivalLocation=None):
        self.original_tagname_ = None
        if isinstance(Timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Timestamp
        self.Timestamp = initvalue_
        self.EventType = EventType
        self.EventDescription = EventDescription
        self.StatusExceptionCode = StatusExceptionCode
        self.StatusExceptionDescription = StatusExceptionDescription
        self.Address = Address
        self.StationId = StationId
        self.ArrivalLocation = ArrivalLocation
        self.validate_ArrivalLocationType(self.ArrivalLocation)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackEvent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackEvent.subclass:
            return TrackEvent.subclass(*args_, **kwargs_)
        else:
            return TrackEvent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Timestamp(self): return self.Timestamp
    def set_Timestamp(self, Timestamp): self.Timestamp = Timestamp
    def get_EventType(self): return self.EventType
    def set_EventType(self, EventType): self.EventType = EventType
    def get_EventDescription(self): return self.EventDescription
    def set_EventDescription(self, EventDescription): self.EventDescription = EventDescription
    def get_StatusExceptionCode(self): return self.StatusExceptionCode
    def set_StatusExceptionCode(self, StatusExceptionCode): self.StatusExceptionCode = StatusExceptionCode
    def get_StatusExceptionDescription(self): return self.StatusExceptionDescription
    def set_StatusExceptionDescription(self, StatusExceptionDescription): self.StatusExceptionDescription = StatusExceptionDescription
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_StationId(self): return self.StationId
    def set_StationId(self, StationId): self.StationId = StationId
    def get_ArrivalLocation(self): return self.ArrivalLocation
    def set_ArrivalLocation(self, ArrivalLocation): self.ArrivalLocation = ArrivalLocation
    def validate_ArrivalLocationType(self, value):
        # Validate type ArrivalLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AIRPORT', 'CUSTOMER', 'CUSTOMS_BROKER', 'DELIVERY_LOCATION', 'DESTINATION_AIRPORT', 'DESTINATION_FEDEX_FACILITY', 'DROP_BOX', 'ENROUTE', 'FEDEX_FACILITY', 'FEDEX_OFFICE_LOCATION', 'INTERLINE_CARRIER', 'NON_FEDEX_FACILITY', 'ORIGIN_AIRPORT', 'ORIGIN_FEDEX_FACILITY', 'PICKUP_LOCATION', 'PLANE', 'PORT_OF_ENTRY', 'SHIP_AND_GET_LOCATION', 'SORT_FACILITY', 'TURNPOINT', 'VEHICLE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ArrivalLocationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Timestamp is not None or
            self.EventType is not None or
            self.EventDescription is not None or
            self.StatusExceptionCode is not None or
            self.StatusExceptionDescription is not None or
            self.Address is not None or
            self.StationId is not None or
            self.ArrivalLocation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackEvent', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackEvent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackEvent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackEvent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackEvent'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackEvent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Timestamp>%s</ns:Timestamp>%s' % (self.gds_format_datetime(self.Timestamp, input_name='Timestamp'), eol_))
        if self.EventType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EventType>%s</ns:EventType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EventType), input_name='EventType')), eol_))
        if self.EventDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EventDescription>%s</ns:EventDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EventDescription), input_name='EventDescription')), eol_))
        if self.StatusExceptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusExceptionCode>%s</ns:StatusExceptionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusExceptionCode), input_name='StatusExceptionCode')), eol_))
        if self.StatusExceptionDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusExceptionDescription>%s</ns:StatusExceptionDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusExceptionDescription), input_name='StatusExceptionDescription')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.StationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StationId>%s</ns:StationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StationId), input_name='StationId')), eol_))
        if self.ArrivalLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ArrivalLocation>%s</ns:ArrivalLocation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ArrivalLocation), input_name='ArrivalLocation')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Timestamp = dval_
        elif nodeName_ == 'EventType':
            EventType_ = child_.text
            EventType_ = self.gds_validate_string(EventType_, node, 'EventType')
            self.EventType = EventType_
        elif nodeName_ == 'EventDescription':
            EventDescription_ = child_.text
            EventDescription_ = self.gds_validate_string(EventDescription_, node, 'EventDescription')
            self.EventDescription = EventDescription_
        elif nodeName_ == 'StatusExceptionCode':
            StatusExceptionCode_ = child_.text
            StatusExceptionCode_ = self.gds_validate_string(StatusExceptionCode_, node, 'StatusExceptionCode')
            self.StatusExceptionCode = StatusExceptionCode_
        elif nodeName_ == 'StatusExceptionDescription':
            StatusExceptionDescription_ = child_.text
            StatusExceptionDescription_ = self.gds_validate_string(StatusExceptionDescription_, node, 'StatusExceptionDescription')
            self.StatusExceptionDescription = StatusExceptionDescription_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'StationId':
            StationId_ = child_.text
            StationId_ = self.gds_validate_string(StationId_, node, 'StationId')
            self.StationId = StationId_
        elif nodeName_ == 'ArrivalLocation':
            ArrivalLocation_ = child_.text
            ArrivalLocation_ = self.gds_validate_string(ArrivalLocation_, node, 'ArrivalLocation')
            self.ArrivalLocation = ArrivalLocation_
            # validate type ArrivalLocationType
            self.validate_ArrivalLocationType(self.ArrivalLocation)
# end class TrackEvent


class TrackInformationNoteDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackInformationNoteDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackInformationNoteDetail.subclass:
            return TrackInformationNoteDetail.subclass(*args_, **kwargs_)
        else:
            return TrackInformationNoteDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackInformationNoteDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackInformationNoteDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackInformationNoteDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackInformationNoteDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackInformationNoteDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackInformationNoteDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Code>%s</ns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TrackInformationNoteDetail


class TrackNotificationPackage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, TrackingNumberUniqueIdentifiers=None, CarrierCode=None, ShipDate=None, Destination=None, RecipientDetails=None):
        self.original_tagname_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.Destination = Destination
        if RecipientDetails is None:
            self.RecipientDetails = []
        else:
            self.RecipientDetails = RecipientDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackNotificationPackage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackNotificationPackage.subclass:
            return TrackNotificationPackage.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationPackage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_TrackingNumberUniqueIdentifiers(self): return self.TrackingNumberUniqueIdentifiers
    def set_TrackingNumberUniqueIdentifiers(self, TrackingNumberUniqueIdentifiers): self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_RecipientDetails(self): return self.RecipientDetails
    def set_RecipientDetails(self, RecipientDetails): self.RecipientDetails = RecipientDetails
    def add_RecipientDetails(self, value): self.RecipientDetails.append(value)
    def insert_RecipientDetails_at(self, index, value): self.RecipientDetails.insert(index, value)
    def replace_RecipientDetails_at(self, index, value): self.RecipientDetails[index] = value
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.TrackingNumberUniqueIdentifiers is not None or
            self.CarrierCode is not None or
            self.ShipDate is not None or
            self.Destination is not None or
            self.RecipientDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackNotificationPackage', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackNotificationPackage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackNotificationPackage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackNotificationPackage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackNotificationPackage'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackNotificationPackage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.TrackingNumberUniqueIdentifiers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumberUniqueIdentifiers>%s</ns:TrackingNumberUniqueIdentifiers>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifiers), input_name='TrackingNumberUniqueIdentifiers')), eol_))
        if self.CarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CarrierCode>%s</ns:CarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), eol_))
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDate>%s</ns:ShipDate>%s' % (self.gds_format_date(self.ShipDate, input_name='ShipDate'), eol_))
        if self.Destination is not None:
            self.Destination.export(outfile, level, namespace_, name_='Destination', pretty_print=pretty_print)
        for RecipientDetails_ in self.RecipientDetails:
            RecipientDetails_.export(outfile, level, namespace_, name_='RecipientDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'TrackingNumberUniqueIdentifiers':
            TrackingNumberUniqueIdentifiers_ = child_.text
            TrackingNumberUniqueIdentifiers_ = self.gds_validate_string(TrackingNumberUniqueIdentifiers_, node, 'TrackingNumberUniqueIdentifiers')
            self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers_
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'RecipientDetails':
            obj_ = TrackNotificationRecipientDetail.factory()
            obj_.build(child_)
            self.RecipientDetails.append(obj_)
            obj_.original_tagname_ = 'RecipientDetails'
# end class TrackNotificationPackage


class TrackNotificationRecipientDetail(GeneratedsSuper):
    """Options available for a tracking notification recipient."""
    subclass = None
    superclass = None
    def __init__(self, NotificationEventsAvailable=None):
        self.original_tagname_ = None
        if NotificationEventsAvailable is None:
            self.NotificationEventsAvailable = []
        else:
            self.NotificationEventsAvailable = NotificationEventsAvailable
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackNotificationRecipientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackNotificationRecipientDetail.subclass:
            return TrackNotificationRecipientDetail.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationRecipientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationEventsAvailable(self): return self.NotificationEventsAvailable
    def set_NotificationEventsAvailable(self, NotificationEventsAvailable): self.NotificationEventsAvailable = NotificationEventsAvailable
    def add_NotificationEventsAvailable(self, value): self.NotificationEventsAvailable.append(value)
    def insert_NotificationEventsAvailable_at(self, index, value): self.NotificationEventsAvailable.insert(index, value)
    def replace_NotificationEventsAvailable_at(self, index, value): self.NotificationEventsAvailable[index] = value
    def validate_NotificationEventType(self, value):
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_SHIPMENT', 'ON_TENDER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationEventType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NotificationEventsAvailable
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackNotificationRecipientDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackNotificationRecipientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackNotificationRecipientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackNotificationRecipientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackNotificationRecipientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackNotificationRecipientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NotificationEventsAvailable>%s</ns:NotificationEventsAvailable>%s' % (self.gds_encode(self.gds_format_string(quote_xml(NotificationEventsAvailable_), input_name='NotificationEventsAvailable')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationEventsAvailable':
            NotificationEventsAvailable_ = child_.text
            NotificationEventsAvailable_ = self.gds_validate_string(NotificationEventsAvailable_, node, 'NotificationEventsAvailable')
            self.NotificationEventsAvailable.append(NotificationEventsAvailable_)
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.NotificationEventsAvailable[-1])
# end class TrackNotificationRecipientDetail


class TrackOtherIdentifierDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageIdentifier=None, TrackingNumberUniqueIdentifier=None, CarrierCode=None):
        self.original_tagname_ = None
        self.PackageIdentifier = PackageIdentifier
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackOtherIdentifierDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackOtherIdentifierDetail.subclass:
            return TrackOtherIdentifierDetail.subclass(*args_, **kwargs_)
        else:
            return TrackOtherIdentifierDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageIdentifier(self): return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier): self.PackageIdentifier = PackageIdentifier
    def get_TrackingNumberUniqueIdentifier(self): return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier): self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PackageIdentifier is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.CarrierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackOtherIdentifierDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackOtherIdentifierDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackOtherIdentifierDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackOtherIdentifierDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackOtherIdentifierDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackOtherIdentifierDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageIdentifier is not None:
            self.PackageIdentifier.export(outfile, level, namespace_, name_='PackageIdentifier', pretty_print=pretty_print)
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumberUniqueIdentifier>%s</ns:TrackingNumberUniqueIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), eol_))
        if self.CarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CarrierCode>%s</ns:CarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageIdentifier':
            obj_ = TrackPackageIdentifier.factory()
            obj_.build(child_)
            self.PackageIdentifier = obj_
            obj_.original_tagname_ = 'PackageIdentifier'
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            TrackingNumberUniqueIdentifier_ = child_.text
            TrackingNumberUniqueIdentifier_ = self.gds_validate_string(TrackingNumberUniqueIdentifier_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier_
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
# end class TrackOtherIdentifierDetail


class TrackPackageIdentifier(GeneratedsSuper):
    """The type and value of the package identifier that is to be used to
    retrieve the tracking information for a package."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_TrackIdentifierType(self.Type)
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackPackageIdentifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackPackageIdentifier.subclass:
            return TrackPackageIdentifier.subclass(*args_, **kwargs_)
        else:
            return TrackPackageIdentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def validate_TrackIdentifierType(self, value):
        # Validate type TrackIdentifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BILL_OF_LADING', 'COD_RETURN_TRACKING_NUMBER', 'CUSTOMER_AUTHORIZATION_NUMBER', 'CUSTOMER_REFERENCE', 'DEPARTMENT', 'DOCUMENT_AIRWAY_BILL', 'FREE_FORM_REFERENCE', 'GROUND_INTERNATIONAL', 'GROUND_SHIPMENT_ID', 'GROUP_MPS', 'INVOICE', 'JOB_GLOBAL_TRACKING_NUMBER', 'ORDER_GLOBAL_TRACKING_NUMBER', 'ORDER_TO_PAY_NUMBER', 'OUTBOUND_LINK_TO_RETURN', 'PARTNER_CARRIER_NUMBER', 'PART_NUMBER', 'PURCHASE_ORDER', 'REROUTE_TRACKING_NUMBER', 'RETURNED_TO_SHIPPER_TRACKING_NUMBER', 'RETURN_MATERIALS_AUTHORIZATION', 'SHIPPER_REFERENCE', 'STANDARD_MPS', 'TRACKING_NUMBER_OR_DOORTAG', 'TRANSPORTATION_CONTROL_NUMBER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackIdentifierType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackPackageIdentifier', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackPackageIdentifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackPackageIdentifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackPackageIdentifier', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackPackageIdentifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackPackageIdentifier', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TrackIdentifierType
            self.validate_TrackIdentifierType(self.Type)
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class TrackPackageIdentifier


class TrackPayment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Classification=None, Type=None, Description=None):
        self.original_tagname_ = None
        self.Classification = Classification
        self.validate_TrackChargesPaymentClassificationType(self.Classification)
        self.Type = Type
        self.validate_TrackPaymentType(self.Type)
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackPayment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackPayment.subclass:
            return TrackPayment.subclass(*args_, **kwargs_)
        else:
            return TrackPayment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Classification(self): return self.Classification
    def set_Classification(self, Classification): self.Classification = Classification
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_TrackChargesPaymentClassificationType(self, value):
        # Validate type TrackChargesPaymentClassificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DUTIES_AND_TAXES', 'TRANSPORTATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackChargesPaymentClassificationType' % {"value" : value.encode("utf-8")} )
    def validate_TrackPaymentType(self, value):
        # Validate type TrackPaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CASH_OR_CHECK_AT_DESTINATION', 'CASH_OR_CHECK_AT_ORIGIN', 'CREDIT_CARD_AT_DESTINATION', 'CREDIT_CARD_AT_ORIGIN', 'OTHER', 'RECIPIENT_ACCOUNT', 'SHIPPER_ACCOUNT', 'THIRD_PARTY_ACCOUNT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackPaymentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Classification is not None or
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackPayment', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackPayment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackPayment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackPayment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackPayment'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackPayment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Classification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Classification>%s</ns:Classification>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Classification), input_name='Classification')), eol_))
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Classification':
            Classification_ = child_.text
            Classification_ = self.gds_validate_string(Classification_, node, 'Classification')
            self.Classification = Classification_
            # validate type TrackChargesPaymentClassificationType
            self.validate_TrackChargesPaymentClassificationType(self.Classification)
        elif nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TrackPaymentType
            self.validate_TrackPaymentType(self.Type)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TrackPayment


class TrackReconciliation(GeneratedsSuper):
    """Used to report the status of a piece of a multiple piece shipment
    which is no longer traveling with the rest of the packages in
    the shipment or has not been accounted for."""
    subclass = None
    superclass = None
    def __init__(self, Status=None, Description=None):
        self.original_tagname_ = None
        self.Status = Status
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackReconciliation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackReconciliation.subclass:
            return TrackReconciliation.subclass(*args_, **kwargs_)
        else:
            return TrackReconciliation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Status is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackReconciliation', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackReconciliation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackReconciliation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackReconciliation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackReconciliation'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackReconciliation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Status>%s</ns:Status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TrackReconciliation


class TrackReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, CompletedTrackDetails=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if CompletedTrackDetails is None:
            self.CompletedTrackDetails = []
        else:
            self.CompletedTrackDetails = CompletedTrackDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackReply.subclass:
            return TrackReply.subclass(*args_, **kwargs_)
        else:
            return TrackReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CompletedTrackDetails(self): return self.CompletedTrackDetails
    def set_CompletedTrackDetails(self, CompletedTrackDetails): self.CompletedTrackDetails = CompletedTrackDetails
    def add_CompletedTrackDetails(self, value): self.CompletedTrackDetails.append(value)
    def insert_CompletedTrackDetails_at(self, index, value): self.CompletedTrackDetails.insert(index, value)
    def replace_CompletedTrackDetails_at(self, index, value): self.CompletedTrackDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CompletedTrackDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        for CompletedTrackDetails_ in self.CompletedTrackDetails:
            CompletedTrackDetails_.export(outfile, level, namespace_, name_='CompletedTrackDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'CompletedTrackDetails':
            obj_ = CompletedTrackDetail.factory()
            obj_.build(child_)
            self.CompletedTrackDetails.append(obj_)
            obj_.original_tagname_ = 'CompletedTrackDetails'
# end class TrackReply


class TrackRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, SelectionDetails=None, TransactionTimeOutValueInMilliseconds=None, ProcessingOptions=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if SelectionDetails is None:
            self.SelectionDetails = []
        else:
            self.SelectionDetails = SelectionDetails
        self.TransactionTimeOutValueInMilliseconds = TransactionTimeOutValueInMilliseconds
        if ProcessingOptions is None:
            self.ProcessingOptions = []
        else:
            self.ProcessingOptions = ProcessingOptions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackRequest.subclass:
            return TrackRequest.subclass(*args_, **kwargs_)
        else:
            return TrackRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_SelectionDetails(self): return self.SelectionDetails
    def set_SelectionDetails(self, SelectionDetails): self.SelectionDetails = SelectionDetails
    def add_SelectionDetails(self, value): self.SelectionDetails.append(value)
    def insert_SelectionDetails_at(self, index, value): self.SelectionDetails.insert(index, value)
    def replace_SelectionDetails_at(self, index, value): self.SelectionDetails[index] = value
    def get_TransactionTimeOutValueInMilliseconds(self): return self.TransactionTimeOutValueInMilliseconds
    def set_TransactionTimeOutValueInMilliseconds(self, TransactionTimeOutValueInMilliseconds): self.TransactionTimeOutValueInMilliseconds = TransactionTimeOutValueInMilliseconds
    def get_ProcessingOptions(self): return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions): self.ProcessingOptions = ProcessingOptions
    def add_ProcessingOptions(self, value): self.ProcessingOptions.append(value)
    def insert_ProcessingOptions_at(self, index, value): self.ProcessingOptions.insert(index, value)
    def replace_ProcessingOptions_at(self, index, value): self.ProcessingOptions[index] = value
    def validate_TrackRequestProcessingOptionType(self, value):
        # Validate type TrackRequestProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INCLUDE_DETAILED_SCANS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackRequestProcessingOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.SelectionDetails or
            self.TransactionTimeOutValueInMilliseconds is not None or
            self.ProcessingOptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        for SelectionDetails_ in self.SelectionDetails:
            SelectionDetails_.export(outfile, level, namespace_, name_='SelectionDetails', pretty_print=pretty_print)
        if self.TransactionTimeOutValueInMilliseconds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TransactionTimeOutValueInMilliseconds>%s</ns:TransactionTimeOutValueInMilliseconds>%s' % (self.gds_format_integer(self.TransactionTimeOutValueInMilliseconds, input_name='TransactionTimeOutValueInMilliseconds'), eol_))
        for ProcessingOptions_ in self.ProcessingOptions:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ProcessingOptions>%s</ns:ProcessingOptions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(ProcessingOptions_), input_name='ProcessingOptions')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'SelectionDetails':
            obj_ = TrackSelectionDetail.factory()
            obj_.build(child_)
            self.SelectionDetails.append(obj_)
            obj_.original_tagname_ = 'SelectionDetails'
        elif nodeName_ == 'TransactionTimeOutValueInMilliseconds':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TransactionTimeOutValueInMilliseconds')
            self.TransactionTimeOutValueInMilliseconds = ival_
        elif nodeName_ == 'ProcessingOptions':
            ProcessingOptions_ = child_.text
            ProcessingOptions_ = self.gds_validate_string(ProcessingOptions_, node, 'ProcessingOptions')
            self.ProcessingOptions.append(ProcessingOptions_)
            # validate type TrackRequestProcessingOptionType
            self.validate_TrackRequestProcessingOptionType(self.ProcessingOptions[-1])
# end class TrackRequest


class TrackReturnDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MovementStatus=None, LabelType=None, Description=None, AuthorizationName=None):
        self.original_tagname_ = None
        self.MovementStatus = MovementStatus
        self.validate_TrackReturnMovementStatusType(self.MovementStatus)
        self.LabelType = LabelType
        self.validate_TrackReturnLabelType(self.LabelType)
        self.Description = Description
        self.AuthorizationName = AuthorizationName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackReturnDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackReturnDetail.subclass:
            return TrackReturnDetail.subclass(*args_, **kwargs_)
        else:
            return TrackReturnDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MovementStatus(self): return self.MovementStatus
    def set_MovementStatus(self, MovementStatus): self.MovementStatus = MovementStatus
    def get_LabelType(self): return self.LabelType
    def set_LabelType(self, LabelType): self.LabelType = LabelType
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_AuthorizationName(self): return self.AuthorizationName
    def set_AuthorizationName(self, AuthorizationName): self.AuthorizationName = AuthorizationName
    def validate_TrackReturnMovementStatusType(self, value):
        # Validate type TrackReturnMovementStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['MOVEMENT_OCCURRED', 'NO_MOVEMENT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackReturnMovementStatusType' % {"value" : value.encode("utf-8")} )
    def validate_TrackReturnLabelType(self, value):
        # Validate type TrackReturnLabelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EMAIL', 'PRINT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackReturnLabelType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MovementStatus is not None or
            self.LabelType is not None or
            self.Description is not None or
            self.AuthorizationName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackReturnDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackReturnDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackReturnDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackReturnDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackReturnDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackReturnDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MovementStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MovementStatus>%s</ns:MovementStatus>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MovementStatus), input_name='MovementStatus')), eol_))
        if self.LabelType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LabelType>%s</ns:LabelType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelType), input_name='LabelType')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.AuthorizationName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AuthorizationName>%s</ns:AuthorizationName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationName), input_name='AuthorizationName')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MovementStatus':
            MovementStatus_ = child_.text
            MovementStatus_ = self.gds_validate_string(MovementStatus_, node, 'MovementStatus')
            self.MovementStatus = MovementStatus_
            # validate type TrackReturnMovementStatusType
            self.validate_TrackReturnMovementStatusType(self.MovementStatus)
        elif nodeName_ == 'LabelType':
            LabelType_ = child_.text
            LabelType_ = self.gds_validate_string(LabelType_, node, 'LabelType')
            self.LabelType = LabelType_
            # validate type TrackReturnLabelType
            self.validate_TrackReturnLabelType(self.LabelType)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'AuthorizationName':
            AuthorizationName_ = child_.text
            AuthorizationName_ = self.gds_validate_string(AuthorizationName_, node, 'AuthorizationName')
            self.AuthorizationName = AuthorizationName_
# end class TrackReturnDetail


class TrackSelectionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CarrierCode=None, OperatingCompany=None, PackageIdentifier=None, TrackingNumberUniqueIdentifier=None, ShipDateRangeBegin=None, ShipDateRangeEnd=None, ShipmentAccountNumber=None, SecureSpodAccount=None, Destination=None, PagingDetail=None, CustomerSpecifiedTimeOutValueInMilliseconds=None):
        self.original_tagname_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.OperatingCompany = OperatingCompany
        self.validate_OperatingCompanyType(self.OperatingCompany)
        self.PackageIdentifier = PackageIdentifier
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        if isinstance(ShipDateRangeBegin, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeBegin, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeBegin
        self.ShipDateRangeBegin = initvalue_
        if isinstance(ShipDateRangeEnd, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeEnd, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeEnd
        self.ShipDateRangeEnd = initvalue_
        self.ShipmentAccountNumber = ShipmentAccountNumber
        self.SecureSpodAccount = SecureSpodAccount
        self.Destination = Destination
        self.PagingDetail = PagingDetail
        self.CustomerSpecifiedTimeOutValueInMilliseconds = CustomerSpecifiedTimeOutValueInMilliseconds
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSelectionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSelectionDetail.subclass:
            return TrackSelectionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackSelectionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def get_OperatingCompany(self): return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany): self.OperatingCompany = OperatingCompany
    def get_PackageIdentifier(self): return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier): self.PackageIdentifier = PackageIdentifier
    def get_TrackingNumberUniqueIdentifier(self): return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier): self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_ShipDateRangeBegin(self): return self.ShipDateRangeBegin
    def set_ShipDateRangeBegin(self, ShipDateRangeBegin): self.ShipDateRangeBegin = ShipDateRangeBegin
    def get_ShipDateRangeEnd(self): return self.ShipDateRangeEnd
    def set_ShipDateRangeEnd(self, ShipDateRangeEnd): self.ShipDateRangeEnd = ShipDateRangeEnd
    def get_ShipmentAccountNumber(self): return self.ShipmentAccountNumber
    def set_ShipmentAccountNumber(self, ShipmentAccountNumber): self.ShipmentAccountNumber = ShipmentAccountNumber
    def get_SecureSpodAccount(self): return self.SecureSpodAccount
    def set_SecureSpodAccount(self, SecureSpodAccount): self.SecureSpodAccount = SecureSpodAccount
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_PagingDetail(self): return self.PagingDetail
    def set_PagingDetail(self, PagingDetail): self.PagingDetail = PagingDetail
    def get_CustomerSpecifiedTimeOutValueInMilliseconds(self): return self.CustomerSpecifiedTimeOutValueInMilliseconds
    def set_CustomerSpecifiedTimeOutValueInMilliseconds(self, CustomerSpecifiedTimeOutValueInMilliseconds): self.CustomerSpecifiedTimeOutValueInMilliseconds = CustomerSpecifiedTimeOutValueInMilliseconds
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_OperatingCompanyType(self, value):
        # Validate type OperatingCompanyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_CARGO', 'FEDEX_CORPORATE_SERVICES', 'FEDEX_CORPORATION', 'FEDEX_CUSTOMER_INFORMATION_SYSTEMS', 'FEDEX_CUSTOM_CRITICAL', 'FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_KINKOS', 'FEDEX_OFFICE', 'FEDEX_SERVICES', 'FEDEX_TRADE_NETWORKS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OperatingCompanyType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CarrierCode is not None or
            self.OperatingCompany is not None or
            self.PackageIdentifier is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.ShipDateRangeBegin is not None or
            self.ShipDateRangeEnd is not None or
            self.ShipmentAccountNumber is not None or
            self.SecureSpodAccount is not None or
            self.Destination is not None or
            self.PagingDetail is not None or
            self.CustomerSpecifiedTimeOutValueInMilliseconds is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackSelectionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSelectionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackSelectionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackSelectionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackSelectionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackSelectionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CarrierCode>%s</ns:CarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), eol_))
        if self.OperatingCompany is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OperatingCompany>%s</ns:OperatingCompany>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompany), input_name='OperatingCompany')), eol_))
        if self.PackageIdentifier is not None:
            self.PackageIdentifier.export(outfile, level, namespace_, name_='PackageIdentifier', pretty_print=pretty_print)
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumberUniqueIdentifier>%s</ns:TrackingNumberUniqueIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), eol_))
        if self.ShipDateRangeBegin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDateRangeBegin>%s</ns:ShipDateRangeBegin>%s' % (self.gds_format_date(self.ShipDateRangeBegin, input_name='ShipDateRangeBegin'), eol_))
        if self.ShipDateRangeEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDateRangeEnd>%s</ns:ShipDateRangeEnd>%s' % (self.gds_format_date(self.ShipDateRangeEnd, input_name='ShipDateRangeEnd'), eol_))
        if self.ShipmentAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipmentAccountNumber>%s</ns:ShipmentAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentAccountNumber), input_name='ShipmentAccountNumber')), eol_))
        if self.SecureSpodAccount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SecureSpodAccount>%s</ns:SecureSpodAccount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SecureSpodAccount), input_name='SecureSpodAccount')), eol_))
        if self.Destination is not None:
            self.Destination.export(outfile, level, namespace_, name_='Destination', pretty_print=pretty_print)
        if self.PagingDetail is not None:
            self.PagingDetail.export(outfile, level, namespace_, name_='PagingDetail', pretty_print=pretty_print)
        if self.CustomerSpecifiedTimeOutValueInMilliseconds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerSpecifiedTimeOutValueInMilliseconds>%s</ns:CustomerSpecifiedTimeOutValueInMilliseconds>%s' % (self.gds_format_integer(self.CustomerSpecifiedTimeOutValueInMilliseconds, input_name='CustomerSpecifiedTimeOutValueInMilliseconds'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'OperatingCompany':
            OperatingCompany_ = child_.text
            OperatingCompany_ = self.gds_validate_string(OperatingCompany_, node, 'OperatingCompany')
            self.OperatingCompany = OperatingCompany_
            # validate type OperatingCompanyType
            self.validate_OperatingCompanyType(self.OperatingCompany)
        elif nodeName_ == 'PackageIdentifier':
            obj_ = TrackPackageIdentifier.factory()
            obj_.build(child_)
            self.PackageIdentifier = obj_
            obj_.original_tagname_ = 'PackageIdentifier'
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            TrackingNumberUniqueIdentifier_ = child_.text
            TrackingNumberUniqueIdentifier_ = self.gds_validate_string(TrackingNumberUniqueIdentifier_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier_
        elif nodeName_ == 'ShipDateRangeBegin':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeBegin = dval_
        elif nodeName_ == 'ShipDateRangeEnd':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeEnd = dval_
        elif nodeName_ == 'ShipmentAccountNumber':
            ShipmentAccountNumber_ = child_.text
            ShipmentAccountNumber_ = self.gds_validate_string(ShipmentAccountNumber_, node, 'ShipmentAccountNumber')
            self.ShipmentAccountNumber = ShipmentAccountNumber_
        elif nodeName_ == 'SecureSpodAccount':
            SecureSpodAccount_ = child_.text
            SecureSpodAccount_ = self.gds_validate_string(SecureSpodAccount_, node, 'SecureSpodAccount')
            self.SecureSpodAccount = SecureSpodAccount_
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'PagingDetail':
            obj_ = PagingDetail.factory()
            obj_.build(child_)
            self.PagingDetail = obj_
            obj_.original_tagname_ = 'PagingDetail'
        elif nodeName_ == 'CustomerSpecifiedTimeOutValueInMilliseconds':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'CustomerSpecifiedTimeOutValueInMilliseconds')
            self.CustomerSpecifiedTimeOutValueInMilliseconds = ival_
# end class TrackSelectionDetail


class TrackServiceDescriptionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, ShortDescription=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_ServiceType(self.Type)
        self.Description = Description
        self.ShortDescription = ShortDescription
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackServiceDescriptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackServiceDescriptionDetail.subclass:
            return TrackServiceDescriptionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackServiceDescriptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ShortDescription(self): return self.ShortDescription
    def set_ShortDescription(self, ShortDescription): self.ShortDescription = ShortDescription
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_CARGO_AIRPORT_TO_AIRPORT', 'FEDEX_CARGO_FREIGHT_FORWARDING', 'FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT', 'FEDEX_CARGO_INTERNATIONAL_PREMIUM', 'FEDEX_CARGO_MAIL', 'FEDEX_CARGO_REGISTERED_MAIL', 'FEDEX_CARGO_SURFACE_MAIL', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK', 'FEDEX_CUSTOM_CRITICAL_CHARTER_AIR', 'FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR', 'FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None or
            self.ShortDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackServiceDescriptionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackServiceDescriptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackServiceDescriptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackServiceDescriptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackServiceDescriptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackServiceDescriptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ShortDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShortDescription>%s</ns:ShortDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShortDescription), input_name='ShortDescription')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type ServiceType
            self.validate_ServiceType(self.Type)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ShortDescription':
            ShortDescription_ = child_.text
            ShortDescription_ = self.gds_validate_string(ShortDescription_, node, 'ShortDescription')
            self.ShortDescription = ShortDescription_
# end class TrackServiceDescriptionDetail


class TrackSpecialHandling(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, PaymentType=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_TrackSpecialHandlingType(self.Type)
        self.Description = Description
        self.PaymentType = PaymentType
        self.validate_TrackPaymentType(self.PaymentType)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSpecialHandling)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSpecialHandling.subclass:
            return TrackSpecialHandling.subclass(*args_, **kwargs_)
        else:
            return TrackSpecialHandling(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PaymentType(self): return self.PaymentType
    def set_PaymentType(self, PaymentType): self.PaymentType = PaymentType
    def validate_TrackSpecialHandlingType(self, value):
        # Validate type TrackSpecialHandlingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCESSIBLE_DANGEROUS_GOODS', 'ADULT_SIGNATURE_OPTION', 'AIRBILL_AUTOMATION', 'AIRBILL_DELIVERY', 'ALCOHOL', 'AM_DELIVERY_GUARANTEE', 'APPOINTMENT_DELIVERY', 'BATTERY', 'BILL_RECIPIENT', 'BROKER_SELECT_OPTION', 'CALL_BEFORE_DELIVERY', 'CALL_TAG', 'CALL_TAG_DAMAGE', 'CHARGEABLE_CODE', 'COD', 'COLLECT', 'CONSOLIDATION', 'CONSOLIDATION_SMALLS_BAG', 'CURRENCY', 'CUT_FLOWERS', 'DATE_CERTAIN_DELIVERY', 'DELIVERY_ON_INVOICE_ACCEPTANCE', 'DELIVERY_REATTEMPT', 'DELIVERY_RECEIPT', 'DELIVER_WEEKDAY', 'DIRECT_SIGNATURE_OPTION', 'DOMESTIC', 'DO_NOT_BREAK_DOWN_PALLETS', 'DO_NOT_STACK_PALLETS', 'DRY_ICE', 'DRY_ICE_ADDED', 'EAST_COAST_SPECIAL', 'ELECTRONIC_COD', 'ELECTRONIC_DOCUMENTS_WITH_ORIGINALS', 'ELECTRONIC_SIGNATURE_SERVICE', 'ELECTRONIC_TRADE_DOCUMENTS', 'EVENING_DELIVERY', 'EXCLUSIVE_USE', 'EXTENDED_DELIVERY', 'EXTENDED_PICKUP', 'EXTRA_LABOR', 'EXTREME_LENGTH', 'FOOD', 'FREIGHT_ON_VALUE_CARRIER_RISK', 'FREIGHT_ON_VALUE_OWN_RISK', 'FREIGHT_TO_COLLECT', 'FULLY_REGULATED_DANGEROUS_GOODS', 'GEL_PACKS_ADDED_OR_REPLACED', 'GROUND_SUPPORT_FOR_SMARTPOST', 'GUARANTEED_FUNDS', 'HAZMAT', 'HIGH_FLOOR', 'HOLD_AT_LOCATION', 'HOLIDAY_DELIVERY', 'INACCESSIBLE_DANGEROUS_GOODS', 'INDIRECT_SIGNATURE_OPTION', 'INSIDE_DELIVERY', 'INSIDE_PICKUP', 'INTERNATIONAL', 'INTERNATIONAL_CONTROLLED_EXPORT', 'INTERNATIONAL_MAIL_SERVICE', 'INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS', 'LIFTGATE', 'LIFTGATE_DELIVERY', 'LIFTGATE_PICKUP', 'LIMITED_ACCESS_DELIVERY', 'LIMITED_ACCESS_PICKUP', 'LIMITED_QUANTITIES_DANGEROUS_GOODS', 'MARKING_OR_TAGGING', 'NET_RETURN', 'NON_BUSINESS_TIME', 'NON_STANDARD_CONTAINER', 'NO_SIGNATURE_REQUIRED_SIGNATURE_OPTION', 'ORDER_NOTIFY', 'OTHER', 'OTHER_REGULATED_MATERIAL_DOMESTIC', 'PACKAGE_RETURN_PROGRAM', 'PIECE_COUNT_VERIFICATION', 'POISON', 'PREPAID', 'PRIORITY_ALERT', 'PRIORITY_ALERT_PLUS', 'PROTECTION_FROM_FREEZING', 'RAIL_MODE', 'RECONSIGNMENT_CHARGES', 'REROUTE_CROSS_COUNTRY_DEFERRED', 'REROUTE_CROSS_COUNTRY_EXPEDITED', 'REROUTE_LOCAL', 'RESIDENTIAL_DELIVERY', 'RESIDENTIAL_PICKUP', 'RETURNS_CLEARANCE', 'RETURNS_CLEARANCE_SPECIAL_ROUTING_REQUIRED', 'RETURN_MANAGER', 'SATURDAY_DELIVERY', 'SHIPMENT_PLACED_IN_COLD_STORAGE', 'SINGLE_SHIPMENT', 'SMALL_QUANTITY_EXCEPTION', 'SORT_AND_SEGREGATE', 'SPECIAL_DELIVERY', 'SPECIAL_EQUIPMENT', 'STANDARD_GROUND_SERVICE', 'STORAGE', 'SUNDAY_DELIVERY', 'THIRD_PARTY_BILLING', 'THIRD_PARTY_CONSIGNEE', 'TOP_LOAD', 'WEEKEND_DELIVERY', 'WEEKEND_PICKUP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackSpecialHandlingType' % {"value" : value.encode("utf-8")} )
    def validate_TrackPaymentType(self, value):
        # Validate type TrackPaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CASH_OR_CHECK_AT_DESTINATION', 'CASH_OR_CHECK_AT_ORIGIN', 'CREDIT_CARD_AT_DESTINATION', 'CREDIT_CARD_AT_ORIGIN', 'OTHER', 'RECIPIENT_ACCOUNT', 'SHIPPER_ACCOUNT', 'THIRD_PARTY_ACCOUNT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackPaymentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None or
            self.PaymentType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackSpecialHandling', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSpecialHandling')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackSpecialHandling')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackSpecialHandling', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackSpecialHandling'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackSpecialHandling', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PaymentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PaymentType>%s</ns:PaymentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TrackSpecialHandlingType
            self.validate_TrackSpecialHandlingType(self.Type)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PaymentType':
            PaymentType_ = child_.text
            PaymentType_ = self.gds_validate_string(PaymentType_, node, 'PaymentType')
            self.PaymentType = PaymentType_
            # validate type TrackPaymentType
            self.validate_TrackPaymentType(self.PaymentType)
# end class TrackSpecialHandling


class TrackSpecialInstruction(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, DeliveryOption=None, StatusDetail=None, OriginalEstimatedDeliveryTimestamp=None, OriginalRequestTime=None, RequestedAppointmentTime=None):
        self.original_tagname_ = None
        self.Description = Description
        self.DeliveryOption = DeliveryOption
        self.validate_TrackDeliveryOptionType(self.DeliveryOption)
        self.StatusDetail = StatusDetail
        if isinstance(OriginalEstimatedDeliveryTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OriginalEstimatedDeliveryTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OriginalEstimatedDeliveryTimestamp
        self.OriginalEstimatedDeliveryTimestamp = initvalue_
        if isinstance(OriginalRequestTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OriginalRequestTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OriginalRequestTime
        self.OriginalRequestTime = initvalue_
        self.RequestedAppointmentTime = RequestedAppointmentTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSpecialInstruction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSpecialInstruction.subclass:
            return TrackSpecialInstruction.subclass(*args_, **kwargs_)
        else:
            return TrackSpecialInstruction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_DeliveryOption(self): return self.DeliveryOption
    def set_DeliveryOption(self, DeliveryOption): self.DeliveryOption = DeliveryOption
    def get_StatusDetail(self): return self.StatusDetail
    def set_StatusDetail(self, StatusDetail): self.StatusDetail = StatusDetail
    def get_OriginalEstimatedDeliveryTimestamp(self): return self.OriginalEstimatedDeliveryTimestamp
    def set_OriginalEstimatedDeliveryTimestamp(self, OriginalEstimatedDeliveryTimestamp): self.OriginalEstimatedDeliveryTimestamp = OriginalEstimatedDeliveryTimestamp
    def get_OriginalRequestTime(self): return self.OriginalRequestTime
    def set_OriginalRequestTime(self, OriginalRequestTime): self.OriginalRequestTime = OriginalRequestTime
    def get_RequestedAppointmentTime(self): return self.RequestedAppointmentTime
    def set_RequestedAppointmentTime(self, RequestedAppointmentTime): self.RequestedAppointmentTime = RequestedAppointmentTime
    def validate_TrackDeliveryOptionType(self, value):
        # Validate type TrackDeliveryOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['APPOINTMENT', 'DATE_CERTAIN', 'ELECTRONIC_SIGNATURE_RELEASE', 'EVENING', 'REDIRECT_TO_HOLD_AT_LOCATION', 'REROUTE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackDeliveryOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Description is not None or
            self.DeliveryOption is not None or
            self.StatusDetail is not None or
            self.OriginalEstimatedDeliveryTimestamp is not None or
            self.OriginalRequestTime is not None or
            self.RequestedAppointmentTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackSpecialInstruction', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSpecialInstruction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackSpecialInstruction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackSpecialInstruction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackSpecialInstruction'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackSpecialInstruction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.DeliveryOption is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DeliveryOption>%s</ns:DeliveryOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryOption), input_name='DeliveryOption')), eol_))
        if self.StatusDetail is not None:
            self.StatusDetail.export(outfile, level, namespace_, name_='StatusDetail', pretty_print=pretty_print)
        if self.OriginalEstimatedDeliveryTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OriginalEstimatedDeliveryTimestamp>%s</ns:OriginalEstimatedDeliveryTimestamp>%s' % (self.gds_format_datetime(self.OriginalEstimatedDeliveryTimestamp, input_name='OriginalEstimatedDeliveryTimestamp'), eol_))
        if self.OriginalRequestTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OriginalRequestTime>%s</ns:OriginalRequestTime>%s' % (self.gds_format_datetime(self.OriginalRequestTime, input_name='OriginalRequestTime'), eol_))
        if self.RequestedAppointmentTime is not None:
            self.RequestedAppointmentTime.export(outfile, level, namespace_, name_='RequestedAppointmentTime', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'DeliveryOption':
            DeliveryOption_ = child_.text
            DeliveryOption_ = self.gds_validate_string(DeliveryOption_, node, 'DeliveryOption')
            self.DeliveryOption = DeliveryOption_
            # validate type TrackDeliveryOptionType
            self.validate_TrackDeliveryOptionType(self.DeliveryOption)
        elif nodeName_ == 'StatusDetail':
            obj_ = SpecialInstructionStatusDetail.factory()
            obj_.build(child_)
            self.StatusDetail = obj_
            obj_.original_tagname_ = 'StatusDetail'
        elif nodeName_ == 'OriginalEstimatedDeliveryTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OriginalEstimatedDeliveryTimestamp = dval_
        elif nodeName_ == 'OriginalRequestTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OriginalRequestTime = dval_
        elif nodeName_ == 'RequestedAppointmentTime':
            obj_ = AppointmentDetail.factory()
            obj_.build(child_)
            self.RequestedAppointmentTime = obj_
            obj_.original_tagname_ = 'RequestedAppointmentTime'
# end class TrackSpecialInstruction


class TrackSplitShipmentPart(GeneratedsSuper):
    """Used when a cargo shipment is split across vehicles. This is used to
    give the status of each part of the shipment."""
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Timestamp=None, StatusCode=None, StatusDescription=None):
        self.original_tagname_ = None
        self.PieceCount = PieceCount
        if isinstance(Timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Timestamp
        self.Timestamp = initvalue_
        self.StatusCode = StatusCode
        self.StatusDescription = StatusDescription
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSplitShipmentPart)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSplitShipmentPart.subclass:
            return TrackSplitShipmentPart.subclass(*args_, **kwargs_)
        else:
            return TrackSplitShipmentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PieceCount(self): return self.PieceCount
    def set_PieceCount(self, PieceCount): self.PieceCount = PieceCount
    def get_Timestamp(self): return self.Timestamp
    def set_Timestamp(self, Timestamp): self.Timestamp = Timestamp
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_StatusDescription(self): return self.StatusDescription
    def set_StatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Timestamp is not None or
            self.StatusCode is not None or
            self.StatusDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackSplitShipmentPart', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSplitShipmentPart')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackSplitShipmentPart')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackSplitShipmentPart', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackSplitShipmentPart'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackSplitShipmentPart', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PieceCount>%s</ns:PieceCount>%s' % (self.gds_format_integer(self.PieceCount, input_name='PieceCount'), eol_))
        if self.Timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Timestamp>%s</ns:Timestamp>%s' % (self.gds_format_datetime(self.Timestamp, input_name='Timestamp'), eol_))
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusCode>%s</ns:StatusCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), eol_))
        if self.StatusDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StatusDescription>%s</ns:StatusDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PieceCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
        elif nodeName_ == 'Timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Timestamp = dval_
        elif nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'StatusDescription':
            StatusDescription_ = child_.text
            StatusDescription_ = self.gds_validate_string(StatusDescription_, node, 'StatusDescription')
            self.StatusDescription = StatusDescription_
# end class TrackSplitShipmentPart


class TrackStatusAncillaryDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Reason=None, ReasonDescription=None, Action=None, ActionDescription=None):
        self.original_tagname_ = None
        self.Reason = Reason
        self.ReasonDescription = ReasonDescription
        self.Action = Action
        self.ActionDescription = ActionDescription
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackStatusAncillaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackStatusAncillaryDetail.subclass:
            return TrackStatusAncillaryDetail.subclass(*args_, **kwargs_)
        else:
            return TrackStatusAncillaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reason(self): return self.Reason
    def set_Reason(self, Reason): self.Reason = Reason
    def get_ReasonDescription(self): return self.ReasonDescription
    def set_ReasonDescription(self, ReasonDescription): self.ReasonDescription = ReasonDescription
    def get_Action(self): return self.Action
    def set_Action(self, Action): self.Action = Action
    def get_ActionDescription(self): return self.ActionDescription
    def set_ActionDescription(self, ActionDescription): self.ActionDescription = ActionDescription
    def hasContent_(self):
        if (
            self.Reason is not None or
            self.ReasonDescription is not None or
            self.Action is not None or
            self.ActionDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackStatusAncillaryDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackStatusAncillaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackStatusAncillaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackStatusAncillaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackStatusAncillaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackStatusAncillaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Reason>%s</ns:Reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), eol_))
        if self.ReasonDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ReasonDescription>%s</ns:ReasonDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReasonDescription), input_name='ReasonDescription')), eol_))
        if self.Action is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Action>%s</ns:Action>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Action), input_name='Action')), eol_))
        if self.ActionDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ActionDescription>%s</ns:ActionDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ActionDescription), input_name='ActionDescription')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reason':
            Reason_ = child_.text
            Reason_ = self.gds_validate_string(Reason_, node, 'Reason')
            self.Reason = Reason_
        elif nodeName_ == 'ReasonDescription':
            ReasonDescription_ = child_.text
            ReasonDescription_ = self.gds_validate_string(ReasonDescription_, node, 'ReasonDescription')
            self.ReasonDescription = ReasonDescription_
        elif nodeName_ == 'Action':
            Action_ = child_.text
            Action_ = self.gds_validate_string(Action_, node, 'Action')
            self.Action = Action_
        elif nodeName_ == 'ActionDescription':
            ActionDescription_ = child_.text
            ActionDescription_ = self.gds_validate_string(ActionDescription_, node, 'ActionDescription')
            self.ActionDescription = ActionDescription_
# end class TrackStatusAncillaryDetail


class TrackStatusDetail(GeneratedsSuper):
    """Specifies the details about the status of the track information for
    the shipments being tracked."""
    subclass = None
    superclass = None
    def __init__(self, CreationTime=None, Code=None, Description=None, Location=None, AncillaryDetails=None):
        self.original_tagname_ = None
        if isinstance(CreationTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreationTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreationTime
        self.CreationTime = initvalue_
        self.Code = Code
        self.Description = Description
        self.Location = Location
        if AncillaryDetails is None:
            self.AncillaryDetails = []
        else:
            self.AncillaryDetails = AncillaryDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackStatusDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackStatusDetail.subclass:
            return TrackStatusDetail.subclass(*args_, **kwargs_)
        else:
            return TrackStatusDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CreationTime(self): return self.CreationTime
    def set_CreationTime(self, CreationTime): self.CreationTime = CreationTime
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_AncillaryDetails(self): return self.AncillaryDetails
    def set_AncillaryDetails(self, AncillaryDetails): self.AncillaryDetails = AncillaryDetails
    def add_AncillaryDetails(self, value): self.AncillaryDetails.append(value)
    def insert_AncillaryDetails_at(self, index, value): self.AncillaryDetails.insert(index, value)
    def replace_AncillaryDetails_at(self, index, value): self.AncillaryDetails[index] = value
    def hasContent_(self):
        if (
            self.CreationTime is not None or
            self.Code is not None or
            self.Description is not None or
            self.Location is not None or
            self.AncillaryDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackStatusDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackStatusDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackStatusDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackStatusDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackStatusDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackStatusDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreationTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CreationTime>%s</ns:CreationTime>%s' % (self.gds_format_datetime(self.CreationTime, input_name='CreationTime'), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Code>%s</ns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Location is not None:
            self.Location.export(outfile, level, namespace_, name_='Location', pretty_print=pretty_print)
        for AncillaryDetails_ in self.AncillaryDetails:
            AncillaryDetails_.export(outfile, level, namespace_, name_='AncillaryDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CreationTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreationTime = dval_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Location':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
        elif nodeName_ == 'AncillaryDetails':
            obj_ = TrackStatusAncillaryDetail.factory()
            obj_.build(child_)
            self.AncillaryDetails.append(obj_)
            obj_.original_tagname_ = 'AncillaryDetails'
# end class TrackStatusDetail


class TrackingBillOfLadingDocumentDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None):
        self.original_tagname_ = None
        self.DocumentFormat = DocumentFormat
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingBillOfLadingDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingBillOfLadingDocumentDetail.subclass:
            return TrackingBillOfLadingDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingBillOfLadingDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentFormat(self): return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat): self.DocumentFormat = DocumentFormat
    def hasContent_(self):
        if (
            self.DocumentFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingBillOfLadingDocumentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingBillOfLadingDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingBillOfLadingDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingBillOfLadingDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingBillOfLadingDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingBillOfLadingDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            self.DocumentFormat.export(outfile, level, namespace_, name_='DocumentFormat', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentFormat':
            obj_ = TrackingDocumentFormat.factory()
            obj_.build(child_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
# end class TrackingBillOfLadingDocumentDetail


class TrackingDateOrTimestamp(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, DateOrTimestamp=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_TrackingDateOrTimestampType(self.Type)
        self.DateOrTimestamp = DateOrTimestamp
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDateOrTimestamp)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDateOrTimestamp.subclass:
            return TrackingDateOrTimestamp.subclass(*args_, **kwargs_)
        else:
            return TrackingDateOrTimestamp(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_DateOrTimestamp(self): return self.DateOrTimestamp
    def set_DateOrTimestamp(self, DateOrTimestamp): self.DateOrTimestamp = DateOrTimestamp
    def validate_TrackingDateOrTimestampType(self, value):
        # Validate type TrackingDateOrTimestampType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACTUAL_DELIVERY', 'ACTUAL_PICKUP', 'ACTUAL_TENDER', 'ANTICIPATED_TENDER', 'APPOINTMENT_DELIVERY', 'ESTIMATED_DELIVERY', 'ESTIMATED_PICKUP', 'SHIP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDateOrTimestampType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.DateOrTimestamp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingDateOrTimestamp', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDateOrTimestamp')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingDateOrTimestamp')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingDateOrTimestamp', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingDateOrTimestamp'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingDateOrTimestamp', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.DateOrTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DateOrTimestamp>%s</ns:DateOrTimestamp>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DateOrTimestamp), input_name='DateOrTimestamp')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TrackingDateOrTimestampType
            self.validate_TrackingDateOrTimestampType(self.Type)
        elif nodeName_ == 'DateOrTimestamp':
            DateOrTimestamp_ = child_.text
            DateOrTimestamp_ = self.gds_validate_string(DateOrTimestamp_, node, 'DateOrTimestamp')
            self.DateOrTimestamp = DateOrTimestamp_
# end class TrackingDateOrTimestamp


class TrackingDocument(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Localizations=None, ImageType=None, Resolution=None, Parts=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_TrackingDocumentType(self.Type)
        if Localizations is None:
            self.Localizations = []
        else:
            self.Localizations = Localizations
        self.ImageType = ImageType
        self.validate_TrackingDocumentImageType(self.ImageType)
        self.Resolution = Resolution
        if Parts is None:
            self.Parts = []
        else:
            self.Parts = Parts
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocument)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocument.subclass:
            return TrackingDocument.subclass(*args_, **kwargs_)
        else:
            return TrackingDocument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Localizations(self): return self.Localizations
    def set_Localizations(self, Localizations): self.Localizations = Localizations
    def add_Localizations(self, value): self.Localizations.append(value)
    def insert_Localizations_at(self, index, value): self.Localizations.insert(index, value)
    def replace_Localizations_at(self, index, value): self.Localizations[index] = value
    def get_ImageType(self): return self.ImageType
    def set_ImageType(self, ImageType): self.ImageType = ImageType
    def get_Resolution(self): return self.Resolution
    def set_Resolution(self, Resolution): self.Resolution = Resolution
    def get_Parts(self): return self.Parts
    def set_Parts(self, Parts): self.Parts = Parts
    def add_Parts(self, value): self.Parts.append(value)
    def insert_Parts_at(self, index, value): self.Parts.insert(index, value)
    def replace_Parts_at(self, index, value): self.Parts[index] = value
    def validate_TrackingDocumentType(self, value):
        # Validate type TrackingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BILL_OF_LADING', 'FREIGHT_BILLING_DOCUMENT', 'SIGNATURE_PROOF_OF_DELIVERY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDocumentType' % {"value" : value.encode("utf-8")} )
    def validate_TrackingDocumentImageType(self, value):
        # Validate type TrackingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PDF', 'PNG']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDocumentImageType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Localizations or
            self.ImageType is not None or
            self.Resolution is not None or
            self.Parts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingDocument', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocument')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingDocument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingDocument', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingDocument'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingDocument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        for Localizations_ in self.Localizations:
            Localizations_.export(outfile, level, namespace_, name_='Localizations', pretty_print=pretty_print)
        if self.ImageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ImageType>%s</ns:ImageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), eol_))
        if self.Resolution is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Resolution>%s</ns:Resolution>%s' % (self.gds_format_integer(self.Resolution, input_name='Resolution'), eol_))
        for Parts_ in self.Parts:
            Parts_.export(outfile, level, namespace_, name_='Parts', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TrackingDocumentType
            self.validate_TrackingDocumentType(self.Type)
        elif nodeName_ == 'Localizations':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localizations.append(obj_)
            obj_.original_tagname_ = 'Localizations'
        elif nodeName_ == 'ImageType':
            ImageType_ = child_.text
            ImageType_ = self.gds_validate_string(ImageType_, node, 'ImageType')
            self.ImageType = ImageType_
            # validate type TrackingDocumentImageType
            self.validate_TrackingDocumentImageType(self.ImageType)
        elif nodeName_ == 'Resolution':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Resolution')
            self.Resolution = ival_
        elif nodeName_ == 'Parts':
            obj_ = DocumentPart.factory()
            obj_.build(child_)
            self.Parts.append(obj_)
            obj_.original_tagname_ = 'Parts'
# end class TrackingDocument


class TrackingDocumentDispositionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DispositionType=None, EMailDetail=None):
        self.original_tagname_ = None
        self.DispositionType = DispositionType
        self.validate_TrackingDocumentDispositionType(self.DispositionType)
        self.EMailDetail = EMailDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentDispositionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentDispositionDetail.subclass:
            return TrackingDocumentDispositionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentDispositionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DispositionType(self): return self.DispositionType
    def set_DispositionType(self, DispositionType): self.DispositionType = DispositionType
    def get_EMailDetail(self): return self.EMailDetail
    def set_EMailDetail(self, EMailDetail): self.EMailDetail = EMailDetail
    def validate_TrackingDocumentDispositionType(self, value):
        # Validate type TrackingDocumentDispositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EMAIL', 'FAX', 'RETURN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDocumentDispositionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DispositionType is not None or
            self.EMailDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingDocumentDispositionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentDispositionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingDocumentDispositionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingDocumentDispositionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingDocumentDispositionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingDocumentDispositionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DispositionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DispositionType>%s</ns:DispositionType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DispositionType), input_name='DispositionType')), eol_))
        if self.EMailDetail is not None:
            self.EMailDetail.export(outfile, level, namespace_, name_='EMailDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DispositionType':
            DispositionType_ = child_.text
            DispositionType_ = self.gds_validate_string(DispositionType_, node, 'DispositionType')
            self.DispositionType = DispositionType_
            # validate type TrackingDocumentDispositionType
            self.validate_TrackingDocumentDispositionType(self.DispositionType)
        elif nodeName_ == 'EMailDetail':
            obj_ = TrackingDocumentEmailDetail.factory()
            obj_.build(child_)
            self.EMailDetail = obj_
            obj_.original_tagname_ = 'EMailDetail'
# end class TrackingDocumentDispositionDetail


class TrackingDocumentEmailDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Recipients=None, Sender=None, Localization=None, PersonalMessage=None):
        self.original_tagname_ = None
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
        self.Sender = Sender
        self.Localization = Localization
        self.PersonalMessage = PersonalMessage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentEmailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentEmailDetail.subclass:
            return TrackingDocumentEmailDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentEmailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Recipients(self): return self.Recipients
    def set_Recipients(self, Recipients): self.Recipients = Recipients
    def add_Recipients(self, value): self.Recipients.append(value)
    def insert_Recipients_at(self, index, value): self.Recipients.insert(index, value)
    def replace_Recipients_at(self, index, value): self.Recipients[index] = value
    def get_Sender(self): return self.Sender
    def set_Sender(self, Sender): self.Sender = Sender
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def get_PersonalMessage(self): return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage): self.PersonalMessage = PersonalMessage
    def hasContent_(self):
        if (
            self.Recipients or
            self.Sender is not None or
            self.Localization is not None or
            self.PersonalMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingDocumentEmailDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentEmailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingDocumentEmailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingDocumentEmailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingDocumentEmailDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingDocumentEmailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Recipients_ in self.Recipients:
            Recipients_.export(outfile, level, namespace_, name_='Recipients', pretty_print=pretty_print)
        if self.Sender is not None:
            self.Sender.export(outfile, level, namespace_, name_='Sender', pretty_print=pretty_print)
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
        if self.PersonalMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonalMessage>%s</ns:PersonalMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Recipients':
            obj_ = EMailDetail.factory()
            obj_.build(child_)
            self.Recipients.append(obj_)
            obj_.original_tagname_ = 'Recipients'
        elif nodeName_ == 'Sender':
            obj_ = EMailDetail.factory()
            obj_.build(child_)
            self.Sender = obj_
            obj_.original_tagname_ = 'Sender'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
        elif nodeName_ == 'PersonalMessage':
            PersonalMessage_ = child_.text
            PersonalMessage_ = self.gds_validate_string(PersonalMessage_, node, 'PersonalMessage')
            self.PersonalMessage = PersonalMessage_
# end class TrackingDocumentEmailDetail


class TrackingDocumentFormat(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Dispositions=None, Grouping=None, ImageType=None, Localization=None):
        self.original_tagname_ = None
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.Grouping = Grouping
        self.validate_TrackingDocumentGroupingType(self.Grouping)
        self.ImageType = ImageType
        self.validate_TrackingDocumentImageType(self.ImageType)
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentFormat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentFormat.subclass:
            return TrackingDocumentFormat.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentFormat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dispositions(self): return self.Dispositions
    def set_Dispositions(self, Dispositions): self.Dispositions = Dispositions
    def add_Dispositions(self, value): self.Dispositions.append(value)
    def insert_Dispositions_at(self, index, value): self.Dispositions.insert(index, value)
    def replace_Dispositions_at(self, index, value): self.Dispositions[index] = value
    def get_Grouping(self): return self.Grouping
    def set_Grouping(self, Grouping): self.Grouping = Grouping
    def get_ImageType(self): return self.ImageType
    def set_ImageType(self, ImageType): self.ImageType = ImageType
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def validate_TrackingDocumentGroupingType(self, value):
        # Validate type TrackingDocumentGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CONSOLIDATED_BY_DOCUMENT_TYPE', 'INDIVIDUAL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDocumentGroupingType' % {"value" : value.encode("utf-8")} )
    def validate_TrackingDocumentImageType(self, value):
        # Validate type TrackingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PDF', 'PNG']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDocumentImageType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Dispositions or
            self.Grouping is not None or
            self.ImageType is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingDocumentFormat', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentFormat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingDocumentFormat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingDocumentFormat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingDocumentFormat'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingDocumentFormat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dispositions_ in self.Dispositions:
            Dispositions_.export(outfile, level, namespace_, name_='Dispositions', pretty_print=pretty_print)
        if self.Grouping is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Grouping>%s</ns:Grouping>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), eol_))
        if self.ImageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ImageType>%s</ns:ImageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dispositions':
            obj_ = TrackingDocumentDispositionDetail.factory()
            obj_.build(child_)
            self.Dispositions.append(obj_)
            obj_.original_tagname_ = 'Dispositions'
        elif nodeName_ == 'Grouping':
            Grouping_ = child_.text
            Grouping_ = self.gds_validate_string(Grouping_, node, 'Grouping')
            self.Grouping = Grouping_
            # validate type TrackingDocumentGroupingType
            self.validate_TrackingDocumentGroupingType(self.Grouping)
        elif nodeName_ == 'ImageType':
            ImageType_ = child_.text
            ImageType_ = self.gds_validate_string(ImageType_, node, 'ImageType')
            self.ImageType = ImageType_
            # validate type TrackingDocumentImageType
            self.validate_TrackingDocumentImageType(self.ImageType)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TrackingDocumentFormat


class TrackingDocumentSpecification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DocumentTypes=None, BillOfLadingDocumentDetail=None, FreightBillingDocumentDetail=None, SignatureProofOfDeliveryDetail=None):
        self.original_tagname_ = None
        if DocumentTypes is None:
            self.DocumentTypes = []
        else:
            self.DocumentTypes = DocumentTypes
        self.BillOfLadingDocumentDetail = BillOfLadingDocumentDetail
        self.FreightBillingDocumentDetail = FreightBillingDocumentDetail
        self.SignatureProofOfDeliveryDetail = SignatureProofOfDeliveryDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentSpecification.subclass:
            return TrackingDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentTypes(self): return self.DocumentTypes
    def set_DocumentTypes(self, DocumentTypes): self.DocumentTypes = DocumentTypes
    def add_DocumentTypes(self, value): self.DocumentTypes.append(value)
    def insert_DocumentTypes_at(self, index, value): self.DocumentTypes.insert(index, value)
    def replace_DocumentTypes_at(self, index, value): self.DocumentTypes[index] = value
    def get_BillOfLadingDocumentDetail(self): return self.BillOfLadingDocumentDetail
    def set_BillOfLadingDocumentDetail(self, BillOfLadingDocumentDetail): self.BillOfLadingDocumentDetail = BillOfLadingDocumentDetail
    def get_FreightBillingDocumentDetail(self): return self.FreightBillingDocumentDetail
    def set_FreightBillingDocumentDetail(self, FreightBillingDocumentDetail): self.FreightBillingDocumentDetail = FreightBillingDocumentDetail
    def get_SignatureProofOfDeliveryDetail(self): return self.SignatureProofOfDeliveryDetail
    def set_SignatureProofOfDeliveryDetail(self, SignatureProofOfDeliveryDetail): self.SignatureProofOfDeliveryDetail = SignatureProofOfDeliveryDetail
    def validate_TrackingDocumentType(self, value):
        # Validate type TrackingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BILL_OF_LADING', 'FREIGHT_BILLING_DOCUMENT', 'SIGNATURE_PROOF_OF_DELIVERY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingDocumentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DocumentTypes or
            self.BillOfLadingDocumentDetail is not None or
            self.FreightBillingDocumentDetail is not None or
            self.SignatureProofOfDeliveryDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingDocumentSpecification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentTypes_ in self.DocumentTypes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentTypes>%s</ns:DocumentTypes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(DocumentTypes_), input_name='DocumentTypes')), eol_))
        if self.BillOfLadingDocumentDetail is not None:
            self.BillOfLadingDocumentDetail.export(outfile, level, namespace_, name_='BillOfLadingDocumentDetail', pretty_print=pretty_print)
        if self.FreightBillingDocumentDetail is not None:
            self.FreightBillingDocumentDetail.export(outfile, level, namespace_, name_='FreightBillingDocumentDetail', pretty_print=pretty_print)
        if self.SignatureProofOfDeliveryDetail is not None:
            self.SignatureProofOfDeliveryDetail.export(outfile, level, namespace_, name_='SignatureProofOfDeliveryDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentTypes':
            DocumentTypes_ = child_.text
            DocumentTypes_ = self.gds_validate_string(DocumentTypes_, node, 'DocumentTypes')
            self.DocumentTypes.append(DocumentTypes_)
            # validate type TrackingDocumentType
            self.validate_TrackingDocumentType(self.DocumentTypes[-1])
        elif nodeName_ == 'BillOfLadingDocumentDetail':
            obj_ = TrackingBillOfLadingDocumentDetail.factory()
            obj_.build(child_)
            self.BillOfLadingDocumentDetail = obj_
            obj_.original_tagname_ = 'BillOfLadingDocumentDetail'
        elif nodeName_ == 'FreightBillingDocumentDetail':
            obj_ = TrackingFreightBillingDocumentDetail.factory()
            obj_.build(child_)
            self.FreightBillingDocumentDetail = obj_
            obj_.original_tagname_ = 'FreightBillingDocumentDetail'
        elif nodeName_ == 'SignatureProofOfDeliveryDetail':
            obj_ = TrackingSignatureProofOfDeliveryDetail.factory()
            obj_.build(child_)
            self.SignatureProofOfDeliveryDetail = obj_
            obj_.original_tagname_ = 'SignatureProofOfDeliveryDetail'
# end class TrackingDocumentSpecification


class TrackingFreightBillingDocumentDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None):
        self.original_tagname_ = None
        self.DocumentFormat = DocumentFormat
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingFreightBillingDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingFreightBillingDocumentDetail.subclass:
            return TrackingFreightBillingDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingFreightBillingDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentFormat(self): return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat): self.DocumentFormat = DocumentFormat
    def hasContent_(self):
        if (
            self.DocumentFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingFreightBillingDocumentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingFreightBillingDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingFreightBillingDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingFreightBillingDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingFreightBillingDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingFreightBillingDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            self.DocumentFormat.export(outfile, level, namespace_, name_='DocumentFormat', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentFormat':
            obj_ = TrackingDocumentFormat.factory()
            obj_.build(child_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
# end class TrackingFreightBillingDocumentDetail


class TrackingSignatureProofOfDeliveryDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None):
        self.original_tagname_ = None
        self.DocumentFormat = DocumentFormat
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingSignatureProofOfDeliveryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingSignatureProofOfDeliveryDetail.subclass:
            return TrackingSignatureProofOfDeliveryDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingSignatureProofOfDeliveryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentFormat(self): return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat): self.DocumentFormat = DocumentFormat
    def hasContent_(self):
        if (
            self.DocumentFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingSignatureProofOfDeliveryDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingSignatureProofOfDeliveryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingSignatureProofOfDeliveryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingSignatureProofOfDeliveryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingSignatureProofOfDeliveryDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingSignatureProofOfDeliveryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            self.DocumentFormat.export(outfile, level, namespace_, name_='DocumentFormat', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentFormat':
            obj_ = TrackingDocumentFormat.factory()
            obj_.build(child_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
# end class TrackingSignatureProofOfDeliveryDetail


class TransactionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.original_tagname_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerTransactionId>%s</ns:CustomerTransactionId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TransactionDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None):
        self.original_tagname_ = None
        self.Units = Units
        self.validate_WeightUnits(self.Units)
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def validate_WeightUnits(self, value):
        # Validate type WeightUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['KG', 'LB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Weight', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type WeightUnits
            self.validate_WeightUnits(self.Units)
        elif nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None):
        self.original_tagname_ = None
        self.ParentCredential = ParentCredential
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ParentCredential(self): return self.ParentCredential
    def set_ParentCredential(self, ParentCredential): self.ParentCredential = ParentCredential
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            self.ParentCredential.export(outfile, level, namespace_, name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.original_tagname_ = None
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Key>%s</ns:Key>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), eol_))
        if self.Password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Password>%s</ns:Password>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.original_tagname_ = None
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceId>%s</ns:ServiceId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), eol_))
        if self.Major is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Major>%s</ns:Major>%s' % (self.gds_format_integer(self.Major, input_name='Major'), eol_))
        if self.Intermediate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Intermediate>%s</ns:Intermediate>%s' % (self.gds_format_integer(self.Intermediate, input_name='Intermediate'), eol_))
        if self.Minor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Minor>%s</ns:Minor>%s' % (self.gds_format_integer(self.Minor, input_name='Minor'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


GDSClassesMapping = {
    'GetTrackingDocumentsReply': GetTrackingDocumentsReply,
    'GetTrackingDocumentsRequest': GetTrackingDocumentsRequest,
    'SendNotificationsReply': SendNotificationsReply,
    'SendNotificationsRequest': SendNotificationsRequest,
    'TrackReply': TrackReply,
    'TrackRequest': TrackRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/track/v14"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/track/v14"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from track_service_v14 import *\n\n')
        sys.stdout.write('import track_service_v14 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AppointmentDetail",
    "AppointmentTimeDetail",
    "AvailableImagesDetail",
    "ClientDetail",
    "Commodity",
    "CompletedTrackDetail",
    "Contact",
    "ContactAndAddress",
    "ContentRecord",
    "CustomerExceptionRequestDetail",
    "CustomsOptionDetail",
    "DateRange",
    "DeliveryOptionEligibilityDetail",
    "Dimensions",
    "Distance",
    "DocumentPart",
    "EMailDetail",
    "EdtExciseCondition",
    "GetTrackingDocumentsReply",
    "GetTrackingDocumentsRequest",
    "LocalTimeRange",
    "Localization",
    "Measure",
    "Money",
    "NaftaCommodityDetail",
    "Notification",
    "NotificationDetail",
    "NotificationParameter",
    "PagingDetail",
    "PieceCountVerificationDetail",
    "SendNotificationsReply",
    "SendNotificationsRequest",
    "ShipmentEventNotificationDetail",
    "ShipmentEventNotificationSpecification",
    "ShipmentNotificationFormatSpecification",
    "SignatureImageDetail",
    "SpecialInstructionStatusDetail",
    "StringBarcode",
    "TrackAdvanceNotificationDetail",
    "TrackChargeDetail",
    "TrackDetail",
    "TrackEvent",
    "TrackInformationNoteDetail",
    "TrackNotificationPackage",
    "TrackNotificationRecipientDetail",
    "TrackOtherIdentifierDetail",
    "TrackPackageIdentifier",
    "TrackPayment",
    "TrackReconciliation",
    "TrackReply",
    "TrackRequest",
    "TrackReturnDetail",
    "TrackSelectionDetail",
    "TrackServiceDescriptionDetail",
    "TrackSpecialHandling",
    "TrackSpecialInstruction",
    "TrackSplitShipmentPart",
    "TrackStatusAncillaryDetail",
    "TrackStatusDetail",
    "TrackingBillOfLadingDocumentDetail",
    "TrackingDateOrTimestamp",
    "TrackingDocument",
    "TrackingDocumentDispositionDetail",
    "TrackingDocumentEmailDetail",
    "TrackingDocumentFormat",
    "TrackingDocumentSpecification",
    "TrackingFreightBillingDocumentDetail",
    "TrackingSignatureProofOfDeliveryDetail",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "Weight"
]
