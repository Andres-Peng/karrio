#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun 12 21:01:05 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', 'pyfedex/pickup_service_v15.py')
#
# Command line arguments:
#    /Fedex/FedExWebServicesAdvancedXSD/PickupService_v15.xsd
#
# Command line:
#    generateDS --no-namespace-defs -o "pyfedex/pickup_service_v15.py"  /Fedex/FedExWebServicesAdvancedXSD/PickupService_v15.xsd
#
# Current working directory (os.getcwd()):
#   py_fedex
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a
    container of "address parts" which should be handled as a unit
    (such as a city-state-ZIP combination within the US)."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None):
        self.original_tagname_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.CountryName = CountryName
        self.Residential = Residential
        self.GeographicCoordinates = GeographicCoordinates
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value): self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_CountryName(self): return self.CountryName
    def set_CountryName(self, CountryName): self.CountryName = CountryName
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def get_GeographicCoordinates(self): return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates): self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StreetLines>%s</ns:StreetLines>%s' % (self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:City>%s</ns:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StateOrProvinceCode>%s</ns:StateOrProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PostalCode>%s</ns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:UrbanizationCode>%s</ns:UrbanizationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryCode>%s</ns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.CountryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryName>%s</ns:CountryName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), eol_))
        if self.Residential is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Residential>%s</ns:Residential>%s' % (self.gds_format_boolean(self.Residential, input_name='Residential'), eol_))
        if self.GeographicCoordinates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GeographicCoordinates>%s</ns:GeographicCoordinates>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'CountryName':
            CountryName_ = child_.text
            CountryName_ = self.gds_validate_string(CountryName_, node, 'CountryName')
            self.CountryName = CountryName_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
        elif nodeName_ == 'GeographicCoordinates':
            GeographicCoordinates_ = child_.text
            GeographicCoordinates_ = self.gds_validate_string(GeographicCoordinates_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = GeographicCoordinates_
# end class Address


class AssociatedAccount(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, AccountNumber=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_AssociatedAccountNumberType(self.Type)
        self.AccountNumber = AccountNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedAccount)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedAccount.subclass:
            return AssociatedAccount.subclass(*args_, **kwargs_)
        else:
            return AssociatedAccount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def validate_AssociatedAccountNumberType(self, value):
        # Validate type AssociatedAccountNumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_OFFICE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AssociatedAccountNumberType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.AccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='AssociatedAccount', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedAccount')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssociatedAccount')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='AssociatedAccount', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AssociatedAccount'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AssociatedAccount', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AccountNumber>%s</ns:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type AssociatedAccountNumberType
            self.validate_AssociatedAccountNumberType(self.Type)
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
# end class AssociatedAccount


class CancelPickupReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Message=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CancelPickupReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CancelPickupReply.subclass:
            return CancelPickupReply.subclass(*args_, **kwargs_)
        else:
            return CancelPickupReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CancelPickupReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CancelPickupReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CancelPickupReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CancelPickupReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CancelPickupReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CancelPickupReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Message>%s</ns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class CancelPickupReply


class CancelPickupRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, CarrierCode=None, PickupConfirmationNumber=None, ScheduledDate=None, EndDate=None, Location=None, Remarks=None, ShippingChargesPayment=None, Reason=None, ContactName=None, PhoneNumber=None, PhoneExtension=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.PickupConfirmationNumber = PickupConfirmationNumber
        if isinstance(ScheduledDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ScheduledDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ScheduledDate
        self.ScheduledDate = initvalue_
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.Location = Location
        self.Remarks = Remarks
        self.ShippingChargesPayment = ShippingChargesPayment
        self.Reason = Reason
        self.ContactName = ContactName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CancelPickupRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CancelPickupRequest.subclass:
            return CancelPickupRequest.subclass(*args_, **kwargs_)
        else:
            return CancelPickupRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def get_PickupConfirmationNumber(self): return self.PickupConfirmationNumber
    def set_PickupConfirmationNumber(self, PickupConfirmationNumber): self.PickupConfirmationNumber = PickupConfirmationNumber
    def get_ScheduledDate(self): return self.ScheduledDate
    def set_ScheduledDate(self, ScheduledDate): self.ScheduledDate = ScheduledDate
    def get_EndDate(self): return self.EndDate
    def set_EndDate(self, EndDate): self.EndDate = EndDate
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_Remarks(self): return self.Remarks
    def set_Remarks(self, Remarks): self.Remarks = Remarks
    def get_ShippingChargesPayment(self): return self.ShippingChargesPayment
    def set_ShippingChargesPayment(self, ShippingChargesPayment): self.ShippingChargesPayment = ShippingChargesPayment
    def get_Reason(self): return self.Reason
    def set_Reason(self, Reason): self.Reason = Reason
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CarrierCode is not None or
            self.PickupConfirmationNumber is not None or
            self.ScheduledDate is not None or
            self.EndDate is not None or
            self.Location is not None or
            self.Remarks is not None or
            self.ShippingChargesPayment is not None or
            self.Reason is not None or
            self.ContactName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CancelPickupRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CancelPickupRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CancelPickupRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CancelPickupRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CancelPickupRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CancelPickupRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.CarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CarrierCode>%s</ns:CarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), eol_))
        if self.PickupConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupConfirmationNumber>%s</ns:PickupConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupConfirmationNumber), input_name='PickupConfirmationNumber')), eol_))
        if self.ScheduledDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ScheduledDate>%s</ns:ScheduledDate>%s' % (self.gds_format_date(self.ScheduledDate, input_name='ScheduledDate'), eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EndDate>%s</ns:EndDate>%s' % (self.gds_format_date(self.EndDate, input_name='EndDate'), eol_))
        if self.Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Location>%s</ns:Location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), eol_))
        if self.Remarks is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Remarks>%s</ns:Remarks>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Remarks), input_name='Remarks')), eol_))
        if self.ShippingChargesPayment is not None:
            self.ShippingChargesPayment.export(outfile, level, namespace_, name_='ShippingChargesPayment', pretty_print=pretty_print)
        if self.Reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Reason>%s</ns:Reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), eol_))
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ContactName>%s</ns:ContactName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneExtension>%s</ns:PhoneExtension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'PickupConfirmationNumber':
            PickupConfirmationNumber_ = child_.text
            PickupConfirmationNumber_ = self.gds_validate_string(PickupConfirmationNumber_, node, 'PickupConfirmationNumber')
            self.PickupConfirmationNumber = PickupConfirmationNumber_
        elif nodeName_ == 'ScheduledDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ScheduledDate = dval_
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'Remarks':
            Remarks_ = child_.text
            Remarks_ = self.gds_validate_string(Remarks_, node, 'Remarks')
            self.Remarks = Remarks_
        elif nodeName_ == 'ShippingChargesPayment':
            obj_ = Payment.factory()
            obj_.build(child_)
            self.ShippingChargesPayment = obj_
            obj_.original_tagname_ = 'ShippingChargesPayment'
        elif nodeName_ == 'Reason':
            Reason_ = child_.text
            Reason_ = self.gds_validate_string(Reason_, node, 'Reason')
            self.Reason = Reason_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
# end class CancelPickupRequest


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, MeterInstance=None, IntegratorId=None, Region=None, Localization=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.MeterInstance = MeterInstance
        self.IntegratorId = IntegratorId
        self.Region = Region
        self.validate_ExpressRegionCode(self.Region)
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_MeterInstance(self): return self.MeterInstance
    def set_MeterInstance(self, MeterInstance): self.MeterInstance = MeterInstance
    def get_IntegratorId(self): return self.IntegratorId
    def set_IntegratorId(self, IntegratorId): self.IntegratorId = IntegratorId
    def get_Region(self): return self.Region
    def set_Region(self, Region): self.Region = Region
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def validate_ExpressRegionCode(self, value):
        # Validate type ExpressRegionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['APAC', 'CA', 'EMEA', 'LAC', 'US']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ExpressRegionCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.MeterInstance is not None or
            self.IntegratorId is not None or
            self.Region is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AccountNumber>%s</ns:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.MeterNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MeterNumber>%s</ns:MeterNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), eol_))
        if self.MeterInstance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MeterInstance>%s</ns:MeterInstance>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MeterInstance), input_name='MeterInstance')), eol_))
        if self.IntegratorId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:IntegratorId>%s</ns:IntegratorId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), eol_))
        if self.Region is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Region>%s</ns:Region>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'MeterInstance':
            MeterInstance_ = child_.text
            MeterInstance_ = self.gds_validate_string(MeterInstance_, node, 'MeterInstance')
            self.MeterInstance = MeterInstance_
        elif nodeName_ == 'IntegratorId':
            IntegratorId_ = child_.text
            IntegratorId_ = self.gds_validate_string(IntegratorId_, node, 'IntegratorId')
            self.IntegratorId = IntegratorId_
        elif nodeName_ == 'Region':
            Region_ = child_.text
            Region_ = self.gds_validate_string(Region_, node, 'Region')
            self.Region = Region_
            # validate type ExpressRegionCode
            self.validate_ExpressRegionCode(self.Region)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class CodAddTransportationChargesDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RateTypeBasis=None, ChargeBasis=None, ChargeBasisLevel=None, RateLevelBasis=None):
        self.original_tagname_ = None
        self.RateTypeBasis = RateTypeBasis
        self.validate_RateTypeBasisType(self.RateTypeBasis)
        self.ChargeBasis = ChargeBasis
        self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        self.ChargeBasisLevel = ChargeBasisLevel
        self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        self.RateLevelBasis = RateLevelBasis
        self.validate_RateLevelBasisType(self.RateLevelBasis)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodAddTransportationChargesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodAddTransportationChargesDetail.subclass:
            return CodAddTransportationChargesDetail.subclass(*args_, **kwargs_)
        else:
            return CodAddTransportationChargesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RateTypeBasis(self): return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis): self.RateTypeBasis = RateTypeBasis
    def get_ChargeBasis(self): return self.ChargeBasis
    def set_ChargeBasis(self, ChargeBasis): self.ChargeBasis = ChargeBasis
    def get_ChargeBasisLevel(self): return self.ChargeBasisLevel
    def set_ChargeBasisLevel(self, ChargeBasisLevel): self.ChargeBasisLevel = ChargeBasisLevel
    def get_RateLevelBasis(self): return self.RateLevelBasis
    def set_RateLevelBasis(self, RateLevelBasis): self.RateLevelBasis = RateLevelBasis
    def validate_RateTypeBasisType(self, value):
        # Validate type RateTypeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCOUNT', 'ACTUAL', 'CURRENT', 'CUSTOM', 'LIST']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RateTypeBasisType' % {"value" : value.encode("utf-8")} )
    def validate_CodAddTransportationChargeBasisType(self, value):
        # Validate type CodAddTransportationChargeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['COD_SURCHARGE', 'NET_CHARGE', 'NET_FREIGHT', 'TOTAL_CUSTOMER_CHARGE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CodAddTransportationChargeBasisType' % {"value" : value.encode("utf-8")} )
    def validate_ChargeBasisLevelType(self, value):
        # Validate type ChargeBasisLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CURRENT_PACKAGE', 'SUM_OF_PACKAGES']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ChargeBasisLevelType' % {"value" : value.encode("utf-8")} )
    def validate_RateLevelBasisType(self, value):
        # Validate type RateLevelBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BUNDLED_RATE', 'INDIVIDUAL_PACKAGE_RATE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RateLevelBasisType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.RateTypeBasis is not None or
            self.ChargeBasis is not None or
            self.ChargeBasisLevel is not None or
            self.RateLevelBasis is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CodAddTransportationChargesDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodAddTransportationChargesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodAddTransportationChargesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CodAddTransportationChargesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CodAddTransportationChargesDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CodAddTransportationChargesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateTypeBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RateTypeBasis>%s</ns:RateTypeBasis>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeBasis), input_name='RateTypeBasis')), eol_))
        if self.ChargeBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ChargeBasis>%s</ns:ChargeBasis>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasis), input_name='ChargeBasis')), eol_))
        if self.ChargeBasisLevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ChargeBasisLevel>%s</ns:ChargeBasisLevel>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasisLevel), input_name='ChargeBasisLevel')), eol_))
        if self.RateLevelBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RateLevelBasis>%s</ns:RateLevelBasis>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RateLevelBasis), input_name='RateLevelBasis')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RateTypeBasis':
            RateTypeBasis_ = child_.text
            RateTypeBasis_ = self.gds_validate_string(RateTypeBasis_, node, 'RateTypeBasis')
            self.RateTypeBasis = RateTypeBasis_
            # validate type RateTypeBasisType
            self.validate_RateTypeBasisType(self.RateTypeBasis)
        elif nodeName_ == 'ChargeBasis':
            ChargeBasis_ = child_.text
            ChargeBasis_ = self.gds_validate_string(ChargeBasis_, node, 'ChargeBasis')
            self.ChargeBasis = ChargeBasis_
            # validate type CodAddTransportationChargeBasisType
            self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        elif nodeName_ == 'ChargeBasisLevel':
            ChargeBasisLevel_ = child_.text
            ChargeBasisLevel_ = self.gds_validate_string(ChargeBasisLevel_, node, 'ChargeBasisLevel')
            self.ChargeBasisLevel = ChargeBasisLevel_
            # validate type ChargeBasisLevelType
            self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        elif nodeName_ == 'RateLevelBasis':
            RateLevelBasis_ = child_.text
            RateLevelBasis_ = self.gds_validate_string(RateLevelBasis_, node, 'RateLevelBasis')
            self.RateLevelBasis = RateLevelBasis_
            # validate type RateLevelBasisType
            self.validate_RateLevelBasisType(self.RateLevelBasis)
# end class CodAddTransportationChargesDetail


class CodDetail(GeneratedsSuper):
    """Descriptive data required for a FedEx COD (Collect-On-Delivery)
    shipment."""
    subclass = None
    superclass = None
    def __init__(self, CodCollectionAmount=None, AddTransportationChargesDetail=None, CollectionType=None, CodRecipient=None, FinancialInstitutionContactAndAddress=None, RemitToName=None, ReferenceIndicator=None, ReturnTrackingId=None):
        self.original_tagname_ = None
        self.CodCollectionAmount = CodCollectionAmount
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
        self.CollectionType = CollectionType
        self.validate_CodCollectionType(self.CollectionType)
        self.CodRecipient = CodRecipient
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
        self.RemitToName = RemitToName
        self.ReferenceIndicator = ReferenceIndicator
        self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        self.ReturnTrackingId = ReturnTrackingId
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodDetail.subclass:
            return CodDetail.subclass(*args_, **kwargs_)
        else:
            return CodDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CodCollectionAmount(self): return self.CodCollectionAmount
    def set_CodCollectionAmount(self, CodCollectionAmount): self.CodCollectionAmount = CodCollectionAmount
    def get_AddTransportationChargesDetail(self): return self.AddTransportationChargesDetail
    def set_AddTransportationChargesDetail(self, AddTransportationChargesDetail): self.AddTransportationChargesDetail = AddTransportationChargesDetail
    def get_CollectionType(self): return self.CollectionType
    def set_CollectionType(self, CollectionType): self.CollectionType = CollectionType
    def get_CodRecipient(self): return self.CodRecipient
    def set_CodRecipient(self, CodRecipient): self.CodRecipient = CodRecipient
    def get_FinancialInstitutionContactAndAddress(self): return self.FinancialInstitutionContactAndAddress
    def set_FinancialInstitutionContactAndAddress(self, FinancialInstitutionContactAndAddress): self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
    def get_RemitToName(self): return self.RemitToName
    def set_RemitToName(self, RemitToName): self.RemitToName = RemitToName
    def get_ReferenceIndicator(self): return self.ReferenceIndicator
    def set_ReferenceIndicator(self, ReferenceIndicator): self.ReferenceIndicator = ReferenceIndicator
    def get_ReturnTrackingId(self): return self.ReturnTrackingId
    def set_ReturnTrackingId(self, ReturnTrackingId): self.ReturnTrackingId = ReturnTrackingId
    def validate_CodCollectionType(self, value):
        # Validate type CodCollectionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ANY', 'CASH', 'COMPANY_CHECK', 'GUARANTEED_FUNDS', 'PERSONAL_CHECK']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CodCollectionType' % {"value" : value.encode("utf-8")} )
    def validate_CodReturnReferenceIndicatorType(self, value):
        # Validate type CodReturnReferenceIndicatorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INVOICE', 'PO', 'REFERENCE', 'TRACKING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CodReturnReferenceIndicatorType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CodCollectionAmount is not None or
            self.AddTransportationChargesDetail is not None or
            self.CollectionType is not None or
            self.CodRecipient is not None or
            self.FinancialInstitutionContactAndAddress is not None or
            self.RemitToName is not None or
            self.ReferenceIndicator is not None or
            self.ReturnTrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CodDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CodDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CodDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CodDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodCollectionAmount is not None:
            self.CodCollectionAmount.export(outfile, level, namespace_, name_='CodCollectionAmount', pretty_print=pretty_print)
        if self.AddTransportationChargesDetail is not None:
            self.AddTransportationChargesDetail.export(outfile, level, namespace_, name_='AddTransportationChargesDetail', pretty_print=pretty_print)
        if self.CollectionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CollectionType>%s</ns:CollectionType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CollectionType), input_name='CollectionType')), eol_))
        if self.CodRecipient is not None:
            self.CodRecipient.export(outfile, level, namespace_, name_='CodRecipient', pretty_print=pretty_print)
        if self.FinancialInstitutionContactAndAddress is not None:
            self.FinancialInstitutionContactAndAddress.export(outfile, level, namespace_, name_='FinancialInstitutionContactAndAddress', pretty_print=pretty_print)
        if self.RemitToName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RemitToName>%s</ns:RemitToName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RemitToName), input_name='RemitToName')), eol_))
        if self.ReferenceIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ReferenceIndicator>%s</ns:ReferenceIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIndicator), input_name='ReferenceIndicator')), eol_))
        if self.ReturnTrackingId is not None:
            self.ReturnTrackingId.export(outfile, level, namespace_, name_='ReturnTrackingId', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CodCollectionAmount':
            obj_ = Money.factory()
            obj_.build(child_)
            self.CodCollectionAmount = obj_
            obj_.original_tagname_ = 'CodCollectionAmount'
        elif nodeName_ == 'AddTransportationChargesDetail':
            obj_ = CodAddTransportationChargesDetail.factory()
            obj_.build(child_)
            self.AddTransportationChargesDetail = obj_
            obj_.original_tagname_ = 'AddTransportationChargesDetail'
        elif nodeName_ == 'CollectionType':
            CollectionType_ = child_.text
            CollectionType_ = self.gds_validate_string(CollectionType_, node, 'CollectionType')
            self.CollectionType = CollectionType_
            # validate type CodCollectionType
            self.validate_CodCollectionType(self.CollectionType)
        elif nodeName_ == 'CodRecipient':
            obj_ = Party.factory()
            obj_.build(child_)
            self.CodRecipient = obj_
            obj_.original_tagname_ = 'CodRecipient'
        elif nodeName_ == 'FinancialInstitutionContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.FinancialInstitutionContactAndAddress = obj_
            obj_.original_tagname_ = 'FinancialInstitutionContactAndAddress'
        elif nodeName_ == 'RemitToName':
            RemitToName_ = child_.text
            RemitToName_ = self.gds_validate_string(RemitToName_, node, 'RemitToName')
            self.RemitToName = RemitToName_
        elif nodeName_ == 'ReferenceIndicator':
            ReferenceIndicator_ = child_.text
            ReferenceIndicator_ = self.gds_validate_string(ReferenceIndicator_, node, 'ReferenceIndicator')
            self.ReferenceIndicator = ReferenceIndicator_
            # validate type CodReturnReferenceIndicatorType
            self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        elif nodeName_ == 'ReturnTrackingId':
            obj_ = TrackingId.factory()
            obj_.build(child_)
            self.ReturnTrackingId = obj_
            obj_.original_tagname_ = 'ReturnTrackingId'
# end class CodDetail


class CompletedFreightPickupDetail(GeneratedsSuper):
    """Data resulting from the processing of an LTL Freight pickup request."""
    subclass = None
    superclass = None
    def __init__(self, Origin=None, LineItems=None, TotalPieces=None, TotalWeight=None, TotalHandlingUnits=None, Status=None):
        self.original_tagname_ = None
        self.Origin = Origin
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.TotalPieces = TotalPieces
        self.TotalWeight = TotalWeight
        self.TotalHandlingUnits = TotalHandlingUnits
        self.Status = Status
        self.validate_PickupEventType(self.Status)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedFreightPickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedFreightPickupDetail.subclass:
            return CompletedFreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedFreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Origin(self): return self.Origin
    def set_Origin(self, Origin): self.Origin = Origin
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def add_LineItems(self, value): self.LineItems.append(value)
    def insert_LineItems_at(self, index, value): self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value): self.LineItems[index] = value
    def get_TotalPieces(self): return self.TotalPieces
    def set_TotalPieces(self, TotalPieces): self.TotalPieces = TotalPieces
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_TotalHandlingUnits(self): return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits): self.TotalHandlingUnits = TotalHandlingUnits
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def validate_PickupEventType(self, value):
        # Validate type PickupEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ASSIGNED_TO_DRIVER', 'CANCELED', 'EXCEPTION', 'PICKED_UP', 'SCHEDULED']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupEventType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Origin is not None or
            self.LineItems or
            self.TotalPieces is not None or
            self.TotalWeight is not None or
            self.TotalHandlingUnits is not None or
            self.Status is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedFreightPickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompletedFreightPickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CompletedFreightPickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CompletedFreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Origin is not None:
            self.Origin.export(outfile, level, namespace_, name_='Origin', pretty_print=pretty_print)
        for LineItems_ in self.LineItems:
            LineItems_.export(outfile, level, namespace_, name_='LineItems', pretty_print=pretty_print)
        if self.TotalPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TotalPieces>%s</ns:TotalPieces>%s' % (self.gds_format_integer(self.TotalPieces, input_name='TotalPieces'), eol_))
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
        if self.TotalHandlingUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TotalHandlingUnits>%s</ns:TotalHandlingUnits>%s' % (self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Status>%s</ns:Status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Origin':
            obj_ = FreightServiceCenterDetail.factory()
            obj_.build(child_)
            self.Origin = obj_
            obj_.original_tagname_ = 'Origin'
        elif nodeName_ == 'LineItems':
            obj_ = CompletedFreightPickupLineItem.factory()
            obj_.build(child_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
        elif nodeName_ == 'TotalPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPieces')
            self.TotalPieces = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'TotalHandlingUnits':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
            # validate type PickupEventType
            self.validate_PickupEventType(self.Status)
# end class CompletedFreightPickupDetail


class CompletedFreightPickupLineItem(GeneratedsSuper):
    """Data resulting from the processing of an individual line item in a
    LTL Freight pickup request."""
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, Destination=None, TotalTravelTime=None, EtaDeliveryTimestamp=None):
        self.original_tagname_ = None
        self.SequenceNumber = SequenceNumber
        self.Destination = Destination
        self.TotalTravelTime = TotalTravelTime
        if isinstance(EtaDeliveryTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EtaDeliveryTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EtaDeliveryTimestamp
        self.EtaDeliveryTimestamp = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedFreightPickupLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedFreightPickupLineItem.subclass:
            return CompletedFreightPickupLineItem.subclass(*args_, **kwargs_)
        else:
            return CompletedFreightPickupLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SequenceNumber(self): return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber): self.SequenceNumber = SequenceNumber
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_TotalTravelTime(self): return self.TotalTravelTime
    def set_TotalTravelTime(self, TotalTravelTime): self.TotalTravelTime = TotalTravelTime
    def get_EtaDeliveryTimestamp(self): return self.EtaDeliveryTimestamp
    def set_EtaDeliveryTimestamp(self, EtaDeliveryTimestamp): self.EtaDeliveryTimestamp = EtaDeliveryTimestamp
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.Destination is not None or
            self.TotalTravelTime is not None or
            self.EtaDeliveryTimestamp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupLineItem', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedFreightPickupLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompletedFreightPickupLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CompletedFreightPickupLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CompletedFreightPickupLineItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SequenceNumber>%s</ns:SequenceNumber>%s' % (self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), eol_))
        if self.Destination is not None:
            self.Destination.export(outfile, level, namespace_, name_='Destination', pretty_print=pretty_print)
        if self.TotalTravelTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TotalTravelTime>%s</ns:TotalTravelTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalTravelTime), input_name='TotalTravelTime')), eol_))
        if self.EtaDeliveryTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EtaDeliveryTimestamp>%s</ns:EtaDeliveryTimestamp>%s' % (self.gds_format_datetime(self.EtaDeliveryTimestamp, input_name='EtaDeliveryTimestamp'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
        elif nodeName_ == 'Destination':
            obj_ = FreightServiceCenterDetail.factory()
            obj_.build(child_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'TotalTravelTime':
            TotalTravelTime_ = child_.text
            TotalTravelTime_ = self.gds_validate_string(TotalTravelTime_, node, 'TotalTravelTime')
            self.TotalTravelTime = TotalTravelTime_
        elif nodeName_ == 'EtaDeliveryTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EtaDeliveryTimestamp = dval_
# end class CompletedFreightPickupLineItem


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.ContactId = ContactId
        self.PersonName = PersonName
        self.Title = Title
        self.CompanyName = CompanyName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.PagerNumber = PagerNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactId(self): return self.ContactId
    def set_ContactId(self, ContactId): self.ContactId = ContactId
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self): return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber): self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self): return self.PagerNumber
    def set_PagerNumber(self, PagerNumber): self.PagerNumber = PagerNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Contact', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ContactId>%s</ns:ContactId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContactId), input_name='ContactId')), eol_))
        if self.PersonName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonName>%s</ns:PersonName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), eol_))
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Title>%s</ns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CompanyName>%s</ns:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneExtension>%s</ns:PhoneExtension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), eol_))
        if self.TollFreePhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TollFreePhoneNumber>%s</ns:TollFreePhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), eol_))
        if self.PagerNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PagerNumber>%s</ns:PagerNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), eol_))
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:FaxNumber>%s</ns:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EMailAddress>%s</ns:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactId':
            ContactId_ = child_.text
            ContactId_ = self.gds_validate_string(ContactId_, node, 'ContactId')
            self.ContactId = ContactId_
        elif nodeName_ == 'PersonName':
            PersonName_ = child_.text
            PersonName_ = self.gds_validate_string(PersonName_, node, 'PersonName')
            self.PersonName = PersonName_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
        elif nodeName_ == 'TollFreePhoneNumber':
            TollFreePhoneNumber_ = child_.text
            TollFreePhoneNumber_ = self.gds_validate_string(TollFreePhoneNumber_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = TollFreePhoneNumber_
        elif nodeName_ == 'PagerNumber':
            PagerNumber_ = child_.text
            PagerNumber_ = self.gds_validate_string(PagerNumber_, node, 'PagerNumber')
            self.PagerNumber = PagerNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None):
        self.original_tagname_ = None
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ContactAndAddress


class CreatePickupReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, PickupConfirmationNumber=None, Location=None, MessageCode=None, Message=None, PRPControlNumber=None, LastAccessTime=None, CompletedFreightPickupDetail=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.PickupConfirmationNumber = PickupConfirmationNumber
        self.Location = Location
        self.MessageCode = MessageCode
        self.Message = Message
        self.PRPControlNumber = PRPControlNumber
        if isinstance(LastAccessTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastAccessTime, '%H:%M:%S').time()
        else:
            initvalue_ = LastAccessTime
        self.LastAccessTime = initvalue_
        self.CompletedFreightPickupDetail = CompletedFreightPickupDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreatePickupReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreatePickupReply.subclass:
            return CreatePickupReply.subclass(*args_, **kwargs_)
        else:
            return CreatePickupReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_PickupConfirmationNumber(self): return self.PickupConfirmationNumber
    def set_PickupConfirmationNumber(self, PickupConfirmationNumber): self.PickupConfirmationNumber = PickupConfirmationNumber
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_MessageCode(self): return self.MessageCode
    def set_MessageCode(self, MessageCode): self.MessageCode = MessageCode
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_PRPControlNumber(self): return self.PRPControlNumber
    def set_PRPControlNumber(self, PRPControlNumber): self.PRPControlNumber = PRPControlNumber
    def get_LastAccessTime(self): return self.LastAccessTime
    def set_LastAccessTime(self, LastAccessTime): self.LastAccessTime = LastAccessTime
    def get_CompletedFreightPickupDetail(self): return self.CompletedFreightPickupDetail
    def set_CompletedFreightPickupDetail(self, CompletedFreightPickupDetail): self.CompletedFreightPickupDetail = CompletedFreightPickupDetail
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.PickupConfirmationNumber is not None or
            self.Location is not None or
            self.MessageCode is not None or
            self.Message is not None or
            self.PRPControlNumber is not None or
            self.LastAccessTime is not None or
            self.CompletedFreightPickupDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CreatePickupReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreatePickupReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreatePickupReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CreatePickupReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreatePickupReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreatePickupReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.PickupConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupConfirmationNumber>%s</ns:PickupConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupConfirmationNumber), input_name='PickupConfirmationNumber')), eol_))
        if self.Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Location>%s</ns:Location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), eol_))
        if self.MessageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MessageCode>%s</ns:MessageCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MessageCode), input_name='MessageCode')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Message>%s</ns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
        if self.PRPControlNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PRPControlNumber>%s</ns:PRPControlNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PRPControlNumber), input_name='PRPControlNumber')), eol_))
        if self.LastAccessTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LastAccessTime>%s</ns:LastAccessTime>%s' % (self.gds_format_time(self.LastAccessTime, input_name='LastAccessTime'), eol_))
        if self.CompletedFreightPickupDetail is not None:
            self.CompletedFreightPickupDetail.export(outfile, level, namespace_, name_='CompletedFreightPickupDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'PickupConfirmationNumber':
            PickupConfirmationNumber_ = child_.text
            PickupConfirmationNumber_ = self.gds_validate_string(PickupConfirmationNumber_, node, 'PickupConfirmationNumber')
            self.PickupConfirmationNumber = PickupConfirmationNumber_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'MessageCode':
            MessageCode_ = child_.text
            MessageCode_ = self.gds_validate_string(MessageCode_, node, 'MessageCode')
            self.MessageCode = MessageCode_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'PRPControlNumber':
            PRPControlNumber_ = child_.text
            PRPControlNumber_ = self.gds_validate_string(PRPControlNumber_, node, 'PRPControlNumber')
            self.PRPControlNumber = PRPControlNumber_
        elif nodeName_ == 'LastAccessTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.LastAccessTime = dval_
        elif nodeName_ == 'CompletedFreightPickupDetail':
            obj_ = CompletedFreightPickupDetail.factory()
            obj_.build(child_)
            self.CompletedFreightPickupDetail = obj_
            obj_.original_tagname_ = 'CompletedFreightPickupDetail'
# end class CreatePickupReply


class CreatePickupRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, AssociatedAccountNumber=None, TrackingNumber=None, OriginDetail=None, PickupServiceCategory=None, FreightPickupDetail=None, ExpressFreightDetail=None, PackageCount=None, TotalWeight=None, CarrierCode=None, OversizePackageCount=None, Remarks=None, CommodityDescription=None, CountryRelationship=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.AssociatedAccountNumber = AssociatedAccountNumber
        self.TrackingNumber = TrackingNumber
        self.OriginDetail = OriginDetail
        self.PickupServiceCategory = PickupServiceCategory
        self.validate_PickupServiceCategoryType(self.PickupServiceCategory)
        self.FreightPickupDetail = FreightPickupDetail
        self.ExpressFreightDetail = ExpressFreightDetail
        self.PackageCount = PackageCount
        self.TotalWeight = TotalWeight
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.OversizePackageCount = OversizePackageCount
        self.Remarks = Remarks
        self.CommodityDescription = CommodityDescription
        self.CountryRelationship = CountryRelationship
        self.validate_CountryRelationshipType(self.CountryRelationship)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreatePickupRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreatePickupRequest.subclass:
            return CreatePickupRequest.subclass(*args_, **kwargs_)
        else:
            return CreatePickupRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_AssociatedAccountNumber(self): return self.AssociatedAccountNumber
    def set_AssociatedAccountNumber(self, AssociatedAccountNumber): self.AssociatedAccountNumber = AssociatedAccountNumber
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_OriginDetail(self): return self.OriginDetail
    def set_OriginDetail(self, OriginDetail): self.OriginDetail = OriginDetail
    def get_PickupServiceCategory(self): return self.PickupServiceCategory
    def set_PickupServiceCategory(self, PickupServiceCategory): self.PickupServiceCategory = PickupServiceCategory
    def get_FreightPickupDetail(self): return self.FreightPickupDetail
    def set_FreightPickupDetail(self, FreightPickupDetail): self.FreightPickupDetail = FreightPickupDetail
    def get_ExpressFreightDetail(self): return self.ExpressFreightDetail
    def set_ExpressFreightDetail(self, ExpressFreightDetail): self.ExpressFreightDetail = ExpressFreightDetail
    def get_PackageCount(self): return self.PackageCount
    def set_PackageCount(self, PackageCount): self.PackageCount = PackageCount
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def get_OversizePackageCount(self): return self.OversizePackageCount
    def set_OversizePackageCount(self, OversizePackageCount): self.OversizePackageCount = OversizePackageCount
    def get_Remarks(self): return self.Remarks
    def set_Remarks(self, Remarks): self.Remarks = Remarks
    def get_CommodityDescription(self): return self.CommodityDescription
    def set_CommodityDescription(self, CommodityDescription): self.CommodityDescription = CommodityDescription
    def get_CountryRelationship(self): return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship): self.CountryRelationship = CountryRelationship
    def validate_PickupServiceCategoryType(self, value):
        # Validate type PickupServiceCategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_DISTANCE_DEFERRED', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'SAME_DAY', 'SAME_DAY_CITY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupServiceCategoryType' % {"value" : value.encode("utf-8")} )
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_CountryRelationshipType(self, value):
        # Validate type CountryRelationshipType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DOMESTIC', 'INTERNATIONAL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CountryRelationshipType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.AssociatedAccountNumber is not None or
            self.TrackingNumber is not None or
            self.OriginDetail is not None or
            self.PickupServiceCategory is not None or
            self.FreightPickupDetail is not None or
            self.ExpressFreightDetail is not None or
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.CarrierCode is not None or
            self.OversizePackageCount is not None or
            self.Remarks is not None or
            self.CommodityDescription is not None or
            self.CountryRelationship is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CreatePickupRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreatePickupRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreatePickupRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CreatePickupRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreatePickupRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreatePickupRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.AssociatedAccountNumber is not None:
            self.AssociatedAccountNumber.export(outfile, level, namespace_, name_='AssociatedAccountNumber', pretty_print=pretty_print)
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.OriginDetail is not None:
            self.OriginDetail.export(outfile, level, namespace_, name_='OriginDetail', pretty_print=pretty_print)
        if self.PickupServiceCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupServiceCategory>%s</ns:PickupServiceCategory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupServiceCategory), input_name='PickupServiceCategory')), eol_))
        if self.FreightPickupDetail is not None:
            self.FreightPickupDetail.export(outfile, level, namespace_, name_='FreightPickupDetail', pretty_print=pretty_print)
        if self.ExpressFreightDetail is not None:
            self.ExpressFreightDetail.export(outfile, level, namespace_, name_='ExpressFreightDetail', pretty_print=pretty_print)
        if self.PackageCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageCount>%s</ns:PackageCount>%s' % (self.gds_format_integer(self.PackageCount, input_name='PackageCount'), eol_))
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
        if self.CarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CarrierCode>%s</ns:CarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), eol_))
        if self.OversizePackageCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OversizePackageCount>%s</ns:OversizePackageCount>%s' % (self.gds_format_integer(self.OversizePackageCount, input_name='OversizePackageCount'), eol_))
        if self.Remarks is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Remarks>%s</ns:Remarks>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Remarks), input_name='Remarks')), eol_))
        if self.CommodityDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CommodityDescription>%s</ns:CommodityDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityDescription), input_name='CommodityDescription')), eol_))
        if self.CountryRelationship is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryRelationship>%s</ns:CountryRelationship>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryRelationship), input_name='CountryRelationship')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'AssociatedAccountNumber':
            obj_ = AssociatedAccount.factory()
            obj_.build(child_)
            self.AssociatedAccountNumber = obj_
            obj_.original_tagname_ = 'AssociatedAccountNumber'
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'OriginDetail':
            obj_ = PickupOriginDetail.factory()
            obj_.build(child_)
            self.OriginDetail = obj_
            obj_.original_tagname_ = 'OriginDetail'
        elif nodeName_ == 'PickupServiceCategory':
            PickupServiceCategory_ = child_.text
            PickupServiceCategory_ = self.gds_validate_string(PickupServiceCategory_, node, 'PickupServiceCategory')
            self.PickupServiceCategory = PickupServiceCategory_
            # validate type PickupServiceCategoryType
            self.validate_PickupServiceCategoryType(self.PickupServiceCategory)
        elif nodeName_ == 'FreightPickupDetail':
            obj_ = FreightPickupDetail.factory()
            obj_.build(child_)
            self.FreightPickupDetail = obj_
            obj_.original_tagname_ = 'FreightPickupDetail'
        elif nodeName_ == 'ExpressFreightDetail':
            obj_ = ExpressFreightPickupDetail.factory()
            obj_.build(child_)
            self.ExpressFreightDetail = obj_
            obj_.original_tagname_ = 'ExpressFreightDetail'
        elif nodeName_ == 'PackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'OversizePackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'OversizePackageCount')
            self.OversizePackageCount = ival_
        elif nodeName_ == 'Remarks':
            Remarks_ = child_.text
            Remarks_ = self.gds_validate_string(Remarks_, node, 'Remarks')
            self.Remarks = Remarks_
        elif nodeName_ == 'CommodityDescription':
            CommodityDescription_ = child_.text
            CommodityDescription_ = self.gds_validate_string(CommodityDescription_, node, 'CommodityDescription')
            self.CommodityDescription = CommodityDescription_
        elif nodeName_ == 'CountryRelationship':
            CountryRelationship_ = child_.text
            CountryRelationship_ = self.gds_validate_string(CountryRelationship_, node, 'CountryRelationship')
            self.CountryRelationship = CountryRelationship_
            # validate type CountryRelationshipType
            self.validate_CountryRelationshipType(self.CountryRelationship)
# end class CreatePickupRequest


class CustomDeliveryWindowDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, RequestTime=None, RequestRange=None, RequestDate=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_CustomDeliveryWindowType(self.Type)
        if isinstance(RequestTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestTime, '%H:%M:%S').time()
        else:
            initvalue_ = RequestTime
        self.RequestTime = initvalue_
        self.RequestRange = RequestRange
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDeliveryWindowDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDeliveryWindowDetail.subclass:
            return CustomDeliveryWindowDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDeliveryWindowDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_RequestTime(self): return self.RequestTime
    def set_RequestTime(self, RequestTime): self.RequestTime = RequestTime
    def get_RequestRange(self): return self.RequestRange
    def set_RequestRange(self, RequestRange): self.RequestRange = RequestRange
    def get_RequestDate(self): return self.RequestDate
    def set_RequestDate(self, RequestDate): self.RequestDate = RequestDate
    def validate_CustomDeliveryWindowType(self, value):
        # Validate type CustomDeliveryWindowType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AFTER', 'BEFORE', 'BETWEEN', 'ON']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CustomDeliveryWindowType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.RequestTime is not None or
            self.RequestRange is not None or
            self.RequestDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='CustomDeliveryWindowDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDeliveryWindowDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomDeliveryWindowDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CustomDeliveryWindowDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CustomDeliveryWindowDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.RequestTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RequestTime>%s</ns:RequestTime>%s' % (self.gds_format_time(self.RequestTime, input_name='RequestTime'), eol_))
        if self.RequestRange is not None:
            self.RequestRange.export(outfile, level, namespace_, name_='RequestRange', pretty_print=pretty_print)
        if self.RequestDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RequestDate>%s</ns:RequestDate>%s' % (self.gds_format_date(self.RequestDate, input_name='RequestDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type CustomDeliveryWindowType
            self.validate_CustomDeliveryWindowType(self.Type)
        elif nodeName_ == 'RequestTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.RequestTime = dval_
        elif nodeName_ == 'RequestRange':
            obj_ = DateRange.factory()
            obj_.build(child_)
            self.RequestRange = obj_
            obj_.original_tagname_ = 'RequestRange'
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestDate = dval_
# end class CustomDeliveryWindowDetail


class DateRange(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None):
        self.original_tagname_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%Y-%m-%d').date()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%Y-%m-%d').date()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Begins(self): return self.Begins
    def set_Begins(self, Begins): self.Begins = Begins
    def get_Ends(self): return self.Ends
    def set_Ends(self, Ends): self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DateRange', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DateRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DateRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Begins>%s</ns:Begins>%s' % (self.gds_format_date(self.Begins, input_name='Begins'), eol_))
        if self.Ends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Ends>%s</ns:Ends>%s' % (self.gds_format_date(self.Ends, input_name='Ends'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Begins = dval_
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Ends = dval_
# end class DateRange


class DeliveryOnInvoiceAcceptanceDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Recipient=None, TrackingId=None):
        self.original_tagname_ = None
        self.Recipient = Recipient
        self.TrackingId = TrackingId
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOnInvoiceAcceptanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOnInvoiceAcceptanceDetail.subclass:
            return DeliveryOnInvoiceAcceptanceDetail.subclass(*args_, **kwargs_)
        else:
            return DeliveryOnInvoiceAcceptanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Recipient(self): return self.Recipient
    def set_Recipient(self, Recipient): self.Recipient = Recipient
    def get_TrackingId(self): return self.TrackingId
    def set_TrackingId(self, TrackingId): self.TrackingId = TrackingId
    def hasContent_(self):
        if (
            self.Recipient is not None or
            self.TrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DeliveryOnInvoiceAcceptanceDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOnInvoiceAcceptanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryOnInvoiceAcceptanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DeliveryOnInvoiceAcceptanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DeliveryOnInvoiceAcceptanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Recipient is not None:
            self.Recipient.export(outfile, level, namespace_, name_='Recipient', pretty_print=pretty_print)
        if self.TrackingId is not None:
            self.TrackingId.export(outfile, level, namespace_, name_='TrackingId', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Recipient':
            obj_ = Party.factory()
            obj_.build(child_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory()
            obj_.build(child_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
# end class DeliveryOnInvoiceAcceptanceDetail


class DetentionDetail(GeneratedsSuper):
    """Specifications for pup/set or vehicle delayed for loading or
    unloading."""
    subclass = None
    superclass = None
    def __init__(self, Duration=None):
        self.original_tagname_ = None
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetentionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetentionDetail.subclass:
            return DetentionDetail.subclass(*args_, **kwargs_)
        else:
            return DetentionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='DetentionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetentionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DetentionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='DetentionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DetentionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DetentionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Duration>%s</ns:Duration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class DetentionDetail


class Dimensions(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None):
        self.original_tagname_ = None
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.Units = Units
        self.validate_LinearUnits(self.Units)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_LinearUnits(self, value):
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CM', 'IN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LinearUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Dimensions', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Dimensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Dimensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Length>%s</ns:Length>%s' % (self.gds_format_integer(self.Length, input_name='Length'), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Width>%s</ns:Width>%s' % (self.gds_format_integer(self.Width, input_name='Width'), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Height>%s</ns:Height>%s' % (self.gds_format_integer(self.Height, input_name='Height'), eol_))
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Length':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
        elif nodeName_ == 'Width':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
        elif nodeName_ == 'Height':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class Dimensions


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.original_tagname_ = None
        self.Value = Value
        self.Units = Units
        self.validate_DistanceUnits(self.Units)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Distance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['KM', 'MI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DistanceUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Distance', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Distance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Distance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Distance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Distance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type DistanceUnits
            self.validate_DistanceUnits(self.Units)
# end class Distance


class EMailDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Name=None):
        self.original_tagname_ = None
        self.EmailAddress = EmailAddress
        self.Name = Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailDetail.subclass:
            return EMailDetail.subclass(*args_, **kwargs_)
        else:
            return EMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EmailAddress(self): return self.EmailAddress
    def set_EmailAddress(self, EmailAddress): self.EmailAddress = EmailAddress
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EMailDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EmailAddress>%s</ns:EmailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Name>%s</ns:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EmailAddress':
            EmailAddress_ = child_.text
            EmailAddress_ = self.gds_validate_string(EmailAddress_, node, 'EmailAddress')
            self.EmailAddress = EmailAddress_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
# end class EMailDetail


class EMailLabelDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Message=None, Recipients=None):
        self.original_tagname_ = None
        self.Message = Message
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailLabelDetail.subclass:
            return EMailLabelDetail.subclass(*args_, **kwargs_)
        else:
            return EMailLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_Recipients(self): return self.Recipients
    def set_Recipients(self, Recipients): self.Recipients = Recipients
    def add_Recipients(self, value): self.Recipients.append(value)
    def insert_Recipients_at(self, index, value): self.Recipients.insert(index, value)
    def replace_Recipients_at(self, index, value): self.Recipients[index] = value
    def hasContent_(self):
        if (
            self.Message is not None or
            self.Recipients
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EMailLabelDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EMailLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Message>%s</ns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
        for Recipients_ in self.Recipients:
            Recipients_.export(outfile, level, namespace_, name_='Recipients', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'Recipients':
            obj_ = EMailRecipient.factory()
            obj_.build(child_)
            self.Recipients.append(obj_)
            obj_.original_tagname_ = 'Recipients'
# end class EMailLabelDetail


class EMailRecipient(GeneratedsSuper):
    """Information describing the address of of the email recipient, role
    of the email recipient and languages that are requested to be
    supported."""
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Role=None, OptionsRequested=None, Localization=None):
        self.original_tagname_ = None
        self.EmailAddress = EmailAddress
        self.Role = Role
        self.validate_AccessorRoleType(self.Role)
        self.OptionsRequested = OptionsRequested
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailRecipient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailRecipient.subclass:
            return EMailRecipient.subclass(*args_, **kwargs_)
        else:
            return EMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EmailAddress(self): return self.EmailAddress
    def set_EmailAddress(self, EmailAddress): self.EmailAddress = EmailAddress
    def get_Role(self): return self.Role
    def set_Role(self, Role): self.Role = Role
    def get_OptionsRequested(self): return self.OptionsRequested
    def set_OptionsRequested(self, OptionsRequested): self.OptionsRequested = OptionsRequested
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def validate_AccessorRoleType(self, value):
        # Validate type AccessorRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['SHIPMENT_COMPLETOR', 'SHIPMENT_INITIATOR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AccessorRoleType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Role is not None or
            self.OptionsRequested is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EMailRecipient', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailRecipient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailRecipient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EMailRecipient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailRecipient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EmailAddress>%s</ns:EmailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), eol_))
        if self.Role is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Role>%s</ns:Role>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), eol_))
        if self.OptionsRequested is not None:
            self.OptionsRequested.export(outfile, level, namespace_, name_='OptionsRequested', pretty_print=pretty_print)
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EmailAddress':
            EmailAddress_ = child_.text
            EmailAddress_ = self.gds_validate_string(EmailAddress_, node, 'EmailAddress')
            self.EmailAddress = EmailAddress_
        elif nodeName_ == 'Role':
            Role_ = child_.text
            Role_ = self.gds_validate_string(Role_, node, 'Role')
            self.Role = Role_
            # validate type AccessorRoleType
            self.validate_AccessorRoleType(self.Role)
        elif nodeName_ == 'OptionsRequested':
            obj_ = EmailOptionsRequested.factory()
            obj_.build(child_)
            self.OptionsRequested = obj_
            obj_.original_tagname_ = 'OptionsRequested'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class EMailRecipient


class EmailOptionsRequested(GeneratedsSuper):
    """Specifies how to apply the localization detail to the current
    context."""
    subclass = None
    superclass = None
    def __init__(self, Options=None):
        self.original_tagname_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailOptionsRequested.subclass:
            return EmailOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return EmailOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options_at(self, index, value): self.Options.insert(index, value)
    def replace_Options_at(self, index, value): self.Options[index] = value
    def validate_EmailOptionType(self, value):
        # Validate type EmailOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PRODUCE_PAPERLESS_SHIPPING_FORMAT', 'SUPPRESS_ACCESS_EMAILS', 'SUPPRESS_ADDITIONAL_LANGUAGES']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EmailOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EmailOptionsRequested', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EmailOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EmailOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EmailOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EmailOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Options>%s</ns:Options>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Options':
            Options_ = child_.text
            Options_ = self.gds_validate_string(Options_, node, 'Options')
            self.Options.append(Options_)
            # validate type EmailOptionType
            self.validate_EmailOptionType(self.Options[-1])
# end class EmailOptionsRequested


class EtdDetail(GeneratedsSuper):
    """Electronic Trade document references used with the ETD special
    service."""
    subclass = None
    superclass = None
    def __init__(self, Confirmation=None, Attributes=None, RequestedDocumentCopies=None, Documents=None, DocumentReferences=None):
        self.original_tagname_ = None
        self.Confirmation = Confirmation
        self.validate_EtdConfirmationType(self.Confirmation)
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        if RequestedDocumentCopies is None:
            self.RequestedDocumentCopies = []
        else:
            self.RequestedDocumentCopies = RequestedDocumentCopies
        if Documents is None:
            self.Documents = []
        else:
            self.Documents = Documents
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EtdDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EtdDetail.subclass:
            return EtdDetail.subclass(*args_, **kwargs_)
        else:
            return EtdDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Confirmation(self): return self.Confirmation
    def set_Confirmation(self, Confirmation): self.Confirmation = Confirmation
    def get_Attributes(self): return self.Attributes
    def set_Attributes(self, Attributes): self.Attributes = Attributes
    def add_Attributes(self, value): self.Attributes.append(value)
    def insert_Attributes_at(self, index, value): self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value): self.Attributes[index] = value
    def get_RequestedDocumentCopies(self): return self.RequestedDocumentCopies
    def set_RequestedDocumentCopies(self, RequestedDocumentCopies): self.RequestedDocumentCopies = RequestedDocumentCopies
    def add_RequestedDocumentCopies(self, value): self.RequestedDocumentCopies.append(value)
    def insert_RequestedDocumentCopies_at(self, index, value): self.RequestedDocumentCopies.insert(index, value)
    def replace_RequestedDocumentCopies_at(self, index, value): self.RequestedDocumentCopies[index] = value
    def get_Documents(self): return self.Documents
    def set_Documents(self, Documents): self.Documents = Documents
    def add_Documents(self, value): self.Documents.append(value)
    def insert_Documents_at(self, index, value): self.Documents.insert(index, value)
    def replace_Documents_at(self, index, value): self.Documents[index] = value
    def get_DocumentReferences(self): return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences): self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value): self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value): self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value): self.DocumentReferences[index] = value
    def validate_EtdConfirmationType(self, value):
        # Validate type EtdConfirmationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CONFIRMED', 'DEFERRED']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EtdConfirmationType' % {"value" : value.encode("utf-8")} )
    def validate_EtdAttributeType(self, value):
        # Validate type EtdAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['POST_SHIPMENT_UPLOAD_REQUESTED']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EtdAttributeType' % {"value" : value.encode("utf-8")} )
    def validate_RequestedShippingDocumentType(self, value):
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'CUSTOMER_SPECIFIED_LABELS', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'EXPORT_DECLARATION', 'FREIGHT_ADDRESS_LABEL', 'GENERAL_AGENCY_AGREEMENT', 'LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'PENDING_SHIPMENT_EMAIL_NOTIFICATION', 'PRO_FORMA_INVOICE', 'RETURN_INSTRUCTIONS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RequestedShippingDocumentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Confirmation is not None or
            self.Attributes or
            self.RequestedDocumentCopies or
            self.Documents or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='EtdDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EtdDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EtdDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='EtdDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EtdDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EtdDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Confirmation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Confirmation>%s</ns:Confirmation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Confirmation), input_name='Confirmation')), eol_))
        for Attributes_ in self.Attributes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Attributes>%s</ns:Attributes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), eol_))
        for RequestedDocumentCopies_ in self.RequestedDocumentCopies:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RequestedDocumentCopies>%s</ns:RequestedDocumentCopies>%s' % (self.gds_encode(self.gds_format_string(quote_xml(RequestedDocumentCopies_), input_name='RequestedDocumentCopies')), eol_))
        for Documents_ in self.Documents:
            Documents_.export(outfile, level, namespace_, name_='Documents', pretty_print=pretty_print)
        for DocumentReferences_ in self.DocumentReferences:
            DocumentReferences_.export(outfile, level, namespace_, name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Confirmation':
            Confirmation_ = child_.text
            Confirmation_ = self.gds_validate_string(Confirmation_, node, 'Confirmation')
            self.Confirmation = Confirmation_
            # validate type EtdConfirmationType
            self.validate_EtdConfirmationType(self.Confirmation)
        elif nodeName_ == 'Attributes':
            Attributes_ = child_.text
            Attributes_ = self.gds_validate_string(Attributes_, node, 'Attributes')
            self.Attributes.append(Attributes_)
            # validate type EtdAttributeType
            self.validate_EtdAttributeType(self.Attributes[-1])
        elif nodeName_ == 'RequestedDocumentCopies':
            RequestedDocumentCopies_ = child_.text
            RequestedDocumentCopies_ = self.gds_validate_string(RequestedDocumentCopies_, node, 'RequestedDocumentCopies')
            self.RequestedDocumentCopies.append(RequestedDocumentCopies_)
            # validate type RequestedShippingDocumentType
            self.validate_RequestedShippingDocumentType(self.RequestedDocumentCopies[-1])
        elif nodeName_ == 'Documents':
            obj_ = UploadDocumentDetail.factory()
            obj_.build(child_)
            self.Documents.append(obj_)
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory()
            obj_.build(child_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class EtdDetail


class ExpressFreightPickupDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Service=None, BookingNumber=None, Dimensions=None, TruckType=None, TrailerSize=None):
        self.original_tagname_ = None
        self.Service = Service
        self.validate_ServiceType(self.Service)
        self.BookingNumber = BookingNumber
        self.Dimensions = Dimensions
        self.TruckType = TruckType
        self.validate_TruckType(self.TruckType)
        self.TrailerSize = TrailerSize
        self.validate_TrailerSizeType(self.TrailerSize)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressFreightPickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressFreightPickupDetail.subclass:
            return ExpressFreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return ExpressFreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_BookingNumber(self): return self.BookingNumber
    def set_BookingNumber(self, BookingNumber): self.BookingNumber = BookingNumber
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_TruckType(self): return self.TruckType
    def set_TruckType(self, TruckType): self.TruckType = TruckType
    def get_TrailerSize(self): return self.TrailerSize
    def set_TrailerSize(self, TrailerSize): self.TrailerSize = TrailerSize
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_CARGO_AIRPORT_TO_AIRPORT', 'FEDEX_CARGO_FREIGHT_FORWARDING', 'FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT', 'FEDEX_CARGO_INTERNATIONAL_PREMIUM', 'FEDEX_CARGO_MAIL', 'FEDEX_CARGO_REGISTERED_MAIL', 'FEDEX_CARGO_SURFACE_MAIL', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK', 'FEDEX_CUSTOM_CRITICAL_CHARTER_AIR', 'FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR', 'FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_INTERNATIONAL_PRIORITY_PLUS', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SAME_DAY_METRO_AFTERNOON', 'SAME_DAY_METRO_MORNING', 'SAME_DAY_METRO_RUSH', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def validate_TruckType(self, value):
        # Validate type TruckType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DROP_TRAILER_AGREEMENT', 'LIFTGATE', 'TRACTOR_TRAILER_ACCESS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TruckType' % {"value" : value.encode("utf-8")} )
    def validate_TrailerSizeType(self, value):
        # Validate type TrailerSizeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['TRAILER_28_FT', 'TRAILER_48_FT', 'TRAILER_53_FT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrailerSizeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Service is not None or
            self.BookingNumber is not None or
            self.Dimensions is not None or
            self.TruckType is not None or
            self.TrailerSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ExpressFreightPickupDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressFreightPickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpressFreightPickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ExpressFreightPickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ExpressFreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ExpressFreightPickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Service is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Service>%s</ns:Service>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), eol_))
        if self.BookingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:BookingNumber>%s</ns:BookingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BookingNumber), input_name='BookingNumber')), eol_))
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.TruckType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TruckType>%s</ns:TruckType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TruckType), input_name='TruckType')), eol_))
        if self.TrailerSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrailerSize>%s</ns:TrailerSize>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrailerSize), input_name='TrailerSize')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
            # validate type ServiceType
            self.validate_ServiceType(self.Service)
        elif nodeName_ == 'BookingNumber':
            BookingNumber_ = child_.text
            BookingNumber_ = self.gds_validate_string(BookingNumber_, node, 'BookingNumber')
            self.BookingNumber = BookingNumber_
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'TruckType':
            TruckType_ = child_.text
            TruckType_ = self.gds_validate_string(TruckType_, node, 'TruckType')
            self.TruckType = TruckType_
            # validate type TruckType
            self.validate_TruckType(self.TruckType)
        elif nodeName_ == 'TrailerSize':
            TrailerSize_ = child_.text
            TrailerSize_ = self.gds_validate_string(TrailerSize_, node, 'TrailerSize')
            self.TrailerSize = TrailerSize_
            # validate type TrailerSizeType
            self.validate_TrailerSizeType(self.TrailerSize)
# end class ExpressFreightPickupDetail


class ExtraLaborDetail(GeneratedsSuper):
    """Specification for labor time spent handling shipment."""
    subclass = None
    superclass = None
    def __init__(self, Duration=None):
        self.original_tagname_ = None
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraLaborDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraLaborDetail.subclass:
            return ExtraLaborDetail.subclass(*args_, **kwargs_)
        else:
            return ExtraLaborDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ExtraLaborDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraLaborDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExtraLaborDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ExtraLaborDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ExtraLaborDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ExtraLaborDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Duration>%s</ns:Duration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class ExtraLaborDetail


class FaxDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FaxDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FaxDetail.subclass:
            return FaxDetail.subclass(*args_, **kwargs_)
        else:
            return FaxDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='FaxDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FaxDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FaxDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='FaxDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FaxDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FaxDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class FaxDetail


class FlatbedTrailerDetail(GeneratedsSuper):
    """Specifies the optional features/characteristics requested for a
    Freight shipment utilizing a flatbed trailer."""
    subclass = None
    superclass = None
    def __init__(self, Options=None):
        self.original_tagname_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FlatbedTrailerDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FlatbedTrailerDetail.subclass:
            return FlatbedTrailerDetail.subclass(*args_, **kwargs_)
        else:
            return FlatbedTrailerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options_at(self, index, value): self.Options.insert(index, value)
    def replace_Options_at(self, index, value): self.Options[index] = value
    def validate_FlatbedTrailerOption(self, value):
        # Validate type FlatbedTrailerOption, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['OVER_DIMENSION', 'TARP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FlatbedTrailerOption' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='FlatbedTrailerDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FlatbedTrailerDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FlatbedTrailerDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='FlatbedTrailerDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FlatbedTrailerDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FlatbedTrailerDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Options>%s</ns:Options>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Options':
            Options_ = child_.text
            Options_ = self.gds_validate_string(Options_, node, 'Options')
            self.Options.append(Options_)
            # validate type FlatbedTrailerOption
            self.validate_FlatbedTrailerOption(self.Options[-1])
# end class FlatbedTrailerDetail


class FreightGuaranteeDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Date=None, Time=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_FreightGuaranteeType(self.Type)
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        if isinstance(Time, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Time, '%H:%M:%S').time()
        else:
            initvalue_ = Time
        self.Time = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightGuaranteeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightGuaranteeDetail.subclass:
            return FreightGuaranteeDetail.subclass(*args_, **kwargs_)
        else:
            return FreightGuaranteeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def validate_FreightGuaranteeType(self, value):
        # Validate type FreightGuaranteeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['GUARANTEED_DATE', 'GUARANTEED_MORNING', 'GUARANTEED_TIME']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FreightGuaranteeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Date is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='FreightGuaranteeDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightGuaranteeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightGuaranteeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='FreightGuaranteeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightGuaranteeDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightGuaranteeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Date>%s</ns:Date>%s' % (self.gds_format_date(self.Date, input_name='Date'), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Time>%s</ns:Time>%s' % (self.gds_format_time(self.Time, input_name='Time'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type FreightGuaranteeType
            self.validate_FreightGuaranteeType(self.Type)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Time':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Time = dval_
# end class FreightGuaranteeDetail


class FreightPickupDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ApprovedBy=None, Payment=None, Role=None, AlternateBilling=None, SubmittedBy=None, LineItems=None):
        self.original_tagname_ = None
        self.ApprovedBy = ApprovedBy
        self.Payment = Payment
        self.validate_PaymentType(self.Payment)
        self.Role = Role
        self.validate_FreightShipmentRoleType(self.Role)
        self.AlternateBilling = AlternateBilling
        self.SubmittedBy = SubmittedBy
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPickupDetail.subclass:
            return FreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return FreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ApprovedBy(self): return self.ApprovedBy
    def set_ApprovedBy(self, ApprovedBy): self.ApprovedBy = ApprovedBy
    def get_Payment(self): return self.Payment
    def set_Payment(self, Payment): self.Payment = Payment
    def get_Role(self): return self.Role
    def set_Role(self, Role): self.Role = Role
    def get_AlternateBilling(self): return self.AlternateBilling
    def set_AlternateBilling(self, AlternateBilling): self.AlternateBilling = AlternateBilling
    def get_SubmittedBy(self): return self.SubmittedBy
    def set_SubmittedBy(self, SubmittedBy): self.SubmittedBy = SubmittedBy
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def add_LineItems(self, value): self.LineItems.append(value)
    def insert_LineItems_at(self, index, value): self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value): self.LineItems[index] = value
    def validate_PaymentType(self, value):
        # Validate type PaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCOUNT', 'CASH', 'COLLECT', 'CREDIT_CARD', 'RECIPIENT', 'SENDER', 'THIRD_PARTY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PaymentType' % {"value" : value.encode("utf-8")} )
    def validate_FreightShipmentRoleType(self, value):
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CONSIGNEE', 'SHIPPER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FreightShipmentRoleType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ApprovedBy is not None or
            self.Payment is not None or
            self.Role is not None or
            self.AlternateBilling is not None or
            self.SubmittedBy is not None or
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='FreightPickupDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightPickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='FreightPickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightPickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ApprovedBy is not None:
            self.ApprovedBy.export(outfile, level, namespace_, name_='ApprovedBy', pretty_print=pretty_print)
        if self.Payment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Payment>%s</ns:Payment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Payment), input_name='Payment')), eol_))
        if self.Role is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Role>%s</ns:Role>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), eol_))
        if self.AlternateBilling is not None:
            self.AlternateBilling.export(outfile, level, namespace_, name_='AlternateBilling', pretty_print=pretty_print)
        if self.SubmittedBy is not None:
            self.SubmittedBy.export(outfile, level, namespace_, name_='SubmittedBy', pretty_print=pretty_print)
        for LineItems_ in self.LineItems:
            LineItems_.export(outfile, level, namespace_, name_='LineItems', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ApprovedBy':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.ApprovedBy = obj_
            obj_.original_tagname_ = 'ApprovedBy'
        elif nodeName_ == 'Payment':
            Payment_ = child_.text
            Payment_ = self.gds_validate_string(Payment_, node, 'Payment')
            self.Payment = Payment_
            # validate type PaymentType
            self.validate_PaymentType(self.Payment)
        elif nodeName_ == 'Role':
            Role_ = child_.text
            Role_ = self.gds_validate_string(Role_, node, 'Role')
            self.Role = Role_
            # validate type FreightShipmentRoleType
            self.validate_FreightShipmentRoleType(self.Role)
        elif nodeName_ == 'AlternateBilling':
            obj_ = Party.factory()
            obj_.build(child_)
            self.AlternateBilling = obj_
            obj_.original_tagname_ = 'AlternateBilling'
        elif nodeName_ == 'SubmittedBy':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.SubmittedBy = obj_
            obj_.original_tagname_ = 'SubmittedBy'
        elif nodeName_ == 'LineItems':
            obj_ = FreightPickupLineItem.factory()
            obj_.build(child_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class FreightPickupDetail


class FreightPickupLineItem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, Service=None, SequenceNumber=None, Destination=None, Packaging=None, Pieces=None, Weight=None, TotalHandlingUnits=None, PurchaseOrderNumber=None, JustOneMore=None, SpecialServicesRequested=None, Description=None):
        self.original_tagname_ = None
        self.TrackingNumber = TrackingNumber
        self.Service = Service
        self.validate_ServiceType(self.Service)
        self.SequenceNumber = SequenceNumber
        self.Destination = Destination
        self.Packaging = Packaging
        self.validate_PhysicalPackagingType(self.Packaging)
        self.Pieces = Pieces
        self.Weight = Weight
        self.TotalHandlingUnits = TotalHandlingUnits
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.JustOneMore = JustOneMore
        self.SpecialServicesRequested = SpecialServicesRequested
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPickupLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPickupLineItem.subclass:
            return FreightPickupLineItem.subclass(*args_, **kwargs_)
        else:
            return FreightPickupLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_SequenceNumber(self): return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber): self.SequenceNumber = SequenceNumber
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def get_Pieces(self): return self.Pieces
    def set_Pieces(self, Pieces): self.Pieces = Pieces
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_TotalHandlingUnits(self): return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits): self.TotalHandlingUnits = TotalHandlingUnits
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_JustOneMore(self): return self.JustOneMore
    def set_JustOneMore(self, JustOneMore): self.JustOneMore = JustOneMore
    def get_SpecialServicesRequested(self): return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested): self.SpecialServicesRequested = SpecialServicesRequested
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_CARGO_AIRPORT_TO_AIRPORT', 'FEDEX_CARGO_FREIGHT_FORWARDING', 'FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT', 'FEDEX_CARGO_INTERNATIONAL_PREMIUM', 'FEDEX_CARGO_MAIL', 'FEDEX_CARGO_REGISTERED_MAIL', 'FEDEX_CARGO_SURFACE_MAIL', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK', 'FEDEX_CUSTOM_CRITICAL_CHARTER_AIR', 'FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR', 'FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_INTERNATIONAL_PRIORITY_PLUS', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SAME_DAY_METRO_AFTERNOON', 'SAME_DAY_METRO_MORNING', 'SAME_DAY_METRO_RUSH', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def validate_PhysicalPackagingType(self, value):
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CAGE', 'CARTON', 'CASE', 'CHEST', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PACKAGE', 'PAIL', 'PALLET', 'PARCEL', 'PIECE', 'REEL', 'ROLL', 'SACK', 'SHRINK_WRAPPED', 'SKID', 'TANK', 'TOTE_BIN', 'TUBE', 'UNIT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.Service is not None or
            self.SequenceNumber is not None or
            self.Destination is not None or
            self.Packaging is not None or
            self.Pieces is not None or
            self.Weight is not None or
            self.TotalHandlingUnits is not None or
            self.PurchaseOrderNumber is not None or
            self.JustOneMore is not None or
            self.SpecialServicesRequested is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='FreightPickupLineItem', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPickupLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightPickupLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='FreightPickupLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightPickupLineItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightPickupLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.Service is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Service>%s</ns:Service>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), eol_))
        if self.SequenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SequenceNumber>%s</ns:SequenceNumber>%s' % (self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), eol_))
        if self.Destination is not None:
            self.Destination.export(outfile, level, namespace_, name_='Destination', pretty_print=pretty_print)
        if self.Packaging is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Packaging>%s</ns:Packaging>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Packaging), input_name='Packaging')), eol_))
        if self.Pieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Pieces>%s</ns:Pieces>%s' % (self.gds_format_integer(self.Pieces, input_name='Pieces'), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.TotalHandlingUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TotalHandlingUnits>%s</ns:TotalHandlingUnits>%s' % (self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), eol_))
        if self.PurchaseOrderNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PurchaseOrderNumber>%s</ns:PurchaseOrderNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), eol_))
        if self.JustOneMore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:JustOneMore>%s</ns:JustOneMore>%s' % (self.gds_format_boolean(self.JustOneMore, input_name='JustOneMore'), eol_))
        if self.SpecialServicesRequested is not None:
            self.SpecialServicesRequested.export(outfile, level, namespace_, name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
            # validate type ServiceType
            self.validate_ServiceType(self.Service)
        elif nodeName_ == 'SequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'Packaging':
            Packaging_ = child_.text
            Packaging_ = self.gds_validate_string(Packaging_, node, 'Packaging')
            self.Packaging = Packaging_
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.Packaging)
        elif nodeName_ == 'Pieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Pieces')
            self.Pieces = ival_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'TotalHandlingUnits':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
        elif nodeName_ == 'PurchaseOrderNumber':
            PurchaseOrderNumber_ = child_.text
            PurchaseOrderNumber_ = self.gds_validate_string(PurchaseOrderNumber_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = PurchaseOrderNumber_
        elif nodeName_ == 'JustOneMore':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'JustOneMore')
            self.JustOneMore = ival_
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = ShipmentSpecialServicesRequested.factory()
            obj_.build(child_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class FreightPickupLineItem


class FreightServiceCenterDetail(GeneratedsSuper):
    """This class describes the relationship between a customer-specified
    address and the FedEx Freight / FedEx National Freight Service
    Center that supports that address."""
    subclass = None
    superclass = None
    def __init__(self, InterlineCarrierCode=None, InterlineCarrierName=None, AdditionalDays=None, LocalService=None, LocalDistance=None, LocalDuration=None, LocalServiceScheduling=None, LimitedServiceDays=None, GatewayLocationId=None, Location=None, ContactAndAddress=None):
        self.original_tagname_ = None
        self.InterlineCarrierCode = InterlineCarrierCode
        self.InterlineCarrierName = InterlineCarrierName
        self.AdditionalDays = AdditionalDays
        self.LocalService = LocalService
        self.validate_ServiceType(self.LocalService)
        self.LocalDistance = LocalDistance
        self.LocalDuration = LocalDuration
        self.LocalServiceScheduling = LocalServiceScheduling
        self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)
        if LimitedServiceDays is None:
            self.LimitedServiceDays = []
        else:
            self.LimitedServiceDays = LimitedServiceDays
        self.GatewayLocationId = GatewayLocationId
        self.Location = Location
        self.ContactAndAddress = ContactAndAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightServiceCenterDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightServiceCenterDetail.subclass:
            return FreightServiceCenterDetail.subclass(*args_, **kwargs_)
        else:
            return FreightServiceCenterDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InterlineCarrierCode(self): return self.InterlineCarrierCode
    def set_InterlineCarrierCode(self, InterlineCarrierCode): self.InterlineCarrierCode = InterlineCarrierCode
    def get_InterlineCarrierName(self): return self.InterlineCarrierName
    def set_InterlineCarrierName(self, InterlineCarrierName): self.InterlineCarrierName = InterlineCarrierName
    def get_AdditionalDays(self): return self.AdditionalDays
    def set_AdditionalDays(self, AdditionalDays): self.AdditionalDays = AdditionalDays
    def get_LocalService(self): return self.LocalService
    def set_LocalService(self, LocalService): self.LocalService = LocalService
    def get_LocalDistance(self): return self.LocalDistance
    def set_LocalDistance(self, LocalDistance): self.LocalDistance = LocalDistance
    def get_LocalDuration(self): return self.LocalDuration
    def set_LocalDuration(self, LocalDuration): self.LocalDuration = LocalDuration
    def get_LocalServiceScheduling(self): return self.LocalServiceScheduling
    def set_LocalServiceScheduling(self, LocalServiceScheduling): self.LocalServiceScheduling = LocalServiceScheduling
    def get_LimitedServiceDays(self): return self.LimitedServiceDays
    def set_LimitedServiceDays(self, LimitedServiceDays): self.LimitedServiceDays = LimitedServiceDays
    def add_LimitedServiceDays(self, value): self.LimitedServiceDays.append(value)
    def insert_LimitedServiceDays_at(self, index, value): self.LimitedServiceDays.insert(index, value)
    def replace_LimitedServiceDays_at(self, index, value): self.LimitedServiceDays[index] = value
    def get_GatewayLocationId(self): return self.GatewayLocationId
    def set_GatewayLocationId(self, GatewayLocationId): self.GatewayLocationId = GatewayLocationId
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_ContactAndAddress(self): return self.ContactAndAddress
    def set_ContactAndAddress(self, ContactAndAddress): self.ContactAndAddress = ContactAndAddress
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_CARGO_AIRPORT_TO_AIRPORT', 'FEDEX_CARGO_FREIGHT_FORWARDING', 'FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT', 'FEDEX_CARGO_INTERNATIONAL_PREMIUM', 'FEDEX_CARGO_MAIL', 'FEDEX_CARGO_REGISTERED_MAIL', 'FEDEX_CARGO_SURFACE_MAIL', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK', 'FEDEX_CUSTOM_CRITICAL_CHARTER_AIR', 'FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR', 'FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_INTERNATIONAL_PRIORITY_PLUS', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SAME_DAY_METRO_AFTERNOON', 'SAME_DAY_METRO_MORNING', 'SAME_DAY_METRO_RUSH', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def validate_FreightServiceSchedulingType(self, value):
        # Validate type FreightServiceSchedulingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['LIMITED', 'STANDARD', 'WILL_CALL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FreightServiceSchedulingType' % {"value" : value.encode("utf-8")} )
    def validate_DayOfWeekType(self, value):
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DayOfWeekType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.InterlineCarrierCode is not None or
            self.InterlineCarrierName is not None or
            self.AdditionalDays is not None or
            self.LocalService is not None or
            self.LocalDistance is not None or
            self.LocalDuration is not None or
            self.LocalServiceScheduling is not None or
            self.LimitedServiceDays or
            self.GatewayLocationId is not None or
            self.Location is not None or
            self.ContactAndAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='FreightServiceCenterDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightServiceCenterDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightServiceCenterDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='FreightServiceCenterDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightServiceCenterDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightServiceCenterDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InterlineCarrierCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:InterlineCarrierCode>%s</ns:InterlineCarrierCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCarrierCode), input_name='InterlineCarrierCode')), eol_))
        if self.InterlineCarrierName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:InterlineCarrierName>%s</ns:InterlineCarrierName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCarrierName), input_name='InterlineCarrierName')), eol_))
        if self.AdditionalDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AdditionalDays>%s</ns:AdditionalDays>%s' % (self.gds_format_integer(self.AdditionalDays, input_name='AdditionalDays'), eol_))
        if self.LocalService is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalService>%s</ns:LocalService>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalService), input_name='LocalService')), eol_))
        if self.LocalDistance is not None:
            self.LocalDistance.export(outfile, level, namespace_, name_='LocalDistance', pretty_print=pretty_print)
        if self.LocalDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalDuration>%s</ns:LocalDuration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalDuration), input_name='LocalDuration')), eol_))
        if self.LocalServiceScheduling is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalServiceScheduling>%s</ns:LocalServiceScheduling>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalServiceScheduling), input_name='LocalServiceScheduling')), eol_))
        for LimitedServiceDays_ in self.LimitedServiceDays:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LimitedServiceDays>%s</ns:LimitedServiceDays>%s' % (self.gds_encode(self.gds_format_string(quote_xml(LimitedServiceDays_), input_name='LimitedServiceDays')), eol_))
        if self.GatewayLocationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GatewayLocationId>%s</ns:GatewayLocationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GatewayLocationId), input_name='GatewayLocationId')), eol_))
        if self.Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Location>%s</ns:Location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), eol_))
        if self.ContactAndAddress is not None:
            self.ContactAndAddress.export(outfile, level, namespace_, name_='ContactAndAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InterlineCarrierCode':
            InterlineCarrierCode_ = child_.text
            InterlineCarrierCode_ = self.gds_validate_string(InterlineCarrierCode_, node, 'InterlineCarrierCode')
            self.InterlineCarrierCode = InterlineCarrierCode_
        elif nodeName_ == 'InterlineCarrierName':
            InterlineCarrierName_ = child_.text
            InterlineCarrierName_ = self.gds_validate_string(InterlineCarrierName_, node, 'InterlineCarrierName')
            self.InterlineCarrierName = InterlineCarrierName_
        elif nodeName_ == 'AdditionalDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AdditionalDays')
            self.AdditionalDays = ival_
        elif nodeName_ == 'LocalService':
            LocalService_ = child_.text
            LocalService_ = self.gds_validate_string(LocalService_, node, 'LocalService')
            self.LocalService = LocalService_
            # validate type ServiceType
            self.validate_ServiceType(self.LocalService)
        elif nodeName_ == 'LocalDistance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.LocalDistance = obj_
            obj_.original_tagname_ = 'LocalDistance'
        elif nodeName_ == 'LocalDuration':
            LocalDuration_ = child_.text
            LocalDuration_ = self.gds_validate_string(LocalDuration_, node, 'LocalDuration')
            self.LocalDuration = LocalDuration_
        elif nodeName_ == 'LocalServiceScheduling':
            LocalServiceScheduling_ = child_.text
            LocalServiceScheduling_ = self.gds_validate_string(LocalServiceScheduling_, node, 'LocalServiceScheduling')
            self.LocalServiceScheduling = LocalServiceScheduling_
            # validate type FreightServiceSchedulingType
            self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)
        elif nodeName_ == 'LimitedServiceDays':
            LimitedServiceDays_ = child_.text
            LimitedServiceDays_ = self.gds_validate_string(LimitedServiceDays_, node, 'LimitedServiceDays')
            self.LimitedServiceDays.append(LimitedServiceDays_)
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.LimitedServiceDays[-1])
        elif nodeName_ == 'GatewayLocationId':
            GatewayLocationId_ = child_.text
            GatewayLocationId_ = self.gds_validate_string(GatewayLocationId_, node, 'GatewayLocationId')
            self.GatewayLocationId = GatewayLocationId_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'ContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.ContactAndAddress = obj_
            obj_.original_tagname_ = 'ContactAndAddress'
# end class FreightServiceCenterDetail


class HoldAtLocationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, LocationContactAndAddress=None, LocationType=None, LocationId=None, LocationNumber=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
        self.LocationContactAndAddress = LocationContactAndAddress
        self.LocationType = LocationType
        self.validate_FedExLocationType(self.LocationType)
        self.LocationId = LocationId
        self.LocationNumber = LocationNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HoldAtLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HoldAtLocationDetail.subclass:
            return HoldAtLocationDetail.subclass(*args_, **kwargs_)
        else:
            return HoldAtLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_LocationContactAndAddress(self): return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress): self.LocationContactAndAddress = LocationContactAndAddress
    def get_LocationType(self): return self.LocationType
    def set_LocationType(self, LocationType): self.LocationType = LocationType
    def get_LocationId(self): return self.LocationId
    def set_LocationId(self, LocationId): self.LocationId = LocationId
    def get_LocationNumber(self): return self.LocationNumber
    def set_LocationNumber(self, LocationNumber): self.LocationNumber = LocationNumber
    def validate_FedExLocationType(self, value):
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SMART_POST_HUB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on FedExLocationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.LocationContactAndAddress is not None or
            self.LocationType is not None or
            self.LocationId is not None or
            self.LocationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='HoldAtLocationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HoldAtLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HoldAtLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='HoldAtLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='HoldAtLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='HoldAtLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.LocationContactAndAddress is not None:
            self.LocationContactAndAddress.export(outfile, level, namespace_, name_='LocationContactAndAddress', pretty_print=pretty_print)
        if self.LocationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationType>%s</ns:LocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationType), input_name='LocationType')), eol_))
        if self.LocationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationId>%s</ns:LocationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), eol_))
        if self.LocationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocationNumber>%s</ns:LocationNumber>%s' % (self.gds_format_integer(self.LocationNumber, input_name='LocationNumber'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.LocationContactAndAddress = obj_
            obj_.original_tagname_ = 'LocationContactAndAddress'
        elif nodeName_ == 'LocationType':
            LocationType_ = child_.text
            LocationType_ = self.gds_validate_string(LocationType_, node, 'LocationType')
            self.LocationType = LocationType_
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.LocationType)
        elif nodeName_ == 'LocationId':
            LocationId_ = child_.text
            LocationId_ = self.gds_validate_string(LocationId_, node, 'LocationId')
            self.LocationId = LocationId_
        elif nodeName_ == 'LocationNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'LocationNumber')
            self.LocationNumber = ival_
# end class HoldAtLocationDetail


class HomeDeliveryPremiumDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HomeDeliveryPremiumType=None, Date=None, PhoneNumber=None):
        self.original_tagname_ = None
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
        self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HomeDeliveryPremiumDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HomeDeliveryPremiumDetail.subclass:
            return HomeDeliveryPremiumDetail.subclass(*args_, **kwargs_)
        else:
            return HomeDeliveryPremiumDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HomeDeliveryPremiumType(self): return self.HomeDeliveryPremiumType
    def set_HomeDeliveryPremiumType(self, HomeDeliveryPremiumType): self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def validate_HomeDeliveryPremiumType(self, value):
        # Validate type HomeDeliveryPremiumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['APPOINTMENT', 'DATE_CERTAIN', 'EVENING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HomeDeliveryPremiumType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HomeDeliveryPremiumType is not None or
            self.Date is not None or
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='HomeDeliveryPremiumDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HomeDeliveryPremiumDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HomeDeliveryPremiumDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='HomeDeliveryPremiumDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='HomeDeliveryPremiumDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HomeDeliveryPremiumType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HomeDeliveryPremiumType>%s</ns:HomeDeliveryPremiumType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HomeDeliveryPremiumType), input_name='HomeDeliveryPremiumType')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Date>%s</ns:Date>%s' % (self.gds_format_date(self.Date, input_name='Date'), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HomeDeliveryPremiumType':
            HomeDeliveryPremiumType_ = child_.text
            HomeDeliveryPremiumType_ = self.gds_validate_string(HomeDeliveryPremiumType_, node, 'HomeDeliveryPremiumType')
            self.HomeDeliveryPremiumType = HomeDeliveryPremiumType_
            # validate type HomeDeliveryPremiumType
            self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class HomeDeliveryPremiumDetail


class InternationalControlledExportDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, ForeignTradeZoneCode=None, EntryNumber=None, LicenseOrPermitNumber=None, LicenseOrPermitExpirationDate=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_InternationalControlledExportType(self.Type)
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
        self.EntryNumber = EntryNumber
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
        if isinstance(LicenseOrPermitExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenseOrPermitExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenseOrPermitExpirationDate
        self.LicenseOrPermitExpirationDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalControlledExportDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalControlledExportDetail.subclass:
            return InternationalControlledExportDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalControlledExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_ForeignTradeZoneCode(self): return self.ForeignTradeZoneCode
    def set_ForeignTradeZoneCode(self, ForeignTradeZoneCode): self.ForeignTradeZoneCode = ForeignTradeZoneCode
    def get_EntryNumber(self): return self.EntryNumber
    def set_EntryNumber(self, EntryNumber): self.EntryNumber = EntryNumber
    def get_LicenseOrPermitNumber(self): return self.LicenseOrPermitNumber
    def set_LicenseOrPermitNumber(self, LicenseOrPermitNumber): self.LicenseOrPermitNumber = LicenseOrPermitNumber
    def get_LicenseOrPermitExpirationDate(self): return self.LicenseOrPermitExpirationDate
    def set_LicenseOrPermitExpirationDate(self, LicenseOrPermitExpirationDate): self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate
    def validate_InternationalControlledExportType(self, value):
        # Validate type InternationalControlledExportType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DEA_036', 'DEA_236', 'DEA_486', 'DSP_05', 'DSP_61', 'DSP_73', 'DSP_85', 'DSP_94', 'DSP_LICENSE_AGREEMENT', 'FROM_FOREIGN_TRADE_ZONE', 'WAREHOUSE_WITHDRAWAL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on InternationalControlledExportType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ForeignTradeZoneCode is not None or
            self.EntryNumber is not None or
            self.LicenseOrPermitNumber is not None or
            self.LicenseOrPermitExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='InternationalControlledExportDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalControlledExportDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InternationalControlledExportDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='InternationalControlledExportDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='InternationalControlledExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='InternationalControlledExportDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.ForeignTradeZoneCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ForeignTradeZoneCode>%s</ns:ForeignTradeZoneCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ForeignTradeZoneCode), input_name='ForeignTradeZoneCode')), eol_))
        if self.EntryNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EntryNumber>%s</ns:EntryNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), eol_))
        if self.LicenseOrPermitNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LicenseOrPermitNumber>%s</ns:LicenseOrPermitNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrPermitNumber), input_name='LicenseOrPermitNumber')), eol_))
        if self.LicenseOrPermitExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LicenseOrPermitExpirationDate>%s</ns:LicenseOrPermitExpirationDate>%s' % (self.gds_format_date(self.LicenseOrPermitExpirationDate, input_name='LicenseOrPermitExpirationDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type InternationalControlledExportType
            self.validate_InternationalControlledExportType(self.Type)
        elif nodeName_ == 'ForeignTradeZoneCode':
            ForeignTradeZoneCode_ = child_.text
            ForeignTradeZoneCode_ = self.gds_validate_string(ForeignTradeZoneCode_, node, 'ForeignTradeZoneCode')
            self.ForeignTradeZoneCode = ForeignTradeZoneCode_
        elif nodeName_ == 'EntryNumber':
            EntryNumber_ = child_.text
            EntryNumber_ = self.gds_validate_string(EntryNumber_, node, 'EntryNumber')
            self.EntryNumber = EntryNumber_
        elif nodeName_ == 'LicenseOrPermitNumber':
            LicenseOrPermitNumber_ = child_.text
            LicenseOrPermitNumber_ = self.gds_validate_string(LicenseOrPermitNumber_, node, 'LicenseOrPermitNumber')
            self.LicenseOrPermitNumber = LicenseOrPermitNumber_
        elif nodeName_ == 'LicenseOrPermitExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenseOrPermitExpirationDate = dval_
# end class InternationalControlledExportDetail


class InternationalTrafficInArmsRegulationsDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LicenseOrExemptionNumber=None):
        self.original_tagname_ = None
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalTrafficInArmsRegulationsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalTrafficInArmsRegulationsDetail.subclass:
            return InternationalTrafficInArmsRegulationsDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalTrafficInArmsRegulationsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LicenseOrExemptionNumber(self): return self.LicenseOrExemptionNumber
    def set_LicenseOrExemptionNumber(self, LicenseOrExemptionNumber): self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
    def hasContent_(self):
        if (
            self.LicenseOrExemptionNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='InternationalTrafficInArmsRegulationsDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalTrafficInArmsRegulationsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InternationalTrafficInArmsRegulationsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='InternationalTrafficInArmsRegulationsDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='InternationalTrafficInArmsRegulationsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenseOrExemptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LicenseOrExemptionNumber>%s</ns:LicenseOrExemptionNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrExemptionNumber), input_name='LicenseOrExemptionNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LicenseOrExemptionNumber':
            LicenseOrExemptionNumber_ = child_.text
            LicenseOrExemptionNumber_ = self.gds_validate_string(LicenseOrExemptionNumber_, node, 'LicenseOrExemptionNumber')
            self.LicenseOrExemptionNumber = LicenseOrExemptionNumber_
# end class InternationalTrafficInArmsRegulationsDetail


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.original_tagname_ = None
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LanguageCode>%s</ns:LanguageCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), eol_))
        if self.LocaleCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocaleCode>%s</ns:LocaleCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class MarkingOrTaggingDetail(GeneratedsSuper):
    """Specification for marking or tagging of pieces in shipment."""
    subclass = None
    superclass = None
    def __init__(self, Count=None):
        self.original_tagname_ = None
        self.Count = Count
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkingOrTaggingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkingOrTaggingDetail.subclass:
            return MarkingOrTaggingDetail.subclass(*args_, **kwargs_)
        else:
            return MarkingOrTaggingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Count(self): return self.Count
    def set_Count(self, Count): self.Count = Count
    def hasContent_(self):
        if (
            self.Count is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='MarkingOrTaggingDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkingOrTaggingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarkingOrTaggingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='MarkingOrTaggingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='MarkingOrTaggingDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='MarkingOrTaggingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Count>%s</ns:Count>%s' % (self.gds_format_integer(self.Count, input_name='Count'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
# end class MarkingOrTaggingDetail


class Money(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None):
        self.original_tagname_ = None
        self.Currency = Currency
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Money)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Money', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Money')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Money')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Money', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Money', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Currency>%s</ns:Currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), eol_))
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Amount>%s</ns:Amount>%s' % (self.gds_format_float(self.Amount, input_name='Amount'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'Amount':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Amount')
            self.Amount = fval_
# end class Money


class NonBusinessTimeDetail(GeneratedsSuper):
    """Specification for services performed during non-business hours
    and/or days."""
    subclass = None
    superclass = None
    def __init__(self, PersonDays=None, PersonHours=None):
        self.original_tagname_ = None
        self.PersonDays = PersonDays
        self.PersonHours = PersonHours
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NonBusinessTimeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NonBusinessTimeDetail.subclass:
            return NonBusinessTimeDetail.subclass(*args_, **kwargs_)
        else:
            return NonBusinessTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PersonDays(self): return self.PersonDays
    def set_PersonDays(self, PersonDays): self.PersonDays = PersonDays
    def get_PersonHours(self): return self.PersonHours
    def set_PersonHours(self, PersonHours): self.PersonHours = PersonHours
    def hasContent_(self):
        if (
            self.PersonDays is not None or
            self.PersonHours is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NonBusinessTimeDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NonBusinessTimeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NonBusinessTimeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NonBusinessTimeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NonBusinessTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NonBusinessTimeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonDays>%s</ns:PersonDays>%s' % (self.gds_format_integer(self.PersonDays, input_name='PersonDays'), eol_))
        if self.PersonHours is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonHours>%s</ns:PersonHours>%s' % (self.gds_format_integer(self.PersonHours, input_name='PersonHours'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PersonDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonDays')
            self.PersonDays = ival_
        elif nodeName_ == 'PersonHours':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonHours')
            self.PersonHours = ival_
# end class NonBusinessTimeDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.original_tagname_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value): self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value): self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Severity>%s</ns:Severity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Source>%s</ns:Source>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Code>%s</ns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Message>%s</ns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalizedMessage>%s</ns:LocalizedMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), eol_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NotificationType=None, EmailDetail=None, FaxDetail=None, SmsDetail=None, Localization=None):
        self.original_tagname_ = None
        self.NotificationType = NotificationType
        self.validate_NotificationType(self.NotificationType)
        self.EmailDetail = EmailDetail
        self.FaxDetail = FaxDetail
        self.SmsDetail = SmsDetail
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationDetail.subclass:
            return NotificationDetail.subclass(*args_, **kwargs_)
        else:
            return NotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationType(self): return self.NotificationType
    def set_NotificationType(self, NotificationType): self.NotificationType = NotificationType
    def get_EmailDetail(self): return self.EmailDetail
    def set_EmailDetail(self, EmailDetail): self.EmailDetail = EmailDetail
    def get_FaxDetail(self): return self.FaxDetail
    def set_FaxDetail(self, FaxDetail): self.FaxDetail = FaxDetail
    def get_SmsDetail(self): return self.SmsDetail
    def set_SmsDetail(self, SmsDetail): self.SmsDetail = SmsDetail
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def validate_NotificationType(self, value):
        # Validate type NotificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EMAIL', 'FAX', 'SMS_TEXT_MESSAGE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NotificationType is not None or
            self.EmailDetail is not None or
            self.FaxDetail is not None or
            self.SmsDetail is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NotificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NotificationType>%s</ns:NotificationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), eol_))
        if self.EmailDetail is not None:
            self.EmailDetail.export(outfile, level, namespace_, name_='EmailDetail', pretty_print=pretty_print)
        if self.FaxDetail is not None:
            self.FaxDetail.export(outfile, level, namespace_, name_='FaxDetail', pretty_print=pretty_print)
        if self.SmsDetail is not None:
            self.SmsDetail.export(outfile, level, namespace_, name_='SmsDetail', pretty_print=pretty_print)
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationType':
            NotificationType_ = child_.text
            NotificationType_ = self.gds_validate_string(NotificationType_, node, 'NotificationType')
            self.NotificationType = NotificationType_
            # validate type NotificationType
            self.validate_NotificationType(self.NotificationType)
        elif nodeName_ == 'EmailDetail':
            obj_ = EMailDetail.factory()
            obj_.build(child_)
            self.EmailDetail = obj_
            obj_.original_tagname_ = 'EmailDetail'
        elif nodeName_ == 'FaxDetail':
            obj_ = FaxDetail.factory()
            obj_.build(child_)
            self.FaxDetail = obj_
            obj_.original_tagname_ = 'FaxDetail'
        elif nodeName_ == 'SmsDetail':
            obj_ = SmsDetail.factory()
            obj_.build(child_)
            self.SmsDetail = obj_
            obj_.original_tagname_ = 'SmsDetail'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class NotificationDetail


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.original_tagname_ = None
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Id>%s</ns:Id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class PalletShrinkwrapDetail(GeneratedsSuper):
    """Specifications for pallets to be shrinkwrapped as part of a Freight
    shipment."""
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None):
        self.original_tagname_ = None
        self.PalletCount = PalletCount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletShrinkwrapDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletShrinkwrapDetail.subclass:
            return PalletShrinkwrapDetail.subclass(*args_, **kwargs_)
        else:
            return PalletShrinkwrapDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletCount(self): return self.PalletCount
    def set_PalletCount(self, PalletCount): self.PalletCount = PalletCount
    def hasContent_(self):
        if (
            self.PalletCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PalletShrinkwrapDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PalletShrinkwrapDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletShrinkwrapDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PalletShrinkwrapDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PalletShrinkwrapDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PalletShrinkwrapDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PalletCount>%s</ns:PalletCount>%s' % (self.gds_format_integer(self.PalletCount, input_name='PalletCount'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
# end class PalletShrinkwrapDetail


class PalletsProvidedDetail(GeneratedsSuper):
    """Specifications for pallets to be provided on Freight shipment."""
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None):
        self.original_tagname_ = None
        self.PalletCount = PalletCount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletsProvidedDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletsProvidedDetail.subclass:
            return PalletsProvidedDetail.subclass(*args_, **kwargs_)
        else:
            return PalletsProvidedDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletCount(self): return self.PalletCount
    def set_PalletCount(self, PalletCount): self.PalletCount = PalletCount
    def hasContent_(self):
        if (
            self.PalletCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PalletsProvidedDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PalletsProvidedDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletsProvidedDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PalletsProvidedDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PalletsProvidedDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PalletsProvidedDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PalletCount>%s</ns:PalletCount>%s' % (self.gds_format_integer(self.PalletCount, input_name='PalletCount'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
# end class PalletsProvidedDetail


class Party(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Tins=None, Contact=None, Address=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Party)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Party.subclass:
            return Party.subclass(*args_, **kwargs_)
        else:
            return Party(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Tins(self): return self.Tins
    def set_Tins(self, Tins): self.Tins = Tins
    def add_Tins(self, value): self.Tins.append(value)
    def insert_Tins_at(self, index, value): self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value): self.Tins[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Tins or
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Party', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Party')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Party')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Party', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Party'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Party', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AccountNumber>%s</ns:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        for Tins_ in self.Tins:
            Tins_.export(outfile, level, namespace_, name_='Tins', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory()
            obj_.build(child_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class Party


class Payment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PaymentType=None, Payor=None, Amount=None):
        self.original_tagname_ = None
        self.PaymentType = PaymentType
        self.validate_PaymentType(self.PaymentType)
        self.Payor = Payor
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payment.subclass:
            return Payment.subclass(*args_, **kwargs_)
        else:
            return Payment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PaymentType(self): return self.PaymentType
    def set_PaymentType(self, PaymentType): self.PaymentType = PaymentType
    def get_Payor(self): return self.Payor
    def set_Payor(self, Payor): self.Payor = Payor
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def validate_PaymentType(self, value):
        # Validate type PaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCOUNT', 'CASH', 'COLLECT', 'CREDIT_CARD', 'RECIPIENT', 'SENDER', 'THIRD_PARTY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PaymentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.PaymentType is not None or
            self.Payor is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Payment', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Payment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Payment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Payment'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Payment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PaymentType>%s</ns:PaymentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), eol_))
        if self.Payor is not None:
            self.Payor.export(outfile, level, namespace_, name_='Payor', pretty_print=pretty_print)
        if self.Amount is not None:
            self.Amount.export(outfile, level, namespace_, name_='Amount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PaymentType':
            PaymentType_ = child_.text
            PaymentType_ = self.gds_validate_string(PaymentType_, node, 'PaymentType')
            self.PaymentType = PaymentType_
            # validate type PaymentType
            self.validate_PaymentType(self.PaymentType)
        elif nodeName_ == 'Payor':
            obj_ = Payor.factory()
            obj_.build(child_)
            self.Payor = obj_
            obj_.original_tagname_ = 'Payor'
        elif nodeName_ == 'Amount':
            obj_ = Money.factory()
            obj_.build(child_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class Payment


class Payor(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponsibleParty=None, AssociatedAccounts=None):
        self.original_tagname_ = None
        self.ResponsibleParty = ResponsibleParty
        if AssociatedAccounts is None:
            self.AssociatedAccounts = []
        else:
            self.AssociatedAccounts = AssociatedAccounts
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payor.subclass:
            return Payor.subclass(*args_, **kwargs_)
        else:
            return Payor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponsibleParty(self): return self.ResponsibleParty
    def set_ResponsibleParty(self, ResponsibleParty): self.ResponsibleParty = ResponsibleParty
    def get_AssociatedAccounts(self): return self.AssociatedAccounts
    def set_AssociatedAccounts(self, AssociatedAccounts): self.AssociatedAccounts = AssociatedAccounts
    def add_AssociatedAccounts(self, value): self.AssociatedAccounts.append(value)
    def insert_AssociatedAccounts_at(self, index, value): self.AssociatedAccounts.insert(index, value)
    def replace_AssociatedAccounts_at(self, index, value): self.AssociatedAccounts[index] = value
    def hasContent_(self):
        if (
            self.ResponsibleParty is not None or
            self.AssociatedAccounts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Payor', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Payor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Payor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Payor'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Payor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponsibleParty is not None:
            self.ResponsibleParty.export(outfile, level, namespace_, name_='ResponsibleParty', pretty_print=pretty_print)
        for AssociatedAccounts_ in self.AssociatedAccounts:
            AssociatedAccounts_.export(outfile, level, namespace_, name_='AssociatedAccounts', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponsibleParty':
            obj_ = Party.factory()
            obj_.build(child_)
            self.ResponsibleParty = obj_
            obj_.original_tagname_ = 'ResponsibleParty'
        elif nodeName_ == 'AssociatedAccounts':
            obj_ = AssociatedAccount.factory()
            obj_.build(child_)
            self.AssociatedAccounts.append(obj_)
            obj_.original_tagname_ = 'AssociatedAccounts'
# end class Payor


class PendingShipmentDetail(GeneratedsSuper):
    """This information describes the kind of pending shipment being
    requested."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, ExpirationDate=None, EmailLabelDetail=None, ProcessingOptions=None, RecommendedDocumentSpecification=None, DocumentReferences=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_PendingShipmentType(self.Type)
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.EmailLabelDetail = EmailLabelDetail
        self.ProcessingOptions = ProcessingOptions
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentDetail.subclass:
            return PendingShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_EmailLabelDetail(self): return self.EmailLabelDetail
    def set_EmailLabelDetail(self, EmailLabelDetail): self.EmailLabelDetail = EmailLabelDetail
    def get_ProcessingOptions(self): return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions): self.ProcessingOptions = ProcessingOptions
    def get_RecommendedDocumentSpecification(self): return self.RecommendedDocumentSpecification
    def set_RecommendedDocumentSpecification(self, RecommendedDocumentSpecification): self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
    def get_DocumentReferences(self): return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences): self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value): self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value): self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value): self.DocumentReferences[index] = value
    def validate_PendingShipmentType(self, value):
        # Validate type PendingShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EMAIL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PendingShipmentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ExpirationDate is not None or
            self.EmailLabelDetail is not None or
            self.ProcessingOptions is not None or
            self.RecommendedDocumentSpecification is not None or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PendingShipmentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PendingShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PendingShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PendingShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PendingShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ExpirationDate>%s</ns:ExpirationDate>%s' % (self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), eol_))
        if self.EmailLabelDetail is not None:
            self.EmailLabelDetail.export(outfile, level, namespace_, name_='EmailLabelDetail', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            self.ProcessingOptions.export(outfile, level, namespace_, name_='ProcessingOptions', pretty_print=pretty_print)
        if self.RecommendedDocumentSpecification is not None:
            self.RecommendedDocumentSpecification.export(outfile, level, namespace_, name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
        for DocumentReferences_ in self.DocumentReferences:
            DocumentReferences_.export(outfile, level, namespace_, name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type PendingShipmentType
            self.validate_PendingShipmentType(self.Type)
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
        elif nodeName_ == 'EmailLabelDetail':
            obj_ = EMailLabelDetail.factory()
            obj_.build(child_)
            self.EmailLabelDetail = obj_
            obj_.original_tagname_ = 'EmailLabelDetail'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = PendingShipmentProcessingOptionsRequested.factory()
            obj_.build(child_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'RecommendedDocumentSpecification':
            obj_ = RecommendedDocumentSpecification.factory()
            obj_.build(child_)
            self.RecommendedDocumentSpecification = obj_
            obj_.original_tagname_ = 'RecommendedDocumentSpecification'
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory()
            obj_.build(child_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class PendingShipmentDetail


class PendingShipmentProcessingOptionsRequested(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Options=None):
        self.original_tagname_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentProcessingOptionsRequested.subclass:
            return PendingShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options_at(self, index, value): self.Options.insert(index, value)
    def replace_Options_at(self, index, value): self.Options[index] = value
    def validate_PendingShipmentProcessingOptionType(self, value):
        # Validate type PendingShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ALLOW_MODIFICATIONS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PendingShipmentProcessingOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PendingShipmentProcessingOptionsRequested', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PendingShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PendingShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PendingShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PendingShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Options>%s</ns:Options>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Options':
            Options_ = child_.text
            Options_ = self.gds_validate_string(Options_, node, 'Options')
            self.Options.append(Options_)
            # validate type PendingShipmentProcessingOptionType
            self.validate_PendingShipmentProcessingOptionType(self.Options[-1])
# end class PendingShipmentProcessingOptionsRequested


class PickupAvailabilityReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, RequestTimestamp=None, Options=None, CloseTimeType=None, CloseTime=None, OpenTime=None, LocalTime=None):
        self.original_tagname_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if isinstance(RequestTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RequestTimestamp
        self.RequestTimestamp = initvalue_
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.CloseTimeType = CloseTimeType
        self.validate_CloseTimeType(self.CloseTimeType)
        if isinstance(CloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CloseTime, '%H:%M:%S').time()
        else:
            initvalue_ = CloseTime
        self.CloseTime = initvalue_
        if isinstance(OpenTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OpenTime, '%H:%M:%S').time()
        else:
            initvalue_ = OpenTime
        self.OpenTime = initvalue_
        if isinstance(LocalTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LocalTime, '%H:%M:%S').time()
        else:
            initvalue_ = LocalTime
        self.LocalTime = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupAvailabilityReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupAvailabilityReply.subclass:
            return PickupAvailabilityReply.subclass(*args_, **kwargs_)
        else:
            return PickupAvailabilityReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications_at(self, index, value): self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_RequestTimestamp(self): return self.RequestTimestamp
    def set_RequestTimestamp(self, RequestTimestamp): self.RequestTimestamp = RequestTimestamp
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options_at(self, index, value): self.Options.insert(index, value)
    def replace_Options_at(self, index, value): self.Options[index] = value
    def get_CloseTimeType(self): return self.CloseTimeType
    def set_CloseTimeType(self, CloseTimeType): self.CloseTimeType = CloseTimeType
    def get_CloseTime(self): return self.CloseTime
    def set_CloseTime(self, CloseTime): self.CloseTime = CloseTime
    def get_OpenTime(self): return self.OpenTime
    def set_OpenTime(self, OpenTime): self.OpenTime = OpenTime
    def get_LocalTime(self): return self.LocalTime
    def set_LocalTime(self, LocalTime): self.LocalTime = LocalTime
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : value.encode("utf-8")} )
    def validate_CloseTimeType(self, value):
        # Validate type CloseTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CUSTOMER_SPECIFIED', 'DEFAULT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CloseTimeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestTimestamp is not None or
            self.Options or
            self.CloseTimeType is not None or
            self.CloseTime is not None or
            self.OpenTime is not None or
            self.LocalTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityReply', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupAvailabilityReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupAvailabilityReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupAvailabilityReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupAvailabilityReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:HighestSeverity>%s</ns:HighestSeverity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), eol_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.RequestTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:RequestTimestamp>%s</ns:RequestTimestamp>%s' % (self.gds_format_datetime(self.RequestTimestamp, input_name='RequestTimestamp'), eol_))
        for Options_ in self.Options:
            Options_.export(outfile, level, namespace_, name_='Options', pretty_print=pretty_print)
        if self.CloseTimeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CloseTimeType>%s</ns:CloseTimeType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseTimeType), input_name='CloseTimeType')), eol_))
        if self.CloseTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CloseTime>%s</ns:CloseTime>%s' % (self.gds_format_time(self.CloseTime, input_name='CloseTime'), eol_))
        if self.OpenTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:OpenTime>%s</ns:OpenTime>%s' % (self.gds_format_time(self.OpenTime, input_name='OpenTime'), eol_))
        if self.LocalTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LocalTime>%s</ns:LocalTime>%s' % (self.gds_format_time(self.LocalTime, input_name='LocalTime'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RequestTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RequestTimestamp = dval_
        elif nodeName_ == 'Options':
            obj_ = PickupScheduleOption.factory()
            obj_.build(child_)
            self.Options.append(obj_)
            obj_.original_tagname_ = 'Options'
        elif nodeName_ == 'CloseTimeType':
            CloseTimeType_ = child_.text
            CloseTimeType_ = self.gds_validate_string(CloseTimeType_, node, 'CloseTimeType')
            self.CloseTimeType = CloseTimeType_
            # validate type CloseTimeType
            self.validate_CloseTimeType(self.CloseTimeType)
        elif nodeName_ == 'CloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CloseTime = dval_
        elif nodeName_ == 'OpenTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.OpenTime = dval_
        elif nodeName_ == 'LocalTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.LocalTime = dval_
# end class PickupAvailabilityReply


class PickupAvailabilityRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, PickupType=None, AccountNumber=None, PickupAddress=None, PickupRequestType=None, DispatchDate=None, NumberOfBusinessDays=None, PackageReadyTime=None, CustomerCloseTime=None, Carriers=None, ShipmentAttributes=None, PackageDetails=None):
        self.original_tagname_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.PickupType = PickupType
        self.validate_PickupType(self.PickupType)
        self.AccountNumber = AccountNumber
        self.PickupAddress = PickupAddress
        if PickupRequestType is None:
            self.PickupRequestType = []
        else:
            self.PickupRequestType = PickupRequestType
        if isinstance(DispatchDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DispatchDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DispatchDate
        self.DispatchDate = initvalue_
        self.NumberOfBusinessDays = NumberOfBusinessDays
        if isinstance(PackageReadyTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PackageReadyTime, '%H:%M:%S').time()
        else:
            initvalue_ = PackageReadyTime
        self.PackageReadyTime = initvalue_
        if isinstance(CustomerCloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CustomerCloseTime, '%H:%M:%S').time()
        else:
            initvalue_ = CustomerCloseTime
        self.CustomerCloseTime = initvalue_
        if Carriers is None:
            self.Carriers = []
        else:
            self.Carriers = Carriers
        self.ShipmentAttributes = ShipmentAttributes
        if PackageDetails is None:
            self.PackageDetails = []
        else:
            self.PackageDetails = PackageDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupAvailabilityRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupAvailabilityRequest.subclass:
            return PickupAvailabilityRequest.subclass(*args_, **kwargs_)
        else:
            return PickupAvailabilityRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_PickupType(self): return self.PickupType
    def set_PickupType(self, PickupType): self.PickupType = PickupType
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_PickupAddress(self): return self.PickupAddress
    def set_PickupAddress(self, PickupAddress): self.PickupAddress = PickupAddress
    def get_PickupRequestType(self): return self.PickupRequestType
    def set_PickupRequestType(self, PickupRequestType): self.PickupRequestType = PickupRequestType
    def add_PickupRequestType(self, value): self.PickupRequestType.append(value)
    def insert_PickupRequestType_at(self, index, value): self.PickupRequestType.insert(index, value)
    def replace_PickupRequestType_at(self, index, value): self.PickupRequestType[index] = value
    def get_DispatchDate(self): return self.DispatchDate
    def set_DispatchDate(self, DispatchDate): self.DispatchDate = DispatchDate
    def get_NumberOfBusinessDays(self): return self.NumberOfBusinessDays
    def set_NumberOfBusinessDays(self, NumberOfBusinessDays): self.NumberOfBusinessDays = NumberOfBusinessDays
    def get_PackageReadyTime(self): return self.PackageReadyTime
    def set_PackageReadyTime(self, PackageReadyTime): self.PackageReadyTime = PackageReadyTime
    def get_CustomerCloseTime(self): return self.CustomerCloseTime
    def set_CustomerCloseTime(self, CustomerCloseTime): self.CustomerCloseTime = CustomerCloseTime
    def get_Carriers(self): return self.Carriers
    def set_Carriers(self, Carriers): self.Carriers = Carriers
    def add_Carriers(self, value): self.Carriers.append(value)
    def insert_Carriers_at(self, index, value): self.Carriers.insert(index, value)
    def replace_Carriers_at(self, index, value): self.Carriers[index] = value
    def get_ShipmentAttributes(self): return self.ShipmentAttributes
    def set_ShipmentAttributes(self, ShipmentAttributes): self.ShipmentAttributes = ShipmentAttributes
    def get_PackageDetails(self): return self.PackageDetails
    def set_PackageDetails(self, PackageDetails): self.PackageDetails = PackageDetails
    def add_PackageDetails(self, value): self.PackageDetails.append(value)
    def insert_PackageDetails_at(self, index, value): self.PackageDetails.insert(index, value)
    def replace_PackageDetails_at(self, index, value): self.PackageDetails[index] = value
    def validate_PickupType(self, value):
        # Validate type PickupType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ON_CALL', 'TAG']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupType' % {"value" : value.encode("utf-8")} )
    def validate_PickupRequestType(self, value):
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupRequestType' % {"value" : value.encode("utf-8")} )
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.PickupType is not None or
            self.AccountNumber is not None or
            self.PickupAddress is not None or
            self.PickupRequestType or
            self.DispatchDate is not None or
            self.NumberOfBusinessDays is not None or
            self.PackageReadyTime is not None or
            self.CustomerCloseTime is not None or
            self.Carriers or
            self.ShipmentAttributes is not None or
            self.PackageDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupAvailabilityRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupAvailabilityRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupAvailabilityRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupAvailabilityRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
        if self.PickupType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupType>%s</ns:PickupType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupType), input_name='PickupType')), eol_))
        if self.AccountNumber is not None:
            self.AccountNumber.export(outfile, level, namespace_, name_='AccountNumber', pretty_print=pretty_print)
        if self.PickupAddress is not None:
            self.PickupAddress.export(outfile, level, namespace_, name_='PickupAddress', pretty_print=pretty_print)
        for PickupRequestType_ in self.PickupRequestType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupRequestType>%s</ns:PickupRequestType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(PickupRequestType_), input_name='PickupRequestType')), eol_))
        if self.DispatchDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DispatchDate>%s</ns:DispatchDate>%s' % (self.gds_format_date(self.DispatchDate, input_name='DispatchDate'), eol_))
        if self.NumberOfBusinessDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:NumberOfBusinessDays>%s</ns:NumberOfBusinessDays>%s' % (self.gds_format_integer(self.NumberOfBusinessDays, input_name='NumberOfBusinessDays'), eol_))
        if self.PackageReadyTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageReadyTime>%s</ns:PackageReadyTime>%s' % (self.gds_format_time(self.PackageReadyTime, input_name='PackageReadyTime'), eol_))
        if self.CustomerCloseTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerCloseTime>%s</ns:CustomerCloseTime>%s' % (self.gds_format_time(self.CustomerCloseTime, input_name='CustomerCloseTime'), eol_))
        for Carriers_ in self.Carriers:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Carriers>%s</ns:Carriers>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Carriers_), input_name='Carriers')), eol_))
        if self.ShipmentAttributes is not None:
            self.ShipmentAttributes.export(outfile, level, namespace_, name_='ShipmentAttributes', pretty_print=pretty_print)
        for PackageDetails_ in self.PackageDetails:
            PackageDetails_.export(outfile, level, namespace_, name_='PackageDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'PickupType':
            PickupType_ = child_.text
            PickupType_ = self.gds_validate_string(PickupType_, node, 'PickupType')
            self.PickupType = PickupType_
            # validate type PickupType
            self.validate_PickupType(self.PickupType)
        elif nodeName_ == 'AccountNumber':
            obj_ = AssociatedAccount.factory()
            obj_.build(child_)
            self.AccountNumber = obj_
            obj_.original_tagname_ = 'AccountNumber'
        elif nodeName_ == 'PickupAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.PickupAddress = obj_
            obj_.original_tagname_ = 'PickupAddress'
        elif nodeName_ == 'PickupRequestType':
            PickupRequestType_ = child_.text
            PickupRequestType_ = self.gds_validate_string(PickupRequestType_, node, 'PickupRequestType')
            self.PickupRequestType.append(PickupRequestType_)
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.PickupRequestType[-1])
        elif nodeName_ == 'DispatchDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DispatchDate = dval_
        elif nodeName_ == 'NumberOfBusinessDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfBusinessDays')
            self.NumberOfBusinessDays = ival_
        elif nodeName_ == 'PackageReadyTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.PackageReadyTime = dval_
        elif nodeName_ == 'CustomerCloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CustomerCloseTime = dval_
        elif nodeName_ == 'Carriers':
            Carriers_ = child_.text
            Carriers_ = self.gds_validate_string(Carriers_, node, 'Carriers')
            self.Carriers.append(Carriers_)
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.Carriers[-1])
        elif nodeName_ == 'ShipmentAttributes':
            obj_ = PickupShipmentAttributes.factory()
            obj_.build(child_)
            self.ShipmentAttributes = obj_
            obj_.original_tagname_ = 'ShipmentAttributes'
        elif nodeName_ == 'PackageDetails':
            obj_ = RequestedPickupPackageDetail.factory()
            obj_.build(child_)
            self.PackageDetails.append(obj_)
            obj_.original_tagname_ = 'PackageDetails'
# end class PickupAvailabilityRequest


class PickupDangerousGoodsDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Regulation=None, Accessibility=None, Options=None):
        self.original_tagname_ = None
        self.Regulation = Regulation
        self.validate_HazardousCommodityRegulationType(self.Regulation)
        self.Accessibility = Accessibility
        self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupDangerousGoodsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupDangerousGoodsDetail.subclass:
            return PickupDangerousGoodsDetail.subclass(*args_, **kwargs_)
        else:
            return PickupDangerousGoodsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Regulation(self): return self.Regulation
    def set_Regulation(self, Regulation): self.Regulation = Regulation
    def get_Accessibility(self): return self.Accessibility
    def set_Accessibility(self, Accessibility): self.Accessibility = Accessibility
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options_at(self, index, value): self.Options.insert(index, value)
    def replace_Options_at(self, index, value): self.Options[index] = value
    def validate_HazardousCommodityRegulationType(self, value):
        # Validate type HazardousCommodityRegulationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ADR', 'DOT', 'IATA', 'ORMD']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousCommodityRegulationType' % {"value" : value.encode("utf-8")} )
    def validate_DangerousGoodsAccessibilityType(self, value):
        # Validate type DangerousGoodsAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ACCESSIBLE', 'INACCESSIBLE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DangerousGoodsAccessibilityType' % {"value" : value.encode("utf-8")} )
    def validate_HazardousCommodityOptionType(self, value):
        # Validate type HazardousCommodityOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BATTERY', 'HAZARDOUS_MATERIALS', 'LIMITED_QUANTITIES_COMMODITIES', 'ORM_D', 'REPORTABLE_QUANTITIES', 'SMALL_QUANTITY_EXCEPTION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on HazardousCommodityOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Regulation is not None or
            self.Accessibility is not None or
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupDangerousGoodsDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupDangerousGoodsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupDangerousGoodsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupDangerousGoodsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupDangerousGoodsDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupDangerousGoodsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Regulation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Regulation>%s</ns:Regulation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Regulation), input_name='Regulation')), eol_))
        if self.Accessibility is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Accessibility>%s</ns:Accessibility>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), eol_))
        for Options_ in self.Options:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Options>%s</ns:Options>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Regulation':
            Regulation_ = child_.text
            Regulation_ = self.gds_validate_string(Regulation_, node, 'Regulation')
            self.Regulation = Regulation_
            # validate type HazardousCommodityRegulationType
            self.validate_HazardousCommodityRegulationType(self.Regulation)
        elif nodeName_ == 'Accessibility':
            Accessibility_ = child_.text
            Accessibility_ = self.gds_validate_string(Accessibility_, node, 'Accessibility')
            self.Accessibility = Accessibility_
            # validate type DangerousGoodsAccessibilityType
            self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        elif nodeName_ == 'Options':
            Options_ = child_.text
            Options_ = self.gds_validate_string(Options_, node, 'Options')
            self.Options.append(Options_)
            # validate type HazardousCommodityOptionType
            self.validate_HazardousCommodityOptionType(self.Options[-1])
# end class PickupDangerousGoodsDetail


class PickupOriginDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UseAccountAddress=None, AddressId=None, PickupLocation=None, PackageLocation=None, BuildingPart=None, BuildingPartDescription=None, ReadyTimestamp=None, CompanyCloseTime=None, StayLate=None, PickupDateType=None, LastAccessTime=None, GeographicalPostalCode=None, Location=None, DeleteLastUsed=None, SuppliesRequested=None, EarlyPickup=None):
        self.original_tagname_ = None
        self.UseAccountAddress = UseAccountAddress
        self.AddressId = AddressId
        self.PickupLocation = PickupLocation
        self.PackageLocation = PackageLocation
        self.validate_PickupBuildingLocationType(self.PackageLocation)
        self.BuildingPart = BuildingPart
        self.validate_BuildingPartCode(self.BuildingPart)
        self.BuildingPartDescription = BuildingPartDescription
        if isinstance(ReadyTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReadyTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReadyTimestamp
        self.ReadyTimestamp = initvalue_
        if isinstance(CompanyCloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CompanyCloseTime, '%H:%M:%S').time()
        else:
            initvalue_ = CompanyCloseTime
        self.CompanyCloseTime = initvalue_
        self.StayLate = StayLate
        self.PickupDateType = PickupDateType
        self.validate_PickupRequestType(self.PickupDateType)
        if isinstance(LastAccessTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastAccessTime, '%H:%M:%S').time()
        else:
            initvalue_ = LastAccessTime
        self.LastAccessTime = initvalue_
        self.GeographicalPostalCode = GeographicalPostalCode
        self.Location = Location
        self.DeleteLastUsed = DeleteLastUsed
        self.SuppliesRequested = SuppliesRequested
        self.EarlyPickup = EarlyPickup
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupOriginDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupOriginDetail.subclass:
            return PickupOriginDetail.subclass(*args_, **kwargs_)
        else:
            return PickupOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UseAccountAddress(self): return self.UseAccountAddress
    def set_UseAccountAddress(self, UseAccountAddress): self.UseAccountAddress = UseAccountAddress
    def get_AddressId(self): return self.AddressId
    def set_AddressId(self, AddressId): self.AddressId = AddressId
    def get_PickupLocation(self): return self.PickupLocation
    def set_PickupLocation(self, PickupLocation): self.PickupLocation = PickupLocation
    def get_PackageLocation(self): return self.PackageLocation
    def set_PackageLocation(self, PackageLocation): self.PackageLocation = PackageLocation
    def get_BuildingPart(self): return self.BuildingPart
    def set_BuildingPart(self, BuildingPart): self.BuildingPart = BuildingPart
    def get_BuildingPartDescription(self): return self.BuildingPartDescription
    def set_BuildingPartDescription(self, BuildingPartDescription): self.BuildingPartDescription = BuildingPartDescription
    def get_ReadyTimestamp(self): return self.ReadyTimestamp
    def set_ReadyTimestamp(self, ReadyTimestamp): self.ReadyTimestamp = ReadyTimestamp
    def get_CompanyCloseTime(self): return self.CompanyCloseTime
    def set_CompanyCloseTime(self, CompanyCloseTime): self.CompanyCloseTime = CompanyCloseTime
    def get_StayLate(self): return self.StayLate
    def set_StayLate(self, StayLate): self.StayLate = StayLate
    def get_PickupDateType(self): return self.PickupDateType
    def set_PickupDateType(self, PickupDateType): self.PickupDateType = PickupDateType
    def get_LastAccessTime(self): return self.LastAccessTime
    def set_LastAccessTime(self, LastAccessTime): self.LastAccessTime = LastAccessTime
    def get_GeographicalPostalCode(self): return self.GeographicalPostalCode
    def set_GeographicalPostalCode(self, GeographicalPostalCode): self.GeographicalPostalCode = GeographicalPostalCode
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_DeleteLastUsed(self): return self.DeleteLastUsed
    def set_DeleteLastUsed(self, DeleteLastUsed): self.DeleteLastUsed = DeleteLastUsed
    def get_SuppliesRequested(self): return self.SuppliesRequested
    def set_SuppliesRequested(self, SuppliesRequested): self.SuppliesRequested = SuppliesRequested
    def get_EarlyPickup(self): return self.EarlyPickup
    def set_EarlyPickup(self, EarlyPickup): self.EarlyPickup = EarlyPickup
    def validate_PickupBuildingLocationType(self, value):
        # Validate type PickupBuildingLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FRONT', 'NONE', 'REAR', 'SIDE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupBuildingLocationType' % {"value" : value.encode("utf-8")} )
    def validate_BuildingPartCode(self, value):
        # Validate type BuildingPartCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['APARTMENT', 'BUILDING', 'DEPARTMENT', 'FLOOR', 'ROOM', 'SUITE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on BuildingPartCode' % {"value" : value.encode("utf-8")} )
    def validate_PickupRequestType(self, value):
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupRequestType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.UseAccountAddress is not None or
            self.AddressId is not None or
            self.PickupLocation is not None or
            self.PackageLocation is not None or
            self.BuildingPart is not None or
            self.BuildingPartDescription is not None or
            self.ReadyTimestamp is not None or
            self.CompanyCloseTime is not None or
            self.StayLate is not None or
            self.PickupDateType is not None or
            self.LastAccessTime is not None or
            self.GeographicalPostalCode is not None or
            self.Location is not None or
            self.DeleteLastUsed is not None or
            self.SuppliesRequested is not None or
            self.EarlyPickup is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupOriginDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupOriginDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupOriginDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupOriginDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupOriginDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UseAccountAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:UseAccountAddress>%s</ns:UseAccountAddress>%s' % (self.gds_format_boolean(self.UseAccountAddress, input_name='UseAccountAddress'), eol_))
        if self.AddressId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AddressId>%s</ns:AddressId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressId), input_name='AddressId')), eol_))
        if self.PickupLocation is not None:
            self.PickupLocation.export(outfile, level, namespace_, name_='PickupLocation', pretty_print=pretty_print)
        if self.PackageLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageLocation>%s</ns:PackageLocation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageLocation), input_name='PackageLocation')), eol_))
        if self.BuildingPart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:BuildingPart>%s</ns:BuildingPart>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BuildingPart), input_name='BuildingPart')), eol_))
        if self.BuildingPartDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:BuildingPartDescription>%s</ns:BuildingPartDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BuildingPartDescription), input_name='BuildingPartDescription')), eol_))
        if self.ReadyTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ReadyTimestamp>%s</ns:ReadyTimestamp>%s' % (self.gds_format_datetime(self.ReadyTimestamp, input_name='ReadyTimestamp'), eol_))
        if self.CompanyCloseTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CompanyCloseTime>%s</ns:CompanyCloseTime>%s' % (self.gds_format_time(self.CompanyCloseTime, input_name='CompanyCloseTime'), eol_))
        if self.StayLate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:StayLate>%s</ns:StayLate>%s' % (self.gds_format_boolean(self.StayLate, input_name='StayLate'), eol_))
        if self.PickupDateType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupDateType>%s</ns:PickupDateType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupDateType), input_name='PickupDateType')), eol_))
        if self.LastAccessTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LastAccessTime>%s</ns:LastAccessTime>%s' % (self.gds_format_time(self.LastAccessTime, input_name='LastAccessTime'), eol_))
        if self.GeographicalPostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:GeographicalPostalCode>%s</ns:GeographicalPostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GeographicalPostalCode), input_name='GeographicalPostalCode')), eol_))
        if self.Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Location>%s</ns:Location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), eol_))
        if self.DeleteLastUsed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DeleteLastUsed>%s</ns:DeleteLastUsed>%s' % (self.gds_format_boolean(self.DeleteLastUsed, input_name='DeleteLastUsed'), eol_))
        if self.SuppliesRequested is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SuppliesRequested>%s</ns:SuppliesRequested>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SuppliesRequested), input_name='SuppliesRequested')), eol_))
        if self.EarlyPickup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EarlyPickup>%s</ns:EarlyPickup>%s' % (self.gds_format_boolean(self.EarlyPickup, input_name='EarlyPickup'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UseAccountAddress':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'UseAccountAddress')
            self.UseAccountAddress = ival_
        elif nodeName_ == 'AddressId':
            AddressId_ = child_.text
            AddressId_ = self.gds_validate_string(AddressId_, node, 'AddressId')
            self.AddressId = AddressId_
        elif nodeName_ == 'PickupLocation':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.PickupLocation = obj_
            obj_.original_tagname_ = 'PickupLocation'
        elif nodeName_ == 'PackageLocation':
            PackageLocation_ = child_.text
            PackageLocation_ = self.gds_validate_string(PackageLocation_, node, 'PackageLocation')
            self.PackageLocation = PackageLocation_
            # validate type PickupBuildingLocationType
            self.validate_PickupBuildingLocationType(self.PackageLocation)
        elif nodeName_ == 'BuildingPart':
            BuildingPart_ = child_.text
            BuildingPart_ = self.gds_validate_string(BuildingPart_, node, 'BuildingPart')
            self.BuildingPart = BuildingPart_
            # validate type BuildingPartCode
            self.validate_BuildingPartCode(self.BuildingPart)
        elif nodeName_ == 'BuildingPartDescription':
            BuildingPartDescription_ = child_.text
            BuildingPartDescription_ = self.gds_validate_string(BuildingPartDescription_, node, 'BuildingPartDescription')
            self.BuildingPartDescription = BuildingPartDescription_
        elif nodeName_ == 'ReadyTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReadyTimestamp = dval_
        elif nodeName_ == 'CompanyCloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CompanyCloseTime = dval_
        elif nodeName_ == 'StayLate':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'StayLate')
            self.StayLate = ival_
        elif nodeName_ == 'PickupDateType':
            PickupDateType_ = child_.text
            PickupDateType_ = self.gds_validate_string(PickupDateType_, node, 'PickupDateType')
            self.PickupDateType = PickupDateType_
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.PickupDateType)
        elif nodeName_ == 'LastAccessTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.LastAccessTime = dval_
        elif nodeName_ == 'GeographicalPostalCode':
            GeographicalPostalCode_ = child_.text
            GeographicalPostalCode_ = self.gds_validate_string(GeographicalPostalCode_, node, 'GeographicalPostalCode')
            self.GeographicalPostalCode = GeographicalPostalCode_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'DeleteLastUsed':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DeleteLastUsed')
            self.DeleteLastUsed = ival_
        elif nodeName_ == 'SuppliesRequested':
            SuppliesRequested_ = child_.text
            SuppliesRequested_ = self.gds_validate_string(SuppliesRequested_, node, 'SuppliesRequested')
            self.SuppliesRequested = SuppliesRequested_
        elif nodeName_ == 'EarlyPickup':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'EarlyPickup')
            self.EarlyPickup = ival_
# end class PickupOriginDetail


class PickupPackageSpecialServicesRequested(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, DangerousGoodsDetail=None, PriorityAlertDetail=None):
        self.original_tagname_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.DangerousGoodsDetail = DangerousGoodsDetail
        self.PriorityAlertDetail = PriorityAlertDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupPackageSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupPackageSpecialServicesRequested.subclass:
            return PickupPackageSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return PickupPackageSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialServiceTypes(self): return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes): self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value): self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value): self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value): self.SpecialServiceTypes[index] = value
    def get_DangerousGoodsDetail(self): return self.DangerousGoodsDetail
    def set_DangerousGoodsDetail(self, DangerousGoodsDetail): self.DangerousGoodsDetail = DangerousGoodsDetail
    def get_PriorityAlertDetail(self): return self.PriorityAlertDetail
    def set_PriorityAlertDetail(self, PriorityAlertDetail): self.PriorityAlertDetail = PriorityAlertDetail
    def validate_PackageSpecialServiceType(self, value):
        # Validate type PackageSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ALCOHOL', 'APPOINTMENT_DELIVERY', 'BATTERY', 'COD', 'DANGEROUS_GOODS', 'DRY_ICE', 'NON_STANDARD_CONTAINER', 'PIECE_COUNT_VERIFICATION', 'PRIORITY_ALERT', 'SIGNATURE_OPTION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackageSpecialServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.DangerousGoodsDetail is not None or
            self.PriorityAlertDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupPackageSpecialServicesRequested', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupPackageSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupPackageSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupPackageSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupPackageSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupPackageSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SpecialServiceTypes>%s</ns:SpecialServiceTypes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), eol_))
        if self.DangerousGoodsDetail is not None:
            self.DangerousGoodsDetail.export(outfile, level, namespace_, name_='DangerousGoodsDetail', pretty_print=pretty_print)
        if self.PriorityAlertDetail is not None:
            self.PriorityAlertDetail.export(outfile, level, namespace_, name_='PriorityAlertDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialServiceTypes':
            SpecialServiceTypes_ = child_.text
            SpecialServiceTypes_ = self.gds_validate_string(SpecialServiceTypes_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(SpecialServiceTypes_)
            # validate type PackageSpecialServiceType
            self.validate_PackageSpecialServiceType(self.SpecialServiceTypes[-1])
        elif nodeName_ == 'DangerousGoodsDetail':
            obj_ = PickupDangerousGoodsDetail.factory()
            obj_.build(child_)
            self.DangerousGoodsDetail = obj_
            obj_.original_tagname_ = 'DangerousGoodsDetail'
        elif nodeName_ == 'PriorityAlertDetail':
            obj_ = PriorityAlertDetail.factory()
            obj_.build(child_)
            self.PriorityAlertDetail = obj_
            obj_.original_tagname_ = 'PriorityAlertDetail'
# end class PickupPackageSpecialServicesRequested


class PickupScheduleOption(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Carrier=None, Description=None, ScheduleDay=None, Available=None, PickupDate=None, CutOffTime=None, AccessTime=None, ResidentialAvailable=None, CountryRelationship=None):
        self.original_tagname_ = None
        self.Carrier = Carrier
        self.validate_CarrierCodeType(self.Carrier)
        self.Description = Description
        self.ScheduleDay = ScheduleDay
        self.validate_PickupRequestType(self.ScheduleDay)
        self.Available = Available
        if isinstance(PickupDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PickupDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PickupDate
        self.PickupDate = initvalue_
        if isinstance(CutOffTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CutOffTime, '%H:%M:%S').time()
        else:
            initvalue_ = CutOffTime
        self.CutOffTime = initvalue_
        self.AccessTime = AccessTime
        self.ResidentialAvailable = ResidentialAvailable
        self.CountryRelationship = CountryRelationship
        self.validate_CountryRelationshipType(self.CountryRelationship)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupScheduleOption)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupScheduleOption.subclass:
            return PickupScheduleOption.subclass(*args_, **kwargs_)
        else:
            return PickupScheduleOption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ScheduleDay(self): return self.ScheduleDay
    def set_ScheduleDay(self, ScheduleDay): self.ScheduleDay = ScheduleDay
    def get_Available(self): return self.Available
    def set_Available(self, Available): self.Available = Available
    def get_PickupDate(self): return self.PickupDate
    def set_PickupDate(self, PickupDate): self.PickupDate = PickupDate
    def get_CutOffTime(self): return self.CutOffTime
    def set_CutOffTime(self, CutOffTime): self.CutOffTime = CutOffTime
    def get_AccessTime(self): return self.AccessTime
    def set_AccessTime(self, AccessTime): self.AccessTime = AccessTime
    def get_ResidentialAvailable(self): return self.ResidentialAvailable
    def set_ResidentialAvailable(self, ResidentialAvailable): self.ResidentialAvailable = ResidentialAvailable
    def get_CountryRelationship(self): return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship): self.CountryRelationship = CountryRelationship
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CarrierCodeType' % {"value" : value.encode("utf-8")} )
    def validate_PickupRequestType(self, value):
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PickupRequestType' % {"value" : value.encode("utf-8")} )
    def validate_CountryRelationshipType(self, value):
        # Validate type CountryRelationshipType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DOMESTIC', 'INTERNATIONAL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CountryRelationshipType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.Description is not None or
            self.ScheduleDay is not None or
            self.Available is not None or
            self.PickupDate is not None or
            self.CutOffTime is not None or
            self.AccessTime is not None or
            self.ResidentialAvailable is not None or
            self.CountryRelationship is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupScheduleOption', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupScheduleOption')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupScheduleOption')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupScheduleOption', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupScheduleOption'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupScheduleOption', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Carrier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Carrier>%s</ns:Carrier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Carrier), input_name='Carrier')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ScheduleDay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ScheduleDay>%s</ns:ScheduleDay>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ScheduleDay), input_name='ScheduleDay')), eol_))
        if self.Available is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Available>%s</ns:Available>%s' % (self.gds_format_boolean(self.Available, input_name='Available'), eol_))
        if self.PickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PickupDate>%s</ns:PickupDate>%s' % (self.gds_format_date(self.PickupDate, input_name='PickupDate'), eol_))
        if self.CutOffTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CutOffTime>%s</ns:CutOffTime>%s' % (self.gds_format_time(self.CutOffTime, input_name='CutOffTime'), eol_))
        if self.AccessTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AccessTime>%s</ns:AccessTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccessTime), input_name='AccessTime')), eol_))
        if self.ResidentialAvailable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ResidentialAvailable>%s</ns:ResidentialAvailable>%s' % (self.gds_format_boolean(self.ResidentialAvailable, input_name='ResidentialAvailable'), eol_))
        if self.CountryRelationship is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CountryRelationship>%s</ns:CountryRelationship>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryRelationship), input_name='CountryRelationship')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Carrier':
            Carrier_ = child_.text
            Carrier_ = self.gds_validate_string(Carrier_, node, 'Carrier')
            self.Carrier = Carrier_
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.Carrier)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ScheduleDay':
            ScheduleDay_ = child_.text
            ScheduleDay_ = self.gds_validate_string(ScheduleDay_, node, 'ScheduleDay')
            self.ScheduleDay = ScheduleDay_
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.ScheduleDay)
        elif nodeName_ == 'Available':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Available')
            self.Available = ival_
        elif nodeName_ == 'PickupDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PickupDate = dval_
        elif nodeName_ == 'CutOffTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CutOffTime = dval_
        elif nodeName_ == 'AccessTime':
            AccessTime_ = child_.text
            AccessTime_ = self.gds_validate_string(AccessTime_, node, 'AccessTime')
            self.AccessTime = AccessTime_
        elif nodeName_ == 'ResidentialAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ResidentialAvailable')
            self.ResidentialAvailable = ival_
        elif nodeName_ == 'CountryRelationship':
            CountryRelationship_ = child_.text
            CountryRelationship_ = self.gds_validate_string(CountryRelationship_, node, 'CountryRelationship')
            self.CountryRelationship = CountryRelationship_
            # validate type CountryRelationshipType
            self.validate_CountryRelationshipType(self.CountryRelationship)
# end class PickupScheduleOption


class PickupShipmentAttributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceType=None, PackagingType=None, Dimensions=None, Weight=None):
        self.original_tagname_ = None
        self.ServiceType = ServiceType
        self.validate_ServiceType(self.ServiceType)
        self.PackagingType = PackagingType
        self.validate_PackagingType(self.PackagingType)
        self.Dimensions = Dimensions
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupShipmentAttributes)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupShipmentAttributes.subclass:
            return PickupShipmentAttributes.subclass(*args_, **kwargs_)
        else:
            return PickupShipmentAttributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceType(self): return self.ServiceType
    def set_ServiceType(self, ServiceType): self.ServiceType = ServiceType
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'FEDEX_1_DAY_FREIGHT', 'FEDEX_2_DAY', 'FEDEX_2_DAY_AM', 'FEDEX_2_DAY_FREIGHT', 'FEDEX_3_DAY_FREIGHT', 'FEDEX_CARGO_AIRPORT_TO_AIRPORT', 'FEDEX_CARGO_FREIGHT_FORWARDING', 'FEDEX_CARGO_INTERNATIONAL_EXPRESS_FREIGHT', 'FEDEX_CARGO_INTERNATIONAL_PREMIUM', 'FEDEX_CARGO_MAIL', 'FEDEX_CARGO_REGISTERED_MAIL', 'FEDEX_CARGO_SURFACE_MAIL', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_AIR_EXPEDITE_NETWORK', 'FEDEX_CUSTOM_CRITICAL_CHARTER_AIR', 'FEDEX_CUSTOM_CRITICAL_POINT_TO_POINT', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE', 'FEDEX_CUSTOM_CRITICAL_SURFACE_EXPEDITE_EXCLUSIVE_USE', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_AIR', 'FEDEX_CUSTOM_CRITICAL_TEMP_ASSURE_VALIDATED_AIR', 'FEDEX_CUSTOM_CRITICAL_WHITE_GLOVE_SERVICES', 'FEDEX_DISTANCE_DEFERRED', 'FEDEX_EXPRESS_SAVER', 'FEDEX_FIRST_FREIGHT', 'FEDEX_FREIGHT_ECONOMY', 'FEDEX_FREIGHT_PRIORITY', 'FEDEX_GROUND', 'FEDEX_INTERNATIONAL_PRIORITY_PLUS', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'FIRST_OVERNIGHT', 'GROUND_HOME_DELIVERY', 'INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_FREIGHT', 'INTERNATIONAL_FIRST', 'INTERNATIONAL_PRIORITY', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_EXPRESS', 'INTERNATIONAL_PRIORITY_FREIGHT', 'PRIORITY_OVERNIGHT', 'SAME_DAY', 'SAME_DAY_CITY', 'SAME_DAY_METRO_AFTERNOON', 'SAME_DAY_METRO_MORNING', 'SAME_DAY_METRO_RUSH', 'SMART_POST', 'STANDARD_OVERNIGHT', 'TRANSBORDER_DISTRIBUTION_CONSOLIDATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ServiceType' % {"value" : value.encode("utf-8")} )
    def validate_PackagingType(self, value):
        # Validate type PackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_10KG_BOX', 'FEDEX_25KG_BOX', 'FEDEX_BOX', 'FEDEX_ENVELOPE', 'FEDEX_EXTRA_LARGE_BOX', 'FEDEX_LARGE_BOX', 'FEDEX_MEDIUM_BOX', 'FEDEX_PAK', 'FEDEX_SMALL_BOX', 'FEDEX_TUBE', 'YOUR_PACKAGING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PackagingType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ServiceType is not None or
            self.PackagingType is not None or
            self.Dimensions is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PickupShipmentAttributes', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupShipmentAttributes')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupShipmentAttributes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PickupShipmentAttributes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupShipmentAttributes'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupShipmentAttributes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceType>%s</ns:ServiceType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), eol_))
        if self.PackagingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackagingType>%s</ns:PackagingType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), eol_))
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceType':
            ServiceType_ = child_.text
            ServiceType_ = self.gds_validate_string(ServiceType_, node, 'ServiceType')
            self.ServiceType = ServiceType_
            # validate type ServiceType
            self.validate_ServiceType(self.ServiceType)
        elif nodeName_ == 'PackagingType':
            PackagingType_ = child_.text
            PackagingType_ = self.gds_validate_string(PackagingType_, node, 'PackagingType')
            self.PackagingType = PackagingType_
            # validate type PackagingType
            self.validate_PackagingType(self.PackagingType)
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class PickupShipmentAttributes


class PriorityAlertDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EnhancementTypes=None, Content=None):
        self.original_tagname_ = None
        if EnhancementTypes is None:
            self.EnhancementTypes = []
        else:
            self.EnhancementTypes = EnhancementTypes
        if Content is None:
            self.Content = []
        else:
            self.Content = Content
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriorityAlertDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriorityAlertDetail.subclass:
            return PriorityAlertDetail.subclass(*args_, **kwargs_)
        else:
            return PriorityAlertDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EnhancementTypes(self): return self.EnhancementTypes
    def set_EnhancementTypes(self, EnhancementTypes): self.EnhancementTypes = EnhancementTypes
    def add_EnhancementTypes(self, value): self.EnhancementTypes.append(value)
    def insert_EnhancementTypes_at(self, index, value): self.EnhancementTypes.insert(index, value)
    def replace_EnhancementTypes_at(self, index, value): self.EnhancementTypes[index] = value
    def get_Content(self): return self.Content
    def set_Content(self, Content): self.Content = Content
    def add_Content(self, value): self.Content.append(value)
    def insert_Content_at(self, index, value): self.Content.insert(index, value)
    def replace_Content_at(self, index, value): self.Content[index] = value
    def validate_PriorityAlertEnhancementType(self, value):
        # Validate type PriorityAlertEnhancementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PRIORITY_ALERT_PLUS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PriorityAlertEnhancementType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.EnhancementTypes or
            self.Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='PriorityAlertDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriorityAlertDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriorityAlertDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='PriorityAlertDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PriorityAlertDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PriorityAlertDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EnhancementTypes_ in self.EnhancementTypes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EnhancementTypes>%s</ns:EnhancementTypes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EnhancementTypes_), input_name='EnhancementTypes')), eol_))
        for Content_ in self.Content:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Content>%s</ns:Content>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Content_), input_name='Content')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EnhancementTypes':
            EnhancementTypes_ = child_.text
            EnhancementTypes_ = self.gds_validate_string(EnhancementTypes_, node, 'EnhancementTypes')
            self.EnhancementTypes.append(EnhancementTypes_)
            # validate type PriorityAlertEnhancementType
            self.validate_PriorityAlertEnhancementType(self.EnhancementTypes[-1])
        elif nodeName_ == 'Content':
            Content_ = child_.text
            Content_ = self.gds_validate_string(Content_, node, 'Content')
            self.Content.append(Content_)
# end class PriorityAlertDetail


class RecommendedDocumentSpecification(GeneratedsSuper):
    """Specifies the details about documents that are recommended to be
    included with the shipment for ease of shipment processing and
    transportation."""
    subclass = None
    superclass = None
    def __init__(self, Types=None):
        self.original_tagname_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecommendedDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecommendedDocumentSpecification.subclass:
            return RecommendedDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return RecommendedDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Types(self): return self.Types
    def set_Types(self, Types): self.Types = Types
    def add_Types(self, value): self.Types.append(value)
    def insert_Types_at(self, index, value): self.Types.insert(index, value)
    def replace_Types_at(self, index, value): self.Types[index] = value
    def validate_RecommendedDocumentType(self, value):
        # Validate type RecommendedDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ANTIQUE_STATEMENT_EUROPEAN_UNION', 'ANTIQUE_STATEMENT_UNITED_STATES', 'ASSEMBLER_DECLARATION', 'BEARING_WORKSHEET', 'CERTIFICATE_OF_SHIPMENTS_TO_SYRIA', 'COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET', 'CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA', 'DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS', 'DECLARATION_OF_BIOLOGICAL_STANDARDS', 'DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD', 'ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET', 'FILM_AND_VIDEO_CERTIFICATE', 'INTERIM_FOOTWEAR_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH', 'NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES', 'PACKING_LIST', 'PRINTED_CIRCUIT_BOARD_WORKSHEET', 'REPAIRED_WATCH_BREAKOUT_WORKSHEET', 'STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES', 'TOXIC_SUBSTANCES_CONTROL_ACT', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES', 'UNITED_STATES_NEW_WATCH_WORKSHEET', 'UNITED_STATES_WATCH_REPAIR_DECLARATION']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RecommendedDocumentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Types
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='RecommendedDocumentSpecification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecommendedDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RecommendedDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='RecommendedDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='RecommendedDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Types_ in self.Types:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:domain>%s</ns:domain>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='domain')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'domain':
            Types_ = child_.text
            Types_ = self.gds_validate_string(Types_, node, 'domain')
            self.Types.append(Types_)
            # validate type RecommendedDocumentType
            self.validate_RecommendedDocumentType(self.Types[-1])
# end class RecommendedDocumentSpecification


class RequestedPickupPackageDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageSpecialServices=None, Weight=None):
        self.original_tagname_ = None
        self.PackageSpecialServices = PackageSpecialServices
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedPickupPackageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedPickupPackageDetail.subclass:
            return RequestedPickupPackageDetail.subclass(*args_, **kwargs_)
        else:
            return RequestedPickupPackageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageSpecialServices(self): return self.PackageSpecialServices
    def set_PackageSpecialServices(self, PackageSpecialServices): self.PackageSpecialServices = PackageSpecialServices
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.PackageSpecialServices is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='RequestedPickupPackageDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedPickupPackageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestedPickupPackageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='RequestedPickupPackageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='RequestedPickupPackageDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='RequestedPickupPackageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageSpecialServices is not None:
            self.PackageSpecialServices.export(outfile, level, namespace_, name_='PackageSpecialServices', pretty_print=pretty_print)
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageSpecialServices':
            obj_ = PickupPackageSpecialServicesRequested.factory()
            obj_.build(child_)
            self.PackageSpecialServices = obj_
            obj_.original_tagname_ = 'PackageSpecialServices'
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class RequestedPickupPackageDetail


class ReturnAssociationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, ShipDate=None):
        self.original_tagname_ = None
        self.TrackingNumber = TrackingNumber
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnAssociationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnAssociationDetail.subclass:
            return ReturnAssociationDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnAssociationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.ShipDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ReturnAssociationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnAssociationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnAssociationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ReturnAssociationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReturnAssociationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReturnAssociationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ShipDate>%s</ns:ShipDate>%s' % (self.gds_format_date(self.ShipDate, input_name='ShipDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
# end class ReturnAssociationDetail


class ReturnEMailDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MerchantPhoneNumber=None, AllowedSpecialServices=None):
        self.original_tagname_ = None
        self.MerchantPhoneNumber = MerchantPhoneNumber
        if AllowedSpecialServices is None:
            self.AllowedSpecialServices = []
        else:
            self.AllowedSpecialServices = AllowedSpecialServices
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnEMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnEMailDetail.subclass:
            return ReturnEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MerchantPhoneNumber(self): return self.MerchantPhoneNumber
    def set_MerchantPhoneNumber(self, MerchantPhoneNumber): self.MerchantPhoneNumber = MerchantPhoneNumber
    def get_AllowedSpecialServices(self): return self.AllowedSpecialServices
    def set_AllowedSpecialServices(self, AllowedSpecialServices): self.AllowedSpecialServices = AllowedSpecialServices
    def add_AllowedSpecialServices(self, value): self.AllowedSpecialServices.append(value)
    def insert_AllowedSpecialServices_at(self, index, value): self.AllowedSpecialServices.insert(index, value)
    def replace_AllowedSpecialServices_at(self, index, value): self.AllowedSpecialServices[index] = value
    def validate_ReturnEMailAllowedSpecialServiceType(self, value):
        # Validate type ReturnEMailAllowedSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['SATURDAY_DELIVERY', 'SATURDAY_PICKUP']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReturnEMailAllowedSpecialServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MerchantPhoneNumber is not None or
            self.AllowedSpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ReturnEMailDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnEMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnEMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ReturnEMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReturnEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReturnEMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MerchantPhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:MerchantPhoneNumber>%s</ns:MerchantPhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MerchantPhoneNumber), input_name='MerchantPhoneNumber')), eol_))
        for AllowedSpecialServices_ in self.AllowedSpecialServices:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AllowedSpecialServices>%s</ns:AllowedSpecialServices>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AllowedSpecialServices_), input_name='AllowedSpecialServices')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MerchantPhoneNumber':
            MerchantPhoneNumber_ = child_.text
            MerchantPhoneNumber_ = self.gds_validate_string(MerchantPhoneNumber_, node, 'MerchantPhoneNumber')
            self.MerchantPhoneNumber = MerchantPhoneNumber_
        elif nodeName_ == 'AllowedSpecialServices':
            AllowedSpecialServices_ = child_.text
            AllowedSpecialServices_ = self.gds_validate_string(AllowedSpecialServices_, node, 'AllowedSpecialServices')
            self.AllowedSpecialServices.append(AllowedSpecialServices_)
            # validate type ReturnEMailAllowedSpecialServiceType
            self.validate_ReturnEMailAllowedSpecialServiceType(self.AllowedSpecialServices[-1])
# end class ReturnEMailDetail


class ReturnShipmentDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReturnType=None, Rma=None, ReturnEMailDetail=None, ReturnAssociation=None):
        self.original_tagname_ = None
        self.ReturnType = ReturnType
        self.validate_ReturnType(self.ReturnType)
        self.Rma = Rma
        self.ReturnEMailDetail = ReturnEMailDetail
        self.ReturnAssociation = ReturnAssociation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnShipmentDetail.subclass:
            return ReturnShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReturnType(self): return self.ReturnType
    def set_ReturnType(self, ReturnType): self.ReturnType = ReturnType
    def get_Rma(self): return self.Rma
    def set_Rma(self, Rma): self.Rma = Rma
    def get_ReturnEMailDetail(self): return self.ReturnEMailDetail
    def set_ReturnEMailDetail(self, ReturnEMailDetail): self.ReturnEMailDetail = ReturnEMailDetail
    def get_ReturnAssociation(self): return self.ReturnAssociation
    def set_ReturnAssociation(self, ReturnAssociation): self.ReturnAssociation = ReturnAssociation
    def validate_ReturnType(self, value):
        # Validate type ReturnType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_TAG', 'NET_RETURN', 'PENDING', 'PRINT_RETURN_LABEL', 'VOICE_CALL_TAG']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ReturnType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ReturnType is not None or
            self.Rma is not None or
            self.ReturnEMailDetail is not None or
            self.ReturnAssociation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ReturnShipmentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ReturnShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReturnShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReturnShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReturnType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ReturnType>%s</ns:ReturnType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReturnType), input_name='ReturnType')), eol_))
        if self.Rma is not None:
            self.Rma.export(outfile, level, namespace_, name_='Rma', pretty_print=pretty_print)
        if self.ReturnEMailDetail is not None:
            self.ReturnEMailDetail.export(outfile, level, namespace_, name_='ReturnEMailDetail', pretty_print=pretty_print)
        if self.ReturnAssociation is not None:
            self.ReturnAssociation.export(outfile, level, namespace_, name_='ReturnAssociation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReturnType':
            ReturnType_ = child_.text
            ReturnType_ = self.gds_validate_string(ReturnType_, node, 'ReturnType')
            self.ReturnType = ReturnType_
            # validate type ReturnType
            self.validate_ReturnType(self.ReturnType)
        elif nodeName_ == 'Rma':
            obj_ = Rma.factory()
            obj_.build(child_)
            self.Rma = obj_
            obj_.original_tagname_ = 'Rma'
        elif nodeName_ == 'ReturnEMailDetail':
            obj_ = ReturnEMailDetail.factory()
            obj_.build(child_)
            self.ReturnEMailDetail = obj_
            obj_.original_tagname_ = 'ReturnEMailDetail'
        elif nodeName_ == 'ReturnAssociation':
            obj_ = ReturnAssociationDetail.factory()
            obj_.build(child_)
            self.ReturnAssociation = obj_
            obj_.original_tagname_ = 'ReturnAssociation'
# end class ReturnShipmentDetail


class Rma(GeneratedsSuper):
    """June 2011 ITG 121203 IR-RMA number has been removed from this
    structure and added as a new customer reference type. The
    structure remains because of the reason field below."""
    subclass = None
    superclass = None
    def __init__(self, Reason=None):
        self.original_tagname_ = None
        self.Reason = Reason
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Rma)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Rma.subclass:
            return Rma.subclass(*args_, **kwargs_)
        else:
            return Rma(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reason(self): return self.Reason
    def set_Reason(self, Reason): self.Reason = Reason
    def hasContent_(self):
        if (
            self.Reason is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Rma', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Rma')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Rma')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Rma', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Rma'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Rma', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Reason>%s</ns:Reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reason':
            Reason_ = child_.text
            Reason_ = self.gds_validate_string(Reason_, node, 'Reason')
            self.Reason = Reason_
# end class Rma


class ShipmentAssemblyDetail(GeneratedsSuper):
    """Specification for assembly performed on shipment."""
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None):
        self.original_tagname_ = None
        self.PieceCount = PieceCount
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentAssemblyDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentAssemblyDetail.subclass:
            return ShipmentAssemblyDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAssemblyDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PieceCount(self): return self.PieceCount
    def set_PieceCount(self, PieceCount): self.PieceCount = PieceCount
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentAssemblyDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentAssemblyDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentAssemblyDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentAssemblyDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentAssemblyDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentAssemblyDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PieceCount>%s</ns:PieceCount>%s' % (self.gds_format_integer(self.PieceCount, input_name='PieceCount'), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PieceCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class ShipmentAssemblyDetail


class ShipmentDryIceDetail(GeneratedsSuper):
    """Shipment-level totals of dry ice data across all packages."""
    subclass = None
    superclass = None
    def __init__(self, PackageCount=None, TotalWeight=None, ProcessingOptions=None):
        self.original_tagname_ = None
        self.PackageCount = PackageCount
        self.TotalWeight = TotalWeight
        self.ProcessingOptions = ProcessingOptions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceDetail.subclass:
            return ShipmentDryIceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageCount(self): return self.PackageCount
    def set_PackageCount(self, PackageCount): self.PackageCount = PackageCount
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_ProcessingOptions(self): return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions): self.ProcessingOptions = ProcessingOptions
    def hasContent_(self):
        if (
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.ProcessingOptions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentDryIceDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentDryIceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentDryIceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentDryIceDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentDryIceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PackageCount>%s</ns:PackageCount>%s' % (self.gds_format_integer(self.PackageCount, input_name='PackageCount'), eol_))
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            self.ProcessingOptions.export(outfile, level, namespace_, name_='ProcessingOptions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = ShipmentDryIceProcessingOptionsRequested.factory()
            obj_.build(child_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
# end class ShipmentDryIceDetail


class ShipmentDryIceProcessingOptionsRequested(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Options=None):
        self.original_tagname_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceProcessingOptionsRequested.subclass:
            return ShipmentDryIceProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options_at(self, index, value): self.Options.insert(index, value)
    def replace_Options_at(self, index, value): self.Options[index] = value
    def validate_ShipmentDryIceProcessingOptionType(self, value):
        # Validate type ShipmentDryIceProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['SHIPMENT_LEVEL_DRY_ICE_ONLY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipmentDryIceProcessingOptionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentDryIceProcessingOptionsRequested', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentDryIceProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentDryIceProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentDryIceProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Options>%s</ns:Options>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Options':
            Options_ = child_.text
            Options_ = self.gds_validate_string(Options_, node, 'Options')
            self.Options.append(Options_)
            # validate type ShipmentDryIceProcessingOptionType
            self.validate_ShipmentDryIceProcessingOptionType(self.Options[-1])
# end class ShipmentDryIceProcessingOptionsRequested


class ShipmentEventNotificationDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, EventNotifications=None):
        self.original_tagname_ = None
        self.AggregationType = AggregationType
        self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        self.PersonalMessage = PersonalMessage
        if EventNotifications is None:
            self.EventNotifications = []
        else:
            self.EventNotifications = EventNotifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationDetail.subclass:
            return ShipmentEventNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AggregationType(self): return self.AggregationType
    def set_AggregationType(self, AggregationType): self.AggregationType = AggregationType
    def get_PersonalMessage(self): return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage): self.PersonalMessage = PersonalMessage
    def get_EventNotifications(self): return self.EventNotifications
    def set_EventNotifications(self, EventNotifications): self.EventNotifications = EventNotifications
    def add_EventNotifications(self, value): self.EventNotifications.append(value)
    def insert_EventNotifications_at(self, index, value): self.EventNotifications.insert(index, value)
    def replace_EventNotifications_at(self, index, value): self.EventNotifications[index] = value
    def validate_ShipmentNotificationAggregationType(self, value):
        # Validate type ShipmentNotificationAggregationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PER_PACKAGE', 'PER_SHIPMENT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipmentNotificationAggregationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.EventNotifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentEventNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentEventNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentEventNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:AggregationType>%s</ns:AggregationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AggregationType), input_name='AggregationType')), eol_))
        if self.PersonalMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PersonalMessage>%s</ns:PersonalMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), eol_))
        for EventNotifications_ in self.EventNotifications:
            EventNotifications_.export(outfile, level, namespace_, name_='EventNotifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AggregationType':
            AggregationType_ = child_.text
            AggregationType_ = self.gds_validate_string(AggregationType_, node, 'AggregationType')
            self.AggregationType = AggregationType_
            # validate type ShipmentNotificationAggregationType
            self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        elif nodeName_ == 'PersonalMessage':
            PersonalMessage_ = child_.text
            PersonalMessage_ = self.gds_validate_string(PersonalMessage_, node, 'PersonalMessage')
            self.PersonalMessage = PersonalMessage_
        elif nodeName_ == 'EventNotifications':
            obj_ = ShipmentEventNotificationSpecification.factory()
            obj_.build(child_)
            self.EventNotifications.append(obj_)
            obj_.original_tagname_ = 'EventNotifications'
# end class ShipmentEventNotificationDetail


class ShipmentEventNotificationSpecification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Role=None, Events=None, NotificationDetail=None, FormatSpecification=None):
        self.original_tagname_ = None
        self.Role = Role
        self.validate_ShipmentNotificationRoleType(self.Role)
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.NotificationDetail = NotificationDetail
        self.FormatSpecification = FormatSpecification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationSpecification.subclass:
            return ShipmentEventNotificationSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Role(self): return self.Role
    def set_Role(self, Role): self.Role = Role
    def get_Events(self): return self.Events
    def set_Events(self, Events): self.Events = Events
    def add_Events(self, value): self.Events.append(value)
    def insert_Events_at(self, index, value): self.Events.insert(index, value)
    def replace_Events_at(self, index, value): self.Events[index] = value
    def get_NotificationDetail(self): return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail): self.NotificationDetail = NotificationDetail
    def get_FormatSpecification(self): return self.FormatSpecification
    def set_FormatSpecification(self, FormatSpecification): self.FormatSpecification = FormatSpecification
    def validate_ShipmentNotificationRoleType(self, value):
        # Validate type ShipmentNotificationRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipmentNotificationRoleType' % {"value" : value.encode("utf-8")} )
    def validate_NotificationEventType(self, value):
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_SHIPMENT', 'ON_TENDER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationEventType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Role is not None or
            self.Events or
            self.NotificationDetail is not None or
            self.FormatSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationSpecification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentEventNotificationSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentEventNotificationSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentEventNotificationSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentEventNotificationSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Role>%s</ns:Role>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), eol_))
        for Events_ in self.Events:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Events>%s</ns:Events>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Events_), input_name='Events')), eol_))
        if self.NotificationDetail is not None:
            self.NotificationDetail.export(outfile, level, namespace_, name_='NotificationDetail', pretty_print=pretty_print)
        if self.FormatSpecification is not None:
            self.FormatSpecification.export(outfile, level, namespace_, name_='FormatSpecification', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Role':
            Role_ = child_.text
            Role_ = self.gds_validate_string(Role_, node, 'Role')
            self.Role = Role_
            # validate type ShipmentNotificationRoleType
            self.validate_ShipmentNotificationRoleType(self.Role)
        elif nodeName_ == 'Events':
            Events_ = child_.text
            Events_ = self.gds_validate_string(Events_, node, 'Events')
            self.Events.append(Events_)
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.Events[-1])
        elif nodeName_ == 'NotificationDetail':
            obj_ = NotificationDetail.factory()
            obj_.build(child_)
            self.NotificationDetail = obj_
            obj_.original_tagname_ = 'NotificationDetail'
        elif nodeName_ == 'FormatSpecification':
            obj_ = ShipmentNotificationFormatSpecification.factory()
            obj_.build(child_)
            self.FormatSpecification = obj_
            obj_.original_tagname_ = 'FormatSpecification'
# end class ShipmentEventNotificationSpecification


class ShipmentNotificationFormatSpecification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_NotificationFormatType(self.Type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentNotificationFormatSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentNotificationFormatSpecification.subclass:
            return ShipmentNotificationFormatSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentNotificationFormatSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_NotificationFormatType(self, value):
        # Validate type NotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['HTML', 'TEXT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NotificationFormatType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentNotificationFormatSpecification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentNotificationFormatSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentNotificationFormatSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentNotificationFormatSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentNotificationFormatSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentNotificationFormatSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type NotificationFormatType
            self.validate_NotificationFormatType(self.Type)
# end class ShipmentNotificationFormatSpecification


class ShipmentSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the shipment level for some
    or all service types. If the shipper is requesting a special
    service which requires additional data (such as the COD amount),
    the shipment special service type must be present in the
    specialServiceTypes collection, and the supporting detail must
    be provided in the appropriate sub-object below."""
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, DeliveryOnInvoiceAcceptanceDetail=None, HoldAtLocationDetail=None, EventNotificationDetail=None, ReturnShipmentDetail=None, PendingShipmentDetail=None, InternationalControlledExportDetail=None, InternationalTrafficInArmsRegulationsDetail=None, ShipmentDryIceDetail=None, HomeDeliveryPremiumDetail=None, FlatbedTrailerDetail=None, FreightGuaranteeDetail=None, EtdDetail=None, ExtraLaborDetail=None, PalletShrinkwrapDetail=None, PalletsProvidedDetail=None, DetentionDetail=None, MarkingOrTaggingDetail=None, NonBusinessTimeDetail=None, ShipmentAssemblyDetail=None, SortAndSegregateDetail=None, SpecialEquipmentDetail=None, StorageDetail=None, WeighingDetail=None, CustomDeliveryWindowDetail=None):
        self.original_tagname_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.CodDetail = CodDetail
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
        self.HoldAtLocationDetail = HoldAtLocationDetail
        self.EventNotificationDetail = EventNotificationDetail
        self.ReturnShipmentDetail = ReturnShipmentDetail
        self.PendingShipmentDetail = PendingShipmentDetail
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
        self.FlatbedTrailerDetail = FlatbedTrailerDetail
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
        self.EtdDetail = EtdDetail
        self.ExtraLaborDetail = ExtraLaborDetail
        self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
        self.PalletsProvidedDetail = PalletsProvidedDetail
        self.DetentionDetail = DetentionDetail
        self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
        self.NonBusinessTimeDetail = NonBusinessTimeDetail
        self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
        self.SortAndSegregateDetail = SortAndSegregateDetail
        self.SpecialEquipmentDetail = SpecialEquipmentDetail
        self.StorageDetail = StorageDetail
        self.WeighingDetail = WeighingDetail
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSpecialServicesRequested.subclass:
            return ShipmentSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialServiceTypes(self): return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes): self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value): self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value): self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value): self.SpecialServiceTypes[index] = value
    def get_CodDetail(self): return self.CodDetail
    def set_CodDetail(self, CodDetail): self.CodDetail = CodDetail
    def get_DeliveryOnInvoiceAcceptanceDetail(self): return self.DeliveryOnInvoiceAcceptanceDetail
    def set_DeliveryOnInvoiceAcceptanceDetail(self, DeliveryOnInvoiceAcceptanceDetail): self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
    def get_HoldAtLocationDetail(self): return self.HoldAtLocationDetail
    def set_HoldAtLocationDetail(self, HoldAtLocationDetail): self.HoldAtLocationDetail = HoldAtLocationDetail
    def get_EventNotificationDetail(self): return self.EventNotificationDetail
    def set_EventNotificationDetail(self, EventNotificationDetail): self.EventNotificationDetail = EventNotificationDetail
    def get_ReturnShipmentDetail(self): return self.ReturnShipmentDetail
    def set_ReturnShipmentDetail(self, ReturnShipmentDetail): self.ReturnShipmentDetail = ReturnShipmentDetail
    def get_PendingShipmentDetail(self): return self.PendingShipmentDetail
    def set_PendingShipmentDetail(self, PendingShipmentDetail): self.PendingShipmentDetail = PendingShipmentDetail
    def get_InternationalControlledExportDetail(self): return self.InternationalControlledExportDetail
    def set_InternationalControlledExportDetail(self, InternationalControlledExportDetail): self.InternationalControlledExportDetail = InternationalControlledExportDetail
    def get_InternationalTrafficInArmsRegulationsDetail(self): return self.InternationalTrafficInArmsRegulationsDetail
    def set_InternationalTrafficInArmsRegulationsDetail(self, InternationalTrafficInArmsRegulationsDetail): self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
    def get_ShipmentDryIceDetail(self): return self.ShipmentDryIceDetail
    def set_ShipmentDryIceDetail(self, ShipmentDryIceDetail): self.ShipmentDryIceDetail = ShipmentDryIceDetail
    def get_HomeDeliveryPremiumDetail(self): return self.HomeDeliveryPremiumDetail
    def set_HomeDeliveryPremiumDetail(self, HomeDeliveryPremiumDetail): self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
    def get_FlatbedTrailerDetail(self): return self.FlatbedTrailerDetail
    def set_FlatbedTrailerDetail(self, FlatbedTrailerDetail): self.FlatbedTrailerDetail = FlatbedTrailerDetail
    def get_FreightGuaranteeDetail(self): return self.FreightGuaranteeDetail
    def set_FreightGuaranteeDetail(self, FreightGuaranteeDetail): self.FreightGuaranteeDetail = FreightGuaranteeDetail
    def get_EtdDetail(self): return self.EtdDetail
    def set_EtdDetail(self, EtdDetail): self.EtdDetail = EtdDetail
    def get_ExtraLaborDetail(self): return self.ExtraLaborDetail
    def set_ExtraLaborDetail(self, ExtraLaborDetail): self.ExtraLaborDetail = ExtraLaborDetail
    def get_PalletShrinkwrapDetail(self): return self.PalletShrinkwrapDetail
    def set_PalletShrinkwrapDetail(self, PalletShrinkwrapDetail): self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
    def get_PalletsProvidedDetail(self): return self.PalletsProvidedDetail
    def set_PalletsProvidedDetail(self, PalletsProvidedDetail): self.PalletsProvidedDetail = PalletsProvidedDetail
    def get_DetentionDetail(self): return self.DetentionDetail
    def set_DetentionDetail(self, DetentionDetail): self.DetentionDetail = DetentionDetail
    def get_MarkingOrTaggingDetail(self): return self.MarkingOrTaggingDetail
    def set_MarkingOrTaggingDetail(self, MarkingOrTaggingDetail): self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
    def get_NonBusinessTimeDetail(self): return self.NonBusinessTimeDetail
    def set_NonBusinessTimeDetail(self, NonBusinessTimeDetail): self.NonBusinessTimeDetail = NonBusinessTimeDetail
    def get_ShipmentAssemblyDetail(self): return self.ShipmentAssemblyDetail
    def set_ShipmentAssemblyDetail(self, ShipmentAssemblyDetail): self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
    def get_SortAndSegregateDetail(self): return self.SortAndSegregateDetail
    def set_SortAndSegregateDetail(self, SortAndSegregateDetail): self.SortAndSegregateDetail = SortAndSegregateDetail
    def get_SpecialEquipmentDetail(self): return self.SpecialEquipmentDetail
    def set_SpecialEquipmentDetail(self, SpecialEquipmentDetail): self.SpecialEquipmentDetail = SpecialEquipmentDetail
    def get_StorageDetail(self): return self.StorageDetail
    def set_StorageDetail(self, StorageDetail): self.StorageDetail = StorageDetail
    def get_WeighingDetail(self): return self.WeighingDetail
    def set_WeighingDetail(self, WeighingDetail): self.WeighingDetail = WeighingDetail
    def get_CustomDeliveryWindowDetail(self): return self.CustomDeliveryWindowDetail
    def set_CustomDeliveryWindowDetail(self, CustomDeliveryWindowDetail): self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def validate_ShipmentSpecialServiceType(self, value):
        # Validate type ShipmentSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BLIND_SHIPMENT', 'BROKER_SELECT_OPTION', 'CALL_BEFORE_DELIVERY', 'COD', 'COD_REMITTANCE', 'CUSTOM_DELIVERY_WINDOW', 'CUT_FLOWERS', 'DANGEROUS_GOODS', 'DELIVERY_ON_INVOICE_ACCEPTANCE', 'DETENTION', 'DO_NOT_BREAK_DOWN_PALLETS', 'DO_NOT_STACK_PALLETS', 'DRY_ICE', 'EAST_COAST_SPECIAL', 'ELECTRONIC_TRADE_DOCUMENTS', 'EVENT_NOTIFICATION', 'EXCLUDE_FROM_CONSOLIDATION', 'EXCLUSIVE_USE', 'EXHIBITION_DELIVERY', 'EXHIBITION_PICKUP', 'EXPEDITED_ALTERNATE_DELIVERY_ROUTE', 'EXPEDITED_ONE_DAY_EARLIER', 'EXPEDITED_SERVICE_MONITORING_AND_DELIVERY', 'EXPEDITED_STANDARD_DAY_EARLY_DELIVERY', 'EXTRA_LABOR', 'EXTREME_LENGTH', 'FEDEX_ONE_RATE', 'FLATBED_TRAILER', 'FOOD', 'FREIGHT_GUARANTEE', 'FREIGHT_TO_COLLECT', 'FUTURE_DAY_SHIPMENT', 'HOLD_AT_LOCATION', 'HOLIDAY_DELIVERY', 'HOLIDAY_GUARANTEE', 'HOME_DELIVERY_PREMIUM', 'INSIDE_DELIVERY', 'INSIDE_PICKUP', 'INTERNATIONAL_CONTROLLED_EXPORT_SERVICE', 'INTERNATIONAL_MAIL_SERVICE', 'INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS', 'LIFTGATE_DELIVERY', 'LIFTGATE_PICKUP', 'LIMITED_ACCESS_DELIVERY', 'LIMITED_ACCESS_PICKUP', 'MARKING_OR_TAGGING', 'NON_BUSINESS_TIME', 'PALLETS_PROVIDED', 'PALLET_SHRINKWRAP', 'PALLET_WEIGHT_ALLOWANCE', 'PENDING_COMPLETE', 'PENDING_SHIPMENT', 'PERMIT', 'PHARMACY_DELIVERY', 'POISON', 'PORT_DELIVERY', 'PORT_PICKUP', 'PRE_DELIVERY_NOTIFICATION', 'PRE_EIG_PROCESSING', 'PRE_MULTIPLIER_PROCESSING', 'PROTECTION_FROM_FREEZING', 'REGIONAL_MALL_DELIVERY', 'REGIONAL_MALL_PICKUP', 'RETURNS_CLEARANCE', 'RETURNS_CLEARANCE_SPECIAL_ROUTING_REQUIRED', 'RETURN_SHIPMENT', 'SATURDAY_DELIVERY', 'SATURDAY_PICKUP', 'SHIPMENT_ASSEMBLY', 'SORT_AND_SEGREGATE', 'SPECIAL_DELIVERY', 'SPECIAL_EQUIPMENT', 'STORAGE', 'SUNDAY_DELIVERY', 'THIRD_PARTY_CONSIGNEE', 'TOP_LOAD', 'USPS_DELIVERY', 'USPS_PICKUP', 'WEIGHING']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ShipmentSpecialServiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.DeliveryOnInvoiceAcceptanceDetail is not None or
            self.HoldAtLocationDetail is not None or
            self.EventNotificationDetail is not None or
            self.ReturnShipmentDetail is not None or
            self.PendingShipmentDetail is not None or
            self.InternationalControlledExportDetail is not None or
            self.InternationalTrafficInArmsRegulationsDetail is not None or
            self.ShipmentDryIceDetail is not None or
            self.HomeDeliveryPremiumDetail is not None or
            self.FlatbedTrailerDetail is not None or
            self.FreightGuaranteeDetail is not None or
            self.EtdDetail is not None or
            self.ExtraLaborDetail is not None or
            self.PalletShrinkwrapDetail is not None or
            self.PalletsProvidedDetail is not None or
            self.DetentionDetail is not None or
            self.MarkingOrTaggingDetail is not None or
            self.NonBusinessTimeDetail is not None or
            self.ShipmentAssemblyDetail is not None or
            self.SortAndSegregateDetail is not None or
            self.SpecialEquipmentDetail is not None or
            self.StorageDetail is not None or
            self.WeighingDetail is not None or
            self.CustomDeliveryWindowDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentSpecialServicesRequested', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='ShipmentSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:SpecialServiceTypes>%s</ns:SpecialServiceTypes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), eol_))
        if self.CodDetail is not None:
            self.CodDetail.export(outfile, level, namespace_, name_='CodDetail', pretty_print=pretty_print)
        if self.DeliveryOnInvoiceAcceptanceDetail is not None:
            self.DeliveryOnInvoiceAcceptanceDetail.export(outfile, level, namespace_, name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
        if self.HoldAtLocationDetail is not None:
            self.HoldAtLocationDetail.export(outfile, level, namespace_, name_='HoldAtLocationDetail', pretty_print=pretty_print)
        if self.EventNotificationDetail is not None:
            self.EventNotificationDetail.export(outfile, level, namespace_, name_='EventNotificationDetail', pretty_print=pretty_print)
        if self.ReturnShipmentDetail is not None:
            self.ReturnShipmentDetail.export(outfile, level, namespace_, name_='ReturnShipmentDetail', pretty_print=pretty_print)
        if self.PendingShipmentDetail is not None:
            self.PendingShipmentDetail.export(outfile, level, namespace_, name_='PendingShipmentDetail', pretty_print=pretty_print)
        if self.InternationalControlledExportDetail is not None:
            self.InternationalControlledExportDetail.export(outfile, level, namespace_, name_='InternationalControlledExportDetail', pretty_print=pretty_print)
        if self.InternationalTrafficInArmsRegulationsDetail is not None:
            self.InternationalTrafficInArmsRegulationsDetail.export(outfile, level, namespace_, name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
        if self.ShipmentDryIceDetail is not None:
            self.ShipmentDryIceDetail.export(outfile, level, namespace_, name_='ShipmentDryIceDetail', pretty_print=pretty_print)
        if self.HomeDeliveryPremiumDetail is not None:
            self.HomeDeliveryPremiumDetail.export(outfile, level, namespace_, name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
        if self.FlatbedTrailerDetail is not None:
            self.FlatbedTrailerDetail.export(outfile, level, namespace_, name_='FlatbedTrailerDetail', pretty_print=pretty_print)
        if self.FreightGuaranteeDetail is not None:
            self.FreightGuaranteeDetail.export(outfile, level, namespace_, name_='FreightGuaranteeDetail', pretty_print=pretty_print)
        if self.EtdDetail is not None:
            self.EtdDetail.export(outfile, level, namespace_, name_='EtdDetail', pretty_print=pretty_print)
        if self.ExtraLaborDetail is not None:
            self.ExtraLaborDetail.export(outfile, level, namespace_, name_='ExtraLaborDetail', pretty_print=pretty_print)
        if self.PalletShrinkwrapDetail is not None:
            self.PalletShrinkwrapDetail.export(outfile, level, namespace_, name_='PalletShrinkwrapDetail', pretty_print=pretty_print)
        if self.PalletsProvidedDetail is not None:
            self.PalletsProvidedDetail.export(outfile, level, namespace_, name_='PalletsProvidedDetail', pretty_print=pretty_print)
        if self.DetentionDetail is not None:
            self.DetentionDetail.export(outfile, level, namespace_, name_='DetentionDetail', pretty_print=pretty_print)
        if self.MarkingOrTaggingDetail is not None:
            self.MarkingOrTaggingDetail.export(outfile, level, namespace_, name_='MarkingOrTaggingDetail', pretty_print=pretty_print)
        if self.NonBusinessTimeDetail is not None:
            self.NonBusinessTimeDetail.export(outfile, level, namespace_, name_='NonBusinessTimeDetail', pretty_print=pretty_print)
        if self.ShipmentAssemblyDetail is not None:
            self.ShipmentAssemblyDetail.export(outfile, level, namespace_, name_='ShipmentAssemblyDetail', pretty_print=pretty_print)
        if self.SortAndSegregateDetail is not None:
            self.SortAndSegregateDetail.export(outfile, level, namespace_, name_='SortAndSegregateDetail', pretty_print=pretty_print)
        if self.SpecialEquipmentDetail is not None:
            self.SpecialEquipmentDetail.export(outfile, level, namespace_, name_='SpecialEquipmentDetail', pretty_print=pretty_print)
        if self.StorageDetail is not None:
            self.StorageDetail.export(outfile, level, namespace_, name_='StorageDetail', pretty_print=pretty_print)
        if self.WeighingDetail is not None:
            self.WeighingDetail.export(outfile, level, namespace_, name_='WeighingDetail', pretty_print=pretty_print)
        if self.CustomDeliveryWindowDetail is not None:
            self.CustomDeliveryWindowDetail.export(outfile, level, namespace_, name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialServiceTypes':
            SpecialServiceTypes_ = child_.text
            SpecialServiceTypes_ = self.gds_validate_string(SpecialServiceTypes_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(SpecialServiceTypes_)
            # validate type ShipmentSpecialServiceType
            self.validate_ShipmentSpecialServiceType(self.SpecialServiceTypes[-1])
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory()
            obj_.build(child_)
            self.CodDetail = obj_
            obj_.original_tagname_ = 'CodDetail'
        elif nodeName_ == 'DeliveryOnInvoiceAcceptanceDetail':
            obj_ = DeliveryOnInvoiceAcceptanceDetail.factory()
            obj_.build(child_)
            self.DeliveryOnInvoiceAcceptanceDetail = obj_
            obj_.original_tagname_ = 'DeliveryOnInvoiceAcceptanceDetail'
        elif nodeName_ == 'HoldAtLocationDetail':
            obj_ = HoldAtLocationDetail.factory()
            obj_.build(child_)
            self.HoldAtLocationDetail = obj_
            obj_.original_tagname_ = 'HoldAtLocationDetail'
        elif nodeName_ == 'EventNotificationDetail':
            obj_ = ShipmentEventNotificationDetail.factory()
            obj_.build(child_)
            self.EventNotificationDetail = obj_
            obj_.original_tagname_ = 'EventNotificationDetail'
        elif nodeName_ == 'ReturnShipmentDetail':
            obj_ = ReturnShipmentDetail.factory()
            obj_.build(child_)
            self.ReturnShipmentDetail = obj_
            obj_.original_tagname_ = 'ReturnShipmentDetail'
        elif nodeName_ == 'PendingShipmentDetail':
            obj_ = PendingShipmentDetail.factory()
            obj_.build(child_)
            self.PendingShipmentDetail = obj_
            obj_.original_tagname_ = 'PendingShipmentDetail'
        elif nodeName_ == 'InternationalControlledExportDetail':
            obj_ = InternationalControlledExportDetail.factory()
            obj_.build(child_)
            self.InternationalControlledExportDetail = obj_
            obj_.original_tagname_ = 'InternationalControlledExportDetail'
        elif nodeName_ == 'InternationalTrafficInArmsRegulationsDetail':
            obj_ = InternationalTrafficInArmsRegulationsDetail.factory()
            obj_.build(child_)
            self.InternationalTrafficInArmsRegulationsDetail = obj_
            obj_.original_tagname_ = 'InternationalTrafficInArmsRegulationsDetail'
        elif nodeName_ == 'ShipmentDryIceDetail':
            obj_ = ShipmentDryIceDetail.factory()
            obj_.build(child_)
            self.ShipmentDryIceDetail = obj_
            obj_.original_tagname_ = 'ShipmentDryIceDetail'
        elif nodeName_ == 'HomeDeliveryPremiumDetail':
            obj_ = HomeDeliveryPremiumDetail.factory()
            obj_.build(child_)
            self.HomeDeliveryPremiumDetail = obj_
            obj_.original_tagname_ = 'HomeDeliveryPremiumDetail'
        elif nodeName_ == 'FlatbedTrailerDetail':
            obj_ = FlatbedTrailerDetail.factory()
            obj_.build(child_)
            self.FlatbedTrailerDetail = obj_
            obj_.original_tagname_ = 'FlatbedTrailerDetail'
        elif nodeName_ == 'FreightGuaranteeDetail':
            obj_ = FreightGuaranteeDetail.factory()
            obj_.build(child_)
            self.FreightGuaranteeDetail = obj_
            obj_.original_tagname_ = 'FreightGuaranteeDetail'
        elif nodeName_ == 'EtdDetail':
            obj_ = EtdDetail.factory()
            obj_.build(child_)
            self.EtdDetail = obj_
            obj_.original_tagname_ = 'EtdDetail'
        elif nodeName_ == 'ExtraLaborDetail':
            obj_ = ExtraLaborDetail.factory()
            obj_.build(child_)
            self.ExtraLaborDetail = obj_
            obj_.original_tagname_ = 'ExtraLaborDetail'
        elif nodeName_ == 'PalletShrinkwrapDetail':
            obj_ = PalletShrinkwrapDetail.factory()
            obj_.build(child_)
            self.PalletShrinkwrapDetail = obj_
            obj_.original_tagname_ = 'PalletShrinkwrapDetail'
        elif nodeName_ == 'PalletsProvidedDetail':
            obj_ = PalletsProvidedDetail.factory()
            obj_.build(child_)
            self.PalletsProvidedDetail = obj_
            obj_.original_tagname_ = 'PalletsProvidedDetail'
        elif nodeName_ == 'DetentionDetail':
            obj_ = DetentionDetail.factory()
            obj_.build(child_)
            self.DetentionDetail = obj_
            obj_.original_tagname_ = 'DetentionDetail'
        elif nodeName_ == 'MarkingOrTaggingDetail':
            obj_ = MarkingOrTaggingDetail.factory()
            obj_.build(child_)
            self.MarkingOrTaggingDetail = obj_
            obj_.original_tagname_ = 'MarkingOrTaggingDetail'
        elif nodeName_ == 'NonBusinessTimeDetail':
            obj_ = NonBusinessTimeDetail.factory()
            obj_.build(child_)
            self.NonBusinessTimeDetail = obj_
            obj_.original_tagname_ = 'NonBusinessTimeDetail'
        elif nodeName_ == 'ShipmentAssemblyDetail':
            obj_ = ShipmentAssemblyDetail.factory()
            obj_.build(child_)
            self.ShipmentAssemblyDetail = obj_
            obj_.original_tagname_ = 'ShipmentAssemblyDetail'
        elif nodeName_ == 'SortAndSegregateDetail':
            obj_ = SortAndSegregateDetail.factory()
            obj_.build(child_)
            self.SortAndSegregateDetail = obj_
            obj_.original_tagname_ = 'SortAndSegregateDetail'
        elif nodeName_ == 'SpecialEquipmentDetail':
            obj_ = SpecialEquipmentDetail.factory()
            obj_.build(child_)
            self.SpecialEquipmentDetail = obj_
            obj_.original_tagname_ = 'SpecialEquipmentDetail'
        elif nodeName_ == 'StorageDetail':
            obj_ = StorageDetail.factory()
            obj_.build(child_)
            self.StorageDetail = obj_
            obj_.original_tagname_ = 'StorageDetail'
        elif nodeName_ == 'WeighingDetail':
            obj_ = WeighingDetail.factory()
            obj_.build(child_)
            self.WeighingDetail = obj_
            obj_.original_tagname_ = 'WeighingDetail'
        elif nodeName_ == 'CustomDeliveryWindowDetail':
            obj_ = CustomDeliveryWindowDetail.factory()
            obj_.build(child_)
            self.CustomDeliveryWindowDetail = obj_
            obj_.original_tagname_ = 'CustomDeliveryWindowDetail'
# end class ShipmentSpecialServicesRequested


class SmsDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, PhoneNumberCountryCode=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumberCountryCode = PhoneNumberCountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmsDetail.subclass:
            return SmsDetail.subclass(*args_, **kwargs_)
        else:
            return SmsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneNumberCountryCode(self): return self.PhoneNumberCountryCode
    def set_PhoneNumberCountryCode(self, PhoneNumberCountryCode): self.PhoneNumberCountryCode = PhoneNumberCountryCode
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.PhoneNumberCountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SmsDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SmsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SmsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SmsDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SmsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumber>%s</ns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.PhoneNumberCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PhoneNumberCountryCode>%s</ns:PhoneNumberCountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumberCountryCode), input_name='PhoneNumberCountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneNumberCountryCode':
            PhoneNumberCountryCode_ = child_.text
            PhoneNumberCountryCode_ = self.gds_validate_string(PhoneNumberCountryCode_, node, 'PhoneNumberCountryCode')
            self.PhoneNumberCountryCode = PhoneNumberCountryCode_
# end class SmsDetail


class SortAndSegregateDetail(GeneratedsSuper):
    """Specification for sorting and/or segregating performed on shipment."""
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None):
        self.original_tagname_ = None
        self.PieceCount = PieceCount
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortAndSegregateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortAndSegregateDetail.subclass:
            return SortAndSegregateDetail.subclass(*args_, **kwargs_)
        else:
            return SortAndSegregateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PieceCount(self): return self.PieceCount
    def set_PieceCount(self, PieceCount): self.PieceCount = PieceCount
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SortAndSegregateDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortAndSegregateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SortAndSegregateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SortAndSegregateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SortAndSegregateDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SortAndSegregateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:PieceCount>%s</ns:PieceCount>%s' % (self.gds_format_integer(self.PieceCount, input_name='PieceCount'), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PieceCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class SortAndSegregateDetail


class SpecialEquipmentDetail(GeneratedsSuper):
    """Specification for special equipment used in loading/unloading
    shipment."""
    subclass = None
    superclass = None
    def __init__(self, LineItems=None):
        self.original_tagname_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialEquipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialEquipmentDetail.subclass:
            return SpecialEquipmentDetail.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def add_LineItems(self, value): self.LineItems.append(value)
    def insert_LineItems_at(self, index, value): self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value): self.LineItems[index] = value
    def hasContent_(self):
        if (
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialEquipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialEquipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SpecialEquipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SpecialEquipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LineItems_ in self.LineItems:
            LineItems_.export(outfile, level, namespace_, name_='LineItems', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineItems':
            obj_ = SpecialEquipmentLineItem.factory()
            obj_.build(child_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class SpecialEquipmentDetail


class SpecialEquipmentLineItem(GeneratedsSuper):
    """Specifies the usage of a single type of special equipment while
    loading/unloading a shipment"""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Duration=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_SpecialEquipmentType(self.Type)
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialEquipmentLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialEquipmentLineItem.subclass:
            return SpecialEquipmentLineItem.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def validate_SpecialEquipmentType(self, value):
        # Validate type SpecialEquipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FORK_LIFT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SpecialEquipmentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentLineItem', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialEquipmentLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialEquipmentLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='SpecialEquipmentLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SpecialEquipmentLineItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Duration>%s</ns:Duration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type SpecialEquipmentType
            self.validate_SpecialEquipmentType(self.Type)
        elif nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class SpecialEquipmentLineItem


class StorageDetail(GeneratedsSuper):
    """Specification for storage provided for shipment."""
    subclass = None
    superclass = None
    def __init__(self, Duration=None):
        self.original_tagname_ = None
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StorageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StorageDetail.subclass:
            return StorageDetail.subclass(*args_, **kwargs_)
        else:
            return StorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='StorageDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StorageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StorageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='StorageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='StorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='StorageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Duration>%s</ns:Duration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class StorageDetail


class TaxpayerIdentification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TinType=None, Number=None, Usage=None, EffectiveDate=None, ExpirationDate=None):
        self.original_tagname_ = None
        self.TinType = TinType
        self.validate_TinType(self.TinType)
        self.Number = Number
        self.Usage = Usage
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxpayerIdentification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxpayerIdentification.subclass:
            return TaxpayerIdentification.subclass(*args_, **kwargs_)
        else:
            return TaxpayerIdentification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TinType(self): return self.TinType
    def set_TinType(self, TinType): self.TinType = TinType
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Usage(self): return self.Usage
    def set_Usage(self, Usage): self.Usage = Usage
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def validate_TinType(self, value):
        # Validate type TinType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['BUSINESS_NATIONAL', 'BUSINESS_STATE', 'BUSINESS_UNION', 'PERSONAL_NATIONAL', 'PERSONAL_STATE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TinType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TinType is not None or
            self.Number is not None or
            self.Usage is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TaxpayerIdentification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxpayerIdentification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxpayerIdentification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TaxpayerIdentification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TaxpayerIdentification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TaxpayerIdentification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TinType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TinType>%s</ns:TinType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TinType), input_name='TinType')), eol_))
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Number>%s</ns:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Usage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Usage>%s</ns:Usage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Usage), input_name='Usage')), eol_))
        if self.EffectiveDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:EffectiveDate>%s</ns:EffectiveDate>%s' % (self.gds_format_datetime(self.EffectiveDate, input_name='EffectiveDate'), eol_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ExpirationDate>%s</ns:ExpirationDate>%s' % (self.gds_format_datetime(self.ExpirationDate, input_name='ExpirationDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TinType':
            TinType_ = child_.text
            TinType_ = self.gds_validate_string(TinType_, node, 'TinType')
            self.TinType = TinType_
            # validate type TinType
            self.validate_TinType(self.TinType)
        elif nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Usage':
            Usage_ = child_.text
            Usage_ = self.gds_validate_string(Usage_, node, 'Usage')
            self.Usage = Usage_
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EffectiveDate = dval_
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ExpirationDate = dval_
# end class TaxpayerIdentification


class TrackingId(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingIdType=None, FormId=None, UspsApplicationId=None, TrackingNumber=None):
        self.original_tagname_ = None
        self.TrackingIdType = TrackingIdType
        self.validate_TrackingIdType(self.TrackingIdType)
        self.FormId = FormId
        self.UspsApplicationId = UspsApplicationId
        self.TrackingNumber = TrackingNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingId.subclass:
            return TrackingId.subclass(*args_, **kwargs_)
        else:
            return TrackingId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingIdType(self): return self.TrackingIdType
    def set_TrackingIdType(self, TrackingIdType): self.TrackingIdType = TrackingIdType
    def get_FormId(self): return self.FormId
    def set_FormId(self, FormId): self.FormId = FormId
    def get_UspsApplicationId(self): return self.UspsApplicationId
    def set_UspsApplicationId(self, UspsApplicationId): self.UspsApplicationId = UspsApplicationId
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def validate_TrackingIdType(self, value):
        # Validate type TrackingIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EXPRESS', 'FEDEX', 'FREIGHT', 'GROUND', 'USPS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TrackingIdType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TrackingIdType is not None or
            self.FormId is not None or
            self.UspsApplicationId is not None or
            self.TrackingNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TrackingId', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TrackingId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackingId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackingId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingIdType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingIdType>%s</ns:TrackingIdType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingIdType), input_name='TrackingIdType')), eol_))
        if self.FormId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:FormId>%s</ns:FormId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), eol_))
        if self.UspsApplicationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:UspsApplicationId>%s</ns:UspsApplicationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UspsApplicationId), input_name='UspsApplicationId')), eol_))
        if self.TrackingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:TrackingNumber>%s</ns:TrackingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingIdType':
            TrackingIdType_ = child_.text
            TrackingIdType_ = self.gds_validate_string(TrackingIdType_, node, 'TrackingIdType')
            self.TrackingIdType = TrackingIdType_
            # validate type TrackingIdType
            self.validate_TrackingIdType(self.TrackingIdType)
        elif nodeName_ == 'FormId':
            FormId_ = child_.text
            FormId_ = self.gds_validate_string(FormId_, node, 'FormId')
            self.FormId = FormId_
        elif nodeName_ == 'UspsApplicationId':
            UspsApplicationId_ = child_.text
            UspsApplicationId_ = self.gds_validate_string(UspsApplicationId_, node, 'UspsApplicationId')
            self.UspsApplicationId = UspsApplicationId_
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
# end class TrackingId


class TransactionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.original_tagname_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerTransactionId>%s</ns:CustomerTransactionId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), eol_))
        if self.Localization is not None:
            self.Localization.export(outfile, level, namespace_, name_='Localization', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TransactionDetail


class UploadDocumentDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, DocumentProducer=None, DocumentType=None, FileName=None, DocumentContent=None, ExpirationDate=None):
        self.original_tagname_ = None
        self.LineNumber = LineNumber
        self.CustomerReference = CustomerReference
        self.DocumentProducer = DocumentProducer
        self.validate_UploadDocumentProducerType(self.DocumentProducer)
        self.DocumentType = DocumentType
        self.validate_UploadDocumentType(self.DocumentType)
        self.FileName = FileName
        self.DocumentContent = DocumentContent
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UploadDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UploadDocumentDetail.subclass:
            return UploadDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineNumber(self): return self.LineNumber
    def set_LineNumber(self, LineNumber): self.LineNumber = LineNumber
    def get_CustomerReference(self): return self.CustomerReference
    def set_CustomerReference(self, CustomerReference): self.CustomerReference = CustomerReference
    def get_DocumentProducer(self): return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer): self.DocumentProducer = DocumentProducer
    def get_DocumentType(self): return self.DocumentType
    def set_DocumentType(self, DocumentType): self.DocumentType = DocumentType
    def get_FileName(self): return self.FileName
    def set_FileName(self, FileName): self.FileName = FileName
    def get_DocumentContent(self): return self.DocumentContent
    def set_DocumentContent(self, DocumentContent): self.DocumentContent = DocumentContent
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def validate_UploadDocumentProducerType(self, value):
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CLS', 'FEDEX_FIDT', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'OTHER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UploadDocumentProducerType' % {"value" : value.encode("utf-8")} )
    def validate_UploadDocumentType(self, value):
        # Validate type UploadDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'ETD_LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'NET_RATE_SHEET', 'OTHER', 'PRO_FORMA_INVOICE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UploadDocumentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.FileName is not None or
            self.DocumentContent is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='UploadDocumentDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UploadDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UploadDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='UploadDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='UploadDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='UploadDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LineNumber>%s</ns:LineNumber>%s' % (self.gds_format_integer(self.LineNumber, input_name='LineNumber'), eol_))
        if self.CustomerReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerReference>%s</ns:CustomerReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), eol_))
        if self.DocumentProducer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentProducer>%s</ns:DocumentProducer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentProducer), input_name='DocumentProducer')), eol_))
        if self.DocumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentType>%s</ns:DocumentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), eol_))
        if self.FileName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:FileName>%s</ns:FileName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FileName), input_name='FileName')), eol_))
        if self.DocumentContent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentContent>%s</ns:DocumentContent>%s' % (self.gds_format_base64(self.DocumentContent, input_name='DocumentContent'), eol_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ExpirationDate>%s</ns:ExpirationDate>%s' % (self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
        elif nodeName_ == 'CustomerReference':
            CustomerReference_ = child_.text
            CustomerReference_ = self.gds_validate_string(CustomerReference_, node, 'CustomerReference')
            self.CustomerReference = CustomerReference_
        elif nodeName_ == 'DocumentProducer':
            DocumentProducer_ = child_.text
            DocumentProducer_ = self.gds_validate_string(DocumentProducer_, node, 'DocumentProducer')
            self.DocumentProducer = DocumentProducer_
            # validate type UploadDocumentProducerType
            self.validate_UploadDocumentProducerType(self.DocumentProducer)
        elif nodeName_ == 'DocumentType':
            DocumentType_ = child_.text
            DocumentType_ = self.gds_validate_string(DocumentType_, node, 'DocumentType')
            self.DocumentType = DocumentType_
            # validate type UploadDocumentType
            self.validate_UploadDocumentType(self.DocumentType)
        elif nodeName_ == 'FileName':
            FileName_ = child_.text
            FileName_ = self.gds_validate_string(FileName_, node, 'FileName')
            self.FileName = FileName_
        elif nodeName_ == 'DocumentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DocumentContent')
            else:
                bval_ = None
            self.DocumentContent = bval_
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
# end class UploadDocumentDetail


class UploadDocumentReferenceDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, Description=None, DocumentProducer=None, DocumentType=None, DocumentId=None, DocumentIdProducer=None):
        self.original_tagname_ = None
        self.LineNumber = LineNumber
        self.CustomerReference = CustomerReference
        self.Description = Description
        self.DocumentProducer = DocumentProducer
        self.validate_UploadDocumentProducerType(self.DocumentProducer)
        self.DocumentType = DocumentType
        self.validate_UploadDocumentType(self.DocumentType)
        self.DocumentId = DocumentId
        self.DocumentIdProducer = DocumentIdProducer
        self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UploadDocumentReferenceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UploadDocumentReferenceDetail.subclass:
            return UploadDocumentReferenceDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentReferenceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineNumber(self): return self.LineNumber
    def set_LineNumber(self, LineNumber): self.LineNumber = LineNumber
    def get_CustomerReference(self): return self.CustomerReference
    def set_CustomerReference(self, CustomerReference): self.CustomerReference = CustomerReference
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_DocumentProducer(self): return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer): self.DocumentProducer = DocumentProducer
    def get_DocumentType(self): return self.DocumentType
    def set_DocumentType(self, DocumentType): self.DocumentType = DocumentType
    def get_DocumentId(self): return self.DocumentId
    def set_DocumentId(self, DocumentId): self.DocumentId = DocumentId
    def get_DocumentIdProducer(self): return self.DocumentIdProducer
    def set_DocumentIdProducer(self, DocumentIdProducer): self.DocumentIdProducer = DocumentIdProducer
    def validate_UploadDocumentProducerType(self, value):
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CLS', 'FEDEX_FIDT', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'OTHER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UploadDocumentProducerType' % {"value" : value.encode("utf-8")} )
    def validate_UploadDocumentType(self, value):
        # Validate type UploadDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'ETD_LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'NET_RATE_SHEET', 'OTHER', 'PRO_FORMA_INVOICE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UploadDocumentType' % {"value" : value.encode("utf-8")} )
    def validate_UploadDocumentIdProducer(self, value):
        # Validate type UploadDocumentIdProducer, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CSHP', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'FEDEX_INET']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on UploadDocumentIdProducer' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.Description is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.DocumentId is not None or
            self.DocumentIdProducer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='UploadDocumentReferenceDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UploadDocumentReferenceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UploadDocumentReferenceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='UploadDocumentReferenceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='UploadDocumentReferenceDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='UploadDocumentReferenceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:LineNumber>%s</ns:LineNumber>%s' % (self.gds_format_integer(self.LineNumber, input_name='LineNumber'), eol_))
        if self.CustomerReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:CustomerReference>%s</ns:CustomerReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Description>%s</ns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.DocumentProducer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentProducer>%s</ns:DocumentProducer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentProducer), input_name='DocumentProducer')), eol_))
        if self.DocumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentType>%s</ns:DocumentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), eol_))
        if self.DocumentId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentId>%s</ns:DocumentId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentId), input_name='DocumentId')), eol_))
        if self.DocumentIdProducer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:DocumentIdProducer>%s</ns:DocumentIdProducer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentIdProducer), input_name='DocumentIdProducer')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
        elif nodeName_ == 'CustomerReference':
            CustomerReference_ = child_.text
            CustomerReference_ = self.gds_validate_string(CustomerReference_, node, 'CustomerReference')
            self.CustomerReference = CustomerReference_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'DocumentProducer':
            DocumentProducer_ = child_.text
            DocumentProducer_ = self.gds_validate_string(DocumentProducer_, node, 'DocumentProducer')
            self.DocumentProducer = DocumentProducer_
            # validate type UploadDocumentProducerType
            self.validate_UploadDocumentProducerType(self.DocumentProducer)
        elif nodeName_ == 'DocumentType':
            DocumentType_ = child_.text
            DocumentType_ = self.gds_validate_string(DocumentType_, node, 'DocumentType')
            self.DocumentType = DocumentType_
            # validate type UploadDocumentType
            self.validate_UploadDocumentType(self.DocumentType)
        elif nodeName_ == 'DocumentId':
            DocumentId_ = child_.text
            DocumentId_ = self.gds_validate_string(DocumentId_, node, 'DocumentId')
            self.DocumentId = DocumentId_
        elif nodeName_ == 'DocumentIdProducer':
            DocumentIdProducer_ = child_.text
            DocumentIdProducer_ = self.gds_validate_string(DocumentIdProducer_, node, 'DocumentIdProducer')
            self.DocumentIdProducer = DocumentIdProducer_
            # validate type UploadDocumentIdProducer
            self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
# end class UploadDocumentReferenceDetail


class WeighingDetail(GeneratedsSuper):
    """Specifies a single type of weighing performed on a shipment"""
    subclass = None
    superclass = None
    def __init__(self, Type=None):
        self.original_tagname_ = None
        self.Type = Type
        self.validate_WeighingScaleType(self.Type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeighingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeighingDetail.subclass:
            return WeighingDetail.subclass(*args_, **kwargs_)
        else:
            return WeighingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_WeighingScaleType(self, value):
        # Validate type WeighingScaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FEDEX_SCALE', 'PUBLIC_SCALE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeighingScaleType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WeighingDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeighingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeighingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WeighingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WeighingDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WeighingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Type>%s</ns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type WeighingScaleType
            self.validate_WeighingScaleType(self.Type)
# end class WeighingDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None):
        self.original_tagname_ = None
        self.Units = Units
        self.validate_WeightUnits(self.Units)
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def validate_WeightUnits(self, value):
        # Validate type WeightUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['KG', 'LB']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUnits' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='Weight', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Units>%s</ns:Units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Value>%s</ns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            # validate type WeightUnits
            self.validate_WeightUnits(self.Units)
        elif nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None):
        self.original_tagname_ = None
        self.ParentCredential = ParentCredential
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ParentCredential(self): return self.ParentCredential
    def set_ParentCredential(self, ParentCredential): self.ParentCredential = ParentCredential
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            self.ParentCredential.export(outfile, level, namespace_, name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.original_tagname_ = None
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Key>%s</ns:Key>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), eol_))
        if self.Password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Password>%s</ns:Password>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.original_tagname_ = None
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ns:', name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:ServiceId>%s</ns:ServiceId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), eol_))
        if self.Major is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Major>%s</ns:Major>%s' % (self.gds_format_integer(self.Major, input_name='Major'), eol_))
        if self.Intermediate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Intermediate>%s</ns:Intermediate>%s' % (self.gds_format_integer(self.Intermediate, input_name='Intermediate'), eol_))
        if self.Minor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ns:Minor>%s</ns:Minor>%s' % (self.gds_format_integer(self.Minor, input_name='Minor'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


GDSClassesMapping = {
    'CancelPickupReply': CancelPickupReply,
    'CancelPickupRequest': CancelPickupRequest,
    'CreatePickupReply': CreatePickupReply,
    'CreatePickupRequest': CreatePickupRequest,
    'PickupAvailabilityReply': PickupAvailabilityReply,
    'PickupAvailabilityRequest': PickupAvailabilityRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/pickup/v15"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/pickup/v15"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from pickup_service_v15 import *\n\n')
        sys.stdout.write('import pickup_service_v15 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AssociatedAccount",
    "CancelPickupReply",
    "CancelPickupRequest",
    "ClientDetail",
    "CodAddTransportationChargesDetail",
    "CodDetail",
    "CompletedFreightPickupDetail",
    "CompletedFreightPickupLineItem",
    "Contact",
    "ContactAndAddress",
    "CreatePickupReply",
    "CreatePickupRequest",
    "CustomDeliveryWindowDetail",
    "DateRange",
    "DeliveryOnInvoiceAcceptanceDetail",
    "DetentionDetail",
    "Dimensions",
    "Distance",
    "EMailDetail",
    "EMailLabelDetail",
    "EMailRecipient",
    "EmailOptionsRequested",
    "EtdDetail",
    "ExpressFreightPickupDetail",
    "ExtraLaborDetail",
    "FaxDetail",
    "FlatbedTrailerDetail",
    "FreightGuaranteeDetail",
    "FreightPickupDetail",
    "FreightPickupLineItem",
    "FreightServiceCenterDetail",
    "HoldAtLocationDetail",
    "HomeDeliveryPremiumDetail",
    "InternationalControlledExportDetail",
    "InternationalTrafficInArmsRegulationsDetail",
    "Localization",
    "MarkingOrTaggingDetail",
    "Money",
    "NonBusinessTimeDetail",
    "Notification",
    "NotificationDetail",
    "NotificationParameter",
    "PalletShrinkwrapDetail",
    "PalletsProvidedDetail",
    "Party",
    "Payment",
    "Payor",
    "PendingShipmentDetail",
    "PendingShipmentProcessingOptionsRequested",
    "PickupAvailabilityReply",
    "PickupAvailabilityRequest",
    "PickupDangerousGoodsDetail",
    "PickupOriginDetail",
    "PickupPackageSpecialServicesRequested",
    "PickupScheduleOption",
    "PickupShipmentAttributes",
    "PriorityAlertDetail",
    "RecommendedDocumentSpecification",
    "RequestedPickupPackageDetail",
    "ReturnAssociationDetail",
    "ReturnEMailDetail",
    "ReturnShipmentDetail",
    "Rma",
    "ShipmentAssemblyDetail",
    "ShipmentDryIceDetail",
    "ShipmentDryIceProcessingOptionsRequested",
    "ShipmentEventNotificationDetail",
    "ShipmentEventNotificationSpecification",
    "ShipmentNotificationFormatSpecification",
    "ShipmentSpecialServicesRequested",
    "SmsDetail",
    "SortAndSegregateDetail",
    "SpecialEquipmentDetail",
    "SpecialEquipmentLineItem",
    "StorageDetail",
    "TaxpayerIdentification",
    "TrackingId",
    "TransactionDetail",
    "UploadDocumentDetail",
    "UploadDocumentReferenceDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "WeighingDetail",
    "Weight"
]
