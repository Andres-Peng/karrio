#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jun 13 20:22:37 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './pycanada_post/manifest.py')
#
# Command line arguments:
#   /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/manifest.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "./pycanada_post/manifest.py" /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/manifest.xsd
#
# Current working directory (os.getcwd()):
#   py-canada_post
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ShipmentTransmitSetType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customer_request_id=None, group_ids=None, cpc_pickup_indicator=None, requested_shipping_point=None, shipping_point_id=None, detailed_manifests=None, method_of_payment=None, manifest_address=None, customer_reference=None, excluded_shipments=None):
        self.original_tagname_ = None
        self.customer_request_id = customer_request_id
        self.validate_CustomerRequestIdType(self.customer_request_id)
        self.group_ids = group_ids
        self.cpc_pickup_indicator = cpc_pickup_indicator
        self.requested_shipping_point = requested_shipping_point
        self.shipping_point_id = shipping_point_id
        self.detailed_manifests = detailed_manifests
        self.method_of_payment = method_of_payment
        self.manifest_address = manifest_address
        self.customer_reference = customer_reference
        self.validate_CustomerReferenceType(self.customer_reference)
        self.excluded_shipments = excluded_shipments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentTransmitSetType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentTransmitSetType.subclass:
            return ShipmentTransmitSetType.subclass(*args_, **kwargs_)
        else:
            return ShipmentTransmitSetType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customer_request_id(self): return self.customer_request_id
    def set_customer_request_id(self, customer_request_id): self.customer_request_id = customer_request_id
    def get_group_ids(self): return self.group_ids
    def set_group_ids(self, group_ids): self.group_ids = group_ids
    def get_cpc_pickup_indicator(self): return self.cpc_pickup_indicator
    def set_cpc_pickup_indicator(self, cpc_pickup_indicator): self.cpc_pickup_indicator = cpc_pickup_indicator
    def get_requested_shipping_point(self): return self.requested_shipping_point
    def set_requested_shipping_point(self, requested_shipping_point): self.requested_shipping_point = requested_shipping_point
    def get_shipping_point_id(self): return self.shipping_point_id
    def set_shipping_point_id(self, shipping_point_id): self.shipping_point_id = shipping_point_id
    def get_detailed_manifests(self): return self.detailed_manifests
    def set_detailed_manifests(self, detailed_manifests): self.detailed_manifests = detailed_manifests
    def get_method_of_payment(self): return self.method_of_payment
    def set_method_of_payment(self, method_of_payment): self.method_of_payment = method_of_payment
    def get_manifest_address(self): return self.manifest_address
    def set_manifest_address(self, manifest_address): self.manifest_address = manifest_address
    def get_customer_reference(self): return self.customer_reference
    def set_customer_reference(self, customer_reference): self.customer_reference = customer_reference
    def get_excluded_shipments(self): return self.excluded_shipments
    def set_excluded_shipments(self, excluded_shipments): self.excluded_shipments = excluded_shipments
    def validate_CustomerRequestIdType(self, value):
        # Validate type CustomerRequestIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CustomerRequestIdType' % {"value" : value} )
    def validate_CustomerReferenceType(self, value):
        # Validate type CustomerReferenceType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CustomerReferenceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.customer_request_id is not None or
            self.group_ids is not None or
            self.cpc_pickup_indicator is not None or
            self.requested_shipping_point is not None or
            self.shipping_point_id is not None or
            self.detailed_manifests is not None or
            self.method_of_payment is not None or
            self.manifest_address is not None or
            self.customer_reference is not None or
            self.excluded_shipments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentTransmitSetType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentTransmitSetType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentTransmitSetType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentTransmitSetType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentTransmitSetType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentTransmitSetType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customer_request_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-request-id>%s</customer-request-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_request_id), input_name='customer-request-id')), eol_))
        if self.group_ids is not None:
            self.group_ids.export(outfile, level, namespace_, name_='group-ids', pretty_print=pretty_print)
        if self.cpc_pickup_indicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cpc-pickup-indicator>%s</cpc-pickup-indicator>%s' % (self.gds_format_boolean(self.cpc_pickup_indicator, input_name='cpc-pickup-indicator'), eol_))
        if self.requested_shipping_point is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<requested-shipping-point>%s</requested-shipping-point>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.requested_shipping_point), input_name='requested-shipping-point')), eol_))
        if self.shipping_point_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipping-point-id>%s</shipping-point-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipping_point_id), input_name='shipping-point-id')), eol_))
        if self.detailed_manifests is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<detailed-manifests>%s</detailed-manifests>%s' % (self.gds_format_boolean(self.detailed_manifests, input_name='detailed-manifests'), eol_))
        if self.method_of_payment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<method-of-payment>%s</method-of-payment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.method_of_payment), input_name='method-of-payment')), eol_))
        if self.manifest_address is not None:
            self.manifest_address.export(outfile, level, namespace_, name_='manifest-address', pretty_print=pretty_print)
        if self.customer_reference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-reference>%s</customer-reference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_reference), input_name='customer-reference')), eol_))
        if self.excluded_shipments is not None:
            self.excluded_shipments.export(outfile, level, namespace_, name_='excluded-shipments', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customer-request-id':
            customer_request_id_ = child_.text
            customer_request_id_ = self.gds_validate_string(customer_request_id_, node, 'customer_request_id')
            self.customer_request_id = customer_request_id_
            # validate type CustomerRequestIdType
            self.validate_CustomerRequestIdType(self.customer_request_id)
        elif nodeName_ == 'group-ids':
            obj_ = GroupIDListType.factory()
            obj_.build(child_)
            self.group_ids = obj_
            obj_.original_tagname_ = 'group-ids'
        elif nodeName_ == 'cpc-pickup-indicator':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'cpc_pickup_indicator')
            self.cpc_pickup_indicator = ival_
        elif nodeName_ == 'requested-shipping-point':
            requested_shipping_point_ = child_.text
            requested_shipping_point_ = self.gds_validate_string(requested_shipping_point_, node, 'requested_shipping_point')
            self.requested_shipping_point = requested_shipping_point_
        elif nodeName_ == 'shipping-point-id':
            shipping_point_id_ = child_.text
            shipping_point_id_ = self.gds_validate_string(shipping_point_id_, node, 'shipping_point_id')
            self.shipping_point_id = shipping_point_id_
        elif nodeName_ == 'detailed-manifests':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'detailed_manifests')
            self.detailed_manifests = ival_
        elif nodeName_ == 'method-of-payment':
            method_of_payment_ = child_.text
            method_of_payment_ = self.gds_validate_string(method_of_payment_, node, 'method_of_payment')
            self.method_of_payment = method_of_payment_
        elif nodeName_ == 'manifest-address':
            obj_ = ManifestAddressType.factory()
            obj_.build(child_)
            self.manifest_address = obj_
            obj_.original_tagname_ = 'manifest-address'
        elif nodeName_ == 'customer-reference':
            customer_reference_ = child_.text
            customer_reference_ = self.gds_validate_string(customer_reference_, node, 'customer_reference')
            self.customer_reference = customer_reference_
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.customer_reference)
        elif nodeName_ == 'excluded-shipments':
            obj_ = ExcludedShipmentsType.factory()
            obj_.build(child_)
            self.excluded_shipments = obj_
            obj_.original_tagname_ = 'excluded-shipments'
# end class ShipmentTransmitSetType


class GroupIDListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, group_id=None):
        self.original_tagname_ = None
        if group_id is None:
            self.group_id = []
        else:
            self.group_id = group_id
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroupIDListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroupIDListType.subclass:
            return GroupIDListType.subclass(*args_, **kwargs_)
        else:
            return GroupIDListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_group_id(self): return self.group_id
    def set_group_id(self, group_id): self.group_id = group_id
    def add_group_id(self, value): self.group_id.append(value)
    def insert_group_id_at(self, index, value): self.group_id.insert(index, value)
    def replace_group_id_at(self, index, value): self.group_id[index] = value
    def validate_GroupIDType(self, value):
        # Validate type GroupIDType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on GroupIDType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on GroupIDType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.group_id
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GroupIDListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GroupIDListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroupIDListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GroupIDListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GroupIDListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GroupIDListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for group_id_ in self.group_id:
            showIndent(outfile, level, pretty_print)
            outfile.write('<group-id>%s</group-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(group_id_), input_name='group-id')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'group-id':
            group_id_ = child_.text
            group_id_ = self.gds_validate_string(group_id_, node, 'group_id')
            self.group_id.append(group_id_)
            # validate type GroupIDType
            self.validate_GroupIDType(self.group_id[-1])
# end class GroupIDListType


class ExcludedShipmentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, shipment_id=None):
        self.original_tagname_ = None
        if shipment_id is None:
            self.shipment_id = []
        else:
            self.shipment_id = shipment_id
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExcludedShipmentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExcludedShipmentsType.subclass:
            return ExcludedShipmentsType.subclass(*args_, **kwargs_)
        else:
            return ExcludedShipmentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_shipment_id(self): return self.shipment_id
    def set_shipment_id(self, shipment_id): self.shipment_id = shipment_id
    def add_shipment_id(self, value): self.shipment_id.append(value)
    def insert_shipment_id_at(self, index, value): self.shipment_id.insert(index, value)
    def replace_shipment_id_at(self, index, value): self.shipment_id[index] = value
    def validate_ShipmentIDType(self, value):
        # Validate type ShipmentIDType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ShipmentIDType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.shipment_id
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExcludedShipmentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExcludedShipmentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExcludedShipmentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExcludedShipmentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExcludedShipmentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExcludedShipmentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for shipment_id_ in self.shipment_id:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipment-id>%s</shipment-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(shipment_id_), input_name='shipment-id')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'shipment-id':
            shipment_id_ = child_.text
            shipment_id_ = self.gds_validate_string(shipment_id_, node, 'shipment_id')
            self.shipment_id.append(shipment_id_)
            # validate type ShipmentIDType
            self.validate_ShipmentIDType(self.shipment_id[-1])
# end class ExcludedShipmentsType


class ShipmentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None):
        self.original_tagname_ = None
        if link is None:
            self.link = []
        else:
            self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentsType.subclass:
            return ShipmentsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link_at(self, index, value): self.link.insert(index, value)
    def replace_link_at(self, index, value): self.link[index] = value
    def hasContent_(self):
        if (
            self.link
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for link_ in self.link:
            showIndent(outfile, level, pretty_print)
            outfile.write('<link>%s</link>%s' % (self.gds_encode(self.gds_format_string(quote_xml(link_), input_name='link')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'link':
            link_ = child_.text
            link_ = self.gds_validate_string(link_, node, 'link')
            self.link.append(link_)
# end class ShipmentsType


class ManifestsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None):
        self.original_tagname_ = None
        if link is None:
            self.link = []
        else:
            self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestsType.subclass:
            return ManifestsType.subclass(*args_, **kwargs_)
        else:
            return ManifestsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link_at(self, index, value): self.link.insert(index, value)
    def replace_link_at(self, index, value): self.link[index] = value
    def hasContent_(self):
        if (
            self.link
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ManifestsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ManifestsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManifestsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ManifestsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for link_ in self.link:
            showIndent(outfile, level, pretty_print)
            outfile.write('<link>%s</link>%s' % (self.gds_encode(self.gds_format_string(quote_xml(link_), input_name='link')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'link':
            link_ = child_.text
            link_ = self.gds_validate_string(link_, node, 'link')
            self.link.append(link_)
# end class ManifestsType


class ManifestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customer_request_id=None, po_number=None, links=None):
        self.original_tagname_ = None
        self.customer_request_id = customer_request_id
        self.validate_CustomerRequestIdType(self.customer_request_id)
        self.po_number = po_number
        self.links = links
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customer_request_id(self): return self.customer_request_id
    def set_customer_request_id(self, customer_request_id): self.customer_request_id = customer_request_id
    def get_po_number(self): return self.po_number
    def set_po_number(self, po_number): self.po_number = po_number
    def get_links(self): return self.links
    def set_links(self, links): self.links = links
    def validate_CustomerRequestIdType(self, value):
        # Validate type CustomerRequestIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CustomerRequestIdType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.customer_request_id is not None or
            self.po_number is not None or
            self.links is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ManifestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManifestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customer_request_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-request-id>%s</customer-request-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_request_id), input_name='customer-request-id')), eol_))
        if self.po_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<po-number>%s</po-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.po_number), input_name='po-number')), eol_))
        if self.links is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<links>%s</links>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.links), input_name='links')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customer-request-id':
            customer_request_id_ = child_.text
            customer_request_id_ = self.gds_validate_string(customer_request_id_, node, 'customer_request_id')
            self.customer_request_id = customer_request_id_
            # validate type CustomerRequestIdType
            self.validate_CustomerRequestIdType(self.customer_request_id)
        elif nodeName_ == 'po-number':
            po_number_ = child_.text
            po_number_ = self.gds_validate_string(po_number_, node, 'po_number')
            self.po_number = po_number_
        elif nodeName_ == 'links':
            links_ = child_.text
            links_ = self.gds_validate_string(links_, node, 'links')
            self.links = links_
# end class ManifestType


class ManifestDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, po_number=None, final_shipping_point=None, shipping_point_name=None, shipping_point_id=None, cpc_pickup_indicator=None, mailed_by_customer=None, mailed_on_behalf_of=None, paid_by_customer=None, customer_ref=None, manifest_date=None, manifest_time=None, contract_id=None, method_of_payment=None, cc_receipt_details=None, supplier_account_receipt_details=None, manifest_pricing_info=None, manifest_address=None):
        self.original_tagname_ = None
        self.po_number = po_number
        self.final_shipping_point = final_shipping_point
        self.shipping_point_name = shipping_point_name
        self.validate_shipping_point_nameType(self.shipping_point_name)
        self.shipping_point_id = shipping_point_id
        self.cpc_pickup_indicator = cpc_pickup_indicator
        self.mailed_by_customer = mailed_by_customer
        self.mailed_on_behalf_of = mailed_on_behalf_of
        self.paid_by_customer = paid_by_customer
        self.customer_ref = customer_ref
        if isinstance(manifest_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(manifest_date, '%Y-%m-%d').date()
        else:
            initvalue_ = manifest_date
        self.manifest_date = initvalue_
        self.manifest_time = manifest_time
        self.validate_manifest_timeType(self.manifest_time)
        self.contract_id = contract_id
        self.method_of_payment = method_of_payment
        self.cc_receipt_details = cc_receipt_details
        self.supplier_account_receipt_details = supplier_account_receipt_details
        self.manifest_pricing_info = manifest_pricing_info
        self.manifest_address = manifest_address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestDetailsType.subclass:
            return ManifestDetailsType.subclass(*args_, **kwargs_)
        else:
            return ManifestDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_po_number(self): return self.po_number
    def set_po_number(self, po_number): self.po_number = po_number
    def get_final_shipping_point(self): return self.final_shipping_point
    def set_final_shipping_point(self, final_shipping_point): self.final_shipping_point = final_shipping_point
    def get_shipping_point_name(self): return self.shipping_point_name
    def set_shipping_point_name(self, shipping_point_name): self.shipping_point_name = shipping_point_name
    def get_shipping_point_id(self): return self.shipping_point_id
    def set_shipping_point_id(self, shipping_point_id): self.shipping_point_id = shipping_point_id
    def get_cpc_pickup_indicator(self): return self.cpc_pickup_indicator
    def set_cpc_pickup_indicator(self, cpc_pickup_indicator): self.cpc_pickup_indicator = cpc_pickup_indicator
    def get_mailed_by_customer(self): return self.mailed_by_customer
    def set_mailed_by_customer(self, mailed_by_customer): self.mailed_by_customer = mailed_by_customer
    def get_mailed_on_behalf_of(self): return self.mailed_on_behalf_of
    def set_mailed_on_behalf_of(self, mailed_on_behalf_of): self.mailed_on_behalf_of = mailed_on_behalf_of
    def get_paid_by_customer(self): return self.paid_by_customer
    def set_paid_by_customer(self, paid_by_customer): self.paid_by_customer = paid_by_customer
    def get_customer_ref(self): return self.customer_ref
    def set_customer_ref(self, customer_ref): self.customer_ref = customer_ref
    def get_manifest_date(self): return self.manifest_date
    def set_manifest_date(self, manifest_date): self.manifest_date = manifest_date
    def get_manifest_time(self): return self.manifest_time
    def set_manifest_time(self, manifest_time): self.manifest_time = manifest_time
    def get_contract_id(self): return self.contract_id
    def set_contract_id(self, contract_id): self.contract_id = contract_id
    def get_method_of_payment(self): return self.method_of_payment
    def set_method_of_payment(self, method_of_payment): self.method_of_payment = method_of_payment
    def get_cc_receipt_details(self): return self.cc_receipt_details
    def set_cc_receipt_details(self, cc_receipt_details): self.cc_receipt_details = cc_receipt_details
    def get_supplier_account_receipt_details(self): return self.supplier_account_receipt_details
    def set_supplier_account_receipt_details(self, supplier_account_receipt_details): self.supplier_account_receipt_details = supplier_account_receipt_details
    def get_manifest_pricing_info(self): return self.manifest_pricing_info
    def set_manifest_pricing_info(self, manifest_pricing_info): self.manifest_pricing_info = manifest_pricing_info
    def get_manifest_address(self): return self.manifest_address
    def set_manifest_address(self, manifest_address): self.manifest_address = manifest_address
    def validate_shipping_point_nameType(self, value):
        # Validate type shipping-point-nameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on shipping-point-nameType' % {"value" : value} )
    def validate_manifest_timeType(self, value):
        # Validate type manifest-timeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_manifest_timeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_manifest_timeType_patterns_, ))
    validate_manifest_timeType_patterns_ = [['^\\d{2}:\\d{2} [a-zA-Z ]+$']]
    def hasContent_(self):
        if (
            self.po_number is not None or
            self.final_shipping_point is not None or
            self.shipping_point_name is not None or
            self.shipping_point_id is not None or
            self.cpc_pickup_indicator is not None or
            self.mailed_by_customer is not None or
            self.mailed_on_behalf_of is not None or
            self.paid_by_customer is not None or
            self.customer_ref is not None or
            self.manifest_date is not None or
            self.manifest_time is not None or
            self.contract_id is not None or
            self.method_of_payment is not None or
            self.cc_receipt_details is not None or
            self.supplier_account_receipt_details is not None or
            self.manifest_pricing_info is not None or
            self.manifest_address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ManifestDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ManifestDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManifestDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ManifestDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.po_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<po-number>%s</po-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.po_number), input_name='po-number')), eol_))
        if self.final_shipping_point is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<final-shipping-point>%s</final-shipping-point>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.final_shipping_point), input_name='final-shipping-point')), eol_))
        if self.shipping_point_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipping-point-name>%s</shipping-point-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipping_point_name), input_name='shipping-point-name')), eol_))
        if self.shipping_point_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipping-point-id>%s</shipping-point-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipping_point_id), input_name='shipping-point-id')), eol_))
        if self.cpc_pickup_indicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cpc-pickup-indicator>%s</cpc-pickup-indicator>%s' % (self.gds_format_boolean(self.cpc_pickup_indicator, input_name='cpc-pickup-indicator'), eol_))
        if self.mailed_by_customer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<mailed-by-customer>%s</mailed-by-customer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.mailed_by_customer), input_name='mailed-by-customer')), eol_))
        if self.mailed_on_behalf_of is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<mailed-on-behalf-of>%s</mailed-on-behalf-of>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.mailed_on_behalf_of), input_name='mailed-on-behalf-of')), eol_))
        if self.paid_by_customer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<paid-by-customer>%s</paid-by-customer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.paid_by_customer), input_name='paid-by-customer')), eol_))
        if self.customer_ref is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-ref>%s</customer-ref>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_ref), input_name='customer-ref')), eol_))
        if self.manifest_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<manifest-date>%s</manifest-date>%s' % (self.gds_format_date(self.manifest_date, input_name='manifest-date'), eol_))
        if self.manifest_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<manifest-time>%s</manifest-time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.manifest_time), input_name='manifest-time')), eol_))
        if self.contract_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<contract-id>%s</contract-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.contract_id), input_name='contract-id')), eol_))
        if self.method_of_payment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<method-of-payment>%s</method-of-payment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.method_of_payment), input_name='method-of-payment')), eol_))
        if self.cc_receipt_details is not None:
            self.cc_receipt_details.export(outfile, level, namespace_, name_='cc-receipt-details', pretty_print=pretty_print)
        if self.supplier_account_receipt_details is not None:
            self.supplier_account_receipt_details.export(outfile, level, namespace_, name_='supplier-account-receipt-details', pretty_print=pretty_print)
        if self.manifest_pricing_info is not None:
            self.manifest_pricing_info.export(outfile, level, namespace_, name_='manifest-pricing-info', pretty_print=pretty_print)
        if self.manifest_address is not None:
            self.manifest_address.export(outfile, level, namespace_, name_='manifest-address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'po-number':
            po_number_ = child_.text
            po_number_ = self.gds_validate_string(po_number_, node, 'po_number')
            self.po_number = po_number_
        elif nodeName_ == 'final-shipping-point':
            final_shipping_point_ = child_.text
            final_shipping_point_ = self.gds_validate_string(final_shipping_point_, node, 'final_shipping_point')
            self.final_shipping_point = final_shipping_point_
        elif nodeName_ == 'shipping-point-name':
            shipping_point_name_ = child_.text
            shipping_point_name_ = self.gds_validate_string(shipping_point_name_, node, 'shipping_point_name')
            self.shipping_point_name = shipping_point_name_
            # validate type shipping-point-nameType
            self.validate_shipping_point_nameType(self.shipping_point_name)
        elif nodeName_ == 'shipping-point-id':
            shipping_point_id_ = child_.text
            shipping_point_id_ = self.gds_validate_string(shipping_point_id_, node, 'shipping_point_id')
            self.shipping_point_id = shipping_point_id_
        elif nodeName_ == 'cpc-pickup-indicator':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'cpc_pickup_indicator')
            self.cpc_pickup_indicator = ival_
        elif nodeName_ == 'mailed-by-customer':
            mailed_by_customer_ = child_.text
            mailed_by_customer_ = self.gds_validate_string(mailed_by_customer_, node, 'mailed_by_customer')
            self.mailed_by_customer = mailed_by_customer_
        elif nodeName_ == 'mailed-on-behalf-of':
            mailed_on_behalf_of_ = child_.text
            mailed_on_behalf_of_ = self.gds_validate_string(mailed_on_behalf_of_, node, 'mailed_on_behalf_of')
            self.mailed_on_behalf_of = mailed_on_behalf_of_
        elif nodeName_ == 'paid-by-customer':
            paid_by_customer_ = child_.text
            paid_by_customer_ = self.gds_validate_string(paid_by_customer_, node, 'paid_by_customer')
            self.paid_by_customer = paid_by_customer_
        elif nodeName_ == 'customer-ref':
            customer_ref_ = child_.text
            customer_ref_ = self.gds_validate_string(customer_ref_, node, 'customer_ref')
            self.customer_ref = customer_ref_
        elif nodeName_ == 'manifest-date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.manifest_date = dval_
        elif nodeName_ == 'manifest-time':
            manifest_time_ = child_.text
            manifest_time_ = self.gds_validate_string(manifest_time_, node, 'manifest_time')
            self.manifest_time = manifest_time_
            # validate type manifest-timeType
            self.validate_manifest_timeType(self.manifest_time)
        elif nodeName_ == 'contract-id':
            contract_id_ = child_.text
            contract_id_ = self.gds_validate_string(contract_id_, node, 'contract_id')
            self.contract_id = contract_id_
        elif nodeName_ == 'method-of-payment':
            method_of_payment_ = child_.text
            method_of_payment_ = self.gds_validate_string(method_of_payment_, node, 'method_of_payment')
            self.method_of_payment = method_of_payment_
        elif nodeName_ == 'cc-receipt-details':
            obj_ = cc_receipt_detailsType.factory()
            obj_.build(child_)
            self.cc_receipt_details = obj_
            obj_.original_tagname_ = 'cc-receipt-details'
        elif nodeName_ == 'supplier-account-receipt-details':
            obj_ = supplier_account_receipt_detailsType.factory()
            obj_.build(child_)
            self.supplier_account_receipt_details = obj_
            obj_.original_tagname_ = 'supplier-account-receipt-details'
        elif nodeName_ == 'manifest-pricing-info':
            obj_ = ManifestPricingInfoType.factory()
            obj_.build(child_)
            self.manifest_pricing_info = obj_
            obj_.original_tagname_ = 'manifest-pricing-info'
        elif nodeName_ == 'manifest-address':
            obj_ = ManifestAddressType.factory()
            obj_.build(child_)
            self.manifest_address = obj_
            obj_.original_tagname_ = 'manifest-address'
# end class ManifestDetailsType


class ManifestPricingInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, base_cost=None, automation_discount=None, options_and_surcharges=None, gst=None, pst=None, hst=None, total_due_cpc=None):
        self.original_tagname_ = None
        self.base_cost = base_cost
        self.automation_discount = automation_discount
        self.options_and_surcharges = options_and_surcharges
        self.gst = gst
        self.pst = pst
        self.hst = hst
        self.total_due_cpc = total_due_cpc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestPricingInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestPricingInfoType.subclass:
            return ManifestPricingInfoType.subclass(*args_, **kwargs_)
        else:
            return ManifestPricingInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base_cost(self): return self.base_cost
    def set_base_cost(self, base_cost): self.base_cost = base_cost
    def get_automation_discount(self): return self.automation_discount
    def set_automation_discount(self, automation_discount): self.automation_discount = automation_discount
    def get_options_and_surcharges(self): return self.options_and_surcharges
    def set_options_and_surcharges(self, options_and_surcharges): self.options_and_surcharges = options_and_surcharges
    def get_gst(self): return self.gst
    def set_gst(self, gst): self.gst = gst
    def get_pst(self): return self.pst
    def set_pst(self, pst): self.pst = pst
    def get_hst(self): return self.hst
    def set_hst(self, hst): self.hst = hst
    def get_total_due_cpc(self): return self.total_due_cpc
    def set_total_due_cpc(self, total_due_cpc): self.total_due_cpc = total_due_cpc
    def hasContent_(self):
        if (
            self.base_cost is not None or
            self.automation_discount is not None or
            self.options_and_surcharges is not None or
            self.gst is not None or
            self.pst is not None or
            self.hst is not None or
            self.total_due_cpc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ManifestPricingInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestPricingInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestPricingInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ManifestPricingInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManifestPricingInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ManifestPricingInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.base_cost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<base-cost>%s</base-cost>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.base_cost), input_name='base-cost')), eol_))
        if self.automation_discount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<automation-discount>%s</automation-discount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.automation_discount), input_name='automation-discount')), eol_))
        if self.options_and_surcharges is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<options-and-surcharges>%s</options-and-surcharges>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.options_and_surcharges), input_name='options-and-surcharges')), eol_))
        if self.gst is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<gst>%s</gst>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.gst), input_name='gst')), eol_))
        if self.pst is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pst>%s</pst>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.pst), input_name='pst')), eol_))
        if self.hst is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<hst>%s</hst>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.hst), input_name='hst')), eol_))
        if self.total_due_cpc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<total-due-cpc>%s</total-due-cpc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.total_due_cpc), input_name='total-due-cpc')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'base-cost':
            base_cost_ = child_.text
            base_cost_ = self.gds_validate_string(base_cost_, node, 'base_cost')
            self.base_cost = base_cost_
        elif nodeName_ == 'automation-discount':
            automation_discount_ = child_.text
            automation_discount_ = self.gds_validate_string(automation_discount_, node, 'automation_discount')
            self.automation_discount = automation_discount_
        elif nodeName_ == 'options-and-surcharges':
            options_and_surcharges_ = child_.text
            options_and_surcharges_ = self.gds_validate_string(options_and_surcharges_, node, 'options_and_surcharges')
            self.options_and_surcharges = options_and_surcharges_
        elif nodeName_ == 'gst':
            gst_ = child_.text
            gst_ = self.gds_validate_string(gst_, node, 'gst')
            self.gst = gst_
        elif nodeName_ == 'pst':
            pst_ = child_.text
            pst_ = self.gds_validate_string(pst_, node, 'pst')
            self.pst = pst_
        elif nodeName_ == 'hst':
            hst_ = child_.text
            hst_ = self.gds_validate_string(hst_, node, 'hst')
            self.hst = hst_
        elif nodeName_ == 'total-due-cpc':
            total_due_cpc_ = child_.text
            total_due_cpc_ = self.gds_validate_string(total_due_cpc_, node, 'total_due_cpc')
            self.total_due_cpc = total_due_cpc_
# end class ManifestPricingInfoType


class ManifestAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, manifest_company=None, manifest_name=None, phone_number=None, address_details=None):
        self.original_tagname_ = None
        self.manifest_company = manifest_company
        self.validate_manifest_companyType(self.manifest_company)
        self.manifest_name = manifest_name
        self.validate_manifest_nameType(self.manifest_name)
        self.phone_number = phone_number
        self.address_details = address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestAddressType.subclass:
            return ManifestAddressType.subclass(*args_, **kwargs_)
        else:
            return ManifestAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_manifest_company(self): return self.manifest_company
    def set_manifest_company(self, manifest_company): self.manifest_company = manifest_company
    def get_manifest_name(self): return self.manifest_name
    def set_manifest_name(self, manifest_name): self.manifest_name = manifest_name
    def get_phone_number(self): return self.phone_number
    def set_phone_number(self, phone_number): self.phone_number = phone_number
    def get_address_details(self): return self.address_details
    def set_address_details(self, address_details): self.address_details = address_details
    def validate_manifest_companyType(self, value):
        # Validate type manifest-companyType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on manifest-companyType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on manifest-companyType' % {"value" : value} )
    def validate_manifest_nameType(self, value):
        # Validate type manifest-nameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on manifest-nameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on manifest-nameType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.manifest_company is not None or
            self.manifest_name is not None or
            self.phone_number is not None or
            self.address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ManifestAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ManifestAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManifestAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ManifestAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.manifest_company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<manifest-company>%s</manifest-company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.manifest_company), input_name='manifest-company')), eol_))
        if self.manifest_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<manifest-name>%s</manifest-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.manifest_name), input_name='manifest-name')), eol_))
        if self.phone_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<phone-number>%s</phone-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.phone_number), input_name='phone-number')), eol_))
        if self.address_details is not None:
            self.address_details.export(outfile, level, namespace_, name_='address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'manifest-company':
            manifest_company_ = child_.text
            manifest_company_ = self.gds_validate_string(manifest_company_, node, 'manifest_company')
            self.manifest_company = manifest_company_
            # validate type manifest-companyType
            self.validate_manifest_companyType(self.manifest_company)
        elif nodeName_ == 'manifest-name':
            manifest_name_ = child_.text
            manifest_name_ = self.gds_validate_string(manifest_name_, node, 'manifest_name')
            self.manifest_name = manifest_name_
            # validate type manifest-nameType
            self.validate_manifest_nameType(self.manifest_name)
        elif nodeName_ == 'phone-number':
            phone_number_ = child_.text
            phone_number_ = self.gds_validate_string(phone_number_, node, 'phone_number')
            self.phone_number = phone_number_
        elif nodeName_ == 'address-details':
            obj_ = AddressDetailsType.factory()
            obj_.build(child_)
            self.address_details = obj_
            obj_.original_tagname_ = 'address-details'
# end class ManifestAddressType


class AddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, prov_state=None, country_code=None, postal_zip_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type(self.address_line_2)
        self.city = city
        self.validate_cityType(self.city)
        self.prov_state = prov_state
        self.validate_prov_stateType(self.prov_state)
        self.country_code = country_code
        self.validate_country_codeType(self.country_code)
        self.postal_zip_code = postal_zip_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressDetailsType.subclass:
            return AddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return AddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_prov_state(self): return self.prov_state
    def set_prov_state(self, prov_state): self.prov_state = prov_state
    def get_country_code(self): return self.country_code
    def set_country_code(self, country_code): self.country_code = country_code
    def get_postal_zip_code(self): return self.postal_zip_code
    def set_postal_zip_code(self, postal_zip_code): self.postal_zip_code = postal_zip_code
    def validate_address_line_1Type(self, value):
        # Validate type address-line-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type' % {"value" : value} )
    def validate_address_line_2Type(self, value):
        # Validate type address-line-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type' % {"value" : value} )
    def validate_cityType(self, value):
        # Validate type cityType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType' % {"value" : value} )
    def validate_prov_stateType(self, value):
        # Validate type prov-stateType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on prov-stateType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on prov-stateType' % {"value" : value} )
    def validate_country_codeType(self, value):
        # Validate type country-codeType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CA', 'US']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on country-codeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.prov_state is not None or
            self.country_code is not None or
            self.postal_zip_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.prov_state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prov-state>%s</prov-state>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.prov_state), input_name='prov-state')), eol_))
        if self.country_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country-code>%s</country-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country_code), input_name='country-code')), eol_))
        if self.postal_zip_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-zip-code>%s</postal-zip-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_zip_code), input_name='postal-zip-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type
            self.validate_address_line_1Type(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type
            self.validate_address_line_2Type(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType
            self.validate_cityType(self.city)
        elif nodeName_ == 'prov-state':
            prov_state_ = child_.text
            prov_state_ = self.gds_validate_string(prov_state_, node, 'prov_state')
            self.prov_state = prov_state_
            # validate type prov-stateType
            self.validate_prov_stateType(self.prov_state)
        elif nodeName_ == 'country-code':
            country_code_ = child_.text
            country_code_ = self.gds_validate_string(country_code_, node, 'country_code')
            self.country_code = country_code_
            # validate type country-codeType
            self.validate_country_codeType(self.country_code)
        elif nodeName_ == 'postal-zip-code':
            postal_zip_code_ = child_.text
            postal_zip_code_ = self.gds_validate_string(postal_zip_code_, node, 'postal_zip_code')
            self.postal_zip_code = postal_zip_code_
# end class AddressDetailsType


class cc_receipt_detailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, merchant_name=None, merchant_url=None, name_on_card=None, auth_code=None, auth_timestamp=None, card_type=None, currency=None, transaction_type=None):
        self.original_tagname_ = None
        self.merchant_name = merchant_name
        self.merchant_url = merchant_url
        self.validate_merchant_urlType(self.merchant_url)
        self.name_on_card = name_on_card
        self.auth_code = auth_code
        if isinstance(auth_timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(auth_timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = auth_timestamp
        self.auth_timestamp = initvalue_
        self.card_type = card_type
        self.currency = currency
        self.transaction_type = transaction_type
        self.validate_transaction_typeType(self.transaction_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cc_receipt_detailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cc_receipt_detailsType.subclass:
            return cc_receipt_detailsType.subclass(*args_, **kwargs_)
        else:
            return cc_receipt_detailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_merchant_name(self): return self.merchant_name
    def set_merchant_name(self, merchant_name): self.merchant_name = merchant_name
    def get_merchant_url(self): return self.merchant_url
    def set_merchant_url(self, merchant_url): self.merchant_url = merchant_url
    def get_name_on_card(self): return self.name_on_card
    def set_name_on_card(self, name_on_card): self.name_on_card = name_on_card
    def get_auth_code(self): return self.auth_code
    def set_auth_code(self, auth_code): self.auth_code = auth_code
    def get_auth_timestamp(self): return self.auth_timestamp
    def set_auth_timestamp(self, auth_timestamp): self.auth_timestamp = auth_timestamp
    def get_card_type(self): return self.card_type
    def set_card_type(self, card_type): self.card_type = card_type
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_transaction_type(self): return self.transaction_type
    def set_transaction_type(self, transaction_type): self.transaction_type = transaction_type
    def validate_merchant_urlType(self, value):
        # Validate type merchant-urlType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-urlType' % {"value" : value} )
    def validate_transaction_typeType(self, value):
        # Validate type transaction-typeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on transaction-typeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.merchant_name is not None or
            self.merchant_url is not None or
            self.name_on_card is not None or
            self.auth_code is not None or
            self.auth_timestamp is not None or
            self.card_type is not None or
            self.currency is not None or
            self.transaction_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cc-receipt-detailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cc-receipt-detailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cc-receipt-detailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cc-receipt-detailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cc-receipt-detailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cc-receipt-detailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.merchant_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-name>%s</merchant-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_name), input_name='merchant-name')), eol_))
        if self.merchant_url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-url>%s</merchant-url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_url), input_name='merchant-url')), eol_))
        if self.name_on_card is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name-on-card>%s</name-on-card>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name_on_card), input_name='name-on-card')), eol_))
        if self.auth_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-code>%s</auth-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.auth_code), input_name='auth-code')), eol_))
        if self.auth_timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-timestamp>%s</auth-timestamp>%s' % (self.gds_format_datetime(self.auth_timestamp, input_name='auth-timestamp'), eol_))
        if self.card_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<card-type>%s</card-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.card_type), input_name='card-type')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.transaction_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<transaction-type>%s</transaction-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.transaction_type), input_name='transaction-type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'merchant-name':
            merchant_name_ = child_.text
            merchant_name_ = self.gds_validate_string(merchant_name_, node, 'merchant_name')
            self.merchant_name = merchant_name_
        elif nodeName_ == 'merchant-url':
            merchant_url_ = child_.text
            merchant_url_ = self.gds_validate_string(merchant_url_, node, 'merchant_url')
            self.merchant_url = merchant_url_
            # validate type merchant-urlType
            self.validate_merchant_urlType(self.merchant_url)
        elif nodeName_ == 'name-on-card':
            name_on_card_ = child_.text
            name_on_card_ = self.gds_validate_string(name_on_card_, node, 'name_on_card')
            self.name_on_card = name_on_card_
        elif nodeName_ == 'auth-code':
            auth_code_ = child_.text
            auth_code_ = self.gds_validate_string(auth_code_, node, 'auth_code')
            self.auth_code = auth_code_
        elif nodeName_ == 'auth-timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.auth_timestamp = dval_
        elif nodeName_ == 'card-type':
            card_type_ = child_.text
            card_type_ = self.gds_validate_string(card_type_, node, 'card_type')
            self.card_type = card_type_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'transaction-type':
            transaction_type_ = child_.text
            transaction_type_ = self.gds_validate_string(transaction_type_, node, 'transaction_type')
            self.transaction_type = transaction_type_
            # validate type transaction-typeType
            self.validate_transaction_typeType(self.transaction_type)
# end class cc_receipt_detailsType


class supplier_account_receipt_detailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, merchant_name=None, merchant_url=None, auth_code=None, auth_timestamp=None, supplier_id=None, currency=None, transaction_type=None):
        self.original_tagname_ = None
        self.merchant_name = merchant_name
        self.validate_merchant_nameType(self.merchant_name)
        self.merchant_url = merchant_url
        self.validate_merchant_urlType1(self.merchant_url)
        self.auth_code = auth_code
        if isinstance(auth_timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(auth_timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = auth_timestamp
        self.auth_timestamp = initvalue_
        self.supplier_id = supplier_id
        self.currency = currency
        self.transaction_type = transaction_type
        self.validate_transaction_typeType2(self.transaction_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, supplier_account_receipt_detailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if supplier_account_receipt_detailsType.subclass:
            return supplier_account_receipt_detailsType.subclass(*args_, **kwargs_)
        else:
            return supplier_account_receipt_detailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_merchant_name(self): return self.merchant_name
    def set_merchant_name(self, merchant_name): self.merchant_name = merchant_name
    def get_merchant_url(self): return self.merchant_url
    def set_merchant_url(self, merchant_url): self.merchant_url = merchant_url
    def get_auth_code(self): return self.auth_code
    def set_auth_code(self, auth_code): self.auth_code = auth_code
    def get_auth_timestamp(self): return self.auth_timestamp
    def set_auth_timestamp(self, auth_timestamp): self.auth_timestamp = auth_timestamp
    def get_supplier_id(self): return self.supplier_id
    def set_supplier_id(self, supplier_id): self.supplier_id = supplier_id
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_transaction_type(self): return self.transaction_type
    def set_transaction_type(self, transaction_type): self.transaction_type = transaction_type
    def validate_merchant_nameType(self, value):
        # Validate type merchant-nameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-nameType' % {"value" : value} )
    def validate_merchant_urlType1(self, value):
        # Validate type merchant-urlType1, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-urlType1' % {"value" : value} )
    def validate_transaction_typeType2(self, value):
        # Validate type transaction-typeType2, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on transaction-typeType2' % {"value" : value} )
    def hasContent_(self):
        if (
            self.merchant_name is not None or
            self.merchant_url is not None or
            self.auth_code is not None or
            self.auth_timestamp is not None or
            self.supplier_id is not None or
            self.currency is not None or
            self.transaction_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='supplier-account-receipt-detailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('supplier-account-receipt-detailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='supplier-account-receipt-detailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='supplier-account-receipt-detailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='supplier-account-receipt-detailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='supplier-account-receipt-detailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.merchant_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-name>%s</merchant-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_name), input_name='merchant-name')), eol_))
        if self.merchant_url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-url>%s</merchant-url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_url), input_name='merchant-url')), eol_))
        if self.auth_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-code>%s</auth-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.auth_code), input_name='auth-code')), eol_))
        if self.auth_timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-timestamp>%s</auth-timestamp>%s' % (self.gds_format_datetime(self.auth_timestamp, input_name='auth-timestamp'), eol_))
        if self.supplier_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<supplier-id>%s</supplier-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.supplier_id), input_name='supplier-id')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.transaction_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<transaction-type>%s</transaction-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.transaction_type), input_name='transaction-type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'merchant-name':
            merchant_name_ = child_.text
            merchant_name_ = self.gds_validate_string(merchant_name_, node, 'merchant_name')
            self.merchant_name = merchant_name_
            # validate type merchant-nameType
            self.validate_merchant_nameType(self.merchant_name)
        elif nodeName_ == 'merchant-url':
            merchant_url_ = child_.text
            merchant_url_ = self.gds_validate_string(merchant_url_, node, 'merchant_url')
            self.merchant_url = merchant_url_
            # validate type merchant-urlType1
            self.validate_merchant_urlType1(self.merchant_url)
        elif nodeName_ == 'auth-code':
            auth_code_ = child_.text
            auth_code_ = self.gds_validate_string(auth_code_, node, 'auth_code')
            self.auth_code = auth_code_
        elif nodeName_ == 'auth-timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.auth_timestamp = dval_
        elif nodeName_ == 'supplier-id':
            supplier_id_ = child_.text
            supplier_id_ = self.gds_validate_string(supplier_id_, node, 'supplier_id')
            self.supplier_id = supplier_id_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'transaction-type':
            transaction_type_ = child_.text
            transaction_type_ = self.gds_validate_string(transaction_type_, node, 'transaction_type')
            self.transaction_type = transaction_type_
            # validate type transaction-typeType2
            self.validate_transaction_typeType2(self.transaction_type)
# end class supplier_account_receipt_detailsType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentTransmitSetType'
        rootClass = ShipmentTransmitSetType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentTransmitSetType'
        rootClass = ShipmentTransmitSetType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentTransmitSetType'
        rootClass = ShipmentTransmitSetType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentTransmitSetType'
        rootClass = ShipmentTransmitSetType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from manifest import *\n\n')
        sys.stdout.write('import manifest as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AddressDetailsType",
    "ExcludedShipmentsType",
    "GroupIDListType",
    "ManifestAddressType",
    "ManifestDetailsType",
    "ManifestPricingInfoType",
    "ManifestType",
    "ManifestsType",
    "ShipmentTransmitSetType",
    "ShipmentsType",
    "cc_receipt_detailsType",
    "supplier_account_receipt_detailsType"
]
