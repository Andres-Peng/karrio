#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jun 13 20:20:59 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './pycanada_post/authreturn.py')
#
# Command line arguments:
#   /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/authreturn.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "./pycanada_post/authreturn.py" /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/authreturn.xsd
#
# Current working directory (os.getcwd()):
#   py-canada_post
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AuthorizedReturnInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tracking_pin=None, links=None):
        self.original_tagname_ = None
        self.tracking_pin = tracking_pin
        self.validate_TrackingPINType(self.tracking_pin)
        self.links = links
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthorizedReturnInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthorizedReturnInfoType.subclass:
            return AuthorizedReturnInfoType.subclass(*args_, **kwargs_)
        else:
            return AuthorizedReturnInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tracking_pin(self): return self.tracking_pin
    def set_tracking_pin(self, tracking_pin): self.tracking_pin = tracking_pin
    def get_links(self): return self.links
    def set_links(self, links): self.links = links
    def validate_TrackingPINType(self, value):
        # Validate type TrackingPINType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on TrackingPINType' % {"value" : value} )
            if len(str(value)) < 11:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on TrackingPINType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.tracking_pin is not None or
            self.links is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AuthorizedReturnInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthorizedReturnInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthorizedReturnInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AuthorizedReturnInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AuthorizedReturnInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AuthorizedReturnInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tracking_pin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tracking-pin>%s</tracking-pin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tracking_pin), input_name='tracking-pin')), eol_))
        if self.links is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<links>%s</links>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.links), input_name='links')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tracking-pin':
            tracking_pin_ = child_.text
            tracking_pin_ = self.gds_validate_string(tracking_pin_, node, 'tracking_pin')
            self.tracking_pin = tracking_pin_
            # validate type TrackingPINType
            self.validate_TrackingPINType(self.tracking_pin)
        elif nodeName_ == 'links':
            links_ = child_.text
            links_ = self.gds_validate_string(links_, node, 'links')
            self.links = links_
# end class AuthorizedReturnInfoType


class AuthorizedReturnType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, returner=None, receiver=None, parcel_characteristics=None, print_preferences=None, settlement_info=None, references=None, notifications=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.returner = returner
        self.receiver = receiver
        self.parcel_characteristics = parcel_characteristics
        self.print_preferences = print_preferences
        self.settlement_info = settlement_info
        self.references = references
        self.notifications = notifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthorizedReturnType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthorizedReturnType.subclass:
            return AuthorizedReturnType.subclass(*args_, **kwargs_)
        else:
            return AuthorizedReturnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_returner(self): return self.returner
    def set_returner(self, returner): self.returner = returner
    def get_receiver(self): return self.receiver
    def set_receiver(self, receiver): self.receiver = receiver
    def get_parcel_characteristics(self): return self.parcel_characteristics
    def set_parcel_characteristics(self, parcel_characteristics): self.parcel_characteristics = parcel_characteristics
    def get_print_preferences(self): return self.print_preferences
    def set_print_preferences(self, print_preferences): self.print_preferences = print_preferences
    def get_settlement_info(self): return self.settlement_info
    def set_settlement_info(self, settlement_info): self.settlement_info = settlement_info
    def get_references(self): return self.references
    def set_references(self, references): self.references = references
    def get_notifications(self): return self.notifications
    def set_notifications(self, notifications): self.notifications = notifications
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.returner is not None or
            self.receiver is not None or
            self.parcel_characteristics is not None or
            self.print_preferences is not None or
            self.settlement_info is not None or
            self.references is not None or
            self.notifications is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AuthorizedReturnType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthorizedReturnType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthorizedReturnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AuthorizedReturnType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AuthorizedReturnType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AuthorizedReturnType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.returner is not None:
            self.returner.export(outfile, level, namespace_, name_='returner', pretty_print=pretty_print)
        if self.receiver is not None:
            self.receiver.export(outfile, level, namespace_, name_='receiver', pretty_print=pretty_print)
        if self.parcel_characteristics is not None:
            self.parcel_characteristics.export(outfile, level, namespace_, name_='parcel-characteristics', pretty_print=pretty_print)
        if self.print_preferences is not None:
            self.print_preferences.export(outfile, level, namespace_, name_='print-preferences', pretty_print=pretty_print)
        if self.settlement_info is not None:
            self.settlement_info.export(outfile, level, namespace_, name_='settlement-info', pretty_print=pretty_print)
        if self.references is not None:
            self.references.export(outfile, level, namespace_, name_='references', pretty_print=pretty_print)
        if self.notifications is not None:
            self.notifications.export(outfile, level, namespace_, name_='notifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
        elif nodeName_ == 'returner':
            obj_ = ReturnerType.factory()
            obj_.build(child_)
            self.returner = obj_
            obj_.original_tagname_ = 'returner'
        elif nodeName_ == 'receiver':
            obj_ = ReceiverType.factory()
            obj_.build(child_)
            self.receiver = obj_
            obj_.original_tagname_ = 'receiver'
        elif nodeName_ == 'parcel-characteristics':
            obj_ = ParcelCharacteristicsType.factory()
            obj_.build(child_)
            self.parcel_characteristics = obj_
            obj_.original_tagname_ = 'parcel-characteristics'
        elif nodeName_ == 'print-preferences':
            obj_ = PrintPreferencesType.factory()
            obj_.build(child_)
            self.print_preferences = obj_
            obj_.original_tagname_ = 'print-preferences'
        elif nodeName_ == 'settlement-info':
            obj_ = AuthSettlementInfoType.factory()
            obj_.build(child_)
            self.settlement_info = obj_
            obj_.original_tagname_ = 'settlement-info'
        elif nodeName_ == 'references':
            obj_ = ReferencesType.factory()
            obj_.build(child_)
            self.references = obj_
            obj_.original_tagname_ = 'references'
        elif nodeName_ == 'notifications':
            obj_ = NotificationsType.factory()
            obj_.build(child_)
            self.notifications = obj_
            obj_.original_tagname_ = 'notifications'
# end class AuthorizedReturnType


class AuthSettlementInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, paid_by_customer=None, contract_id=None):
        self.original_tagname_ = None
        self.paid_by_customer = paid_by_customer
        self.contract_id = contract_id
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthSettlementInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthSettlementInfoType.subclass:
            return AuthSettlementInfoType.subclass(*args_, **kwargs_)
        else:
            return AuthSettlementInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_paid_by_customer(self): return self.paid_by_customer
    def set_paid_by_customer(self, paid_by_customer): self.paid_by_customer = paid_by_customer
    def get_contract_id(self): return self.contract_id
    def set_contract_id(self, contract_id): self.contract_id = contract_id
    def hasContent_(self):
        if (
            self.paid_by_customer is not None or
            self.contract_id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AuthSettlementInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthSettlementInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthSettlementInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AuthSettlementInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AuthSettlementInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AuthSettlementInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.paid_by_customer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<paid-by-customer>%s</paid-by-customer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.paid_by_customer), input_name='paid-by-customer')), eol_))
        if self.contract_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<contract-id>%s</contract-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.contract_id), input_name='contract-id')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'paid-by-customer':
            paid_by_customer_ = child_.text
            paid_by_customer_ = self.gds_validate_string(paid_by_customer_, node, 'paid_by_customer')
            self.paid_by_customer = paid_by_customer_
        elif nodeName_ == 'contract-id':
            contract_id_ = child_.text
            contract_id_ = self.gds_validate_string(contract_id_, node, 'contract_id')
            self.contract_id = contract_id_
# end class AuthSettlementInfoType


class ReturnerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, domestic_address=None):
        self.original_tagname_ = None
        self.name = name
        self.validate_ContactNameType(self.name)
        self.company = company
        self.validate_CompanyNameType(self.company)
        self.domestic_address = domestic_address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnerType.subclass:
            return ReturnerType.subclass(*args_, **kwargs_)
        else:
            return ReturnerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    def get_domestic_address(self): return self.domestic_address
    def set_domestic_address(self, domestic_address): self.domestic_address = domestic_address
    def validate_ContactNameType(self, value):
        # Validate type ContactNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ContactNameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ContactNameType' % {"value" : value} )
    def validate_CompanyNameType(self, value):
        # Validate type CompanyNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CompanyNameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CompanyNameType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.domestic_address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReturnerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReturnerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReturnerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReturnerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<company>%s</company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), eol_))
        if self.domestic_address is not None:
            self.domestic_address.export(outfile, level, namespace_, name_='domestic-address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type ContactNameType
            self.validate_ContactNameType(self.name)
        elif nodeName_ == 'company':
            company_ = child_.text
            company_ = self.gds_validate_string(company_, node, 'company')
            self.company = company_
            # validate type CompanyNameType
            self.validate_CompanyNameType(self.company)
        elif nodeName_ == 'domestic-address':
            obj_ = DomesticAddressDetailsType.factory()
            obj_.build(child_)
            self.domestic_address = obj_
            obj_.original_tagname_ = 'domestic-address'
# end class ReturnerType


class ReceiverType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, email=None, receiver_voice_number=None, domestic_address=None):
        self.original_tagname_ = None
        self.name = name
        self.validate_ContactNameType(self.name)
        self.company = company
        self.validate_CompanyNameType(self.company)
        self.email = email
        self.validate_EmailType(self.email)
        self.receiver_voice_number = receiver_voice_number
        self.domestic_address = domestic_address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiverType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiverType.subclass:
            return ReceiverType.subclass(*args_, **kwargs_)
        else:
            return ReceiverType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_receiver_voice_number(self): return self.receiver_voice_number
    def set_receiver_voice_number(self, receiver_voice_number): self.receiver_voice_number = receiver_voice_number
    def get_domestic_address(self): return self.domestic_address
    def set_domestic_address(self, domestic_address): self.domestic_address = domestic_address
    def validate_ContactNameType(self, value):
        # Validate type ContactNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ContactNameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ContactNameType' % {"value" : value} )
    def validate_CompanyNameType(self, value):
        # Validate type CompanyNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CompanyNameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CompanyNameType' % {"value" : value} )
    def validate_EmailType(self, value):
        # Validate type EmailType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on EmailType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_EmailType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EmailType_patterns_, ))
    validate_EmailType_patterns_ = [["^(['_A-Za-z0-9\\-\\+]+)(\\.['_A-Za-z0-9\\-\\+]+)*@([A-Za-z0-9-]+)(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,5})$"]]
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.email is not None or
            self.receiver_voice_number is not None or
            self.domestic_address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReceiverType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiverType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReceiverType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReceiverType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReceiverType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReceiverType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<company>%s</company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), eol_))
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<email>%s</email>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), eol_))
        if self.receiver_voice_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<receiver-voice-number>%s</receiver-voice-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.receiver_voice_number), input_name='receiver-voice-number')), eol_))
        if self.domestic_address is not None:
            self.domestic_address.export(outfile, level, namespace_, name_='domestic-address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type ContactNameType
            self.validate_ContactNameType(self.name)
        elif nodeName_ == 'company':
            company_ = child_.text
            company_ = self.gds_validate_string(company_, node, 'company')
            self.company = company_
            # validate type CompanyNameType
            self.validate_CompanyNameType(self.company)
        elif nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
            # validate type EmailType
            self.validate_EmailType(self.email)
        elif nodeName_ == 'receiver-voice-number':
            receiver_voice_number_ = child_.text
            receiver_voice_number_ = self.gds_validate_string(receiver_voice_number_, node, 'receiver_voice_number')
            self.receiver_voice_number = receiver_voice_number_
        elif nodeName_ == 'domestic-address':
            obj_ = DomesticAddressDetailsType.factory()
            obj_.build(child_)
            self.domestic_address = obj_
            obj_.original_tagname_ = 'domestic-address'
# end class ReceiverType


class ReferencesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customer_ref_1=None, customer_ref_2=None):
        self.original_tagname_ = None
        self.customer_ref_1 = customer_ref_1
        self.validate_customer_ref_1Type(self.customer_ref_1)
        self.customer_ref_2 = customer_ref_2
        self.validate_customer_ref_2Type(self.customer_ref_2)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType.subclass:
            return ReferencesType.subclass(*args_, **kwargs_)
        else:
            return ReferencesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customer_ref_1(self): return self.customer_ref_1
    def set_customer_ref_1(self, customer_ref_1): self.customer_ref_1 = customer_ref_1
    def get_customer_ref_2(self): return self.customer_ref_2
    def set_customer_ref_2(self, customer_ref_2): self.customer_ref_2 = customer_ref_2
    def validate_customer_ref_1Type(self, value):
        # Validate type customer-ref-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on customer-ref-1Type' % {"value" : value} )
    def validate_customer_ref_2Type(self, value):
        # Validate type customer-ref-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on customer-ref-2Type' % {"value" : value} )
    def hasContent_(self):
        if (
            self.customer_ref_1 is not None or
            self.customer_ref_2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferencesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customer_ref_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-ref-1>%s</customer-ref-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_ref_1), input_name='customer-ref-1')), eol_))
        if self.customer_ref_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-ref-2>%s</customer-ref-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_ref_2), input_name='customer-ref-2')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customer-ref-1':
            customer_ref_1_ = child_.text
            customer_ref_1_ = self.gds_validate_string(customer_ref_1_, node, 'customer_ref_1')
            self.customer_ref_1 = customer_ref_1_
            # validate type customer-ref-1Type
            self.validate_customer_ref_1Type(self.customer_ref_1)
        elif nodeName_ == 'customer-ref-2':
            customer_ref_2_ = child_.text
            customer_ref_2_ = self.gds_validate_string(customer_ref_2_, node, 'customer_ref_2')
            self.customer_ref_2 = customer_ref_2_
            # validate type customer-ref-2Type
            self.validate_customer_ref_2Type(self.customer_ref_2)
# end class ReferencesType


class DomesticAddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, province=None, postal_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type(self.address_line_2)
        self.city = city
        self.validate_cityType(self.city)
        self.province = province
        self.postal_code = postal_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomesticAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomesticAddressDetailsType.subclass:
            return DomesticAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return DomesticAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_province(self): return self.province
    def set_province(self, province): self.province = province
    def get_postal_code(self): return self.postal_code
    def set_postal_code(self, postal_code): self.postal_code = postal_code
    def validate_address_line_1Type(self, value):
        # Validate type address-line-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type' % {"value" : value} )
    def validate_address_line_2Type(self, value):
        # Validate type address-line-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type' % {"value" : value} )
    def validate_cityType(self, value):
        # Validate type cityType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.province is not None or
            self.postal_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomesticAddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomesticAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomesticAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomesticAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomesticAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomesticAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<province>%s</province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.province), input_name='province')), eol_))
        if self.postal_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-code>%s</postal-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_code), input_name='postal-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type
            self.validate_address_line_1Type(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type
            self.validate_address_line_2Type(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType
            self.validate_cityType(self.city)
        elif nodeName_ == 'province':
            province_ = child_.text
            province_ = self.gds_validate_string(province_, node, 'province')
            self.province = province_
        elif nodeName_ == 'postal-code':
            postal_code_ = child_.text
            postal_code_ = self.gds_validate_string(postal_code_, node, 'postal_code')
            self.postal_code = postal_code_
# end class DomesticAddressDetailsType


class ParcelCharacteristicsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, weight=None, dimensions=None):
        self.original_tagname_ = None
        self.weight = weight
        self.validate_weightType(self.weight)
        self.dimensions = dimensions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParcelCharacteristicsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParcelCharacteristicsType.subclass:
            return ParcelCharacteristicsType.subclass(*args_, **kwargs_)
        else:
            return ParcelCharacteristicsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_weight(self): return self.weight
    def set_weight(self, weight): self.weight = weight
    def get_dimensions(self): return self.dimensions
    def set_dimensions(self, dimensions): self.dimensions = dimensions
    def validate_weightType(self, value):
        # Validate type weightType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 999.999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on weightType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on weightType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.weight is not None or
            self.dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ParcelCharacteristicsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParcelCharacteristicsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParcelCharacteristicsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ParcelCharacteristicsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ParcelCharacteristicsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ParcelCharacteristicsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<weight>%s</weight>%s' % (self.gds_format_float(self.weight, input_name='weight'), eol_))
        if self.dimensions is not None:
            self.dimensions.export(outfile, level, namespace_, name_='dimensions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'weight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            # validate type weightType
            self.validate_weightType(self.weight)
        elif nodeName_ == 'dimensions':
            obj_ = dimensionsType.factory()
            obj_.build(child_)
            self.dimensions = obj_
            obj_.original_tagname_ = 'dimensions'
# end class ParcelCharacteristicsType


class PrintPreferencesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, output_format=None, encoding=None, show_packing_instructions=True):
        self.original_tagname_ = None
        self.output_format = output_format
        self.validate_output_formatType(self.output_format)
        self.encoding = encoding
        self.validate_encodingType(self.encoding)
        self.show_packing_instructions = show_packing_instructions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrintPreferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrintPreferencesType.subclass:
            return PrintPreferencesType.subclass(*args_, **kwargs_)
        else:
            return PrintPreferencesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_output_format(self): return self.output_format
    def set_output_format(self, output_format): self.output_format = output_format
    def get_encoding(self): return self.encoding
    def set_encoding(self, encoding): self.encoding = encoding
    def get_show_packing_instructions(self): return self.show_packing_instructions
    def set_show_packing_instructions(self, show_packing_instructions): self.show_packing_instructions = show_packing_instructions
    def validate_output_formatType(self, value):
        # Validate type output-formatType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['8.5x11', '4x6', '3x5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on output-formatType' % {"value" : value.encode("utf-8")} )
    def validate_encodingType(self, value):
        # Validate type encodingType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PDF', 'ZPL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on encodingType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.output_format is not None or
            self.encoding is not None or
            not self.show_packing_instructions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrintPreferencesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrintPreferencesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrintPreferencesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrintPreferencesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrintPreferencesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PrintPreferencesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.output_format is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<output-format>%s</output-format>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.output_format), input_name='output-format')), eol_))
        if self.encoding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<encoding>%s</encoding>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.encoding), input_name='encoding')), eol_))
        if not self.show_packing_instructions:
            showIndent(outfile, level, pretty_print)
            outfile.write('<show-packing-instructions>%s</show-packing-instructions>%s' % (self.gds_format_boolean(self.show_packing_instructions, input_name='show-packing-instructions'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'output-format':
            output_format_ = child_.text
            output_format_ = self.gds_validate_string(output_format_, node, 'output_format')
            self.output_format = output_format_
            # validate type output-formatType
            self.validate_output_formatType(self.output_format)
        elif nodeName_ == 'encoding':
            encoding_ = child_.text
            encoding_ = self.gds_validate_string(encoding_, node, 'encoding')
            self.encoding = encoding_
            # validate type encodingType
            self.validate_encodingType(self.encoding)
        elif nodeName_ == 'show-packing-instructions':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'show_packing_instructions')
            self.show_packing_instructions = ival_
# end class PrintPreferencesType


class NotificationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, notification=None, email_subject=None):
        self.original_tagname_ = None
        if notification is None:
            self.notification = []
        else:
            self.notification = notification
        self.email_subject = email_subject
        self.validate_email_subjectType(self.email_subject)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationsType.subclass:
            return NotificationsType.subclass(*args_, **kwargs_)
        else:
            return NotificationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_notification(self): return self.notification
    def set_notification(self, notification): self.notification = notification
    def add_notification(self, value): self.notification.append(value)
    def insert_notification_at(self, index, value): self.notification.insert(index, value)
    def replace_notification_at(self, index, value): self.notification[index] = value
    def get_email_subject(self): return self.email_subject
    def set_email_subject(self, email_subject): self.email_subject = email_subject
    def validate_email_subjectType(self, value):
        # Validate type email-subjectType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['tracking', 'customer-ref-1', 'customer-ref-2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on email-subjectType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.notification or
            self.email_subject is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotificationsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotificationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotificationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotificationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for notification_ in self.notification:
            notification_.export(outfile, level, namespace_, name_='notification', pretty_print=pretty_print)
        if self.email_subject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<email-subject>%s</email-subject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.email_subject), input_name='email-subject')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'notification':
            obj_ = notificationType.factory()
            obj_.build(child_)
            self.notification.append(obj_)
            obj_.original_tagname_ = 'notification'
        elif nodeName_ == 'email-subject':
            email_subject_ = child_.text
            email_subject_ = self.gds_validate_string(email_subject_, node, 'email_subject')
            self.email_subject = email_subject_
            # validate type email-subjectType
            self.validate_email_subjectType(self.email_subject)
# end class NotificationsType


class dimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, length=None, width=None, height=None):
        self.original_tagname_ = None
        self.length = length
        self.width = width
        self.height = height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dimensionsType.subclass:
            return dimensionsType.subclass(*args_, **kwargs_)
        else:
            return dimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def hasContent_(self):
        if (
            self.length is not None or
            self.width is not None or
            self.height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<length>%s</length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.length), input_name='length')), eol_))
        if self.width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<width>%s</width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.width), input_name='width')), eol_))
        if self.height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<height>%s</height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.height), input_name='height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'length':
            length_ = child_.text
            length_ = self.gds_validate_string(length_, node, 'length')
            self.length = length_
        elif nodeName_ == 'width':
            width_ = child_.text
            width_ = self.gds_validate_string(width_, node, 'width')
            self.width = width_
        elif nodeName_ == 'height':
            height_ = child_.text
            height_ = self.gds_validate_string(height_, node, 'height')
            self.height = height_
# end class dimensionsType


class notificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, email=None, on_shipment=None, on_exception=None, on_delivery=None):
        self.original_tagname_ = None
        self.email = email
        self.validate_EmailType(self.email)
        self.on_shipment = on_shipment
        self.on_exception = on_exception
        self.on_delivery = on_delivery
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, notificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if notificationType.subclass:
            return notificationType.subclass(*args_, **kwargs_)
        else:
            return notificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_on_shipment(self): return self.on_shipment
    def set_on_shipment(self, on_shipment): self.on_shipment = on_shipment
    def get_on_exception(self): return self.on_exception
    def set_on_exception(self, on_exception): self.on_exception = on_exception
    def get_on_delivery(self): return self.on_delivery
    def set_on_delivery(self, on_delivery): self.on_delivery = on_delivery
    def validate_EmailType(self, value):
        # Validate type EmailType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on EmailType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_EmailType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EmailType_patterns_, ))
    validate_EmailType_patterns_ = [["^(['_A-Za-z0-9\\-\\+]+)(\\.['_A-Za-z0-9\\-\\+]+)*@([A-Za-z0-9-]+)(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,5})$"]]
    def hasContent_(self):
        if (
            self.email is not None or
            self.on_shipment is not None or
            self.on_exception is not None or
            self.on_delivery is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='notificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('notificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='notificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notificationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<email>%s</email>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), eol_))
        if self.on_shipment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<on-shipment>%s</on-shipment>%s' % (self.gds_format_boolean(self.on_shipment, input_name='on-shipment'), eol_))
        if self.on_exception is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<on-exception>%s</on-exception>%s' % (self.gds_format_boolean(self.on_exception, input_name='on-exception'), eol_))
        if self.on_delivery is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<on-delivery>%s</on-delivery>%s' % (self.gds_format_boolean(self.on_delivery, input_name='on-delivery'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
            # validate type EmailType
            self.validate_EmailType(self.email)
        elif nodeName_ == 'on-shipment':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'on_shipment')
            self.on_shipment = ival_
        elif nodeName_ == 'on-exception':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'on_exception')
            self.on_exception = ival_
        elif nodeName_ == 'on-delivery':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'on_delivery')
            self.on_delivery = ival_
# end class notificationType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AuthorizedReturnType'
        rootClass = AuthorizedReturnType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AuthorizedReturnType'
        rootClass = AuthorizedReturnType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AuthorizedReturnType'
        rootClass = AuthorizedReturnType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AuthorizedReturnType'
        rootClass = AuthorizedReturnType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from authreturn import *\n\n')
        sys.stdout.write('import authreturn as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AuthSettlementInfoType",
    "AuthorizedReturnInfoType",
    "AuthorizedReturnType",
    "DomesticAddressDetailsType",
    "NotificationsType",
    "ParcelCharacteristicsType",
    "PrintPreferencesType",
    "ReceiverType",
    "ReferencesType",
    "ReturnerType",
    "dimensionsType",
    "notificationType"
]
