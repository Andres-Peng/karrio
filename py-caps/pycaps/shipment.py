#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jun 13 20:26:50 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './pycanada_post/shipment.py')
#
# Command line arguments:
#   /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/shipment.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "./pycanada_post/shipment.py" /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/shipment.xsd
#
# Current working directory (os.getcwd()):
#   py-canada_post
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class GroupsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, group=None):
        self.original_tagname_ = None
        if group is None:
            self.group = []
        else:
            self.group = group
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroupsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroupsType.subclass:
            return GroupsType.subclass(*args_, **kwargs_)
        else:
            return GroupsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_group(self): return self.group
    def set_group(self, group): self.group = group
    def add_group(self, value): self.group.append(value)
    def insert_group_at(self, index, value): self.group.insert(index, value)
    def replace_group_at(self, index, value): self.group[index] = value
    def hasContent_(self):
        if (
            self.group
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GroupsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GroupsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroupsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GroupsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GroupsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GroupsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for group_ in self.group:
            group_.export(outfile, level, namespace_, name_='group', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'group':
            obj_ = GroupType.factory()
            obj_.build(child_)
            self.group.append(obj_)
            obj_.original_tagname_ = 'group'
# end class GroupsType


class GroupType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, group_id=None, link=None):
        self.original_tagname_ = None
        self.group_id = group_id
        self.validate_GroupIDType(self.group_id)
        self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroupType.subclass:
            return GroupType.subclass(*args_, **kwargs_)
        else:
            return GroupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_group_id(self): return self.group_id
    def set_group_id(self, group_id): self.group_id = group_id
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def validate_GroupIDType(self, value):
        # Validate type GroupIDType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on GroupIDType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on GroupIDType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.group_id is not None or
            self.link is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GroupType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GroupType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GroupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GroupType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GroupType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.group_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<group-id>%s</group-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.group_id), input_name='group-id')), eol_))
        if self.link is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<link>%s</link>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.link), input_name='link')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'group-id':
            group_id_ = child_.text
            group_id_ = self.gds_validate_string(group_id_, node, 'group_id')
            self.group_id = group_id_
            # validate type GroupIDType
            self.validate_GroupIDType(self.group_id)
        elif nodeName_ == 'link':
            link_ = child_.text
            link_ = self.gds_validate_string(link_, node, 'link')
            self.link = link_
# end class GroupType


class ShipmentPriceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, base_amount=None, priced_options=None, adjustments=None, pre_tax_amount=None, gst_amount=None, pst_amount=None, hst_amount=None, due_amount=None, service_standard=None, rated_weight=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.base_amount = base_amount
        self.priced_options = priced_options
        self.adjustments = adjustments
        self.pre_tax_amount = pre_tax_amount
        self.gst_amount = gst_amount
        self.pst_amount = pst_amount
        self.hst_amount = hst_amount
        self.due_amount = due_amount
        self.service_standard = service_standard
        self.rated_weight = rated_weight
        self.validate_rated_weightType(self.rated_weight)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentPriceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentPriceType.subclass:
            return ShipmentPriceType.subclass(*args_, **kwargs_)
        else:
            return ShipmentPriceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_base_amount(self): return self.base_amount
    def set_base_amount(self, base_amount): self.base_amount = base_amount
    def get_priced_options(self): return self.priced_options
    def set_priced_options(self, priced_options): self.priced_options = priced_options
    def get_adjustments(self): return self.adjustments
    def set_adjustments(self, adjustments): self.adjustments = adjustments
    def get_pre_tax_amount(self): return self.pre_tax_amount
    def set_pre_tax_amount(self, pre_tax_amount): self.pre_tax_amount = pre_tax_amount
    def get_gst_amount(self): return self.gst_amount
    def set_gst_amount(self, gst_amount): self.gst_amount = gst_amount
    def get_pst_amount(self): return self.pst_amount
    def set_pst_amount(self, pst_amount): self.pst_amount = pst_amount
    def get_hst_amount(self): return self.hst_amount
    def set_hst_amount(self, hst_amount): self.hst_amount = hst_amount
    def get_due_amount(self): return self.due_amount
    def set_due_amount(self, due_amount): self.due_amount = due_amount
    def get_service_standard(self): return self.service_standard
    def set_service_standard(self, service_standard): self.service_standard = service_standard
    def get_rated_weight(self): return self.rated_weight
    def set_rated_weight(self, rated_weight): self.rated_weight = rated_weight
    def validate_rated_weightType(self, value):
        # Validate type rated-weightType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 999.999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on rated-weightType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on rated-weightType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.base_amount is not None or
            self.priced_options is not None or
            self.adjustments is not None or
            self.pre_tax_amount is not None or
            self.gst_amount is not None or
            self.pst_amount is not None or
            self.hst_amount is not None or
            self.due_amount is not None or
            self.service_standard is not None or
            self.rated_weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentPriceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentPriceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentPriceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentPriceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentPriceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentPriceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.base_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<base-amount>%s</base-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.base_amount), input_name='base-amount')), eol_))
        if self.priced_options is not None:
            self.priced_options.export(outfile, level, namespace_, name_='priced-options', pretty_print=pretty_print)
        if self.adjustments is not None:
            self.adjustments.export(outfile, level, namespace_, name_='adjustments', pretty_print=pretty_print)
        if self.pre_tax_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pre-tax-amount>%s</pre-tax-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.pre_tax_amount), input_name='pre-tax-amount')), eol_))
        if self.gst_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<gst-amount>%s</gst-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.gst_amount), input_name='gst-amount')), eol_))
        if self.pst_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pst-amount>%s</pst-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.pst_amount), input_name='pst-amount')), eol_))
        if self.hst_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<hst-amount>%s</hst-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.hst_amount), input_name='hst-amount')), eol_))
        if self.due_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<due-amount>%s</due-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.due_amount), input_name='due-amount')), eol_))
        if self.service_standard is not None:
            self.service_standard.export(outfile, level, namespace_, name_='service-standard', pretty_print=pretty_print)
        if self.rated_weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rated-weight>%s</rated-weight>%s' % (self.gds_format_float(self.rated_weight, input_name='rated-weight'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
        elif nodeName_ == 'base-amount':
            base_amount_ = child_.text
            base_amount_ = self.gds_validate_string(base_amount_, node, 'base_amount')
            self.base_amount = base_amount_
        elif nodeName_ == 'priced-options':
            obj_ = PricedOptionsType.factory()
            obj_.build(child_)
            self.priced_options = obj_
            obj_.original_tagname_ = 'priced-options'
        elif nodeName_ == 'adjustments':
            obj_ = AdjustmentsType.factory()
            obj_.build(child_)
            self.adjustments = obj_
            obj_.original_tagname_ = 'adjustments'
        elif nodeName_ == 'pre-tax-amount':
            pre_tax_amount_ = child_.text
            pre_tax_amount_ = self.gds_validate_string(pre_tax_amount_, node, 'pre_tax_amount')
            self.pre_tax_amount = pre_tax_amount_
        elif nodeName_ == 'gst-amount':
            gst_amount_ = child_.text
            gst_amount_ = self.gds_validate_string(gst_amount_, node, 'gst_amount')
            self.gst_amount = gst_amount_
        elif nodeName_ == 'pst-amount':
            pst_amount_ = child_.text
            pst_amount_ = self.gds_validate_string(pst_amount_, node, 'pst_amount')
            self.pst_amount = pst_amount_
        elif nodeName_ == 'hst-amount':
            hst_amount_ = child_.text
            hst_amount_ = self.gds_validate_string(hst_amount_, node, 'hst_amount')
            self.hst_amount = hst_amount_
        elif nodeName_ == 'due-amount':
            due_amount_ = child_.text
            due_amount_ = self.gds_validate_string(due_amount_, node, 'due_amount')
            self.due_amount = due_amount_
        elif nodeName_ == 'service-standard':
            obj_ = ServiceStandardType.factory()
            obj_.build(child_)
            self.service_standard = obj_
            obj_.original_tagname_ = 'service-standard'
        elif nodeName_ == 'rated-weight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'rated_weight')
            self.rated_weight = fval_
            # validate type rated-weightType
            self.validate_rated_weightType(self.rated_weight)
# end class ShipmentPriceType


class ServiceStandardType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, am_delivery=None, guaranteed_delivery=None, expected_transmit_time=None, expected_delivery_date=None):
        self.original_tagname_ = None
        self.am_delivery = am_delivery
        self.guaranteed_delivery = guaranteed_delivery
        self.expected_transmit_time = expected_transmit_time
        self.validate_expected_transmit_timeType(self.expected_transmit_time)
        if isinstance(expected_delivery_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(expected_delivery_date, '%Y-%m-%d').date()
        else:
            initvalue_ = expected_delivery_date
        self.expected_delivery_date = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceStandardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceStandardType.subclass:
            return ServiceStandardType.subclass(*args_, **kwargs_)
        else:
            return ServiceStandardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_am_delivery(self): return self.am_delivery
    def set_am_delivery(self, am_delivery): self.am_delivery = am_delivery
    def get_guaranteed_delivery(self): return self.guaranteed_delivery
    def set_guaranteed_delivery(self, guaranteed_delivery): self.guaranteed_delivery = guaranteed_delivery
    def get_expected_transmit_time(self): return self.expected_transmit_time
    def set_expected_transmit_time(self, expected_transmit_time): self.expected_transmit_time = expected_transmit_time
    def get_expected_delivery_date(self): return self.expected_delivery_date
    def set_expected_delivery_date(self, expected_delivery_date): self.expected_delivery_date = expected_delivery_date
    def validate_expected_transmit_timeType(self, value):
        # Validate type expected-transmit-timeType, a restriction on xsd:integer.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on expected-transmit-timeType' % {"value" : value} )
            if value > 99:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on expected-transmit-timeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.am_delivery is not None or
            self.guaranteed_delivery is not None or
            self.expected_transmit_time is not None or
            self.expected_delivery_date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceStandardType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceStandardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceStandardType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceStandardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceStandardType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceStandardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.am_delivery is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<am-delivery>%s</am-delivery>%s' % (self.gds_format_boolean(self.am_delivery, input_name='am-delivery'), eol_))
        if self.guaranteed_delivery is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<guaranteed-delivery>%s</guaranteed-delivery>%s' % (self.gds_format_boolean(self.guaranteed_delivery, input_name='guaranteed-delivery'), eol_))
        if self.expected_transmit_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<expected-transmit-time>%s</expected-transmit-time>%s' % (self.gds_format_integer(self.expected_transmit_time, input_name='expected-transmit-time'), eol_))
        if self.expected_delivery_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<expected-delivery-date>%s</expected-delivery-date>%s' % (self.gds_format_date(self.expected_delivery_date, input_name='expected-delivery-date'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'am-delivery':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'am_delivery')
            self.am_delivery = ival_
        elif nodeName_ == 'guaranteed-delivery':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'guaranteed_delivery')
            self.guaranteed_delivery = ival_
        elif nodeName_ == 'expected-transmit-time':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'expected_transmit_time')
            self.expected_transmit_time = ival_
            # validate type expected-transmit-timeType
            self.validate_expected_transmit_timeType(self.expected_transmit_time)
        elif nodeName_ == 'expected-delivery-date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.expected_delivery_date = dval_
# end class ServiceStandardType


class PricedOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, priced_option=None):
        self.original_tagname_ = None
        if priced_option is None:
            self.priced_option = []
        else:
            self.priced_option = priced_option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PricedOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PricedOptionsType.subclass:
            return PricedOptionsType.subclass(*args_, **kwargs_)
        else:
            return PricedOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_priced_option(self): return self.priced_option
    def set_priced_option(self, priced_option): self.priced_option = priced_option
    def add_priced_option(self, value): self.priced_option.append(value)
    def insert_priced_option_at(self, index, value): self.priced_option.insert(index, value)
    def replace_priced_option_at(self, index, value): self.priced_option[index] = value
    def hasContent_(self):
        if (
            self.priced_option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PricedOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PricedOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PricedOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PricedOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PricedOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PricedOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for priced_option_ in self.priced_option:
            priced_option_.export(outfile, level, namespace_, name_='priced-option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'priced-option':
            obj_ = PricedOptionType.factory()
            obj_.build(child_)
            self.priced_option.append(obj_)
            obj_.original_tagname_ = 'priced-option'
# end class PricedOptionsType


class PricedOptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None, option_price=None):
        self.original_tagname_ = None
        self.option_code = option_code
        self.option_price = option_price
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PricedOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PricedOptionType.subclass:
            return PricedOptionType.subclass(*args_, **kwargs_)
        else:
            return PricedOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def get_option_price(self): return self.option_price
    def set_option_price(self, option_price): self.option_price = option_price
    def hasContent_(self):
        if (
            self.option_code is not None or
            self.option_price is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PricedOptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PricedOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PricedOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PricedOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PricedOptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PricedOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.option_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_code), input_name='option-code')), eol_))
        if self.option_price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-price>%s</option-price>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_price), input_name='option-price')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code = option_code_
        elif nodeName_ == 'option-price':
            option_price_ = child_.text
            option_price_ = self.gds_validate_string(option_price_, node, 'option_price')
            self.option_price = option_price_
# end class PricedOptionType


class AdjustmentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, adjustment=None):
        self.original_tagname_ = None
        if adjustment is None:
            self.adjustment = []
        else:
            self.adjustment = adjustment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdjustmentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdjustmentsType.subclass:
            return AdjustmentsType.subclass(*args_, **kwargs_)
        else:
            return AdjustmentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_adjustment(self): return self.adjustment
    def set_adjustment(self, adjustment): self.adjustment = adjustment
    def add_adjustment(self, value): self.adjustment.append(value)
    def insert_adjustment_at(self, index, value): self.adjustment.insert(index, value)
    def replace_adjustment_at(self, index, value): self.adjustment[index] = value
    def hasContent_(self):
        if (
            self.adjustment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdjustmentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdjustmentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdjustmentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdjustmentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdjustmentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdjustmentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for adjustment_ in self.adjustment:
            adjustment_.export(outfile, level, namespace_, name_='adjustment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'adjustment':
            obj_ = AdjustmentType.factory()
            obj_.build(child_)
            self.adjustment.append(obj_)
            obj_.original_tagname_ = 'adjustment'
# end class AdjustmentsType


class AdjustmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, adjustment_code=None, adjustment_amount=None):
        self.original_tagname_ = None
        self.adjustment_code = adjustment_code
        self.adjustment_amount = adjustment_amount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdjustmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdjustmentType.subclass:
            return AdjustmentType.subclass(*args_, **kwargs_)
        else:
            return AdjustmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_adjustment_code(self): return self.adjustment_code
    def set_adjustment_code(self, adjustment_code): self.adjustment_code = adjustment_code
    def get_adjustment_amount(self): return self.adjustment_amount
    def set_adjustment_amount(self, adjustment_amount): self.adjustment_amount = adjustment_amount
    def hasContent_(self):
        if (
            self.adjustment_code is not None or
            self.adjustment_amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdjustmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdjustmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdjustmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdjustmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdjustmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdjustmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.adjustment_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<adjustment-code>%s</adjustment-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.adjustment_code), input_name='adjustment-code')), eol_))
        if self.adjustment_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<adjustment-amount>%s</adjustment-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.adjustment_amount), input_name='adjustment-amount')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'adjustment-code':
            adjustment_code_ = child_.text
            adjustment_code_ = self.gds_validate_string(adjustment_code_, node, 'adjustment_code')
            self.adjustment_code = adjustment_code_
        elif nodeName_ == 'adjustment-amount':
            adjustment_amount_ = child_.text
            adjustment_amount_ = self.gds_validate_string(adjustment_amount_, node, 'adjustment_amount')
            self.adjustment_amount = adjustment_amount_
# end class AdjustmentType


class ShipmentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None, shipment_info=None):
        self.original_tagname_ = None
        if link is None:
            self.link = []
        else:
            self.link = link
        if shipment_info is None:
            self.shipment_info = []
        else:
            self.shipment_info = shipment_info
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentsType.subclass:
            return ShipmentsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link_at(self, index, value): self.link.insert(index, value)
    def replace_link_at(self, index, value): self.link[index] = value
    def get_shipment_info(self): return self.shipment_info
    def set_shipment_info(self, shipment_info): self.shipment_info = shipment_info
    def add_shipment_info(self, value): self.shipment_info.append(value)
    def insert_shipment_info_at(self, index, value): self.shipment_info.insert(index, value)
    def replace_shipment_info_at(self, index, value): self.shipment_info[index] = value
    def hasContent_(self):
        if (
            self.link or
            self.shipment_info
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for link_ in self.link:
            showIndent(outfile, level, pretty_print)
            outfile.write('<link>%s</link>%s' % (self.gds_encode(self.gds_format_string(quote_xml(link_), input_name='link')), eol_))
        for shipment_info_ in self.shipment_info:
            shipment_info_.export(outfile, level, namespace_, name_='shipment-info', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'link':
            link_ = child_.text
            link_ = self.gds_validate_string(link_, node, 'link')
            self.link.append(link_)
        elif nodeName_ == 'shipment-info':
            obj_ = ShipmentInfoType.factory()
            obj_.build(child_)
            self.shipment_info.append(obj_)
            obj_.original_tagname_ = 'shipment-info'
# end class ShipmentsType


class ShipmentInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customer_request_id=None, shipment_id=None, shipment_status=None, tracking_pin=None, return_tracking_pin=None, po_number=None, shipment_price=None, shipment_receipt=None, links=None):
        self.original_tagname_ = None
        self.customer_request_id = customer_request_id
        self.validate_CustomerRequestIdType(self.customer_request_id)
        self.shipment_id = shipment_id
        self.validate_ShipmentIDType(self.shipment_id)
        self.shipment_status = shipment_status
        self.validate_ShipmentStatusType(self.shipment_status)
        self.tracking_pin = tracking_pin
        self.validate_TrackingPINType(self.tracking_pin)
        self.return_tracking_pin = return_tracking_pin
        self.validate_TrackingPINType(self.return_tracking_pin)
        self.po_number = po_number
        self.shipment_price = shipment_price
        self.shipment_receipt = shipment_receipt
        self.links = links
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentInfoType.subclass:
            return ShipmentInfoType.subclass(*args_, **kwargs_)
        else:
            return ShipmentInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customer_request_id(self): return self.customer_request_id
    def set_customer_request_id(self, customer_request_id): self.customer_request_id = customer_request_id
    def get_shipment_id(self): return self.shipment_id
    def set_shipment_id(self, shipment_id): self.shipment_id = shipment_id
    def get_shipment_status(self): return self.shipment_status
    def set_shipment_status(self, shipment_status): self.shipment_status = shipment_status
    def get_tracking_pin(self): return self.tracking_pin
    def set_tracking_pin(self, tracking_pin): self.tracking_pin = tracking_pin
    def get_return_tracking_pin(self): return self.return_tracking_pin
    def set_return_tracking_pin(self, return_tracking_pin): self.return_tracking_pin = return_tracking_pin
    def get_po_number(self): return self.po_number
    def set_po_number(self, po_number): self.po_number = po_number
    def get_shipment_price(self): return self.shipment_price
    def set_shipment_price(self, shipment_price): self.shipment_price = shipment_price
    def get_shipment_receipt(self): return self.shipment_receipt
    def set_shipment_receipt(self, shipment_receipt): self.shipment_receipt = shipment_receipt
    def get_links(self): return self.links
    def set_links(self, links): self.links = links
    def validate_CustomerRequestIdType(self, value):
        # Validate type CustomerRequestIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CustomerRequestIdType' % {"value" : value} )
    def validate_ShipmentIDType(self, value):
        # Validate type ShipmentIDType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ShipmentIDType' % {"value" : value} )
    def validate_ShipmentStatusType(self, value):
        # Validate type ShipmentStatusType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ShipmentStatusType' % {"value" : value} )
    def validate_TrackingPINType(self, value):
        # Validate type TrackingPINType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on TrackingPINType' % {"value" : value} )
            if len(str(value)) < 11:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on TrackingPINType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.customer_request_id is not None or
            self.shipment_id is not None or
            self.shipment_status is not None or
            self.tracking_pin is not None or
            self.return_tracking_pin is not None or
            self.po_number is not None or
            self.shipment_price is not None or
            self.shipment_receipt is not None or
            self.links is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customer_request_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-request-id>%s</customer-request-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_request_id), input_name='customer-request-id')), eol_))
        if self.shipment_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipment-id>%s</shipment-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipment_id), input_name='shipment-id')), eol_))
        if self.shipment_status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipment-status>%s</shipment-status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipment_status), input_name='shipment-status')), eol_))
        if self.tracking_pin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tracking-pin>%s</tracking-pin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tracking_pin), input_name='tracking-pin')), eol_))
        if self.return_tracking_pin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<return-tracking-pin>%s</return-tracking-pin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.return_tracking_pin), input_name='return-tracking-pin')), eol_))
        if self.po_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<po-number>%s</po-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.po_number), input_name='po-number')), eol_))
        if self.shipment_price is not None:
            self.shipment_price.export(outfile, level, namespace_, name_='shipment-price', pretty_print=pretty_print)
        if self.shipment_receipt is not None:
            self.shipment_receipt.export(outfile, level, namespace_, name_='shipment-receipt', pretty_print=pretty_print)
        if self.links is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<links>%s</links>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.links), input_name='links')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customer-request-id':
            customer_request_id_ = child_.text
            customer_request_id_ = self.gds_validate_string(customer_request_id_, node, 'customer_request_id')
            self.customer_request_id = customer_request_id_
            # validate type CustomerRequestIdType
            self.validate_CustomerRequestIdType(self.customer_request_id)
        elif nodeName_ == 'shipment-id':
            shipment_id_ = child_.text
            shipment_id_ = self.gds_validate_string(shipment_id_, node, 'shipment_id')
            self.shipment_id = shipment_id_
            # validate type ShipmentIDType
            self.validate_ShipmentIDType(self.shipment_id)
        elif nodeName_ == 'shipment-status':
            shipment_status_ = child_.text
            shipment_status_ = self.gds_validate_string(shipment_status_, node, 'shipment_status')
            self.shipment_status = shipment_status_
            # validate type ShipmentStatusType
            self.validate_ShipmentStatusType(self.shipment_status)
        elif nodeName_ == 'tracking-pin':
            tracking_pin_ = child_.text
            tracking_pin_ = self.gds_validate_string(tracking_pin_, node, 'tracking_pin')
            self.tracking_pin = tracking_pin_
            # validate type TrackingPINType
            self.validate_TrackingPINType(self.tracking_pin)
        elif nodeName_ == 'return-tracking-pin':
            return_tracking_pin_ = child_.text
            return_tracking_pin_ = self.gds_validate_string(return_tracking_pin_, node, 'return_tracking_pin')
            self.return_tracking_pin = return_tracking_pin_
            # validate type TrackingPINType
            self.validate_TrackingPINType(self.return_tracking_pin)
        elif nodeName_ == 'po-number':
            po_number_ = child_.text
            po_number_ = self.gds_validate_string(po_number_, node, 'po_number')
            self.po_number = po_number_
        elif nodeName_ == 'shipment-price':
            obj_ = ShipmentPriceType.factory()
            obj_.build(child_)
            self.shipment_price = obj_
            obj_.original_tagname_ = 'shipment-price'
        elif nodeName_ == 'shipment-receipt':
            obj_ = ShipmentReceiptType.factory()
            obj_.build(child_)
            self.shipment_receipt = obj_
            obj_.original_tagname_ = 'shipment-receipt'
        elif nodeName_ == 'links':
            links_ = child_.text
            links_ = self.gds_validate_string(links_, node, 'links')
            self.links = links_
# end class ShipmentInfoType


class groupIdOrTransmitShipment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, groupIdOrTransmitShipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if groupIdOrTransmitShipment.subclass:
            return groupIdOrTransmitShipment.subclass(*args_, **kwargs_)
        else:
            return groupIdOrTransmitShipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='groupIdOrTransmitShipment', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('groupIdOrTransmitShipment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='groupIdOrTransmitShipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='groupIdOrTransmitShipment', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='groupIdOrTransmitShipment'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='groupIdOrTransmitShipment', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class groupIdOrTransmitShipment


class ShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customer_request_id=None, groupIdOrTransmitShipment=None, quickship_label_requested=None, cpc_pickup_indicator=None, requested_shipping_point=None, shipping_point_id=None, expected_mailing_date=None, provide_pricing_info=None, provide_receipt_info=None, delivery_spec=None, return_spec=None, pre_authorized_payment=None):
        self.original_tagname_ = None
        self.customer_request_id = customer_request_id
        self.validate_CustomerRequestIdType(self.customer_request_id)
        self.groupIdOrTransmitShipment = groupIdOrTransmitShipment
        self.quickship_label_requested = quickship_label_requested
        self.cpc_pickup_indicator = cpc_pickup_indicator
        self.requested_shipping_point = requested_shipping_point
        self.shipping_point_id = shipping_point_id
        if isinstance(expected_mailing_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(expected_mailing_date, '%Y-%m-%d').date()
        else:
            initvalue_ = expected_mailing_date
        self.expected_mailing_date = initvalue_
        self.provide_pricing_info = provide_pricing_info
        self.provide_receipt_info = provide_receipt_info
        self.delivery_spec = delivery_spec
        self.return_spec = return_spec
        self.pre_authorized_payment = pre_authorized_payment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customer_request_id(self): return self.customer_request_id
    def set_customer_request_id(self, customer_request_id): self.customer_request_id = customer_request_id
    def get_groupIdOrTransmitShipment(self): return self.groupIdOrTransmitShipment
    def set_groupIdOrTransmitShipment(self, groupIdOrTransmitShipment): self.groupIdOrTransmitShipment = groupIdOrTransmitShipment
    def get_quickship_label_requested(self): return self.quickship_label_requested
    def set_quickship_label_requested(self, quickship_label_requested): self.quickship_label_requested = quickship_label_requested
    def get_cpc_pickup_indicator(self): return self.cpc_pickup_indicator
    def set_cpc_pickup_indicator(self, cpc_pickup_indicator): self.cpc_pickup_indicator = cpc_pickup_indicator
    def get_requested_shipping_point(self): return self.requested_shipping_point
    def set_requested_shipping_point(self, requested_shipping_point): self.requested_shipping_point = requested_shipping_point
    def get_shipping_point_id(self): return self.shipping_point_id
    def set_shipping_point_id(self, shipping_point_id): self.shipping_point_id = shipping_point_id
    def get_expected_mailing_date(self): return self.expected_mailing_date
    def set_expected_mailing_date(self, expected_mailing_date): self.expected_mailing_date = expected_mailing_date
    def get_provide_pricing_info(self): return self.provide_pricing_info
    def set_provide_pricing_info(self, provide_pricing_info): self.provide_pricing_info = provide_pricing_info
    def get_provide_receipt_info(self): return self.provide_receipt_info
    def set_provide_receipt_info(self, provide_receipt_info): self.provide_receipt_info = provide_receipt_info
    def get_delivery_spec(self): return self.delivery_spec
    def set_delivery_spec(self, delivery_spec): self.delivery_spec = delivery_spec
    def get_return_spec(self): return self.return_spec
    def set_return_spec(self, return_spec): self.return_spec = return_spec
    def get_pre_authorized_payment(self): return self.pre_authorized_payment
    def set_pre_authorized_payment(self, pre_authorized_payment): self.pre_authorized_payment = pre_authorized_payment
    def validate_CustomerRequestIdType(self, value):
        # Validate type CustomerRequestIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CustomerRequestIdType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.customer_request_id is not None or
            self.groupIdOrTransmitShipment is not None or
            self.quickship_label_requested is not None or
            self.cpc_pickup_indicator is not None or
            self.requested_shipping_point is not None or
            self.shipping_point_id is not None or
            self.expected_mailing_date is not None or
            self.provide_pricing_info is not None or
            self.provide_receipt_info is not None or
            self.delivery_spec is not None or
            self.return_spec is not None or
            self.pre_authorized_payment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customer_request_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-request-id>%s</customer-request-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_request_id), input_name='customer-request-id')), eol_))
        if self.groupIdOrTransmitShipment is not None:
            self.groupIdOrTransmitShipment.export(outfile, level, namespace_, pretty_print=pretty_print)
        if self.quickship_label_requested is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<quickship-label-requested>%s</quickship-label-requested>%s' % (self.gds_format_boolean(self.quickship_label_requested, input_name='quickship-label-requested'), eol_))
        if self.cpc_pickup_indicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cpc-pickup-indicator>%s</cpc-pickup-indicator>%s' % (self.gds_format_boolean(self.cpc_pickup_indicator, input_name='cpc-pickup-indicator'), eol_))
        if self.requested_shipping_point is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<requested-shipping-point>%s</requested-shipping-point>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.requested_shipping_point), input_name='requested-shipping-point')), eol_))
        if self.shipping_point_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipping-point-id>%s</shipping-point-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipping_point_id), input_name='shipping-point-id')), eol_))
        if self.expected_mailing_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<expected-mailing-date>%s</expected-mailing-date>%s' % (self.gds_format_date(self.expected_mailing_date, input_name='expected-mailing-date'), eol_))
        if self.provide_pricing_info is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<provide-pricing-info>%s</provide-pricing-info>%s' % (self.gds_format_boolean(self.provide_pricing_info, input_name='provide-pricing-info'), eol_))
        if self.provide_receipt_info is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<provide-receipt-info>%s</provide-receipt-info>%s' % (self.gds_format_boolean(self.provide_receipt_info, input_name='provide-receipt-info'), eol_))
        if self.delivery_spec is not None:
            self.delivery_spec.export(outfile, level, namespace_, name_='delivery-spec', pretty_print=pretty_print)
        if self.return_spec is not None:
            self.return_spec.export(outfile, level, namespace_, name_='return-spec', pretty_print=pretty_print)
        if self.pre_authorized_payment is not None:
            self.pre_authorized_payment.export(outfile, level, namespace_, name_='pre-authorized-payment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customer-request-id':
            customer_request_id_ = child_.text
            customer_request_id_ = self.gds_validate_string(customer_request_id_, node, 'customer_request_id')
            self.customer_request_id = customer_request_id_
            # validate type CustomerRequestIdType
            self.validate_CustomerRequestIdType(self.customer_request_id)
        elif nodeName_ == 'groupIdOrTransmitShipment':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <groupIdOrTransmitShipment> element')
            self.groupIdOrTransmitShipment = obj_
            obj_.original_tagname_ = 'groupIdOrTransmitShipment'
        elif nodeName_ == 'quickship-label-requested':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'quickship_label_requested')
            self.quickship_label_requested = ival_
        elif nodeName_ == 'cpc-pickup-indicator':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'cpc_pickup_indicator')
            self.cpc_pickup_indicator = ival_
        elif nodeName_ == 'requested-shipping-point':
            requested_shipping_point_ = child_.text
            requested_shipping_point_ = self.gds_validate_string(requested_shipping_point_, node, 'requested_shipping_point')
            self.requested_shipping_point = requested_shipping_point_
        elif nodeName_ == 'shipping-point-id':
            shipping_point_id_ = child_.text
            shipping_point_id_ = self.gds_validate_string(shipping_point_id_, node, 'shipping_point_id')
            self.shipping_point_id = shipping_point_id_
        elif nodeName_ == 'expected-mailing-date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.expected_mailing_date = dval_
        elif nodeName_ == 'provide-pricing-info':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'provide_pricing_info')
            self.provide_pricing_info = ival_
        elif nodeName_ == 'provide-receipt-info':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'provide_receipt_info')
            self.provide_receipt_info = ival_
        elif nodeName_ == 'delivery-spec':
            obj_ = DeliverySpecType.factory()
            obj_.build(child_)
            self.delivery_spec = obj_
            obj_.original_tagname_ = 'delivery-spec'
        elif nodeName_ == 'return-spec':
            obj_ = ReturnSpecType.factory()
            obj_.build(child_)
            self.return_spec = obj_
            obj_.original_tagname_ = 'return-spec'
        elif nodeName_ == 'pre-authorized-payment':
            obj_ = PreAuthorizedPaymentType.factory()
            obj_.build(child_)
            self.pre_authorized_payment = obj_
            obj_.original_tagname_ = 'pre-authorized-payment'
# end class ShipmentType


class DeliverySpecType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, sender=None, destination=None, options=None, parcel_characteristics=None, notification=None, print_preferences=None, preferences=None, references=None, customs=None, settlement_info=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.sender = sender
        self.destination = destination
        self.options = options
        self.parcel_characteristics = parcel_characteristics
        self.notification = notification
        self.print_preferences = print_preferences
        self.preferences = preferences
        self.references = references
        self.customs = customs
        self.settlement_info = settlement_info
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliverySpecType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliverySpecType.subclass:
            return DeliverySpecType.subclass(*args_, **kwargs_)
        else:
            return DeliverySpecType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_sender(self): return self.sender
    def set_sender(self, sender): self.sender = sender
    def get_destination(self): return self.destination
    def set_destination(self, destination): self.destination = destination
    def get_options(self): return self.options
    def set_options(self, options): self.options = options
    def get_parcel_characteristics(self): return self.parcel_characteristics
    def set_parcel_characteristics(self, parcel_characteristics): self.parcel_characteristics = parcel_characteristics
    def get_notification(self): return self.notification
    def set_notification(self, notification): self.notification = notification
    def get_print_preferences(self): return self.print_preferences
    def set_print_preferences(self, print_preferences): self.print_preferences = print_preferences
    def get_preferences(self): return self.preferences
    def set_preferences(self, preferences): self.preferences = preferences
    def get_references(self): return self.references
    def set_references(self, references): self.references = references
    def get_customs(self): return self.customs
    def set_customs(self, customs): self.customs = customs
    def get_settlement_info(self): return self.settlement_info
    def set_settlement_info(self, settlement_info): self.settlement_info = settlement_info
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.sender is not None or
            self.destination is not None or
            self.options is not None or
            self.parcel_characteristics is not None or
            self.notification is not None or
            self.print_preferences is not None or
            self.preferences is not None or
            self.references is not None or
            self.customs is not None or
            self.settlement_info is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DeliverySpecType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliverySpecType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliverySpecType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DeliverySpecType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DeliverySpecType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DeliverySpecType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.sender is not None:
            self.sender.export(outfile, level, namespace_, name_='sender', pretty_print=pretty_print)
        if self.destination is not None:
            self.destination.export(outfile, level, namespace_, name_='destination', pretty_print=pretty_print)
        if self.options is not None:
            self.options.export(outfile, level, namespace_, name_='options', pretty_print=pretty_print)
        if self.parcel_characteristics is not None:
            self.parcel_characteristics.export(outfile, level, namespace_, name_='parcel-characteristics', pretty_print=pretty_print)
        if self.notification is not None:
            self.notification.export(outfile, level, namespace_, name_='notification', pretty_print=pretty_print)
        if self.print_preferences is not None:
            self.print_preferences.export(outfile, level, namespace_, name_='print-preferences', pretty_print=pretty_print)
        if self.preferences is not None:
            self.preferences.export(outfile, level, namespace_, name_='preferences', pretty_print=pretty_print)
        if self.references is not None:
            self.references.export(outfile, level, namespace_, name_='references', pretty_print=pretty_print)
        if self.customs is not None:
            self.customs.export(outfile, level, namespace_, name_='customs', pretty_print=pretty_print)
        if self.settlement_info is not None:
            self.settlement_info.export(outfile, level, namespace_, name_='settlement-info', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
        elif nodeName_ == 'sender':
            obj_ = SenderType.factory()
            obj_.build(child_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'destination':
            obj_ = DestinationType.factory()
            obj_.build(child_)
            self.destination = obj_
            obj_.original_tagname_ = 'destination'
        elif nodeName_ == 'options':
            obj_ = optionsType.factory()
            obj_.build(child_)
            self.options = obj_
            obj_.original_tagname_ = 'options'
        elif nodeName_ == 'parcel-characteristics':
            obj_ = ParcelCharacteristicsType.factory()
            obj_.build(child_)
            self.parcel_characteristics = obj_
            obj_.original_tagname_ = 'parcel-characteristics'
        elif nodeName_ == 'notification':
            obj_ = NotificationType.factory()
            obj_.build(child_)
            self.notification = obj_
            obj_.original_tagname_ = 'notification'
        elif nodeName_ == 'print-preferences':
            obj_ = PrintPreferencesType.factory()
            obj_.build(child_)
            self.print_preferences = obj_
            obj_.original_tagname_ = 'print-preferences'
        elif nodeName_ == 'preferences':
            obj_ = PreferencesType.factory()
            obj_.build(child_)
            self.preferences = obj_
            obj_.original_tagname_ = 'preferences'
        elif nodeName_ == 'references':
            obj_ = ReferencesType.factory()
            obj_.build(child_)
            self.references = obj_
            obj_.original_tagname_ = 'references'
        elif nodeName_ == 'customs':
            obj_ = CustomsType.factory()
            obj_.build(child_)
            self.customs = obj_
            obj_.original_tagname_ = 'customs'
        elif nodeName_ == 'settlement-info':
            obj_ = SettlementInfoType.factory()
            obj_.build(child_)
            self.settlement_info = obj_
            obj_.original_tagname_ = 'settlement-info'
# end class DeliverySpecType


class CustomsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, currency=None, conversion_from_cad=None, reason_for_export=None, other_reason=None, sku_list=None, duties_and_taxes_prepaid=None, certificate_number=None, licence_number=None, invoice_number=None):
        self.original_tagname_ = None
        self.currency = currency
        self.validate_currencyType(self.currency)
        self.conversion_from_cad = conversion_from_cad
        self.validate_conversion_from_cadType(self.conversion_from_cad)
        self.reason_for_export = reason_for_export
        self.validate_reason_for_exportType(self.reason_for_export)
        self.other_reason = other_reason
        self.validate_other_reasonType(self.other_reason)
        self.sku_list = sku_list
        self.duties_and_taxes_prepaid = duties_and_taxes_prepaid
        self.validate_duties_and_taxes_prepaidType(self.duties_and_taxes_prepaid)
        self.certificate_number = certificate_number
        self.validate_certificate_numberType(self.certificate_number)
        self.licence_number = licence_number
        self.validate_licence_numberType(self.licence_number)
        self.invoice_number = invoice_number
        self.validate_invoice_numberType(self.invoice_number)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsType.subclass:
            return CustomsType.subclass(*args_, **kwargs_)
        else:
            return CustomsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_conversion_from_cad(self): return self.conversion_from_cad
    def set_conversion_from_cad(self, conversion_from_cad): self.conversion_from_cad = conversion_from_cad
    def get_reason_for_export(self): return self.reason_for_export
    def set_reason_for_export(self, reason_for_export): self.reason_for_export = reason_for_export
    def get_other_reason(self): return self.other_reason
    def set_other_reason(self, other_reason): self.other_reason = other_reason
    def get_sku_list(self): return self.sku_list
    def set_sku_list(self, sku_list): self.sku_list = sku_list
    def get_duties_and_taxes_prepaid(self): return self.duties_and_taxes_prepaid
    def set_duties_and_taxes_prepaid(self, duties_and_taxes_prepaid): self.duties_and_taxes_prepaid = duties_and_taxes_prepaid
    def get_certificate_number(self): return self.certificate_number
    def set_certificate_number(self, certificate_number): self.certificate_number = certificate_number
    def get_licence_number(self): return self.licence_number
    def set_licence_number(self, licence_number): self.licence_number = licence_number
    def get_invoice_number(self): return self.invoice_number
    def set_invoice_number(self, invoice_number): self.invoice_number = invoice_number
    def validate_currencyType(self, value):
        # Validate type currencyType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on currencyType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on currencyType' % {"value" : value} )
    def validate_conversion_from_cadType(self, value):
        # Validate type conversion-from-cadType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 999.999999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on conversion-from-cadType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on conversion-from-cadType' % {"value" : value} )
    def validate_reason_for_exportType(self, value):
        # Validate type reason-for-exportType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on reason-for-exportType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on reason-for-exportType' % {"value" : value} )
    def validate_other_reasonType(self, value):
        # Validate type other-reasonType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on other-reasonType' % {"value" : value} )
    def validate_duties_and_taxes_prepaidType(self, value):
        # Validate type duties-and-taxes-prepaidType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 99999.99:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on duties-and-taxes-prepaidType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on duties-and-taxes-prepaidType' % {"value" : value} )
    def validate_certificate_numberType(self, value):
        # Validate type certificate-numberType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on certificate-numberType' % {"value" : value} )
    def validate_licence_numberType(self, value):
        # Validate type licence-numberType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on licence-numberType' % {"value" : value} )
    def validate_invoice_numberType(self, value):
        # Validate type invoice-numberType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on invoice-numberType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.currency is not None or
            self.conversion_from_cad is not None or
            self.reason_for_export is not None or
            self.other_reason is not None or
            self.sku_list is not None or
            self.duties_and_taxes_prepaid is not None or
            self.certificate_number is not None or
            self.licence_number is not None or
            self.invoice_number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CustomsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CustomsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.conversion_from_cad is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<conversion-from-cad>%s</conversion-from-cad>%s' % (self.gds_format_float(self.conversion_from_cad, input_name='conversion-from-cad'), eol_))
        if self.reason_for_export is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<reason-for-export>%s</reason-for-export>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.reason_for_export), input_name='reason-for-export')), eol_))
        if self.other_reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<other-reason>%s</other-reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.other_reason), input_name='other-reason')), eol_))
        if self.sku_list is not None:
            self.sku_list.export(outfile, level, namespace_, name_='sku-list', pretty_print=pretty_print)
        if self.duties_and_taxes_prepaid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<duties-and-taxes-prepaid>%s</duties-and-taxes-prepaid>%s' % (self.gds_format_float(self.duties_and_taxes_prepaid, input_name='duties-and-taxes-prepaid'), eol_))
        if self.certificate_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<certificate-number>%s</certificate-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.certificate_number), input_name='certificate-number')), eol_))
        if self.licence_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<licence-number>%s</licence-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.licence_number), input_name='licence-number')), eol_))
        if self.invoice_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<invoice-number>%s</invoice-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.invoice_number), input_name='invoice-number')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
            # validate type currencyType
            self.validate_currencyType(self.currency)
        elif nodeName_ == 'conversion-from-cad':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'conversion_from_cad')
            self.conversion_from_cad = fval_
            # validate type conversion-from-cadType
            self.validate_conversion_from_cadType(self.conversion_from_cad)
        elif nodeName_ == 'reason-for-export':
            reason_for_export_ = child_.text
            reason_for_export_ = self.gds_validate_string(reason_for_export_, node, 'reason_for_export')
            self.reason_for_export = reason_for_export_
            # validate type reason-for-exportType
            self.validate_reason_for_exportType(self.reason_for_export)
        elif nodeName_ == 'other-reason':
            other_reason_ = child_.text
            other_reason_ = self.gds_validate_string(other_reason_, node, 'other_reason')
            self.other_reason = other_reason_
            # validate type other-reasonType
            self.validate_other_reasonType(self.other_reason)
        elif nodeName_ == 'sku-list':
            obj_ = sku_listType.factory()
            obj_.build(child_)
            self.sku_list = obj_
            obj_.original_tagname_ = 'sku-list'
        elif nodeName_ == 'duties-and-taxes-prepaid':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'duties_and_taxes_prepaid')
            self.duties_and_taxes_prepaid = fval_
            # validate type duties-and-taxes-prepaidType
            self.validate_duties_and_taxes_prepaidType(self.duties_and_taxes_prepaid)
        elif nodeName_ == 'certificate-number':
            certificate_number_ = child_.text
            certificate_number_ = self.gds_validate_string(certificate_number_, node, 'certificate_number')
            self.certificate_number = certificate_number_
            # validate type certificate-numberType
            self.validate_certificate_numberType(self.certificate_number)
        elif nodeName_ == 'licence-number':
            licence_number_ = child_.text
            licence_number_ = self.gds_validate_string(licence_number_, node, 'licence_number')
            self.licence_number = licence_number_
            # validate type licence-numberType
            self.validate_licence_numberType(self.licence_number)
        elif nodeName_ == 'invoice-number':
            invoice_number_ = child_.text
            invoice_number_ = self.gds_validate_string(invoice_number_, node, 'invoice_number')
            self.invoice_number = invoice_number_
            # validate type invoice-numberType
            self.validate_invoice_numberType(self.invoice_number)
# end class CustomsType


class SkuType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customs_number_of_units=None, customs_description=None, sku=None, hs_tariff_code=None, unit_weight=None, customs_value_per_unit=None, customs_unit_of_measure=None, country_of_origin=None, province_of_origin=None):
        self.original_tagname_ = None
        self.customs_number_of_units = customs_number_of_units
        self.validate_customs_number_of_unitsType(self.customs_number_of_units)
        self.customs_description = customs_description
        self.validate_customs_descriptionType(self.customs_description)
        self.sku = sku
        self.validate_skuType(self.sku)
        self.hs_tariff_code = hs_tariff_code
        self.validate_hs_tariff_codeType(self.hs_tariff_code)
        self.unit_weight = unit_weight
        self.validate_unit_weightType(self.unit_weight)
        self.customs_value_per_unit = customs_value_per_unit
        self.validate_customs_value_per_unitType(self.customs_value_per_unit)
        self.customs_unit_of_measure = customs_unit_of_measure
        self.country_of_origin = country_of_origin
        self.province_of_origin = province_of_origin
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SkuType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SkuType.subclass:
            return SkuType.subclass(*args_, **kwargs_)
        else:
            return SkuType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customs_number_of_units(self): return self.customs_number_of_units
    def set_customs_number_of_units(self, customs_number_of_units): self.customs_number_of_units = customs_number_of_units
    def get_customs_description(self): return self.customs_description
    def set_customs_description(self, customs_description): self.customs_description = customs_description
    def get_sku(self): return self.sku
    def set_sku(self, sku): self.sku = sku
    def get_hs_tariff_code(self): return self.hs_tariff_code
    def set_hs_tariff_code(self, hs_tariff_code): self.hs_tariff_code = hs_tariff_code
    def get_unit_weight(self): return self.unit_weight
    def set_unit_weight(self, unit_weight): self.unit_weight = unit_weight
    def get_customs_value_per_unit(self): return self.customs_value_per_unit
    def set_customs_value_per_unit(self, customs_value_per_unit): self.customs_value_per_unit = customs_value_per_unit
    def get_customs_unit_of_measure(self): return self.customs_unit_of_measure
    def set_customs_unit_of_measure(self, customs_unit_of_measure): self.customs_unit_of_measure = customs_unit_of_measure
    def get_country_of_origin(self): return self.country_of_origin
    def set_country_of_origin(self, country_of_origin): self.country_of_origin = country_of_origin
    def get_province_of_origin(self): return self.province_of_origin
    def set_province_of_origin(self, province_of_origin): self.province_of_origin = province_of_origin
    def validate_customs_number_of_unitsType(self, value):
        # Validate type customs-number-of-unitsType, a restriction on xsd:positiveInteger.
        if value is not None and Validate_simpletypes_:
            if value < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on customs-number-of-unitsType' % {"value" : value} )
            if value > 9999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on customs-number-of-unitsType' % {"value" : value} )
    def validate_customs_descriptionType(self, value):
        # Validate type customs-descriptionType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 45:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on customs-descriptionType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on customs-descriptionType' % {"value" : value} )
    def validate_skuType(self, value):
        # Validate type skuType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on skuType' % {"value" : value} )
    def validate_hs_tariff_codeType(self, value):
        # Validate type hs-tariff-codeType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_hs_tariff_codeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_hs_tariff_codeType_patterns_, ))
    validate_hs_tariff_codeType_patterns_ = [['^\\d{4}(\\.\\d{2}(\\.\\d{2}(\\.\\d{2})?)?)?$']]
    def validate_unit_weightType(self, value):
        # Validate type unit-weightType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 99.999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on unit-weightType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on unit-weightType' % {"value" : value} )
    def validate_customs_value_per_unitType(self, value):
        # Validate type customs-value-per-unitType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 99999.99:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on customs-value-per-unitType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on customs-value-per-unitType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.customs_number_of_units is not None or
            self.customs_description is not None or
            self.sku is not None or
            self.hs_tariff_code is not None or
            self.unit_weight is not None or
            self.customs_value_per_unit is not None or
            self.customs_unit_of_measure is not None or
            self.country_of_origin is not None or
            self.province_of_origin is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SkuType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SkuType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SkuType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SkuType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SkuType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SkuType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customs_number_of_units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customs-number-of-units>%s</customs-number-of-units>%s' % (self.gds_format_integer(self.customs_number_of_units, input_name='customs-number-of-units'), eol_))
        if self.customs_description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customs-description>%s</customs-description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customs_description), input_name='customs-description')), eol_))
        if self.sku is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<sku>%s</sku>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.sku), input_name='sku')), eol_))
        if self.hs_tariff_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<hs-tariff-code>%s</hs-tariff-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.hs_tariff_code), input_name='hs-tariff-code')), eol_))
        if self.unit_weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<unit-weight>%s</unit-weight>%s' % (self.gds_format_float(self.unit_weight, input_name='unit-weight'), eol_))
        if self.customs_value_per_unit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customs-value-per-unit>%s</customs-value-per-unit>%s' % (self.gds_format_float(self.customs_value_per_unit, input_name='customs-value-per-unit'), eol_))
        if self.customs_unit_of_measure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customs-unit-of-measure>%s</customs-unit-of-measure>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customs_unit_of_measure), input_name='customs-unit-of-measure')), eol_))
        if self.country_of_origin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country-of-origin>%s</country-of-origin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country_of_origin), input_name='country-of-origin')), eol_))
        if self.province_of_origin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<province-of-origin>%s</province-of-origin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.province_of_origin), input_name='province-of-origin')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customs-number-of-units':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'customs_number_of_units')
            self.customs_number_of_units = ival_
            # validate type customs-number-of-unitsType
            self.validate_customs_number_of_unitsType(self.customs_number_of_units)
        elif nodeName_ == 'customs-description':
            customs_description_ = child_.text
            customs_description_ = self.gds_validate_string(customs_description_, node, 'customs_description')
            self.customs_description = customs_description_
            # validate type customs-descriptionType
            self.validate_customs_descriptionType(self.customs_description)
        elif nodeName_ == 'sku':
            sku_ = child_.text
            sku_ = self.gds_validate_string(sku_, node, 'sku')
            self.sku = sku_
            # validate type skuType
            self.validate_skuType(self.sku)
        elif nodeName_ == 'hs-tariff-code':
            hs_tariff_code_ = child_.text
            hs_tariff_code_ = self.gds_validate_string(hs_tariff_code_, node, 'hs_tariff_code')
            self.hs_tariff_code = hs_tariff_code_
            # validate type hs-tariff-codeType
            self.validate_hs_tariff_codeType(self.hs_tariff_code)
        elif nodeName_ == 'unit-weight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'unit_weight')
            self.unit_weight = fval_
            # validate type unit-weightType
            self.validate_unit_weightType(self.unit_weight)
        elif nodeName_ == 'customs-value-per-unit':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'customs_value_per_unit')
            self.customs_value_per_unit = fval_
            # validate type customs-value-per-unitType
            self.validate_customs_value_per_unitType(self.customs_value_per_unit)
        elif nodeName_ == 'customs-unit-of-measure':
            customs_unit_of_measure_ = child_.text
            customs_unit_of_measure_ = self.gds_validate_string(customs_unit_of_measure_, node, 'customs_unit_of_measure')
            self.customs_unit_of_measure = customs_unit_of_measure_
        elif nodeName_ == 'country-of-origin':
            country_of_origin_ = child_.text
            country_of_origin_ = self.gds_validate_string(country_of_origin_, node, 'country_of_origin')
            self.country_of_origin = country_of_origin_
        elif nodeName_ == 'province-of-origin':
            province_of_origin_ = child_.text
            province_of_origin_ = self.gds_validate_string(province_of_origin_, node, 'province_of_origin')
            self.province_of_origin = province_of_origin_
# end class SkuType


class SenderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, contact_phone=None, address_details=None):
        self.original_tagname_ = None
        self.name = name
        self.validate_ContactNameType(self.name)
        self.company = company
        self.validate_CompanyNameType(self.company)
        self.contact_phone = contact_phone
        self.address_details = address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SenderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SenderType.subclass:
            return SenderType.subclass(*args_, **kwargs_)
        else:
            return SenderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    def get_contact_phone(self): return self.contact_phone
    def set_contact_phone(self, contact_phone): self.contact_phone = contact_phone
    def get_address_details(self): return self.address_details
    def set_address_details(self, address_details): self.address_details = address_details
    def validate_ContactNameType(self, value):
        # Validate type ContactNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ContactNameType' % {"value" : value} )
    def validate_CompanyNameType(self, value):
        # Validate type CompanyNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CompanyNameType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.contact_phone is not None or
            self.address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SenderType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SenderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SenderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SenderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SenderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SenderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<company>%s</company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), eol_))
        if self.contact_phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<contact-phone>%s</contact-phone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.contact_phone), input_name='contact-phone')), eol_))
        if self.address_details is not None:
            self.address_details.export(outfile, level, namespace_, name_='address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type ContactNameType
            self.validate_ContactNameType(self.name)
        elif nodeName_ == 'company':
            company_ = child_.text
            company_ = self.gds_validate_string(company_, node, 'company')
            self.company = company_
            # validate type CompanyNameType
            self.validate_CompanyNameType(self.company)
        elif nodeName_ == 'contact-phone':
            contact_phone_ = child_.text
            contact_phone_ = self.gds_validate_string(contact_phone_, node, 'contact_phone')
            self.contact_phone = contact_phone_
        elif nodeName_ == 'address-details':
            obj_ = AddressDetailsType.factory()
            obj_.build(child_)
            self.address_details = obj_
            obj_.original_tagname_ = 'address-details'
# end class SenderType


class DestinationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, additional_address_info=None, client_voice_number=None, address_details=None):
        self.original_tagname_ = None
        self.name = name
        self.validate_ContactNameType(self.name)
        self.company = company
        self.validate_CompanyNameType(self.company)
        self.additional_address_info = additional_address_info
        self.validate_additional_address_infoType(self.additional_address_info)
        self.client_voice_number = client_voice_number
        self.address_details = address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DestinationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DestinationType.subclass:
            return DestinationType.subclass(*args_, **kwargs_)
        else:
            return DestinationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    def get_additional_address_info(self): return self.additional_address_info
    def set_additional_address_info(self, additional_address_info): self.additional_address_info = additional_address_info
    def get_client_voice_number(self): return self.client_voice_number
    def set_client_voice_number(self, client_voice_number): self.client_voice_number = client_voice_number
    def get_address_details(self): return self.address_details
    def set_address_details(self, address_details): self.address_details = address_details
    def validate_ContactNameType(self, value):
        # Validate type ContactNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ContactNameType' % {"value" : value} )
    def validate_CompanyNameType(self, value):
        # Validate type CompanyNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CompanyNameType' % {"value" : value} )
    def validate_additional_address_infoType(self, value):
        # Validate type additional-address-infoType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on additional-address-infoType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.additional_address_info is not None or
            self.client_voice_number is not None or
            self.address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DestinationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DestinationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DestinationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DestinationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DestinationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DestinationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<company>%s</company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), eol_))
        if self.additional_address_info is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<additional-address-info>%s</additional-address-info>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.additional_address_info), input_name='additional-address-info')), eol_))
        if self.client_voice_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<client-voice-number>%s</client-voice-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.client_voice_number), input_name='client-voice-number')), eol_))
        if self.address_details is not None:
            self.address_details.export(outfile, level, namespace_, name_='address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type ContactNameType
            self.validate_ContactNameType(self.name)
        elif nodeName_ == 'company':
            company_ = child_.text
            company_ = self.gds_validate_string(company_, node, 'company')
            self.company = company_
            # validate type CompanyNameType
            self.validate_CompanyNameType(self.company)
        elif nodeName_ == 'additional-address-info':
            additional_address_info_ = child_.text
            additional_address_info_ = self.gds_validate_string(additional_address_info_, node, 'additional_address_info')
            self.additional_address_info = additional_address_info_
            # validate type additional-address-infoType
            self.validate_additional_address_infoType(self.additional_address_info)
        elif nodeName_ == 'client-voice-number':
            client_voice_number_ = child_.text
            client_voice_number_ = self.gds_validate_string(client_voice_number_, node, 'client_voice_number')
            self.client_voice_number = client_voice_number_
        elif nodeName_ == 'address-details':
            obj_ = DestinationAddressDetailsType.factory()
            obj_.build(child_)
            self.address_details = obj_
            obj_.original_tagname_ = 'address-details'
# end class DestinationType


class RecipientAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, additional_address_info=None, client_voice_number=None, address_details=None):
        self.original_tagname_ = None
        self.name = name
        self.validate_ContactNameType(self.name)
        self.company = company
        self.validate_CompanyNameType(self.company)
        self.additional_address_info = additional_address_info
        self.validate_additional_address_infoType1(self.additional_address_info)
        self.client_voice_number = client_voice_number
        self.address_details = address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecipientAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecipientAddressType.subclass:
            return RecipientAddressType.subclass(*args_, **kwargs_)
        else:
            return RecipientAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    def get_additional_address_info(self): return self.additional_address_info
    def set_additional_address_info(self, additional_address_info): self.additional_address_info = additional_address_info
    def get_client_voice_number(self): return self.client_voice_number
    def set_client_voice_number(self, client_voice_number): self.client_voice_number = client_voice_number
    def get_address_details(self): return self.address_details
    def set_address_details(self, address_details): self.address_details = address_details
    def validate_ContactNameType(self, value):
        # Validate type ContactNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ContactNameType' % {"value" : value} )
    def validate_CompanyNameType(self, value):
        # Validate type CompanyNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CompanyNameType' % {"value" : value} )
    def validate_additional_address_infoType1(self, value):
        # Validate type additional-address-infoType1, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on additional-address-infoType1' % {"value" : value} )
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.additional_address_info is not None or
            self.client_voice_number is not None or
            self.address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RecipientAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecipientAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RecipientAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RecipientAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RecipientAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RecipientAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<company>%s</company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), eol_))
        if self.additional_address_info is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<additional-address-info>%s</additional-address-info>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.additional_address_info), input_name='additional-address-info')), eol_))
        if self.client_voice_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<client-voice-number>%s</client-voice-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.client_voice_number), input_name='client-voice-number')), eol_))
        if self.address_details is not None:
            self.address_details.export(outfile, level, namespace_, name_='address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type ContactNameType
            self.validate_ContactNameType(self.name)
        elif nodeName_ == 'company':
            company_ = child_.text
            company_ = self.gds_validate_string(company_, node, 'company')
            self.company = company_
            # validate type CompanyNameType
            self.validate_CompanyNameType(self.company)
        elif nodeName_ == 'additional-address-info':
            additional_address_info_ = child_.text
            additional_address_info_ = self.gds_validate_string(additional_address_info_, node, 'additional_address_info')
            self.additional_address_info = additional_address_info_
            # validate type additional-address-infoType1
            self.validate_additional_address_infoType1(self.additional_address_info)
        elif nodeName_ == 'client-voice-number':
            client_voice_number_ = child_.text
            client_voice_number_ = self.gds_validate_string(client_voice_number_, node, 'client_voice_number')
            self.client_voice_number = client_voice_number_
        elif nodeName_ == 'address-details':
            obj_ = DestinationAddressDetailsType.factory()
            obj_.build(child_)
            self.address_details = obj_
            obj_.original_tagname_ = 'address-details'
# end class RecipientAddressType


class ReturnSpecType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, return_recipient=None, return_notification=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.return_recipient = return_recipient
        self.return_notification = return_notification
        self.validate_EmailType(self.return_notification)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnSpecType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnSpecType.subclass:
            return ReturnSpecType.subclass(*args_, **kwargs_)
        else:
            return ReturnSpecType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_return_recipient(self): return self.return_recipient
    def set_return_recipient(self, return_recipient): self.return_recipient = return_recipient
    def get_return_notification(self): return self.return_notification
    def set_return_notification(self, return_notification): self.return_notification = return_notification
    def validate_EmailType(self, value):
        # Validate type EmailType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on EmailType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_EmailType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EmailType_patterns_, ))
    validate_EmailType_patterns_ = [["^(['_A-Za-z0-9\\-\\+]+)(\\.['_A-Za-z0-9\\-\\+]+)*@([A-Za-z0-9-]+)(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,5})$"]]
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.return_recipient is not None or
            self.return_notification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReturnSpecType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnSpecType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnSpecType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReturnSpecType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReturnSpecType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReturnSpecType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.return_recipient is not None:
            self.return_recipient.export(outfile, level, namespace_, name_='return-recipient', pretty_print=pretty_print)
        if self.return_notification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<return-notification>%s</return-notification>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.return_notification), input_name='return-notification')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
        elif nodeName_ == 'return-recipient':
            obj_ = ReturnRecipientType.factory()
            obj_.build(child_)
            self.return_recipient = obj_
            obj_.original_tagname_ = 'return-recipient'
        elif nodeName_ == 'return-notification':
            return_notification_ = child_.text
            return_notification_ = self.gds_validate_string(return_notification_, node, 'return_notification')
            self.return_notification = return_notification_
            # validate type EmailType
            self.validate_EmailType(self.return_notification)
# end class ReturnSpecType


class ReturnRecipientType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, address_details=None):
        self.original_tagname_ = None
        self.name = name
        self.validate_ContactNameType(self.name)
        self.company = company
        self.validate_CompanyNameType(self.company)
        self.address_details = address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnRecipientType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnRecipientType.subclass:
            return ReturnRecipientType.subclass(*args_, **kwargs_)
        else:
            return ReturnRecipientType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    def get_address_details(self): return self.address_details
    def set_address_details(self, address_details): self.address_details = address_details
    def validate_ContactNameType(self, value):
        # Validate type ContactNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ContactNameType' % {"value" : value} )
    def validate_CompanyNameType(self, value):
        # Validate type CompanyNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CompanyNameType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReturnRecipientType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnRecipientType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnRecipientType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReturnRecipientType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReturnRecipientType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReturnRecipientType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<company>%s</company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), eol_))
        if self.address_details is not None:
            self.address_details.export(outfile, level, namespace_, name_='address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type ContactNameType
            self.validate_ContactNameType(self.name)
        elif nodeName_ == 'company':
            company_ = child_.text
            company_ = self.gds_validate_string(company_, node, 'company')
            self.company = company_
            # validate type CompanyNameType
            self.validate_CompanyNameType(self.company)
        elif nodeName_ == 'address-details':
            obj_ = DomesticAddressDetailsType.factory()
            obj_.build(child_)
            self.address_details = obj_
            obj_.original_tagname_ = 'address-details'
# end class ReturnRecipientType


class DomesticAddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, prov_state=None, postal_zip_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type(self.address_line_2)
        self.city = city
        self.validate_cityType(self.city)
        self.prov_state = prov_state
        self.postal_zip_code = postal_zip_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomesticAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomesticAddressDetailsType.subclass:
            return DomesticAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return DomesticAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_prov_state(self): return self.prov_state
    def set_prov_state(self, prov_state): self.prov_state = prov_state
    def get_postal_zip_code(self): return self.postal_zip_code
    def set_postal_zip_code(self, postal_zip_code): self.postal_zip_code = postal_zip_code
    def validate_address_line_1Type(self, value):
        # Validate type address-line-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type' % {"value" : value} )
    def validate_address_line_2Type(self, value):
        # Validate type address-line-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type' % {"value" : value} )
    def validate_cityType(self, value):
        # Validate type cityType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.prov_state is not None or
            self.postal_zip_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomesticAddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomesticAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomesticAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomesticAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomesticAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomesticAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.prov_state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prov-state>%s</prov-state>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.prov_state), input_name='prov-state')), eol_))
        if self.postal_zip_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-zip-code>%s</postal-zip-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_zip_code), input_name='postal-zip-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type
            self.validate_address_line_1Type(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type
            self.validate_address_line_2Type(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType
            self.validate_cityType(self.city)
        elif nodeName_ == 'prov-state':
            prov_state_ = child_.text
            prov_state_ = self.gds_validate_string(prov_state_, node, 'prov_state')
            self.prov_state = prov_state_
        elif nodeName_ == 'postal-zip-code':
            postal_zip_code_ = child_.text
            postal_zip_code_ = self.gds_validate_string(postal_zip_code_, node, 'postal_zip_code')
            self.postal_zip_code = postal_zip_code_
# end class DomesticAddressDetailsType


class AddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, prov_state=None, country_code=None, postal_zip_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type2(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type3(self.address_line_2)
        self.city = city
        self.validate_cityType4(self.city)
        self.prov_state = prov_state
        self.country_code = country_code
        self.postal_zip_code = postal_zip_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressDetailsType.subclass:
            return AddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return AddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_prov_state(self): return self.prov_state
    def set_prov_state(self, prov_state): self.prov_state = prov_state
    def get_country_code(self): return self.country_code
    def set_country_code(self, country_code): self.country_code = country_code
    def get_postal_zip_code(self): return self.postal_zip_code
    def set_postal_zip_code(self, postal_zip_code): self.postal_zip_code = postal_zip_code
    def validate_address_line_1Type2(self, value):
        # Validate type address-line-1Type2, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type2' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type2' % {"value" : value} )
    def validate_address_line_2Type3(self, value):
        # Validate type address-line-2Type3, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type3' % {"value" : value} )
    def validate_cityType4(self, value):
        # Validate type cityType4, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType4' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType4' % {"value" : value} )
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.prov_state is not None or
            self.country_code is not None or
            self.postal_zip_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.prov_state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prov-state>%s</prov-state>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.prov_state), input_name='prov-state')), eol_))
        if self.country_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country-code>%s</country-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country_code), input_name='country-code')), eol_))
        if self.postal_zip_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-zip-code>%s</postal-zip-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_zip_code), input_name='postal-zip-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type2
            self.validate_address_line_1Type2(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type3
            self.validate_address_line_2Type3(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType4
            self.validate_cityType4(self.city)
        elif nodeName_ == 'prov-state':
            prov_state_ = child_.text
            prov_state_ = self.gds_validate_string(prov_state_, node, 'prov_state')
            self.prov_state = prov_state_
        elif nodeName_ == 'country-code':
            country_code_ = child_.text
            country_code_ = self.gds_validate_string(country_code_, node, 'country_code')
            self.country_code = country_code_
        elif nodeName_ == 'postal-zip-code':
            postal_zip_code_ = child_.text
            postal_zip_code_ = self.gds_validate_string(postal_zip_code_, node, 'postal_zip_code')
            self.postal_zip_code = postal_zip_code_
# end class AddressDetailsType


class DestinationAddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, prov_state=None, country_code=None, postal_zip_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type5(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type6(self.address_line_2)
        self.city = city
        self.validate_cityType7(self.city)
        self.prov_state = prov_state
        self.country_code = country_code
        self.postal_zip_code = postal_zip_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DestinationAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DestinationAddressDetailsType.subclass:
            return DestinationAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return DestinationAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_prov_state(self): return self.prov_state
    def set_prov_state(self, prov_state): self.prov_state = prov_state
    def get_country_code(self): return self.country_code
    def set_country_code(self, country_code): self.country_code = country_code
    def get_postal_zip_code(self): return self.postal_zip_code
    def set_postal_zip_code(self, postal_zip_code): self.postal_zip_code = postal_zip_code
    def validate_address_line_1Type5(self, value):
        # Validate type address-line-1Type5, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type5' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type5' % {"value" : value} )
    def validate_address_line_2Type6(self, value):
        # Validate type address-line-2Type6, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type6' % {"value" : value} )
    def validate_cityType7(self, value):
        # Validate type cityType7, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType7' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType7' % {"value" : value} )
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.prov_state is not None or
            self.country_code is not None or
            self.postal_zip_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DestinationAddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DestinationAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DestinationAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DestinationAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DestinationAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DestinationAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.prov_state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prov-state>%s</prov-state>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.prov_state), input_name='prov-state')), eol_))
        if self.country_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country-code>%s</country-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country_code), input_name='country-code')), eol_))
        if self.postal_zip_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-zip-code>%s</postal-zip-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_zip_code), input_name='postal-zip-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type5
            self.validate_address_line_1Type5(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type6
            self.validate_address_line_2Type6(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType7
            self.validate_cityType7(self.city)
        elif nodeName_ == 'prov-state':
            prov_state_ = child_.text
            prov_state_ = self.gds_validate_string(prov_state_, node, 'prov_state')
            self.prov_state = prov_state_
        elif nodeName_ == 'country-code':
            country_code_ = child_.text
            country_code_ = self.gds_validate_string(country_code_, node, 'country_code')
            self.country_code = country_code_
        elif nodeName_ == 'postal-zip-code':
            postal_zip_code_ = child_.text
            postal_zip_code_ = self.gds_validate_string(postal_zip_code_, node, 'postal_zip_code')
            self.postal_zip_code = postal_zip_code_
# end class DestinationAddressDetailsType


class OptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None, option_amount=None, option_qualifier_1=None, option_qualifier_2=None):
        self.original_tagname_ = None
        self.option_code = option_code
        self.validate_option_codeType(self.option_code)
        self.option_amount = option_amount
        self.option_qualifier_1 = option_qualifier_1
        self.option_qualifier_2 = option_qualifier_2
        self.validate_option_qualifier_2Type(self.option_qualifier_2)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OptionType.subclass:
            return OptionType.subclass(*args_, **kwargs_)
        else:
            return OptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def get_option_amount(self): return self.option_amount
    def set_option_amount(self, option_amount): self.option_amount = option_amount
    def get_option_qualifier_1(self): return self.option_qualifier_1
    def set_option_qualifier_1(self, option_qualifier_1): self.option_qualifier_1 = option_qualifier_1
    def get_option_qualifier_2(self): return self.option_qualifier_2
    def set_option_qualifier_2(self, option_qualifier_2): self.option_qualifier_2 = option_qualifier_2
    def validate_option_codeType(self, value):
        # Validate type option-codeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on option-codeType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on option-codeType' % {"value" : value} )
    def validate_option_qualifier_2Type(self, value):
        # Validate type option-qualifier-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on option-qualifier-2Type' % {"value" : value} )
    def hasContent_(self):
        if (
            self.option_code is not None or
            self.option_amount is not None or
            self.option_qualifier_1 is not None or
            self.option_qualifier_2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.option_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_code), input_name='option-code')), eol_))
        if self.option_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-amount>%s</option-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_amount), input_name='option-amount')), eol_))
        if self.option_qualifier_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-qualifier-1>%s</option-qualifier-1>%s' % (self.gds_format_boolean(self.option_qualifier_1, input_name='option-qualifier-1'), eol_))
        if self.option_qualifier_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-qualifier-2>%s</option-qualifier-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_qualifier_2), input_name='option-qualifier-2')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code = option_code_
            # validate type option-codeType
            self.validate_option_codeType(self.option_code)
        elif nodeName_ == 'option-amount':
            option_amount_ = child_.text
            option_amount_ = self.gds_validate_string(option_amount_, node, 'option_amount')
            self.option_amount = option_amount_
        elif nodeName_ == 'option-qualifier-1':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'option_qualifier_1')
            self.option_qualifier_1 = ival_
        elif nodeName_ == 'option-qualifier-2':
            option_qualifier_2_ = child_.text
            option_qualifier_2_ = self.gds_validate_string(option_qualifier_2_, node, 'option_qualifier_2')
            self.option_qualifier_2 = option_qualifier_2_
            # validate type option-qualifier-2Type
            self.validate_option_qualifier_2Type(self.option_qualifier_2)
# end class OptionType


class ParcelCharacteristicsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, weight=None, dimensions=None, unpackaged=None, mailing_tube=None, oversized=None):
        self.original_tagname_ = None
        self.weight = weight
        self.validate_weightType(self.weight)
        self.dimensions = dimensions
        self.unpackaged = unpackaged
        self.mailing_tube = mailing_tube
        self.oversized = oversized
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParcelCharacteristicsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParcelCharacteristicsType.subclass:
            return ParcelCharacteristicsType.subclass(*args_, **kwargs_)
        else:
            return ParcelCharacteristicsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_weight(self): return self.weight
    def set_weight(self, weight): self.weight = weight
    def get_dimensions(self): return self.dimensions
    def set_dimensions(self, dimensions): self.dimensions = dimensions
    def get_unpackaged(self): return self.unpackaged
    def set_unpackaged(self, unpackaged): self.unpackaged = unpackaged
    def get_mailing_tube(self): return self.mailing_tube
    def set_mailing_tube(self, mailing_tube): self.mailing_tube = mailing_tube
    def get_oversized(self): return self.oversized
    def set_oversized(self, oversized): self.oversized = oversized
    def validate_weightType(self, value):
        # Validate type weightType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 999.999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on weightType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on weightType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.weight is not None or
            self.dimensions is not None or
            self.unpackaged is not None or
            self.mailing_tube is not None or
            self.oversized is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ParcelCharacteristicsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParcelCharacteristicsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParcelCharacteristicsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ParcelCharacteristicsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ParcelCharacteristicsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ParcelCharacteristicsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<weight>%s</weight>%s' % (self.gds_format_float(self.weight, input_name='weight'), eol_))
        if self.dimensions is not None:
            self.dimensions.export(outfile, level, namespace_, name_='dimensions', pretty_print=pretty_print)
        if self.unpackaged is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<unpackaged>%s</unpackaged>%s' % (self.gds_format_boolean(self.unpackaged, input_name='unpackaged'), eol_))
        if self.mailing_tube is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<mailing-tube>%s</mailing-tube>%s' % (self.gds_format_boolean(self.mailing_tube, input_name='mailing-tube'), eol_))
        if self.oversized is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<oversized>%s</oversized>%s' % (self.gds_format_boolean(self.oversized, input_name='oversized'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'weight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            # validate type weightType
            self.validate_weightType(self.weight)
        elif nodeName_ == 'dimensions':
            obj_ = dimensionsType.factory()
            obj_.build(child_)
            self.dimensions = obj_
            obj_.original_tagname_ = 'dimensions'
        elif nodeName_ == 'unpackaged':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'unpackaged')
            self.unpackaged = ival_
        elif nodeName_ == 'mailing-tube':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailing_tube')
            self.mailing_tube = ival_
        elif nodeName_ == 'oversized':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'oversized')
            self.oversized = ival_
# end class ParcelCharacteristicsType


class NotificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, email=None, on_shipment=None, on_exception=None, on_delivery=None):
        self.original_tagname_ = None
        self.email = email
        self.validate_EmailType(self.email)
        self.on_shipment = on_shipment
        self.on_exception = on_exception
        self.on_delivery = on_delivery
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationType.subclass:
            return NotificationType.subclass(*args_, **kwargs_)
        else:
            return NotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_on_shipment(self): return self.on_shipment
    def set_on_shipment(self, on_shipment): self.on_shipment = on_shipment
    def get_on_exception(self): return self.on_exception
    def set_on_exception(self, on_exception): self.on_exception = on_exception
    def get_on_delivery(self): return self.on_delivery
    def set_on_delivery(self, on_delivery): self.on_delivery = on_delivery
    def validate_EmailType(self, value):
        # Validate type EmailType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on EmailType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_EmailType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EmailType_patterns_, ))
    validate_EmailType_patterns_ = [["^(['_A-Za-z0-9\\-\\+]+)(\\.['_A-Za-z0-9\\-\\+]+)*@([A-Za-z0-9-]+)(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,5})$"]]
    def hasContent_(self):
        if (
            self.email is not None or
            self.on_shipment is not None or
            self.on_exception is not None or
            self.on_delivery is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotificationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<email>%s</email>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), eol_))
        if self.on_shipment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<on-shipment>%s</on-shipment>%s' % (self.gds_format_boolean(self.on_shipment, input_name='on-shipment'), eol_))
        if self.on_exception is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<on-exception>%s</on-exception>%s' % (self.gds_format_boolean(self.on_exception, input_name='on-exception'), eol_))
        if self.on_delivery is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<on-delivery>%s</on-delivery>%s' % (self.gds_format_boolean(self.on_delivery, input_name='on-delivery'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
            # validate type EmailType
            self.validate_EmailType(self.email)
        elif nodeName_ == 'on-shipment':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'on_shipment')
            self.on_shipment = ival_
        elif nodeName_ == 'on-exception':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'on_exception')
            self.on_exception = ival_
        elif nodeName_ == 'on-delivery':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'on_delivery')
            self.on_delivery = ival_
# end class NotificationType


class PrintPreferencesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, output_format=None, encoding=None):
        self.original_tagname_ = None
        self.output_format = output_format
        self.validate_output_formatType(self.output_format)
        self.encoding = encoding
        self.validate_encodingType(self.encoding)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrintPreferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrintPreferencesType.subclass:
            return PrintPreferencesType.subclass(*args_, **kwargs_)
        else:
            return PrintPreferencesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_output_format(self): return self.output_format
    def set_output_format(self, output_format): self.output_format = output_format
    def get_encoding(self): return self.encoding
    def set_encoding(self, encoding): self.encoding = encoding
    def validate_output_formatType(self, value):
        # Validate type output-formatType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['8.5x11', '4x6']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on output-formatType' % {"value" : value.encode("utf-8")} )
    def validate_encodingType(self, value):
        # Validate type encodingType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PDF', 'ZPL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on encodingType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.output_format is not None or
            self.encoding is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrintPreferencesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrintPreferencesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrintPreferencesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrintPreferencesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrintPreferencesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PrintPreferencesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.output_format is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<output-format>%s</output-format>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.output_format), input_name='output-format')), eol_))
        if self.encoding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<encoding>%s</encoding>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.encoding), input_name='encoding')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'output-format':
            output_format_ = child_.text
            output_format_ = self.gds_validate_string(output_format_, node, 'output_format')
            self.output_format = output_format_
            # validate type output-formatType
            self.validate_output_formatType(self.output_format)
        elif nodeName_ == 'encoding':
            encoding_ = child_.text
            encoding_ = self.gds_validate_string(encoding_, node, 'encoding')
            self.encoding = encoding_
            # validate type encodingType
            self.validate_encodingType(self.encoding)
# end class PrintPreferencesType


class PreferencesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, show_packing_instructions=None, show_postage_rate=None, show_insured_value=None):
        self.original_tagname_ = None
        self.show_packing_instructions = show_packing_instructions
        self.show_postage_rate = show_postage_rate
        self.show_insured_value = show_insured_value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreferencesType.subclass:
            return PreferencesType.subclass(*args_, **kwargs_)
        else:
            return PreferencesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_show_packing_instructions(self): return self.show_packing_instructions
    def set_show_packing_instructions(self, show_packing_instructions): self.show_packing_instructions = show_packing_instructions
    def get_show_postage_rate(self): return self.show_postage_rate
    def set_show_postage_rate(self, show_postage_rate): self.show_postage_rate = show_postage_rate
    def get_show_insured_value(self): return self.show_insured_value
    def set_show_insured_value(self, show_insured_value): self.show_insured_value = show_insured_value
    def hasContent_(self):
        if (
            self.show_packing_instructions is not None or
            self.show_postage_rate is not None or
            self.show_insured_value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PreferencesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreferencesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PreferencesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PreferencesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PreferencesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PreferencesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.show_packing_instructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<show-packing-instructions>%s</show-packing-instructions>%s' % (self.gds_format_boolean(self.show_packing_instructions, input_name='show-packing-instructions'), eol_))
        if self.show_postage_rate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<show-postage-rate>%s</show-postage-rate>%s' % (self.gds_format_boolean(self.show_postage_rate, input_name='show-postage-rate'), eol_))
        if self.show_insured_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<show-insured-value>%s</show-insured-value>%s' % (self.gds_format_boolean(self.show_insured_value, input_name='show-insured-value'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'show-packing-instructions':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'show_packing_instructions')
            self.show_packing_instructions = ival_
        elif nodeName_ == 'show-postage-rate':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'show_postage_rate')
            self.show_postage_rate = ival_
        elif nodeName_ == 'show-insured-value':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'show_insured_value')
            self.show_insured_value = ival_
# end class PreferencesType


class ReferencesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cost_centre=None, customer_ref_1=None, customer_ref_2=None):
        self.original_tagname_ = None
        self.cost_centre = cost_centre
        self.validate_CostCentreIDType(self.cost_centre)
        self.customer_ref_1 = customer_ref_1
        self.validate_customer_ref_1Type(self.customer_ref_1)
        self.customer_ref_2 = customer_ref_2
        self.validate_customer_ref_2Type(self.customer_ref_2)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType.subclass:
            return ReferencesType.subclass(*args_, **kwargs_)
        else:
            return ReferencesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cost_centre(self): return self.cost_centre
    def set_cost_centre(self, cost_centre): self.cost_centre = cost_centre
    def get_customer_ref_1(self): return self.customer_ref_1
    def set_customer_ref_1(self, customer_ref_1): self.customer_ref_1 = customer_ref_1
    def get_customer_ref_2(self): return self.customer_ref_2
    def set_customer_ref_2(self, customer_ref_2): self.customer_ref_2 = customer_ref_2
    def validate_CostCentreIDType(self, value):
        # Validate type CostCentreIDType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CostCentreIDType' % {"value" : value} )
    def validate_customer_ref_1Type(self, value):
        # Validate type customer-ref-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on customer-ref-1Type' % {"value" : value} )
    def validate_customer_ref_2Type(self, value):
        # Validate type customer-ref-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on customer-ref-2Type' % {"value" : value} )
    def hasContent_(self):
        if (
            self.cost_centre is not None or
            self.customer_ref_1 is not None or
            self.customer_ref_2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferencesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cost_centre is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cost-centre>%s</cost-centre>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cost_centre), input_name='cost-centre')), eol_))
        if self.customer_ref_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-ref-1>%s</customer-ref-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_ref_1), input_name='customer-ref-1')), eol_))
        if self.customer_ref_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-ref-2>%s</customer-ref-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_ref_2), input_name='customer-ref-2')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cost-centre':
            cost_centre_ = child_.text
            cost_centre_ = self.gds_validate_string(cost_centre_, node, 'cost_centre')
            self.cost_centre = cost_centre_
            # validate type CostCentreIDType
            self.validate_CostCentreIDType(self.cost_centre)
        elif nodeName_ == 'customer-ref-1':
            customer_ref_1_ = child_.text
            customer_ref_1_ = self.gds_validate_string(customer_ref_1_, node, 'customer_ref_1')
            self.customer_ref_1 = customer_ref_1_
            # validate type customer-ref-1Type
            self.validate_customer_ref_1Type(self.customer_ref_1)
        elif nodeName_ == 'customer-ref-2':
            customer_ref_2_ = child_.text
            customer_ref_2_ = self.gds_validate_string(customer_ref_2_, node, 'customer_ref_2')
            self.customer_ref_2 = customer_ref_2_
            # validate type customer-ref-2Type
            self.validate_customer_ref_2Type(self.customer_ref_2)
# end class ReferencesType


class SettlementInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, paid_by_customer=None, contract_id=None, cif_shipment=None, intended_method_of_payment=None, promo_code=None):
        self.original_tagname_ = None
        self.paid_by_customer = paid_by_customer
        self.contract_id = contract_id
        self.cif_shipment = cif_shipment
        self.intended_method_of_payment = intended_method_of_payment
        self.promo_code = promo_code
        self.validate_PromoCodeType(self.promo_code)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SettlementInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SettlementInfoType.subclass:
            return SettlementInfoType.subclass(*args_, **kwargs_)
        else:
            return SettlementInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_paid_by_customer(self): return self.paid_by_customer
    def set_paid_by_customer(self, paid_by_customer): self.paid_by_customer = paid_by_customer
    def get_contract_id(self): return self.contract_id
    def set_contract_id(self, contract_id): self.contract_id = contract_id
    def get_cif_shipment(self): return self.cif_shipment
    def set_cif_shipment(self, cif_shipment): self.cif_shipment = cif_shipment
    def get_intended_method_of_payment(self): return self.intended_method_of_payment
    def set_intended_method_of_payment(self, intended_method_of_payment): self.intended_method_of_payment = intended_method_of_payment
    def get_promo_code(self): return self.promo_code
    def set_promo_code(self, promo_code): self.promo_code = promo_code
    def validate_PromoCodeType(self, value):
        # Validate type PromoCodeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on PromoCodeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.paid_by_customer is not None or
            self.contract_id is not None or
            self.cif_shipment is not None or
            self.intended_method_of_payment is not None or
            self.promo_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SettlementInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SettlementInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SettlementInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SettlementInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SettlementInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SettlementInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.paid_by_customer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<paid-by-customer>%s</paid-by-customer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.paid_by_customer), input_name='paid-by-customer')), eol_))
        if self.contract_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<contract-id>%s</contract-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.contract_id), input_name='contract-id')), eol_))
        if self.cif_shipment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cif-shipment>%s</cif-shipment>%s' % (self.gds_format_boolean(self.cif_shipment, input_name='cif-shipment'), eol_))
        if self.intended_method_of_payment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<intended-method-of-payment>%s</intended-method-of-payment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.intended_method_of_payment), input_name='intended-method-of-payment')), eol_))
        if self.promo_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<promo-code>%s</promo-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.promo_code), input_name='promo-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'paid-by-customer':
            paid_by_customer_ = child_.text
            paid_by_customer_ = self.gds_validate_string(paid_by_customer_, node, 'paid_by_customer')
            self.paid_by_customer = paid_by_customer_
        elif nodeName_ == 'contract-id':
            contract_id_ = child_.text
            contract_id_ = self.gds_validate_string(contract_id_, node, 'contract_id')
            self.contract_id = contract_id_
        elif nodeName_ == 'cif-shipment':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'cif_shipment')
            self.cif_shipment = ival_
        elif nodeName_ == 'intended-method-of-payment':
            intended_method_of_payment_ = child_.text
            intended_method_of_payment_ = self.gds_validate_string(intended_method_of_payment_, node, 'intended_method_of_payment')
            self.intended_method_of_payment = intended_method_of_payment_
        elif nodeName_ == 'promo-code':
            promo_code_ = child_.text
            promo_code_ = self.gds_validate_string(promo_code_, node, 'promo_code')
            self.promo_code = promo_code_
            # validate type PromoCodeType
            self.validate_PromoCodeType(self.promo_code)
# end class SettlementInfoType


class PreAuthorizedPaymentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, account_number=None, auth_code=None, auth_timestamp=None, charge_amount=None):
        self.original_tagname_ = None
        self.account_number = account_number
        self.validate_account_numberType(self.account_number)
        self.auth_code = auth_code
        self.validate_auth_codeType(self.auth_code)
        if isinstance(auth_timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(auth_timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = auth_timestamp
        self.auth_timestamp = initvalue_
        self.charge_amount = charge_amount
        self.validate_charge_amountType(self.charge_amount)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAuthorizedPaymentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAuthorizedPaymentType.subclass:
            return PreAuthorizedPaymentType.subclass(*args_, **kwargs_)
        else:
            return PreAuthorizedPaymentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_account_number(self): return self.account_number
    def set_account_number(self, account_number): self.account_number = account_number
    def get_auth_code(self): return self.auth_code
    def set_auth_code(self, auth_code): self.auth_code = auth_code
    def get_auth_timestamp(self): return self.auth_timestamp
    def set_auth_timestamp(self, auth_timestamp): self.auth_timestamp = auth_timestamp
    def get_charge_amount(self): return self.charge_amount
    def set_charge_amount(self, charge_amount): self.charge_amount = charge_amount
    def validate_account_numberType(self, value):
        # Validate type account-numberType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on account-numberType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on account-numberType' % {"value" : value} )
    def validate_auth_codeType(self, value):
        # Validate type auth-codeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on auth-codeType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on auth-codeType' % {"value" : value} )
    def validate_charge_amountType(self, value):
        # Validate type charge-amountType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 9999999.99:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on charge-amountType' % {"value" : value} )
            if value <= 0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on charge-amountType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.account_number is not None or
            self.auth_code is not None or
            self.auth_timestamp is not None or
            self.charge_amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PreAuthorizedPaymentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAuthorizedPaymentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PreAuthorizedPaymentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PreAuthorizedPaymentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PreAuthorizedPaymentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PreAuthorizedPaymentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.account_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<account-number>%s</account-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.account_number), input_name='account-number')), eol_))
        if self.auth_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-code>%s</auth-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.auth_code), input_name='auth-code')), eol_))
        if self.auth_timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-timestamp>%s</auth-timestamp>%s' % (self.gds_format_datetime(self.auth_timestamp, input_name='auth-timestamp'), eol_))
        if self.charge_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<charge-amount>%s</charge-amount>%s' % (self.gds_format_float(self.charge_amount, input_name='charge-amount'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'account-number':
            account_number_ = child_.text
            account_number_ = self.gds_validate_string(account_number_, node, 'account_number')
            self.account_number = account_number_
            # validate type account-numberType
            self.validate_account_numberType(self.account_number)
        elif nodeName_ == 'auth-code':
            auth_code_ = child_.text
            auth_code_ = self.gds_validate_string(auth_code_, node, 'auth_code')
            self.auth_code = auth_code_
            # validate type auth-codeType
            self.validate_auth_codeType(self.auth_code)
        elif nodeName_ == 'auth-timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.auth_timestamp = dval_
        elif nodeName_ == 'charge-amount':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'charge_amount')
            self.charge_amount = fval_
            # validate type charge-amountType
            self.validate_charge_amountType(self.charge_amount)
# end class PreAuthorizedPaymentType


class ShipmentDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, customer_request_id=None, shipment_status=None, final_shipping_point=None, tracking_pin=None, po_number=None, shipping_point_id=None, cpc_pickup_indicator=None, shipment_detail=None):
        self.original_tagname_ = None
        self.customer_request_id = customer_request_id
        self.validate_CustomerRequestIdType(self.customer_request_id)
        self.shipment_status = shipment_status
        self.validate_ShipmentStatusType(self.shipment_status)
        self.final_shipping_point = final_shipping_point
        self.tracking_pin = tracking_pin
        self.validate_TrackingPINType(self.tracking_pin)
        self.po_number = po_number
        self.shipping_point_id = shipping_point_id
        self.cpc_pickup_indicator = cpc_pickup_indicator
        self.shipment_detail = shipment_detail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDetailsType.subclass:
            return ShipmentDetailsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_customer_request_id(self): return self.customer_request_id
    def set_customer_request_id(self, customer_request_id): self.customer_request_id = customer_request_id
    def get_shipment_status(self): return self.shipment_status
    def set_shipment_status(self, shipment_status): self.shipment_status = shipment_status
    def get_final_shipping_point(self): return self.final_shipping_point
    def set_final_shipping_point(self, final_shipping_point): self.final_shipping_point = final_shipping_point
    def get_tracking_pin(self): return self.tracking_pin
    def set_tracking_pin(self, tracking_pin): self.tracking_pin = tracking_pin
    def get_po_number(self): return self.po_number
    def set_po_number(self, po_number): self.po_number = po_number
    def get_shipping_point_id(self): return self.shipping_point_id
    def set_shipping_point_id(self, shipping_point_id): self.shipping_point_id = shipping_point_id
    def get_cpc_pickup_indicator(self): return self.cpc_pickup_indicator
    def set_cpc_pickup_indicator(self, cpc_pickup_indicator): self.cpc_pickup_indicator = cpc_pickup_indicator
    def get_shipment_detail(self): return self.shipment_detail
    def set_shipment_detail(self, shipment_detail): self.shipment_detail = shipment_detail
    def validate_CustomerRequestIdType(self, value):
        # Validate type CustomerRequestIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CustomerRequestIdType' % {"value" : value} )
    def validate_ShipmentStatusType(self, value):
        # Validate type ShipmentStatusType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ShipmentStatusType' % {"value" : value} )
    def validate_TrackingPINType(self, value):
        # Validate type TrackingPINType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 16:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on TrackingPINType' % {"value" : value} )
            if len(str(value)) < 11:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on TrackingPINType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.customer_request_id is not None or
            self.shipment_status is not None or
            self.final_shipping_point is not None or
            self.tracking_pin is not None or
            self.po_number is not None or
            self.shipping_point_id is not None or
            self.cpc_pickup_indicator is not None or
            self.shipment_detail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customer_request_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customer-request-id>%s</customer-request-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customer_request_id), input_name='customer-request-id')), eol_))
        if self.shipment_status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipment-status>%s</shipment-status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipment_status), input_name='shipment-status')), eol_))
        if self.final_shipping_point is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<final-shipping-point>%s</final-shipping-point>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.final_shipping_point), input_name='final-shipping-point')), eol_))
        if self.tracking_pin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tracking-pin>%s</tracking-pin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tracking_pin), input_name='tracking-pin')), eol_))
        if self.po_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<po-number>%s</po-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.po_number), input_name='po-number')), eol_))
        if self.shipping_point_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<shipping-point-id>%s</shipping-point-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.shipping_point_id), input_name='shipping-point-id')), eol_))
        if self.cpc_pickup_indicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cpc-pickup-indicator>%s</cpc-pickup-indicator>%s' % (self.gds_format_boolean(self.cpc_pickup_indicator, input_name='cpc-pickup-indicator'), eol_))
        if self.shipment_detail is not None:
            self.shipment_detail.export(outfile, level, namespace_, name_='shipment-detail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'customer-request-id':
            customer_request_id_ = child_.text
            customer_request_id_ = self.gds_validate_string(customer_request_id_, node, 'customer_request_id')
            self.customer_request_id = customer_request_id_
            # validate type CustomerRequestIdType
            self.validate_CustomerRequestIdType(self.customer_request_id)
        elif nodeName_ == 'shipment-status':
            shipment_status_ = child_.text
            shipment_status_ = self.gds_validate_string(shipment_status_, node, 'shipment_status')
            self.shipment_status = shipment_status_
            # validate type ShipmentStatusType
            self.validate_ShipmentStatusType(self.shipment_status)
        elif nodeName_ == 'final-shipping-point':
            final_shipping_point_ = child_.text
            final_shipping_point_ = self.gds_validate_string(final_shipping_point_, node, 'final_shipping_point')
            self.final_shipping_point = final_shipping_point_
        elif nodeName_ == 'tracking-pin':
            tracking_pin_ = child_.text
            tracking_pin_ = self.gds_validate_string(tracking_pin_, node, 'tracking_pin')
            self.tracking_pin = tracking_pin_
            # validate type TrackingPINType
            self.validate_TrackingPINType(self.tracking_pin)
        elif nodeName_ == 'po-number':
            po_number_ = child_.text
            po_number_ = self.gds_validate_string(po_number_, node, 'po_number')
            self.po_number = po_number_
        elif nodeName_ == 'shipping-point-id':
            shipping_point_id_ = child_.text
            shipping_point_id_ = self.gds_validate_string(shipping_point_id_, node, 'shipping_point_id')
            self.shipping_point_id = shipping_point_id_
        elif nodeName_ == 'cpc-pickup-indicator':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'cpc_pickup_indicator')
            self.cpc_pickup_indicator = ival_
        elif nodeName_ == 'shipment-detail':
            obj_ = shipment_detailType.factory()
            obj_.build(child_)
            self.shipment_detail = obj_
            obj_.original_tagname_ = 'shipment-detail'
# end class ShipmentDetailsType


class ShipmentCCReceiptType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cc_receipt_details=None):
        self.original_tagname_ = None
        self.cc_receipt_details = cc_receipt_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentCCReceiptType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentCCReceiptType.subclass:
            return ShipmentCCReceiptType.subclass(*args_, **kwargs_)
        else:
            return ShipmentCCReceiptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cc_receipt_details(self): return self.cc_receipt_details
    def set_cc_receipt_details(self, cc_receipt_details): self.cc_receipt_details = cc_receipt_details
    def hasContent_(self):
        if (
            self.cc_receipt_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentCCReceiptType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentCCReceiptType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentCCReceiptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentCCReceiptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentCCReceiptType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentCCReceiptType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cc_receipt_details is not None:
            self.cc_receipt_details.export(outfile, level, namespace_, name_='cc-receipt-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cc-receipt-details':
            obj_ = cc_receipt_detailsType.factory()
            obj_.build(child_)
            self.cc_receipt_details = obj_
            obj_.original_tagname_ = 'cc-receipt-details'
# end class ShipmentCCReceiptType


class ShipmentReceiptType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cc_receipt_details=None, supplier_account_receipt_details=None):
        self.original_tagname_ = None
        self.cc_receipt_details = cc_receipt_details
        self.supplier_account_receipt_details = supplier_account_receipt_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentReceiptType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentReceiptType.subclass:
            return ShipmentReceiptType.subclass(*args_, **kwargs_)
        else:
            return ShipmentReceiptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cc_receipt_details(self): return self.cc_receipt_details
    def set_cc_receipt_details(self, cc_receipt_details): self.cc_receipt_details = cc_receipt_details
    def get_supplier_account_receipt_details(self): return self.supplier_account_receipt_details
    def set_supplier_account_receipt_details(self, supplier_account_receipt_details): self.supplier_account_receipt_details = supplier_account_receipt_details
    def hasContent_(self):
        if (
            self.cc_receipt_details is not None or
            self.supplier_account_receipt_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentReceiptType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentReceiptType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentReceiptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentReceiptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentReceiptType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentReceiptType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cc_receipt_details is not None:
            self.cc_receipt_details.export(outfile, level, namespace_, name_='cc-receipt-details', pretty_print=pretty_print)
        if self.supplier_account_receipt_details is not None:
            self.supplier_account_receipt_details.export(outfile, level, namespace_, name_='supplier-account-receipt-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cc-receipt-details':
            obj_ = cc_receipt_detailsType9.factory()
            obj_.build(child_)
            self.cc_receipt_details = obj_
            obj_.original_tagname_ = 'cc-receipt-details'
        elif nodeName_ == 'supplier-account-receipt-details':
            obj_ = supplier_account_receipt_detailsType.factory()
            obj_.build(child_)
            self.supplier_account_receipt_details = obj_
            obj_.original_tagname_ = 'supplier-account-receipt-details'
# end class ShipmentReceiptType


class ShipmentRefundRequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, email=None):
        self.original_tagname_ = None
        self.email = email
        self.validate_EmailType(self.email)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRefundRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRefundRequestType.subclass:
            return ShipmentRefundRequestType.subclass(*args_, **kwargs_)
        else:
            return ShipmentRefundRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def validate_EmailType(self, value):
        # Validate type EmailType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on EmailType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_EmailType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EmailType_patterns_, ))
    validate_EmailType_patterns_ = [["^(['_A-Za-z0-9\\-\\+]+)(\\.['_A-Za-z0-9\\-\\+]+)*@([A-Za-z0-9-]+)(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,5})$"]]
    def hasContent_(self):
        if (
            self.email is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentRefundRequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRefundRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentRefundRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentRefundRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentRefundRequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentRefundRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<email>%s</email>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
            # validate type EmailType
            self.validate_EmailType(self.email)
# end class ShipmentRefundRequestType


class ShipmentRefundRequestInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_ticket_date=None, service_ticket_id=None):
        self.original_tagname_ = None
        if isinstance(service_ticket_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(service_ticket_date, '%Y-%m-%d').date()
        else:
            initvalue_ = service_ticket_date
        self.service_ticket_date = initvalue_
        self.service_ticket_id = service_ticket_id
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRefundRequestInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRefundRequestInfoType.subclass:
            return ShipmentRefundRequestInfoType.subclass(*args_, **kwargs_)
        else:
            return ShipmentRefundRequestInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_ticket_date(self): return self.service_ticket_date
    def set_service_ticket_date(self, service_ticket_date): self.service_ticket_date = service_ticket_date
    def get_service_ticket_id(self): return self.service_ticket_id
    def set_service_ticket_id(self, service_ticket_id): self.service_ticket_id = service_ticket_id
    def hasContent_(self):
        if (
            self.service_ticket_date is not None or
            self.service_ticket_id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentRefundRequestInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRefundRequestInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentRefundRequestInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentRefundRequestInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentRefundRequestInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentRefundRequestInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_ticket_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-ticket-date>%s</service-ticket-date>%s' % (self.gds_format_date(self.service_ticket_date, input_name='service-ticket-date'), eol_))
        if self.service_ticket_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-ticket-id>%s</service-ticket-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_ticket_id), input_name='service-ticket-id')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-ticket-date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.service_ticket_date = dval_
        elif nodeName_ == 'service-ticket-id':
            service_ticket_id_ = child_.text
            service_ticket_id_ = self.gds_validate_string(service_ticket_id_, node, 'service_ticket_id')
            self.service_ticket_id = service_ticket_id_
# end class ShipmentRefundRequestInfoType


class optionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option=None):
        self.original_tagname_ = None
        if option is None:
            self.option = []
        else:
            self.option = option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionsType.subclass:
            return optionsType.subclass(*args_, **kwargs_)
        else:
            return optionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def hasContent_(self):
        if (
            self.option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='optionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option':
            obj_ = OptionType.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
# end class optionsType


class sku_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, item=None):
        self.original_tagname_ = None
        if item is None:
            self.item = []
        else:
            self.item = item
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, sku_listType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if sku_listType.subclass:
            return sku_listType.subclass(*args_, **kwargs_)
        else:
            return sku_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_item(self): return self.item
    def set_item(self, item): self.item = item
    def add_item(self, value): self.item.append(value)
    def insert_item_at(self, index, value): self.item.insert(index, value)
    def replace_item_at(self, index, value): self.item[index] = value
    def hasContent_(self):
        if (
            self.item
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sku-listType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('sku-listType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sku-listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sku-listType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sku-listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sku-listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for item_ in self.item:
            item_.export(outfile, level, namespace_, name_='item', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'item':
            obj_ = SkuType.factory()
            obj_.build(child_)
            self.item.append(obj_)
            obj_.original_tagname_ = 'item'
# end class sku_listType


class dimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, length=None, width=None, height=None):
        self.original_tagname_ = None
        self.length = length
        self.width = width
        self.height = height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dimensionsType.subclass:
            return dimensionsType.subclass(*args_, **kwargs_)
        else:
            return dimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def hasContent_(self):
        if (
            self.length is not None or
            self.width is not None or
            self.height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<length>%s</length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.length), input_name='length')), eol_))
        if self.width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<width>%s</width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.width), input_name='width')), eol_))
        if self.height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<height>%s</height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.height), input_name='height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'length':
            length_ = child_.text
            length_ = self.gds_validate_string(length_, node, 'length')
            self.length = length_
        elif nodeName_ == 'width':
            width_ = child_.text
            width_ = self.gds_validate_string(width_, node, 'width')
            self.width = width_
        elif nodeName_ == 'height':
            height_ = child_.text
            height_ = self.gds_validate_string(height_, node, 'height')
            self.height = height_
# end class dimensionsType


class shipment_detailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, groupIdOrTransmitShipment=None, quickship_label_requested=None, expected_mailing_date=None, delivery_spec=None, return_spec=None, refund_request_info=None):
        self.original_tagname_ = None
        self.groupIdOrTransmitShipment = groupIdOrTransmitShipment
        self.quickship_label_requested = quickship_label_requested
        if isinstance(expected_mailing_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(expected_mailing_date, '%Y-%m-%d').date()
        else:
            initvalue_ = expected_mailing_date
        self.expected_mailing_date = initvalue_
        self.delivery_spec = delivery_spec
        self.return_spec = return_spec
        self.refund_request_info = refund_request_info
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shipment_detailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shipment_detailType.subclass:
            return shipment_detailType.subclass(*args_, **kwargs_)
        else:
            return shipment_detailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_groupIdOrTransmitShipment(self): return self.groupIdOrTransmitShipment
    def set_groupIdOrTransmitShipment(self, groupIdOrTransmitShipment): self.groupIdOrTransmitShipment = groupIdOrTransmitShipment
    def get_quickship_label_requested(self): return self.quickship_label_requested
    def set_quickship_label_requested(self, quickship_label_requested): self.quickship_label_requested = quickship_label_requested
    def get_expected_mailing_date(self): return self.expected_mailing_date
    def set_expected_mailing_date(self, expected_mailing_date): self.expected_mailing_date = expected_mailing_date
    def get_delivery_spec(self): return self.delivery_spec
    def set_delivery_spec(self, delivery_spec): self.delivery_spec = delivery_spec
    def get_return_spec(self): return self.return_spec
    def set_return_spec(self, return_spec): self.return_spec = return_spec
    def get_refund_request_info(self): return self.refund_request_info
    def set_refund_request_info(self, refund_request_info): self.refund_request_info = refund_request_info
    def hasContent_(self):
        if (
            self.groupIdOrTransmitShipment is not None or
            self.quickship_label_requested is not None or
            self.expected_mailing_date is not None or
            self.delivery_spec is not None or
            self.return_spec is not None or
            self.refund_request_info is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='shipment-detailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shipment-detailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='shipment-detailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='shipment-detailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='shipment-detailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='shipment-detailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.groupIdOrTransmitShipment is not None:
            self.groupIdOrTransmitShipment.export(outfile, level, namespace_, pretty_print=pretty_print)
        if self.quickship_label_requested is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<quickship-label-requested>%s</quickship-label-requested>%s' % (self.gds_format_boolean(self.quickship_label_requested, input_name='quickship-label-requested'), eol_))
        if self.expected_mailing_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<expected-mailing-date>%s</expected-mailing-date>%s' % (self.gds_format_date(self.expected_mailing_date, input_name='expected-mailing-date'), eol_))
        if self.delivery_spec is not None:
            self.delivery_spec.export(outfile, level, namespace_, name_='delivery-spec', pretty_print=pretty_print)
        if self.return_spec is not None:
            self.return_spec.export(outfile, level, namespace_, name_='return-spec', pretty_print=pretty_print)
        if self.refund_request_info is not None:
            self.refund_request_info.export(outfile, level, namespace_, name_='refund-request-info', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'groupIdOrTransmitShipment':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <groupIdOrTransmitShipment> element')
            self.groupIdOrTransmitShipment = obj_
            obj_.original_tagname_ = 'groupIdOrTransmitShipment'
        elif nodeName_ == 'quickship-label-requested':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'quickship_label_requested')
            self.quickship_label_requested = ival_
        elif nodeName_ == 'expected-mailing-date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.expected_mailing_date = dval_
        elif nodeName_ == 'delivery-spec':
            obj_ = delivery_specType.factory()
            obj_.build(child_)
            self.delivery_spec = obj_
            obj_.original_tagname_ = 'delivery-spec'
        elif nodeName_ == 'return-spec':
            obj_ = ReturnSpecType.factory()
            obj_.build(child_)
            self.return_spec = obj_
            obj_.original_tagname_ = 'return-spec'
        elif nodeName_ == 'refund-request-info':
            obj_ = ShipmentRefundRequestInfoType.factory()
            obj_.build(child_)
            self.refund_request_info = obj_
            obj_.original_tagname_ = 'refund-request-info'
# end class shipment_detailType


class delivery_specType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, sender=None, destination=None, recipient=None, options=None, parcel_characteristics=None, notification=None, print_preferences=None, preferences=None, references=None, customs=None, settlement_info=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.sender = sender
        self.destination = destination
        self.recipient = recipient
        self.options = options
        self.parcel_characteristics = parcel_characteristics
        self.notification = notification
        self.print_preferences = print_preferences
        self.preferences = preferences
        self.references = references
        self.customs = customs
        self.settlement_info = settlement_info
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, delivery_specType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if delivery_specType.subclass:
            return delivery_specType.subclass(*args_, **kwargs_)
        else:
            return delivery_specType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_sender(self): return self.sender
    def set_sender(self, sender): self.sender = sender
    def get_destination(self): return self.destination
    def set_destination(self, destination): self.destination = destination
    def get_recipient(self): return self.recipient
    def set_recipient(self, recipient): self.recipient = recipient
    def get_options(self): return self.options
    def set_options(self, options): self.options = options
    def get_parcel_characteristics(self): return self.parcel_characteristics
    def set_parcel_characteristics(self, parcel_characteristics): self.parcel_characteristics = parcel_characteristics
    def get_notification(self): return self.notification
    def set_notification(self, notification): self.notification = notification
    def get_print_preferences(self): return self.print_preferences
    def set_print_preferences(self, print_preferences): self.print_preferences = print_preferences
    def get_preferences(self): return self.preferences
    def set_preferences(self, preferences): self.preferences = preferences
    def get_references(self): return self.references
    def set_references(self, references): self.references = references
    def get_customs(self): return self.customs
    def set_customs(self, customs): self.customs = customs
    def get_settlement_info(self): return self.settlement_info
    def set_settlement_info(self, settlement_info): self.settlement_info = settlement_info
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.sender is not None or
            self.destination is not None or
            self.recipient is not None or
            self.options is not None or
            self.parcel_characteristics is not None or
            self.notification is not None or
            self.print_preferences is not None or
            self.preferences is not None or
            self.references is not None or
            self.customs is not None or
            self.settlement_info is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='delivery-specType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('delivery-specType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='delivery-specType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='delivery-specType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='delivery-specType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='delivery-specType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.sender is not None:
            self.sender.export(outfile, level, namespace_, name_='sender', pretty_print=pretty_print)
        if self.destination is not None:
            self.destination.export(outfile, level, namespace_, name_='destination', pretty_print=pretty_print)
        if self.recipient is not None:
            self.recipient.export(outfile, level, namespace_, name_='recipient', pretty_print=pretty_print)
        if self.options is not None:
            self.options.export(outfile, level, namespace_, name_='options', pretty_print=pretty_print)
        if self.parcel_characteristics is not None:
            self.parcel_characteristics.export(outfile, level, namespace_, name_='parcel-characteristics', pretty_print=pretty_print)
        if self.notification is not None:
            self.notification.export(outfile, level, namespace_, name_='notification', pretty_print=pretty_print)
        if self.print_preferences is not None:
            self.print_preferences.export(outfile, level, namespace_, name_='print-preferences', pretty_print=pretty_print)
        if self.preferences is not None:
            self.preferences.export(outfile, level, namespace_, name_='preferences', pretty_print=pretty_print)
        if self.references is not None:
            self.references.export(outfile, level, namespace_, name_='references', pretty_print=pretty_print)
        if self.customs is not None:
            self.customs.export(outfile, level, namespace_, name_='customs', pretty_print=pretty_print)
        if self.settlement_info is not None:
            self.settlement_info.export(outfile, level, namespace_, name_='settlement-info', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
        elif nodeName_ == 'sender':
            obj_ = SenderType.factory()
            obj_.build(child_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'destination':
            obj_ = DestinationType.factory()
            obj_.build(child_)
            self.destination = obj_
            obj_.original_tagname_ = 'destination'
        elif nodeName_ == 'recipient':
            obj_ = RecipientAddressType.factory()
            obj_.build(child_)
            self.recipient = obj_
            obj_.original_tagname_ = 'recipient'
        elif nodeName_ == 'options':
            obj_ = optionsType8.factory()
            obj_.build(child_)
            self.options = obj_
            obj_.original_tagname_ = 'options'
        elif nodeName_ == 'parcel-characteristics':
            obj_ = ParcelCharacteristicsType.factory()
            obj_.build(child_)
            self.parcel_characteristics = obj_
            obj_.original_tagname_ = 'parcel-characteristics'
        elif nodeName_ == 'notification':
            obj_ = NotificationType.factory()
            obj_.build(child_)
            self.notification = obj_
            obj_.original_tagname_ = 'notification'
        elif nodeName_ == 'print-preferences':
            obj_ = PrintPreferencesType.factory()
            obj_.build(child_)
            self.print_preferences = obj_
            obj_.original_tagname_ = 'print-preferences'
        elif nodeName_ == 'preferences':
            obj_ = PreferencesType.factory()
            obj_.build(child_)
            self.preferences = obj_
            obj_.original_tagname_ = 'preferences'
        elif nodeName_ == 'references':
            obj_ = ReferencesType.factory()
            obj_.build(child_)
            self.references = obj_
            obj_.original_tagname_ = 'references'
        elif nodeName_ == 'customs':
            obj_ = CustomsType.factory()
            obj_.build(child_)
            self.customs = obj_
            obj_.original_tagname_ = 'customs'
        elif nodeName_ == 'settlement-info':
            obj_ = SettlementInfoType.factory()
            obj_.build(child_)
            self.settlement_info = obj_
            obj_.original_tagname_ = 'settlement-info'
# end class delivery_specType


class optionsType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option=None):
        self.original_tagname_ = None
        if option is None:
            self.option = []
        else:
            self.option = option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionsType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionsType8.subclass:
            return optionsType8.subclass(*args_, **kwargs_)
        else:
            return optionsType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def hasContent_(self):
        if (
            self.option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionsType8', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionsType8')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionsType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionsType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionsType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='optionsType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option':
            obj_ = OptionType.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
# end class optionsType8


class cc_receipt_detailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, merchant_name=None, merchant_url=None, name_on_card=None, auth_code=None, auth_timestamp=None, card_type=None, charge_amount=None, currency=None, transaction_type=None):
        self.original_tagname_ = None
        self.merchant_name = merchant_name
        self.validate_merchant_nameType(self.merchant_name)
        self.merchant_url = merchant_url
        self.validate_merchant_urlType(self.merchant_url)
        self.name_on_card = name_on_card
        self.auth_code = auth_code
        if isinstance(auth_timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(auth_timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = auth_timestamp
        self.auth_timestamp = initvalue_
        self.card_type = card_type
        self.charge_amount = charge_amount
        self.currency = currency
        self.transaction_type = transaction_type
        self.validate_transaction_typeType(self.transaction_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cc_receipt_detailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cc_receipt_detailsType.subclass:
            return cc_receipt_detailsType.subclass(*args_, **kwargs_)
        else:
            return cc_receipt_detailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_merchant_name(self): return self.merchant_name
    def set_merchant_name(self, merchant_name): self.merchant_name = merchant_name
    def get_merchant_url(self): return self.merchant_url
    def set_merchant_url(self, merchant_url): self.merchant_url = merchant_url
    def get_name_on_card(self): return self.name_on_card
    def set_name_on_card(self, name_on_card): self.name_on_card = name_on_card
    def get_auth_code(self): return self.auth_code
    def set_auth_code(self, auth_code): self.auth_code = auth_code
    def get_auth_timestamp(self): return self.auth_timestamp
    def set_auth_timestamp(self, auth_timestamp): self.auth_timestamp = auth_timestamp
    def get_card_type(self): return self.card_type
    def set_card_type(self, card_type): self.card_type = card_type
    def get_charge_amount(self): return self.charge_amount
    def set_charge_amount(self, charge_amount): self.charge_amount = charge_amount
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_transaction_type(self): return self.transaction_type
    def set_transaction_type(self, transaction_type): self.transaction_type = transaction_type
    def validate_merchant_nameType(self, value):
        # Validate type merchant-nameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-nameType' % {"value" : value} )
    def validate_merchant_urlType(self, value):
        # Validate type merchant-urlType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-urlType' % {"value" : value} )
    def validate_transaction_typeType(self, value):
        # Validate type transaction-typeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on transaction-typeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.merchant_name is not None or
            self.merchant_url is not None or
            self.name_on_card is not None or
            self.auth_code is not None or
            self.auth_timestamp is not None or
            self.card_type is not None or
            self.charge_amount is not None or
            self.currency is not None or
            self.transaction_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cc-receipt-detailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cc-receipt-detailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cc-receipt-detailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cc-receipt-detailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cc-receipt-detailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cc-receipt-detailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.merchant_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-name>%s</merchant-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_name), input_name='merchant-name')), eol_))
        if self.merchant_url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-url>%s</merchant-url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_url), input_name='merchant-url')), eol_))
        if self.name_on_card is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name-on-card>%s</name-on-card>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name_on_card), input_name='name-on-card')), eol_))
        if self.auth_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-code>%s</auth-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.auth_code), input_name='auth-code')), eol_))
        if self.auth_timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-timestamp>%s</auth-timestamp>%s' % (self.gds_format_datetime(self.auth_timestamp, input_name='auth-timestamp'), eol_))
        if self.card_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<card-type>%s</card-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.card_type), input_name='card-type')), eol_))
        if self.charge_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<charge-amount>%s</charge-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.charge_amount), input_name='charge-amount')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.transaction_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<transaction-type>%s</transaction-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.transaction_type), input_name='transaction-type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'merchant-name':
            merchant_name_ = child_.text
            merchant_name_ = self.gds_validate_string(merchant_name_, node, 'merchant_name')
            self.merchant_name = merchant_name_
            # validate type merchant-nameType
            self.validate_merchant_nameType(self.merchant_name)
        elif nodeName_ == 'merchant-url':
            merchant_url_ = child_.text
            merchant_url_ = self.gds_validate_string(merchant_url_, node, 'merchant_url')
            self.merchant_url = merchant_url_
            # validate type merchant-urlType
            self.validate_merchant_urlType(self.merchant_url)
        elif nodeName_ == 'name-on-card':
            name_on_card_ = child_.text
            name_on_card_ = self.gds_validate_string(name_on_card_, node, 'name_on_card')
            self.name_on_card = name_on_card_
        elif nodeName_ == 'auth-code':
            auth_code_ = child_.text
            auth_code_ = self.gds_validate_string(auth_code_, node, 'auth_code')
            self.auth_code = auth_code_
        elif nodeName_ == 'auth-timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.auth_timestamp = dval_
        elif nodeName_ == 'card-type':
            card_type_ = child_.text
            card_type_ = self.gds_validate_string(card_type_, node, 'card_type')
            self.card_type = card_type_
        elif nodeName_ == 'charge-amount':
            charge_amount_ = child_.text
            charge_amount_ = self.gds_validate_string(charge_amount_, node, 'charge_amount')
            self.charge_amount = charge_amount_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'transaction-type':
            transaction_type_ = child_.text
            transaction_type_ = self.gds_validate_string(transaction_type_, node, 'transaction_type')
            self.transaction_type = transaction_type_
            # validate type transaction-typeType
            self.validate_transaction_typeType(self.transaction_type)
# end class cc_receipt_detailsType


class cc_receipt_detailsType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, merchant_name=None, merchant_url=None, name_on_card=None, auth_code=None, auth_timestamp=None, card_type=None, charge_amount=None, currency=None, transaction_type=None):
        self.original_tagname_ = None
        self.merchant_name = merchant_name
        self.validate_merchant_nameType10(self.merchant_name)
        self.merchant_url = merchant_url
        self.validate_merchant_urlType11(self.merchant_url)
        self.name_on_card = name_on_card
        self.auth_code = auth_code
        if isinstance(auth_timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(auth_timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = auth_timestamp
        self.auth_timestamp = initvalue_
        self.card_type = card_type
        self.charge_amount = charge_amount
        self.currency = currency
        self.transaction_type = transaction_type
        self.validate_transaction_typeType12(self.transaction_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cc_receipt_detailsType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cc_receipt_detailsType9.subclass:
            return cc_receipt_detailsType9.subclass(*args_, **kwargs_)
        else:
            return cc_receipt_detailsType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_merchant_name(self): return self.merchant_name
    def set_merchant_name(self, merchant_name): self.merchant_name = merchant_name
    def get_merchant_url(self): return self.merchant_url
    def set_merchant_url(self, merchant_url): self.merchant_url = merchant_url
    def get_name_on_card(self): return self.name_on_card
    def set_name_on_card(self, name_on_card): self.name_on_card = name_on_card
    def get_auth_code(self): return self.auth_code
    def set_auth_code(self, auth_code): self.auth_code = auth_code
    def get_auth_timestamp(self): return self.auth_timestamp
    def set_auth_timestamp(self, auth_timestamp): self.auth_timestamp = auth_timestamp
    def get_card_type(self): return self.card_type
    def set_card_type(self, card_type): self.card_type = card_type
    def get_charge_amount(self): return self.charge_amount
    def set_charge_amount(self, charge_amount): self.charge_amount = charge_amount
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_transaction_type(self): return self.transaction_type
    def set_transaction_type(self, transaction_type): self.transaction_type = transaction_type
    def validate_merchant_nameType10(self, value):
        # Validate type merchant-nameType10, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-nameType10' % {"value" : value} )
    def validate_merchant_urlType11(self, value):
        # Validate type merchant-urlType11, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-urlType11' % {"value" : value} )
    def validate_transaction_typeType12(self, value):
        # Validate type transaction-typeType12, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on transaction-typeType12' % {"value" : value} )
    def hasContent_(self):
        if (
            self.merchant_name is not None or
            self.merchant_url is not None or
            self.name_on_card is not None or
            self.auth_code is not None or
            self.auth_timestamp is not None or
            self.card_type is not None or
            self.charge_amount is not None or
            self.currency is not None or
            self.transaction_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cc-receipt-detailsType9', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cc-receipt-detailsType9')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cc-receipt-detailsType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cc-receipt-detailsType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cc-receipt-detailsType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cc-receipt-detailsType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.merchant_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-name>%s</merchant-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_name), input_name='merchant-name')), eol_))
        if self.merchant_url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-url>%s</merchant-url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_url), input_name='merchant-url')), eol_))
        if self.name_on_card is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name-on-card>%s</name-on-card>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name_on_card), input_name='name-on-card')), eol_))
        if self.auth_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-code>%s</auth-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.auth_code), input_name='auth-code')), eol_))
        if self.auth_timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-timestamp>%s</auth-timestamp>%s' % (self.gds_format_datetime(self.auth_timestamp, input_name='auth-timestamp'), eol_))
        if self.card_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<card-type>%s</card-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.card_type), input_name='card-type')), eol_))
        if self.charge_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<charge-amount>%s</charge-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.charge_amount), input_name='charge-amount')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.transaction_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<transaction-type>%s</transaction-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.transaction_type), input_name='transaction-type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'merchant-name':
            merchant_name_ = child_.text
            merchant_name_ = self.gds_validate_string(merchant_name_, node, 'merchant_name')
            self.merchant_name = merchant_name_
            # validate type merchant-nameType10
            self.validate_merchant_nameType10(self.merchant_name)
        elif nodeName_ == 'merchant-url':
            merchant_url_ = child_.text
            merchant_url_ = self.gds_validate_string(merchant_url_, node, 'merchant_url')
            self.merchant_url = merchant_url_
            # validate type merchant-urlType11
            self.validate_merchant_urlType11(self.merchant_url)
        elif nodeName_ == 'name-on-card':
            name_on_card_ = child_.text
            name_on_card_ = self.gds_validate_string(name_on_card_, node, 'name_on_card')
            self.name_on_card = name_on_card_
        elif nodeName_ == 'auth-code':
            auth_code_ = child_.text
            auth_code_ = self.gds_validate_string(auth_code_, node, 'auth_code')
            self.auth_code = auth_code_
        elif nodeName_ == 'auth-timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.auth_timestamp = dval_
        elif nodeName_ == 'card-type':
            card_type_ = child_.text
            card_type_ = self.gds_validate_string(card_type_, node, 'card_type')
            self.card_type = card_type_
        elif nodeName_ == 'charge-amount':
            charge_amount_ = child_.text
            charge_amount_ = self.gds_validate_string(charge_amount_, node, 'charge_amount')
            self.charge_amount = charge_amount_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'transaction-type':
            transaction_type_ = child_.text
            transaction_type_ = self.gds_validate_string(transaction_type_, node, 'transaction_type')
            self.transaction_type = transaction_type_
            # validate type transaction-typeType12
            self.validate_transaction_typeType12(self.transaction_type)
# end class cc_receipt_detailsType9


class supplier_account_receipt_detailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, merchant_name=None, merchant_url=None, auth_code=None, auth_timestamp=None, supplier_id=None, charge_amount=None, currency=None, transaction_type=None):
        self.original_tagname_ = None
        self.merchant_name = merchant_name
        self.validate_merchant_nameType13(self.merchant_name)
        self.merchant_url = merchant_url
        self.validate_merchant_urlType14(self.merchant_url)
        self.auth_code = auth_code
        if isinstance(auth_timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(auth_timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = auth_timestamp
        self.auth_timestamp = initvalue_
        self.supplier_id = supplier_id
        self.charge_amount = charge_amount
        self.currency = currency
        self.transaction_type = transaction_type
        self.validate_transaction_typeType15(self.transaction_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, supplier_account_receipt_detailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if supplier_account_receipt_detailsType.subclass:
            return supplier_account_receipt_detailsType.subclass(*args_, **kwargs_)
        else:
            return supplier_account_receipt_detailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_merchant_name(self): return self.merchant_name
    def set_merchant_name(self, merchant_name): self.merchant_name = merchant_name
    def get_merchant_url(self): return self.merchant_url
    def set_merchant_url(self, merchant_url): self.merchant_url = merchant_url
    def get_auth_code(self): return self.auth_code
    def set_auth_code(self, auth_code): self.auth_code = auth_code
    def get_auth_timestamp(self): return self.auth_timestamp
    def set_auth_timestamp(self, auth_timestamp): self.auth_timestamp = auth_timestamp
    def get_supplier_id(self): return self.supplier_id
    def set_supplier_id(self, supplier_id): self.supplier_id = supplier_id
    def get_charge_amount(self): return self.charge_amount
    def set_charge_amount(self, charge_amount): self.charge_amount = charge_amount
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_transaction_type(self): return self.transaction_type
    def set_transaction_type(self, transaction_type): self.transaction_type = transaction_type
    def validate_merchant_nameType13(self, value):
        # Validate type merchant-nameType13, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-nameType13' % {"value" : value} )
    def validate_merchant_urlType14(self, value):
        # Validate type merchant-urlType14, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on merchant-urlType14' % {"value" : value} )
    def validate_transaction_typeType15(self, value):
        # Validate type transaction-typeType15, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on transaction-typeType15' % {"value" : value} )
    def hasContent_(self):
        if (
            self.merchant_name is not None or
            self.merchant_url is not None or
            self.auth_code is not None or
            self.auth_timestamp is not None or
            self.supplier_id is not None or
            self.charge_amount is not None or
            self.currency is not None or
            self.transaction_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='supplier-account-receipt-detailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('supplier-account-receipt-detailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='supplier-account-receipt-detailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='supplier-account-receipt-detailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='supplier-account-receipt-detailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='supplier-account-receipt-detailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.merchant_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-name>%s</merchant-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_name), input_name='merchant-name')), eol_))
        if self.merchant_url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<merchant-url>%s</merchant-url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.merchant_url), input_name='merchant-url')), eol_))
        if self.auth_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-code>%s</auth-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.auth_code), input_name='auth-code')), eol_))
        if self.auth_timestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<auth-timestamp>%s</auth-timestamp>%s' % (self.gds_format_datetime(self.auth_timestamp, input_name='auth-timestamp'), eol_))
        if self.supplier_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<supplier-id>%s</supplier-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.supplier_id), input_name='supplier-id')), eol_))
        if self.charge_amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<charge-amount>%s</charge-amount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.charge_amount), input_name='charge-amount')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.transaction_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<transaction-type>%s</transaction-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.transaction_type), input_name='transaction-type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'merchant-name':
            merchant_name_ = child_.text
            merchant_name_ = self.gds_validate_string(merchant_name_, node, 'merchant_name')
            self.merchant_name = merchant_name_
            # validate type merchant-nameType13
            self.validate_merchant_nameType13(self.merchant_name)
        elif nodeName_ == 'merchant-url':
            merchant_url_ = child_.text
            merchant_url_ = self.gds_validate_string(merchant_url_, node, 'merchant_url')
            self.merchant_url = merchant_url_
            # validate type merchant-urlType14
            self.validate_merchant_urlType14(self.merchant_url)
        elif nodeName_ == 'auth-code':
            auth_code_ = child_.text
            auth_code_ = self.gds_validate_string(auth_code_, node, 'auth_code')
            self.auth_code = auth_code_
        elif nodeName_ == 'auth-timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.auth_timestamp = dval_
        elif nodeName_ == 'supplier-id':
            supplier_id_ = child_.text
            supplier_id_ = self.gds_validate_string(supplier_id_, node, 'supplier_id')
            self.supplier_id = supplier_id_
        elif nodeName_ == 'charge-amount':
            charge_amount_ = child_.text
            charge_amount_ = self.gds_validate_string(charge_amount_, node, 'charge_amount')
            self.charge_amount = charge_amount_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'transaction-type':
            transaction_type_ = child_.text
            transaction_type_ = self.gds_validate_string(transaction_type_, node, 'transaction_type')
            self.transaction_type = transaction_type_
            # validate type transaction-typeType15
            self.validate_transaction_typeType15(self.transaction_type)
# end class supplier_account_receipt_detailsType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentType'
        rootClass = ShipmentType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentType'
        rootClass = ShipmentType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentType'
        rootClass = ShipmentType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentType'
        rootClass = ShipmentType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from shipment import *\n\n')
        sys.stdout.write('import shipment as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AddressDetailsType",
    "AdjustmentType",
    "AdjustmentsType",
    "CustomsType",
    "DeliverySpecType",
    "DestinationAddressDetailsType",
    "DestinationType",
    "DomesticAddressDetailsType",
    "GroupType",
    "GroupsType",
    "NotificationType",
    "OptionType",
    "ParcelCharacteristicsType",
    "PreAuthorizedPaymentType",
    "PreferencesType",
    "PricedOptionType",
    "PricedOptionsType",
    "PrintPreferencesType",
    "RecipientAddressType",
    "ReferencesType",
    "ReturnRecipientType",
    "ReturnSpecType",
    "SenderType",
    "ServiceStandardType",
    "SettlementInfoType",
    "ShipmentCCReceiptType",
    "ShipmentDetailsType",
    "ShipmentInfoType",
    "ShipmentPriceType",
    "ShipmentReceiptType",
    "ShipmentRefundRequestInfoType",
    "ShipmentRefundRequestType",
    "ShipmentType",
    "ShipmentsType",
    "SkuType",
    "cc_receipt_detailsType",
    "cc_receipt_detailsType9",
    "delivery_specType",
    "dimensionsType",
    "groupIdOrTransmitShipment",
    "optionsType",
    "optionsType8",
    "shipment_detailType",
    "sku_listType",
    "supplier_account_receipt_detailsType"
]
