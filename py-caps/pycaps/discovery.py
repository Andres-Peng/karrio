#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jun 13 20:22:20 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './pycanada_post/discovery.py')
#
# Command line arguments:
#   /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/discovery.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "./pycanada_post/discovery.py" /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/discovery.xsd
#
# Current working directory (os.getcwd()):
#   py-canada_post
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class services(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service=None):
        self.original_tagname_ = None
        if service is None:
            self.service = []
        else:
            self.service = service
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, services)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if services.subclass:
            return services.subclass(*args_, **kwargs_)
        else:
            return services(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service(self): return self.service
    def set_service(self, service): self.service = service
    def add_service(self, value): self.service.append(value)
    def insert_service_at(self, index, value): self.service.insert(index, value)
    def replace_service_at(self, index, value): self.service[index] = value
    def hasContent_(self):
        if (
            self.service
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='services', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('services')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='services')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='services', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='services'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='services', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for service_ in self.service:
            service_.export(outfile, level, namespace_, name_='service', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service':
            obj_ = serviceType.factory()
            obj_.build(child_)
            self.service.append(obj_)
            obj_.original_tagname_ = 'service'
# end class services


class option(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None, option_name=None, option_class=None, prints_on_label=None, qualifier_required=None, conflicting_options=None, prerequisite_options=None):
        self.original_tagname_ = None
        self.option_code = option_code
        self.option_name = option_name
        self.option_class = option_class
        self.prints_on_label = prints_on_label
        self.qualifier_required = qualifier_required
        self.conflicting_options = conflicting_options
        self.prerequisite_options = prerequisite_options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, option)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if option.subclass:
            return option.subclass(*args_, **kwargs_)
        else:
            return option(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def get_option_name(self): return self.option_name
    def set_option_name(self, option_name): self.option_name = option_name
    def get_option_class(self): return self.option_class
    def set_option_class(self, option_class): self.option_class = option_class
    def get_prints_on_label(self): return self.prints_on_label
    def set_prints_on_label(self, prints_on_label): self.prints_on_label = prints_on_label
    def get_qualifier_required(self): return self.qualifier_required
    def set_qualifier_required(self, qualifier_required): self.qualifier_required = qualifier_required
    def get_conflicting_options(self): return self.conflicting_options
    def set_conflicting_options(self, conflicting_options): self.conflicting_options = conflicting_options
    def get_prerequisite_options(self): return self.prerequisite_options
    def set_prerequisite_options(self, prerequisite_options): self.prerequisite_options = prerequisite_options
    def hasContent_(self):
        if (
            self.option_code is not None or
            self.option_name is not None or
            self.option_class is not None or
            self.prints_on_label is not None or
            self.qualifier_required is not None or
            self.conflicting_options is not None or
            self.prerequisite_options is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='option', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('option')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='option')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='option', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='option'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='option', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.option_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_code), input_name='option-code')), eol_))
        if self.option_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-name>%s</option-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_name), input_name='option-name')), eol_))
        if self.option_class is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-class>%s</option-class>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_class), input_name='option-class')), eol_))
        if self.prints_on_label is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prints-on-label>%s</prints-on-label>%s' % (self.gds_format_boolean(self.prints_on_label, input_name='prints-on-label'), eol_))
        if self.qualifier_required is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<qualifier-required>%s</qualifier-required>%s' % (self.gds_format_boolean(self.qualifier_required, input_name='qualifier-required'), eol_))
        if self.conflicting_options is not None:
            self.conflicting_options.export(outfile, level, namespace_, name_='conflicting-options', pretty_print=pretty_print)
        if self.prerequisite_options is not None:
            self.prerequisite_options.export(outfile, level, namespace_, name_='prerequisite-options', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code = option_code_
        elif nodeName_ == 'option-name':
            option_name_ = child_.text
            option_name_ = self.gds_validate_string(option_name_, node, 'option_name')
            self.option_name = option_name_
        elif nodeName_ == 'option-class':
            option_class_ = child_.text
            option_class_ = self.gds_validate_string(option_class_, node, 'option_class')
            self.option_class = option_class_
        elif nodeName_ == 'prints-on-label':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'prints_on_label')
            self.prints_on_label = ival_
        elif nodeName_ == 'qualifier-required':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'qualifier_required')
            self.qualifier_required = ival_
        elif nodeName_ == 'conflicting-options':
            obj_ = conflicting_optionsType.factory()
            obj_.build(child_)
            self.conflicting_options = obj_
            obj_.original_tagname_ = 'conflicting-options'
        elif nodeName_ == 'prerequisite-options':
            obj_ = prerequisite_optionsType.factory()
            obj_.build(child_)
            self.prerequisite_options = obj_
            obj_.original_tagname_ = 'prerequisite-options'
# end class option


class service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, service_name=None, comment=None, options=None, restrictions=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.validate_ServiceCodeType(self.service_code)
        self.service_name = service_name
        self.comment = comment
        self.options = options
        self.restrictions = restrictions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, service)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if service.subclass:
            return service.subclass(*args_, **kwargs_)
        else:
            return service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_options(self): return self.options
    def set_options(self, options): self.options = options
    def get_restrictions(self): return self.restrictions
    def set_restrictions(self, restrictions): self.restrictions = restrictions
    def validate_ServiceCodeType(self, value):
        # Validate type ServiceCodeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ServiceCodeType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ServiceCodeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.service_name is not None or
            self.comment is not None or
            self.options is not None or
            self.restrictions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='service', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('service')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='service')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='service', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='service'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='service', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.service_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-name>%s</service-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_name), input_name='service-name')), eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<comment>%s</comment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.comment), input_name='comment')), eol_))
        if self.options is not None:
            self.options.export(outfile, level, namespace_, name_='options', pretty_print=pretty_print)
        if self.restrictions is not None:
            self.restrictions.export(outfile, level, namespace_, name_='restrictions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
            # validate type ServiceCodeType
            self.validate_ServiceCodeType(self.service_code)
        elif nodeName_ == 'service-name':
            service_name_ = child_.text
            service_name_ = self.gds_validate_string(service_name_, node, 'service_name')
            self.service_name = service_name_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'options':
            obj_ = optionsType.factory()
            obj_.build(child_)
            self.options = obj_
            obj_.original_tagname_ = 'options'
        elif nodeName_ == 'restrictions':
            obj_ = restrictionsType.factory()
            obj_.build(child_)
            self.restrictions = obj_
            obj_.original_tagname_ = 'restrictions'
# end class service


class options(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option=None):
        self.original_tagname_ = None
        if option is None:
            self.option = []
        else:
            self.option = option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, options)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if options.subclass:
            return options.subclass(*args_, **kwargs_)
        else:
            return options(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def hasContent_(self):
        if (
            self.option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='options', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('options')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='options')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='options', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='options'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='options', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option':
            obj_ = optionType1.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
# end class options


class NumberRangeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, min=None, max=None):
        self.original_tagname_ = None
        self.min = _cast(float, min)
        self.max = _cast(float, max)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NumberRangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NumberRangeType.subclass:
            return NumberRangeType.subclass(*args_, **kwargs_)
        else:
            return NumberRangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NumberRangeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NumberRangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NumberRangeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NumberRangeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NumberRangeType'):
        if self.min is not None and 'min' not in already_processed:
            already_processed.add('min')
            outfile.write(' min="%s"' % self.gds_format_float(self.min, input_name='min'))
        if self.max is not None and 'max' not in already_processed:
            already_processed.add('max')
            outfile.write(' max="%s"' % self.gds_format_float(self.max, input_name='max'))
    def exportChildren(self, outfile, level, namespace_='', name_='NumberRangeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('min', node)
        if value is not None and 'min' not in already_processed:
            already_processed.add('min')
            try:
                self.min = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (min): %s' % exp)
        value = find_attr_value_('max', node)
        if value is not None and 'max' not in already_processed:
            already_processed.add('max')
            try:
                self.max = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (max): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NumberRangeType


class links(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None):
        self.original_tagname_ = None
        if link is None:
            self.link = []
        else:
            self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, links)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if links.subclass:
            return links.subclass(*args_, **kwargs_)
        else:
            return links(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link_at(self, index, value): self.link.insert(index, value)
    def replace_link_at(self, index, value): self.link[index] = value
    def hasContent_(self):
        if (
            self.link
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='links', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('links')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='links')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='links', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='links'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='links', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'link':
            obj_ = LinkType.factory()
            obj_.build(child_)
            self.link.append(obj_)
            obj_.original_tagname_ = 'link'
# end class links


class LinkType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, href=None, rel=None, index=None, media_type=None):
        self.original_tagname_ = None
        self.href = _cast(None, href)
        self.rel = _cast(None, rel)
        self.index = _cast(int, index)
        self.media_type = _cast(None, media_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LinkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LinkType.subclass:
            return LinkType.subclass(*args_, **kwargs_)
        else:
            return LinkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_rel(self): return self.rel
    def set_rel(self, rel): self.rel = rel
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_media_type(self): return self.media_type
    def set_media_type(self, media_type): self.media_type = media_type
    def validate_RelType(self, value):
        # Validate type RelType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LinkType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LinkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LinkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LinkType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LinkType'):
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            outfile.write(' href=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.href), input_name='href')), ))
        if self.rel is not None and 'rel' not in already_processed:
            already_processed.add('rel')
            outfile.write(' rel=%s' % (quote_attrib(self.rel), ))
        if self.index is not None and 'index' not in already_processed:
            already_processed.add('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))
        if self.media_type is not None and 'media_type' not in already_processed:
            already_processed.add('media_type')
            outfile.write(' media-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.media_type), input_name='media-type')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='LinkType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.add('href')
            self.href = value
        value = find_attr_value_('rel', node)
        if value is not None and 'rel' not in already_processed:
            already_processed.add('rel')
            self.rel = value
            self.validate_RelType(self.rel)    # validate type RelType
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.add('index')
            try:
                self.index = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.index < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('media-type', node)
        if value is not None and 'media-type' not in already_processed:
            already_processed.add('media-type')
            self.media_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LinkType


class CcDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cc_type=None, cc_number=None, cc_name=None, cc_expiry=None, cc_cvv=None, cc_address_details=None):
        self.original_tagname_ = None
        self.cc_type = cc_type
        self.validate_CcType(self.cc_type)
        self.cc_number = cc_number
        self.validate_CcNumberType(self.cc_number)
        self.cc_name = cc_name
        self.validate_CcNameType(self.cc_name)
        self.cc_expiry = cc_expiry
        self.validate_CcExpiryType(self.cc_expiry)
        self.cc_cvv = cc_cvv
        self.validate_CcCvvType(self.cc_cvv)
        self.cc_address_details = cc_address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CcDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CcDetailsType.subclass:
            return CcDetailsType.subclass(*args_, **kwargs_)
        else:
            return CcDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cc_type(self): return self.cc_type
    def set_cc_type(self, cc_type): self.cc_type = cc_type
    def get_cc_number(self): return self.cc_number
    def set_cc_number(self, cc_number): self.cc_number = cc_number
    def get_cc_name(self): return self.cc_name
    def set_cc_name(self, cc_name): self.cc_name = cc_name
    def get_cc_expiry(self): return self.cc_expiry
    def set_cc_expiry(self, cc_expiry): self.cc_expiry = cc_expiry
    def get_cc_cvv(self): return self.cc_cvv
    def set_cc_cvv(self, cc_cvv): self.cc_cvv = cc_cvv
    def get_cc_address_details(self): return self.cc_address_details
    def set_cc_address_details(self, cc_address_details): self.cc_address_details = cc_address_details
    def validate_CcType(self, value):
        # Validate type CcType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['MC', 'VIS', 'AME', 'DC', 'DIS', 'ER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CcType' % {"value" : value.encode("utf-8")} )
    def validate_CcNumberType(self, value):
        # Validate type CcNumberType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CcNumberType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CcNumberType_patterns_, ))
    validate_CcNumberType_patterns_ = [['^\\d{1,25}$']]
    def validate_CcNameType(self, value):
        # Validate type CcNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CcNameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CcNameType' % {"value" : value} )
    def validate_CcExpiryType(self, value):
        # Validate type CcExpiryType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CcExpiryType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CcExpiryType_patterns_, ))
    validate_CcExpiryType_patterns_ = [['^\\d{2}/\\d{2}$']]
    def validate_CcCvvType(self, value):
        # Validate type CcCvvType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CcCvvType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CcCvvType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.cc_type is not None or
            self.cc_number is not None or
            self.cc_name is not None or
            self.cc_expiry is not None or
            self.cc_cvv is not None or
            self.cc_address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CcDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CcDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CcDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CcDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CcDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CcDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cc_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-type>%s</cc-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_type), input_name='cc-type')), eol_))
        if self.cc_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-number>%s</cc-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_number), input_name='cc-number')), eol_))
        if self.cc_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-name>%s</cc-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_name), input_name='cc-name')), eol_))
        if self.cc_expiry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-expiry>%s</cc-expiry>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_expiry), input_name='cc-expiry')), eol_))
        if self.cc_cvv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-cvv>%s</cc-cvv>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_cvv), input_name='cc-cvv')), eol_))
        if self.cc_address_details is not None:
            self.cc_address_details.export(outfile, level, namespace_, name_='cc-address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cc-type':
            cc_type_ = child_.text
            cc_type_ = self.gds_validate_string(cc_type_, node, 'cc_type')
            self.cc_type = cc_type_
            # validate type CcType
            self.validate_CcType(self.cc_type)
        elif nodeName_ == 'cc-number':
            cc_number_ = child_.text
            cc_number_ = self.gds_validate_string(cc_number_, node, 'cc_number')
            self.cc_number = cc_number_
            # validate type CcNumberType
            self.validate_CcNumberType(self.cc_number)
        elif nodeName_ == 'cc-name':
            cc_name_ = child_.text
            cc_name_ = self.gds_validate_string(cc_name_, node, 'cc_name')
            self.cc_name = cc_name_
            # validate type CcNameType
            self.validate_CcNameType(self.cc_name)
        elif nodeName_ == 'cc-expiry':
            cc_expiry_ = child_.text
            cc_expiry_ = self.gds_validate_string(cc_expiry_, node, 'cc_expiry')
            self.cc_expiry = cc_expiry_
            # validate type CcExpiryType
            self.validate_CcExpiryType(self.cc_expiry)
        elif nodeName_ == 'cc-cvv':
            cc_cvv_ = child_.text
            cc_cvv_ = self.gds_validate_string(cc_cvv_, node, 'cc_cvv')
            self.cc_cvv = cc_cvv_
            # validate type CcCvvType
            self.validate_CcCvvType(self.cc_cvv)
        elif nodeName_ == 'cc-address-details':
            obj_ = CcAddressDetailsType.factory()
            obj_.build(child_)
            self.cc_address_details = obj_
            obj_.original_tagname_ = 'cc-address-details'
# end class CcDetailsType


class CcAddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, prov_state=None, postal_zip_code=None, country_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type(self.address_line_2)
        self.city = city
        self.validate_cityType(self.city)
        self.prov_state = prov_state
        self.validate_ProvinceStateOrInternationalType(self.prov_state)
        self.postal_zip_code = postal_zip_code
        self.validate_PostalCodeOrZipOrInternationalType(self.postal_zip_code)
        self.country_code = country_code
        self.validate_CountryCodeType(self.country_code)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CcAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CcAddressDetailsType.subclass:
            return CcAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return CcAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_prov_state(self): return self.prov_state
    def set_prov_state(self, prov_state): self.prov_state = prov_state
    def get_postal_zip_code(self): return self.postal_zip_code
    def set_postal_zip_code(self, postal_zip_code): self.postal_zip_code = postal_zip_code
    def get_country_code(self): return self.country_code
    def set_country_code(self, country_code): self.country_code = country_code
    def validate_address_line_1Type(self, value):
        # Validate type address-line-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type' % {"value" : value} )
    def validate_address_line_2Type(self, value):
        # Validate type address-line-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type' % {"value" : value} )
    def validate_cityType(self, value):
        # Validate type cityType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType' % {"value" : value} )
    def validate_ProvinceStateOrInternationalType(self, value):
        # Validate type ProvinceStateOrInternationalType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ProvinceStateOrInternationalType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ProvinceStateOrInternationalType' % {"value" : value} )
    def validate_PostalCodeOrZipOrInternationalType(self, value):
        # Validate type PostalCodeOrZipOrInternationalType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on PostalCodeOrZipOrInternationalType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on PostalCodeOrZipOrInternationalType' % {"value" : value} )
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CountryCodeType_patterns_, ))
    validate_CountryCodeType_patterns_ = [['^[a-zA-Z][a-zA-Z]$']]
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.prov_state is not None or
            self.postal_zip_code is not None or
            self.country_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CcAddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CcAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CcAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CcAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CcAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CcAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.prov_state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prov-state>%s</prov-state>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.prov_state), input_name='prov-state')), eol_))
        if self.postal_zip_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-zip-code>%s</postal-zip-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_zip_code), input_name='postal-zip-code')), eol_))
        if self.country_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country-code>%s</country-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country_code), input_name='country-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type
            self.validate_address_line_1Type(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type
            self.validate_address_line_2Type(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType
            self.validate_cityType(self.city)
        elif nodeName_ == 'prov-state':
            prov_state_ = child_.text
            prov_state_ = self.gds_validate_string(prov_state_, node, 'prov_state')
            self.prov_state = prov_state_
            # validate type ProvinceStateOrInternationalType
            self.validate_ProvinceStateOrInternationalType(self.prov_state)
        elif nodeName_ == 'postal-zip-code':
            postal_zip_code_ = child_.text
            postal_zip_code_ = self.gds_validate_string(postal_zip_code_, node, 'postal_zip_code')
            self.postal_zip_code = postal_zip_code_
            # validate type PostalCodeOrZipOrInternationalType
            self.validate_PostalCodeOrZipOrInternationalType(self.postal_zip_code)
        elif nodeName_ == 'country-code':
            country_code_ = child_.text
            country_code_ = self.gds_validate_string(country_code_, node, 'country_code')
            self.country_code = country_code_
            # validate type CountryCodeType
            self.validate_CountryCodeType(self.country_code)
# end class CcAddressDetailsType


class serviceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service_code=None, service_name=None, link=None):
        self.original_tagname_ = None
        self.service_code = service_code
        self.validate_ServiceCodeType(self.service_code)
        self.service_name = service_name
        self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType.subclass:
            return serviceType.subclass(*args_, **kwargs_)
        else:
            return serviceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service_code(self): return self.service_code
    def set_service_code(self, service_code): self.service_code = service_code
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def validate_ServiceCodeType(self, value):
        # Validate type ServiceCodeType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ServiceCodeType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ServiceCodeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.service_code is not None or
            self.service_name is not None or
            self.link is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='serviceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='serviceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='serviceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='serviceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='serviceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-code>%s</service-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_code), input_name='service-code')), eol_))
        if self.service_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<service-name>%s</service-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.service_name), input_name='service-name')), eol_))
        if self.link is not None:
            self.link.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'service-code':
            service_code_ = child_.text
            service_code_ = self.gds_validate_string(service_code_, node, 'service_code')
            self.service_code = service_code_
            # validate type ServiceCodeType
            self.validate_ServiceCodeType(self.service_code)
        elif nodeName_ == 'service-name':
            service_name_ = child_.text
            service_name_ = self.gds_validate_string(service_name_, node, 'service_name')
            self.service_name = service_name_
        elif nodeName_ == 'link':
            obj_ = LinkType.factory()
            obj_.build(child_)
            self.link = obj_
            obj_.original_tagname_ = 'link'
# end class serviceType


class conflicting_optionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None):
        self.original_tagname_ = None
        if option_code is None:
            self.option_code = []
        else:
            self.option_code = option_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, conflicting_optionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if conflicting_optionsType.subclass:
            return conflicting_optionsType.subclass(*args_, **kwargs_)
        else:
            return conflicting_optionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def add_option_code(self, value): self.option_code.append(value)
    def insert_option_code_at(self, index, value): self.option_code.insert(index, value)
    def replace_option_code_at(self, index, value): self.option_code[index] = value
    def hasContent_(self):
        if (
            self.option_code
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='conflicting-optionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('conflicting-optionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='conflicting-optionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='conflicting-optionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='conflicting-optionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='conflicting-optionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_code_ in self.option_code:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(option_code_), input_name='option-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code.append(option_code_)
# end class conflicting_optionsType


class prerequisite_optionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None):
        self.original_tagname_ = None
        if option_code is None:
            self.option_code = []
        else:
            self.option_code = option_code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, prerequisite_optionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if prerequisite_optionsType.subclass:
            return prerequisite_optionsType.subclass(*args_, **kwargs_)
        else:
            return prerequisite_optionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def add_option_code(self, value): self.option_code.append(value)
    def insert_option_code_at(self, index, value): self.option_code.insert(index, value)
    def replace_option_code_at(self, index, value): self.option_code[index] = value
    def hasContent_(self):
        if (
            self.option_code
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='prerequisite-optionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('prerequisite-optionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='prerequisite-optionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='prerequisite-optionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='prerequisite-optionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='prerequisite-optionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_code_ in self.option_code:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(option_code_), input_name='option-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code.append(option_code_)
# end class prerequisite_optionsType


class optionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option=None):
        self.original_tagname_ = None
        if option is None:
            self.option = []
        else:
            self.option = option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionsType.subclass:
            return optionsType.subclass(*args_, **kwargs_)
        else:
            return optionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def hasContent_(self):
        if (
            self.option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='optionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option':
            obj_ = optionType.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
# end class optionsType


class optionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None, option_name=None, link=None, mandatory=None, qualifier_required=None, qualifier_max=None):
        self.original_tagname_ = None
        self.option_code = option_code
        self.option_name = option_name
        self.link = link
        self.mandatory = mandatory
        self.qualifier_required = qualifier_required
        self.qualifier_max = qualifier_max
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionType.subclass:
            return optionType.subclass(*args_, **kwargs_)
        else:
            return optionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def get_option_name(self): return self.option_name
    def set_option_name(self, option_name): self.option_name = option_name
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def get_mandatory(self): return self.mandatory
    def set_mandatory(self, mandatory): self.mandatory = mandatory
    def get_qualifier_required(self): return self.qualifier_required
    def set_qualifier_required(self, qualifier_required): self.qualifier_required = qualifier_required
    def get_qualifier_max(self): return self.qualifier_max
    def set_qualifier_max(self, qualifier_max): self.qualifier_max = qualifier_max
    def hasContent_(self):
        if (
            self.option_code is not None or
            self.option_name is not None or
            self.link is not None or
            self.mandatory is not None or
            self.qualifier_required is not None or
            self.qualifier_max is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='optionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.option_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_code), input_name='option-code')), eol_))
        if self.option_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-name>%s</option-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_name), input_name='option-name')), eol_))
        if self.link is not None:
            self.link.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
        if self.mandatory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<mandatory>%s</mandatory>%s' % (self.gds_format_boolean(self.mandatory, input_name='mandatory'), eol_))
        if self.qualifier_required is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<qualifier-required>%s</qualifier-required>%s' % (self.gds_format_boolean(self.qualifier_required, input_name='qualifier-required'), eol_))
        if self.qualifier_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<qualifier-max>%s</qualifier-max>%s' % (self.gds_format_float(self.qualifier_max, input_name='qualifier-max'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code = option_code_
        elif nodeName_ == 'option-name':
            option_name_ = child_.text
            option_name_ = self.gds_validate_string(option_name_, node, 'option_name')
            self.option_name = option_name_
        elif nodeName_ == 'link':
            obj_ = LinkType.factory()
            obj_.build(child_)
            self.link = obj_
            obj_.original_tagname_ = 'link'
        elif nodeName_ == 'mandatory':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'mandatory')
            self.mandatory = ival_
        elif nodeName_ == 'qualifier-required':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'qualifier_required')
            self.qualifier_required = ival_
        elif nodeName_ == 'qualifier-max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'qualifier_max')
            self.qualifier_max = fval_
# end class optionType


class restrictionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, weight_restriction=None, dimensional_restrictions=None, density_factor=None, can_ship_in_mailing_tube=None, can_ship_unpackaged=None, allowed_as_return_service=None):
        self.original_tagname_ = None
        self.weight_restriction = weight_restriction
        self.dimensional_restrictions = dimensional_restrictions
        self.density_factor = density_factor
        self.can_ship_in_mailing_tube = can_ship_in_mailing_tube
        self.can_ship_unpackaged = can_ship_unpackaged
        self.allowed_as_return_service = allowed_as_return_service
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, restrictionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if restrictionsType.subclass:
            return restrictionsType.subclass(*args_, **kwargs_)
        else:
            return restrictionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_weight_restriction(self): return self.weight_restriction
    def set_weight_restriction(self, weight_restriction): self.weight_restriction = weight_restriction
    def get_dimensional_restrictions(self): return self.dimensional_restrictions
    def set_dimensional_restrictions(self, dimensional_restrictions): self.dimensional_restrictions = dimensional_restrictions
    def get_density_factor(self): return self.density_factor
    def set_density_factor(self, density_factor): self.density_factor = density_factor
    def get_can_ship_in_mailing_tube(self): return self.can_ship_in_mailing_tube
    def set_can_ship_in_mailing_tube(self, can_ship_in_mailing_tube): self.can_ship_in_mailing_tube = can_ship_in_mailing_tube
    def get_can_ship_unpackaged(self): return self.can_ship_unpackaged
    def set_can_ship_unpackaged(self, can_ship_unpackaged): self.can_ship_unpackaged = can_ship_unpackaged
    def get_allowed_as_return_service(self): return self.allowed_as_return_service
    def set_allowed_as_return_service(self, allowed_as_return_service): self.allowed_as_return_service = allowed_as_return_service
    def hasContent_(self):
        if (
            self.weight_restriction is not None or
            self.dimensional_restrictions is not None or
            self.density_factor is not None or
            self.can_ship_in_mailing_tube is not None or
            self.can_ship_unpackaged is not None or
            self.allowed_as_return_service is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='restrictionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('restrictionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='restrictionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='restrictionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='restrictionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='restrictionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.weight_restriction is not None:
            self.weight_restriction.export(outfile, level, namespace_, name_='weight-restriction', pretty_print=pretty_print)
        if self.dimensional_restrictions is not None:
            self.dimensional_restrictions.export(outfile, level, namespace_, name_='dimensional-restrictions', pretty_print=pretty_print)
        if self.density_factor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<density-factor>%s</density-factor>%s' % (self.gds_format_float(self.density_factor, input_name='density-factor'), eol_))
        if self.can_ship_in_mailing_tube is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<can-ship-in-mailing-tube>%s</can-ship-in-mailing-tube>%s' % (self.gds_format_boolean(self.can_ship_in_mailing_tube, input_name='can-ship-in-mailing-tube'), eol_))
        if self.can_ship_unpackaged is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<can-ship-unpackaged>%s</can-ship-unpackaged>%s' % (self.gds_format_boolean(self.can_ship_unpackaged, input_name='can-ship-unpackaged'), eol_))
        if self.allowed_as_return_service is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<allowed-as-return-service>%s</allowed-as-return-service>%s' % (self.gds_format_boolean(self.allowed_as_return_service, input_name='allowed-as-return-service'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'weight-restriction':
            obj_ = NumberRangeType.factory()
            obj_.build(child_)
            self.weight_restriction = obj_
            obj_.original_tagname_ = 'weight-restriction'
        elif nodeName_ == 'dimensional-restrictions':
            obj_ = dimensional_restrictionsType.factory()
            obj_.build(child_)
            self.dimensional_restrictions = obj_
            obj_.original_tagname_ = 'dimensional-restrictions'
        elif nodeName_ == 'density-factor':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'density_factor')
            self.density_factor = fval_
        elif nodeName_ == 'can-ship-in-mailing-tube':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'can_ship_in_mailing_tube')
            self.can_ship_in_mailing_tube = ival_
        elif nodeName_ == 'can-ship-unpackaged':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'can_ship_unpackaged')
            self.can_ship_unpackaged = ival_
        elif nodeName_ == 'allowed-as-return-service':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'allowed_as_return_service')
            self.allowed_as_return_service = ival_
# end class restrictionsType


class dimensional_restrictionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, length=None, width=None, height=None, length_plus_girth_max=None, length_height_width_sum_max=None, oversize_limit=None):
        self.original_tagname_ = None
        self.length = length
        self.width = width
        self.height = height
        self.length_plus_girth_max = length_plus_girth_max
        self.length_height_width_sum_max = length_height_width_sum_max
        self.oversize_limit = oversize_limit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dimensional_restrictionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dimensional_restrictionsType.subclass:
            return dimensional_restrictionsType.subclass(*args_, **kwargs_)
        else:
            return dimensional_restrictionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_length_plus_girth_max(self): return self.length_plus_girth_max
    def set_length_plus_girth_max(self, length_plus_girth_max): self.length_plus_girth_max = length_plus_girth_max
    def get_length_height_width_sum_max(self): return self.length_height_width_sum_max
    def set_length_height_width_sum_max(self, length_height_width_sum_max): self.length_height_width_sum_max = length_height_width_sum_max
    def get_oversize_limit(self): return self.oversize_limit
    def set_oversize_limit(self, oversize_limit): self.oversize_limit = oversize_limit
    def hasContent_(self):
        if (
            self.length is not None or
            self.width is not None or
            self.height is not None or
            self.length_plus_girth_max is not None or
            self.length_height_width_sum_max is not None or
            self.oversize_limit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dimensional-restrictionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dimensional-restrictionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dimensional-restrictionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dimensional-restrictionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dimensional-restrictionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dimensional-restrictionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.length is not None:
            self.length.export(outfile, level, namespace_, name_='length', pretty_print=pretty_print)
        if self.width is not None:
            self.width.export(outfile, level, namespace_, name_='width', pretty_print=pretty_print)
        if self.height is not None:
            self.height.export(outfile, level, namespace_, name_='height', pretty_print=pretty_print)
        if self.length_plus_girth_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<length-plus-girth-max>%s</length-plus-girth-max>%s' % (self.gds_format_float(self.length_plus_girth_max, input_name='length-plus-girth-max'), eol_))
        if self.length_height_width_sum_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<length-height-width-sum-max>%s</length-height-width-sum-max>%s' % (self.gds_format_float(self.length_height_width_sum_max, input_name='length-height-width-sum-max'), eol_))
        if self.oversize_limit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<oversize-limit>%s</oversize-limit>%s' % (self.gds_format_float(self.oversize_limit, input_name='oversize-limit'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'length':
            obj_ = NumberRangeType.factory()
            obj_.build(child_)
            self.length = obj_
            obj_.original_tagname_ = 'length'
        elif nodeName_ == 'width':
            obj_ = NumberRangeType.factory()
            obj_.build(child_)
            self.width = obj_
            obj_.original_tagname_ = 'width'
        elif nodeName_ == 'height':
            obj_ = NumberRangeType.factory()
            obj_.build(child_)
            self.height = obj_
            obj_.original_tagname_ = 'height'
        elif nodeName_ == 'length-plus-girth-max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'length_plus_girth_max')
            self.length_plus_girth_max = fval_
        elif nodeName_ == 'length-height-width-sum-max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'length_height_width_sum_max')
            self.length_height_width_sum_max = fval_
        elif nodeName_ == 'oversize-limit':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'oversize_limit')
            self.oversize_limit = fval_
# end class dimensional_restrictionsType


class optionType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option_code=None, option_name=None, link=None, qualifier_required=None):
        self.original_tagname_ = None
        self.option_code = option_code
        self.option_name = option_name
        self.link = link
        self.qualifier_required = qualifier_required
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionType1.subclass:
            return optionType1.subclass(*args_, **kwargs_)
        else:
            return optionType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option_code(self): return self.option_code
    def set_option_code(self, option_code): self.option_code = option_code
    def get_option_name(self): return self.option_name
    def set_option_name(self, option_name): self.option_name = option_name
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def get_qualifier_required(self): return self.qualifier_required
    def set_qualifier_required(self, qualifier_required): self.qualifier_required = qualifier_required
    def hasContent_(self):
        if (
            self.option_code is not None or
            self.option_name is not None or
            self.link is not None or
            self.qualifier_required is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='optionType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.option_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-code>%s</option-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_code), input_name='option-code')), eol_))
        if self.option_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<option-name>%s</option-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.option_name), input_name='option-name')), eol_))
        if self.link is not None:
            self.link.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
        if self.qualifier_required is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<qualifier-required>%s</qualifier-required>%s' % (self.gds_format_boolean(self.qualifier_required, input_name='qualifier-required'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option-code':
            option_code_ = child_.text
            if option_code_:
                option_code_ = re_.sub(String_cleanup_pat_, " ", option_code_).strip()
            else:
                option_code_ = ""
            option_code_ = self.gds_validate_string(option_code_, node, 'option_code')
            self.option_code = option_code_
        elif nodeName_ == 'option-name':
            option_name_ = child_.text
            if option_name_:
                option_name_ = re_.sub(String_cleanup_pat_, " ", option_name_).strip()
            else:
                option_name_ = ""
            option_name_ = self.gds_validate_string(option_name_, node, 'option_name')
            self.option_name = option_name_
        elif nodeName_ == 'link':
            obj_ = LinkType.factory()
            obj_.build(child_)
            self.link = obj_
            obj_.original_tagname_ = 'link'
        elif nodeName_ == 'qualifier-required':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'qualifier_required')
            self.qualifier_required = ival_
# end class optionType1


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'services'
        rootClass = services
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'services'
        rootClass = services
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'services'
        rootClass = services
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'services'
        rootClass = services
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from discovery import *\n\n')
        sys.stdout.write('import discovery as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CcAddressDetailsType",
    "CcDetailsType",
    "LinkType",
    "NumberRangeType",
    "conflicting_optionsType",
    "dimensional_restrictionsType",
    "links",
    "option",
    "optionType",
    "optionType1",
    "options",
    "optionsType",
    "prerequisite_optionsType",
    "restrictionsType",
    "service",
    "serviceType",
    "services"
]
