#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Jun 13 20:25:46 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './pycanada_post/postoffice.py')
#
# Command line arguments:
#   /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/postoffice.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "./pycanada_post/postoffice.py" /Users/danielkobina/Documents/FreeLance/API/Documentations/Canada Post/postoffice.xsd
#
# Current working directory (os.getcwd()):
#   py-canada_post
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class post_office_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, post_office=None):
        self.original_tagname_ = None
        if post_office is None:
            self.post_office = []
        else:
            self.post_office = post_office
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, post_office_list)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if post_office_list.subclass:
            return post_office_list.subclass(*args_, **kwargs_)
        else:
            return post_office_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_post_office(self): return self.post_office
    def set_post_office(self, post_office): self.post_office = post_office
    def add_post_office(self, value): self.post_office.append(value)
    def insert_post_office_at(self, index, value): self.post_office.insert(index, value)
    def replace_post_office_at(self, index, value): self.post_office[index] = value
    def hasContent_(self):
        if (
            self.post_office
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='post-office-list', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('post-office-list')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='post-office-list')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='post-office-list', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='post-office-list'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='post-office-list', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for post_office_ in self.post_office:
            post_office_.export(outfile, level, namespace_, name_='post-office', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'post-office':
            obj_ = post_officeType.factory()
            obj_.build(child_)
            self.post_office.append(obj_)
            obj_.original_tagname_ = 'post-office'
# end class post_office_list


class PostOfficeAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, city=None, latitude=None, longitude=None, postal_code=None, province=None, office_address=None):
        self.original_tagname_ = None
        self.city = city
        self.validate_cityType(self.city)
        self.latitude = latitude
        self.validate_latitudeType(self.latitude)
        self.longitude = longitude
        self.validate_longitudeType(self.longitude)
        self.postal_code = postal_code
        self.validate_PostalCodeType(self.postal_code)
        self.province = province
        self.validate_ProvinceType(self.province)
        self.office_address = office_address
        self.validate_office_addressType(self.office_address)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PostOfficeAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PostOfficeAddressType.subclass:
            return PostOfficeAddressType.subclass(*args_, **kwargs_)
        else:
            return PostOfficeAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_latitude(self): return self.latitude
    def set_latitude(self, latitude): self.latitude = latitude
    def get_longitude(self): return self.longitude
    def set_longitude(self, longitude): self.longitude = longitude
    def get_postal_code(self): return self.postal_code
    def set_postal_code(self, postal_code): self.postal_code = postal_code
    def get_province(self): return self.province
    def set_province(self, province): self.province = province
    def get_office_address(self): return self.office_address
    def set_office_address(self, office_address): self.office_address = office_address
    def validate_cityType(self, value):
        # Validate type cityType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType' % {"value" : value} )
    def validate_latitudeType(self, value):
        # Validate type latitudeType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 40:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on latitudeType' % {"value" : value} )
            if value > 90:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on latitudeType' % {"value" : value} )
    def validate_longitudeType(self, value):
        # Validate type longitudeType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value < -150:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on longitudeType' % {"value" : value} )
            if value > -50:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on longitudeType' % {"value" : value} )
    def validate_PostalCodeType(self, value):
        # Validate type PostalCodeType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_PostalCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_PostalCodeType_patterns_, ))
    validate_PostalCodeType_patterns_ = [['^[A-Z]\\d[A-Z]\\d[A-Z]\\d$']]
    def validate_ProvinceType(self, value):
        # Validate type ProvinceType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ProvinceType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ProvinceType' % {"value" : value} )
    def validate_office_addressType(self, value):
        # Validate type office-addressType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 64:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on office-addressType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on office-addressType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.city is not None or
            self.latitude is not None or
            self.longitude is not None or
            self.postal_code is not None or
            self.province is not None or
            self.office_address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PostOfficeAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PostOfficeAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostOfficeAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PostOfficeAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PostOfficeAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PostOfficeAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.latitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<latitude>%s</latitude>%s' % (self.gds_format_float(self.latitude, input_name='latitude'), eol_))
        if self.longitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<longitude>%s</longitude>%s' % (self.gds_format_float(self.longitude, input_name='longitude'), eol_))
        if self.postal_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-code>%s</postal-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_code), input_name='postal-code')), eol_))
        if self.province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<province>%s</province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.province), input_name='province')), eol_))
        if self.office_address is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<office-address>%s</office-address>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.office_address), input_name='office-address')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType
            self.validate_cityType(self.city)
        elif nodeName_ == 'latitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'latitude')
            self.latitude = fval_
            # validate type latitudeType
            self.validate_latitudeType(self.latitude)
        elif nodeName_ == 'longitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'longitude')
            self.longitude = fval_
            # validate type longitudeType
            self.validate_longitudeType(self.longitude)
        elif nodeName_ == 'postal-code':
            postal_code_ = child_.text
            postal_code_ = self.gds_validate_string(postal_code_, node, 'postal_code')
            self.postal_code = postal_code_
            # validate type PostalCodeType
            self.validate_PostalCodeType(self.postal_code)
        elif nodeName_ == 'province':
            province_ = child_.text
            province_ = self.gds_validate_string(province_, node, 'province')
            self.province = province_
            # validate type ProvinceType
            self.validate_ProvinceType(self.province)
        elif nodeName_ == 'office-address':
            office_address_ = child_.text
            office_address_ = self.gds_validate_string(office_address_, node, 'office_address')
            self.office_address = office_address_
            # validate type office-addressType
            self.validate_office_addressType(self.office_address)
# end class PostOfficeAddressType


class post_office_detail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address=None, location=None, name=None, office_id=None, bilingual_designation=None, hours_list=None):
        self.original_tagname_ = None
        self.address = address
        self.location = location
        self.validate_LocationType(self.location)
        self.name = name
        self.validate_NameType(self.name)
        self.office_id = office_id
        self.validate_OfficeIdType(self.office_id)
        self.bilingual_designation = bilingual_designation
        if hours_list is None:
            self.hours_list = []
        else:
            self.hours_list = hours_list
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, post_office_detail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if post_office_detail.subclass:
            return post_office_detail.subclass(*args_, **kwargs_)
        else:
            return post_office_detail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_location(self): return self.location
    def set_location(self, location): self.location = location
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_office_id(self): return self.office_id
    def set_office_id(self, office_id): self.office_id = office_id
    def get_bilingual_designation(self): return self.bilingual_designation
    def set_bilingual_designation(self, bilingual_designation): self.bilingual_designation = bilingual_designation
    def get_hours_list(self): return self.hours_list
    def set_hours_list(self, hours_list): self.hours_list = hours_list
    def add_hours_list(self, value): self.hours_list.append(value)
    def insert_hours_list_at(self, index, value): self.hours_list.insert(index, value)
    def replace_hours_list_at(self, index, value): self.hours_list[index] = value
    def validate_LocationType(self, value):
        # Validate type LocationType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on LocationType' % {"value" : value} )
    def validate_NameType(self, value):
        # Validate type NameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on NameType' % {"value" : value} )
    def validate_OfficeIdType(self, value):
        # Validate type OfficeIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_OfficeIdType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_OfficeIdType_patterns_, ))
    validate_OfficeIdType_patterns_ = [['^\\d{10}$']]
    def hasContent_(self):
        if (
            self.address is not None or
            self.location is not None or
            self.name is not None or
            self.office_id is not None or
            self.bilingual_designation is not None or
            self.hours_list
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='post-office-detail', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('post-office-detail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='post-office-detail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='post-office-detail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='post-office-detail'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='post-office-detail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            self.address.export(outfile, level, namespace_, name_='address', pretty_print=pretty_print)
        if self.location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<location>%s</location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.location), input_name='location')), eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.office_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<office-id>%s</office-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.office_id), input_name='office-id')), eol_))
        if self.bilingual_designation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<bilingual-designation>%s</bilingual-designation>%s' % (self.gds_format_boolean(self.bilingual_designation, input_name='bilingual-designation'), eol_))
        for hours_list_ in self.hours_list:
            hours_list_.export(outfile, level, namespace_, name_='hours-list', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address':
            obj_ = PostOfficeAddressType.factory()
            obj_.build(child_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
        elif nodeName_ == 'location':
            location_ = child_.text
            location_ = self.gds_validate_string(location_, node, 'location')
            self.location = location_
            # validate type LocationType
            self.validate_LocationType(self.location)
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type NameType
            self.validate_NameType(self.name)
        elif nodeName_ == 'office-id':
            office_id_ = child_.text
            office_id_ = self.gds_validate_string(office_id_, node, 'office_id')
            self.office_id = office_id_
            # validate type OfficeIdType
            self.validate_OfficeIdType(self.office_id)
        elif nodeName_ == 'bilingual-designation':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'bilingual_designation')
            self.bilingual_designation = ival_
        elif nodeName_ == 'hours-list':
            obj_ = hours_listType.factory()
            obj_.build(child_)
            self.hours_list.append(obj_)
            obj_.original_tagname_ = 'hours-list'
# end class post_office_detail


class links(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None):
        self.original_tagname_ = None
        if link is None:
            self.link = []
        else:
            self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, links)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if links.subclass:
            return links.subclass(*args_, **kwargs_)
        else:
            return links(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link_at(self, index, value): self.link.insert(index, value)
    def replace_link_at(self, index, value): self.link[index] = value
    def hasContent_(self):
        if (
            self.link
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='links', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('links')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='links')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='links', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='links'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='links', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'link':
            obj_ = LinkType.factory()
            obj_.build(child_)
            self.link.append(obj_)
            obj_.original_tagname_ = 'link'
# end class links


class LinkType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, href=None, rel=None, index=None, media_type=None):
        self.original_tagname_ = None
        self.href = _cast(None, href)
        self.rel = _cast(None, rel)
        self.index = _cast(int, index)
        self.media_type = _cast(None, media_type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LinkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LinkType.subclass:
            return LinkType.subclass(*args_, **kwargs_)
        else:
            return LinkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_rel(self): return self.rel
    def set_rel(self, rel): self.rel = rel
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_media_type(self): return self.media_type
    def set_media_type(self, media_type): self.media_type = media_type
    def validate_RelType(self, value):
        # Validate type RelType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LinkType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LinkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LinkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LinkType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LinkType'):
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            outfile.write(' href=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.href), input_name='href')), ))
        if self.rel is not None and 'rel' not in already_processed:
            already_processed.add('rel')
            outfile.write(' rel=%s' % (quote_attrib(self.rel), ))
        if self.index is not None and 'index' not in already_processed:
            already_processed.add('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))
        if self.media_type is not None and 'media_type' not in already_processed:
            already_processed.add('media_type')
            outfile.write(' media-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.media_type), input_name='media-type')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='LinkType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.add('href')
            self.href = value
        value = find_attr_value_('rel', node)
        if value is not None and 'rel' not in already_processed:
            already_processed.add('rel')
            self.rel = value
            self.validate_RelType(self.rel)    # validate type RelType
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.add('index')
            try:
                self.index = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.index < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('media-type', node)
        if value is not None and 'media-type' not in already_processed:
            already_processed.add('media-type')
            self.media_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LinkType


class CcDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cc_type=None, cc_number=None, cc_name=None, cc_expiry=None, cc_cvv=None, cc_address_details=None):
        self.original_tagname_ = None
        self.cc_type = cc_type
        self.validate_CcType(self.cc_type)
        self.cc_number = cc_number
        self.validate_CcNumberType(self.cc_number)
        self.cc_name = cc_name
        self.validate_CcNameType(self.cc_name)
        self.cc_expiry = cc_expiry
        self.validate_CcExpiryType(self.cc_expiry)
        self.cc_cvv = cc_cvv
        self.validate_CcCvvType(self.cc_cvv)
        self.cc_address_details = cc_address_details
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CcDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CcDetailsType.subclass:
            return CcDetailsType.subclass(*args_, **kwargs_)
        else:
            return CcDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cc_type(self): return self.cc_type
    def set_cc_type(self, cc_type): self.cc_type = cc_type
    def get_cc_number(self): return self.cc_number
    def set_cc_number(self, cc_number): self.cc_number = cc_number
    def get_cc_name(self): return self.cc_name
    def set_cc_name(self, cc_name): self.cc_name = cc_name
    def get_cc_expiry(self): return self.cc_expiry
    def set_cc_expiry(self, cc_expiry): self.cc_expiry = cc_expiry
    def get_cc_cvv(self): return self.cc_cvv
    def set_cc_cvv(self, cc_cvv): self.cc_cvv = cc_cvv
    def get_cc_address_details(self): return self.cc_address_details
    def set_cc_address_details(self, cc_address_details): self.cc_address_details = cc_address_details
    def validate_CcType(self, value):
        # Validate type CcType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['MC', 'VIS', 'AME', 'DC', 'DIS', 'ER']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on CcType' % {"value" : value.encode("utf-8")} )
    def validate_CcNumberType(self, value):
        # Validate type CcNumberType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CcNumberType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CcNumberType_patterns_, ))
    validate_CcNumberType_patterns_ = [['^\\d{1,25}$']]
    def validate_CcNameType(self, value):
        # Validate type CcNameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CcNameType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CcNameType' % {"value" : value} )
    def validate_CcExpiryType(self, value):
        # Validate type CcExpiryType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CcExpiryType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CcExpiryType_patterns_, ))
    validate_CcExpiryType_patterns_ = [['^\\d{2}/\\d{2}$']]
    def validate_CcCvvType(self, value):
        # Validate type CcCvvType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CcCvvType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CcCvvType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.cc_type is not None or
            self.cc_number is not None or
            self.cc_name is not None or
            self.cc_expiry is not None or
            self.cc_cvv is not None or
            self.cc_address_details is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CcDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CcDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CcDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CcDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CcDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CcDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cc_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-type>%s</cc-type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_type), input_name='cc-type')), eol_))
        if self.cc_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-number>%s</cc-number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_number), input_name='cc-number')), eol_))
        if self.cc_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-name>%s</cc-name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_name), input_name='cc-name')), eol_))
        if self.cc_expiry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-expiry>%s</cc-expiry>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_expiry), input_name='cc-expiry')), eol_))
        if self.cc_cvv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cc-cvv>%s</cc-cvv>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cc_cvv), input_name='cc-cvv')), eol_))
        if self.cc_address_details is not None:
            self.cc_address_details.export(outfile, level, namespace_, name_='cc-address-details', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cc-type':
            cc_type_ = child_.text
            cc_type_ = self.gds_validate_string(cc_type_, node, 'cc_type')
            self.cc_type = cc_type_
            # validate type CcType
            self.validate_CcType(self.cc_type)
        elif nodeName_ == 'cc-number':
            cc_number_ = child_.text
            cc_number_ = self.gds_validate_string(cc_number_, node, 'cc_number')
            self.cc_number = cc_number_
            # validate type CcNumberType
            self.validate_CcNumberType(self.cc_number)
        elif nodeName_ == 'cc-name':
            cc_name_ = child_.text
            cc_name_ = self.gds_validate_string(cc_name_, node, 'cc_name')
            self.cc_name = cc_name_
            # validate type CcNameType
            self.validate_CcNameType(self.cc_name)
        elif nodeName_ == 'cc-expiry':
            cc_expiry_ = child_.text
            cc_expiry_ = self.gds_validate_string(cc_expiry_, node, 'cc_expiry')
            self.cc_expiry = cc_expiry_
            # validate type CcExpiryType
            self.validate_CcExpiryType(self.cc_expiry)
        elif nodeName_ == 'cc-cvv':
            cc_cvv_ = child_.text
            cc_cvv_ = self.gds_validate_string(cc_cvv_, node, 'cc_cvv')
            self.cc_cvv = cc_cvv_
            # validate type CcCvvType
            self.validate_CcCvvType(self.cc_cvv)
        elif nodeName_ == 'cc-address-details':
            obj_ = CcAddressDetailsType.factory()
            obj_.build(child_)
            self.cc_address_details = obj_
            obj_.original_tagname_ = 'cc-address-details'
# end class CcDetailsType


class CcAddressDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address_line_1=None, address_line_2=None, city=None, prov_state=None, postal_zip_code=None, country_code=None):
        self.original_tagname_ = None
        self.address_line_1 = address_line_1
        self.validate_address_line_1Type(self.address_line_1)
        self.address_line_2 = address_line_2
        self.validate_address_line_2Type(self.address_line_2)
        self.city = city
        self.validate_cityType1(self.city)
        self.prov_state = prov_state
        self.validate_ProvinceStateOrInternationalType(self.prov_state)
        self.postal_zip_code = postal_zip_code
        self.validate_PostalCodeOrZipOrInternationalType(self.postal_zip_code)
        self.country_code = country_code
        self.validate_CountryCodeType(self.country_code)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CcAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CcAddressDetailsType.subclass:
            return CcAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return CcAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address_line_1(self): return self.address_line_1
    def set_address_line_1(self, address_line_1): self.address_line_1 = address_line_1
    def get_address_line_2(self): return self.address_line_2
    def set_address_line_2(self, address_line_2): self.address_line_2 = address_line_2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_prov_state(self): return self.prov_state
    def set_prov_state(self, prov_state): self.prov_state = prov_state
    def get_postal_zip_code(self): return self.postal_zip_code
    def set_postal_zip_code(self, postal_zip_code): self.postal_zip_code = postal_zip_code
    def get_country_code(self): return self.country_code
    def set_country_code(self, country_code): self.country_code = country_code
    def validate_address_line_1Type(self, value):
        # Validate type address-line-1Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-1Type' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on address-line-1Type' % {"value" : value} )
    def validate_address_line_2Type(self, value):
        # Validate type address-line-2Type, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 44:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on address-line-2Type' % {"value" : value} )
    def validate_cityType1(self, value):
        # Validate type cityType1, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on cityType1' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on cityType1' % {"value" : value} )
    def validate_ProvinceStateOrInternationalType(self, value):
        # Validate type ProvinceStateOrInternationalType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on ProvinceStateOrInternationalType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on ProvinceStateOrInternationalType' % {"value" : value} )
    def validate_PostalCodeOrZipOrInternationalType(self, value):
        # Validate type PostalCodeOrZipOrInternationalType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on PostalCodeOrZipOrInternationalType' % {"value" : value} )
            if len(str(value)) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on PostalCodeOrZipOrInternationalType' % {"value" : value} )
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CountryCodeType_patterns_, ))
    validate_CountryCodeType_patterns_ = [['^[a-zA-Z][a-zA-Z]$']]
    def hasContent_(self):
        if (
            self.address_line_1 is not None or
            self.address_line_2 is not None or
            self.city is not None or
            self.prov_state is not None or
            self.postal_zip_code is not None or
            self.country_code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CcAddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CcAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CcAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CcAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CcAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CcAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address_line_1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-1>%s</address-line-1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_1), input_name='address-line-1')), eol_))
        if self.address_line_2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<address-line-2>%s</address-line-2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.address_line_2), input_name='address-line-2')), eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<city>%s</city>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), eol_))
        if self.prov_state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<prov-state>%s</prov-state>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.prov_state), input_name='prov-state')), eol_))
        if self.postal_zip_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postal-zip-code>%s</postal-zip-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postal_zip_code), input_name='postal-zip-code')), eol_))
        if self.country_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country-code>%s</country-code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country_code), input_name='country-code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address-line-1':
            address_line_1_ = child_.text
            address_line_1_ = self.gds_validate_string(address_line_1_, node, 'address_line_1')
            self.address_line_1 = address_line_1_
            # validate type address-line-1Type
            self.validate_address_line_1Type(self.address_line_1)
        elif nodeName_ == 'address-line-2':
            address_line_2_ = child_.text
            address_line_2_ = self.gds_validate_string(address_line_2_, node, 'address_line_2')
            self.address_line_2 = address_line_2_
            # validate type address-line-2Type
            self.validate_address_line_2Type(self.address_line_2)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type cityType1
            self.validate_cityType1(self.city)
        elif nodeName_ == 'prov-state':
            prov_state_ = child_.text
            prov_state_ = self.gds_validate_string(prov_state_, node, 'prov_state')
            self.prov_state = prov_state_
            # validate type ProvinceStateOrInternationalType
            self.validate_ProvinceStateOrInternationalType(self.prov_state)
        elif nodeName_ == 'postal-zip-code':
            postal_zip_code_ = child_.text
            postal_zip_code_ = self.gds_validate_string(postal_zip_code_, node, 'postal_zip_code')
            self.postal_zip_code = postal_zip_code_
            # validate type PostalCodeOrZipOrInternationalType
            self.validate_PostalCodeOrZipOrInternationalType(self.postal_zip_code)
        elif nodeName_ == 'country-code':
            country_code_ = child_.text
            country_code_ = self.gds_validate_string(country_code_, node, 'country_code')
            self.country_code = country_code_
            # validate type CountryCodeType
            self.validate_CountryCodeType(self.country_code)
# end class CcAddressDetailsType


class post_officeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address=None, distance=None, location=None, name=None, office_id=None, bilingual_designation=None, link=None):
        self.original_tagname_ = None
        self.address = address
        self.distance = distance
        self.validate_distanceType(self.distance)
        self.location = location
        self.validate_LocationType(self.location)
        self.name = name
        self.validate_NameType(self.name)
        self.office_id = office_id
        self.validate_OfficeIdType(self.office_id)
        self.bilingual_designation = bilingual_designation
        self.link = link
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, post_officeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if post_officeType.subclass:
            return post_officeType.subclass(*args_, **kwargs_)
        else:
            return post_officeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_distance(self): return self.distance
    def set_distance(self, distance): self.distance = distance
    def get_location(self): return self.location
    def set_location(self, location): self.location = location
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_office_id(self): return self.office_id
    def set_office_id(self, office_id): self.office_id = office_id
    def get_bilingual_designation(self): return self.bilingual_designation
    def set_bilingual_designation(self, bilingual_designation): self.bilingual_designation = bilingual_designation
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def validate_distanceType(self, value):
        # Validate type distanceType, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on distanceType' % {"value" : value} )
            if value > 99999.99:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on distanceType' % {"value" : value} )
    def validate_LocationType(self, value):
        # Validate type LocationType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on LocationType' % {"value" : value} )
    def validate_NameType(self, value):
        # Validate type NameType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on NameType' % {"value" : value} )
    def validate_OfficeIdType(self, value):
        # Validate type OfficeIdType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_OfficeIdType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_OfficeIdType_patterns_, ))
    validate_OfficeIdType_patterns_ = [['^\\d{10}$']]
    def hasContent_(self):
        if (
            self.address is not None or
            self.distance is not None or
            self.location is not None or
            self.name is not None or
            self.office_id is not None or
            self.bilingual_designation is not None or
            self.link is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='post-officeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('post-officeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='post-officeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='post-officeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='post-officeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='post-officeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            self.address.export(outfile, level, namespace_, name_='address', pretty_print=pretty_print)
        if self.distance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<distance>%s</distance>%s' % (self.gds_format_float(self.distance, input_name='distance'), eol_))
        if self.location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<location>%s</location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.location), input_name='location')), eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.office_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<office-id>%s</office-id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.office_id), input_name='office-id')), eol_))
        if self.bilingual_designation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<bilingual-designation>%s</bilingual-designation>%s' % (self.gds_format_boolean(self.bilingual_designation, input_name='bilingual-designation'), eol_))
        if self.link is not None:
            self.link.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address':
            obj_ = PostOfficeAddressType.factory()
            obj_.build(child_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
        elif nodeName_ == 'distance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'distance')
            self.distance = fval_
            # validate type distanceType
            self.validate_distanceType(self.distance)
        elif nodeName_ == 'location':
            location_ = child_.text
            location_ = self.gds_validate_string(location_, node, 'location')
            self.location = location_
            # validate type LocationType
            self.validate_LocationType(self.location)
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type NameType
            self.validate_NameType(self.name)
        elif nodeName_ == 'office-id':
            office_id_ = child_.text
            office_id_ = self.gds_validate_string(office_id_, node, 'office_id')
            self.office_id = office_id_
            # validate type OfficeIdType
            self.validate_OfficeIdType(self.office_id)
        elif nodeName_ == 'bilingual-designation':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'bilingual_designation')
            self.bilingual_designation = ival_
        elif nodeName_ == 'link':
            obj_ = LinkType.factory()
            obj_.build(child_)
            self.link = obj_
            obj_.original_tagname_ = 'link'
# end class post_officeType


class hours_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, day=None, time=None):
        self.original_tagname_ = None
        self.day = day
        self.validate_dayType(self.day)
        if time is None:
            self.time = []
        else:
            self.time = time
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, hours_listType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if hours_listType.subclass:
            return hours_listType.subclass(*args_, **kwargs_)
        else:
            return hours_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_day(self): return self.day
    def set_day(self, day): self.day = day
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def add_time(self, value): self.time.append(value)
    def insert_time_at(self, index, value): self.time.insert(index, value)
    def replace_time_at(self, index, value): self.time[index] = value
    def validate_dayType(self, value):
        # Validate type dayType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dayType' % {"value" : value.encode("utf-8")} )
    def validate_Time24HoursType(self, value):
        # Validate type Time24HoursType, a restriction on xsd:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Time24HoursType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Time24HoursType_patterns_, ))
    validate_Time24HoursType_patterns_ = [['^((0?\\d)$|^(1\\d)$|^(2[0-3])):[0-5]\\d$']]
    def hasContent_(self):
        if (
            self.day is not None or
            self.time
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='hours-listType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('hours-listType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hours-listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='hours-listType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='hours-listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='hours-listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.day is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<day>%s</day>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.day), input_name='day')), eol_))
        for time_ in self.time:
            showIndent(outfile, level, pretty_print)
            outfile.write('<time>%s</time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(time_), input_name='time')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'day':
            day_ = child_.text
            day_ = self.gds_validate_string(day_, node, 'day')
            self.day = day_
            # validate type dayType
            self.validate_dayType(self.day)
        elif nodeName_ == 'time':
            time_ = child_.text
            time_ = self.gds_validate_string(time_, node, 'time')
            self.time.append(time_)
            # validate type Time24HoursType
            self.validate_Time24HoursType(self.time[-1])
# end class hours_listType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'post_office_list'
        rootClass = post_office_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'post_office_list'
        rootClass = post_office_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'post_office_list'
        rootClass = post_office_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'post_office_list'
        rootClass = post_office_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from postoffice import *\n\n')
        sys.stdout.write('import postoffice as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CcAddressDetailsType",
    "CcDetailsType",
    "LinkType",
    "PostOfficeAddressType",
    "hours_listType",
    "links",
    "post_officeType",
    "post_office_detail",
    "post_office_list"
]
