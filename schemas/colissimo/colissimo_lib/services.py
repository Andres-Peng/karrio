#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Mar 19 14:13:20 2022 by generateDS.py version 2.40.9.
# Python 3.8.6 (v3.8.6:db455296be, Sep 23 2020, 13:31:39)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './colissimo_lib/services.py')
#
# Command line arguments:
#   ./schemas/services.xsd
#
# Command line:
#   /Users/danielkobina/Workspace/project/karrio/.venv/karrio/bin/generateDS --no-namespace-defs -o "./colissimo_lib/services.py" ./schemas/services.xsd
#
# Current working directory (os.getcwd()):
#   colissimo
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % float(input_data)).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class CheckGenerateLabelRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, outputFormat=None, letter=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.outputFormat = outputFormat
        self.outputFormat_nsprefix_ = None
        self.letter = letter
        self.letter_nsprefix_ = None
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CheckGenerateLabelRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CheckGenerateLabelRequestType.subclass:
            return CheckGenerateLabelRequestType.subclass(*args_, **kwargs_)
        else:
            return CheckGenerateLabelRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_outputFormat(self):
        return self.outputFormat
    def set_outputFormat(self, outputFormat):
        self.outputFormat = outputFormat
    def get_letter(self):
        return self.letter
    def set_letter(self, letter):
        self.letter = letter
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.outputFormat is not None or
            self.letter is not None or
            self.fields is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CheckGenerateLabelRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CheckGenerateLabelRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CheckGenerateLabelRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CheckGenerateLabelRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CheckGenerateLabelRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CheckGenerateLabelRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CheckGenerateLabelRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.outputFormat is not None:
            namespaceprefix_ = self.outputFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.outputFormat_nsprefix_) else ''
            self.outputFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='outputFormat', pretty_print=pretty_print)
        if self.letter is not None:
            namespaceprefix_ = self.letter_nsprefix_ + ':' if (UseCapturedNS_ and self.letter_nsprefix_) else ''
            self.letter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='letter', pretty_print=pretty_print)
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputFormat':
            obj_ = outputFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.outputFormat = obj_
            obj_.original_tagname_ = 'outputFormat'
        elif nodeName_ == 'letter':
            obj_ = letterType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.letter = obj_
            obj_.original_tagname_ = 'letter'
        elif nodeName_ == 'fields':
            obj_ = fieldsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
# end class CheckGenerateLabelRequestType


class GenerateCN23RequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, letter=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.letter = letter
        self.letter_nsprefix_ = None
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GenerateCN23RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GenerateCN23RequestType.subclass:
            return GenerateCN23RequestType.subclass(*args_, **kwargs_)
        else:
            return GenerateCN23RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_letter(self):
        return self.letter
    def set_letter(self, letter):
        self.letter = letter
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.letter is not None or
            self.fields is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateCN23RequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GenerateCN23RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GenerateCN23RequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GenerateCN23RequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GenerateCN23RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GenerateCN23RequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateCN23RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.letter is not None:
            namespaceprefix_ = self.letter_nsprefix_ + ':' if (UseCapturedNS_ and self.letter_nsprefix_) else ''
            self.letter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='letter', pretty_print=pretty_print)
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'letter':
            obj_ = letterType2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.letter = obj_
            obj_.original_tagname_ = 'letter'
        elif nodeName_ == 'fields':
            obj_ = fieldsType17.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
# end class GenerateCN23RequestType


class GenerateLabelRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, outputFormat=None, letter=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.outputFormat = outputFormat
        self.outputFormat_nsprefix_ = None
        self.letter = letter
        self.letter_nsprefix_ = None
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GenerateLabelRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GenerateLabelRequestType.subclass:
            return GenerateLabelRequestType.subclass(*args_, **kwargs_)
        else:
            return GenerateLabelRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_outputFormat(self):
        return self.outputFormat
    def set_outputFormat(self, outputFormat):
        self.outputFormat = outputFormat
    def get_letter(self):
        return self.letter
    def set_letter(self, letter):
        self.letter = letter
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.outputFormat is not None or
            self.letter is not None or
            self.fields is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateLabelRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GenerateLabelRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GenerateLabelRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GenerateLabelRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GenerateLabelRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GenerateLabelRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateLabelRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.outputFormat is not None:
            namespaceprefix_ = self.outputFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.outputFormat_nsprefix_) else ''
            self.outputFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='outputFormat', pretty_print=pretty_print)
        if self.letter is not None:
            namespaceprefix_ = self.letter_nsprefix_ + ':' if (UseCapturedNS_ and self.letter_nsprefix_) else ''
            self.letter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='letter', pretty_print=pretty_print)
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputFormat':
            obj_ = outputFormatType19.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.outputFormat = obj_
            obj_.original_tagname_ = 'outputFormat'
        elif nodeName_ == 'letter':
            obj_ = letterType20.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.letter = obj_
            obj_.original_tagname_ = 'letter'
        elif nodeName_ == 'fields':
            obj_ = fieldsType35.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
# end class GenerateLabelRequestType


class GetListMailBoxPickingDatesRetourRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, sender=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetListMailBoxPickingDatesRetourRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetListMailBoxPickingDatesRetourRequestType.subclass:
            return GetListMailBoxPickingDatesRetourRequestType.subclass(*args_, **kwargs_)
        else:
            return GetListMailBoxPickingDatesRetourRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.sender is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetListMailBoxPickingDatesRetourRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetListMailBoxPickingDatesRetourRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetListMailBoxPickingDatesRetourRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetListMailBoxPickingDatesRetourRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetListMailBoxPickingDatesRetourRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetListMailBoxPickingDatesRetourRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetListMailBoxPickingDatesRetourRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'sender':
            obj_ = senderType37.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
# end class GetListMailBoxPickingDatesRetourRequestType


class GetProductInterRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, productCode=None, insurance=None, nonMachinable=None, returnReceipt=None, countryCode=None, zipCode=None, city=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        self.insurance = insurance
        self.insurance_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetProductInterRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetProductInterRequestType.subclass:
            return GetProductInterRequestType.subclass(*args_, **kwargs_)
        else:
            return GetProductInterRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_insurance(self):
        return self.insurance
    def set_insurance(self, insurance):
        self.insurance = insurance
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.productCode is not None or
            self.insurance is not None or
            self.nonMachinable is not None or
            self.returnReceipt is not None or
            self.countryCode is not None or
            self.zipCode is not None or
            self.city is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetProductInterRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetProductInterRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetProductInterRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetProductInterRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetProductInterRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetProductInterRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetProductInterRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.insurance is not None:
            namespaceprefix_ = self.insurance_nsprefix_ + ':' if (UseCapturedNS_ and self.insurance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsurance>%s</%sinsurance>%s' % (namespaceprefix_ , self.gds_format_boolean(self.insurance, input_name='insurance'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'insurance':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'insurance')
            ival_ = self.gds_validate_boolean(ival_, node, 'insurance')
            self.insurance = ival_
            self.insurance_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
# end class GetProductInterRequestType


class planPickupRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, parcelNumber=None, mailBoxPickingDate=None, sender=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, planPickupRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if planPickupRequestType.subclass:
            return planPickupRequestType.subclass(*args_, **kwargs_)
        else:
            return planPickupRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.parcelNumber is not None or
            self.mailBoxPickingDate is not None or
            self.sender is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickupRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('planPickupRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'planPickupRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='planPickupRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='planPickupRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='planPickupRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickupRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'sender':
            obj_ = senderType38.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
# end class planPickupRequestType


class getListMailBoxPickingDates(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, getListMailBoxPickingDatesRetourRequest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.getListMailBoxPickingDatesRetourRequest = getListMailBoxPickingDatesRetourRequest
        self.getListMailBoxPickingDatesRetourRequest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getListMailBoxPickingDates)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getListMailBoxPickingDates.subclass:
            return getListMailBoxPickingDates.subclass(*args_, **kwargs_)
        else:
            return getListMailBoxPickingDates(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_getListMailBoxPickingDatesRetourRequest(self):
        return self.getListMailBoxPickingDatesRetourRequest
    def set_getListMailBoxPickingDatesRetourRequest(self, getListMailBoxPickingDatesRetourRequest):
        self.getListMailBoxPickingDatesRetourRequest = getListMailBoxPickingDatesRetourRequest
    def _hasContent(self):
        if (
            self.getListMailBoxPickingDatesRetourRequest is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getListMailBoxPickingDates', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getListMailBoxPickingDates')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getListMailBoxPickingDates':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getListMailBoxPickingDates')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getListMailBoxPickingDates', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getListMailBoxPickingDates'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getListMailBoxPickingDates', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.getListMailBoxPickingDatesRetourRequest is not None:
            namespaceprefix_ = self.getListMailBoxPickingDatesRetourRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.getListMailBoxPickingDatesRetourRequest_nsprefix_) else ''
            self.getListMailBoxPickingDatesRetourRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='getListMailBoxPickingDatesRetourRequest', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'getListMailBoxPickingDatesRetourRequest':
            obj_ = getListMailBoxPickingDatesRetourRequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.getListMailBoxPickingDatesRetourRequest = obj_
            obj_.original_tagname_ = 'getListMailBoxPickingDatesRetourRequest'
# end class getListMailBoxPickingDates


class getListMailBoxPickingDatesResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getListMailBoxPickingDatesResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getListMailBoxPickingDatesResponse.subclass:
            return getListMailBoxPickingDatesResponse.subclass(*args_, **kwargs_)
        else:
            return getListMailBoxPickingDatesResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getListMailBoxPickingDatesResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getListMailBoxPickingDatesResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getListMailBoxPickingDatesResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getListMailBoxPickingDatesResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getListMailBoxPickingDatesResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getListMailBoxPickingDatesResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getListMailBoxPickingDatesResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = GetListMailBoxPickingDatesResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getListMailBoxPickingDatesResponse


class baseResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, messages=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if messages is None:
            self.messages = []
        else:
            self.messages = messages
        self.messages_nsprefix_ = "tns"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, baseResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if baseResponse.subclass:
            return baseResponse.subclass(*args_, **kwargs_)
        else:
            return baseResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_messages(self):
        return self.messages
    def set_messages(self, messages):
        self.messages = messages
    def add_messages(self, value):
        self.messages.append(value)
    def insert_messages_at(self, index, value):
        self.messages.insert(index, value)
    def replace_messages_at(self, index, value):
        self.messages[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.messages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='baseResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('baseResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'baseResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='baseResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='baseResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='baseResponse'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='baseResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for messages_ in self.messages:
            namespaceprefix_ = self.messages_nsprefix_ + ':' if (UseCapturedNS_ and self.messages_nsprefix_) else ''
            messages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='messages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'messages':
            obj_ = Message.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.messages.append(obj_)
            obj_.original_tagname_ = 'messages'
# end class baseResponse


class Message(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, messageContent=None, type_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.id = id
        self.id_nsprefix_ = None
        self.messageContent = messageContent
        self.messageContent_nsprefix_ = None
        self.type_ = type_
        self.type__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Message)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Message.subclass:
            return Message.subclass(*args_, **kwargs_)
        else:
            return Message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_messageContent(self):
        return self.messageContent
    def set_messageContent(self, messageContent):
        self.messageContent = messageContent
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    def _hasContent(self):
        if (
            self.id is not None or
            self.messageContent is not None or
            self.type_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Message', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Message')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Message':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Message')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Message', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Message'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Message', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.id is not None:
            namespaceprefix_ = self.id_nsprefix_ + ':' if (UseCapturedNS_ and self.id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), namespaceprefix_ , eol_))
        if self.messageContent is not None:
            namespaceprefix_ = self.messageContent_nsprefix_ + ':' if (UseCapturedNS_ and self.messageContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smessageContent>%s</%smessageContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.messageContent), input_name='messageContent')), namespaceprefix_ , eol_))
        if self.type_ is not None:
            namespaceprefix_ = self.type__nsprefix_ + ':' if (UseCapturedNS_ and self.type__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'id')
            value_ = self.gds_validate_string(value_, node, 'id')
            self.id = value_
            self.id_nsprefix_ = child_.prefix
        elif nodeName_ == 'messageContent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'messageContent')
            value_ = self.gds_validate_string(value_, node, 'messageContent')
            self.messageContent = value_
            self.messageContent_nsprefix_ = child_.prefix
        elif nodeName_ == 'type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'type')
            value_ = self.gds_validate_string(value_, node, 'type')
            self.type_ = value_
            self.type_nsprefix_ = child_.prefix
# end class Message


class generateLabel(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, generateLabelRequest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.generateLabelRequest = generateLabelRequest
        self.generateLabelRequest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateLabel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateLabel.subclass:
            return generateLabel.subclass(*args_, **kwargs_)
        else:
            return generateLabel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_generateLabelRequest(self):
        return self.generateLabelRequest
    def set_generateLabelRequest(self, generateLabelRequest):
        self.generateLabelRequest = generateLabelRequest
    def _hasContent(self):
        if (
            self.generateLabelRequest is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateLabel', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateLabel')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateLabel':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateLabel')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateLabel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateLabel'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateLabel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.generateLabelRequest is not None:
            namespaceprefix_ = self.generateLabelRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.generateLabelRequest_nsprefix_) else ''
            self.generateLabelRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='generateLabelRequest', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'generateLabelRequest':
            obj_ = generateLabelRequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.generateLabelRequest = obj_
            obj_.original_tagname_ = 'generateLabelRequest'
# end class generateLabel


class generateLabelResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateLabelResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateLabelResponse.subclass:
            return generateLabelResponse.subclass(*args_, **kwargs_)
        else:
            return generateLabelResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateLabelResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateLabelResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateLabelResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateLabelResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateLabelResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateLabelResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateLabelResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = GenerateLabelV2ResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class generateLabelResponse


class GenerateLabelV2ResponseType(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, labelXmlV2Reponse=None, labelV2Response=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("GenerateLabelV2ResponseType"), self).__init__(messages,  **kwargs_)
        self.labelXmlV2Reponse = labelXmlV2Reponse
        self.labelXmlV2Reponse_nsprefix_ = "tns"
        self.labelV2Response = labelV2Response
        self.labelV2Response_nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GenerateLabelV2ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GenerateLabelV2ResponseType.subclass:
            return GenerateLabelV2ResponseType.subclass(*args_, **kwargs_)
        else:
            return GenerateLabelV2ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_labelXmlV2Reponse(self):
        return self.labelXmlV2Reponse
    def set_labelXmlV2Reponse(self, labelXmlV2Reponse):
        self.labelXmlV2Reponse = labelXmlV2Reponse
    def get_labelV2Response(self):
        return self.labelV2Response
    def set_labelV2Response(self, labelV2Response):
        self.labelV2Response = labelV2Response
    def _hasContent(self):
        if (
            self.labelXmlV2Reponse is not None or
            self.labelV2Response is not None or
            super(GenerateLabelV2ResponseType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateLabelV2ResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GenerateLabelV2ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GenerateLabelV2ResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GenerateLabelV2ResponseType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GenerateLabelV2ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GenerateLabelV2ResponseType'):
        super(GenerateLabelV2ResponseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GenerateLabelV2ResponseType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateLabelV2ResponseType', fromsubclass_=False, pretty_print=True):
        super(GenerateLabelV2ResponseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.labelXmlV2Reponse is not None:
            namespaceprefix_ = self.labelXmlV2Reponse_nsprefix_ + ':' if (UseCapturedNS_ and self.labelXmlV2Reponse_nsprefix_) else ''
            self.labelXmlV2Reponse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='labelXmlV2Reponse', pretty_print=pretty_print)
        if self.labelV2Response is not None:
            namespaceprefix_ = self.labelV2Response_nsprefix_ + ':' if (UseCapturedNS_ and self.labelV2Response_nsprefix_) else ''
            self.labelV2Response.export(outfile, level, namespaceprefix_, namespacedef_='', name_='labelV2Response', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(GenerateLabelV2ResponseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'labelXmlV2Reponse':
            obj_ = xmlV2Response.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.labelXmlV2Reponse = obj_
            obj_.original_tagname_ = 'labelXmlV2Reponse'
        elif nodeName_ == 'labelV2Response':
            obj_ = labelV2Response.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.labelV2Response = obj_
            obj_.original_tagname_ = 'labelV2Response'
        super(GenerateLabelV2ResponseType, self)._buildChildren(child_, node, nodeName_, True)
# end class GenerateLabelV2ResponseType


class xmlResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, cn23=None, addressee=None, barCodeCityssimo=None, barCodePCH=None, barCodeRouting=None, belgiumLabel=None, cabAztec=None, contractNumber=None, elementVisual=None, numberPCH=None, numberRouting=None, parcelNumber=None, parcelNumberPartner=None, pickupLocation=None, routing=None, sender=None, sitePCH=None, swissLabel=None, zoneRouting=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.cn23 = cn23
        self.cn23_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.barCodeCityssimo = barCodeCityssimo
        self.barCodeCityssimo_nsprefix_ = None
        self.barCodePCH = barCodePCH
        self.barCodePCH_nsprefix_ = None
        self.barCodeRouting = barCodeRouting
        self.barCodeRouting_nsprefix_ = None
        self.belgiumLabel = belgiumLabel
        self.belgiumLabel_nsprefix_ = "tns"
        self.cabAztec = cabAztec
        self.cabAztec_nsprefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        if elementVisual is None:
            self.elementVisual = []
        else:
            self.elementVisual = elementVisual
        self.elementVisual_nsprefix_ = "tns"
        self.numberPCH = numberPCH
        self.numberPCH_nsprefix_ = None
        self.numberRouting = numberRouting
        self.numberRouting_nsprefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.parcelNumberPartner = parcelNumberPartner
        self.parcelNumberPartner_nsprefix_ = None
        self.pickupLocation = pickupLocation
        self.pickupLocation_nsprefix_ = "tns"
        self.routing = routing
        self.routing_nsprefix_ = "tns"
        self.sender = sender
        self.sender_nsprefix_ = None
        self.sitePCH = sitePCH
        self.sitePCH_nsprefix_ = "tns"
        self.swissLabel = swissLabel
        self.swissLabel_nsprefix_ = "tns"
        self.zoneRouting = zoneRouting
        self.zoneRouting_nsprefix_ = "tns"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xmlResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xmlResponse.subclass:
            return xmlResponse.subclass(*args_, **kwargs_)
        else:
            return xmlResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_cn23(self):
        return self.cn23
    def set_cn23(self, cn23):
        self.cn23 = cn23
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_barCodeCityssimo(self):
        return self.barCodeCityssimo
    def set_barCodeCityssimo(self, barCodeCityssimo):
        self.barCodeCityssimo = barCodeCityssimo
    def get_barCodePCH(self):
        return self.barCodePCH
    def set_barCodePCH(self, barCodePCH):
        self.barCodePCH = barCodePCH
    def get_barCodeRouting(self):
        return self.barCodeRouting
    def set_barCodeRouting(self, barCodeRouting):
        self.barCodeRouting = barCodeRouting
    def get_belgiumLabel(self):
        return self.belgiumLabel
    def set_belgiumLabel(self, belgiumLabel):
        self.belgiumLabel = belgiumLabel
    def get_cabAztec(self):
        return self.cabAztec
    def set_cabAztec(self, cabAztec):
        self.cabAztec = cabAztec
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_elementVisual(self):
        return self.elementVisual
    def set_elementVisual(self, elementVisual):
        self.elementVisual = elementVisual
    def add_elementVisual(self, value):
        self.elementVisual.append(value)
    def insert_elementVisual_at(self, index, value):
        self.elementVisual.insert(index, value)
    def replace_elementVisual_at(self, index, value):
        self.elementVisual[index] = value
    def get_numberPCH(self):
        return self.numberPCH
    def set_numberPCH(self, numberPCH):
        self.numberPCH = numberPCH
    def get_numberRouting(self):
        return self.numberRouting
    def set_numberRouting(self, numberRouting):
        self.numberRouting = numberRouting
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_parcelNumberPartner(self):
        return self.parcelNumberPartner
    def set_parcelNumberPartner(self, parcelNumberPartner):
        self.parcelNumberPartner = parcelNumberPartner
    def get_pickupLocation(self):
        return self.pickupLocation
    def set_pickupLocation(self, pickupLocation):
        self.pickupLocation = pickupLocation
    def get_routing(self):
        return self.routing
    def set_routing(self, routing):
        self.routing = routing
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_sitePCH(self):
        return self.sitePCH
    def set_sitePCH(self, sitePCH):
        self.sitePCH = sitePCH
    def get_swissLabel(self):
        return self.swissLabel
    def set_swissLabel(self, swissLabel):
        self.swissLabel = swissLabel
    def get_zoneRouting(self):
        return self.zoneRouting
    def set_zoneRouting(self, zoneRouting):
        self.zoneRouting = zoneRouting
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.cn23 is not None or
            self.addressee is not None or
            self.barCodeCityssimo is not None or
            self.barCodePCH is not None or
            self.barCodeRouting is not None or
            self.belgiumLabel is not None or
            self.cabAztec is not None or
            self.contractNumber is not None or
            self.elementVisual or
            self.numberPCH is not None or
            self.numberRouting is not None or
            self.parcelNumber is not None or
            self.parcelNumberPartner is not None or
            self.pickupLocation is not None or
            self.routing is not None or
            self.sender is not None or
            self.sitePCH is not None or
            self.swissLabel is not None or
            self.zoneRouting is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='xmlResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xmlResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'xmlResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='xmlResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='xmlResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='xmlResponse'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='xmlResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cn23 is not None:
            namespaceprefix_ = self.cn23_nsprefix_ + ':' if (UseCapturedNS_ and self.cn23_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scn23>%s</%scn23>%s' % (namespaceprefix_ , self.gds_format_base64(self.cn23, input_name='cn23'), namespaceprefix_ , eol_))
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.barCodeCityssimo is not None:
            namespaceprefix_ = self.barCodeCityssimo_nsprefix_ + ':' if (UseCapturedNS_ and self.barCodeCityssimo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarCodeCityssimo>%s</%sbarCodeCityssimo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barCodeCityssimo), input_name='barCodeCityssimo')), namespaceprefix_ , eol_))
        if self.barCodePCH is not None:
            namespaceprefix_ = self.barCodePCH_nsprefix_ + ':' if (UseCapturedNS_ and self.barCodePCH_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarCodePCH>%s</%sbarCodePCH>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barCodePCH), input_name='barCodePCH')), namespaceprefix_ , eol_))
        if self.barCodeRouting is not None:
            namespaceprefix_ = self.barCodeRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.barCodeRouting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarCodeRouting>%s</%sbarCodeRouting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barCodeRouting), input_name='barCodeRouting')), namespaceprefix_ , eol_))
        if self.belgiumLabel is not None:
            namespaceprefix_ = self.belgiumLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.belgiumLabel_nsprefix_) else ''
            self.belgiumLabel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='belgiumLabel', pretty_print=pretty_print)
        if self.cabAztec is not None:
            namespaceprefix_ = self.cabAztec_nsprefix_ + ':' if (UseCapturedNS_ and self.cabAztec_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scabAztec>%s</%scabAztec>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.cabAztec), input_name='cabAztec')), namespaceprefix_ , eol_))
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        for elementVisual_ in self.elementVisual:
            namespaceprefix_ = self.elementVisual_nsprefix_ + ':' if (UseCapturedNS_ and self.elementVisual_nsprefix_) else ''
            elementVisual_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='elementVisual', pretty_print=pretty_print)
        if self.numberPCH is not None:
            namespaceprefix_ = self.numberPCH_nsprefix_ + ':' if (UseCapturedNS_ and self.numberPCH_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberPCH>%s</%snumberPCH>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numberPCH), input_name='numberPCH')), namespaceprefix_ , eol_))
        if self.numberRouting is not None:
            namespaceprefix_ = self.numberRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.numberRouting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberRouting>%s</%snumberRouting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numberRouting), input_name='numberRouting')), namespaceprefix_ , eol_))
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.parcelNumberPartner is not None:
            namespaceprefix_ = self.parcelNumberPartner_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumberPartner_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumberPartner>%s</%sparcelNumberPartner>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumberPartner), input_name='parcelNumberPartner')), namespaceprefix_ , eol_))
        if self.pickupLocation is not None:
            namespaceprefix_ = self.pickupLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocation_nsprefix_) else ''
            self.pickupLocation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='pickupLocation', pretty_print=pretty_print)
        if self.routing is not None:
            namespaceprefix_ = self.routing_nsprefix_ + ':' if (UseCapturedNS_ and self.routing_nsprefix_) else ''
            self.routing.export(outfile, level, namespaceprefix_, namespacedef_='', name_='routing', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.sitePCH is not None:
            namespaceprefix_ = self.sitePCH_nsprefix_ + ':' if (UseCapturedNS_ and self.sitePCH_nsprefix_) else ''
            self.sitePCH.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sitePCH', pretty_print=pretty_print)
        if self.swissLabel is not None:
            namespaceprefix_ = self.swissLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.swissLabel_nsprefix_) else ''
            self.swissLabel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='swissLabel', pretty_print=pretty_print)
        if self.zoneRouting is not None:
            namespaceprefix_ = self.zoneRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.zoneRouting_nsprefix_) else ''
            self.zoneRouting.export(outfile, level, namespaceprefix_, namespacedef_='', name_='zoneRouting', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'cn23':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'cn23')
            else:
                bval_ = None
            self.cn23 = bval_
            self.cn23_nsprefix_ = child_.prefix
        elif nodeName_ == 'addressee':
            obj_ = addresseeType60.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'barCodeCityssimo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barCodeCityssimo')
            value_ = self.gds_validate_string(value_, node, 'barCodeCityssimo')
            self.barCodeCityssimo = value_
            self.barCodeCityssimo_nsprefix_ = child_.prefix
        elif nodeName_ == 'barCodePCH':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barCodePCH')
            value_ = self.gds_validate_string(value_, node, 'barCodePCH')
            self.barCodePCH = value_
            self.barCodePCH_nsprefix_ = child_.prefix
        elif nodeName_ == 'barCodeRouting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barCodeRouting')
            value_ = self.gds_validate_string(value_, node, 'barCodeRouting')
            self.barCodeRouting = value_
            self.barCodeRouting_nsprefix_ = child_.prefix
        elif nodeName_ == 'belgiumLabel':
            obj_ = belgiumLabel.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.belgiumLabel = obj_
            obj_.original_tagname_ = 'belgiumLabel'
        elif nodeName_ == 'cabAztec':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'cabAztec')
            value_ = self.gds_validate_string(value_, node, 'cabAztec')
            self.cabAztec = value_
            self.cabAztec_nsprefix_ = child_.prefix
        elif nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'elementVisual':
            obj_ = elementVisual.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.elementVisual.append(obj_)
            obj_.original_tagname_ = 'elementVisual'
        elif nodeName_ == 'numberPCH':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numberPCH')
            value_ = self.gds_validate_string(value_, node, 'numberPCH')
            self.numberPCH = value_
            self.numberPCH_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberRouting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numberRouting')
            value_ = self.gds_validate_string(value_, node, 'numberRouting')
            self.numberRouting = value_
            self.numberRouting_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelNumberPartner':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumberPartner')
            value_ = self.gds_validate_string(value_, node, 'parcelNumberPartner')
            self.parcelNumberPartner = value_
            self.parcelNumberPartner_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocation':
            obj_ = pickupLocation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.pickupLocation = obj_
            obj_.original_tagname_ = 'pickupLocation'
        elif nodeName_ == 'routing':
            obj_ = routing.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.routing = obj_
            obj_.original_tagname_ = 'routing'
        elif nodeName_ == 'sender':
            obj_ = senderType62.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'sitePCH':
            obj_ = site.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sitePCH = obj_
            obj_.original_tagname_ = 'sitePCH'
        elif nodeName_ == 'swissLabel':
            obj_ = swissLabel.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.swissLabel = obj_
            obj_.original_tagname_ = 'swissLabel'
        elif nodeName_ == 'zoneRouting':
            obj_ = zoneRouting.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.zoneRouting = obj_
            obj_.original_tagname_ = 'zoneRouting'
# end class xmlResponse


class belgiumLabel(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeBarre=None, codeVAS=None, identification=None, returnAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeBarre = codeBarre
        self.codeBarre_nsprefix_ = None
        self.codeVAS = codeVAS
        self.codeVAS_nsprefix_ = "tns"
        self.identification = identification
        self.identification_nsprefix_ = None
        self.returnAddress = returnAddress
        self.returnAddress_nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, belgiumLabel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if belgiumLabel.subclass:
            return belgiumLabel.subclass(*args_, **kwargs_)
        else:
            return belgiumLabel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeBarre(self):
        return self.codeBarre
    def set_codeBarre(self, codeBarre):
        self.codeBarre = codeBarre
    def get_codeVAS(self):
        return self.codeVAS
    def set_codeVAS(self, codeVAS):
        self.codeVAS = codeVAS
    def get_identification(self):
        return self.identification
    def set_identification(self, identification):
        self.identification = identification
    def get_returnAddress(self):
        return self.returnAddress
    def set_returnAddress(self, returnAddress):
        self.returnAddress = returnAddress
    def _hasContent(self):
        if (
            self.codeBarre is not None or
            self.codeVAS is not None or
            self.identification is not None or
            self.returnAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='belgiumLabel', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('belgiumLabel')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'belgiumLabel':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='belgiumLabel')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='belgiumLabel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='belgiumLabel'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='belgiumLabel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeBarre is not None:
            namespaceprefix_ = self.codeBarre_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarre_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarre>%s</%scodeBarre>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeBarre), input_name='codeBarre')), namespaceprefix_ , eol_))
        if self.codeVAS is not None:
            namespaceprefix_ = self.codeVAS_nsprefix_ + ':' if (UseCapturedNS_ and self.codeVAS_nsprefix_) else ''
            self.codeVAS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codeVAS', pretty_print=pretty_print)
        if self.identification is not None:
            namespaceprefix_ = self.identification_nsprefix_ + ':' if (UseCapturedNS_ and self.identification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentification>%s</%sidentification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identification), input_name='identification')), namespaceprefix_ , eol_))
        if self.returnAddress is not None:
            namespaceprefix_ = self.returnAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.returnAddress_nsprefix_) else ''
            self.returnAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='returnAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeBarre':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeBarre')
            value_ = self.gds_validate_string(value_, node, 'codeBarre')
            self.codeBarre = value_
            self.codeBarre_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeVAS':
            obj_ = codeVAS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codeVAS = obj_
            obj_.original_tagname_ = 'codeVAS'
        elif nodeName_ == 'identification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identification')
            value_ = self.gds_validate_string(value_, node, 'identification')
            self.identification = value_
            self.identification_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnAddress':
            obj_ = returnAddressBelgium.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.returnAddress = obj_
            obj_.original_tagname_ = 'returnAddress'
# end class belgiumLabel


class codeVAS(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, deliveryMode=None, mention=None, reserve=None, signature=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.deliveryMode = deliveryMode
        self.deliveryMode_nsprefix_ = None
        self.mention = mention
        self.mention_nsprefix_ = None
        self.reserve = reserve
        self.reserve_nsprefix_ = None
        self.signature = signature
        self.signature_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codeVAS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codeVAS.subclass:
            return codeVAS.subclass(*args_, **kwargs_)
        else:
            return codeVAS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_deliveryMode(self):
        return self.deliveryMode
    def set_deliveryMode(self, deliveryMode):
        self.deliveryMode = deliveryMode
    def get_mention(self):
        return self.mention
    def set_mention(self, mention):
        self.mention = mention
    def get_reserve(self):
        return self.reserve
    def set_reserve(self, reserve):
        self.reserve = reserve
    def get_signature(self):
        return self.signature
    def set_signature(self, signature):
        self.signature = signature
    def _hasContent(self):
        if (
            self.deliveryMode is not None or
            self.mention is not None or
            self.reserve is not None or
            self.signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codeVAS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codeVAS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codeVAS':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codeVAS')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codeVAS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codeVAS'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codeVAS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.deliveryMode is not None:
            namespaceprefix_ = self.deliveryMode_nsprefix_ + ':' if (UseCapturedNS_ and self.deliveryMode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeliveryMode>%s</%sdeliveryMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.deliveryMode), input_name='deliveryMode')), namespaceprefix_ , eol_))
        if self.mention is not None:
            namespaceprefix_ = self.mention_nsprefix_ + ':' if (UseCapturedNS_ and self.mention_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smention>%s</%smention>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mention), input_name='mention')), namespaceprefix_ , eol_))
        if self.reserve is not None:
            namespaceprefix_ = self.reserve_nsprefix_ + ':' if (UseCapturedNS_ and self.reserve_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreserve>%s</%sreserve>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reserve), input_name='reserve')), namespaceprefix_ , eol_))
        if self.signature is not None:
            namespaceprefix_ = self.signature_nsprefix_ + ':' if (UseCapturedNS_ and self.signature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignature>%s</%ssignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.signature), input_name='signature')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'deliveryMode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'deliveryMode')
            value_ = self.gds_validate_string(value_, node, 'deliveryMode')
            self.deliveryMode = value_
            self.deliveryMode_nsprefix_ = child_.prefix
        elif nodeName_ == 'mention':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mention')
            value_ = self.gds_validate_string(value_, node, 'mention')
            self.mention = value_
            self.mention_nsprefix_ = child_.prefix
        elif nodeName_ == 'reserve':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reserve')
            value_ = self.gds_validate_string(value_, node, 'reserve')
            self.reserve = value_
            self.reserve_nsprefix_ = child_.prefix
        elif nodeName_ == 'signature':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'signature')
            value_ = self.gds_validate_string(value_, node, 'signature')
            self.signature = value_
            self.signature_nsprefix_ = child_.prefix
# end class codeVAS


class returnAddressBelgium(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, line1=None, line2=None, mention=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.mention = mention
        self.mention_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, returnAddressBelgium)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if returnAddressBelgium.subclass:
            return returnAddressBelgium.subclass(*args_, **kwargs_)
        else:
            return returnAddressBelgium(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_mention(self):
        return self.mention
    def set_mention(self, mention):
        self.mention = mention
    def _hasContent(self):
        if (
            self.line1 is not None or
            self.line2 is not None or
            self.mention is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='returnAddressBelgium', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('returnAddressBelgium')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'returnAddressBelgium':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='returnAddressBelgium')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='returnAddressBelgium', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='returnAddressBelgium'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='returnAddressBelgium', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.mention is not None:
            namespaceprefix_ = self.mention_nsprefix_ + ':' if (UseCapturedNS_ and self.mention_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smention>%s</%smention>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mention), input_name='mention')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'mention':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mention')
            value_ = self.gds_validate_string(value_, node, 'mention')
            self.mention = value_
            self.mention_nsprefix_ = child_.prefix
# end class returnAddressBelgium


class elementVisual(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, position=None, shortcut=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = name
        self.name_nsprefix_ = None
        self.position = position
        self.position_nsprefix_ = None
        self.shortcut = shortcut
        self.shortcut_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, elementVisual)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if elementVisual.subclass:
            return elementVisual.subclass(*args_, **kwargs_)
        else:
            return elementVisual(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_position(self):
        return self.position
    def set_position(self, position):
        self.position = position
    def get_shortcut(self):
        return self.shortcut
    def set_shortcut(self, shortcut):
        self.shortcut = shortcut
    def _hasContent(self):
        if (
            self.name is not None or
            self.position is not None or
            self.shortcut is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='elementVisual', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('elementVisual')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'elementVisual':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='elementVisual')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='elementVisual', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='elementVisual'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='elementVisual', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            namespaceprefix_ = self.name_nsprefix_ + ':' if (UseCapturedNS_ and self.name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.position is not None:
            namespaceprefix_ = self.position_nsprefix_ + ':' if (UseCapturedNS_ and self.position_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sposition>%s</%sposition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.position), input_name='position')), namespaceprefix_ , eol_))
        if self.shortcut is not None:
            namespaceprefix_ = self.shortcut_nsprefix_ + ':' if (UseCapturedNS_ and self.shortcut_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshortcut>%s</%sshortcut>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shortcut), input_name='shortcut')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'name')
            value_ = self.gds_validate_string(value_, node, 'name')
            self.name = value_
            self.name_nsprefix_ = child_.prefix
        elif nodeName_ == 'position':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'position')
            value_ = self.gds_validate_string(value_, node, 'position')
            self.position = value_
            self.position_nsprefix_ = child_.prefix
        elif nodeName_ == 'shortcut':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shortcut')
            value_ = self.gds_validate_string(value_, node, 'shortcut')
            self.shortcut = value_
            self.shortcut_nsprefix_ = child_.prefix
# end class elementVisual


class pickupLocation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, address=None, groupRouting=None, name=None, netWork=None, pointId=None, routingFileVersion=None, routingZipCode=None, serviceLabel=None, sortDistribution=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.address = address
        self.address_nsprefix_ = "tns"
        self.groupRouting = groupRouting
        self.groupRouting_nsprefix_ = None
        self.name = name
        self.name_nsprefix_ = None
        self.netWork = netWork
        self.netWork_nsprefix_ = None
        self.pointId = pointId
        self.pointId_nsprefix_ = None
        self.routingFileVersion = routingFileVersion
        self.routingFileVersion_nsprefix_ = None
        self.routingZipCode = routingZipCode
        self.routingZipCode_nsprefix_ = None
        self.serviceLabel = serviceLabel
        self.serviceLabel_nsprefix_ = None
        self.sortDistribution = sortDistribution
        self.sortDistribution_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pickupLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pickupLocation.subclass:
            return pickupLocation.subclass(*args_, **kwargs_)
        else:
            return pickupLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_groupRouting(self):
        return self.groupRouting
    def set_groupRouting(self, groupRouting):
        self.groupRouting = groupRouting
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_netWork(self):
        return self.netWork
    def set_netWork(self, netWork):
        self.netWork = netWork
    def get_pointId(self):
        return self.pointId
    def set_pointId(self, pointId):
        self.pointId = pointId
    def get_routingFileVersion(self):
        return self.routingFileVersion
    def set_routingFileVersion(self, routingFileVersion):
        self.routingFileVersion = routingFileVersion
    def get_routingZipCode(self):
        return self.routingZipCode
    def set_routingZipCode(self, routingZipCode):
        self.routingZipCode = routingZipCode
    def get_serviceLabel(self):
        return self.serviceLabel
    def set_serviceLabel(self, serviceLabel):
        self.serviceLabel = serviceLabel
    def get_sortDistribution(self):
        return self.sortDistribution
    def set_sortDistribution(self, sortDistribution):
        self.sortDistribution = sortDistribution
    def _hasContent(self):
        if (
            self.address is not None or
            self.groupRouting is not None or
            self.name is not None or
            self.netWork is not None or
            self.pointId is not None or
            self.routingFileVersion is not None or
            self.routingZipCode is not None or
            self.serviceLabel is not None or
            self.sortDistribution is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='pickupLocation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pickupLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'pickupLocation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='pickupLocation')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='pickupLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='pickupLocation'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='pickupLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
        if self.groupRouting is not None:
            namespaceprefix_ = self.groupRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.groupRouting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupRouting>%s</%sgroupRouting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupRouting), input_name='groupRouting')), namespaceprefix_ , eol_))
        if self.name is not None:
            namespaceprefix_ = self.name_nsprefix_ + ':' if (UseCapturedNS_ and self.name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.netWork is not None:
            namespaceprefix_ = self.netWork_nsprefix_ + ':' if (UseCapturedNS_ and self.netWork_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snetWork>%s</%snetWork>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.netWork), input_name='netWork')), namespaceprefix_ , eol_))
        if self.pointId is not None:
            namespaceprefix_ = self.pointId_nsprefix_ + ':' if (UseCapturedNS_ and self.pointId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spointId>%s</%spointId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pointId), input_name='pointId')), namespaceprefix_ , eol_))
        if self.routingFileVersion is not None:
            namespaceprefix_ = self.routingFileVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.routingFileVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sroutingFileVersion>%s</%sroutingFileVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.routingFileVersion), input_name='routingFileVersion')), namespaceprefix_ , eol_))
        if self.routingZipCode is not None:
            namespaceprefix_ = self.routingZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.routingZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sroutingZipCode>%s</%sroutingZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.routingZipCode), input_name='routingZipCode')), namespaceprefix_ , eol_))
        if self.serviceLabel is not None:
            namespaceprefix_ = self.serviceLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceLabel>%s</%sserviceLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceLabel), input_name='serviceLabel')), namespaceprefix_ , eol_))
        if self.sortDistribution is not None:
            namespaceprefix_ = self.sortDistribution_nsprefix_ + ':' if (UseCapturedNS_ and self.sortDistribution_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssortDistribution>%s</%ssortDistribution>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sortDistribution), input_name='sortDistribution')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'address':
            obj_ = addressPickupLocation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
        elif nodeName_ == 'groupRouting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupRouting')
            value_ = self.gds_validate_string(value_, node, 'groupRouting')
            self.groupRouting = value_
            self.groupRouting_nsprefix_ = child_.prefix
        elif nodeName_ == 'name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'name')
            value_ = self.gds_validate_string(value_, node, 'name')
            self.name = value_
            self.name_nsprefix_ = child_.prefix
        elif nodeName_ == 'netWork':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'netWork')
            value_ = self.gds_validate_string(value_, node, 'netWork')
            self.netWork = value_
            self.netWork_nsprefix_ = child_.prefix
        elif nodeName_ == 'pointId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pointId')
            value_ = self.gds_validate_string(value_, node, 'pointId')
            self.pointId = value_
            self.pointId_nsprefix_ = child_.prefix
        elif nodeName_ == 'routingFileVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'routingFileVersion')
            value_ = self.gds_validate_string(value_, node, 'routingFileVersion')
            self.routingFileVersion = value_
            self.routingFileVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'routingZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'routingZipCode')
            value_ = self.gds_validate_string(value_, node, 'routingZipCode')
            self.routingZipCode = value_
            self.routingZipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceLabel')
            value_ = self.gds_validate_string(value_, node, 'serviceLabel')
            self.serviceLabel = value_
            self.serviceLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'sortDistribution':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sortDistribution')
            value_ = self.gds_validate_string(value_, node, 'sortDistribution')
            self.sortDistribution = value_
            self.sortDistribution_nsprefix_ = child_.prefix
# end class pickupLocation


class addressPickupLocation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, city=None, countryCode=None, countryLabel=None, line1=None, line2=None, line3=None, line4=None, zipCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.countryLabel = countryLabel
        self.countryLabel_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.line4 = line4
        self.line4_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressPickupLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressPickupLocation.subclass:
            return addressPickupLocation.subclass(*args_, **kwargs_)
        else:
            return addressPickupLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_countryLabel(self):
        return self.countryLabel
    def set_countryLabel(self, countryLabel):
        self.countryLabel = countryLabel
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_line4(self):
        return self.line4
    def set_line4(self, line4):
        self.line4 = line4
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def _hasContent(self):
        if (
            self.city is not None or
            self.countryCode is not None or
            self.countryLabel is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.line4 is not None or
            self.zipCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressPickupLocation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressPickupLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressPickupLocation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressPickupLocation')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressPickupLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressPickupLocation'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressPickupLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.countryLabel is not None:
            namespaceprefix_ = self.countryLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.countryLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryLabel>%s</%scountryLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryLabel), input_name='countryLabel')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.line4 is not None:
            namespaceprefix_ = self.line4_nsprefix_ + ':' if (UseCapturedNS_ and self.line4_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline4>%s</%sline4>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line4), input_name='line4')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryLabel')
            value_ = self.gds_validate_string(value_, node, 'countryLabel')
            self.countryLabel = value_
            self.countryLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'line4':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line4')
            value_ = self.gds_validate_string(value_, node, 'line4')
            self.line4 = value_
            self.line4_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
# end class addressPickupLocation


class routing(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, barcodeId=None, depotDest=None, destinationCountry=None, destinationCountryText=None, groupingPriorityLabel=None, partnerType=None, routingVersion=None, serviceMark=None, serviceText=None, sortDest=None, sortOrigin=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.barcodeId = barcodeId
        self.barcodeId_nsprefix_ = None
        self.depotDest = depotDest
        self.depotDest_nsprefix_ = None
        self.destinationCountry = destinationCountry
        self.destinationCountry_nsprefix_ = None
        self.destinationCountryText = destinationCountryText
        self.destinationCountryText_nsprefix_ = None
        self.groupingPriorityLabel = groupingPriorityLabel
        self.groupingPriorityLabel_nsprefix_ = None
        self.partnerType = partnerType
        self.partnerType_nsprefix_ = None
        self.routingVersion = routingVersion
        self.routingVersion_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceText = serviceText
        self.serviceText_nsprefix_ = None
        self.sortDest = sortDest
        self.sortDest_nsprefix_ = None
        self.sortOrigin = sortOrigin
        self.sortOrigin_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, routing)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if routing.subclass:
            return routing.subclass(*args_, **kwargs_)
        else:
            return routing(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_barcodeId(self):
        return self.barcodeId
    def set_barcodeId(self, barcodeId):
        self.barcodeId = barcodeId
    def get_depotDest(self):
        return self.depotDest
    def set_depotDest(self, depotDest):
        self.depotDest = depotDest
    def get_destinationCountry(self):
        return self.destinationCountry
    def set_destinationCountry(self, destinationCountry):
        self.destinationCountry = destinationCountry
    def get_destinationCountryText(self):
        return self.destinationCountryText
    def set_destinationCountryText(self, destinationCountryText):
        self.destinationCountryText = destinationCountryText
    def get_groupingPriorityLabel(self):
        return self.groupingPriorityLabel
    def set_groupingPriorityLabel(self, groupingPriorityLabel):
        self.groupingPriorityLabel = groupingPriorityLabel
    def get_partnerType(self):
        return self.partnerType
    def set_partnerType(self, partnerType):
        self.partnerType = partnerType
    def get_routingVersion(self):
        return self.routingVersion
    def set_routingVersion(self, routingVersion):
        self.routingVersion = routingVersion
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceText(self):
        return self.serviceText
    def set_serviceText(self, serviceText):
        self.serviceText = serviceText
    def get_sortDest(self):
        return self.sortDest
    def set_sortDest(self, sortDest):
        self.sortDest = sortDest
    def get_sortOrigin(self):
        return self.sortOrigin
    def set_sortOrigin(self, sortOrigin):
        self.sortOrigin = sortOrigin
    def _hasContent(self):
        if (
            self.barcodeId is not None or
            self.depotDest is not None or
            self.destinationCountry is not None or
            self.destinationCountryText is not None or
            self.groupingPriorityLabel is not None or
            self.partnerType is not None or
            self.routingVersion is not None or
            self.serviceMark is not None or
            self.serviceText is not None or
            self.sortDest is not None or
            self.sortOrigin is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='routing', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('routing')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'routing':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='routing')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='routing', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='routing'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='routing', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.barcodeId is not None:
            namespaceprefix_ = self.barcodeId_nsprefix_ + ':' if (UseCapturedNS_ and self.barcodeId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarcodeId>%s</%sbarcodeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barcodeId), input_name='barcodeId')), namespaceprefix_ , eol_))
        if self.depotDest is not None:
            namespaceprefix_ = self.depotDest_nsprefix_ + ':' if (UseCapturedNS_ and self.depotDest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepotDest>%s</%sdepotDest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.depotDest), input_name='depotDest')), namespaceprefix_ , eol_))
        if self.destinationCountry is not None:
            namespaceprefix_ = self.destinationCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationCountry>%s</%sdestinationCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationCountry), input_name='destinationCountry')), namespaceprefix_ , eol_))
        if self.destinationCountryText is not None:
            namespaceprefix_ = self.destinationCountryText_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationCountryText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationCountryText>%s</%sdestinationCountryText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationCountryText), input_name='destinationCountryText')), namespaceprefix_ , eol_))
        if self.groupingPriorityLabel is not None:
            namespaceprefix_ = self.groupingPriorityLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriorityLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriorityLabel>%s</%sgroupingPriorityLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriorityLabel), input_name='groupingPriorityLabel')), namespaceprefix_ , eol_))
        if self.partnerType is not None:
            namespaceprefix_ = self.partnerType_nsprefix_ + ':' if (UseCapturedNS_ and self.partnerType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spartnerType>%s</%spartnerType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.partnerType), input_name='partnerType')), namespaceprefix_ , eol_))
        if self.routingVersion is not None:
            namespaceprefix_ = self.routingVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.routingVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sroutingVersion>%s</%sroutingVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.routingVersion), input_name='routingVersion')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceText is not None:
            namespaceprefix_ = self.serviceText_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceText>%s</%sserviceText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceText), input_name='serviceText')), namespaceprefix_ , eol_))
        if self.sortDest is not None:
            namespaceprefix_ = self.sortDest_nsprefix_ + ':' if (UseCapturedNS_ and self.sortDest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssortDest>%s</%ssortDest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sortDest), input_name='sortDest')), namespaceprefix_ , eol_))
        if self.sortOrigin is not None:
            namespaceprefix_ = self.sortOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.sortOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssortOrigin>%s</%ssortOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sortOrigin), input_name='sortOrigin')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'barcodeId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barcodeId')
            value_ = self.gds_validate_string(value_, node, 'barcodeId')
            self.barcodeId = value_
            self.barcodeId_nsprefix_ = child_.prefix
        elif nodeName_ == 'depotDest':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'depotDest')
            value_ = self.gds_validate_string(value_, node, 'depotDest')
            self.depotDest = value_
            self.depotDest_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationCountry')
            value_ = self.gds_validate_string(value_, node, 'destinationCountry')
            self.destinationCountry = value_
            self.destinationCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationCountryText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationCountryText')
            value_ = self.gds_validate_string(value_, node, 'destinationCountryText')
            self.destinationCountryText = value_
            self.destinationCountryText_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriorityLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriorityLabel')
            value_ = self.gds_validate_string(value_, node, 'groupingPriorityLabel')
            self.groupingPriorityLabel = value_
            self.groupingPriorityLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'partnerType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'partnerType')
            value_ = self.gds_validate_string(value_, node, 'partnerType')
            self.partnerType = value_
            self.partnerType_nsprefix_ = child_.prefix
        elif nodeName_ == 'routingVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'routingVersion')
            value_ = self.gds_validate_string(value_, node, 'routingVersion')
            self.routingVersion = value_
            self.routingVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceText')
            value_ = self.gds_validate_string(value_, node, 'serviceText')
            self.serviceText = value_
            self.serviceText_nsprefix_ = child_.prefix
        elif nodeName_ == 'sortDest':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sortDest')
            value_ = self.gds_validate_string(value_, node, 'sortDest')
            self.sortDest = value_
            self.sortDest_nsprefix_ = child_.prefix
        elif nodeName_ == 'sortOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sortOrigin')
            value_ = self.gds_validate_string(value_, node, 'sortOrigin')
            self.sortOrigin = value_
            self.sortOrigin_nsprefix_ = child_.prefix
# end class routing


class site(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, address=None, code=None, name=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.address = address
        self.address_nsprefix_ = "tns"
        self.code = code
        self.code_nsprefix_ = None
        self.name = name
        self.name_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, site)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if site.subclass:
            return site.subclass(*args_, **kwargs_)
        else:
            return site(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_code(self):
        return self.code
    def set_code(self, code):
        self.code = code
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def _hasContent(self):
        if (
            self.address is not None or
            self.code is not None or
            self.name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='site', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('site')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'site':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='site')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='site', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='site'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='site', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
        if self.code is not None:
            namespaceprefix_ = self.code_nsprefix_ + ':' if (UseCapturedNS_ and self.code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scode>%s</%scode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.code), input_name='code')), namespaceprefix_ , eol_))
        if self.name is not None:
            namespaceprefix_ = self.name_nsprefix_ + ':' if (UseCapturedNS_ and self.name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'address':
            obj_ = addressPCH.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
        elif nodeName_ == 'code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'code')
            value_ = self.gds_validate_string(value_, node, 'code')
            self.code = value_
            self.code_nsprefix_ = child_.prefix
        elif nodeName_ == 'name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'name')
            value_ = self.gds_validate_string(value_, node, 'name')
            self.name = value_
            self.name_nsprefix_ = child_.prefix
# end class site


class addressPCH(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, city=None, line0=None, line1=None, line2=None, zipCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressPCH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressPCH.subclass:
            return addressPCH.subclass(*args_, **kwargs_)
        else:
            return addressPCH(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def _hasContent(self):
        if (
            self.city is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.zipCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressPCH', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressPCH')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressPCH':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressPCH')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressPCH', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressPCH'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressPCH', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
# end class addressPCH


class swissLabel(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, injectionSite=None, signatureOption=None, codeSwissPost=None, swissParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.injectionSite = injectionSite
        self.injectionSite_nsprefix_ = None
        self.signatureOption = signatureOption
        self.signatureOption_nsprefix_ = None
        self.codeSwissPost = codeSwissPost
        self.codeSwissPost_nsprefix_ = None
        self.swissParcelNumber = swissParcelNumber
        self.swissParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, swissLabel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if swissLabel.subclass:
            return swissLabel.subclass(*args_, **kwargs_)
        else:
            return swissLabel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_injectionSite(self):
        return self.injectionSite
    def set_injectionSite(self, injectionSite):
        self.injectionSite = injectionSite
    def get_signatureOption(self):
        return self.signatureOption
    def set_signatureOption(self, signatureOption):
        self.signatureOption = signatureOption
    def get_codeSwissPost(self):
        return self.codeSwissPost
    def set_codeSwissPost(self, codeSwissPost):
        self.codeSwissPost = codeSwissPost
    def get_swissParcelNumber(self):
        return self.swissParcelNumber
    def set_swissParcelNumber(self, swissParcelNumber):
        self.swissParcelNumber = swissParcelNumber
    def _hasContent(self):
        if (
            self.injectionSite is not None or
            self.signatureOption is not None or
            self.codeSwissPost is not None or
            self.swissParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='swissLabel', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('swissLabel')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'swissLabel':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='swissLabel')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='swissLabel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='swissLabel'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='swissLabel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.injectionSite is not None:
            namespaceprefix_ = self.injectionSite_nsprefix_ + ':' if (UseCapturedNS_ and self.injectionSite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinjectionSite>%s</%sinjectionSite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.injectionSite), input_name='injectionSite')), namespaceprefix_ , eol_))
        if self.signatureOption is not None:
            namespaceprefix_ = self.signatureOption_nsprefix_ + ':' if (UseCapturedNS_ and self.signatureOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignatureOption>%s</%ssignatureOption>%s' % (namespaceprefix_ , self.gds_format_boolean(self.signatureOption, input_name='signatureOption'), namespaceprefix_ , eol_))
        if self.codeSwissPost is not None:
            namespaceprefix_ = self.codeSwissPost_nsprefix_ + ':' if (UseCapturedNS_ and self.codeSwissPost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeSwissPost>%s</%scodeSwissPost>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeSwissPost), input_name='codeSwissPost')), namespaceprefix_ , eol_))
        if self.swissParcelNumber is not None:
            namespaceprefix_ = self.swissParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.swissParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sswissParcelNumber>%s</%sswissParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.swissParcelNumber), input_name='swissParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'injectionSite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'injectionSite')
            value_ = self.gds_validate_string(value_, node, 'injectionSite')
            self.injectionSite = value_
            self.injectionSite_nsprefix_ = child_.prefix
        elif nodeName_ == 'signatureOption':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'signatureOption')
            ival_ = self.gds_validate_boolean(ival_, node, 'signatureOption')
            self.signatureOption = ival_
            self.signatureOption_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeSwissPost':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeSwissPost')
            value_ = self.gds_validate_string(value_, node, 'codeSwissPost')
            self.codeSwissPost = value_
            self.codeSwissPost_nsprefix_ = child_.prefix
        elif nodeName_ == 'swissParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'swissParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'swissParcelNumber')
            self.swissParcelNumber = value_
            self.swissParcelNumber_nsprefix_ = child_.prefix
# end class swissLabel


class zoneRouting(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, zoneCABRoutage=None, zoneInfosRoutage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.zoneCABRoutage = zoneCABRoutage
        self.zoneCABRoutage_nsprefix_ = "tns"
        self.zoneInfosRoutage = zoneInfosRoutage
        self.zoneInfosRoutage_nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, zoneRouting)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if zoneRouting.subclass:
            return zoneRouting.subclass(*args_, **kwargs_)
        else:
            return zoneRouting(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_zoneCABRoutage(self):
        return self.zoneCABRoutage
    def set_zoneCABRoutage(self, zoneCABRoutage):
        self.zoneCABRoutage = zoneCABRoutage
    def get_zoneInfosRoutage(self):
        return self.zoneInfosRoutage
    def set_zoneInfosRoutage(self, zoneInfosRoutage):
        self.zoneInfosRoutage = zoneInfosRoutage
    def _hasContent(self):
        if (
            self.zoneCABRoutage is not None or
            self.zoneInfosRoutage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='zoneRouting', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('zoneRouting')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'zoneRouting':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='zoneRouting')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='zoneRouting', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='zoneRouting'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='zoneRouting', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.zoneCABRoutage is not None:
            namespaceprefix_ = self.zoneCABRoutage_nsprefix_ + ':' if (UseCapturedNS_ and self.zoneCABRoutage_nsprefix_) else ''
            self.zoneCABRoutage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='zoneCABRoutage', pretty_print=pretty_print)
        if self.zoneInfosRoutage is not None:
            namespaceprefix_ = self.zoneInfosRoutage_nsprefix_ + ':' if (UseCapturedNS_ and self.zoneInfosRoutage_nsprefix_) else ''
            self.zoneInfosRoutage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='zoneInfosRoutage', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'zoneCABRoutage':
            obj_ = zoneCABRoutage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.zoneCABRoutage = obj_
            obj_.original_tagname_ = 'zoneCABRoutage'
        elif nodeName_ == 'zoneInfosRoutage':
            obj_ = zoneInfosRoutage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.zoneInfosRoutage = obj_
            obj_.original_tagname_ = 'zoneInfosRoutage'
# end class zoneRouting


class zoneCABRoutage(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, barCodeRouting=None, parcelNumberRouting=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.barCodeRouting = barCodeRouting
        self.barCodeRouting_nsprefix_ = None
        self.parcelNumberRouting = parcelNumberRouting
        self.parcelNumberRouting_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, zoneCABRoutage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if zoneCABRoutage.subclass:
            return zoneCABRoutage.subclass(*args_, **kwargs_)
        else:
            return zoneCABRoutage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_barCodeRouting(self):
        return self.barCodeRouting
    def set_barCodeRouting(self, barCodeRouting):
        self.barCodeRouting = barCodeRouting
    def get_parcelNumberRouting(self):
        return self.parcelNumberRouting
    def set_parcelNumberRouting(self, parcelNumberRouting):
        self.parcelNumberRouting = parcelNumberRouting
    def _hasContent(self):
        if (
            self.barCodeRouting is not None or
            self.parcelNumberRouting is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='zoneCABRoutage', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('zoneCABRoutage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'zoneCABRoutage':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='zoneCABRoutage')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='zoneCABRoutage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='zoneCABRoutage'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='zoneCABRoutage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.barCodeRouting is not None:
            namespaceprefix_ = self.barCodeRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.barCodeRouting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarCodeRouting>%s</%sbarCodeRouting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barCodeRouting), input_name='barCodeRouting')), namespaceprefix_ , eol_))
        if self.parcelNumberRouting is not None:
            namespaceprefix_ = self.parcelNumberRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumberRouting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumberRouting>%s</%sparcelNumberRouting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumberRouting), input_name='parcelNumberRouting')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'barCodeRouting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barCodeRouting')
            value_ = self.gds_validate_string(value_, node, 'barCodeRouting')
            self.barCodeRouting = value_
            self.barCodeRouting_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelNumberRouting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumberRouting')
            value_ = self.gds_validate_string(value_, node, 'parcelNumberRouting')
            self.parcelNumberRouting = value_
            self.parcelNumberRouting_nsprefix_ = child_.prefix
# end class zoneCABRoutage


class zoneInfosRoutage(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, controlKeyTrackingNumber=None, datePrinting=None, hourPrinting=None, identificationDestination1=None, identificationDestination2=None, MSort=None, numberVersionWS=None, routingVersion=None, serviceMark=None, sortDest=None, sortOrigin=None, trackingNumberRouting=None, typeServiceLivraison=None, rDepot=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.controlKeyTrackingNumber = controlKeyTrackingNumber
        self.controlKeyTrackingNumber_nsprefix_ = None
        self.datePrinting = datePrinting
        self.datePrinting_nsprefix_ = None
        self.hourPrinting = hourPrinting
        self.hourPrinting_nsprefix_ = None
        self.identificationDestination1 = identificationDestination1
        self.identificationDestination1_nsprefix_ = None
        self.identificationDestination2 = identificationDestination2
        self.identificationDestination2_nsprefix_ = None
        self.MSort = MSort
        self.MSort_nsprefix_ = None
        self.numberVersionWS = numberVersionWS
        self.numberVersionWS_nsprefix_ = None
        self.routingVersion = routingVersion
        self.routingVersion_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.sortDest = sortDest
        self.sortDest_nsprefix_ = None
        self.sortOrigin = sortOrigin
        self.sortOrigin_nsprefix_ = None
        self.trackingNumberRouting = trackingNumberRouting
        self.trackingNumberRouting_nsprefix_ = None
        self.typeServiceLivraison = typeServiceLivraison
        self.typeServiceLivraison_nsprefix_ = None
        self.rDepot = rDepot
        self.rDepot_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, zoneInfosRoutage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if zoneInfosRoutage.subclass:
            return zoneInfosRoutage.subclass(*args_, **kwargs_)
        else:
            return zoneInfosRoutage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_controlKeyTrackingNumber(self):
        return self.controlKeyTrackingNumber
    def set_controlKeyTrackingNumber(self, controlKeyTrackingNumber):
        self.controlKeyTrackingNumber = controlKeyTrackingNumber
    def get_datePrinting(self):
        return self.datePrinting
    def set_datePrinting(self, datePrinting):
        self.datePrinting = datePrinting
    def get_hourPrinting(self):
        return self.hourPrinting
    def set_hourPrinting(self, hourPrinting):
        self.hourPrinting = hourPrinting
    def get_identificationDestination1(self):
        return self.identificationDestination1
    def set_identificationDestination1(self, identificationDestination1):
        self.identificationDestination1 = identificationDestination1
    def get_identificationDestination2(self):
        return self.identificationDestination2
    def set_identificationDestination2(self, identificationDestination2):
        self.identificationDestination2 = identificationDestination2
    def get_MSort(self):
        return self.MSort
    def set_MSort(self, MSort):
        self.MSort = MSort
    def get_numberVersionWS(self):
        return self.numberVersionWS
    def set_numberVersionWS(self, numberVersionWS):
        self.numberVersionWS = numberVersionWS
    def get_routingVersion(self):
        return self.routingVersion
    def set_routingVersion(self, routingVersion):
        self.routingVersion = routingVersion
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_sortDest(self):
        return self.sortDest
    def set_sortDest(self, sortDest):
        self.sortDest = sortDest
    def get_sortOrigin(self):
        return self.sortOrigin
    def set_sortOrigin(self, sortOrigin):
        self.sortOrigin = sortOrigin
    def get_trackingNumberRouting(self):
        return self.trackingNumberRouting
    def set_trackingNumberRouting(self, trackingNumberRouting):
        self.trackingNumberRouting = trackingNumberRouting
    def get_typeServiceLivraison(self):
        return self.typeServiceLivraison
    def set_typeServiceLivraison(self, typeServiceLivraison):
        self.typeServiceLivraison = typeServiceLivraison
    def get_rDepot(self):
        return self.rDepot
    def set_rDepot(self, rDepot):
        self.rDepot = rDepot
    def _hasContent(self):
        if (
            self.controlKeyTrackingNumber is not None or
            self.datePrinting is not None or
            self.hourPrinting is not None or
            self.identificationDestination1 is not None or
            self.identificationDestination2 is not None or
            self.MSort is not None or
            self.numberVersionWS is not None or
            self.routingVersion is not None or
            self.serviceMark is not None or
            self.sortDest is not None or
            self.sortOrigin is not None or
            self.trackingNumberRouting is not None or
            self.typeServiceLivraison is not None or
            self.rDepot is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='zoneInfosRoutage', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('zoneInfosRoutage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'zoneInfosRoutage':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='zoneInfosRoutage')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='zoneInfosRoutage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='zoneInfosRoutage'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='zoneInfosRoutage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.controlKeyTrackingNumber is not None:
            namespaceprefix_ = self.controlKeyTrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.controlKeyTrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontrolKeyTrackingNumber>%s</%scontrolKeyTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.controlKeyTrackingNumber), input_name='controlKeyTrackingNumber')), namespaceprefix_ , eol_))
        if self.datePrinting is not None:
            namespaceprefix_ = self.datePrinting_nsprefix_ + ':' if (UseCapturedNS_ and self.datePrinting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatePrinting>%s</%sdatePrinting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.datePrinting), input_name='datePrinting')), namespaceprefix_ , eol_))
        if self.hourPrinting is not None:
            namespaceprefix_ = self.hourPrinting_nsprefix_ + ':' if (UseCapturedNS_ and self.hourPrinting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shourPrinting>%s</%shourPrinting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hourPrinting), input_name='hourPrinting')), namespaceprefix_ , eol_))
        if self.identificationDestination1 is not None:
            namespaceprefix_ = self.identificationDestination1_nsprefix_ + ':' if (UseCapturedNS_ and self.identificationDestination1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificationDestination1>%s</%sidentificationDestination1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identificationDestination1), input_name='identificationDestination1')), namespaceprefix_ , eol_))
        if self.identificationDestination2 is not None:
            namespaceprefix_ = self.identificationDestination2_nsprefix_ + ':' if (UseCapturedNS_ and self.identificationDestination2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificationDestination2>%s</%sidentificationDestination2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identificationDestination2), input_name='identificationDestination2')), namespaceprefix_ , eol_))
        if self.MSort is not None:
            namespaceprefix_ = self.MSort_nsprefix_ + ':' if (UseCapturedNS_ and self.MSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMSort>%s</%sMSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MSort), input_name='MSort')), namespaceprefix_ , eol_))
        if self.numberVersionWS is not None:
            namespaceprefix_ = self.numberVersionWS_nsprefix_ + ':' if (UseCapturedNS_ and self.numberVersionWS_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberVersionWS>%s</%snumberVersionWS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numberVersionWS), input_name='numberVersionWS')), namespaceprefix_ , eol_))
        if self.routingVersion is not None:
            namespaceprefix_ = self.routingVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.routingVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sroutingVersion>%s</%sroutingVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.routingVersion), input_name='routingVersion')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.sortDest is not None:
            namespaceprefix_ = self.sortDest_nsprefix_ + ':' if (UseCapturedNS_ and self.sortDest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssortDest>%s</%ssortDest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sortDest), input_name='sortDest')), namespaceprefix_ , eol_))
        if self.sortOrigin is not None:
            namespaceprefix_ = self.sortOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.sortOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssortOrigin>%s</%ssortOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sortOrigin), input_name='sortOrigin')), namespaceprefix_ , eol_))
        if self.trackingNumberRouting is not None:
            namespaceprefix_ = self.trackingNumberRouting_nsprefix_ + ':' if (UseCapturedNS_ and self.trackingNumberRouting_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%strackingNumberRouting>%s</%strackingNumberRouting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.trackingNumberRouting), input_name='trackingNumberRouting')), namespaceprefix_ , eol_))
        if self.typeServiceLivraison is not None:
            namespaceprefix_ = self.typeServiceLivraison_nsprefix_ + ':' if (UseCapturedNS_ and self.typeServiceLivraison_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stypeServiceLivraison>%s</%stypeServiceLivraison>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.typeServiceLivraison), input_name='typeServiceLivraison')), namespaceprefix_ , eol_))
        if self.rDepot is not None:
            namespaceprefix_ = self.rDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.rDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srDepot>%s</%srDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.rDepot), input_name='rDepot')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'controlKeyTrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'controlKeyTrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'controlKeyTrackingNumber')
            self.controlKeyTrackingNumber = value_
            self.controlKeyTrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'datePrinting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'datePrinting')
            value_ = self.gds_validate_string(value_, node, 'datePrinting')
            self.datePrinting = value_
            self.datePrinting_nsprefix_ = child_.prefix
        elif nodeName_ == 'hourPrinting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hourPrinting')
            value_ = self.gds_validate_string(value_, node, 'hourPrinting')
            self.hourPrinting = value_
            self.hourPrinting_nsprefix_ = child_.prefix
        elif nodeName_ == 'identificationDestination1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identificationDestination1')
            value_ = self.gds_validate_string(value_, node, 'identificationDestination1')
            self.identificationDestination1 = value_
            self.identificationDestination1_nsprefix_ = child_.prefix
        elif nodeName_ == 'identificationDestination2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identificationDestination2')
            value_ = self.gds_validate_string(value_, node, 'identificationDestination2')
            self.identificationDestination2 = value_
            self.identificationDestination2_nsprefix_ = child_.prefix
        elif nodeName_ == 'MSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MSort')
            value_ = self.gds_validate_string(value_, node, 'MSort')
            self.MSort = value_
            self.MSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberVersionWS':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numberVersionWS')
            value_ = self.gds_validate_string(value_, node, 'numberVersionWS')
            self.numberVersionWS = value_
            self.numberVersionWS_nsprefix_ = child_.prefix
        elif nodeName_ == 'routingVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'routingVersion')
            value_ = self.gds_validate_string(value_, node, 'routingVersion')
            self.routingVersion = value_
            self.routingVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'sortDest':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sortDest')
            value_ = self.gds_validate_string(value_, node, 'sortDest')
            self.sortDest = value_
            self.sortDest_nsprefix_ = child_.prefix
        elif nodeName_ == 'sortOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sortOrigin')
            value_ = self.gds_validate_string(value_, node, 'sortOrigin')
            self.sortOrigin = value_
            self.sortOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'trackingNumberRouting':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'trackingNumberRouting')
            value_ = self.gds_validate_string(value_, node, 'trackingNumberRouting')
            self.trackingNumberRouting = value_
            self.trackingNumberRouting_nsprefix_ = child_.prefix
        elif nodeName_ == 'typeServiceLivraison':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'typeServiceLivraison')
            value_ = self.gds_validate_string(value_, node, 'typeServiceLivraison')
            self.typeServiceLivraison = value_
            self.typeServiceLivraison_nsprefix_ = child_.prefix
        elif nodeName_ == 'rDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'rDepot')
            value_ = self.gds_validate_string(value_, node, 'rDepot')
            self.rDepot = value_
            self.rDepot_nsprefix_ = child_.prefix
# end class zoneInfosRoutage


class labelResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, label=None, cn23=None, parcelNumber=None, parcelNumberPartner=None, pdfUrl=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.label = label
        self.label_nsprefix_ = None
        self.cn23 = cn23
        self.cn23_nsprefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.parcelNumberPartner = parcelNumberPartner
        self.parcelNumberPartner_nsprefix_ = None
        self.pdfUrl = pdfUrl
        self.pdfUrl_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, labelResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if labelResponse.subclass:
            return labelResponse.subclass(*args_, **kwargs_)
        else:
            return labelResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_label(self):
        return self.label
    def set_label(self, label):
        self.label = label
    def get_cn23(self):
        return self.cn23
    def set_cn23(self, cn23):
        self.cn23 = cn23
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_parcelNumberPartner(self):
        return self.parcelNumberPartner
    def set_parcelNumberPartner(self, parcelNumberPartner):
        self.parcelNumberPartner = parcelNumberPartner
    def get_pdfUrl(self):
        return self.pdfUrl
    def set_pdfUrl(self, pdfUrl):
        self.pdfUrl = pdfUrl
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.label is not None or
            self.cn23 is not None or
            self.parcelNumber is not None or
            self.parcelNumberPartner is not None or
            self.pdfUrl is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='labelResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('labelResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'labelResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='labelResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='labelResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='labelResponse'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='labelResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.label is not None:
            namespaceprefix_ = self.label_nsprefix_ + ':' if (UseCapturedNS_ and self.label_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slabel>%s</%slabel>%s' % (namespaceprefix_ , self.gds_format_base64(self.label, input_name='label'), namespaceprefix_ , eol_))
        if self.cn23 is not None:
            namespaceprefix_ = self.cn23_nsprefix_ + ':' if (UseCapturedNS_ and self.cn23_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scn23>%s</%scn23>%s' % (namespaceprefix_ , self.gds_format_base64(self.cn23, input_name='cn23'), namespaceprefix_ , eol_))
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.parcelNumberPartner is not None:
            namespaceprefix_ = self.parcelNumberPartner_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumberPartner_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumberPartner>%s</%sparcelNumberPartner>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumberPartner), input_name='parcelNumberPartner')), namespaceprefix_ , eol_))
        if self.pdfUrl is not None:
            namespaceprefix_ = self.pdfUrl_nsprefix_ + ':' if (UseCapturedNS_ and self.pdfUrl_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdfUrl>%s</%spdfUrl>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pdfUrl), input_name='pdfUrl')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'label':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'label')
            else:
                bval_ = None
            self.label = bval_
            self.label_nsprefix_ = child_.prefix
        elif nodeName_ == 'cn23':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'cn23')
            else:
                bval_ = None
            self.cn23 = bval_
            self.cn23_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelNumberPartner':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumberPartner')
            value_ = self.gds_validate_string(value_, node, 'parcelNumberPartner')
            self.parcelNumberPartner = value_
            self.parcelNumberPartner_nsprefix_ = child_.prefix
        elif nodeName_ == 'pdfUrl':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pdfUrl')
            value_ = self.gds_validate_string(value_, node, 'pdfUrl')
            self.pdfUrl = value_
            self.pdfUrl_nsprefix_ = child_.prefix
# end class labelResponse


class planPickup(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, planPickupRequest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.planPickupRequest = planPickupRequest
        self.planPickupRequest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, planPickup)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if planPickup.subclass:
            return planPickup.subclass(*args_, **kwargs_)
        else:
            return planPickup(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_planPickupRequest(self):
        return self.planPickupRequest
    def set_planPickupRequest(self, planPickupRequest):
        self.planPickupRequest = planPickupRequest
    def _hasContent(self):
        if (
            self.planPickupRequest is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickup', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('planPickup')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'planPickup':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='planPickup')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='planPickup', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='planPickup'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickup', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.planPickupRequest is not None:
            namespaceprefix_ = self.planPickupRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.planPickupRequest_nsprefix_) else ''
            self.planPickupRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='planPickupRequest', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'planPickupRequest':
            obj_ = planPickupRequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.planPickupRequest = obj_
            obj_.original_tagname_ = 'planPickupRequest'
# end class planPickup


class planPickupResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, planPickupResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if planPickupResponse.subclass:
            return planPickupResponse.subclass(*args_, **kwargs_)
        else:
            return planPickupResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickupResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('planPickupResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'planPickupResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='planPickupResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='planPickupResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='planPickupResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickupResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = planPickupResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class planPickupResponse


class planPickupResponseType(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("planPickupResponseType"), self).__init__(messages,  **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, planPickupResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if planPickupResponseType.subclass:
            return planPickupResponseType.subclass(*args_, **kwargs_)
        else:
            return planPickupResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(planPickupResponseType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickupResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('planPickupResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'planPickupResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='planPickupResponseType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='planPickupResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='planPickupResponseType'):
        super(planPickupResponseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='planPickupResponseType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='planPickupResponseType', fromsubclass_=False, pretty_print=True):
        super(planPickupResponseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(planPickupResponseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(planPickupResponseType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class planPickupResponseType


class checkGenerateLabel(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, checkGenerateLabelRequest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.checkGenerateLabelRequest = checkGenerateLabelRequest
        self.checkGenerateLabelRequest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, checkGenerateLabel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if checkGenerateLabel.subclass:
            return checkGenerateLabel.subclass(*args_, **kwargs_)
        else:
            return checkGenerateLabel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_checkGenerateLabelRequest(self):
        return self.checkGenerateLabelRequest
    def set_checkGenerateLabelRequest(self, checkGenerateLabelRequest):
        self.checkGenerateLabelRequest = checkGenerateLabelRequest
    def _hasContent(self):
        if (
            self.checkGenerateLabelRequest is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='checkGenerateLabel', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('checkGenerateLabel')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'checkGenerateLabel':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='checkGenerateLabel')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='checkGenerateLabel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='checkGenerateLabel'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='checkGenerateLabel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.checkGenerateLabelRequest is not None:
            namespaceprefix_ = self.checkGenerateLabelRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.checkGenerateLabelRequest_nsprefix_) else ''
            self.checkGenerateLabelRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='checkGenerateLabelRequest', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'checkGenerateLabelRequest':
            obj_ = checkGenerateLabelRequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.checkGenerateLabelRequest = obj_
            obj_.original_tagname_ = 'checkGenerateLabelRequest'
# end class checkGenerateLabel


class checkGenerateLabelResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, checkGenerateLabelResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if checkGenerateLabelResponse.subclass:
            return checkGenerateLabelResponse.subclass(*args_, **kwargs_)
        else:
            return checkGenerateLabelResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='checkGenerateLabelResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('checkGenerateLabelResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'checkGenerateLabelResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='checkGenerateLabelResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='checkGenerateLabelResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='checkGenerateLabelResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='checkGenerateLabelResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = CheckGenerateLabelResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class checkGenerateLabelResponse


class CheckGenerateLabelResponseType(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("CheckGenerateLabelResponseType"), self).__init__(messages,  **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CheckGenerateLabelResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CheckGenerateLabelResponseType.subclass:
            return CheckGenerateLabelResponseType.subclass(*args_, **kwargs_)
        else:
            return CheckGenerateLabelResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(CheckGenerateLabelResponseType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CheckGenerateLabelResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CheckGenerateLabelResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CheckGenerateLabelResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CheckGenerateLabelResponseType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CheckGenerateLabelResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CheckGenerateLabelResponseType'):
        super(CheckGenerateLabelResponseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CheckGenerateLabelResponseType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CheckGenerateLabelResponseType', fromsubclass_=False, pretty_print=True):
        super(CheckGenerateLabelResponseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CheckGenerateLabelResponseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(CheckGenerateLabelResponseType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class CheckGenerateLabelResponseType


class getProductInter(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, getProductInterRequest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.getProductInterRequest = getProductInterRequest
        self.getProductInterRequest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getProductInter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getProductInter.subclass:
            return getProductInter.subclass(*args_, **kwargs_)
        else:
            return getProductInter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_getProductInterRequest(self):
        return self.getProductInterRequest
    def set_getProductInterRequest(self, getProductInterRequest):
        self.getProductInterRequest = getProductInterRequest
    def _hasContent(self):
        if (
            self.getProductInterRequest is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getProductInter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getProductInter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getProductInter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getProductInter')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getProductInter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getProductInter'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getProductInter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.getProductInterRequest is not None:
            namespaceprefix_ = self.getProductInterRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.getProductInterRequest_nsprefix_) else ''
            self.getProductInterRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='getProductInterRequest', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'getProductInterRequest':
            obj_ = getProductInterRequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.getProductInterRequest = obj_
            obj_.original_tagname_ = 'getProductInterRequest'
# end class getProductInter


class getProductInterResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getProductInterResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getProductInterResponse.subclass:
            return getProductInterResponse.subclass(*args_, **kwargs_)
        else:
            return getProductInterResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getProductInterResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getProductInterResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getProductInterResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getProductInterResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getProductInterResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getProductInterResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getProductInterResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = GetProductInterResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getProductInterResponse


class GetProductInterResponseType(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, product=None, partnerType=None, returnTypeChoice=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("GetProductInterResponseType"), self).__init__(messages,  **kwargs_)
        if product is None:
            self.product = []
        else:
            self.product = product
        self.product_nsprefix_ = None
        self.partnerType = partnerType
        self.partnerType_nsprefix_ = None
        if returnTypeChoice is None:
            self.returnTypeChoice = []
        else:
            self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetProductInterResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetProductInterResponseType.subclass:
            return GetProductInterResponseType.subclass(*args_, **kwargs_)
        else:
            return GetProductInterResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_product(self):
        return self.product
    def set_product(self, product):
        self.product = product
    def add_product(self, value):
        self.product.append(value)
    def insert_product_at(self, index, value):
        self.product.insert(index, value)
    def replace_product_at(self, index, value):
        self.product[index] = value
    def get_partnerType(self):
        return self.partnerType
    def set_partnerType(self, partnerType):
        self.partnerType = partnerType
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def add_returnTypeChoice(self, value):
        self.returnTypeChoice.append(value)
    def insert_returnTypeChoice_at(self, index, value):
        self.returnTypeChoice.insert(index, value)
    def replace_returnTypeChoice_at(self, index, value):
        self.returnTypeChoice[index] = value
    def _hasContent(self):
        if (
            self.product or
            self.partnerType is not None or
            self.returnTypeChoice or
            super(GetProductInterResponseType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetProductInterResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetProductInterResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetProductInterResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetProductInterResponseType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetProductInterResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetProductInterResponseType'):
        super(GetProductInterResponseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetProductInterResponseType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetProductInterResponseType', fromsubclass_=False, pretty_print=True):
        super(GetProductInterResponseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for product_ in self.product:
            namespaceprefix_ = self.product_nsprefix_ + ':' if (UseCapturedNS_ and self.product_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproduct>%s</%sproduct>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(product_), input_name='product')), namespaceprefix_ , eol_))
        if self.partnerType is not None:
            namespaceprefix_ = self.partnerType_nsprefix_ + ':' if (UseCapturedNS_ and self.partnerType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spartnerType>%s</%spartnerType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.partnerType), input_name='partnerType')), namespaceprefix_ , eol_))
        for returnTypeChoice_ in self.returnTypeChoice:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(returnTypeChoice_), input_name='returnTypeChoice')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(GetProductInterResponseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'product':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'product')
            value_ = self.gds_validate_string(value_, node, 'product')
            self.product.append(value_)
            self.product_nsprefix_ = child_.prefix
        elif nodeName_ == 'partnerType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'partnerType')
            value_ = self.gds_validate_string(value_, node, 'partnerType')
            self.partnerType = value_
            self.partnerType_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'returnTypeChoice')
            value_ = self.gds_validate_string(value_, node, 'returnTypeChoice')
            self.returnTypeChoice.append(value_)
            self.returnTypeChoice_nsprefix_ = child_.prefix
        super(GetProductInterResponseType, self)._buildChildren(child_, node, nodeName_, True)
# end class GetProductInterResponseType


class generateBordereauByParcelsNumbers(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, generateBordereauParcelNumberList=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.generateBordereauParcelNumberList = generateBordereauParcelNumberList
        self.generateBordereauParcelNumberList_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateBordereauByParcelsNumbers)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateBordereauByParcelsNumbers.subclass:
            return generateBordereauByParcelsNumbers.subclass(*args_, **kwargs_)
        else:
            return generateBordereauByParcelsNumbers(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_generateBordereauParcelNumberList(self):
        return self.generateBordereauParcelNumberList
    def set_generateBordereauParcelNumberList(self, generateBordereauParcelNumberList):
        self.generateBordereauParcelNumberList = generateBordereauParcelNumberList
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.generateBordereauParcelNumberList is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateBordereauByParcelsNumbers', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateBordereauByParcelsNumbers')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateBordereauByParcelsNumbers':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateBordereauByParcelsNumbers')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateBordereauByParcelsNumbers', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateBordereauByParcelsNumbers'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateBordereauByParcelsNumbers', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.generateBordereauParcelNumberList is not None:
            namespaceprefix_ = self.generateBordereauParcelNumberList_nsprefix_ + ':' if (UseCapturedNS_ and self.generateBordereauParcelNumberList_nsprefix_) else ''
            self.generateBordereauParcelNumberList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='generateBordereauParcelNumberList', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'generateBordereauParcelNumberList':
            obj_ = generateBordereauParcelNumberListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.generateBordereauParcelNumberList = obj_
            obj_.original_tagname_ = 'generateBordereauParcelNumberList'
# end class generateBordereauByParcelsNumbers


class generateBordereauByParcelsNumbersResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateBordereauByParcelsNumbersResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateBordereauByParcelsNumbersResponse.subclass:
            return generateBordereauByParcelsNumbersResponse.subclass(*args_, **kwargs_)
        else:
            return generateBordereauByParcelsNumbersResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateBordereauByParcelsNumbersResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateBordereauByParcelsNumbersResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateBordereauByParcelsNumbersResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateBordereauByParcelsNumbersResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateBordereauByParcelsNumbersResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateBordereauByParcelsNumbersResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateBordereauByParcelsNumbersResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = bordereauResponse.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class generateBordereauByParcelsNumbersResponse


class bordereauResponse(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, bordereau=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("bordereauResponse"), self).__init__(messages,  **kwargs_)
        self.bordereau = bordereau
        self.bordereau_nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, bordereauResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if bordereauResponse.subclass:
            return bordereauResponse.subclass(*args_, **kwargs_)
        else:
            return bordereauResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_bordereau(self):
        return self.bordereau
    def set_bordereau(self, bordereau):
        self.bordereau = bordereau
    def _hasContent(self):
        if (
            self.bordereau is not None or
            super(bordereauResponse, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='bordereauResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('bordereauResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'bordereauResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='bordereauResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='bordereauResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='bordereauResponse'):
        super(bordereauResponse, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='bordereauResponse')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='bordereauResponse', fromsubclass_=False, pretty_print=True):
        super(bordereauResponse, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.bordereau is not None:
            namespaceprefix_ = self.bordereau_nsprefix_ + ':' if (UseCapturedNS_ and self.bordereau_nsprefix_) else ''
            self.bordereau.export(outfile, level, namespaceprefix_, namespacedef_='', name_='bordereau', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(bordereauResponse, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'bordereau':
            obj_ = bordereau.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.bordereau = obj_
            obj_.original_tagname_ = 'bordereau'
        super(bordereauResponse, self)._buildChildren(child_, node, nodeName_, True)
# end class bordereauResponse


class bordereau(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, bordereauDataHandler=None, bordereauHeader=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.bordereauDataHandler = bordereauDataHandler
        self.bordereauDataHandler_nsprefix_ = None
        self.bordereauHeader = bordereauHeader
        self.bordereauHeader_nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, bordereau)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if bordereau.subclass:
            return bordereau.subclass(*args_, **kwargs_)
        else:
            return bordereau(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_bordereauDataHandler(self):
        return self.bordereauDataHandler
    def set_bordereauDataHandler(self, bordereauDataHandler):
        self.bordereauDataHandler = bordereauDataHandler
    def get_bordereauHeader(self):
        return self.bordereauHeader
    def set_bordereauHeader(self, bordereauHeader):
        self.bordereauHeader = bordereauHeader
    def _hasContent(self):
        if (
            self.bordereauDataHandler is not None or
            self.bordereauHeader is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='bordereau', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('bordereau')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'bordereau':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='bordereau')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='bordereau', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='bordereau'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='bordereau', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.bordereauDataHandler is not None:
            namespaceprefix_ = self.bordereauDataHandler_nsprefix_ + ':' if (UseCapturedNS_ and self.bordereauDataHandler_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbordereauDataHandler>%s</%sbordereauDataHandler>%s' % (namespaceprefix_ , self.gds_format_base64(self.bordereauDataHandler, input_name='bordereauDataHandler'), namespaceprefix_ , eol_))
        if self.bordereauHeader is not None:
            namespaceprefix_ = self.bordereauHeader_nsprefix_ + ':' if (UseCapturedNS_ and self.bordereauHeader_nsprefix_) else ''
            self.bordereauHeader.export(outfile, level, namespaceprefix_, namespacedef_='', name_='bordereauHeader', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'bordereauDataHandler':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'bordereauDataHandler')
            else:
                bval_ = None
            self.bordereauDataHandler = bval_
            self.bordereauDataHandler_nsprefix_ = child_.prefix
        elif nodeName_ == 'bordereauHeader':
            obj_ = bordereauHeader.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.bordereauHeader = obj_
            obj_.original_tagname_ = 'bordereauHeader'
# end class bordereau


class bordereauHeader(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, address=None, bordereauNumber=None, clientNumber=None, codeSitePCH=None, company=None, nameSitePCH=None, numberOfParcels=None, publishingDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.address = address
        self.address_nsprefix_ = None
        self.bordereauNumber = bordereauNumber
        self.bordereauNumber_nsprefix_ = None
        self.clientNumber = clientNumber
        self.clientNumber_nsprefix_ = None
        self.codeSitePCH = codeSitePCH
        self.codeSitePCH_nsprefix_ = None
        self.company = company
        self.company_nsprefix_ = None
        self.nameSitePCH = nameSitePCH
        self.nameSitePCH_nsprefix_ = None
        self.numberOfParcels = numberOfParcels
        self.numberOfParcels_nsprefix_ = None
        if isinstance(publishingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(publishingDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = publishingDate
        self.publishingDate = initvalue_
        self.publishingDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, bordereauHeader)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if bordereauHeader.subclass:
            return bordereauHeader.subclass(*args_, **kwargs_)
        else:
            return bordereauHeader(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_bordereauNumber(self):
        return self.bordereauNumber
    def set_bordereauNumber(self, bordereauNumber):
        self.bordereauNumber = bordereauNumber
    def get_clientNumber(self):
        return self.clientNumber
    def set_clientNumber(self, clientNumber):
        self.clientNumber = clientNumber
    def get_codeSitePCH(self):
        return self.codeSitePCH
    def set_codeSitePCH(self, codeSitePCH):
        self.codeSitePCH = codeSitePCH
    def get_company(self):
        return self.company
    def set_company(self, company):
        self.company = company
    def get_nameSitePCH(self):
        return self.nameSitePCH
    def set_nameSitePCH(self, nameSitePCH):
        self.nameSitePCH = nameSitePCH
    def get_numberOfParcels(self):
        return self.numberOfParcels
    def set_numberOfParcels(self, numberOfParcels):
        self.numberOfParcels = numberOfParcels
    def get_publishingDate(self):
        return self.publishingDate
    def set_publishingDate(self, publishingDate):
        self.publishingDate = publishingDate
    def _hasContent(self):
        if (
            self.address is not None or
            self.bordereauNumber is not None or
            self.clientNumber is not None or
            self.codeSitePCH is not None or
            self.company is not None or
            self.nameSitePCH is not None or
            self.numberOfParcels is not None or
            self.publishingDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='bordereauHeader', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('bordereauHeader')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'bordereauHeader':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='bordereauHeader')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='bordereauHeader', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='bordereauHeader'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='bordereauHeader', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddress>%s</%saddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.address), input_name='address')), namespaceprefix_ , eol_))
        if self.bordereauNumber is not None:
            namespaceprefix_ = self.bordereauNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.bordereauNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbordereauNumber>%s</%sbordereauNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.bordereauNumber, input_name='bordereauNumber'), namespaceprefix_ , eol_))
        if self.clientNumber is not None:
            namespaceprefix_ = self.clientNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.clientNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclientNumber>%s</%sclientNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.clientNumber), input_name='clientNumber')), namespaceprefix_ , eol_))
        if self.codeSitePCH is not None:
            namespaceprefix_ = self.codeSitePCH_nsprefix_ + ':' if (UseCapturedNS_ and self.codeSitePCH_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeSitePCH>%s</%scodeSitePCH>%s' % (namespaceprefix_ , self.gds_format_integer(self.codeSitePCH, input_name='codeSitePCH'), namespaceprefix_ , eol_))
        if self.company is not None:
            namespaceprefix_ = self.company_nsprefix_ + ':' if (UseCapturedNS_ and self.company_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompany>%s</%scompany>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.company), input_name='company')), namespaceprefix_ , eol_))
        if self.nameSitePCH is not None:
            namespaceprefix_ = self.nameSitePCH_nsprefix_ + ':' if (UseCapturedNS_ and self.nameSitePCH_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snameSitePCH>%s</%snameSitePCH>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nameSitePCH), input_name='nameSitePCH')), namespaceprefix_ , eol_))
        if self.numberOfParcels is not None:
            namespaceprefix_ = self.numberOfParcels_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcels_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcels>%s</%snumberOfParcels>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcels, input_name='numberOfParcels'), namespaceprefix_ , eol_))
        if self.publishingDate is not None:
            namespaceprefix_ = self.publishingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.publishingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spublishingDate>%s</%spublishingDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.publishingDate, input_name='publishingDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'address':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'address')
            value_ = self.gds_validate_string(value_, node, 'address')
            self.address = value_
            self.address_nsprefix_ = child_.prefix
        elif nodeName_ == 'bordereauNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'bordereauNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'bordereauNumber')
            self.bordereauNumber = ival_
            self.bordereauNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'clientNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'clientNumber')
            value_ = self.gds_validate_string(value_, node, 'clientNumber')
            self.clientNumber = value_
            self.clientNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeSitePCH' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'codeSitePCH')
            ival_ = self.gds_validate_integer(ival_, node, 'codeSitePCH')
            self.codeSitePCH = ival_
            self.codeSitePCH_nsprefix_ = child_.prefix
        elif nodeName_ == 'company':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'company')
            value_ = self.gds_validate_string(value_, node, 'company')
            self.company = value_
            self.company_nsprefix_ = child_.prefix
        elif nodeName_ == 'nameSitePCH':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nameSitePCH')
            value_ = self.gds_validate_string(value_, node, 'nameSitePCH')
            self.nameSitePCH = value_
            self.nameSitePCH_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcels' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcels')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcels')
            self.numberOfParcels = ival_
            self.numberOfParcels_nsprefix_ = child_.prefix
        elif nodeName_ == 'publishingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.publishingDate = dval_
            self.publishingDate_nsprefix_ = child_.prefix
# end class bordereauHeader


class generateCN23(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, generateCN23Request=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.generateCN23Request = generateCN23Request
        self.generateCN23Request_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateCN23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateCN23.subclass:
            return generateCN23.subclass(*args_, **kwargs_)
        else:
            return generateCN23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_generateCN23Request(self):
        return self.generateCN23Request
    def set_generateCN23Request(self, generateCN23Request):
        self.generateCN23Request = generateCN23Request
    def _hasContent(self):
        if (
            self.generateCN23Request is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateCN23', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateCN23')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateCN23':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateCN23')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateCN23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateCN23'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateCN23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.generateCN23Request is not None:
            namespaceprefix_ = self.generateCN23Request_nsprefix_ + ':' if (UseCapturedNS_ and self.generateCN23Request_nsprefix_) else ''
            self.generateCN23Request.export(outfile, level, namespaceprefix_, namespacedef_='', name_='generateCN23Request', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'generateCN23Request':
            obj_ = generateCN23RequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.generateCN23Request = obj_
            obj_.original_tagname_ = 'generateCN23Request'
# end class generateCN23


class generateCN23Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateCN23Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateCN23Response.subclass:
            return generateCN23Response.subclass(*args_, **kwargs_)
        else:
            return generateCN23Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateCN23Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateCN23Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateCN23Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateCN23Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateCN23Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateCN23Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateCN23Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = GenerateCN23V2ResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class generateCN23Response


class GenerateCN23V2ResponseType(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, fields=None, cn23=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("GenerateCN23V2ResponseType"), self).__init__(messages,  **kwargs_)
        self.fields = fields
        self.fields_nsprefix_ = None
        self.cn23 = cn23
        self.cn23_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GenerateCN23V2ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GenerateCN23V2ResponseType.subclass:
            return GenerateCN23V2ResponseType.subclass(*args_, **kwargs_)
        else:
            return GenerateCN23V2ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def get_cn23(self):
        return self.cn23
    def set_cn23(self, cn23):
        self.cn23 = cn23
    def _hasContent(self):
        if (
            self.fields is not None or
            self.cn23 is not None or
            super(GenerateCN23V2ResponseType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateCN23V2ResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GenerateCN23V2ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GenerateCN23V2ResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GenerateCN23V2ResponseType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GenerateCN23V2ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GenerateCN23V2ResponseType'):
        super(GenerateCN23V2ResponseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GenerateCN23V2ResponseType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GenerateCN23V2ResponseType', fromsubclass_=False, pretty_print=True):
        super(GenerateCN23V2ResponseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
        if self.cn23 is not None:
            namespaceprefix_ = self.cn23_nsprefix_ + ':' if (UseCapturedNS_ and self.cn23_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scn23>%s</%scn23>%s' % (namespaceprefix_ , self.gds_format_base64(self.cn23, input_name='cn23'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(GenerateCN23V2ResponseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'fields':
            obj_ = fieldsType102.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
        elif nodeName_ == 'cn23':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'cn23')
            else:
                bval_ = None
            self.cn23 = bval_
            self.cn23_nsprefix_ = child_.prefix
        super(GenerateCN23V2ResponseType, self)._buildChildren(child_, node, nodeName_, True)
# end class GenerateCN23V2ResponseType


class getBordereauByNumber(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, bordereauNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.bordereauNumber = bordereauNumber
        self.bordereauNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getBordereauByNumber)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getBordereauByNumber.subclass:
            return getBordereauByNumber.subclass(*args_, **kwargs_)
        else:
            return getBordereauByNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_bordereauNumber(self):
        return self.bordereauNumber
    def set_bordereauNumber(self, bordereauNumber):
        self.bordereauNumber = bordereauNumber
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.bordereauNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getBordereauByNumber', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getBordereauByNumber')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getBordereauByNumber':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getBordereauByNumber')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getBordereauByNumber', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getBordereauByNumber'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getBordereauByNumber', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.bordereauNumber is not None:
            namespaceprefix_ = self.bordereauNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.bordereauNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbordereauNumber>%s</%sbordereauNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.bordereauNumber), input_name='bordereauNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'bordereauNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'bordereauNumber')
            value_ = self.gds_validate_string(value_, node, 'bordereauNumber')
            self.bordereauNumber = value_
            self.bordereauNumber_nsprefix_ = child_.prefix
# end class getBordereauByNumber


class getBordereauByNumberResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = "tns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getBordereauByNumberResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getBordereauByNumberResponse.subclass:
            return getBordereauByNumberResponse.subclass(*args_, **kwargs_)
        else:
            return getBordereauByNumberResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getBordereauByNumberResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getBordereauByNumberResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getBordereauByNumberResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getBordereauByNumberResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getBordereauByNumberResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getBordereauByNumberResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getBordereauByNumberResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = bordereauResponse.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getBordereauByNumberResponse


class outputFormatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, x=None, y=None, outputPrintingType=None, dematerialized=None, returnType=None, printCODDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.x = x
        self.x_nsprefix_ = None
        self.y = y
        self.y_nsprefix_ = None
        self.outputPrintingType = outputPrintingType
        self.outputPrintingType_nsprefix_ = None
        self.dematerialized = dematerialized
        self.dematerialized_nsprefix_ = None
        self.returnType = returnType
        self.returnType_nsprefix_ = None
        self.printCODDocument = printCODDocument
        self.printCODDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, outputFormatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if outputFormatType.subclass:
            return outputFormatType.subclass(*args_, **kwargs_)
        else:
            return outputFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_x(self):
        return self.x
    def set_x(self, x):
        self.x = x
    def get_y(self):
        return self.y
    def set_y(self, y):
        self.y = y
    def get_outputPrintingType(self):
        return self.outputPrintingType
    def set_outputPrintingType(self, outputPrintingType):
        self.outputPrintingType = outputPrintingType
    def get_dematerialized(self):
        return self.dematerialized
    def set_dematerialized(self, dematerialized):
        self.dematerialized = dematerialized
    def get_returnType(self):
        return self.returnType
    def set_returnType(self, returnType):
        self.returnType = returnType
    def get_printCODDocument(self):
        return self.printCODDocument
    def set_printCODDocument(self, printCODDocument):
        self.printCODDocument = printCODDocument
    def _hasContent(self):
        if (
            self.x is not None or
            self.y is not None or
            self.outputPrintingType is not None or
            self.dematerialized is not None or
            self.returnType is not None or
            self.printCODDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('outputFormatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'outputFormatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='outputFormatType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='outputFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='outputFormatType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.x is not None:
            namespaceprefix_ = self.x_nsprefix_ + ':' if (UseCapturedNS_ and self.x_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sx>%s</%sx>%s' % (namespaceprefix_ , self.gds_format_integer(self.x, input_name='x'), namespaceprefix_ , eol_))
        if self.y is not None:
            namespaceprefix_ = self.y_nsprefix_ + ':' if (UseCapturedNS_ and self.y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sy>%s</%sy>%s' % (namespaceprefix_ , self.gds_format_integer(self.y, input_name='y'), namespaceprefix_ , eol_))
        if self.outputPrintingType is not None:
            namespaceprefix_ = self.outputPrintingType_nsprefix_ + ':' if (UseCapturedNS_ and self.outputPrintingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputPrintingType>%s</%soutputPrintingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.outputPrintingType), input_name='outputPrintingType')), namespaceprefix_ , eol_))
        if self.dematerialized is not None:
            namespaceprefix_ = self.dematerialized_nsprefix_ + ':' if (UseCapturedNS_ and self.dematerialized_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdematerialized>%s</%sdematerialized>%s' % (namespaceprefix_ , self.gds_format_boolean(self.dematerialized, input_name='dematerialized'), namespaceprefix_ , eol_))
        if self.returnType is not None:
            namespaceprefix_ = self.returnType_nsprefix_ + ':' if (UseCapturedNS_ and self.returnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnType>%s</%sreturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.returnType), input_name='returnType')), namespaceprefix_ , eol_))
        if self.printCODDocument is not None:
            namespaceprefix_ = self.printCODDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.printCODDocument_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprintCODDocument>%s</%sprintCODDocument>%s' % (namespaceprefix_ , self.gds_format_boolean(self.printCODDocument, input_name='printCODDocument'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'x' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'x')
            ival_ = self.gds_validate_integer(ival_, node, 'x')
            self.x = ival_
            self.x_nsprefix_ = child_.prefix
        elif nodeName_ == 'y' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'y')
            ival_ = self.gds_validate_integer(ival_, node, 'y')
            self.y = ival_
            self.y_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputPrintingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'outputPrintingType')
            value_ = self.gds_validate_string(value_, node, 'outputPrintingType')
            self.outputPrintingType = value_
            self.outputPrintingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'dematerialized':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'dematerialized')
            ival_ = self.gds_validate_boolean(ival_, node, 'dematerialized')
            self.dematerialized = ival_
            self.dematerialized_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'returnType')
            value_ = self.gds_validate_string(value_, node, 'returnType')
            self.returnType = value_
            self.returnType_nsprefix_ = child_.prefix
        elif nodeName_ == 'printCODDocument':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'printCODDocument')
            ival_ = self.gds_validate_boolean(ival_, node, 'printCODDocument')
            self.printCODDocument = ival_
            self.printCODDocument_nsprefix_ = child_.prefix
# end class outputFormatType


class letterType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, service=None, parcel=None, customsDeclarations=None, sender=None, addressee=None, codSenderAddress=None, uploadDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.parcel = parcel
        self.parcel_nsprefix_ = None
        self.customsDeclarations = customsDeclarations
        self.customsDeclarations_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.codSenderAddress = codSenderAddress
        self.codSenderAddress_nsprefix_ = None
        self.uploadDocument = uploadDocument
        self.uploadDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, letterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if letterType.subclass:
            return letterType.subclass(*args_, **kwargs_)
        else:
            return letterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_parcel(self):
        return self.parcel
    def set_parcel(self, parcel):
        self.parcel = parcel
    def get_customsDeclarations(self):
        return self.customsDeclarations
    def set_customsDeclarations(self, customsDeclarations):
        self.customsDeclarations = customsDeclarations
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_codSenderAddress(self):
        return self.codSenderAddress
    def set_codSenderAddress(self, codSenderAddress):
        self.codSenderAddress = codSenderAddress
    def get_uploadDocument(self):
        return self.uploadDocument
    def set_uploadDocument(self, uploadDocument):
        self.uploadDocument = uploadDocument
    def _hasContent(self):
        if (
            self.service is not None or
            self.parcel is not None or
            self.customsDeclarations is not None or
            self.sender is not None or
            self.addressee is not None or
            self.codSenderAddress is not None or
            self.uploadDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('letterType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'letterType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='letterType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='letterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='letterType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            self.service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='service', pretty_print=pretty_print)
        if self.parcel is not None:
            namespaceprefix_ = self.parcel_nsprefix_ + ':' if (UseCapturedNS_ and self.parcel_nsprefix_) else ''
            self.parcel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parcel', pretty_print=pretty_print)
        if self.customsDeclarations is not None:
            namespaceprefix_ = self.customsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.customsDeclarations_nsprefix_) else ''
            self.customsDeclarations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsDeclarations', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.codSenderAddress is not None:
            namespaceprefix_ = self.codSenderAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.codSenderAddress_nsprefix_) else ''
            self.codSenderAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codSenderAddress', pretty_print=pretty_print)
        if self.uploadDocument is not None:
            namespaceprefix_ = self.uploadDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.uploadDocument_nsprefix_) else ''
            self.uploadDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uploadDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'service':
            obj_ = serviceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.service = obj_
            obj_.original_tagname_ = 'service'
        elif nodeName_ == 'parcel':
            obj_ = parcelType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.parcel = obj_
            obj_.original_tagname_ = 'parcel'
        elif nodeName_ == 'customsDeclarations':
            obj_ = customsDeclarationsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsDeclarations = obj_
            obj_.original_tagname_ = 'customsDeclarations'
        elif nodeName_ == 'sender':
            obj_ = senderType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'addressee':
            obj_ = addresseeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'codSenderAddress':
            obj_ = codSenderAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codSenderAddress = obj_
            obj_.original_tagname_ = 'codSenderAddress'
        elif nodeName_ == 'uploadDocument':
            obj_ = uploadDocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uploadDocument = obj_
            obj_.original_tagname_ = 'uploadDocument'
# end class letterType


class serviceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, productCode=None, depositDate=None, mailBoxPicking=None, mailBoxPickingDate=None, vatCode=None, vatPercentage=None, vatAmount=None, transportationAmount=None, totalAmount=None, orderNumber=None, commercialName=None, returnTypeChoice=None, reseauPostal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        if isinstance(depositDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(depositDate, '%Y-%m-%d').date()
        else:
            initvalue_ = depositDate
        self.depositDate = initvalue_
        self.depositDate_nsprefix_ = None
        self.mailBoxPicking = mailBoxPicking
        self.mailBoxPicking_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.vatCode = vatCode
        self.vatCode_nsprefix_ = None
        self.vatPercentage = vatPercentage
        self.vatPercentage_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.transportationAmount = transportationAmount
        self.transportationAmount_nsprefix_ = None
        self.totalAmount = totalAmount
        self.totalAmount_nsprefix_ = None
        self.orderNumber = orderNumber
        self.orderNumber_nsprefix_ = None
        self.commercialName = commercialName
        self.commercialName_nsprefix_ = None
        self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
        self.reseauPostal = reseauPostal
        self.reseauPostal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType.subclass:
            return serviceType.subclass(*args_, **kwargs_)
        else:
            return serviceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_depositDate(self):
        return self.depositDate
    def set_depositDate(self, depositDate):
        self.depositDate = depositDate
    def get_mailBoxPicking(self):
        return self.mailBoxPicking
    def set_mailBoxPicking(self, mailBoxPicking):
        self.mailBoxPicking = mailBoxPicking
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_vatCode(self):
        return self.vatCode
    def set_vatCode(self, vatCode):
        self.vatCode = vatCode
    def get_vatPercentage(self):
        return self.vatPercentage
    def set_vatPercentage(self, vatPercentage):
        self.vatPercentage = vatPercentage
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_transportationAmount(self):
        return self.transportationAmount
    def set_transportationAmount(self, transportationAmount):
        self.transportationAmount = transportationAmount
    def get_totalAmount(self):
        return self.totalAmount
    def set_totalAmount(self, totalAmount):
        self.totalAmount = totalAmount
    def get_orderNumber(self):
        return self.orderNumber
    def set_orderNumber(self, orderNumber):
        self.orderNumber = orderNumber
    def get_commercialName(self):
        return self.commercialName
    def set_commercialName(self, commercialName):
        self.commercialName = commercialName
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def get_reseauPostal(self):
        return self.reseauPostal
    def set_reseauPostal(self, reseauPostal):
        self.reseauPostal = reseauPostal
    def _hasContent(self):
        if (
            self.productCode is not None or
            self.depositDate is not None or
            self.mailBoxPicking is not None or
            self.mailBoxPickingDate is not None or
            self.vatCode is not None or
            self.vatPercentage is not None or
            self.vatAmount is not None or
            self.transportationAmount is not None or
            self.totalAmount is not None or
            self.orderNumber is not None or
            self.commercialName is not None or
            self.returnTypeChoice is not None or
            self.reseauPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'serviceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='serviceType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='serviceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='serviceType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.depositDate is not None:
            namespaceprefix_ = self.depositDate_nsprefix_ + ':' if (UseCapturedNS_ and self.depositDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepositDate>%s</%sdepositDate>%s' % (namespaceprefix_ , self.gds_format_date(self.depositDate, input_name='depositDate'), namespaceprefix_ , eol_))
        if self.mailBoxPicking is not None:
            namespaceprefix_ = self.mailBoxPicking_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPicking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPicking>%s</%smailBoxPicking>%s' % (namespaceprefix_ , self.gds_format_boolean(self.mailBoxPicking, input_name='mailBoxPicking'), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.vatCode is not None:
            namespaceprefix_ = self.vatCode_nsprefix_ + ':' if (UseCapturedNS_ and self.vatCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatCode>%s</%svatCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatCode, input_name='vatCode'), namespaceprefix_ , eol_))
        if self.vatPercentage is not None:
            namespaceprefix_ = self.vatPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.vatPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatPercentage>%s</%svatPercentage>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatPercentage, input_name='vatPercentage'), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.transportationAmount is not None:
            namespaceprefix_ = self.transportationAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.transportationAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransportationAmount>%s</%stransportationAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.transportationAmount, input_name='transportationAmount'), namespaceprefix_ , eol_))
        if self.totalAmount is not None:
            namespaceprefix_ = self.totalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.totalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalAmount>%s</%stotalAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.totalAmount, input_name='totalAmount'), namespaceprefix_ , eol_))
        if self.orderNumber is not None:
            namespaceprefix_ = self.orderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.orderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorderNumber>%s</%sorderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orderNumber), input_name='orderNumber')), namespaceprefix_ , eol_))
        if self.commercialName is not None:
            namespaceprefix_ = self.commercialName_nsprefix_ + ':' if (UseCapturedNS_ and self.commercialName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommercialName>%s</%scommercialName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.commercialName), input_name='commercialName')), namespaceprefix_ , eol_))
        if self.returnTypeChoice is not None:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.returnTypeChoice, input_name='returnTypeChoice'), namespaceprefix_ , eol_))
        if self.reseauPostal is not None:
            namespaceprefix_ = self.reseauPostal_nsprefix_ + ':' if (UseCapturedNS_ and self.reseauPostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreseauPostal>%s</%sreseauPostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reseauPostal), input_name='reseauPostal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'depositDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.depositDate = dval_
            self.depositDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPicking':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'mailBoxPicking')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailBoxPicking')
            self.mailBoxPicking = ival_
            self.mailBoxPicking_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatCode')
            ival_ = self.gds_validate_integer(ival_, node, 'vatCode')
            self.vatCode = ival_
            self.vatCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatPercentage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatPercentage')
            ival_ = self.gds_validate_integer(ival_, node, 'vatPercentage')
            self.vatPercentage = ival_
            self.vatPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'vatAmount')
            self.vatAmount = ival_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'transportationAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'transportationAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'transportationAmount')
            self.transportationAmount = ival_
            self.transportationAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'totalAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'totalAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'totalAmount')
            self.totalAmount = ival_
            self.totalAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'orderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orderNumber')
            value_ = self.gds_validate_string(value_, node, 'orderNumber')
            self.orderNumber = value_
            self.orderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'commercialName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'commercialName')
            value_ = self.gds_validate_string(value_, node, 'commercialName')
            self.commercialName = value_
            self.commercialName_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'returnTypeChoice')
            ival_ = self.gds_validate_integer(ival_, node, 'returnTypeChoice')
            self.returnTypeChoice = ival_
            self.returnTypeChoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'reseauPostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reseauPostal')
            value_ = self.gds_validate_string(value_, node, 'reseauPostal')
            self.reseauPostal = value_
            self.reseauPostal_nsprefix_ = child_.prefix
# end class serviceType


class parcelType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelNumber=None, insuranceAmount=None, insuranceValue=None, recommendationLevel=None, weight=None, nonMachinable=None, COD=None, CODAmount=None, CODCurrency=None, returnReceipt=None, instructions=None, pickupLocationId=None, ftd=None, ddp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.insuranceAmount = insuranceAmount
        self.insuranceAmount_nsprefix_ = None
        self.insuranceValue = insuranceValue
        self.insuranceValue_nsprefix_ = None
        self.recommendationLevel = recommendationLevel
        self.recommendationLevel_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
        self.CODCurrency = CODCurrency
        self.CODCurrency_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.instructions = instructions
        self.instructions_nsprefix_ = None
        self.pickupLocationId = pickupLocationId
        self.pickupLocationId_nsprefix_ = None
        self.ftd = ftd
        self.ftd_nsprefix_ = None
        self.ddp = ddp
        self.ddp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parcelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parcelType.subclass:
            return parcelType.subclass(*args_, **kwargs_)
        else:
            return parcelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_insuranceAmount(self):
        return self.insuranceAmount
    def set_insuranceAmount(self, insuranceAmount):
        self.insuranceAmount = insuranceAmount
    def get_insuranceValue(self):
        return self.insuranceValue
    def set_insuranceValue(self, insuranceValue):
        self.insuranceValue = insuranceValue
    def get_recommendationLevel(self):
        return self.recommendationLevel
    def set_recommendationLevel(self, recommendationLevel):
        self.recommendationLevel = recommendationLevel
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def get_CODCurrency(self):
        return self.CODCurrency
    def set_CODCurrency(self, CODCurrency):
        self.CODCurrency = CODCurrency
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_instructions(self):
        return self.instructions
    def set_instructions(self, instructions):
        self.instructions = instructions
    def get_pickupLocationId(self):
        return self.pickupLocationId
    def set_pickupLocationId(self, pickupLocationId):
        self.pickupLocationId = pickupLocationId
    def get_ftd(self):
        return self.ftd
    def set_ftd(self, ftd):
        self.ftd = ftd
    def get_ddp(self):
        return self.ddp
    def set_ddp(self, ddp):
        self.ddp = ddp
    def _hasContent(self):
        if (
            self.parcelNumber is not None or
            self.insuranceAmount is not None or
            self.insuranceValue is not None or
            self.recommendationLevel is not None or
            self.weight is not None or
            self.nonMachinable is not None or
            self.COD is not None or
            self.CODAmount is not None or
            self.CODCurrency is not None or
            self.returnReceipt is not None or
            self.instructions is not None or
            self.pickupLocationId is not None or
            self.ftd is not None or
            self.ddp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parcelType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'parcelType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='parcelType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='parcelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='parcelType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.insuranceAmount is not None:
            namespaceprefix_ = self.insuranceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceAmount>%s</%sinsuranceAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceAmount, input_name='insuranceAmount'), namespaceprefix_ , eol_))
        if self.insuranceValue is not None:
            namespaceprefix_ = self.insuranceValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceValue>%s</%sinsuranceValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceValue, input_name='insuranceValue'), namespaceprefix_ , eol_))
        if self.recommendationLevel is not None:
            namespaceprefix_ = self.recommendationLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.recommendationLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecommendationLevel>%s</%srecommendationLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recommendationLevel), input_name='recommendationLevel')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOD>%s</%sCOD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.COD, input_name='COD'), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODAmount>%s</%sCODAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.CODAmount, input_name='CODAmount'), namespaceprefix_ , eol_))
        if self.CODCurrency is not None:
            namespaceprefix_ = self.CODCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.CODCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODCurrency>%s</%sCODCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODCurrency), input_name='CODCurrency')), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.instructions is not None:
            namespaceprefix_ = self.instructions_nsprefix_ + ':' if (UseCapturedNS_ and self.instructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructions>%s</%sinstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructions), input_name='instructions')), namespaceprefix_ , eol_))
        if self.pickupLocationId is not None:
            namespaceprefix_ = self.pickupLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupLocationId>%s</%spickupLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pickupLocationId), input_name='pickupLocationId')), namespaceprefix_ , eol_))
        if self.ftd is not None:
            namespaceprefix_ = self.ftd_nsprefix_ + ':' if (UseCapturedNS_ and self.ftd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sftd>%s</%sftd>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ftd, input_name='ftd'), namespaceprefix_ , eol_))
        if self.ddp is not None:
            namespaceprefix_ = self.ddp_nsprefix_ + ':' if (UseCapturedNS_ and self.ddp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sddp>%s</%sddp>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ddp, input_name='ddp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceAmount')
            self.insuranceAmount = ival_
            self.insuranceAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceValue')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceValue')
            self.insuranceValue = ival_
            self.insuranceValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'recommendationLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recommendationLevel')
            value_ = self.gds_validate_string(value_, node, 'recommendationLevel')
            self.recommendationLevel = value_
            self.recommendationLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'COD')
            ival_ = self.gds_validate_boolean(ival_, node, 'COD')
            self.COD = ival_
            self.COD_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CODAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'CODAmount')
            self.CODAmount = ival_
            self.CODAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODCurrency')
            value_ = self.gds_validate_string(value_, node, 'CODCurrency')
            self.CODCurrency = value_
            self.CODCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructions')
            value_ = self.gds_validate_string(value_, node, 'instructions')
            self.instructions = value_
            self.instructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pickupLocationId')
            value_ = self.gds_validate_string(value_, node, 'pickupLocationId')
            self.pickupLocationId = value_
            self.pickupLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ftd':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ftd')
            ival_ = self.gds_validate_boolean(ival_, node, 'ftd')
            self.ftd = ival_
            self.ftd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ddp':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ddp')
            ival_ = self.gds_validate_boolean(ival_, node, 'ddp')
            self.ddp = ival_
            self.ddp_nsprefix_ = child_.prefix
# end class parcelType


class customsDeclarationsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, includeCustomsDeclarations=None, contents=None, importersReference=None, importersContact=None, officeOrigin=None, comments=None, description=None, invoiceNumber=None, licenceNumber=None, certificatNumber=None, importerAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.includeCustomsDeclarations = includeCustomsDeclarations
        self.includeCustomsDeclarations_nsprefix_ = None
        self.contents = contents
        self.contents_nsprefix_ = None
        self.importersReference = importersReference
        self.importersReference_nsprefix_ = None
        self.importersContact = importersContact
        self.importersContact_nsprefix_ = None
        self.officeOrigin = officeOrigin
        self.officeOrigin_nsprefix_ = None
        self.comments = comments
        self.comments_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.invoiceNumber = invoiceNumber
        self.invoiceNumber_nsprefix_ = None
        self.licenceNumber = licenceNumber
        self.licenceNumber_nsprefix_ = None
        self.certificatNumber = certificatNumber
        self.certificatNumber_nsprefix_ = None
        self.importerAddress = importerAddress
        self.importerAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsDeclarationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsDeclarationsType.subclass:
            return customsDeclarationsType.subclass(*args_, **kwargs_)
        else:
            return customsDeclarationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_includeCustomsDeclarations(self):
        return self.includeCustomsDeclarations
    def set_includeCustomsDeclarations(self, includeCustomsDeclarations):
        self.includeCustomsDeclarations = includeCustomsDeclarations
    def get_contents(self):
        return self.contents
    def set_contents(self, contents):
        self.contents = contents
    def get_importersReference(self):
        return self.importersReference
    def set_importersReference(self, importersReference):
        self.importersReference = importersReference
    def get_importersContact(self):
        return self.importersContact
    def set_importersContact(self, importersContact):
        self.importersContact = importersContact
    def get_officeOrigin(self):
        return self.officeOrigin
    def set_officeOrigin(self, officeOrigin):
        self.officeOrigin = officeOrigin
    def get_comments(self):
        return self.comments
    def set_comments(self, comments):
        self.comments = comments
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_invoiceNumber(self):
        return self.invoiceNumber
    def set_invoiceNumber(self, invoiceNumber):
        self.invoiceNumber = invoiceNumber
    def get_licenceNumber(self):
        return self.licenceNumber
    def set_licenceNumber(self, licenceNumber):
        self.licenceNumber = licenceNumber
    def get_certificatNumber(self):
        return self.certificatNumber
    def set_certificatNumber(self, certificatNumber):
        self.certificatNumber = certificatNumber
    def get_importerAddress(self):
        return self.importerAddress
    def set_importerAddress(self, importerAddress):
        self.importerAddress = importerAddress
    def _hasContent(self):
        if (
            self.includeCustomsDeclarations is not None or
            self.contents is not None or
            self.importersReference is not None or
            self.importersContact is not None or
            self.officeOrigin is not None or
            self.comments is not None or
            self.description is not None or
            self.invoiceNumber is not None or
            self.licenceNumber is not None or
            self.certificatNumber is not None or
            self.importerAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsDeclarationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsDeclarationsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsDeclarationsType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsDeclarationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsDeclarationsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.includeCustomsDeclarations is not None:
            namespaceprefix_ = self.includeCustomsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.includeCustomsDeclarations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincludeCustomsDeclarations>%s</%sincludeCustomsDeclarations>%s' % (namespaceprefix_ , self.gds_format_boolean(self.includeCustomsDeclarations, input_name='includeCustomsDeclarations'), namespaceprefix_ , eol_))
        if self.contents is not None:
            namespaceprefix_ = self.contents_nsprefix_ + ':' if (UseCapturedNS_ and self.contents_nsprefix_) else ''
            self.contents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='contents', pretty_print=pretty_print)
        if self.importersReference is not None:
            namespaceprefix_ = self.importersReference_nsprefix_ + ':' if (UseCapturedNS_ and self.importersReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersReference>%s</%simportersReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersReference), input_name='importersReference')), namespaceprefix_ , eol_))
        if self.importersContact is not None:
            namespaceprefix_ = self.importersContact_nsprefix_ + ':' if (UseCapturedNS_ and self.importersContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersContact>%s</%simportersContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersContact), input_name='importersContact')), namespaceprefix_ , eol_))
        if self.officeOrigin is not None:
            namespaceprefix_ = self.officeOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.officeOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sofficeOrigin>%s</%sofficeOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.officeOrigin), input_name='officeOrigin')), namespaceprefix_ , eol_))
        if self.comments is not None:
            namespaceprefix_ = self.comments_nsprefix_ + ':' if (UseCapturedNS_ and self.comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomments>%s</%scomments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.invoiceNumber is not None:
            namespaceprefix_ = self.invoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.invoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinvoiceNumber>%s</%sinvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.invoiceNumber), input_name='invoiceNumber')), namespaceprefix_ , eol_))
        if self.licenceNumber is not None:
            namespaceprefix_ = self.licenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.licenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicenceNumber>%s</%slicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.licenceNumber), input_name='licenceNumber')), namespaceprefix_ , eol_))
        if self.certificatNumber is not None:
            namespaceprefix_ = self.certificatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.certificatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scertificatNumber>%s</%scertificatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.certificatNumber), input_name='certificatNumber')), namespaceprefix_ , eol_))
        if self.importerAddress is not None:
            namespaceprefix_ = self.importerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.importerAddress_nsprefix_) else ''
            self.importerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='importerAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'includeCustomsDeclarations':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'includeCustomsDeclarations')
            ival_ = self.gds_validate_boolean(ival_, node, 'includeCustomsDeclarations')
            self.includeCustomsDeclarations = ival_
            self.includeCustomsDeclarations_nsprefix_ = child_.prefix
        elif nodeName_ == 'contents':
            obj_ = contentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.contents = obj_
            obj_.original_tagname_ = 'contents'
        elif nodeName_ == 'importersReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersReference')
            value_ = self.gds_validate_string(value_, node, 'importersReference')
            self.importersReference = value_
            self.importersReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'importersContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersContact')
            value_ = self.gds_validate_string(value_, node, 'importersContact')
            self.importersContact = value_
            self.importersContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'officeOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'officeOrigin')
            value_ = self.gds_validate_string(value_, node, 'officeOrigin')
            self.officeOrigin = value_
            self.officeOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comments')
            value_ = self.gds_validate_string(value_, node, 'comments')
            self.comments = value_
            self.comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'invoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'invoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'invoiceNumber')
            self.invoiceNumber = value_
            self.invoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'licenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'licenceNumber')
            value_ = self.gds_validate_string(value_, node, 'licenceNumber')
            self.licenceNumber = value_
            self.licenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'certificatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'certificatNumber')
            value_ = self.gds_validate_string(value_, node, 'certificatNumber')
            self.certificatNumber = value_
            self.certificatNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'importerAddress':
            obj_ = importerAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.importerAddress = obj_
            obj_.original_tagname_ = 'importerAddress'
# end class customsDeclarationsType


class contentsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, article=None, category=None, original=None, explanations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if article is None:
            self.article = []
        else:
            self.article = article
        self.article_nsprefix_ = None
        self.category = category
        self.category_nsprefix_ = None
        if original is None:
            self.original = []
        else:
            self.original = original
        self.original_nsprefix_ = None
        self.explanations = explanations
        self.explanations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contentsType.subclass:
            return contentsType.subclass(*args_, **kwargs_)
        else:
            return contentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_article(self):
        return self.article
    def set_article(self, article):
        self.article = article
    def add_article(self, value):
        self.article.append(value)
    def insert_article_at(self, index, value):
        self.article.insert(index, value)
    def replace_article_at(self, index, value):
        self.article[index] = value
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_original(self):
        return self.original
    def set_original(self, original):
        self.original = original
    def add_original(self, value):
        self.original.append(value)
    def insert_original_at(self, index, value):
        self.original.insert(index, value)
    def replace_original_at(self, index, value):
        self.original[index] = value
    def get_explanations(self):
        return self.explanations
    def set_explanations(self, explanations):
        self.explanations = explanations
    def _hasContent(self):
        if (
            self.article or
            self.category is not None or
            self.original or
            self.explanations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'contentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='contentsType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='contentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='contentsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for article_ in self.article:
            namespaceprefix_ = self.article_nsprefix_ + ':' if (UseCapturedNS_ and self.article_nsprefix_) else ''
            article_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='article', pretty_print=pretty_print)
        if self.category is not None:
            namespaceprefix_ = self.category_nsprefix_ + ':' if (UseCapturedNS_ and self.category_nsprefix_) else ''
            self.category.export(outfile, level, namespaceprefix_, namespacedef_='', name_='category', pretty_print=pretty_print)
        for original_ in self.original:
            namespaceprefix_ = self.original_nsprefix_ + ':' if (UseCapturedNS_ and self.original_nsprefix_) else ''
            original_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='original', pretty_print=pretty_print)
        if self.explanations is not None:
            namespaceprefix_ = self.explanations_nsprefix_ + ':' if (UseCapturedNS_ and self.explanations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexplanations>%s</%sexplanations>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.explanations), input_name='explanations')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'article':
            obj_ = articleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.article.append(obj_)
            obj_.original_tagname_ = 'article'
        elif nodeName_ == 'category':
            obj_ = categoryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.category = obj_
            obj_.original_tagname_ = 'category'
        elif nodeName_ == 'original':
            obj_ = originalType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.original.append(obj_)
            obj_.original_tagname_ = 'original'
        elif nodeName_ == 'explanations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'explanations')
            value_ = self.gds_validate_string(value_, node, 'explanations')
            self.explanations = value_
            self.explanations_nsprefix_ = child_.prefix
# end class contentsType


class articleType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, description=None, quantity=None, weight=None, value=None, hsCode=None, originCountry=None, currency=None, artref=None, originalIdent=None, vatAmount=None, customsFees=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.hsCode = hsCode
        self.hsCode_nsprefix_ = None
        self.originCountry = originCountry
        self.originCountry_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.artref = artref
        self.artref_nsprefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.customsFees = customsFees
        self.customsFees_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleType.subclass:
            return articleType.subclass(*args_, **kwargs_)
        else:
            return articleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_hsCode(self):
        return self.hsCode
    def set_hsCode(self, hsCode):
        self.hsCode = hsCode
    def get_originCountry(self):
        return self.originCountry
    def set_originCountry(self, originCountry):
        self.originCountry = originCountry
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_artref(self):
        return self.artref
    def set_artref(self, artref):
        self.artref = artref
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_customsFees(self):
        return self.customsFees
    def set_customsFees(self, customsFees):
        self.customsFees = customsFees
    def _hasContent(self):
        if (
            self.description is not None or
            self.quantity is not None or
            self.weight is not None or
            self.value is not None or
            self.hsCode is not None or
            self.originCountry is not None or
            self.currency is not None or
            self.artref is not None or
            self.originalIdent is not None or
            self.vatAmount is not None or
            self.customsFees is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.hsCode is not None:
            namespaceprefix_ = self.hsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.hsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shsCode>%s</%shsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hsCode), input_name='hsCode')), namespaceprefix_ , eol_))
        if self.originCountry is not None:
            namespaceprefix_ = self.originCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.originCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginCountry>%s</%soriginCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originCountry), input_name='originCountry')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.artref is not None:
            namespaceprefix_ = self.artref_nsprefix_ + ':' if (UseCapturedNS_ and self.artref_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartref>%s</%sartref>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.artref), input_name='artref')), namespaceprefix_ , eol_))
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_float(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.customsFees is not None:
            namespaceprefix_ = self.customsFees_nsprefix_ + ':' if (UseCapturedNS_ and self.customsFees_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsFees>%s</%scustomsFees>%s' % (namespaceprefix_ , self.gds_format_float(self.customsFees, input_name='customsFees'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'hsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hsCode')
            value_ = self.gds_validate_string(value_, node, 'hsCode')
            self.hsCode = value_
            self.hsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'originCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originCountry')
            value_ = self.gds_validate_string(value_, node, 'originCountry')
            self.originCountry = value_
            self.originCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'artref':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'artref')
            value_ = self.gds_validate_string(value_, node, 'artref')
            self.artref = value_
            self.artref_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'vatAmount')
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsFees' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsFees')
            fval_ = self.gds_validate_float(fval_, node, 'customsFees')
            self.customsFees = fval_
            self.customsFees_nsprefix_ = child_.prefix
# end class articleType


class categoryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType.subclass:
            return categoryType.subclass(*args_, **kwargs_)
        else:
            return categoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'categoryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='categoryType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='categoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='categoryType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_integer(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'value')
            ival_ = self.gds_validate_integer(ival_, node, 'value')
            self.value = ival_
            self.value_nsprefix_ = child_.prefix
# end class categoryType


class originalType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, originalIdent=None, originalInvoiceNumber=None, originalInvoiceDate=None, originalParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.originalInvoiceNumber = originalInvoiceNumber
        self.originalInvoiceNumber_nsprefix_ = None
        if isinstance(originalInvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(originalInvoiceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = originalInvoiceDate
        self.originalInvoiceDate = initvalue_
        self.originalInvoiceDate_nsprefix_ = None
        self.originalParcelNumber = originalParcelNumber
        self.originalParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, originalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if originalType.subclass:
            return originalType.subclass(*args_, **kwargs_)
        else:
            return originalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_originalInvoiceNumber(self):
        return self.originalInvoiceNumber
    def set_originalInvoiceNumber(self, originalInvoiceNumber):
        self.originalInvoiceNumber = originalInvoiceNumber
    def get_originalInvoiceDate(self):
        return self.originalInvoiceDate
    def set_originalInvoiceDate(self, originalInvoiceDate):
        self.originalInvoiceDate = originalInvoiceDate
    def get_originalParcelNumber(self):
        return self.originalParcelNumber
    def set_originalParcelNumber(self, originalParcelNumber):
        self.originalParcelNumber = originalParcelNumber
    def _hasContent(self):
        if (
            self.originalIdent is not None or
            self.originalInvoiceNumber is not None or
            self.originalInvoiceDate is not None or
            self.originalParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('originalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'originalType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='originalType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='originalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='originalType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.originalInvoiceNumber is not None:
            namespaceprefix_ = self.originalInvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceNumber>%s</%soriginalInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalInvoiceNumber), input_name='originalInvoiceNumber')), namespaceprefix_ , eol_))
        if self.originalInvoiceDate is not None:
            namespaceprefix_ = self.originalInvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceDate>%s</%soriginalInvoiceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.originalInvoiceDate, input_name='originalInvoiceDate'), namespaceprefix_ , eol_))
        if self.originalParcelNumber is not None:
            namespaceprefix_ = self.originalParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalParcelNumber>%s</%soriginalParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalParcelNumber), input_name='originalParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalInvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'originalInvoiceNumber')
            self.originalInvoiceNumber = value_
            self.originalInvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.originalInvoiceDate = dval_
            self.originalInvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'originalParcelNumber')
            self.originalParcelNumber = value_
            self.originalParcelNumber_nsprefix_ = child_.prefix
# end class originalType


class importerAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, importerAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if importerAddressType.subclass:
            return importerAddressType.subclass(*args_, **kwargs_)
        else:
            return importerAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('importerAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'importerAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='importerAddressType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='importerAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='importerAddressType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class importerAddressType


class senderType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType.subclass:
            return senderType.subclass(*args_, **kwargs_)
        else:
            return senderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType


class addressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType.subclass:
            return addressType.subclass(*args_, **kwargs_)
        else:
            return addressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType


class addresseeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType.subclass:
            return addresseeType.subclass(*args_, **kwargs_)
        else:
            return addresseeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType


class addressType1(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType1.subclass:
            return addressType1.subclass(*args_, **kwargs_)
        else:
            return addressType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType1')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType1'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType1


class codSenderAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codSenderAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codSenderAddressType.subclass:
            return codSenderAddressType.subclass(*args_, **kwargs_)
        else:
            return codSenderAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codSenderAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codSenderAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codSenderAddressType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codSenderAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codSenderAddressType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class codSenderAddressType


class uploadDocumentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, documentContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.documentContent = documentContent
        self.documentContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uploadDocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uploadDocumentType.subclass:
            return uploadDocumentType.subclass(*args_, **kwargs_)
        else:
            return uploadDocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_documentContent(self):
        return self.documentContent
    def set_documentContent(self, documentContent):
        self.documentContent = documentContent
    def _hasContent(self):
        if (
            self.documentContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uploadDocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uploadDocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uploadDocumentType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uploadDocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uploadDocumentType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.documentContent is not None:
            namespaceprefix_ = self.documentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.documentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentContent>%s</%sdocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.documentContent, input_name='documentContent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'documentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'documentContent')
            else:
                bval_ = None
            self.documentContent = bval_
            self.documentContent_nsprefix_ = child_.prefix
# end class uploadDocumentType


class fieldsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType.subclass:
            return fieldsType.subclass(*args_, **kwargs_)
        else:
            return fieldsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType


class fieldType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType.subclass:
            return fieldType.subclass(*args_, **kwargs_)
        else:
            return fieldType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType


class letterType2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, service=None, parcel=None, customsDeclarations=None, sender=None, addressee=None, codSenderAddress=None, uploadDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.parcel = parcel
        self.parcel_nsprefix_ = None
        self.customsDeclarations = customsDeclarations
        self.customsDeclarations_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.codSenderAddress = codSenderAddress
        self.codSenderAddress_nsprefix_ = None
        self.uploadDocument = uploadDocument
        self.uploadDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, letterType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if letterType2.subclass:
            return letterType2.subclass(*args_, **kwargs_)
        else:
            return letterType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_parcel(self):
        return self.parcel
    def set_parcel(self, parcel):
        self.parcel = parcel
    def get_customsDeclarations(self):
        return self.customsDeclarations
    def set_customsDeclarations(self, customsDeclarations):
        self.customsDeclarations = customsDeclarations
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_codSenderAddress(self):
        return self.codSenderAddress
    def set_codSenderAddress(self, codSenderAddress):
        self.codSenderAddress = codSenderAddress
    def get_uploadDocument(self):
        return self.uploadDocument
    def set_uploadDocument(self, uploadDocument):
        self.uploadDocument = uploadDocument
    def _hasContent(self):
        if (
            self.service is not None or
            self.parcel is not None or
            self.customsDeclarations is not None or
            self.sender is not None or
            self.addressee is not None or
            self.codSenderAddress is not None or
            self.uploadDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('letterType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'letterType2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='letterType2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='letterType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='letterType2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            self.service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='service', pretty_print=pretty_print)
        if self.parcel is not None:
            namespaceprefix_ = self.parcel_nsprefix_ + ':' if (UseCapturedNS_ and self.parcel_nsprefix_) else ''
            self.parcel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parcel', pretty_print=pretty_print)
        if self.customsDeclarations is not None:
            namespaceprefix_ = self.customsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.customsDeclarations_nsprefix_) else ''
            self.customsDeclarations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsDeclarations', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.codSenderAddress is not None:
            namespaceprefix_ = self.codSenderAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.codSenderAddress_nsprefix_) else ''
            self.codSenderAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codSenderAddress', pretty_print=pretty_print)
        if self.uploadDocument is not None:
            namespaceprefix_ = self.uploadDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.uploadDocument_nsprefix_) else ''
            self.uploadDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uploadDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'service':
            obj_ = serviceType3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.service = obj_
            obj_.original_tagname_ = 'service'
        elif nodeName_ == 'parcel':
            obj_ = parcelType4.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.parcel = obj_
            obj_.original_tagname_ = 'parcel'
        elif nodeName_ == 'customsDeclarations':
            obj_ = customsDeclarationsType5.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsDeclarations = obj_
            obj_.original_tagname_ = 'customsDeclarations'
        elif nodeName_ == 'sender':
            obj_ = senderType11.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'addressee':
            obj_ = addresseeType13.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'codSenderAddress':
            obj_ = codSenderAddressType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codSenderAddress = obj_
            obj_.original_tagname_ = 'codSenderAddress'
        elif nodeName_ == 'uploadDocument':
            obj_ = uploadDocumentType16.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uploadDocument = obj_
            obj_.original_tagname_ = 'uploadDocument'
# end class letterType2


class serviceType3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, productCode=None, depositDate=None, mailBoxPicking=None, mailBoxPickingDate=None, vatCode=None, vatPercentage=None, vatAmount=None, transportationAmount=None, totalAmount=None, orderNumber=None, commercialName=None, returnTypeChoice=None, reseauPostal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        if isinstance(depositDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(depositDate, '%Y-%m-%d').date()
        else:
            initvalue_ = depositDate
        self.depositDate = initvalue_
        self.depositDate_nsprefix_ = None
        self.mailBoxPicking = mailBoxPicking
        self.mailBoxPicking_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.vatCode = vatCode
        self.vatCode_nsprefix_ = None
        self.vatPercentage = vatPercentage
        self.vatPercentage_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.transportationAmount = transportationAmount
        self.transportationAmount_nsprefix_ = None
        self.totalAmount = totalAmount
        self.totalAmount_nsprefix_ = None
        self.orderNumber = orderNumber
        self.orderNumber_nsprefix_ = None
        self.commercialName = commercialName
        self.commercialName_nsprefix_ = None
        self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
        self.reseauPostal = reseauPostal
        self.reseauPostal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType3.subclass:
            return serviceType3.subclass(*args_, **kwargs_)
        else:
            return serviceType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_depositDate(self):
        return self.depositDate
    def set_depositDate(self, depositDate):
        self.depositDate = depositDate
    def get_mailBoxPicking(self):
        return self.mailBoxPicking
    def set_mailBoxPicking(self, mailBoxPicking):
        self.mailBoxPicking = mailBoxPicking
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_vatCode(self):
        return self.vatCode
    def set_vatCode(self, vatCode):
        self.vatCode = vatCode
    def get_vatPercentage(self):
        return self.vatPercentage
    def set_vatPercentage(self, vatPercentage):
        self.vatPercentage = vatPercentage
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_transportationAmount(self):
        return self.transportationAmount
    def set_transportationAmount(self, transportationAmount):
        self.transportationAmount = transportationAmount
    def get_totalAmount(self):
        return self.totalAmount
    def set_totalAmount(self, totalAmount):
        self.totalAmount = totalAmount
    def get_orderNumber(self):
        return self.orderNumber
    def set_orderNumber(self, orderNumber):
        self.orderNumber = orderNumber
    def get_commercialName(self):
        return self.commercialName
    def set_commercialName(self, commercialName):
        self.commercialName = commercialName
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def get_reseauPostal(self):
        return self.reseauPostal
    def set_reseauPostal(self, reseauPostal):
        self.reseauPostal = reseauPostal
    def _hasContent(self):
        if (
            self.productCode is not None or
            self.depositDate is not None or
            self.mailBoxPicking is not None or
            self.mailBoxPickingDate is not None or
            self.vatCode is not None or
            self.vatPercentage is not None or
            self.vatAmount is not None or
            self.transportationAmount is not None or
            self.totalAmount is not None or
            self.orderNumber is not None or
            self.commercialName is not None or
            self.returnTypeChoice is not None or
            self.reseauPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'serviceType3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='serviceType3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='serviceType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='serviceType3'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.depositDate is not None:
            namespaceprefix_ = self.depositDate_nsprefix_ + ':' if (UseCapturedNS_ and self.depositDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepositDate>%s</%sdepositDate>%s' % (namespaceprefix_ , self.gds_format_date(self.depositDate, input_name='depositDate'), namespaceprefix_ , eol_))
        if self.mailBoxPicking is not None:
            namespaceprefix_ = self.mailBoxPicking_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPicking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPicking>%s</%smailBoxPicking>%s' % (namespaceprefix_ , self.gds_format_boolean(self.mailBoxPicking, input_name='mailBoxPicking'), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.vatCode is not None:
            namespaceprefix_ = self.vatCode_nsprefix_ + ':' if (UseCapturedNS_ and self.vatCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatCode>%s</%svatCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatCode, input_name='vatCode'), namespaceprefix_ , eol_))
        if self.vatPercentage is not None:
            namespaceprefix_ = self.vatPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.vatPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatPercentage>%s</%svatPercentage>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatPercentage, input_name='vatPercentage'), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.transportationAmount is not None:
            namespaceprefix_ = self.transportationAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.transportationAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransportationAmount>%s</%stransportationAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.transportationAmount, input_name='transportationAmount'), namespaceprefix_ , eol_))
        if self.totalAmount is not None:
            namespaceprefix_ = self.totalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.totalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalAmount>%s</%stotalAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.totalAmount, input_name='totalAmount'), namespaceprefix_ , eol_))
        if self.orderNumber is not None:
            namespaceprefix_ = self.orderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.orderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorderNumber>%s</%sorderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orderNumber), input_name='orderNumber')), namespaceprefix_ , eol_))
        if self.commercialName is not None:
            namespaceprefix_ = self.commercialName_nsprefix_ + ':' if (UseCapturedNS_ and self.commercialName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommercialName>%s</%scommercialName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.commercialName), input_name='commercialName')), namespaceprefix_ , eol_))
        if self.returnTypeChoice is not None:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.returnTypeChoice, input_name='returnTypeChoice'), namespaceprefix_ , eol_))
        if self.reseauPostal is not None:
            namespaceprefix_ = self.reseauPostal_nsprefix_ + ':' if (UseCapturedNS_ and self.reseauPostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreseauPostal>%s</%sreseauPostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reseauPostal), input_name='reseauPostal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'depositDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.depositDate = dval_
            self.depositDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPicking':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'mailBoxPicking')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailBoxPicking')
            self.mailBoxPicking = ival_
            self.mailBoxPicking_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatCode')
            ival_ = self.gds_validate_integer(ival_, node, 'vatCode')
            self.vatCode = ival_
            self.vatCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatPercentage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatPercentage')
            ival_ = self.gds_validate_integer(ival_, node, 'vatPercentage')
            self.vatPercentage = ival_
            self.vatPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'vatAmount')
            self.vatAmount = ival_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'transportationAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'transportationAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'transportationAmount')
            self.transportationAmount = ival_
            self.transportationAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'totalAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'totalAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'totalAmount')
            self.totalAmount = ival_
            self.totalAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'orderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orderNumber')
            value_ = self.gds_validate_string(value_, node, 'orderNumber')
            self.orderNumber = value_
            self.orderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'commercialName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'commercialName')
            value_ = self.gds_validate_string(value_, node, 'commercialName')
            self.commercialName = value_
            self.commercialName_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'returnTypeChoice')
            ival_ = self.gds_validate_integer(ival_, node, 'returnTypeChoice')
            self.returnTypeChoice = ival_
            self.returnTypeChoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'reseauPostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reseauPostal')
            value_ = self.gds_validate_string(value_, node, 'reseauPostal')
            self.reseauPostal = value_
            self.reseauPostal_nsprefix_ = child_.prefix
# end class serviceType3


class parcelType4(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelNumber=None, insuranceAmount=None, insuranceValue=None, recommendationLevel=None, weight=None, nonMachinable=None, COD=None, CODAmount=None, CODCurrency=None, returnReceipt=None, instructions=None, pickupLocationId=None, ftd=None, ddp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.insuranceAmount = insuranceAmount
        self.insuranceAmount_nsprefix_ = None
        self.insuranceValue = insuranceValue
        self.insuranceValue_nsprefix_ = None
        self.recommendationLevel = recommendationLevel
        self.recommendationLevel_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
        self.CODCurrency = CODCurrency
        self.CODCurrency_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.instructions = instructions
        self.instructions_nsprefix_ = None
        self.pickupLocationId = pickupLocationId
        self.pickupLocationId_nsprefix_ = None
        self.ftd = ftd
        self.ftd_nsprefix_ = None
        self.ddp = ddp
        self.ddp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parcelType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parcelType4.subclass:
            return parcelType4.subclass(*args_, **kwargs_)
        else:
            return parcelType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_insuranceAmount(self):
        return self.insuranceAmount
    def set_insuranceAmount(self, insuranceAmount):
        self.insuranceAmount = insuranceAmount
    def get_insuranceValue(self):
        return self.insuranceValue
    def set_insuranceValue(self, insuranceValue):
        self.insuranceValue = insuranceValue
    def get_recommendationLevel(self):
        return self.recommendationLevel
    def set_recommendationLevel(self, recommendationLevel):
        self.recommendationLevel = recommendationLevel
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def get_CODCurrency(self):
        return self.CODCurrency
    def set_CODCurrency(self, CODCurrency):
        self.CODCurrency = CODCurrency
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_instructions(self):
        return self.instructions
    def set_instructions(self, instructions):
        self.instructions = instructions
    def get_pickupLocationId(self):
        return self.pickupLocationId
    def set_pickupLocationId(self, pickupLocationId):
        self.pickupLocationId = pickupLocationId
    def get_ftd(self):
        return self.ftd
    def set_ftd(self, ftd):
        self.ftd = ftd
    def get_ddp(self):
        return self.ddp
    def set_ddp(self, ddp):
        self.ddp = ddp
    def _hasContent(self):
        if (
            self.parcelNumber is not None or
            self.insuranceAmount is not None or
            self.insuranceValue is not None or
            self.recommendationLevel is not None or
            self.weight is not None or
            self.nonMachinable is not None or
            self.COD is not None or
            self.CODAmount is not None or
            self.CODCurrency is not None or
            self.returnReceipt is not None or
            self.instructions is not None or
            self.pickupLocationId is not None or
            self.ftd is not None or
            self.ddp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parcelType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'parcelType4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='parcelType4')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='parcelType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='parcelType4'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.insuranceAmount is not None:
            namespaceprefix_ = self.insuranceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceAmount>%s</%sinsuranceAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceAmount, input_name='insuranceAmount'), namespaceprefix_ , eol_))
        if self.insuranceValue is not None:
            namespaceprefix_ = self.insuranceValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceValue>%s</%sinsuranceValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceValue, input_name='insuranceValue'), namespaceprefix_ , eol_))
        if self.recommendationLevel is not None:
            namespaceprefix_ = self.recommendationLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.recommendationLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecommendationLevel>%s</%srecommendationLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recommendationLevel), input_name='recommendationLevel')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOD>%s</%sCOD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.COD, input_name='COD'), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODAmount>%s</%sCODAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.CODAmount, input_name='CODAmount'), namespaceprefix_ , eol_))
        if self.CODCurrency is not None:
            namespaceprefix_ = self.CODCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.CODCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODCurrency>%s</%sCODCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODCurrency), input_name='CODCurrency')), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.instructions is not None:
            namespaceprefix_ = self.instructions_nsprefix_ + ':' if (UseCapturedNS_ and self.instructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructions>%s</%sinstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructions), input_name='instructions')), namespaceprefix_ , eol_))
        if self.pickupLocationId is not None:
            namespaceprefix_ = self.pickupLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupLocationId>%s</%spickupLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pickupLocationId), input_name='pickupLocationId')), namespaceprefix_ , eol_))
        if self.ftd is not None:
            namespaceprefix_ = self.ftd_nsprefix_ + ':' if (UseCapturedNS_ and self.ftd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sftd>%s</%sftd>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ftd, input_name='ftd'), namespaceprefix_ , eol_))
        if self.ddp is not None:
            namespaceprefix_ = self.ddp_nsprefix_ + ':' if (UseCapturedNS_ and self.ddp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sddp>%s</%sddp>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ddp, input_name='ddp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceAmount')
            self.insuranceAmount = ival_
            self.insuranceAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceValue')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceValue')
            self.insuranceValue = ival_
            self.insuranceValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'recommendationLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recommendationLevel')
            value_ = self.gds_validate_string(value_, node, 'recommendationLevel')
            self.recommendationLevel = value_
            self.recommendationLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'COD')
            ival_ = self.gds_validate_boolean(ival_, node, 'COD')
            self.COD = ival_
            self.COD_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CODAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'CODAmount')
            self.CODAmount = ival_
            self.CODAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODCurrency')
            value_ = self.gds_validate_string(value_, node, 'CODCurrency')
            self.CODCurrency = value_
            self.CODCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructions')
            value_ = self.gds_validate_string(value_, node, 'instructions')
            self.instructions = value_
            self.instructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pickupLocationId')
            value_ = self.gds_validate_string(value_, node, 'pickupLocationId')
            self.pickupLocationId = value_
            self.pickupLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ftd':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ftd')
            ival_ = self.gds_validate_boolean(ival_, node, 'ftd')
            self.ftd = ival_
            self.ftd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ddp':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ddp')
            ival_ = self.gds_validate_boolean(ival_, node, 'ddp')
            self.ddp = ival_
            self.ddp_nsprefix_ = child_.prefix
# end class parcelType4


class customsDeclarationsType5(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, includeCustomsDeclarations=None, contents=None, importersReference=None, importersContact=None, officeOrigin=None, comments=None, description=None, invoiceNumber=None, licenceNumber=None, certificatNumber=None, importerAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.includeCustomsDeclarations = includeCustomsDeclarations
        self.includeCustomsDeclarations_nsprefix_ = None
        self.contents = contents
        self.contents_nsprefix_ = None
        self.importersReference = importersReference
        self.importersReference_nsprefix_ = None
        self.importersContact = importersContact
        self.importersContact_nsprefix_ = None
        self.officeOrigin = officeOrigin
        self.officeOrigin_nsprefix_ = None
        self.comments = comments
        self.comments_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.invoiceNumber = invoiceNumber
        self.invoiceNumber_nsprefix_ = None
        self.licenceNumber = licenceNumber
        self.licenceNumber_nsprefix_ = None
        self.certificatNumber = certificatNumber
        self.certificatNumber_nsprefix_ = None
        self.importerAddress = importerAddress
        self.importerAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsDeclarationsType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsDeclarationsType5.subclass:
            return customsDeclarationsType5.subclass(*args_, **kwargs_)
        else:
            return customsDeclarationsType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_includeCustomsDeclarations(self):
        return self.includeCustomsDeclarations
    def set_includeCustomsDeclarations(self, includeCustomsDeclarations):
        self.includeCustomsDeclarations = includeCustomsDeclarations
    def get_contents(self):
        return self.contents
    def set_contents(self, contents):
        self.contents = contents
    def get_importersReference(self):
        return self.importersReference
    def set_importersReference(self, importersReference):
        self.importersReference = importersReference
    def get_importersContact(self):
        return self.importersContact
    def set_importersContact(self, importersContact):
        self.importersContact = importersContact
    def get_officeOrigin(self):
        return self.officeOrigin
    def set_officeOrigin(self, officeOrigin):
        self.officeOrigin = officeOrigin
    def get_comments(self):
        return self.comments
    def set_comments(self, comments):
        self.comments = comments
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_invoiceNumber(self):
        return self.invoiceNumber
    def set_invoiceNumber(self, invoiceNumber):
        self.invoiceNumber = invoiceNumber
    def get_licenceNumber(self):
        return self.licenceNumber
    def set_licenceNumber(self, licenceNumber):
        self.licenceNumber = licenceNumber
    def get_certificatNumber(self):
        return self.certificatNumber
    def set_certificatNumber(self, certificatNumber):
        self.certificatNumber = certificatNumber
    def get_importerAddress(self):
        return self.importerAddress
    def set_importerAddress(self, importerAddress):
        self.importerAddress = importerAddress
    def _hasContent(self):
        if (
            self.includeCustomsDeclarations is not None or
            self.contents is not None or
            self.importersReference is not None or
            self.importersContact is not None or
            self.officeOrigin is not None or
            self.comments is not None or
            self.description is not None or
            self.invoiceNumber is not None or
            self.licenceNumber is not None or
            self.certificatNumber is not None or
            self.importerAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType5', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsDeclarationsType5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsDeclarationsType5':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsDeclarationsType5')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsDeclarationsType5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsDeclarationsType5'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.includeCustomsDeclarations is not None:
            namespaceprefix_ = self.includeCustomsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.includeCustomsDeclarations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincludeCustomsDeclarations>%s</%sincludeCustomsDeclarations>%s' % (namespaceprefix_ , self.gds_format_boolean(self.includeCustomsDeclarations, input_name='includeCustomsDeclarations'), namespaceprefix_ , eol_))
        if self.contents is not None:
            namespaceprefix_ = self.contents_nsprefix_ + ':' if (UseCapturedNS_ and self.contents_nsprefix_) else ''
            self.contents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='contents', pretty_print=pretty_print)
        if self.importersReference is not None:
            namespaceprefix_ = self.importersReference_nsprefix_ + ':' if (UseCapturedNS_ and self.importersReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersReference>%s</%simportersReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersReference), input_name='importersReference')), namespaceprefix_ , eol_))
        if self.importersContact is not None:
            namespaceprefix_ = self.importersContact_nsprefix_ + ':' if (UseCapturedNS_ and self.importersContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersContact>%s</%simportersContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersContact), input_name='importersContact')), namespaceprefix_ , eol_))
        if self.officeOrigin is not None:
            namespaceprefix_ = self.officeOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.officeOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sofficeOrigin>%s</%sofficeOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.officeOrigin), input_name='officeOrigin')), namespaceprefix_ , eol_))
        if self.comments is not None:
            namespaceprefix_ = self.comments_nsprefix_ + ':' if (UseCapturedNS_ and self.comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomments>%s</%scomments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.invoiceNumber is not None:
            namespaceprefix_ = self.invoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.invoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinvoiceNumber>%s</%sinvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.invoiceNumber), input_name='invoiceNumber')), namespaceprefix_ , eol_))
        if self.licenceNumber is not None:
            namespaceprefix_ = self.licenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.licenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicenceNumber>%s</%slicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.licenceNumber), input_name='licenceNumber')), namespaceprefix_ , eol_))
        if self.certificatNumber is not None:
            namespaceprefix_ = self.certificatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.certificatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scertificatNumber>%s</%scertificatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.certificatNumber), input_name='certificatNumber')), namespaceprefix_ , eol_))
        if self.importerAddress is not None:
            namespaceprefix_ = self.importerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.importerAddress_nsprefix_) else ''
            self.importerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='importerAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'includeCustomsDeclarations':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'includeCustomsDeclarations')
            ival_ = self.gds_validate_boolean(ival_, node, 'includeCustomsDeclarations')
            self.includeCustomsDeclarations = ival_
            self.includeCustomsDeclarations_nsprefix_ = child_.prefix
        elif nodeName_ == 'contents':
            obj_ = contentsType6.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.contents = obj_
            obj_.original_tagname_ = 'contents'
        elif nodeName_ == 'importersReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersReference')
            value_ = self.gds_validate_string(value_, node, 'importersReference')
            self.importersReference = value_
            self.importersReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'importersContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersContact')
            value_ = self.gds_validate_string(value_, node, 'importersContact')
            self.importersContact = value_
            self.importersContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'officeOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'officeOrigin')
            value_ = self.gds_validate_string(value_, node, 'officeOrigin')
            self.officeOrigin = value_
            self.officeOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comments')
            value_ = self.gds_validate_string(value_, node, 'comments')
            self.comments = value_
            self.comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'invoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'invoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'invoiceNumber')
            self.invoiceNumber = value_
            self.invoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'licenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'licenceNumber')
            value_ = self.gds_validate_string(value_, node, 'licenceNumber')
            self.licenceNumber = value_
            self.licenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'certificatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'certificatNumber')
            value_ = self.gds_validate_string(value_, node, 'certificatNumber')
            self.certificatNumber = value_
            self.certificatNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'importerAddress':
            obj_ = importerAddressType10.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.importerAddress = obj_
            obj_.original_tagname_ = 'importerAddress'
# end class customsDeclarationsType5


class contentsType6(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, article=None, category=None, original=None, explanations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if article is None:
            self.article = []
        else:
            self.article = article
        self.article_nsprefix_ = None
        self.category = category
        self.category_nsprefix_ = None
        if original is None:
            self.original = []
        else:
            self.original = original
        self.original_nsprefix_ = None
        self.explanations = explanations
        self.explanations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contentsType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contentsType6.subclass:
            return contentsType6.subclass(*args_, **kwargs_)
        else:
            return contentsType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_article(self):
        return self.article
    def set_article(self, article):
        self.article = article
    def add_article(self, value):
        self.article.append(value)
    def insert_article_at(self, index, value):
        self.article.insert(index, value)
    def replace_article_at(self, index, value):
        self.article[index] = value
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_original(self):
        return self.original
    def set_original(self, original):
        self.original = original
    def add_original(self, value):
        self.original.append(value)
    def insert_original_at(self, index, value):
        self.original.insert(index, value)
    def replace_original_at(self, index, value):
        self.original[index] = value
    def get_explanations(self):
        return self.explanations
    def set_explanations(self, explanations):
        self.explanations = explanations
    def _hasContent(self):
        if (
            self.article or
            self.category is not None or
            self.original or
            self.explanations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType6', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contentsType6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'contentsType6':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='contentsType6')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='contentsType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='contentsType6'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for article_ in self.article:
            namespaceprefix_ = self.article_nsprefix_ + ':' if (UseCapturedNS_ and self.article_nsprefix_) else ''
            article_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='article', pretty_print=pretty_print)
        if self.category is not None:
            namespaceprefix_ = self.category_nsprefix_ + ':' if (UseCapturedNS_ and self.category_nsprefix_) else ''
            self.category.export(outfile, level, namespaceprefix_, namespacedef_='', name_='category', pretty_print=pretty_print)
        for original_ in self.original:
            namespaceprefix_ = self.original_nsprefix_ + ':' if (UseCapturedNS_ and self.original_nsprefix_) else ''
            original_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='original', pretty_print=pretty_print)
        if self.explanations is not None:
            namespaceprefix_ = self.explanations_nsprefix_ + ':' if (UseCapturedNS_ and self.explanations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexplanations>%s</%sexplanations>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.explanations), input_name='explanations')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'article':
            obj_ = articleType7.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.article.append(obj_)
            obj_.original_tagname_ = 'article'
        elif nodeName_ == 'category':
            obj_ = categoryType8.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.category = obj_
            obj_.original_tagname_ = 'category'
        elif nodeName_ == 'original':
            obj_ = originalType9.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.original.append(obj_)
            obj_.original_tagname_ = 'original'
        elif nodeName_ == 'explanations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'explanations')
            value_ = self.gds_validate_string(value_, node, 'explanations')
            self.explanations = value_
            self.explanations_nsprefix_ = child_.prefix
# end class contentsType6


class articleType7(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, description=None, quantity=None, weight=None, value=None, hsCode=None, originCountry=None, currency=None, artref=None, originalIdent=None, vatAmount=None, customsFees=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.hsCode = hsCode
        self.hsCode_nsprefix_ = None
        self.originCountry = originCountry
        self.originCountry_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.artref = artref
        self.artref_nsprefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.customsFees = customsFees
        self.customsFees_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleType7.subclass:
            return articleType7.subclass(*args_, **kwargs_)
        else:
            return articleType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_hsCode(self):
        return self.hsCode
    def set_hsCode(self, hsCode):
        self.hsCode = hsCode
    def get_originCountry(self):
        return self.originCountry
    def set_originCountry(self, originCountry):
        self.originCountry = originCountry
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_artref(self):
        return self.artref
    def set_artref(self, artref):
        self.artref = artref
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_customsFees(self):
        return self.customsFees
    def set_customsFees(self, customsFees):
        self.customsFees = customsFees
    def _hasContent(self):
        if (
            self.description is not None or
            self.quantity is not None or
            self.weight is not None or
            self.value is not None or
            self.hsCode is not None or
            self.originCountry is not None or
            self.currency is not None or
            self.artref is not None or
            self.originalIdent is not None or
            self.vatAmount is not None or
            self.customsFees is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType7', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleType7')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleType7':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleType7')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleType7'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.hsCode is not None:
            namespaceprefix_ = self.hsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.hsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shsCode>%s</%shsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hsCode), input_name='hsCode')), namespaceprefix_ , eol_))
        if self.originCountry is not None:
            namespaceprefix_ = self.originCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.originCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginCountry>%s</%soriginCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originCountry), input_name='originCountry')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.artref is not None:
            namespaceprefix_ = self.artref_nsprefix_ + ':' if (UseCapturedNS_ and self.artref_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartref>%s</%sartref>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.artref), input_name='artref')), namespaceprefix_ , eol_))
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_float(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.customsFees is not None:
            namespaceprefix_ = self.customsFees_nsprefix_ + ':' if (UseCapturedNS_ and self.customsFees_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsFees>%s</%scustomsFees>%s' % (namespaceprefix_ , self.gds_format_float(self.customsFees, input_name='customsFees'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'hsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hsCode')
            value_ = self.gds_validate_string(value_, node, 'hsCode')
            self.hsCode = value_
            self.hsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'originCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originCountry')
            value_ = self.gds_validate_string(value_, node, 'originCountry')
            self.originCountry = value_
            self.originCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'artref':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'artref')
            value_ = self.gds_validate_string(value_, node, 'artref')
            self.artref = value_
            self.artref_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'vatAmount')
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsFees' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsFees')
            fval_ = self.gds_validate_float(fval_, node, 'customsFees')
            self.customsFees = fval_
            self.customsFees_nsprefix_ = child_.prefix
# end class articleType7


class categoryType8(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType8.subclass:
            return categoryType8.subclass(*args_, **kwargs_)
        else:
            return categoryType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType8', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType8')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'categoryType8':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='categoryType8')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='categoryType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='categoryType8'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_integer(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'value')
            ival_ = self.gds_validate_integer(ival_, node, 'value')
            self.value = ival_
            self.value_nsprefix_ = child_.prefix
# end class categoryType8


class originalType9(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, originalIdent=None, originalInvoiceNumber=None, originalInvoiceDate=None, originalParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.originalInvoiceNumber = originalInvoiceNumber
        self.originalInvoiceNumber_nsprefix_ = None
        if isinstance(originalInvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(originalInvoiceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = originalInvoiceDate
        self.originalInvoiceDate = initvalue_
        self.originalInvoiceDate_nsprefix_ = None
        self.originalParcelNumber = originalParcelNumber
        self.originalParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, originalType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if originalType9.subclass:
            return originalType9.subclass(*args_, **kwargs_)
        else:
            return originalType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_originalInvoiceNumber(self):
        return self.originalInvoiceNumber
    def set_originalInvoiceNumber(self, originalInvoiceNumber):
        self.originalInvoiceNumber = originalInvoiceNumber
    def get_originalInvoiceDate(self):
        return self.originalInvoiceDate
    def set_originalInvoiceDate(self, originalInvoiceDate):
        self.originalInvoiceDate = originalInvoiceDate
    def get_originalParcelNumber(self):
        return self.originalParcelNumber
    def set_originalParcelNumber(self, originalParcelNumber):
        self.originalParcelNumber = originalParcelNumber
    def _hasContent(self):
        if (
            self.originalIdent is not None or
            self.originalInvoiceNumber is not None or
            self.originalInvoiceDate is not None or
            self.originalParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType9', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('originalType9')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'originalType9':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='originalType9')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='originalType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='originalType9'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.originalInvoiceNumber is not None:
            namespaceprefix_ = self.originalInvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceNumber>%s</%soriginalInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalInvoiceNumber), input_name='originalInvoiceNumber')), namespaceprefix_ , eol_))
        if self.originalInvoiceDate is not None:
            namespaceprefix_ = self.originalInvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceDate>%s</%soriginalInvoiceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.originalInvoiceDate, input_name='originalInvoiceDate'), namespaceprefix_ , eol_))
        if self.originalParcelNumber is not None:
            namespaceprefix_ = self.originalParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalParcelNumber>%s</%soriginalParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalParcelNumber), input_name='originalParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalInvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'originalInvoiceNumber')
            self.originalInvoiceNumber = value_
            self.originalInvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.originalInvoiceDate = dval_
            self.originalInvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'originalParcelNumber')
            self.originalParcelNumber = value_
            self.originalParcelNumber_nsprefix_ = child_.prefix
# end class originalType9


class importerAddressType10(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, importerAddressType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if importerAddressType10.subclass:
            return importerAddressType10.subclass(*args_, **kwargs_)
        else:
            return importerAddressType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType10', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('importerAddressType10')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'importerAddressType10':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='importerAddressType10')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='importerAddressType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='importerAddressType10'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class importerAddressType10


class senderType11(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType11.subclass:
            return senderType11.subclass(*args_, **kwargs_)
        else:
            return senderType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType11', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType11')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType11':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType11')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType11'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType12.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType11


class addressType12(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType12.subclass:
            return addressType12.subclass(*args_, **kwargs_)
        else:
            return addressType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType12', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType12')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType12':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType12')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType12'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType12


class addresseeType13(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType13.subclass:
            return addresseeType13.subclass(*args_, **kwargs_)
        else:
            return addresseeType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType13', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType13')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType13':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType13')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType13'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType14.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType13


class addressType14(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType14.subclass:
            return addressType14.subclass(*args_, **kwargs_)
        else:
            return addressType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType14', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType14')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType14':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType14')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType14'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType14


class codSenderAddressType15(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codSenderAddressType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codSenderAddressType15.subclass:
            return codSenderAddressType15.subclass(*args_, **kwargs_)
        else:
            return codSenderAddressType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType15', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codSenderAddressType15')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codSenderAddressType15':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codSenderAddressType15')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codSenderAddressType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codSenderAddressType15'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class codSenderAddressType15


class uploadDocumentType16(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, documentContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.documentContent = documentContent
        self.documentContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uploadDocumentType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uploadDocumentType16.subclass:
            return uploadDocumentType16.subclass(*args_, **kwargs_)
        else:
            return uploadDocumentType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_documentContent(self):
        return self.documentContent
    def set_documentContent(self, documentContent):
        self.documentContent = documentContent
    def _hasContent(self):
        if (
            self.documentContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType16', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uploadDocumentType16')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uploadDocumentType16':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uploadDocumentType16')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uploadDocumentType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uploadDocumentType16'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.documentContent is not None:
            namespaceprefix_ = self.documentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.documentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentContent>%s</%sdocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.documentContent, input_name='documentContent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'documentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'documentContent')
            else:
                bval_ = None
            self.documentContent = bval_
            self.documentContent_nsprefix_ = child_.prefix
# end class uploadDocumentType16


class fieldsType17(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType17.subclass:
            return fieldsType17.subclass(*args_, **kwargs_)
        else:
            return fieldsType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType17', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType17')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType17':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType17')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType17'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType18.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType17


class fieldType18(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType18.subclass:
            return fieldType18.subclass(*args_, **kwargs_)
        else:
            return fieldType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType18', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType18')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType18':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType18')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType18'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType18


class outputFormatType19(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, x=None, y=None, outputPrintingType=None, dematerialized=None, returnType=None, printCODDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.x = x
        self.x_nsprefix_ = None
        self.y = y
        self.y_nsprefix_ = None
        self.outputPrintingType = outputPrintingType
        self.outputPrintingType_nsprefix_ = None
        self.dematerialized = dematerialized
        self.dematerialized_nsprefix_ = None
        self.returnType = returnType
        self.returnType_nsprefix_ = None
        self.printCODDocument = printCODDocument
        self.printCODDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, outputFormatType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if outputFormatType19.subclass:
            return outputFormatType19.subclass(*args_, **kwargs_)
        else:
            return outputFormatType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_x(self):
        return self.x
    def set_x(self, x):
        self.x = x
    def get_y(self):
        return self.y
    def set_y(self, y):
        self.y = y
    def get_outputPrintingType(self):
        return self.outputPrintingType
    def set_outputPrintingType(self, outputPrintingType):
        self.outputPrintingType = outputPrintingType
    def get_dematerialized(self):
        return self.dematerialized
    def set_dematerialized(self, dematerialized):
        self.dematerialized = dematerialized
    def get_returnType(self):
        return self.returnType
    def set_returnType(self, returnType):
        self.returnType = returnType
    def get_printCODDocument(self):
        return self.printCODDocument
    def set_printCODDocument(self, printCODDocument):
        self.printCODDocument = printCODDocument
    def _hasContent(self):
        if (
            self.x is not None or
            self.y is not None or
            self.outputPrintingType is not None or
            self.dematerialized is not None or
            self.returnType is not None or
            self.printCODDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType19', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('outputFormatType19')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'outputFormatType19':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='outputFormatType19')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='outputFormatType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='outputFormatType19'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.x is not None:
            namespaceprefix_ = self.x_nsprefix_ + ':' if (UseCapturedNS_ and self.x_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sx>%s</%sx>%s' % (namespaceprefix_ , self.gds_format_integer(self.x, input_name='x'), namespaceprefix_ , eol_))
        if self.y is not None:
            namespaceprefix_ = self.y_nsprefix_ + ':' if (UseCapturedNS_ and self.y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sy>%s</%sy>%s' % (namespaceprefix_ , self.gds_format_integer(self.y, input_name='y'), namespaceprefix_ , eol_))
        if self.outputPrintingType is not None:
            namespaceprefix_ = self.outputPrintingType_nsprefix_ + ':' if (UseCapturedNS_ and self.outputPrintingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputPrintingType>%s</%soutputPrintingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.outputPrintingType), input_name='outputPrintingType')), namespaceprefix_ , eol_))
        if self.dematerialized is not None:
            namespaceprefix_ = self.dematerialized_nsprefix_ + ':' if (UseCapturedNS_ and self.dematerialized_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdematerialized>%s</%sdematerialized>%s' % (namespaceprefix_ , self.gds_format_boolean(self.dematerialized, input_name='dematerialized'), namespaceprefix_ , eol_))
        if self.returnType is not None:
            namespaceprefix_ = self.returnType_nsprefix_ + ':' if (UseCapturedNS_ and self.returnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnType>%s</%sreturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.returnType), input_name='returnType')), namespaceprefix_ , eol_))
        if self.printCODDocument is not None:
            namespaceprefix_ = self.printCODDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.printCODDocument_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprintCODDocument>%s</%sprintCODDocument>%s' % (namespaceprefix_ , self.gds_format_boolean(self.printCODDocument, input_name='printCODDocument'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'x' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'x')
            ival_ = self.gds_validate_integer(ival_, node, 'x')
            self.x = ival_
            self.x_nsprefix_ = child_.prefix
        elif nodeName_ == 'y' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'y')
            ival_ = self.gds_validate_integer(ival_, node, 'y')
            self.y = ival_
            self.y_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputPrintingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'outputPrintingType')
            value_ = self.gds_validate_string(value_, node, 'outputPrintingType')
            self.outputPrintingType = value_
            self.outputPrintingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'dematerialized':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'dematerialized')
            ival_ = self.gds_validate_boolean(ival_, node, 'dematerialized')
            self.dematerialized = ival_
            self.dematerialized_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'returnType')
            value_ = self.gds_validate_string(value_, node, 'returnType')
            self.returnType = value_
            self.returnType_nsprefix_ = child_.prefix
        elif nodeName_ == 'printCODDocument':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'printCODDocument')
            ival_ = self.gds_validate_boolean(ival_, node, 'printCODDocument')
            self.printCODDocument = ival_
            self.printCODDocument_nsprefix_ = child_.prefix
# end class outputFormatType19


class letterType20(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, service=None, parcel=None, customsDeclarations=None, sender=None, addressee=None, codSenderAddress=None, uploadDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.parcel = parcel
        self.parcel_nsprefix_ = None
        self.customsDeclarations = customsDeclarations
        self.customsDeclarations_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.codSenderAddress = codSenderAddress
        self.codSenderAddress_nsprefix_ = None
        self.uploadDocument = uploadDocument
        self.uploadDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, letterType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if letterType20.subclass:
            return letterType20.subclass(*args_, **kwargs_)
        else:
            return letterType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_parcel(self):
        return self.parcel
    def set_parcel(self, parcel):
        self.parcel = parcel
    def get_customsDeclarations(self):
        return self.customsDeclarations
    def set_customsDeclarations(self, customsDeclarations):
        self.customsDeclarations = customsDeclarations
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_codSenderAddress(self):
        return self.codSenderAddress
    def set_codSenderAddress(self, codSenderAddress):
        self.codSenderAddress = codSenderAddress
    def get_uploadDocument(self):
        return self.uploadDocument
    def set_uploadDocument(self, uploadDocument):
        self.uploadDocument = uploadDocument
    def _hasContent(self):
        if (
            self.service is not None or
            self.parcel is not None or
            self.customsDeclarations is not None or
            self.sender is not None or
            self.addressee is not None or
            self.codSenderAddress is not None or
            self.uploadDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType20', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('letterType20')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'letterType20':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='letterType20')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='letterType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='letterType20'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            self.service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='service', pretty_print=pretty_print)
        if self.parcel is not None:
            namespaceprefix_ = self.parcel_nsprefix_ + ':' if (UseCapturedNS_ and self.parcel_nsprefix_) else ''
            self.parcel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parcel', pretty_print=pretty_print)
        if self.customsDeclarations is not None:
            namespaceprefix_ = self.customsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.customsDeclarations_nsprefix_) else ''
            self.customsDeclarations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsDeclarations', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.codSenderAddress is not None:
            namespaceprefix_ = self.codSenderAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.codSenderAddress_nsprefix_) else ''
            self.codSenderAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codSenderAddress', pretty_print=pretty_print)
        if self.uploadDocument is not None:
            namespaceprefix_ = self.uploadDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.uploadDocument_nsprefix_) else ''
            self.uploadDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uploadDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'service':
            obj_ = serviceType21.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.service = obj_
            obj_.original_tagname_ = 'service'
        elif nodeName_ == 'parcel':
            obj_ = parcelType22.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.parcel = obj_
            obj_.original_tagname_ = 'parcel'
        elif nodeName_ == 'customsDeclarations':
            obj_ = customsDeclarationsType23.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsDeclarations = obj_
            obj_.original_tagname_ = 'customsDeclarations'
        elif nodeName_ == 'sender':
            obj_ = senderType29.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'addressee':
            obj_ = addresseeType31.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'codSenderAddress':
            obj_ = codSenderAddressType33.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codSenderAddress = obj_
            obj_.original_tagname_ = 'codSenderAddress'
        elif nodeName_ == 'uploadDocument':
            obj_ = uploadDocumentType34.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uploadDocument = obj_
            obj_.original_tagname_ = 'uploadDocument'
# end class letterType20


class serviceType21(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, productCode=None, depositDate=None, mailBoxPicking=None, mailBoxPickingDate=None, vatCode=None, vatPercentage=None, vatAmount=None, transportationAmount=None, totalAmount=None, orderNumber=None, commercialName=None, returnTypeChoice=None, reseauPostal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        if isinstance(depositDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(depositDate, '%Y-%m-%d').date()
        else:
            initvalue_ = depositDate
        self.depositDate = initvalue_
        self.depositDate_nsprefix_ = None
        self.mailBoxPicking = mailBoxPicking
        self.mailBoxPicking_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.vatCode = vatCode
        self.vatCode_nsprefix_ = None
        self.vatPercentage = vatPercentage
        self.vatPercentage_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.transportationAmount = transportationAmount
        self.transportationAmount_nsprefix_ = None
        self.totalAmount = totalAmount
        self.totalAmount_nsprefix_ = None
        self.orderNumber = orderNumber
        self.orderNumber_nsprefix_ = None
        self.commercialName = commercialName
        self.commercialName_nsprefix_ = None
        self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
        self.reseauPostal = reseauPostal
        self.reseauPostal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType21.subclass:
            return serviceType21.subclass(*args_, **kwargs_)
        else:
            return serviceType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_depositDate(self):
        return self.depositDate
    def set_depositDate(self, depositDate):
        self.depositDate = depositDate
    def get_mailBoxPicking(self):
        return self.mailBoxPicking
    def set_mailBoxPicking(self, mailBoxPicking):
        self.mailBoxPicking = mailBoxPicking
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_vatCode(self):
        return self.vatCode
    def set_vatCode(self, vatCode):
        self.vatCode = vatCode
    def get_vatPercentage(self):
        return self.vatPercentage
    def set_vatPercentage(self, vatPercentage):
        self.vatPercentage = vatPercentage
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_transportationAmount(self):
        return self.transportationAmount
    def set_transportationAmount(self, transportationAmount):
        self.transportationAmount = transportationAmount
    def get_totalAmount(self):
        return self.totalAmount
    def set_totalAmount(self, totalAmount):
        self.totalAmount = totalAmount
    def get_orderNumber(self):
        return self.orderNumber
    def set_orderNumber(self, orderNumber):
        self.orderNumber = orderNumber
    def get_commercialName(self):
        return self.commercialName
    def set_commercialName(self, commercialName):
        self.commercialName = commercialName
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def get_reseauPostal(self):
        return self.reseauPostal
    def set_reseauPostal(self, reseauPostal):
        self.reseauPostal = reseauPostal
    def _hasContent(self):
        if (
            self.productCode is not None or
            self.depositDate is not None or
            self.mailBoxPicking is not None or
            self.mailBoxPickingDate is not None or
            self.vatCode is not None or
            self.vatPercentage is not None or
            self.vatAmount is not None or
            self.transportationAmount is not None or
            self.totalAmount is not None or
            self.orderNumber is not None or
            self.commercialName is not None or
            self.returnTypeChoice is not None or
            self.reseauPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType21', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType21')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'serviceType21':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='serviceType21')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='serviceType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='serviceType21'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.depositDate is not None:
            namespaceprefix_ = self.depositDate_nsprefix_ + ':' if (UseCapturedNS_ and self.depositDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepositDate>%s</%sdepositDate>%s' % (namespaceprefix_ , self.gds_format_date(self.depositDate, input_name='depositDate'), namespaceprefix_ , eol_))
        if self.mailBoxPicking is not None:
            namespaceprefix_ = self.mailBoxPicking_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPicking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPicking>%s</%smailBoxPicking>%s' % (namespaceprefix_ , self.gds_format_boolean(self.mailBoxPicking, input_name='mailBoxPicking'), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.vatCode is not None:
            namespaceprefix_ = self.vatCode_nsprefix_ + ':' if (UseCapturedNS_ and self.vatCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatCode>%s</%svatCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatCode, input_name='vatCode'), namespaceprefix_ , eol_))
        if self.vatPercentage is not None:
            namespaceprefix_ = self.vatPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.vatPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatPercentage>%s</%svatPercentage>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatPercentage, input_name='vatPercentage'), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.transportationAmount is not None:
            namespaceprefix_ = self.transportationAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.transportationAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransportationAmount>%s</%stransportationAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.transportationAmount, input_name='transportationAmount'), namespaceprefix_ , eol_))
        if self.totalAmount is not None:
            namespaceprefix_ = self.totalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.totalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalAmount>%s</%stotalAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.totalAmount, input_name='totalAmount'), namespaceprefix_ , eol_))
        if self.orderNumber is not None:
            namespaceprefix_ = self.orderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.orderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorderNumber>%s</%sorderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orderNumber), input_name='orderNumber')), namespaceprefix_ , eol_))
        if self.commercialName is not None:
            namespaceprefix_ = self.commercialName_nsprefix_ + ':' if (UseCapturedNS_ and self.commercialName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommercialName>%s</%scommercialName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.commercialName), input_name='commercialName')), namespaceprefix_ , eol_))
        if self.returnTypeChoice is not None:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.returnTypeChoice, input_name='returnTypeChoice'), namespaceprefix_ , eol_))
        if self.reseauPostal is not None:
            namespaceprefix_ = self.reseauPostal_nsprefix_ + ':' if (UseCapturedNS_ and self.reseauPostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreseauPostal>%s</%sreseauPostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reseauPostal), input_name='reseauPostal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'depositDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.depositDate = dval_
            self.depositDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPicking':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'mailBoxPicking')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailBoxPicking')
            self.mailBoxPicking = ival_
            self.mailBoxPicking_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatCode')
            ival_ = self.gds_validate_integer(ival_, node, 'vatCode')
            self.vatCode = ival_
            self.vatCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatPercentage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatPercentage')
            ival_ = self.gds_validate_integer(ival_, node, 'vatPercentage')
            self.vatPercentage = ival_
            self.vatPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'vatAmount')
            self.vatAmount = ival_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'transportationAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'transportationAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'transportationAmount')
            self.transportationAmount = ival_
            self.transportationAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'totalAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'totalAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'totalAmount')
            self.totalAmount = ival_
            self.totalAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'orderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orderNumber')
            value_ = self.gds_validate_string(value_, node, 'orderNumber')
            self.orderNumber = value_
            self.orderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'commercialName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'commercialName')
            value_ = self.gds_validate_string(value_, node, 'commercialName')
            self.commercialName = value_
            self.commercialName_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'returnTypeChoice')
            ival_ = self.gds_validate_integer(ival_, node, 'returnTypeChoice')
            self.returnTypeChoice = ival_
            self.returnTypeChoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'reseauPostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reseauPostal')
            value_ = self.gds_validate_string(value_, node, 'reseauPostal')
            self.reseauPostal = value_
            self.reseauPostal_nsprefix_ = child_.prefix
# end class serviceType21


class parcelType22(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelNumber=None, insuranceAmount=None, insuranceValue=None, recommendationLevel=None, weight=None, nonMachinable=None, COD=None, CODAmount=None, CODCurrency=None, returnReceipt=None, instructions=None, pickupLocationId=None, ftd=None, ddp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.insuranceAmount = insuranceAmount
        self.insuranceAmount_nsprefix_ = None
        self.insuranceValue = insuranceValue
        self.insuranceValue_nsprefix_ = None
        self.recommendationLevel = recommendationLevel
        self.recommendationLevel_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
        self.CODCurrency = CODCurrency
        self.CODCurrency_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.instructions = instructions
        self.instructions_nsprefix_ = None
        self.pickupLocationId = pickupLocationId
        self.pickupLocationId_nsprefix_ = None
        self.ftd = ftd
        self.ftd_nsprefix_ = None
        self.ddp = ddp
        self.ddp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parcelType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parcelType22.subclass:
            return parcelType22.subclass(*args_, **kwargs_)
        else:
            return parcelType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_insuranceAmount(self):
        return self.insuranceAmount
    def set_insuranceAmount(self, insuranceAmount):
        self.insuranceAmount = insuranceAmount
    def get_insuranceValue(self):
        return self.insuranceValue
    def set_insuranceValue(self, insuranceValue):
        self.insuranceValue = insuranceValue
    def get_recommendationLevel(self):
        return self.recommendationLevel
    def set_recommendationLevel(self, recommendationLevel):
        self.recommendationLevel = recommendationLevel
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def get_CODCurrency(self):
        return self.CODCurrency
    def set_CODCurrency(self, CODCurrency):
        self.CODCurrency = CODCurrency
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_instructions(self):
        return self.instructions
    def set_instructions(self, instructions):
        self.instructions = instructions
    def get_pickupLocationId(self):
        return self.pickupLocationId
    def set_pickupLocationId(self, pickupLocationId):
        self.pickupLocationId = pickupLocationId
    def get_ftd(self):
        return self.ftd
    def set_ftd(self, ftd):
        self.ftd = ftd
    def get_ddp(self):
        return self.ddp
    def set_ddp(self, ddp):
        self.ddp = ddp
    def _hasContent(self):
        if (
            self.parcelNumber is not None or
            self.insuranceAmount is not None or
            self.insuranceValue is not None or
            self.recommendationLevel is not None or
            self.weight is not None or
            self.nonMachinable is not None or
            self.COD is not None or
            self.CODAmount is not None or
            self.CODCurrency is not None or
            self.returnReceipt is not None or
            self.instructions is not None or
            self.pickupLocationId is not None or
            self.ftd is not None or
            self.ddp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType22', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parcelType22')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'parcelType22':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='parcelType22')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='parcelType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='parcelType22'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.insuranceAmount is not None:
            namespaceprefix_ = self.insuranceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceAmount>%s</%sinsuranceAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceAmount, input_name='insuranceAmount'), namespaceprefix_ , eol_))
        if self.insuranceValue is not None:
            namespaceprefix_ = self.insuranceValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceValue>%s</%sinsuranceValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceValue, input_name='insuranceValue'), namespaceprefix_ , eol_))
        if self.recommendationLevel is not None:
            namespaceprefix_ = self.recommendationLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.recommendationLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecommendationLevel>%s</%srecommendationLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recommendationLevel), input_name='recommendationLevel')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOD>%s</%sCOD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.COD, input_name='COD'), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODAmount>%s</%sCODAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.CODAmount, input_name='CODAmount'), namespaceprefix_ , eol_))
        if self.CODCurrency is not None:
            namespaceprefix_ = self.CODCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.CODCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODCurrency>%s</%sCODCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODCurrency), input_name='CODCurrency')), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.instructions is not None:
            namespaceprefix_ = self.instructions_nsprefix_ + ':' if (UseCapturedNS_ and self.instructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructions>%s</%sinstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructions), input_name='instructions')), namespaceprefix_ , eol_))
        if self.pickupLocationId is not None:
            namespaceprefix_ = self.pickupLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupLocationId>%s</%spickupLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pickupLocationId), input_name='pickupLocationId')), namespaceprefix_ , eol_))
        if self.ftd is not None:
            namespaceprefix_ = self.ftd_nsprefix_ + ':' if (UseCapturedNS_ and self.ftd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sftd>%s</%sftd>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ftd, input_name='ftd'), namespaceprefix_ , eol_))
        if self.ddp is not None:
            namespaceprefix_ = self.ddp_nsprefix_ + ':' if (UseCapturedNS_ and self.ddp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sddp>%s</%sddp>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ddp, input_name='ddp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceAmount')
            self.insuranceAmount = ival_
            self.insuranceAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceValue')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceValue')
            self.insuranceValue = ival_
            self.insuranceValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'recommendationLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recommendationLevel')
            value_ = self.gds_validate_string(value_, node, 'recommendationLevel')
            self.recommendationLevel = value_
            self.recommendationLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'COD')
            ival_ = self.gds_validate_boolean(ival_, node, 'COD')
            self.COD = ival_
            self.COD_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CODAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'CODAmount')
            self.CODAmount = ival_
            self.CODAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODCurrency')
            value_ = self.gds_validate_string(value_, node, 'CODCurrency')
            self.CODCurrency = value_
            self.CODCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructions')
            value_ = self.gds_validate_string(value_, node, 'instructions')
            self.instructions = value_
            self.instructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pickupLocationId')
            value_ = self.gds_validate_string(value_, node, 'pickupLocationId')
            self.pickupLocationId = value_
            self.pickupLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ftd':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ftd')
            ival_ = self.gds_validate_boolean(ival_, node, 'ftd')
            self.ftd = ival_
            self.ftd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ddp':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ddp')
            ival_ = self.gds_validate_boolean(ival_, node, 'ddp')
            self.ddp = ival_
            self.ddp_nsprefix_ = child_.prefix
# end class parcelType22


class customsDeclarationsType23(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, includeCustomsDeclarations=None, contents=None, importersReference=None, importersContact=None, officeOrigin=None, comments=None, description=None, invoiceNumber=None, licenceNumber=None, certificatNumber=None, importerAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.includeCustomsDeclarations = includeCustomsDeclarations
        self.includeCustomsDeclarations_nsprefix_ = None
        self.contents = contents
        self.contents_nsprefix_ = None
        self.importersReference = importersReference
        self.importersReference_nsprefix_ = None
        self.importersContact = importersContact
        self.importersContact_nsprefix_ = None
        self.officeOrigin = officeOrigin
        self.officeOrigin_nsprefix_ = None
        self.comments = comments
        self.comments_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.invoiceNumber = invoiceNumber
        self.invoiceNumber_nsprefix_ = None
        self.licenceNumber = licenceNumber
        self.licenceNumber_nsprefix_ = None
        self.certificatNumber = certificatNumber
        self.certificatNumber_nsprefix_ = None
        self.importerAddress = importerAddress
        self.importerAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsDeclarationsType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsDeclarationsType23.subclass:
            return customsDeclarationsType23.subclass(*args_, **kwargs_)
        else:
            return customsDeclarationsType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_includeCustomsDeclarations(self):
        return self.includeCustomsDeclarations
    def set_includeCustomsDeclarations(self, includeCustomsDeclarations):
        self.includeCustomsDeclarations = includeCustomsDeclarations
    def get_contents(self):
        return self.contents
    def set_contents(self, contents):
        self.contents = contents
    def get_importersReference(self):
        return self.importersReference
    def set_importersReference(self, importersReference):
        self.importersReference = importersReference
    def get_importersContact(self):
        return self.importersContact
    def set_importersContact(self, importersContact):
        self.importersContact = importersContact
    def get_officeOrigin(self):
        return self.officeOrigin
    def set_officeOrigin(self, officeOrigin):
        self.officeOrigin = officeOrigin
    def get_comments(self):
        return self.comments
    def set_comments(self, comments):
        self.comments = comments
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_invoiceNumber(self):
        return self.invoiceNumber
    def set_invoiceNumber(self, invoiceNumber):
        self.invoiceNumber = invoiceNumber
    def get_licenceNumber(self):
        return self.licenceNumber
    def set_licenceNumber(self, licenceNumber):
        self.licenceNumber = licenceNumber
    def get_certificatNumber(self):
        return self.certificatNumber
    def set_certificatNumber(self, certificatNumber):
        self.certificatNumber = certificatNumber
    def get_importerAddress(self):
        return self.importerAddress
    def set_importerAddress(self, importerAddress):
        self.importerAddress = importerAddress
    def _hasContent(self):
        if (
            self.includeCustomsDeclarations is not None or
            self.contents is not None or
            self.importersReference is not None or
            self.importersContact is not None or
            self.officeOrigin is not None or
            self.comments is not None or
            self.description is not None or
            self.invoiceNumber is not None or
            self.licenceNumber is not None or
            self.certificatNumber is not None or
            self.importerAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType23', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsDeclarationsType23')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsDeclarationsType23':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsDeclarationsType23')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsDeclarationsType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsDeclarationsType23'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.includeCustomsDeclarations is not None:
            namespaceprefix_ = self.includeCustomsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.includeCustomsDeclarations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincludeCustomsDeclarations>%s</%sincludeCustomsDeclarations>%s' % (namespaceprefix_ , self.gds_format_boolean(self.includeCustomsDeclarations, input_name='includeCustomsDeclarations'), namespaceprefix_ , eol_))
        if self.contents is not None:
            namespaceprefix_ = self.contents_nsprefix_ + ':' if (UseCapturedNS_ and self.contents_nsprefix_) else ''
            self.contents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='contents', pretty_print=pretty_print)
        if self.importersReference is not None:
            namespaceprefix_ = self.importersReference_nsprefix_ + ':' if (UseCapturedNS_ and self.importersReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersReference>%s</%simportersReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersReference), input_name='importersReference')), namespaceprefix_ , eol_))
        if self.importersContact is not None:
            namespaceprefix_ = self.importersContact_nsprefix_ + ':' if (UseCapturedNS_ and self.importersContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersContact>%s</%simportersContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersContact), input_name='importersContact')), namespaceprefix_ , eol_))
        if self.officeOrigin is not None:
            namespaceprefix_ = self.officeOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.officeOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sofficeOrigin>%s</%sofficeOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.officeOrigin), input_name='officeOrigin')), namespaceprefix_ , eol_))
        if self.comments is not None:
            namespaceprefix_ = self.comments_nsprefix_ + ':' if (UseCapturedNS_ and self.comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomments>%s</%scomments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.invoiceNumber is not None:
            namespaceprefix_ = self.invoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.invoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinvoiceNumber>%s</%sinvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.invoiceNumber), input_name='invoiceNumber')), namespaceprefix_ , eol_))
        if self.licenceNumber is not None:
            namespaceprefix_ = self.licenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.licenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicenceNumber>%s</%slicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.licenceNumber), input_name='licenceNumber')), namespaceprefix_ , eol_))
        if self.certificatNumber is not None:
            namespaceprefix_ = self.certificatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.certificatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scertificatNumber>%s</%scertificatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.certificatNumber), input_name='certificatNumber')), namespaceprefix_ , eol_))
        if self.importerAddress is not None:
            namespaceprefix_ = self.importerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.importerAddress_nsprefix_) else ''
            self.importerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='importerAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'includeCustomsDeclarations':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'includeCustomsDeclarations')
            ival_ = self.gds_validate_boolean(ival_, node, 'includeCustomsDeclarations')
            self.includeCustomsDeclarations = ival_
            self.includeCustomsDeclarations_nsprefix_ = child_.prefix
        elif nodeName_ == 'contents':
            obj_ = contentsType24.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.contents = obj_
            obj_.original_tagname_ = 'contents'
        elif nodeName_ == 'importersReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersReference')
            value_ = self.gds_validate_string(value_, node, 'importersReference')
            self.importersReference = value_
            self.importersReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'importersContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersContact')
            value_ = self.gds_validate_string(value_, node, 'importersContact')
            self.importersContact = value_
            self.importersContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'officeOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'officeOrigin')
            value_ = self.gds_validate_string(value_, node, 'officeOrigin')
            self.officeOrigin = value_
            self.officeOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comments')
            value_ = self.gds_validate_string(value_, node, 'comments')
            self.comments = value_
            self.comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'invoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'invoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'invoiceNumber')
            self.invoiceNumber = value_
            self.invoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'licenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'licenceNumber')
            value_ = self.gds_validate_string(value_, node, 'licenceNumber')
            self.licenceNumber = value_
            self.licenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'certificatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'certificatNumber')
            value_ = self.gds_validate_string(value_, node, 'certificatNumber')
            self.certificatNumber = value_
            self.certificatNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'importerAddress':
            obj_ = importerAddressType28.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.importerAddress = obj_
            obj_.original_tagname_ = 'importerAddress'
# end class customsDeclarationsType23


class contentsType24(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, article=None, category=None, original=None, explanations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if article is None:
            self.article = []
        else:
            self.article = article
        self.article_nsprefix_ = None
        self.category = category
        self.category_nsprefix_ = None
        if original is None:
            self.original = []
        else:
            self.original = original
        self.original_nsprefix_ = None
        self.explanations = explanations
        self.explanations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contentsType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contentsType24.subclass:
            return contentsType24.subclass(*args_, **kwargs_)
        else:
            return contentsType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_article(self):
        return self.article
    def set_article(self, article):
        self.article = article
    def add_article(self, value):
        self.article.append(value)
    def insert_article_at(self, index, value):
        self.article.insert(index, value)
    def replace_article_at(self, index, value):
        self.article[index] = value
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_original(self):
        return self.original
    def set_original(self, original):
        self.original = original
    def add_original(self, value):
        self.original.append(value)
    def insert_original_at(self, index, value):
        self.original.insert(index, value)
    def replace_original_at(self, index, value):
        self.original[index] = value
    def get_explanations(self):
        return self.explanations
    def set_explanations(self, explanations):
        self.explanations = explanations
    def _hasContent(self):
        if (
            self.article or
            self.category is not None or
            self.original or
            self.explanations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType24', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contentsType24')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'contentsType24':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='contentsType24')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='contentsType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='contentsType24'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for article_ in self.article:
            namespaceprefix_ = self.article_nsprefix_ + ':' if (UseCapturedNS_ and self.article_nsprefix_) else ''
            article_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='article', pretty_print=pretty_print)
        if self.category is not None:
            namespaceprefix_ = self.category_nsprefix_ + ':' if (UseCapturedNS_ and self.category_nsprefix_) else ''
            self.category.export(outfile, level, namespaceprefix_, namespacedef_='', name_='category', pretty_print=pretty_print)
        for original_ in self.original:
            namespaceprefix_ = self.original_nsprefix_ + ':' if (UseCapturedNS_ and self.original_nsprefix_) else ''
            original_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='original', pretty_print=pretty_print)
        if self.explanations is not None:
            namespaceprefix_ = self.explanations_nsprefix_ + ':' if (UseCapturedNS_ and self.explanations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexplanations>%s</%sexplanations>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.explanations), input_name='explanations')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'article':
            obj_ = articleType25.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.article.append(obj_)
            obj_.original_tagname_ = 'article'
        elif nodeName_ == 'category':
            obj_ = categoryType26.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.category = obj_
            obj_.original_tagname_ = 'category'
        elif nodeName_ == 'original':
            obj_ = originalType27.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.original.append(obj_)
            obj_.original_tagname_ = 'original'
        elif nodeName_ == 'explanations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'explanations')
            value_ = self.gds_validate_string(value_, node, 'explanations')
            self.explanations = value_
            self.explanations_nsprefix_ = child_.prefix
# end class contentsType24


class articleType25(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, description=None, quantity=None, weight=None, value=None, hsCode=None, originCountry=None, currency=None, artref=None, originalIdent=None, vatAmount=None, customsFees=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.hsCode = hsCode
        self.hsCode_nsprefix_ = None
        self.originCountry = originCountry
        self.originCountry_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.artref = artref
        self.artref_nsprefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.customsFees = customsFees
        self.customsFees_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleType25.subclass:
            return articleType25.subclass(*args_, **kwargs_)
        else:
            return articleType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_hsCode(self):
        return self.hsCode
    def set_hsCode(self, hsCode):
        self.hsCode = hsCode
    def get_originCountry(self):
        return self.originCountry
    def set_originCountry(self, originCountry):
        self.originCountry = originCountry
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_artref(self):
        return self.artref
    def set_artref(self, artref):
        self.artref = artref
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_customsFees(self):
        return self.customsFees
    def set_customsFees(self, customsFees):
        self.customsFees = customsFees
    def _hasContent(self):
        if (
            self.description is not None or
            self.quantity is not None or
            self.weight is not None or
            self.value is not None or
            self.hsCode is not None or
            self.originCountry is not None or
            self.currency is not None or
            self.artref is not None or
            self.originalIdent is not None or
            self.vatAmount is not None or
            self.customsFees is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType25', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleType25')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleType25':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleType25')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleType25'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.hsCode is not None:
            namespaceprefix_ = self.hsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.hsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shsCode>%s</%shsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hsCode), input_name='hsCode')), namespaceprefix_ , eol_))
        if self.originCountry is not None:
            namespaceprefix_ = self.originCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.originCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginCountry>%s</%soriginCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originCountry), input_name='originCountry')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.artref is not None:
            namespaceprefix_ = self.artref_nsprefix_ + ':' if (UseCapturedNS_ and self.artref_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartref>%s</%sartref>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.artref), input_name='artref')), namespaceprefix_ , eol_))
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_float(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.customsFees is not None:
            namespaceprefix_ = self.customsFees_nsprefix_ + ':' if (UseCapturedNS_ and self.customsFees_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsFees>%s</%scustomsFees>%s' % (namespaceprefix_ , self.gds_format_float(self.customsFees, input_name='customsFees'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'hsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hsCode')
            value_ = self.gds_validate_string(value_, node, 'hsCode')
            self.hsCode = value_
            self.hsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'originCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originCountry')
            value_ = self.gds_validate_string(value_, node, 'originCountry')
            self.originCountry = value_
            self.originCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'artref':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'artref')
            value_ = self.gds_validate_string(value_, node, 'artref')
            self.artref = value_
            self.artref_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'vatAmount')
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsFees' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsFees')
            fval_ = self.gds_validate_float(fval_, node, 'customsFees')
            self.customsFees = fval_
            self.customsFees_nsprefix_ = child_.prefix
# end class articleType25


class categoryType26(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType26.subclass:
            return categoryType26.subclass(*args_, **kwargs_)
        else:
            return categoryType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType26', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType26')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'categoryType26':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='categoryType26')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='categoryType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='categoryType26'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_integer(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'value')
            ival_ = self.gds_validate_integer(ival_, node, 'value')
            self.value = ival_
            self.value_nsprefix_ = child_.prefix
# end class categoryType26


class originalType27(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, originalIdent=None, originalInvoiceNumber=None, originalInvoiceDate=None, originalParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.originalInvoiceNumber = originalInvoiceNumber
        self.originalInvoiceNumber_nsprefix_ = None
        if isinstance(originalInvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(originalInvoiceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = originalInvoiceDate
        self.originalInvoiceDate = initvalue_
        self.originalInvoiceDate_nsprefix_ = None
        self.originalParcelNumber = originalParcelNumber
        self.originalParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, originalType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if originalType27.subclass:
            return originalType27.subclass(*args_, **kwargs_)
        else:
            return originalType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_originalInvoiceNumber(self):
        return self.originalInvoiceNumber
    def set_originalInvoiceNumber(self, originalInvoiceNumber):
        self.originalInvoiceNumber = originalInvoiceNumber
    def get_originalInvoiceDate(self):
        return self.originalInvoiceDate
    def set_originalInvoiceDate(self, originalInvoiceDate):
        self.originalInvoiceDate = originalInvoiceDate
    def get_originalParcelNumber(self):
        return self.originalParcelNumber
    def set_originalParcelNumber(self, originalParcelNumber):
        self.originalParcelNumber = originalParcelNumber
    def _hasContent(self):
        if (
            self.originalIdent is not None or
            self.originalInvoiceNumber is not None or
            self.originalInvoiceDate is not None or
            self.originalParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType27', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('originalType27')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'originalType27':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='originalType27')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='originalType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='originalType27'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.originalInvoiceNumber is not None:
            namespaceprefix_ = self.originalInvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceNumber>%s</%soriginalInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalInvoiceNumber), input_name='originalInvoiceNumber')), namespaceprefix_ , eol_))
        if self.originalInvoiceDate is not None:
            namespaceprefix_ = self.originalInvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceDate>%s</%soriginalInvoiceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.originalInvoiceDate, input_name='originalInvoiceDate'), namespaceprefix_ , eol_))
        if self.originalParcelNumber is not None:
            namespaceprefix_ = self.originalParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalParcelNumber>%s</%soriginalParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalParcelNumber), input_name='originalParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalInvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'originalInvoiceNumber')
            self.originalInvoiceNumber = value_
            self.originalInvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.originalInvoiceDate = dval_
            self.originalInvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'originalParcelNumber')
            self.originalParcelNumber = value_
            self.originalParcelNumber_nsprefix_ = child_.prefix
# end class originalType27


class importerAddressType28(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, importerAddressType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if importerAddressType28.subclass:
            return importerAddressType28.subclass(*args_, **kwargs_)
        else:
            return importerAddressType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType28', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('importerAddressType28')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'importerAddressType28':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='importerAddressType28')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='importerAddressType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='importerAddressType28'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class importerAddressType28


class senderType29(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType29.subclass:
            return senderType29.subclass(*args_, **kwargs_)
        else:
            return senderType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType29', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType29')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType29':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType29')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType29'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType30.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType29


class addressType30(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType30.subclass:
            return addressType30.subclass(*args_, **kwargs_)
        else:
            return addressType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType30', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType30')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType30':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType30')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType30'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType30


class addresseeType31(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType31.subclass:
            return addresseeType31.subclass(*args_, **kwargs_)
        else:
            return addresseeType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType31', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType31')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType31':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType31')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType31'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType32.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType31


class addressType32(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType32)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType32.subclass:
            return addressType32.subclass(*args_, **kwargs_)
        else:
            return addressType32(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType32', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType32')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType32':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType32')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType32', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType32'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType32', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType32


class codSenderAddressType33(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codSenderAddressType33)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codSenderAddressType33.subclass:
            return codSenderAddressType33.subclass(*args_, **kwargs_)
        else:
            return codSenderAddressType33(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType33', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codSenderAddressType33')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codSenderAddressType33':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codSenderAddressType33')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codSenderAddressType33', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codSenderAddressType33'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType33', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class codSenderAddressType33


class uploadDocumentType34(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, documentContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.documentContent = documentContent
        self.documentContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uploadDocumentType34)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uploadDocumentType34.subclass:
            return uploadDocumentType34.subclass(*args_, **kwargs_)
        else:
            return uploadDocumentType34(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_documentContent(self):
        return self.documentContent
    def set_documentContent(self, documentContent):
        self.documentContent = documentContent
    def _hasContent(self):
        if (
            self.documentContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType34', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uploadDocumentType34')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uploadDocumentType34':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uploadDocumentType34')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uploadDocumentType34', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uploadDocumentType34'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType34', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.documentContent is not None:
            namespaceprefix_ = self.documentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.documentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentContent>%s</%sdocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.documentContent, input_name='documentContent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'documentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'documentContent')
            else:
                bval_ = None
            self.documentContent = bval_
            self.documentContent_nsprefix_ = child_.prefix
# end class uploadDocumentType34


class fieldsType35(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType35)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType35.subclass:
            return fieldsType35.subclass(*args_, **kwargs_)
        else:
            return fieldsType35(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType35', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType35')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType35':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType35')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType35', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType35'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType35', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType36.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType35


class fieldType36(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType36)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType36.subclass:
            return fieldType36.subclass(*args_, **kwargs_)
        else:
            return fieldType36(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType36', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType36')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType36':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType36')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType36', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType36'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType36', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType36


class senderType37(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, line0=None, line1=None, line2=None, line3=None, countryCode=None, zipCode=None, city=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType37)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType37.subclass:
            return senderType37.subclass(*args_, **kwargs_)
        else:
            return senderType37(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def _hasContent(self):
        if (
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.zipCode is not None or
            self.city is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType37', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType37')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType37':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType37')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType37', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType37'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType37', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
# end class senderType37


class senderType38(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, zipCode=None, city=None, countryCode=None, email=None, phoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType38)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType38.subclass:
            return senderType38.subclass(*args_, **kwargs_)
        else:
            return senderType38(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.zipCode is not None or
            self.city is not None or
            self.countryCode is not None or
            self.email is not None or
            self.phoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType38', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType38')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType38':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType38')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType38', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType38'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType38', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
# end class senderType38


class getListMailBoxPickingDatesRetourRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, sender=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getListMailBoxPickingDatesRetourRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getListMailBoxPickingDatesRetourRequestType.subclass:
            return getListMailBoxPickingDatesRetourRequestType.subclass(*args_, **kwargs_)
        else:
            return getListMailBoxPickingDatesRetourRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.sender is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getListMailBoxPickingDatesRetourRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getListMailBoxPickingDatesRetourRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getListMailBoxPickingDatesRetourRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getListMailBoxPickingDatesRetourRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getListMailBoxPickingDatesRetourRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getListMailBoxPickingDatesRetourRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getListMailBoxPickingDatesRetourRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'sender':
            obj_ = senderType39.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
# end class getListMailBoxPickingDatesRetourRequestType


class senderType39(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, line0=None, line1=None, line2=None, line3=None, countryCode=None, zipCode=None, city=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType39)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType39.subclass:
            return senderType39.subclass(*args_, **kwargs_)
        else:
            return senderType39(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def _hasContent(self):
        if (
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.zipCode is not None or
            self.city is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType39', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType39')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType39':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType39')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType39', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType39'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType39', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
# end class senderType39


class generateLabelRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, outputFormat=None, letter=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.outputFormat = outputFormat
        self.outputFormat_nsprefix_ = None
        self.letter = letter
        self.letter_nsprefix_ = None
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateLabelRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateLabelRequestType.subclass:
            return generateLabelRequestType.subclass(*args_, **kwargs_)
        else:
            return generateLabelRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_outputFormat(self):
        return self.outputFormat
    def set_outputFormat(self, outputFormat):
        self.outputFormat = outputFormat
    def get_letter(self):
        return self.letter
    def set_letter(self, letter):
        self.letter = letter
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.outputFormat is not None or
            self.letter is not None or
            self.fields is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateLabelRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateLabelRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateLabelRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateLabelRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateLabelRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateLabelRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateLabelRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.outputFormat is not None:
            namespaceprefix_ = self.outputFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.outputFormat_nsprefix_) else ''
            self.outputFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='outputFormat', pretty_print=pretty_print)
        if self.letter is not None:
            namespaceprefix_ = self.letter_nsprefix_ + ':' if (UseCapturedNS_ and self.letter_nsprefix_) else ''
            self.letter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='letter', pretty_print=pretty_print)
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputFormat':
            obj_ = outputFormatType40.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.outputFormat = obj_
            obj_.original_tagname_ = 'outputFormat'
        elif nodeName_ == 'letter':
            obj_ = letterType41.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.letter = obj_
            obj_.original_tagname_ = 'letter'
        elif nodeName_ == 'fields':
            obj_ = fieldsType56.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
# end class generateLabelRequestType


class outputFormatType40(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, x=None, y=None, outputPrintingType=None, dematerialized=None, returnType=None, printCODDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.x = x
        self.x_nsprefix_ = None
        self.y = y
        self.y_nsprefix_ = None
        self.outputPrintingType = outputPrintingType
        self.outputPrintingType_nsprefix_ = None
        self.dematerialized = dematerialized
        self.dematerialized_nsprefix_ = None
        self.returnType = returnType
        self.returnType_nsprefix_ = None
        self.printCODDocument = printCODDocument
        self.printCODDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, outputFormatType40)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if outputFormatType40.subclass:
            return outputFormatType40.subclass(*args_, **kwargs_)
        else:
            return outputFormatType40(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_x(self):
        return self.x
    def set_x(self, x):
        self.x = x
    def get_y(self):
        return self.y
    def set_y(self, y):
        self.y = y
    def get_outputPrintingType(self):
        return self.outputPrintingType
    def set_outputPrintingType(self, outputPrintingType):
        self.outputPrintingType = outputPrintingType
    def get_dematerialized(self):
        return self.dematerialized
    def set_dematerialized(self, dematerialized):
        self.dematerialized = dematerialized
    def get_returnType(self):
        return self.returnType
    def set_returnType(self, returnType):
        self.returnType = returnType
    def get_printCODDocument(self):
        return self.printCODDocument
    def set_printCODDocument(self, printCODDocument):
        self.printCODDocument = printCODDocument
    def _hasContent(self):
        if (
            self.x is not None or
            self.y is not None or
            self.outputPrintingType is not None or
            self.dematerialized is not None or
            self.returnType is not None or
            self.printCODDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType40', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('outputFormatType40')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'outputFormatType40':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='outputFormatType40')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='outputFormatType40', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='outputFormatType40'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType40', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.x is not None:
            namespaceprefix_ = self.x_nsprefix_ + ':' if (UseCapturedNS_ and self.x_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sx>%s</%sx>%s' % (namespaceprefix_ , self.gds_format_integer(self.x, input_name='x'), namespaceprefix_ , eol_))
        if self.y is not None:
            namespaceprefix_ = self.y_nsprefix_ + ':' if (UseCapturedNS_ and self.y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sy>%s</%sy>%s' % (namespaceprefix_ , self.gds_format_integer(self.y, input_name='y'), namespaceprefix_ , eol_))
        if self.outputPrintingType is not None:
            namespaceprefix_ = self.outputPrintingType_nsprefix_ + ':' if (UseCapturedNS_ and self.outputPrintingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputPrintingType>%s</%soutputPrintingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.outputPrintingType), input_name='outputPrintingType')), namespaceprefix_ , eol_))
        if self.dematerialized is not None:
            namespaceprefix_ = self.dematerialized_nsprefix_ + ':' if (UseCapturedNS_ and self.dematerialized_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdematerialized>%s</%sdematerialized>%s' % (namespaceprefix_ , self.gds_format_boolean(self.dematerialized, input_name='dematerialized'), namespaceprefix_ , eol_))
        if self.returnType is not None:
            namespaceprefix_ = self.returnType_nsprefix_ + ':' if (UseCapturedNS_ and self.returnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnType>%s</%sreturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.returnType), input_name='returnType')), namespaceprefix_ , eol_))
        if self.printCODDocument is not None:
            namespaceprefix_ = self.printCODDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.printCODDocument_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprintCODDocument>%s</%sprintCODDocument>%s' % (namespaceprefix_ , self.gds_format_boolean(self.printCODDocument, input_name='printCODDocument'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'x' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'x')
            ival_ = self.gds_validate_integer(ival_, node, 'x')
            self.x = ival_
            self.x_nsprefix_ = child_.prefix
        elif nodeName_ == 'y' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'y')
            ival_ = self.gds_validate_integer(ival_, node, 'y')
            self.y = ival_
            self.y_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputPrintingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'outputPrintingType')
            value_ = self.gds_validate_string(value_, node, 'outputPrintingType')
            self.outputPrintingType = value_
            self.outputPrintingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'dematerialized':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'dematerialized')
            ival_ = self.gds_validate_boolean(ival_, node, 'dematerialized')
            self.dematerialized = ival_
            self.dematerialized_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'returnType')
            value_ = self.gds_validate_string(value_, node, 'returnType')
            self.returnType = value_
            self.returnType_nsprefix_ = child_.prefix
        elif nodeName_ == 'printCODDocument':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'printCODDocument')
            ival_ = self.gds_validate_boolean(ival_, node, 'printCODDocument')
            self.printCODDocument = ival_
            self.printCODDocument_nsprefix_ = child_.prefix
# end class outputFormatType40


class letterType41(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, service=None, parcel=None, customsDeclarations=None, sender=None, addressee=None, codSenderAddress=None, uploadDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.parcel = parcel
        self.parcel_nsprefix_ = None
        self.customsDeclarations = customsDeclarations
        self.customsDeclarations_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.codSenderAddress = codSenderAddress
        self.codSenderAddress_nsprefix_ = None
        self.uploadDocument = uploadDocument
        self.uploadDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, letterType41)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if letterType41.subclass:
            return letterType41.subclass(*args_, **kwargs_)
        else:
            return letterType41(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_parcel(self):
        return self.parcel
    def set_parcel(self, parcel):
        self.parcel = parcel
    def get_customsDeclarations(self):
        return self.customsDeclarations
    def set_customsDeclarations(self, customsDeclarations):
        self.customsDeclarations = customsDeclarations
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_codSenderAddress(self):
        return self.codSenderAddress
    def set_codSenderAddress(self, codSenderAddress):
        self.codSenderAddress = codSenderAddress
    def get_uploadDocument(self):
        return self.uploadDocument
    def set_uploadDocument(self, uploadDocument):
        self.uploadDocument = uploadDocument
    def _hasContent(self):
        if (
            self.service is not None or
            self.parcel is not None or
            self.customsDeclarations is not None or
            self.sender is not None or
            self.addressee is not None or
            self.codSenderAddress is not None or
            self.uploadDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType41', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('letterType41')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'letterType41':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='letterType41')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='letterType41', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='letterType41'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType41', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            self.service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='service', pretty_print=pretty_print)
        if self.parcel is not None:
            namespaceprefix_ = self.parcel_nsprefix_ + ':' if (UseCapturedNS_ and self.parcel_nsprefix_) else ''
            self.parcel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parcel', pretty_print=pretty_print)
        if self.customsDeclarations is not None:
            namespaceprefix_ = self.customsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.customsDeclarations_nsprefix_) else ''
            self.customsDeclarations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsDeclarations', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.codSenderAddress is not None:
            namespaceprefix_ = self.codSenderAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.codSenderAddress_nsprefix_) else ''
            self.codSenderAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codSenderAddress', pretty_print=pretty_print)
        if self.uploadDocument is not None:
            namespaceprefix_ = self.uploadDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.uploadDocument_nsprefix_) else ''
            self.uploadDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uploadDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'service':
            obj_ = serviceType42.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.service = obj_
            obj_.original_tagname_ = 'service'
        elif nodeName_ == 'parcel':
            obj_ = parcelType43.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.parcel = obj_
            obj_.original_tagname_ = 'parcel'
        elif nodeName_ == 'customsDeclarations':
            obj_ = customsDeclarationsType44.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsDeclarations = obj_
            obj_.original_tagname_ = 'customsDeclarations'
        elif nodeName_ == 'sender':
            obj_ = senderType50.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'addressee':
            obj_ = addresseeType52.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'codSenderAddress':
            obj_ = codSenderAddressType54.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codSenderAddress = obj_
            obj_.original_tagname_ = 'codSenderAddress'
        elif nodeName_ == 'uploadDocument':
            obj_ = uploadDocumentType55.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uploadDocument = obj_
            obj_.original_tagname_ = 'uploadDocument'
# end class letterType41


class serviceType42(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, productCode=None, depositDate=None, mailBoxPicking=None, mailBoxPickingDate=None, vatCode=None, vatPercentage=None, vatAmount=None, transportationAmount=None, totalAmount=None, orderNumber=None, commercialName=None, returnTypeChoice=None, reseauPostal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        if isinstance(depositDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(depositDate, '%Y-%m-%d').date()
        else:
            initvalue_ = depositDate
        self.depositDate = initvalue_
        self.depositDate_nsprefix_ = None
        self.mailBoxPicking = mailBoxPicking
        self.mailBoxPicking_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.vatCode = vatCode
        self.vatCode_nsprefix_ = None
        self.vatPercentage = vatPercentage
        self.vatPercentage_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.transportationAmount = transportationAmount
        self.transportationAmount_nsprefix_ = None
        self.totalAmount = totalAmount
        self.totalAmount_nsprefix_ = None
        self.orderNumber = orderNumber
        self.orderNumber_nsprefix_ = None
        self.commercialName = commercialName
        self.commercialName_nsprefix_ = None
        self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
        self.reseauPostal = reseauPostal
        self.reseauPostal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType42.subclass:
            return serviceType42.subclass(*args_, **kwargs_)
        else:
            return serviceType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_depositDate(self):
        return self.depositDate
    def set_depositDate(self, depositDate):
        self.depositDate = depositDate
    def get_mailBoxPicking(self):
        return self.mailBoxPicking
    def set_mailBoxPicking(self, mailBoxPicking):
        self.mailBoxPicking = mailBoxPicking
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_vatCode(self):
        return self.vatCode
    def set_vatCode(self, vatCode):
        self.vatCode = vatCode
    def get_vatPercentage(self):
        return self.vatPercentage
    def set_vatPercentage(self, vatPercentage):
        self.vatPercentage = vatPercentage
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_transportationAmount(self):
        return self.transportationAmount
    def set_transportationAmount(self, transportationAmount):
        self.transportationAmount = transportationAmount
    def get_totalAmount(self):
        return self.totalAmount
    def set_totalAmount(self, totalAmount):
        self.totalAmount = totalAmount
    def get_orderNumber(self):
        return self.orderNumber
    def set_orderNumber(self, orderNumber):
        self.orderNumber = orderNumber
    def get_commercialName(self):
        return self.commercialName
    def set_commercialName(self, commercialName):
        self.commercialName = commercialName
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def get_reseauPostal(self):
        return self.reseauPostal
    def set_reseauPostal(self, reseauPostal):
        self.reseauPostal = reseauPostal
    def _hasContent(self):
        if (
            self.productCode is not None or
            self.depositDate is not None or
            self.mailBoxPicking is not None or
            self.mailBoxPickingDate is not None or
            self.vatCode is not None or
            self.vatPercentage is not None or
            self.vatAmount is not None or
            self.transportationAmount is not None or
            self.totalAmount is not None or
            self.orderNumber is not None or
            self.commercialName is not None or
            self.returnTypeChoice is not None or
            self.reseauPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType42', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType42')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'serviceType42':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='serviceType42')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='serviceType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='serviceType42'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.depositDate is not None:
            namespaceprefix_ = self.depositDate_nsprefix_ + ':' if (UseCapturedNS_ and self.depositDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepositDate>%s</%sdepositDate>%s' % (namespaceprefix_ , self.gds_format_date(self.depositDate, input_name='depositDate'), namespaceprefix_ , eol_))
        if self.mailBoxPicking is not None:
            namespaceprefix_ = self.mailBoxPicking_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPicking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPicking>%s</%smailBoxPicking>%s' % (namespaceprefix_ , self.gds_format_boolean(self.mailBoxPicking, input_name='mailBoxPicking'), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.vatCode is not None:
            namespaceprefix_ = self.vatCode_nsprefix_ + ':' if (UseCapturedNS_ and self.vatCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatCode>%s</%svatCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatCode, input_name='vatCode'), namespaceprefix_ , eol_))
        if self.vatPercentage is not None:
            namespaceprefix_ = self.vatPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.vatPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatPercentage>%s</%svatPercentage>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatPercentage, input_name='vatPercentage'), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.transportationAmount is not None:
            namespaceprefix_ = self.transportationAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.transportationAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransportationAmount>%s</%stransportationAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.transportationAmount, input_name='transportationAmount'), namespaceprefix_ , eol_))
        if self.totalAmount is not None:
            namespaceprefix_ = self.totalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.totalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalAmount>%s</%stotalAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.totalAmount, input_name='totalAmount'), namespaceprefix_ , eol_))
        if self.orderNumber is not None:
            namespaceprefix_ = self.orderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.orderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorderNumber>%s</%sorderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orderNumber), input_name='orderNumber')), namespaceprefix_ , eol_))
        if self.commercialName is not None:
            namespaceprefix_ = self.commercialName_nsprefix_ + ':' if (UseCapturedNS_ and self.commercialName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommercialName>%s</%scommercialName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.commercialName), input_name='commercialName')), namespaceprefix_ , eol_))
        if self.returnTypeChoice is not None:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.returnTypeChoice, input_name='returnTypeChoice'), namespaceprefix_ , eol_))
        if self.reseauPostal is not None:
            namespaceprefix_ = self.reseauPostal_nsprefix_ + ':' if (UseCapturedNS_ and self.reseauPostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreseauPostal>%s</%sreseauPostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reseauPostal), input_name='reseauPostal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'depositDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.depositDate = dval_
            self.depositDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPicking':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'mailBoxPicking')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailBoxPicking')
            self.mailBoxPicking = ival_
            self.mailBoxPicking_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatCode')
            ival_ = self.gds_validate_integer(ival_, node, 'vatCode')
            self.vatCode = ival_
            self.vatCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatPercentage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatPercentage')
            ival_ = self.gds_validate_integer(ival_, node, 'vatPercentage')
            self.vatPercentage = ival_
            self.vatPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'vatAmount')
            self.vatAmount = ival_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'transportationAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'transportationAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'transportationAmount')
            self.transportationAmount = ival_
            self.transportationAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'totalAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'totalAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'totalAmount')
            self.totalAmount = ival_
            self.totalAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'orderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orderNumber')
            value_ = self.gds_validate_string(value_, node, 'orderNumber')
            self.orderNumber = value_
            self.orderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'commercialName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'commercialName')
            value_ = self.gds_validate_string(value_, node, 'commercialName')
            self.commercialName = value_
            self.commercialName_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'returnTypeChoice')
            ival_ = self.gds_validate_integer(ival_, node, 'returnTypeChoice')
            self.returnTypeChoice = ival_
            self.returnTypeChoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'reseauPostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reseauPostal')
            value_ = self.gds_validate_string(value_, node, 'reseauPostal')
            self.reseauPostal = value_
            self.reseauPostal_nsprefix_ = child_.prefix
# end class serviceType42


class parcelType43(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelNumber=None, insuranceAmount=None, insuranceValue=None, recommendationLevel=None, weight=None, nonMachinable=None, COD=None, CODAmount=None, CODCurrency=None, returnReceipt=None, instructions=None, pickupLocationId=None, ftd=None, ddp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.insuranceAmount = insuranceAmount
        self.insuranceAmount_nsprefix_ = None
        self.insuranceValue = insuranceValue
        self.insuranceValue_nsprefix_ = None
        self.recommendationLevel = recommendationLevel
        self.recommendationLevel_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
        self.CODCurrency = CODCurrency
        self.CODCurrency_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.instructions = instructions
        self.instructions_nsprefix_ = None
        self.pickupLocationId = pickupLocationId
        self.pickupLocationId_nsprefix_ = None
        self.ftd = ftd
        self.ftd_nsprefix_ = None
        self.ddp = ddp
        self.ddp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parcelType43)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parcelType43.subclass:
            return parcelType43.subclass(*args_, **kwargs_)
        else:
            return parcelType43(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_insuranceAmount(self):
        return self.insuranceAmount
    def set_insuranceAmount(self, insuranceAmount):
        self.insuranceAmount = insuranceAmount
    def get_insuranceValue(self):
        return self.insuranceValue
    def set_insuranceValue(self, insuranceValue):
        self.insuranceValue = insuranceValue
    def get_recommendationLevel(self):
        return self.recommendationLevel
    def set_recommendationLevel(self, recommendationLevel):
        self.recommendationLevel = recommendationLevel
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def get_CODCurrency(self):
        return self.CODCurrency
    def set_CODCurrency(self, CODCurrency):
        self.CODCurrency = CODCurrency
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_instructions(self):
        return self.instructions
    def set_instructions(self, instructions):
        self.instructions = instructions
    def get_pickupLocationId(self):
        return self.pickupLocationId
    def set_pickupLocationId(self, pickupLocationId):
        self.pickupLocationId = pickupLocationId
    def get_ftd(self):
        return self.ftd
    def set_ftd(self, ftd):
        self.ftd = ftd
    def get_ddp(self):
        return self.ddp
    def set_ddp(self, ddp):
        self.ddp = ddp
    def _hasContent(self):
        if (
            self.parcelNumber is not None or
            self.insuranceAmount is not None or
            self.insuranceValue is not None or
            self.recommendationLevel is not None or
            self.weight is not None or
            self.nonMachinable is not None or
            self.COD is not None or
            self.CODAmount is not None or
            self.CODCurrency is not None or
            self.returnReceipt is not None or
            self.instructions is not None or
            self.pickupLocationId is not None or
            self.ftd is not None or
            self.ddp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType43', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parcelType43')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'parcelType43':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='parcelType43')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='parcelType43', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='parcelType43'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType43', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.insuranceAmount is not None:
            namespaceprefix_ = self.insuranceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceAmount>%s</%sinsuranceAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceAmount, input_name='insuranceAmount'), namespaceprefix_ , eol_))
        if self.insuranceValue is not None:
            namespaceprefix_ = self.insuranceValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceValue>%s</%sinsuranceValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceValue, input_name='insuranceValue'), namespaceprefix_ , eol_))
        if self.recommendationLevel is not None:
            namespaceprefix_ = self.recommendationLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.recommendationLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecommendationLevel>%s</%srecommendationLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recommendationLevel), input_name='recommendationLevel')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOD>%s</%sCOD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.COD, input_name='COD'), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODAmount>%s</%sCODAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.CODAmount, input_name='CODAmount'), namespaceprefix_ , eol_))
        if self.CODCurrency is not None:
            namespaceprefix_ = self.CODCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.CODCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODCurrency>%s</%sCODCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODCurrency), input_name='CODCurrency')), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.instructions is not None:
            namespaceprefix_ = self.instructions_nsprefix_ + ':' if (UseCapturedNS_ and self.instructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructions>%s</%sinstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructions), input_name='instructions')), namespaceprefix_ , eol_))
        if self.pickupLocationId is not None:
            namespaceprefix_ = self.pickupLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupLocationId>%s</%spickupLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pickupLocationId), input_name='pickupLocationId')), namespaceprefix_ , eol_))
        if self.ftd is not None:
            namespaceprefix_ = self.ftd_nsprefix_ + ':' if (UseCapturedNS_ and self.ftd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sftd>%s</%sftd>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ftd, input_name='ftd'), namespaceprefix_ , eol_))
        if self.ddp is not None:
            namespaceprefix_ = self.ddp_nsprefix_ + ':' if (UseCapturedNS_ and self.ddp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sddp>%s</%sddp>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ddp, input_name='ddp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceAmount')
            self.insuranceAmount = ival_
            self.insuranceAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceValue')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceValue')
            self.insuranceValue = ival_
            self.insuranceValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'recommendationLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recommendationLevel')
            value_ = self.gds_validate_string(value_, node, 'recommendationLevel')
            self.recommendationLevel = value_
            self.recommendationLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'COD')
            ival_ = self.gds_validate_boolean(ival_, node, 'COD')
            self.COD = ival_
            self.COD_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CODAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'CODAmount')
            self.CODAmount = ival_
            self.CODAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODCurrency')
            value_ = self.gds_validate_string(value_, node, 'CODCurrency')
            self.CODCurrency = value_
            self.CODCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructions')
            value_ = self.gds_validate_string(value_, node, 'instructions')
            self.instructions = value_
            self.instructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pickupLocationId')
            value_ = self.gds_validate_string(value_, node, 'pickupLocationId')
            self.pickupLocationId = value_
            self.pickupLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ftd':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ftd')
            ival_ = self.gds_validate_boolean(ival_, node, 'ftd')
            self.ftd = ival_
            self.ftd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ddp':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ddp')
            ival_ = self.gds_validate_boolean(ival_, node, 'ddp')
            self.ddp = ival_
            self.ddp_nsprefix_ = child_.prefix
# end class parcelType43


class customsDeclarationsType44(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, includeCustomsDeclarations=None, contents=None, importersReference=None, importersContact=None, officeOrigin=None, comments=None, description=None, invoiceNumber=None, licenceNumber=None, certificatNumber=None, importerAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.includeCustomsDeclarations = includeCustomsDeclarations
        self.includeCustomsDeclarations_nsprefix_ = None
        self.contents = contents
        self.contents_nsprefix_ = None
        self.importersReference = importersReference
        self.importersReference_nsprefix_ = None
        self.importersContact = importersContact
        self.importersContact_nsprefix_ = None
        self.officeOrigin = officeOrigin
        self.officeOrigin_nsprefix_ = None
        self.comments = comments
        self.comments_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.invoiceNumber = invoiceNumber
        self.invoiceNumber_nsprefix_ = None
        self.licenceNumber = licenceNumber
        self.licenceNumber_nsprefix_ = None
        self.certificatNumber = certificatNumber
        self.certificatNumber_nsprefix_ = None
        self.importerAddress = importerAddress
        self.importerAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsDeclarationsType44)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsDeclarationsType44.subclass:
            return customsDeclarationsType44.subclass(*args_, **kwargs_)
        else:
            return customsDeclarationsType44(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_includeCustomsDeclarations(self):
        return self.includeCustomsDeclarations
    def set_includeCustomsDeclarations(self, includeCustomsDeclarations):
        self.includeCustomsDeclarations = includeCustomsDeclarations
    def get_contents(self):
        return self.contents
    def set_contents(self, contents):
        self.contents = contents
    def get_importersReference(self):
        return self.importersReference
    def set_importersReference(self, importersReference):
        self.importersReference = importersReference
    def get_importersContact(self):
        return self.importersContact
    def set_importersContact(self, importersContact):
        self.importersContact = importersContact
    def get_officeOrigin(self):
        return self.officeOrigin
    def set_officeOrigin(self, officeOrigin):
        self.officeOrigin = officeOrigin
    def get_comments(self):
        return self.comments
    def set_comments(self, comments):
        self.comments = comments
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_invoiceNumber(self):
        return self.invoiceNumber
    def set_invoiceNumber(self, invoiceNumber):
        self.invoiceNumber = invoiceNumber
    def get_licenceNumber(self):
        return self.licenceNumber
    def set_licenceNumber(self, licenceNumber):
        self.licenceNumber = licenceNumber
    def get_certificatNumber(self):
        return self.certificatNumber
    def set_certificatNumber(self, certificatNumber):
        self.certificatNumber = certificatNumber
    def get_importerAddress(self):
        return self.importerAddress
    def set_importerAddress(self, importerAddress):
        self.importerAddress = importerAddress
    def _hasContent(self):
        if (
            self.includeCustomsDeclarations is not None or
            self.contents is not None or
            self.importersReference is not None or
            self.importersContact is not None or
            self.officeOrigin is not None or
            self.comments is not None or
            self.description is not None or
            self.invoiceNumber is not None or
            self.licenceNumber is not None or
            self.certificatNumber is not None or
            self.importerAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType44', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsDeclarationsType44')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsDeclarationsType44':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsDeclarationsType44')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsDeclarationsType44', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsDeclarationsType44'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType44', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.includeCustomsDeclarations is not None:
            namespaceprefix_ = self.includeCustomsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.includeCustomsDeclarations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincludeCustomsDeclarations>%s</%sincludeCustomsDeclarations>%s' % (namespaceprefix_ , self.gds_format_boolean(self.includeCustomsDeclarations, input_name='includeCustomsDeclarations'), namespaceprefix_ , eol_))
        if self.contents is not None:
            namespaceprefix_ = self.contents_nsprefix_ + ':' if (UseCapturedNS_ and self.contents_nsprefix_) else ''
            self.contents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='contents', pretty_print=pretty_print)
        if self.importersReference is not None:
            namespaceprefix_ = self.importersReference_nsprefix_ + ':' if (UseCapturedNS_ and self.importersReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersReference>%s</%simportersReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersReference), input_name='importersReference')), namespaceprefix_ , eol_))
        if self.importersContact is not None:
            namespaceprefix_ = self.importersContact_nsprefix_ + ':' if (UseCapturedNS_ and self.importersContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersContact>%s</%simportersContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersContact), input_name='importersContact')), namespaceprefix_ , eol_))
        if self.officeOrigin is not None:
            namespaceprefix_ = self.officeOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.officeOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sofficeOrigin>%s</%sofficeOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.officeOrigin), input_name='officeOrigin')), namespaceprefix_ , eol_))
        if self.comments is not None:
            namespaceprefix_ = self.comments_nsprefix_ + ':' if (UseCapturedNS_ and self.comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomments>%s</%scomments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.invoiceNumber is not None:
            namespaceprefix_ = self.invoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.invoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinvoiceNumber>%s</%sinvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.invoiceNumber), input_name='invoiceNumber')), namespaceprefix_ , eol_))
        if self.licenceNumber is not None:
            namespaceprefix_ = self.licenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.licenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicenceNumber>%s</%slicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.licenceNumber), input_name='licenceNumber')), namespaceprefix_ , eol_))
        if self.certificatNumber is not None:
            namespaceprefix_ = self.certificatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.certificatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scertificatNumber>%s</%scertificatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.certificatNumber), input_name='certificatNumber')), namespaceprefix_ , eol_))
        if self.importerAddress is not None:
            namespaceprefix_ = self.importerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.importerAddress_nsprefix_) else ''
            self.importerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='importerAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'includeCustomsDeclarations':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'includeCustomsDeclarations')
            ival_ = self.gds_validate_boolean(ival_, node, 'includeCustomsDeclarations')
            self.includeCustomsDeclarations = ival_
            self.includeCustomsDeclarations_nsprefix_ = child_.prefix
        elif nodeName_ == 'contents':
            obj_ = contentsType45.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.contents = obj_
            obj_.original_tagname_ = 'contents'
        elif nodeName_ == 'importersReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersReference')
            value_ = self.gds_validate_string(value_, node, 'importersReference')
            self.importersReference = value_
            self.importersReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'importersContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersContact')
            value_ = self.gds_validate_string(value_, node, 'importersContact')
            self.importersContact = value_
            self.importersContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'officeOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'officeOrigin')
            value_ = self.gds_validate_string(value_, node, 'officeOrigin')
            self.officeOrigin = value_
            self.officeOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comments')
            value_ = self.gds_validate_string(value_, node, 'comments')
            self.comments = value_
            self.comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'invoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'invoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'invoiceNumber')
            self.invoiceNumber = value_
            self.invoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'licenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'licenceNumber')
            value_ = self.gds_validate_string(value_, node, 'licenceNumber')
            self.licenceNumber = value_
            self.licenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'certificatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'certificatNumber')
            value_ = self.gds_validate_string(value_, node, 'certificatNumber')
            self.certificatNumber = value_
            self.certificatNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'importerAddress':
            obj_ = importerAddressType49.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.importerAddress = obj_
            obj_.original_tagname_ = 'importerAddress'
# end class customsDeclarationsType44


class contentsType45(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, article=None, category=None, original=None, explanations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if article is None:
            self.article = []
        else:
            self.article = article
        self.article_nsprefix_ = None
        self.category = category
        self.category_nsprefix_ = None
        if original is None:
            self.original = []
        else:
            self.original = original
        self.original_nsprefix_ = None
        self.explanations = explanations
        self.explanations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contentsType45)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contentsType45.subclass:
            return contentsType45.subclass(*args_, **kwargs_)
        else:
            return contentsType45(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_article(self):
        return self.article
    def set_article(self, article):
        self.article = article
    def add_article(self, value):
        self.article.append(value)
    def insert_article_at(self, index, value):
        self.article.insert(index, value)
    def replace_article_at(self, index, value):
        self.article[index] = value
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_original(self):
        return self.original
    def set_original(self, original):
        self.original = original
    def add_original(self, value):
        self.original.append(value)
    def insert_original_at(self, index, value):
        self.original.insert(index, value)
    def replace_original_at(self, index, value):
        self.original[index] = value
    def get_explanations(self):
        return self.explanations
    def set_explanations(self, explanations):
        self.explanations = explanations
    def _hasContent(self):
        if (
            self.article or
            self.category is not None or
            self.original or
            self.explanations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType45', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contentsType45')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'contentsType45':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='contentsType45')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='contentsType45', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='contentsType45'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType45', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for article_ in self.article:
            namespaceprefix_ = self.article_nsprefix_ + ':' if (UseCapturedNS_ and self.article_nsprefix_) else ''
            article_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='article', pretty_print=pretty_print)
        if self.category is not None:
            namespaceprefix_ = self.category_nsprefix_ + ':' if (UseCapturedNS_ and self.category_nsprefix_) else ''
            self.category.export(outfile, level, namespaceprefix_, namespacedef_='', name_='category', pretty_print=pretty_print)
        for original_ in self.original:
            namespaceprefix_ = self.original_nsprefix_ + ':' if (UseCapturedNS_ and self.original_nsprefix_) else ''
            original_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='original', pretty_print=pretty_print)
        if self.explanations is not None:
            namespaceprefix_ = self.explanations_nsprefix_ + ':' if (UseCapturedNS_ and self.explanations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexplanations>%s</%sexplanations>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.explanations), input_name='explanations')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'article':
            obj_ = articleType46.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.article.append(obj_)
            obj_.original_tagname_ = 'article'
        elif nodeName_ == 'category':
            obj_ = categoryType47.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.category = obj_
            obj_.original_tagname_ = 'category'
        elif nodeName_ == 'original':
            obj_ = originalType48.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.original.append(obj_)
            obj_.original_tagname_ = 'original'
        elif nodeName_ == 'explanations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'explanations')
            value_ = self.gds_validate_string(value_, node, 'explanations')
            self.explanations = value_
            self.explanations_nsprefix_ = child_.prefix
# end class contentsType45


class articleType46(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, description=None, quantity=None, weight=None, value=None, hsCode=None, originCountry=None, currency=None, artref=None, originalIdent=None, vatAmount=None, customsFees=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.hsCode = hsCode
        self.hsCode_nsprefix_ = None
        self.originCountry = originCountry
        self.originCountry_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.artref = artref
        self.artref_nsprefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.customsFees = customsFees
        self.customsFees_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleType46)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleType46.subclass:
            return articleType46.subclass(*args_, **kwargs_)
        else:
            return articleType46(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_hsCode(self):
        return self.hsCode
    def set_hsCode(self, hsCode):
        self.hsCode = hsCode
    def get_originCountry(self):
        return self.originCountry
    def set_originCountry(self, originCountry):
        self.originCountry = originCountry
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_artref(self):
        return self.artref
    def set_artref(self, artref):
        self.artref = artref
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_customsFees(self):
        return self.customsFees
    def set_customsFees(self, customsFees):
        self.customsFees = customsFees
    def _hasContent(self):
        if (
            self.description is not None or
            self.quantity is not None or
            self.weight is not None or
            self.value is not None or
            self.hsCode is not None or
            self.originCountry is not None or
            self.currency is not None or
            self.artref is not None or
            self.originalIdent is not None or
            self.vatAmount is not None or
            self.customsFees is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType46', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleType46')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleType46':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleType46')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleType46', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleType46'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType46', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.hsCode is not None:
            namespaceprefix_ = self.hsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.hsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shsCode>%s</%shsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hsCode), input_name='hsCode')), namespaceprefix_ , eol_))
        if self.originCountry is not None:
            namespaceprefix_ = self.originCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.originCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginCountry>%s</%soriginCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originCountry), input_name='originCountry')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.artref is not None:
            namespaceprefix_ = self.artref_nsprefix_ + ':' if (UseCapturedNS_ and self.artref_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartref>%s</%sartref>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.artref), input_name='artref')), namespaceprefix_ , eol_))
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_float(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.customsFees is not None:
            namespaceprefix_ = self.customsFees_nsprefix_ + ':' if (UseCapturedNS_ and self.customsFees_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsFees>%s</%scustomsFees>%s' % (namespaceprefix_ , self.gds_format_float(self.customsFees, input_name='customsFees'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'hsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hsCode')
            value_ = self.gds_validate_string(value_, node, 'hsCode')
            self.hsCode = value_
            self.hsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'originCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originCountry')
            value_ = self.gds_validate_string(value_, node, 'originCountry')
            self.originCountry = value_
            self.originCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'artref':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'artref')
            value_ = self.gds_validate_string(value_, node, 'artref')
            self.artref = value_
            self.artref_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'vatAmount')
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsFees' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsFees')
            fval_ = self.gds_validate_float(fval_, node, 'customsFees')
            self.customsFees = fval_
            self.customsFees_nsprefix_ = child_.prefix
# end class articleType46


class categoryType47(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType47.subclass:
            return categoryType47.subclass(*args_, **kwargs_)
        else:
            return categoryType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType47', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType47')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'categoryType47':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='categoryType47')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='categoryType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='categoryType47'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_integer(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'value')
            ival_ = self.gds_validate_integer(ival_, node, 'value')
            self.value = ival_
            self.value_nsprefix_ = child_.prefix
# end class categoryType47


class originalType48(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, originalIdent=None, originalInvoiceNumber=None, originalInvoiceDate=None, originalParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.originalInvoiceNumber = originalInvoiceNumber
        self.originalInvoiceNumber_nsprefix_ = None
        if isinstance(originalInvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(originalInvoiceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = originalInvoiceDate
        self.originalInvoiceDate = initvalue_
        self.originalInvoiceDate_nsprefix_ = None
        self.originalParcelNumber = originalParcelNumber
        self.originalParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, originalType48)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if originalType48.subclass:
            return originalType48.subclass(*args_, **kwargs_)
        else:
            return originalType48(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_originalInvoiceNumber(self):
        return self.originalInvoiceNumber
    def set_originalInvoiceNumber(self, originalInvoiceNumber):
        self.originalInvoiceNumber = originalInvoiceNumber
    def get_originalInvoiceDate(self):
        return self.originalInvoiceDate
    def set_originalInvoiceDate(self, originalInvoiceDate):
        self.originalInvoiceDate = originalInvoiceDate
    def get_originalParcelNumber(self):
        return self.originalParcelNumber
    def set_originalParcelNumber(self, originalParcelNumber):
        self.originalParcelNumber = originalParcelNumber
    def _hasContent(self):
        if (
            self.originalIdent is not None or
            self.originalInvoiceNumber is not None or
            self.originalInvoiceDate is not None or
            self.originalParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType48', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('originalType48')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'originalType48':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='originalType48')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='originalType48', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='originalType48'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType48', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.originalInvoiceNumber is not None:
            namespaceprefix_ = self.originalInvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceNumber>%s</%soriginalInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalInvoiceNumber), input_name='originalInvoiceNumber')), namespaceprefix_ , eol_))
        if self.originalInvoiceDate is not None:
            namespaceprefix_ = self.originalInvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceDate>%s</%soriginalInvoiceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.originalInvoiceDate, input_name='originalInvoiceDate'), namespaceprefix_ , eol_))
        if self.originalParcelNumber is not None:
            namespaceprefix_ = self.originalParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalParcelNumber>%s</%soriginalParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalParcelNumber), input_name='originalParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalInvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'originalInvoiceNumber')
            self.originalInvoiceNumber = value_
            self.originalInvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.originalInvoiceDate = dval_
            self.originalInvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'originalParcelNumber')
            self.originalParcelNumber = value_
            self.originalParcelNumber_nsprefix_ = child_.prefix
# end class originalType48


class importerAddressType49(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, importerAddressType49)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if importerAddressType49.subclass:
            return importerAddressType49.subclass(*args_, **kwargs_)
        else:
            return importerAddressType49(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType49', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('importerAddressType49')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'importerAddressType49':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='importerAddressType49')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='importerAddressType49', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='importerAddressType49'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType49', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class importerAddressType49


class senderType50(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType50)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType50.subclass:
            return senderType50.subclass(*args_, **kwargs_)
        else:
            return senderType50(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType50', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType50')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType50':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType50')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType50', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType50'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType50', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType51.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType50


class addressType51(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType51)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType51.subclass:
            return addressType51.subclass(*args_, **kwargs_)
        else:
            return addressType51(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType51', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType51')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType51':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType51')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType51', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType51'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType51', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType51


class addresseeType52(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType52)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType52.subclass:
            return addresseeType52.subclass(*args_, **kwargs_)
        else:
            return addresseeType52(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType52', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType52')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType52':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType52')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType52', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType52'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType52', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType53.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType52


class addressType53(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType53)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType53.subclass:
            return addressType53.subclass(*args_, **kwargs_)
        else:
            return addressType53(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType53', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType53')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType53':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType53')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType53', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType53'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType53', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType53


class codSenderAddressType54(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codSenderAddressType54)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codSenderAddressType54.subclass:
            return codSenderAddressType54.subclass(*args_, **kwargs_)
        else:
            return codSenderAddressType54(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType54', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codSenderAddressType54')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codSenderAddressType54':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codSenderAddressType54')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codSenderAddressType54', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codSenderAddressType54'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType54', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class codSenderAddressType54


class uploadDocumentType55(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, documentContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.documentContent = documentContent
        self.documentContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uploadDocumentType55)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uploadDocumentType55.subclass:
            return uploadDocumentType55.subclass(*args_, **kwargs_)
        else:
            return uploadDocumentType55(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_documentContent(self):
        return self.documentContent
    def set_documentContent(self, documentContent):
        self.documentContent = documentContent
    def _hasContent(self):
        if (
            self.documentContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType55', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uploadDocumentType55')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uploadDocumentType55':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uploadDocumentType55')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uploadDocumentType55', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uploadDocumentType55'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType55', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.documentContent is not None:
            namespaceprefix_ = self.documentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.documentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentContent>%s</%sdocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.documentContent, input_name='documentContent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'documentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'documentContent')
            else:
                bval_ = None
            self.documentContent = bval_
            self.documentContent_nsprefix_ = child_.prefix
# end class uploadDocumentType55


class fieldsType56(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType56)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType56.subclass:
            return fieldsType56.subclass(*args_, **kwargs_)
        else:
            return fieldsType56(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType56', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType56')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType56':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType56')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType56', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType56'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType56', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType57.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType56


class fieldType57(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType57)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType57.subclass:
            return fieldType57.subclass(*args_, **kwargs_)
        else:
            return fieldType57(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType57', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType57')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType57':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType57')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType57', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType57'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType57', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType57


class fieldsType58(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType58)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType58.subclass:
            return fieldsType58.subclass(*args_, **kwargs_)
        else:
            return fieldsType58(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType58', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType58')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType58':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType58')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType58', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType58'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType58', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType59.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType58


class fieldType59(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType59)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType59.subclass:
            return fieldType59.subclass(*args_, **kwargs_)
        else:
            return fieldType59(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType59', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType59')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType59':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType59')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType59', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType59'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType59', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType59


class addresseeType60(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType60)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType60.subclass:
            return addresseeType60.subclass(*args_, **kwargs_)
        else:
            return addresseeType60(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType60', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType60')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType60':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType60')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType60', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType60'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType60', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType61.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType60


class addressType61(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType61)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType61.subclass:
            return addressType61.subclass(*args_, **kwargs_)
        else:
            return addressType61(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType61', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType61')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType61':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType61')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType61', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType61'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType61', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType61


class senderType62(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType62)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType62.subclass:
            return senderType62.subclass(*args_, **kwargs_)
        else:
            return senderType62(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType62', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType62')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType62':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType62')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType62', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType62'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType62', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType63.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType62


class addressType63(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType63)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType63.subclass:
            return addressType63.subclass(*args_, **kwargs_)
        else:
            return addressType63(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType63', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType63')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType63':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType63')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType63', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType63'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType63', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType63


class fieldsType64(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType64)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType64.subclass:
            return fieldsType64.subclass(*args_, **kwargs_)
        else:
            return fieldsType64(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType64', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType64')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType64':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType64')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType64', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType64'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType64', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType65.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType64


class fieldType65(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType65)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType65.subclass:
            return fieldType65.subclass(*args_, **kwargs_)
        else:
            return fieldType65(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType65', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType65')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType65':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType65')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType65', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType65'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType65', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType65


class senderType66(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, zipCode=None, city=None, countryCode=None, email=None, phoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType66)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType66.subclass:
            return senderType66.subclass(*args_, **kwargs_)
        else:
            return senderType66(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.zipCode is not None or
            self.city is not None or
            self.countryCode is not None or
            self.email is not None or
            self.phoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType66', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType66')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType66':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType66')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType66', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType66'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType66', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
# end class senderType66


class checkGenerateLabelRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, outputFormat=None, letter=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.outputFormat = outputFormat
        self.outputFormat_nsprefix_ = None
        self.letter = letter
        self.letter_nsprefix_ = None
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, checkGenerateLabelRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if checkGenerateLabelRequestType.subclass:
            return checkGenerateLabelRequestType.subclass(*args_, **kwargs_)
        else:
            return checkGenerateLabelRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_outputFormat(self):
        return self.outputFormat
    def set_outputFormat(self, outputFormat):
        self.outputFormat = outputFormat
    def get_letter(self):
        return self.letter
    def set_letter(self, letter):
        self.letter = letter
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.outputFormat is not None or
            self.letter is not None or
            self.fields is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='checkGenerateLabelRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('checkGenerateLabelRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'checkGenerateLabelRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='checkGenerateLabelRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='checkGenerateLabelRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='checkGenerateLabelRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='checkGenerateLabelRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.outputFormat is not None:
            namespaceprefix_ = self.outputFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.outputFormat_nsprefix_) else ''
            self.outputFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='outputFormat', pretty_print=pretty_print)
        if self.letter is not None:
            namespaceprefix_ = self.letter_nsprefix_ + ':' if (UseCapturedNS_ and self.letter_nsprefix_) else ''
            self.letter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='letter', pretty_print=pretty_print)
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputFormat':
            obj_ = outputFormatType67.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.outputFormat = obj_
            obj_.original_tagname_ = 'outputFormat'
        elif nodeName_ == 'letter':
            obj_ = letterType68.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.letter = obj_
            obj_.original_tagname_ = 'letter'
        elif nodeName_ == 'fields':
            obj_ = fieldsType83.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
# end class checkGenerateLabelRequestType


class outputFormatType67(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, x=None, y=None, outputPrintingType=None, dematerialized=None, returnType=None, printCODDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.x = x
        self.x_nsprefix_ = None
        self.y = y
        self.y_nsprefix_ = None
        self.outputPrintingType = outputPrintingType
        self.outputPrintingType_nsprefix_ = None
        self.dematerialized = dematerialized
        self.dematerialized_nsprefix_ = None
        self.returnType = returnType
        self.returnType_nsprefix_ = None
        self.printCODDocument = printCODDocument
        self.printCODDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, outputFormatType67)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if outputFormatType67.subclass:
            return outputFormatType67.subclass(*args_, **kwargs_)
        else:
            return outputFormatType67(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_x(self):
        return self.x
    def set_x(self, x):
        self.x = x
    def get_y(self):
        return self.y
    def set_y(self, y):
        self.y = y
    def get_outputPrintingType(self):
        return self.outputPrintingType
    def set_outputPrintingType(self, outputPrintingType):
        self.outputPrintingType = outputPrintingType
    def get_dematerialized(self):
        return self.dematerialized
    def set_dematerialized(self, dematerialized):
        self.dematerialized = dematerialized
    def get_returnType(self):
        return self.returnType
    def set_returnType(self, returnType):
        self.returnType = returnType
    def get_printCODDocument(self):
        return self.printCODDocument
    def set_printCODDocument(self, printCODDocument):
        self.printCODDocument = printCODDocument
    def _hasContent(self):
        if (
            self.x is not None or
            self.y is not None or
            self.outputPrintingType is not None or
            self.dematerialized is not None or
            self.returnType is not None or
            self.printCODDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType67', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('outputFormatType67')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'outputFormatType67':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='outputFormatType67')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='outputFormatType67', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='outputFormatType67'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='outputFormatType67', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.x is not None:
            namespaceprefix_ = self.x_nsprefix_ + ':' if (UseCapturedNS_ and self.x_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sx>%s</%sx>%s' % (namespaceprefix_ , self.gds_format_integer(self.x, input_name='x'), namespaceprefix_ , eol_))
        if self.y is not None:
            namespaceprefix_ = self.y_nsprefix_ + ':' if (UseCapturedNS_ and self.y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sy>%s</%sy>%s' % (namespaceprefix_ , self.gds_format_integer(self.y, input_name='y'), namespaceprefix_ , eol_))
        if self.outputPrintingType is not None:
            namespaceprefix_ = self.outputPrintingType_nsprefix_ + ':' if (UseCapturedNS_ and self.outputPrintingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputPrintingType>%s</%soutputPrintingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.outputPrintingType), input_name='outputPrintingType')), namespaceprefix_ , eol_))
        if self.dematerialized is not None:
            namespaceprefix_ = self.dematerialized_nsprefix_ + ':' if (UseCapturedNS_ and self.dematerialized_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdematerialized>%s</%sdematerialized>%s' % (namespaceprefix_ , self.gds_format_boolean(self.dematerialized, input_name='dematerialized'), namespaceprefix_ , eol_))
        if self.returnType is not None:
            namespaceprefix_ = self.returnType_nsprefix_ + ':' if (UseCapturedNS_ and self.returnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnType>%s</%sreturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.returnType), input_name='returnType')), namespaceprefix_ , eol_))
        if self.printCODDocument is not None:
            namespaceprefix_ = self.printCODDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.printCODDocument_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprintCODDocument>%s</%sprintCODDocument>%s' % (namespaceprefix_ , self.gds_format_boolean(self.printCODDocument, input_name='printCODDocument'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'x' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'x')
            ival_ = self.gds_validate_integer(ival_, node, 'x')
            self.x = ival_
            self.x_nsprefix_ = child_.prefix
        elif nodeName_ == 'y' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'y')
            ival_ = self.gds_validate_integer(ival_, node, 'y')
            self.y = ival_
            self.y_nsprefix_ = child_.prefix
        elif nodeName_ == 'outputPrintingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'outputPrintingType')
            value_ = self.gds_validate_string(value_, node, 'outputPrintingType')
            self.outputPrintingType = value_
            self.outputPrintingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'dematerialized':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'dematerialized')
            ival_ = self.gds_validate_boolean(ival_, node, 'dematerialized')
            self.dematerialized = ival_
            self.dematerialized_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'returnType')
            value_ = self.gds_validate_string(value_, node, 'returnType')
            self.returnType = value_
            self.returnType_nsprefix_ = child_.prefix
        elif nodeName_ == 'printCODDocument':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'printCODDocument')
            ival_ = self.gds_validate_boolean(ival_, node, 'printCODDocument')
            self.printCODDocument = ival_
            self.printCODDocument_nsprefix_ = child_.prefix
# end class outputFormatType67


class letterType68(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, service=None, parcel=None, customsDeclarations=None, sender=None, addressee=None, codSenderAddress=None, uploadDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.parcel = parcel
        self.parcel_nsprefix_ = None
        self.customsDeclarations = customsDeclarations
        self.customsDeclarations_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.codSenderAddress = codSenderAddress
        self.codSenderAddress_nsprefix_ = None
        self.uploadDocument = uploadDocument
        self.uploadDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, letterType68)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if letterType68.subclass:
            return letterType68.subclass(*args_, **kwargs_)
        else:
            return letterType68(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_parcel(self):
        return self.parcel
    def set_parcel(self, parcel):
        self.parcel = parcel
    def get_customsDeclarations(self):
        return self.customsDeclarations
    def set_customsDeclarations(self, customsDeclarations):
        self.customsDeclarations = customsDeclarations
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_codSenderAddress(self):
        return self.codSenderAddress
    def set_codSenderAddress(self, codSenderAddress):
        self.codSenderAddress = codSenderAddress
    def get_uploadDocument(self):
        return self.uploadDocument
    def set_uploadDocument(self, uploadDocument):
        self.uploadDocument = uploadDocument
    def _hasContent(self):
        if (
            self.service is not None or
            self.parcel is not None or
            self.customsDeclarations is not None or
            self.sender is not None or
            self.addressee is not None or
            self.codSenderAddress is not None or
            self.uploadDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType68', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('letterType68')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'letterType68':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='letterType68')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='letterType68', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='letterType68'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType68', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            self.service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='service', pretty_print=pretty_print)
        if self.parcel is not None:
            namespaceprefix_ = self.parcel_nsprefix_ + ':' if (UseCapturedNS_ and self.parcel_nsprefix_) else ''
            self.parcel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parcel', pretty_print=pretty_print)
        if self.customsDeclarations is not None:
            namespaceprefix_ = self.customsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.customsDeclarations_nsprefix_) else ''
            self.customsDeclarations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsDeclarations', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.codSenderAddress is not None:
            namespaceprefix_ = self.codSenderAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.codSenderAddress_nsprefix_) else ''
            self.codSenderAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codSenderAddress', pretty_print=pretty_print)
        if self.uploadDocument is not None:
            namespaceprefix_ = self.uploadDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.uploadDocument_nsprefix_) else ''
            self.uploadDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uploadDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'service':
            obj_ = serviceType69.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.service = obj_
            obj_.original_tagname_ = 'service'
        elif nodeName_ == 'parcel':
            obj_ = parcelType70.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.parcel = obj_
            obj_.original_tagname_ = 'parcel'
        elif nodeName_ == 'customsDeclarations':
            obj_ = customsDeclarationsType71.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsDeclarations = obj_
            obj_.original_tagname_ = 'customsDeclarations'
        elif nodeName_ == 'sender':
            obj_ = senderType77.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'addressee':
            obj_ = addresseeType79.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'codSenderAddress':
            obj_ = codSenderAddressType81.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codSenderAddress = obj_
            obj_.original_tagname_ = 'codSenderAddress'
        elif nodeName_ == 'uploadDocument':
            obj_ = uploadDocumentType82.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uploadDocument = obj_
            obj_.original_tagname_ = 'uploadDocument'
# end class letterType68


class serviceType69(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, productCode=None, depositDate=None, mailBoxPicking=None, mailBoxPickingDate=None, vatCode=None, vatPercentage=None, vatAmount=None, transportationAmount=None, totalAmount=None, orderNumber=None, commercialName=None, returnTypeChoice=None, reseauPostal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        if isinstance(depositDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(depositDate, '%Y-%m-%d').date()
        else:
            initvalue_ = depositDate
        self.depositDate = initvalue_
        self.depositDate_nsprefix_ = None
        self.mailBoxPicking = mailBoxPicking
        self.mailBoxPicking_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.vatCode = vatCode
        self.vatCode_nsprefix_ = None
        self.vatPercentage = vatPercentage
        self.vatPercentage_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.transportationAmount = transportationAmount
        self.transportationAmount_nsprefix_ = None
        self.totalAmount = totalAmount
        self.totalAmount_nsprefix_ = None
        self.orderNumber = orderNumber
        self.orderNumber_nsprefix_ = None
        self.commercialName = commercialName
        self.commercialName_nsprefix_ = None
        self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
        self.reseauPostal = reseauPostal
        self.reseauPostal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType69)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType69.subclass:
            return serviceType69.subclass(*args_, **kwargs_)
        else:
            return serviceType69(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_depositDate(self):
        return self.depositDate
    def set_depositDate(self, depositDate):
        self.depositDate = depositDate
    def get_mailBoxPicking(self):
        return self.mailBoxPicking
    def set_mailBoxPicking(self, mailBoxPicking):
        self.mailBoxPicking = mailBoxPicking
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_vatCode(self):
        return self.vatCode
    def set_vatCode(self, vatCode):
        self.vatCode = vatCode
    def get_vatPercentage(self):
        return self.vatPercentage
    def set_vatPercentage(self, vatPercentage):
        self.vatPercentage = vatPercentage
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_transportationAmount(self):
        return self.transportationAmount
    def set_transportationAmount(self, transportationAmount):
        self.transportationAmount = transportationAmount
    def get_totalAmount(self):
        return self.totalAmount
    def set_totalAmount(self, totalAmount):
        self.totalAmount = totalAmount
    def get_orderNumber(self):
        return self.orderNumber
    def set_orderNumber(self, orderNumber):
        self.orderNumber = orderNumber
    def get_commercialName(self):
        return self.commercialName
    def set_commercialName(self, commercialName):
        self.commercialName = commercialName
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def get_reseauPostal(self):
        return self.reseauPostal
    def set_reseauPostal(self, reseauPostal):
        self.reseauPostal = reseauPostal
    def _hasContent(self):
        if (
            self.productCode is not None or
            self.depositDate is not None or
            self.mailBoxPicking is not None or
            self.mailBoxPickingDate is not None or
            self.vatCode is not None or
            self.vatPercentage is not None or
            self.vatAmount is not None or
            self.transportationAmount is not None or
            self.totalAmount is not None or
            self.orderNumber is not None or
            self.commercialName is not None or
            self.returnTypeChoice is not None or
            self.reseauPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType69', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType69')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'serviceType69':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='serviceType69')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='serviceType69', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='serviceType69'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType69', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.depositDate is not None:
            namespaceprefix_ = self.depositDate_nsprefix_ + ':' if (UseCapturedNS_ and self.depositDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepositDate>%s</%sdepositDate>%s' % (namespaceprefix_ , self.gds_format_date(self.depositDate, input_name='depositDate'), namespaceprefix_ , eol_))
        if self.mailBoxPicking is not None:
            namespaceprefix_ = self.mailBoxPicking_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPicking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPicking>%s</%smailBoxPicking>%s' % (namespaceprefix_ , self.gds_format_boolean(self.mailBoxPicking, input_name='mailBoxPicking'), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.vatCode is not None:
            namespaceprefix_ = self.vatCode_nsprefix_ + ':' if (UseCapturedNS_ and self.vatCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatCode>%s</%svatCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatCode, input_name='vatCode'), namespaceprefix_ , eol_))
        if self.vatPercentage is not None:
            namespaceprefix_ = self.vatPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.vatPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatPercentage>%s</%svatPercentage>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatPercentage, input_name='vatPercentage'), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.transportationAmount is not None:
            namespaceprefix_ = self.transportationAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.transportationAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransportationAmount>%s</%stransportationAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.transportationAmount, input_name='transportationAmount'), namespaceprefix_ , eol_))
        if self.totalAmount is not None:
            namespaceprefix_ = self.totalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.totalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalAmount>%s</%stotalAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.totalAmount, input_name='totalAmount'), namespaceprefix_ , eol_))
        if self.orderNumber is not None:
            namespaceprefix_ = self.orderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.orderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorderNumber>%s</%sorderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orderNumber), input_name='orderNumber')), namespaceprefix_ , eol_))
        if self.commercialName is not None:
            namespaceprefix_ = self.commercialName_nsprefix_ + ':' if (UseCapturedNS_ and self.commercialName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommercialName>%s</%scommercialName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.commercialName), input_name='commercialName')), namespaceprefix_ , eol_))
        if self.returnTypeChoice is not None:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.returnTypeChoice, input_name='returnTypeChoice'), namespaceprefix_ , eol_))
        if self.reseauPostal is not None:
            namespaceprefix_ = self.reseauPostal_nsprefix_ + ':' if (UseCapturedNS_ and self.reseauPostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreseauPostal>%s</%sreseauPostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reseauPostal), input_name='reseauPostal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'depositDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.depositDate = dval_
            self.depositDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPicking':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'mailBoxPicking')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailBoxPicking')
            self.mailBoxPicking = ival_
            self.mailBoxPicking_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatCode')
            ival_ = self.gds_validate_integer(ival_, node, 'vatCode')
            self.vatCode = ival_
            self.vatCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatPercentage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatPercentage')
            ival_ = self.gds_validate_integer(ival_, node, 'vatPercentage')
            self.vatPercentage = ival_
            self.vatPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'vatAmount')
            self.vatAmount = ival_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'transportationAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'transportationAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'transportationAmount')
            self.transportationAmount = ival_
            self.transportationAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'totalAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'totalAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'totalAmount')
            self.totalAmount = ival_
            self.totalAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'orderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orderNumber')
            value_ = self.gds_validate_string(value_, node, 'orderNumber')
            self.orderNumber = value_
            self.orderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'commercialName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'commercialName')
            value_ = self.gds_validate_string(value_, node, 'commercialName')
            self.commercialName = value_
            self.commercialName_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'returnTypeChoice')
            ival_ = self.gds_validate_integer(ival_, node, 'returnTypeChoice')
            self.returnTypeChoice = ival_
            self.returnTypeChoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'reseauPostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reseauPostal')
            value_ = self.gds_validate_string(value_, node, 'reseauPostal')
            self.reseauPostal = value_
            self.reseauPostal_nsprefix_ = child_.prefix
# end class serviceType69


class parcelType70(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelNumber=None, insuranceAmount=None, insuranceValue=None, recommendationLevel=None, weight=None, nonMachinable=None, COD=None, CODAmount=None, CODCurrency=None, returnReceipt=None, instructions=None, pickupLocationId=None, ftd=None, ddp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.insuranceAmount = insuranceAmount
        self.insuranceAmount_nsprefix_ = None
        self.insuranceValue = insuranceValue
        self.insuranceValue_nsprefix_ = None
        self.recommendationLevel = recommendationLevel
        self.recommendationLevel_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
        self.CODCurrency = CODCurrency
        self.CODCurrency_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.instructions = instructions
        self.instructions_nsprefix_ = None
        self.pickupLocationId = pickupLocationId
        self.pickupLocationId_nsprefix_ = None
        self.ftd = ftd
        self.ftd_nsprefix_ = None
        self.ddp = ddp
        self.ddp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parcelType70)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parcelType70.subclass:
            return parcelType70.subclass(*args_, **kwargs_)
        else:
            return parcelType70(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_insuranceAmount(self):
        return self.insuranceAmount
    def set_insuranceAmount(self, insuranceAmount):
        self.insuranceAmount = insuranceAmount
    def get_insuranceValue(self):
        return self.insuranceValue
    def set_insuranceValue(self, insuranceValue):
        self.insuranceValue = insuranceValue
    def get_recommendationLevel(self):
        return self.recommendationLevel
    def set_recommendationLevel(self, recommendationLevel):
        self.recommendationLevel = recommendationLevel
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def get_CODCurrency(self):
        return self.CODCurrency
    def set_CODCurrency(self, CODCurrency):
        self.CODCurrency = CODCurrency
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_instructions(self):
        return self.instructions
    def set_instructions(self, instructions):
        self.instructions = instructions
    def get_pickupLocationId(self):
        return self.pickupLocationId
    def set_pickupLocationId(self, pickupLocationId):
        self.pickupLocationId = pickupLocationId
    def get_ftd(self):
        return self.ftd
    def set_ftd(self, ftd):
        self.ftd = ftd
    def get_ddp(self):
        return self.ddp
    def set_ddp(self, ddp):
        self.ddp = ddp
    def _hasContent(self):
        if (
            self.parcelNumber is not None or
            self.insuranceAmount is not None or
            self.insuranceValue is not None or
            self.recommendationLevel is not None or
            self.weight is not None or
            self.nonMachinable is not None or
            self.COD is not None or
            self.CODAmount is not None or
            self.CODCurrency is not None or
            self.returnReceipt is not None or
            self.instructions is not None or
            self.pickupLocationId is not None or
            self.ftd is not None or
            self.ddp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType70', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parcelType70')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'parcelType70':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='parcelType70')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='parcelType70', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='parcelType70'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType70', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.insuranceAmount is not None:
            namespaceprefix_ = self.insuranceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceAmount>%s</%sinsuranceAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceAmount, input_name='insuranceAmount'), namespaceprefix_ , eol_))
        if self.insuranceValue is not None:
            namespaceprefix_ = self.insuranceValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceValue>%s</%sinsuranceValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceValue, input_name='insuranceValue'), namespaceprefix_ , eol_))
        if self.recommendationLevel is not None:
            namespaceprefix_ = self.recommendationLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.recommendationLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecommendationLevel>%s</%srecommendationLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recommendationLevel), input_name='recommendationLevel')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOD>%s</%sCOD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.COD, input_name='COD'), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODAmount>%s</%sCODAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.CODAmount, input_name='CODAmount'), namespaceprefix_ , eol_))
        if self.CODCurrency is not None:
            namespaceprefix_ = self.CODCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.CODCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODCurrency>%s</%sCODCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODCurrency), input_name='CODCurrency')), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.instructions is not None:
            namespaceprefix_ = self.instructions_nsprefix_ + ':' if (UseCapturedNS_ and self.instructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructions>%s</%sinstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructions), input_name='instructions')), namespaceprefix_ , eol_))
        if self.pickupLocationId is not None:
            namespaceprefix_ = self.pickupLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupLocationId>%s</%spickupLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pickupLocationId), input_name='pickupLocationId')), namespaceprefix_ , eol_))
        if self.ftd is not None:
            namespaceprefix_ = self.ftd_nsprefix_ + ':' if (UseCapturedNS_ and self.ftd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sftd>%s</%sftd>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ftd, input_name='ftd'), namespaceprefix_ , eol_))
        if self.ddp is not None:
            namespaceprefix_ = self.ddp_nsprefix_ + ':' if (UseCapturedNS_ and self.ddp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sddp>%s</%sddp>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ddp, input_name='ddp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceAmount')
            self.insuranceAmount = ival_
            self.insuranceAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceValue')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceValue')
            self.insuranceValue = ival_
            self.insuranceValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'recommendationLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recommendationLevel')
            value_ = self.gds_validate_string(value_, node, 'recommendationLevel')
            self.recommendationLevel = value_
            self.recommendationLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'COD')
            ival_ = self.gds_validate_boolean(ival_, node, 'COD')
            self.COD = ival_
            self.COD_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CODAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'CODAmount')
            self.CODAmount = ival_
            self.CODAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODCurrency')
            value_ = self.gds_validate_string(value_, node, 'CODCurrency')
            self.CODCurrency = value_
            self.CODCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructions')
            value_ = self.gds_validate_string(value_, node, 'instructions')
            self.instructions = value_
            self.instructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pickupLocationId')
            value_ = self.gds_validate_string(value_, node, 'pickupLocationId')
            self.pickupLocationId = value_
            self.pickupLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ftd':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ftd')
            ival_ = self.gds_validate_boolean(ival_, node, 'ftd')
            self.ftd = ival_
            self.ftd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ddp':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ddp')
            ival_ = self.gds_validate_boolean(ival_, node, 'ddp')
            self.ddp = ival_
            self.ddp_nsprefix_ = child_.prefix
# end class parcelType70


class customsDeclarationsType71(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, includeCustomsDeclarations=None, contents=None, importersReference=None, importersContact=None, officeOrigin=None, comments=None, description=None, invoiceNumber=None, licenceNumber=None, certificatNumber=None, importerAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.includeCustomsDeclarations = includeCustomsDeclarations
        self.includeCustomsDeclarations_nsprefix_ = None
        self.contents = contents
        self.contents_nsprefix_ = None
        self.importersReference = importersReference
        self.importersReference_nsprefix_ = None
        self.importersContact = importersContact
        self.importersContact_nsprefix_ = None
        self.officeOrigin = officeOrigin
        self.officeOrigin_nsprefix_ = None
        self.comments = comments
        self.comments_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.invoiceNumber = invoiceNumber
        self.invoiceNumber_nsprefix_ = None
        self.licenceNumber = licenceNumber
        self.licenceNumber_nsprefix_ = None
        self.certificatNumber = certificatNumber
        self.certificatNumber_nsprefix_ = None
        self.importerAddress = importerAddress
        self.importerAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsDeclarationsType71)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsDeclarationsType71.subclass:
            return customsDeclarationsType71.subclass(*args_, **kwargs_)
        else:
            return customsDeclarationsType71(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_includeCustomsDeclarations(self):
        return self.includeCustomsDeclarations
    def set_includeCustomsDeclarations(self, includeCustomsDeclarations):
        self.includeCustomsDeclarations = includeCustomsDeclarations
    def get_contents(self):
        return self.contents
    def set_contents(self, contents):
        self.contents = contents
    def get_importersReference(self):
        return self.importersReference
    def set_importersReference(self, importersReference):
        self.importersReference = importersReference
    def get_importersContact(self):
        return self.importersContact
    def set_importersContact(self, importersContact):
        self.importersContact = importersContact
    def get_officeOrigin(self):
        return self.officeOrigin
    def set_officeOrigin(self, officeOrigin):
        self.officeOrigin = officeOrigin
    def get_comments(self):
        return self.comments
    def set_comments(self, comments):
        self.comments = comments
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_invoiceNumber(self):
        return self.invoiceNumber
    def set_invoiceNumber(self, invoiceNumber):
        self.invoiceNumber = invoiceNumber
    def get_licenceNumber(self):
        return self.licenceNumber
    def set_licenceNumber(self, licenceNumber):
        self.licenceNumber = licenceNumber
    def get_certificatNumber(self):
        return self.certificatNumber
    def set_certificatNumber(self, certificatNumber):
        self.certificatNumber = certificatNumber
    def get_importerAddress(self):
        return self.importerAddress
    def set_importerAddress(self, importerAddress):
        self.importerAddress = importerAddress
    def _hasContent(self):
        if (
            self.includeCustomsDeclarations is not None or
            self.contents is not None or
            self.importersReference is not None or
            self.importersContact is not None or
            self.officeOrigin is not None or
            self.comments is not None or
            self.description is not None or
            self.invoiceNumber is not None or
            self.licenceNumber is not None or
            self.certificatNumber is not None or
            self.importerAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType71', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsDeclarationsType71')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsDeclarationsType71':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsDeclarationsType71')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsDeclarationsType71', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsDeclarationsType71'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType71', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.includeCustomsDeclarations is not None:
            namespaceprefix_ = self.includeCustomsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.includeCustomsDeclarations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincludeCustomsDeclarations>%s</%sincludeCustomsDeclarations>%s' % (namespaceprefix_ , self.gds_format_boolean(self.includeCustomsDeclarations, input_name='includeCustomsDeclarations'), namespaceprefix_ , eol_))
        if self.contents is not None:
            namespaceprefix_ = self.contents_nsprefix_ + ':' if (UseCapturedNS_ and self.contents_nsprefix_) else ''
            self.contents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='contents', pretty_print=pretty_print)
        if self.importersReference is not None:
            namespaceprefix_ = self.importersReference_nsprefix_ + ':' if (UseCapturedNS_ and self.importersReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersReference>%s</%simportersReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersReference), input_name='importersReference')), namespaceprefix_ , eol_))
        if self.importersContact is not None:
            namespaceprefix_ = self.importersContact_nsprefix_ + ':' if (UseCapturedNS_ and self.importersContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersContact>%s</%simportersContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersContact), input_name='importersContact')), namespaceprefix_ , eol_))
        if self.officeOrigin is not None:
            namespaceprefix_ = self.officeOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.officeOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sofficeOrigin>%s</%sofficeOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.officeOrigin), input_name='officeOrigin')), namespaceprefix_ , eol_))
        if self.comments is not None:
            namespaceprefix_ = self.comments_nsprefix_ + ':' if (UseCapturedNS_ and self.comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomments>%s</%scomments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.invoiceNumber is not None:
            namespaceprefix_ = self.invoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.invoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinvoiceNumber>%s</%sinvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.invoiceNumber), input_name='invoiceNumber')), namespaceprefix_ , eol_))
        if self.licenceNumber is not None:
            namespaceprefix_ = self.licenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.licenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicenceNumber>%s</%slicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.licenceNumber), input_name='licenceNumber')), namespaceprefix_ , eol_))
        if self.certificatNumber is not None:
            namespaceprefix_ = self.certificatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.certificatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scertificatNumber>%s</%scertificatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.certificatNumber), input_name='certificatNumber')), namespaceprefix_ , eol_))
        if self.importerAddress is not None:
            namespaceprefix_ = self.importerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.importerAddress_nsprefix_) else ''
            self.importerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='importerAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'includeCustomsDeclarations':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'includeCustomsDeclarations')
            ival_ = self.gds_validate_boolean(ival_, node, 'includeCustomsDeclarations')
            self.includeCustomsDeclarations = ival_
            self.includeCustomsDeclarations_nsprefix_ = child_.prefix
        elif nodeName_ == 'contents':
            obj_ = contentsType72.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.contents = obj_
            obj_.original_tagname_ = 'contents'
        elif nodeName_ == 'importersReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersReference')
            value_ = self.gds_validate_string(value_, node, 'importersReference')
            self.importersReference = value_
            self.importersReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'importersContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersContact')
            value_ = self.gds_validate_string(value_, node, 'importersContact')
            self.importersContact = value_
            self.importersContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'officeOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'officeOrigin')
            value_ = self.gds_validate_string(value_, node, 'officeOrigin')
            self.officeOrigin = value_
            self.officeOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comments')
            value_ = self.gds_validate_string(value_, node, 'comments')
            self.comments = value_
            self.comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'invoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'invoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'invoiceNumber')
            self.invoiceNumber = value_
            self.invoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'licenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'licenceNumber')
            value_ = self.gds_validate_string(value_, node, 'licenceNumber')
            self.licenceNumber = value_
            self.licenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'certificatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'certificatNumber')
            value_ = self.gds_validate_string(value_, node, 'certificatNumber')
            self.certificatNumber = value_
            self.certificatNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'importerAddress':
            obj_ = importerAddressType76.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.importerAddress = obj_
            obj_.original_tagname_ = 'importerAddress'
# end class customsDeclarationsType71


class contentsType72(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, article=None, category=None, original=None, explanations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if article is None:
            self.article = []
        else:
            self.article = article
        self.article_nsprefix_ = None
        self.category = category
        self.category_nsprefix_ = None
        if original is None:
            self.original = []
        else:
            self.original = original
        self.original_nsprefix_ = None
        self.explanations = explanations
        self.explanations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contentsType72)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contentsType72.subclass:
            return contentsType72.subclass(*args_, **kwargs_)
        else:
            return contentsType72(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_article(self):
        return self.article
    def set_article(self, article):
        self.article = article
    def add_article(self, value):
        self.article.append(value)
    def insert_article_at(self, index, value):
        self.article.insert(index, value)
    def replace_article_at(self, index, value):
        self.article[index] = value
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_original(self):
        return self.original
    def set_original(self, original):
        self.original = original
    def add_original(self, value):
        self.original.append(value)
    def insert_original_at(self, index, value):
        self.original.insert(index, value)
    def replace_original_at(self, index, value):
        self.original[index] = value
    def get_explanations(self):
        return self.explanations
    def set_explanations(self, explanations):
        self.explanations = explanations
    def _hasContent(self):
        if (
            self.article or
            self.category is not None or
            self.original or
            self.explanations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType72', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contentsType72')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'contentsType72':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='contentsType72')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='contentsType72', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='contentsType72'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType72', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for article_ in self.article:
            namespaceprefix_ = self.article_nsprefix_ + ':' if (UseCapturedNS_ and self.article_nsprefix_) else ''
            article_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='article', pretty_print=pretty_print)
        if self.category is not None:
            namespaceprefix_ = self.category_nsprefix_ + ':' if (UseCapturedNS_ and self.category_nsprefix_) else ''
            self.category.export(outfile, level, namespaceprefix_, namespacedef_='', name_='category', pretty_print=pretty_print)
        for original_ in self.original:
            namespaceprefix_ = self.original_nsprefix_ + ':' if (UseCapturedNS_ and self.original_nsprefix_) else ''
            original_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='original', pretty_print=pretty_print)
        if self.explanations is not None:
            namespaceprefix_ = self.explanations_nsprefix_ + ':' if (UseCapturedNS_ and self.explanations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexplanations>%s</%sexplanations>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.explanations), input_name='explanations')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'article':
            obj_ = articleType73.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.article.append(obj_)
            obj_.original_tagname_ = 'article'
        elif nodeName_ == 'category':
            obj_ = categoryType74.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.category = obj_
            obj_.original_tagname_ = 'category'
        elif nodeName_ == 'original':
            obj_ = originalType75.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.original.append(obj_)
            obj_.original_tagname_ = 'original'
        elif nodeName_ == 'explanations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'explanations')
            value_ = self.gds_validate_string(value_, node, 'explanations')
            self.explanations = value_
            self.explanations_nsprefix_ = child_.prefix
# end class contentsType72


class articleType73(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, description=None, quantity=None, weight=None, value=None, hsCode=None, originCountry=None, currency=None, artref=None, originalIdent=None, vatAmount=None, customsFees=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.hsCode = hsCode
        self.hsCode_nsprefix_ = None
        self.originCountry = originCountry
        self.originCountry_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.artref = artref
        self.artref_nsprefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.customsFees = customsFees
        self.customsFees_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleType73)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleType73.subclass:
            return articleType73.subclass(*args_, **kwargs_)
        else:
            return articleType73(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_hsCode(self):
        return self.hsCode
    def set_hsCode(self, hsCode):
        self.hsCode = hsCode
    def get_originCountry(self):
        return self.originCountry
    def set_originCountry(self, originCountry):
        self.originCountry = originCountry
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_artref(self):
        return self.artref
    def set_artref(self, artref):
        self.artref = artref
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_customsFees(self):
        return self.customsFees
    def set_customsFees(self, customsFees):
        self.customsFees = customsFees
    def _hasContent(self):
        if (
            self.description is not None or
            self.quantity is not None or
            self.weight is not None or
            self.value is not None or
            self.hsCode is not None or
            self.originCountry is not None or
            self.currency is not None or
            self.artref is not None or
            self.originalIdent is not None or
            self.vatAmount is not None or
            self.customsFees is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType73', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleType73')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleType73':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleType73')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleType73', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleType73'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType73', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.hsCode is not None:
            namespaceprefix_ = self.hsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.hsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shsCode>%s</%shsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hsCode), input_name='hsCode')), namespaceprefix_ , eol_))
        if self.originCountry is not None:
            namespaceprefix_ = self.originCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.originCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginCountry>%s</%soriginCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originCountry), input_name='originCountry')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.artref is not None:
            namespaceprefix_ = self.artref_nsprefix_ + ':' if (UseCapturedNS_ and self.artref_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartref>%s</%sartref>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.artref), input_name='artref')), namespaceprefix_ , eol_))
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_float(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.customsFees is not None:
            namespaceprefix_ = self.customsFees_nsprefix_ + ':' if (UseCapturedNS_ and self.customsFees_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsFees>%s</%scustomsFees>%s' % (namespaceprefix_ , self.gds_format_float(self.customsFees, input_name='customsFees'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'hsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hsCode')
            value_ = self.gds_validate_string(value_, node, 'hsCode')
            self.hsCode = value_
            self.hsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'originCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originCountry')
            value_ = self.gds_validate_string(value_, node, 'originCountry')
            self.originCountry = value_
            self.originCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'artref':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'artref')
            value_ = self.gds_validate_string(value_, node, 'artref')
            self.artref = value_
            self.artref_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'vatAmount')
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsFees' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsFees')
            fval_ = self.gds_validate_float(fval_, node, 'customsFees')
            self.customsFees = fval_
            self.customsFees_nsprefix_ = child_.prefix
# end class articleType73


class categoryType74(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType74)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType74.subclass:
            return categoryType74.subclass(*args_, **kwargs_)
        else:
            return categoryType74(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType74', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType74')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'categoryType74':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='categoryType74')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='categoryType74', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='categoryType74'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType74', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_integer(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'value')
            ival_ = self.gds_validate_integer(ival_, node, 'value')
            self.value = ival_
            self.value_nsprefix_ = child_.prefix
# end class categoryType74


class originalType75(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, originalIdent=None, originalInvoiceNumber=None, originalInvoiceDate=None, originalParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.originalInvoiceNumber = originalInvoiceNumber
        self.originalInvoiceNumber_nsprefix_ = None
        if isinstance(originalInvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(originalInvoiceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = originalInvoiceDate
        self.originalInvoiceDate = initvalue_
        self.originalInvoiceDate_nsprefix_ = None
        self.originalParcelNumber = originalParcelNumber
        self.originalParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, originalType75)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if originalType75.subclass:
            return originalType75.subclass(*args_, **kwargs_)
        else:
            return originalType75(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_originalInvoiceNumber(self):
        return self.originalInvoiceNumber
    def set_originalInvoiceNumber(self, originalInvoiceNumber):
        self.originalInvoiceNumber = originalInvoiceNumber
    def get_originalInvoiceDate(self):
        return self.originalInvoiceDate
    def set_originalInvoiceDate(self, originalInvoiceDate):
        self.originalInvoiceDate = originalInvoiceDate
    def get_originalParcelNumber(self):
        return self.originalParcelNumber
    def set_originalParcelNumber(self, originalParcelNumber):
        self.originalParcelNumber = originalParcelNumber
    def _hasContent(self):
        if (
            self.originalIdent is not None or
            self.originalInvoiceNumber is not None or
            self.originalInvoiceDate is not None or
            self.originalParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType75', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('originalType75')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'originalType75':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='originalType75')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='originalType75', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='originalType75'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType75', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.originalInvoiceNumber is not None:
            namespaceprefix_ = self.originalInvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceNumber>%s</%soriginalInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalInvoiceNumber), input_name='originalInvoiceNumber')), namespaceprefix_ , eol_))
        if self.originalInvoiceDate is not None:
            namespaceprefix_ = self.originalInvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceDate>%s</%soriginalInvoiceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.originalInvoiceDate, input_name='originalInvoiceDate'), namespaceprefix_ , eol_))
        if self.originalParcelNumber is not None:
            namespaceprefix_ = self.originalParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalParcelNumber>%s</%soriginalParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalParcelNumber), input_name='originalParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalInvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'originalInvoiceNumber')
            self.originalInvoiceNumber = value_
            self.originalInvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.originalInvoiceDate = dval_
            self.originalInvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'originalParcelNumber')
            self.originalParcelNumber = value_
            self.originalParcelNumber_nsprefix_ = child_.prefix
# end class originalType75


class importerAddressType76(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, importerAddressType76)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if importerAddressType76.subclass:
            return importerAddressType76.subclass(*args_, **kwargs_)
        else:
            return importerAddressType76(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType76', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('importerAddressType76')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'importerAddressType76':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='importerAddressType76')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='importerAddressType76', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='importerAddressType76'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType76', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class importerAddressType76


class senderType77(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType77)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType77.subclass:
            return senderType77.subclass(*args_, **kwargs_)
        else:
            return senderType77(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType77', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType77')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType77':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType77')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType77', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType77'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType77', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType78.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType77


class addressType78(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType78)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType78.subclass:
            return addressType78.subclass(*args_, **kwargs_)
        else:
            return addressType78(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType78', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType78')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType78':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType78')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType78', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType78'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType78', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType78


class addresseeType79(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType79)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType79.subclass:
            return addresseeType79.subclass(*args_, **kwargs_)
        else:
            return addresseeType79(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType79', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType79')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType79':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType79')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType79', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType79'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType79', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType80.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType79


class addressType80(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType80)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType80.subclass:
            return addressType80.subclass(*args_, **kwargs_)
        else:
            return addressType80(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType80', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType80')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType80':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType80')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType80', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType80'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType80', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType80


class codSenderAddressType81(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codSenderAddressType81)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codSenderAddressType81.subclass:
            return codSenderAddressType81.subclass(*args_, **kwargs_)
        else:
            return codSenderAddressType81(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType81', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codSenderAddressType81')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codSenderAddressType81':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codSenderAddressType81')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codSenderAddressType81', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codSenderAddressType81'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType81', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class codSenderAddressType81


class uploadDocumentType82(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, documentContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.documentContent = documentContent
        self.documentContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uploadDocumentType82)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uploadDocumentType82.subclass:
            return uploadDocumentType82.subclass(*args_, **kwargs_)
        else:
            return uploadDocumentType82(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_documentContent(self):
        return self.documentContent
    def set_documentContent(self, documentContent):
        self.documentContent = documentContent
    def _hasContent(self):
        if (
            self.documentContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType82', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uploadDocumentType82')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uploadDocumentType82':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uploadDocumentType82')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uploadDocumentType82', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uploadDocumentType82'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType82', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.documentContent is not None:
            namespaceprefix_ = self.documentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.documentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentContent>%s</%sdocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.documentContent, input_name='documentContent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'documentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'documentContent')
            else:
                bval_ = None
            self.documentContent = bval_
            self.documentContent_nsprefix_ = child_.prefix
# end class uploadDocumentType82


class fieldsType83(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType83)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType83.subclass:
            return fieldsType83.subclass(*args_, **kwargs_)
        else:
            return fieldsType83(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType83', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType83')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType83':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType83')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType83', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType83'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType83', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType84.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType83


class fieldType84(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType84)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType84.subclass:
            return fieldType84.subclass(*args_, **kwargs_)
        else:
            return fieldType84(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType84', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType84')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType84':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType84')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType84', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType84'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType84', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType84


class getProductInterRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, productCode=None, insurance=None, nonMachinable=None, returnReceipt=None, countryCode=None, zipCode=None, city=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        self.insurance = insurance
        self.insurance_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getProductInterRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getProductInterRequestType.subclass:
            return getProductInterRequestType.subclass(*args_, **kwargs_)
        else:
            return getProductInterRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_insurance(self):
        return self.insurance
    def set_insurance(self, insurance):
        self.insurance = insurance
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.productCode is not None or
            self.insurance is not None or
            self.nonMachinable is not None or
            self.returnReceipt is not None or
            self.countryCode is not None or
            self.zipCode is not None or
            self.city is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getProductInterRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getProductInterRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getProductInterRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getProductInterRequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getProductInterRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getProductInterRequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getProductInterRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.insurance is not None:
            namespaceprefix_ = self.insurance_nsprefix_ + ':' if (UseCapturedNS_ and self.insurance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsurance>%s</%sinsurance>%s' % (namespaceprefix_ , self.gds_format_boolean(self.insurance, input_name='insurance'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'insurance':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'insurance')
            ival_ = self.gds_validate_boolean(ival_, node, 'insurance')
            self.insurance = ival_
            self.insurance_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
# end class getProductInterRequestType


class generateBordereauParcelNumberListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelsNumbers=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if parcelsNumbers is None:
            self.parcelsNumbers = []
        else:
            self.parcelsNumbers = parcelsNumbers
        self.parcelsNumbers_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateBordereauParcelNumberListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateBordereauParcelNumberListType.subclass:
            return generateBordereauParcelNumberListType.subclass(*args_, **kwargs_)
        else:
            return generateBordereauParcelNumberListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelsNumbers(self):
        return self.parcelsNumbers
    def set_parcelsNumbers(self, parcelsNumbers):
        self.parcelsNumbers = parcelsNumbers
    def add_parcelsNumbers(self, value):
        self.parcelsNumbers.append(value)
    def insert_parcelsNumbers_at(self, index, value):
        self.parcelsNumbers.insert(index, value)
    def replace_parcelsNumbers_at(self, index, value):
        self.parcelsNumbers[index] = value
    def _hasContent(self):
        if (
            self.parcelsNumbers
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateBordereauParcelNumberListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateBordereauParcelNumberListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateBordereauParcelNumberListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateBordereauParcelNumberListType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateBordereauParcelNumberListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateBordereauParcelNumberListType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateBordereauParcelNumberListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for parcelsNumbers_ in self.parcelsNumbers:
            namespaceprefix_ = self.parcelsNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelsNumbers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelsNumbers>%s</%sparcelsNumbers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(parcelsNumbers_), input_name='parcelsNumbers')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelsNumbers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelsNumbers')
            value_ = self.gds_validate_string(value_, node, 'parcelsNumbers')
            self.parcelsNumbers.append(value_)
            self.parcelsNumbers_nsprefix_ = child_.prefix
# end class generateBordereauParcelNumberListType


class generateCN23RequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contractNumber=None, password=None, letter=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contractNumber = contractNumber
        self.contractNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.letter = letter
        self.letter_nsprefix_ = None
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, generateCN23RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if generateCN23RequestType.subclass:
            return generateCN23RequestType.subclass(*args_, **kwargs_)
        else:
            return generateCN23RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contractNumber(self):
        return self.contractNumber
    def set_contractNumber(self, contractNumber):
        self.contractNumber = contractNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_letter(self):
        return self.letter
    def set_letter(self, letter):
        self.letter = letter
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.contractNumber is not None or
            self.password is not None or
            self.letter is not None or
            self.fields is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateCN23RequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('generateCN23RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'generateCN23RequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='generateCN23RequestType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='generateCN23RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='generateCN23RequestType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='generateCN23RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contractNumber is not None:
            namespaceprefix_ = self.contractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.contractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontractNumber>%s</%scontractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contractNumber), input_name='contractNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.letter is not None:
            namespaceprefix_ = self.letter_nsprefix_ + ':' if (UseCapturedNS_ and self.letter_nsprefix_) else ''
            self.letter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='letter', pretty_print=pretty_print)
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contractNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contractNumber')
            value_ = self.gds_validate_string(value_, node, 'contractNumber')
            self.contractNumber = value_
            self.contractNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'letter':
            obj_ = letterType85.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.letter = obj_
            obj_.original_tagname_ = 'letter'
        elif nodeName_ == 'fields':
            obj_ = fieldsType100.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
# end class generateCN23RequestType


class letterType85(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, service=None, parcel=None, customsDeclarations=None, sender=None, addressee=None, codSenderAddress=None, uploadDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.parcel = parcel
        self.parcel_nsprefix_ = None
        self.customsDeclarations = customsDeclarations
        self.customsDeclarations_nsprefix_ = None
        self.sender = sender
        self.sender_nsprefix_ = None
        self.addressee = addressee
        self.addressee_nsprefix_ = None
        self.codSenderAddress = codSenderAddress
        self.codSenderAddress_nsprefix_ = None
        self.uploadDocument = uploadDocument
        self.uploadDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, letterType85)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if letterType85.subclass:
            return letterType85.subclass(*args_, **kwargs_)
        else:
            return letterType85(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_parcel(self):
        return self.parcel
    def set_parcel(self, parcel):
        self.parcel = parcel
    def get_customsDeclarations(self):
        return self.customsDeclarations
    def set_customsDeclarations(self, customsDeclarations):
        self.customsDeclarations = customsDeclarations
    def get_sender(self):
        return self.sender
    def set_sender(self, sender):
        self.sender = sender
    def get_addressee(self):
        return self.addressee
    def set_addressee(self, addressee):
        self.addressee = addressee
    def get_codSenderAddress(self):
        return self.codSenderAddress
    def set_codSenderAddress(self, codSenderAddress):
        self.codSenderAddress = codSenderAddress
    def get_uploadDocument(self):
        return self.uploadDocument
    def set_uploadDocument(self, uploadDocument):
        self.uploadDocument = uploadDocument
    def _hasContent(self):
        if (
            self.service is not None or
            self.parcel is not None or
            self.customsDeclarations is not None or
            self.sender is not None or
            self.addressee is not None or
            self.codSenderAddress is not None or
            self.uploadDocument is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType85', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('letterType85')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'letterType85':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='letterType85')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='letterType85', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='letterType85'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='letterType85', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            self.service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='service', pretty_print=pretty_print)
        if self.parcel is not None:
            namespaceprefix_ = self.parcel_nsprefix_ + ':' if (UseCapturedNS_ and self.parcel_nsprefix_) else ''
            self.parcel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parcel', pretty_print=pretty_print)
        if self.customsDeclarations is not None:
            namespaceprefix_ = self.customsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.customsDeclarations_nsprefix_) else ''
            self.customsDeclarations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsDeclarations', pretty_print=pretty_print)
        if self.sender is not None:
            namespaceprefix_ = self.sender_nsprefix_ + ':' if (UseCapturedNS_ and self.sender_nsprefix_) else ''
            self.sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sender', pretty_print=pretty_print)
        if self.addressee is not None:
            namespaceprefix_ = self.addressee_nsprefix_ + ':' if (UseCapturedNS_ and self.addressee_nsprefix_) else ''
            self.addressee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addressee', pretty_print=pretty_print)
        if self.codSenderAddress is not None:
            namespaceprefix_ = self.codSenderAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.codSenderAddress_nsprefix_) else ''
            self.codSenderAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='codSenderAddress', pretty_print=pretty_print)
        if self.uploadDocument is not None:
            namespaceprefix_ = self.uploadDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.uploadDocument_nsprefix_) else ''
            self.uploadDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uploadDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'service':
            obj_ = serviceType86.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.service = obj_
            obj_.original_tagname_ = 'service'
        elif nodeName_ == 'parcel':
            obj_ = parcelType87.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.parcel = obj_
            obj_.original_tagname_ = 'parcel'
        elif nodeName_ == 'customsDeclarations':
            obj_ = customsDeclarationsType88.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsDeclarations = obj_
            obj_.original_tagname_ = 'customsDeclarations'
        elif nodeName_ == 'sender':
            obj_ = senderType94.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'addressee':
            obj_ = addresseeType96.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addressee = obj_
            obj_.original_tagname_ = 'addressee'
        elif nodeName_ == 'codSenderAddress':
            obj_ = codSenderAddressType98.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.codSenderAddress = obj_
            obj_.original_tagname_ = 'codSenderAddress'
        elif nodeName_ == 'uploadDocument':
            obj_ = uploadDocumentType99.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uploadDocument = obj_
            obj_.original_tagname_ = 'uploadDocument'
# end class letterType85


class serviceType86(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, productCode=None, depositDate=None, mailBoxPicking=None, mailBoxPickingDate=None, vatCode=None, vatPercentage=None, vatAmount=None, transportationAmount=None, totalAmount=None, orderNumber=None, commercialName=None, returnTypeChoice=None, reseauPostal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        if isinstance(depositDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(depositDate, '%Y-%m-%d').date()
        else:
            initvalue_ = depositDate
        self.depositDate = initvalue_
        self.depositDate_nsprefix_ = None
        self.mailBoxPicking = mailBoxPicking
        self.mailBoxPicking_nsprefix_ = None
        if isinstance(mailBoxPickingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(mailBoxPickingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = mailBoxPickingDate
        self.mailBoxPickingDate = initvalue_
        self.mailBoxPickingDate_nsprefix_ = None
        self.vatCode = vatCode
        self.vatCode_nsprefix_ = None
        self.vatPercentage = vatPercentage
        self.vatPercentage_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.transportationAmount = transportationAmount
        self.transportationAmount_nsprefix_ = None
        self.totalAmount = totalAmount
        self.totalAmount_nsprefix_ = None
        self.orderNumber = orderNumber
        self.orderNumber_nsprefix_ = None
        self.commercialName = commercialName
        self.commercialName_nsprefix_ = None
        self.returnTypeChoice = returnTypeChoice
        self.returnTypeChoice_nsprefix_ = None
        self.reseauPostal = reseauPostal
        self.reseauPostal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, serviceType86)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if serviceType86.subclass:
            return serviceType86.subclass(*args_, **kwargs_)
        else:
            return serviceType86(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_depositDate(self):
        return self.depositDate
    def set_depositDate(self, depositDate):
        self.depositDate = depositDate
    def get_mailBoxPicking(self):
        return self.mailBoxPicking
    def set_mailBoxPicking(self, mailBoxPicking):
        self.mailBoxPicking = mailBoxPicking
    def get_mailBoxPickingDate(self):
        return self.mailBoxPickingDate
    def set_mailBoxPickingDate(self, mailBoxPickingDate):
        self.mailBoxPickingDate = mailBoxPickingDate
    def get_vatCode(self):
        return self.vatCode
    def set_vatCode(self, vatCode):
        self.vatCode = vatCode
    def get_vatPercentage(self):
        return self.vatPercentage
    def set_vatPercentage(self, vatPercentage):
        self.vatPercentage = vatPercentage
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_transportationAmount(self):
        return self.transportationAmount
    def set_transportationAmount(self, transportationAmount):
        self.transportationAmount = transportationAmount
    def get_totalAmount(self):
        return self.totalAmount
    def set_totalAmount(self, totalAmount):
        self.totalAmount = totalAmount
    def get_orderNumber(self):
        return self.orderNumber
    def set_orderNumber(self, orderNumber):
        self.orderNumber = orderNumber
    def get_commercialName(self):
        return self.commercialName
    def set_commercialName(self, commercialName):
        self.commercialName = commercialName
    def get_returnTypeChoice(self):
        return self.returnTypeChoice
    def set_returnTypeChoice(self, returnTypeChoice):
        self.returnTypeChoice = returnTypeChoice
    def get_reseauPostal(self):
        return self.reseauPostal
    def set_reseauPostal(self, reseauPostal):
        self.reseauPostal = reseauPostal
    def _hasContent(self):
        if (
            self.productCode is not None or
            self.depositDate is not None or
            self.mailBoxPicking is not None or
            self.mailBoxPickingDate is not None or
            self.vatCode is not None or
            self.vatPercentage is not None or
            self.vatAmount is not None or
            self.transportationAmount is not None or
            self.totalAmount is not None or
            self.orderNumber is not None or
            self.commercialName is not None or
            self.returnTypeChoice is not None or
            self.reseauPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType86', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('serviceType86')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'serviceType86':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='serviceType86')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='serviceType86', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='serviceType86'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='serviceType86', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.depositDate is not None:
            namespaceprefix_ = self.depositDate_nsprefix_ + ':' if (UseCapturedNS_ and self.depositDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepositDate>%s</%sdepositDate>%s' % (namespaceprefix_ , self.gds_format_date(self.depositDate, input_name='depositDate'), namespaceprefix_ , eol_))
        if self.mailBoxPicking is not None:
            namespaceprefix_ = self.mailBoxPicking_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPicking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPicking>%s</%smailBoxPicking>%s' % (namespaceprefix_ , self.gds_format_boolean(self.mailBoxPicking, input_name='mailBoxPicking'), namespaceprefix_ , eol_))
        if self.mailBoxPickingDate is not None:
            namespaceprefix_ = self.mailBoxPickingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDate>%s</%smailBoxPickingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.mailBoxPickingDate, input_name='mailBoxPickingDate'), namespaceprefix_ , eol_))
        if self.vatCode is not None:
            namespaceprefix_ = self.vatCode_nsprefix_ + ':' if (UseCapturedNS_ and self.vatCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatCode>%s</%svatCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatCode, input_name='vatCode'), namespaceprefix_ , eol_))
        if self.vatPercentage is not None:
            namespaceprefix_ = self.vatPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.vatPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatPercentage>%s</%svatPercentage>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatPercentage, input_name='vatPercentage'), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.transportationAmount is not None:
            namespaceprefix_ = self.transportationAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.transportationAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransportationAmount>%s</%stransportationAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.transportationAmount, input_name='transportationAmount'), namespaceprefix_ , eol_))
        if self.totalAmount is not None:
            namespaceprefix_ = self.totalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.totalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalAmount>%s</%stotalAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.totalAmount, input_name='totalAmount'), namespaceprefix_ , eol_))
        if self.orderNumber is not None:
            namespaceprefix_ = self.orderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.orderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorderNumber>%s</%sorderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orderNumber), input_name='orderNumber')), namespaceprefix_ , eol_))
        if self.commercialName is not None:
            namespaceprefix_ = self.commercialName_nsprefix_ + ':' if (UseCapturedNS_ and self.commercialName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommercialName>%s</%scommercialName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.commercialName), input_name='commercialName')), namespaceprefix_ , eol_))
        if self.returnTypeChoice is not None:
            namespaceprefix_ = self.returnTypeChoice_nsprefix_ + ':' if (UseCapturedNS_ and self.returnTypeChoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnTypeChoice>%s</%sreturnTypeChoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.returnTypeChoice, input_name='returnTypeChoice'), namespaceprefix_ , eol_))
        if self.reseauPostal is not None:
            namespaceprefix_ = self.reseauPostal_nsprefix_ + ':' if (UseCapturedNS_ and self.reseauPostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreseauPostal>%s</%sreseauPostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reseauPostal), input_name='reseauPostal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'depositDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.depositDate = dval_
            self.depositDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPicking':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'mailBoxPicking')
            ival_ = self.gds_validate_boolean(ival_, node, 'mailBoxPicking')
            self.mailBoxPicking = ival_
            self.mailBoxPicking_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.mailBoxPickingDate = dval_
            self.mailBoxPickingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatCode')
            ival_ = self.gds_validate_integer(ival_, node, 'vatCode')
            self.vatCode = ival_
            self.vatCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatPercentage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatPercentage')
            ival_ = self.gds_validate_integer(ival_, node, 'vatPercentage')
            self.vatPercentage = ival_
            self.vatPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'vatAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'vatAmount')
            self.vatAmount = ival_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'transportationAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'transportationAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'transportationAmount')
            self.transportationAmount = ival_
            self.transportationAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'totalAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'totalAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'totalAmount')
            self.totalAmount = ival_
            self.totalAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'orderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orderNumber')
            value_ = self.gds_validate_string(value_, node, 'orderNumber')
            self.orderNumber = value_
            self.orderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'commercialName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'commercialName')
            value_ = self.gds_validate_string(value_, node, 'commercialName')
            self.commercialName = value_
            self.commercialName_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnTypeChoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'returnTypeChoice')
            ival_ = self.gds_validate_integer(ival_, node, 'returnTypeChoice')
            self.returnTypeChoice = ival_
            self.returnTypeChoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'reseauPostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reseauPostal')
            value_ = self.gds_validate_string(value_, node, 'reseauPostal')
            self.reseauPostal = value_
            self.reseauPostal_nsprefix_ = child_.prefix
# end class serviceType86


class parcelType87(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, parcelNumber=None, insuranceAmount=None, insuranceValue=None, recommendationLevel=None, weight=None, nonMachinable=None, COD=None, CODAmount=None, CODCurrency=None, returnReceipt=None, instructions=None, pickupLocationId=None, ftd=None, ddp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.parcelNumber = parcelNumber
        self.parcelNumber_nsprefix_ = None
        self.insuranceAmount = insuranceAmount
        self.insuranceAmount_nsprefix_ = None
        self.insuranceValue = insuranceValue
        self.insuranceValue_nsprefix_ = None
        self.recommendationLevel = recommendationLevel
        self.recommendationLevel_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.nonMachinable = nonMachinable
        self.nonMachinable_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
        self.CODCurrency = CODCurrency
        self.CODCurrency_nsprefix_ = None
        self.returnReceipt = returnReceipt
        self.returnReceipt_nsprefix_ = None
        self.instructions = instructions
        self.instructions_nsprefix_ = None
        self.pickupLocationId = pickupLocationId
        self.pickupLocationId_nsprefix_ = None
        self.ftd = ftd
        self.ftd_nsprefix_ = None
        self.ddp = ddp
        self.ddp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parcelType87)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parcelType87.subclass:
            return parcelType87.subclass(*args_, **kwargs_)
        else:
            return parcelType87(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_parcelNumber(self):
        return self.parcelNumber
    def set_parcelNumber(self, parcelNumber):
        self.parcelNumber = parcelNumber
    def get_insuranceAmount(self):
        return self.insuranceAmount
    def set_insuranceAmount(self, insuranceAmount):
        self.insuranceAmount = insuranceAmount
    def get_insuranceValue(self):
        return self.insuranceValue
    def set_insuranceValue(self, insuranceValue):
        self.insuranceValue = insuranceValue
    def get_recommendationLevel(self):
        return self.recommendationLevel
    def set_recommendationLevel(self, recommendationLevel):
        self.recommendationLevel = recommendationLevel
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_nonMachinable(self):
        return self.nonMachinable
    def set_nonMachinable(self, nonMachinable):
        self.nonMachinable = nonMachinable
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def get_CODCurrency(self):
        return self.CODCurrency
    def set_CODCurrency(self, CODCurrency):
        self.CODCurrency = CODCurrency
    def get_returnReceipt(self):
        return self.returnReceipt
    def set_returnReceipt(self, returnReceipt):
        self.returnReceipt = returnReceipt
    def get_instructions(self):
        return self.instructions
    def set_instructions(self, instructions):
        self.instructions = instructions
    def get_pickupLocationId(self):
        return self.pickupLocationId
    def set_pickupLocationId(self, pickupLocationId):
        self.pickupLocationId = pickupLocationId
    def get_ftd(self):
        return self.ftd
    def set_ftd(self, ftd):
        self.ftd = ftd
    def get_ddp(self):
        return self.ddp
    def set_ddp(self, ddp):
        self.ddp = ddp
    def _hasContent(self):
        if (
            self.parcelNumber is not None or
            self.insuranceAmount is not None or
            self.insuranceValue is not None or
            self.recommendationLevel is not None or
            self.weight is not None or
            self.nonMachinable is not None or
            self.COD is not None or
            self.CODAmount is not None or
            self.CODCurrency is not None or
            self.returnReceipt is not None or
            self.instructions is not None or
            self.pickupLocationId is not None or
            self.ftd is not None or
            self.ddp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType87', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parcelType87')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'parcelType87':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='parcelType87')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='parcelType87', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='parcelType87'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='parcelType87', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.parcelNumber is not None:
            namespaceprefix_ = self.parcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelNumber>%s</%sparcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parcelNumber), input_name='parcelNumber')), namespaceprefix_ , eol_))
        if self.insuranceAmount is not None:
            namespaceprefix_ = self.insuranceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceAmount>%s</%sinsuranceAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceAmount, input_name='insuranceAmount'), namespaceprefix_ , eol_))
        if self.insuranceValue is not None:
            namespaceprefix_ = self.insuranceValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuranceValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuranceValue>%s</%sinsuranceValue>%s' % (namespaceprefix_ , self.gds_format_integer(self.insuranceValue, input_name='insuranceValue'), namespaceprefix_ , eol_))
        if self.recommendationLevel is not None:
            namespaceprefix_ = self.recommendationLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.recommendationLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecommendationLevel>%s</%srecommendationLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recommendationLevel), input_name='recommendationLevel')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.nonMachinable is not None:
            namespaceprefix_ = self.nonMachinable_nsprefix_ + ':' if (UseCapturedNS_ and self.nonMachinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snonMachinable>%s</%snonMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.nonMachinable, input_name='nonMachinable'), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOD>%s</%sCOD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.COD, input_name='COD'), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODAmount>%s</%sCODAmount>%s' % (namespaceprefix_ , self.gds_format_integer(self.CODAmount, input_name='CODAmount'), namespaceprefix_ , eol_))
        if self.CODCurrency is not None:
            namespaceprefix_ = self.CODCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.CODCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODCurrency>%s</%sCODCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODCurrency), input_name='CODCurrency')), namespaceprefix_ , eol_))
        if self.returnReceipt is not None:
            namespaceprefix_ = self.returnReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.returnReceipt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnReceipt>%s</%sreturnReceipt>%s' % (namespaceprefix_ , self.gds_format_boolean(self.returnReceipt, input_name='returnReceipt'), namespaceprefix_ , eol_))
        if self.instructions is not None:
            namespaceprefix_ = self.instructions_nsprefix_ + ':' if (UseCapturedNS_ and self.instructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructions>%s</%sinstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructions), input_name='instructions')), namespaceprefix_ , eol_))
        if self.pickupLocationId is not None:
            namespaceprefix_ = self.pickupLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupLocationId>%s</%spickupLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.pickupLocationId), input_name='pickupLocationId')), namespaceprefix_ , eol_))
        if self.ftd is not None:
            namespaceprefix_ = self.ftd_nsprefix_ + ':' if (UseCapturedNS_ and self.ftd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sftd>%s</%sftd>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ftd, input_name='ftd'), namespaceprefix_ , eol_))
        if self.ddp is not None:
            namespaceprefix_ = self.ddp_nsprefix_ + ':' if (UseCapturedNS_ and self.ddp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sddp>%s</%sddp>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ddp, input_name='ddp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'parcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelNumber')
            self.parcelNumber = value_
            self.parcelNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceAmount')
            self.insuranceAmount = ival_
            self.insuranceAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuranceValue' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'insuranceValue')
            ival_ = self.gds_validate_integer(ival_, node, 'insuranceValue')
            self.insuranceValue = ival_
            self.insuranceValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'recommendationLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recommendationLevel')
            value_ = self.gds_validate_string(value_, node, 'recommendationLevel')
            self.recommendationLevel = value_
            self.recommendationLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'nonMachinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'nonMachinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'nonMachinable')
            self.nonMachinable = ival_
            self.nonMachinable_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'COD')
            ival_ = self.gds_validate_boolean(ival_, node, 'COD')
            self.COD = ival_
            self.COD_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CODAmount')
            ival_ = self.gds_validate_integer(ival_, node, 'CODAmount')
            self.CODAmount = ival_
            self.CODAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODCurrency')
            value_ = self.gds_validate_string(value_, node, 'CODCurrency')
            self.CODCurrency = value_
            self.CODCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'returnReceipt':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'returnReceipt')
            ival_ = self.gds_validate_boolean(ival_, node, 'returnReceipt')
            self.returnReceipt = ival_
            self.returnReceipt_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructions')
            value_ = self.gds_validate_string(value_, node, 'instructions')
            self.instructions = value_
            self.instructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'pickupLocationId')
            value_ = self.gds_validate_string(value_, node, 'pickupLocationId')
            self.pickupLocationId = value_
            self.pickupLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ftd':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ftd')
            ival_ = self.gds_validate_boolean(ival_, node, 'ftd')
            self.ftd = ival_
            self.ftd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ddp':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ddp')
            ival_ = self.gds_validate_boolean(ival_, node, 'ddp')
            self.ddp = ival_
            self.ddp_nsprefix_ = child_.prefix
# end class parcelType87


class customsDeclarationsType88(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, includeCustomsDeclarations=None, contents=None, importersReference=None, importersContact=None, officeOrigin=None, comments=None, description=None, invoiceNumber=None, licenceNumber=None, certificatNumber=None, importerAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.includeCustomsDeclarations = includeCustomsDeclarations
        self.includeCustomsDeclarations_nsprefix_ = None
        self.contents = contents
        self.contents_nsprefix_ = None
        self.importersReference = importersReference
        self.importersReference_nsprefix_ = None
        self.importersContact = importersContact
        self.importersContact_nsprefix_ = None
        self.officeOrigin = officeOrigin
        self.officeOrigin_nsprefix_ = None
        self.comments = comments
        self.comments_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.invoiceNumber = invoiceNumber
        self.invoiceNumber_nsprefix_ = None
        self.licenceNumber = licenceNumber
        self.licenceNumber_nsprefix_ = None
        self.certificatNumber = certificatNumber
        self.certificatNumber_nsprefix_ = None
        self.importerAddress = importerAddress
        self.importerAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsDeclarationsType88)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsDeclarationsType88.subclass:
            return customsDeclarationsType88.subclass(*args_, **kwargs_)
        else:
            return customsDeclarationsType88(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_includeCustomsDeclarations(self):
        return self.includeCustomsDeclarations
    def set_includeCustomsDeclarations(self, includeCustomsDeclarations):
        self.includeCustomsDeclarations = includeCustomsDeclarations
    def get_contents(self):
        return self.contents
    def set_contents(self, contents):
        self.contents = contents
    def get_importersReference(self):
        return self.importersReference
    def set_importersReference(self, importersReference):
        self.importersReference = importersReference
    def get_importersContact(self):
        return self.importersContact
    def set_importersContact(self, importersContact):
        self.importersContact = importersContact
    def get_officeOrigin(self):
        return self.officeOrigin
    def set_officeOrigin(self, officeOrigin):
        self.officeOrigin = officeOrigin
    def get_comments(self):
        return self.comments
    def set_comments(self, comments):
        self.comments = comments
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_invoiceNumber(self):
        return self.invoiceNumber
    def set_invoiceNumber(self, invoiceNumber):
        self.invoiceNumber = invoiceNumber
    def get_licenceNumber(self):
        return self.licenceNumber
    def set_licenceNumber(self, licenceNumber):
        self.licenceNumber = licenceNumber
    def get_certificatNumber(self):
        return self.certificatNumber
    def set_certificatNumber(self, certificatNumber):
        self.certificatNumber = certificatNumber
    def get_importerAddress(self):
        return self.importerAddress
    def set_importerAddress(self, importerAddress):
        self.importerAddress = importerAddress
    def _hasContent(self):
        if (
            self.includeCustomsDeclarations is not None or
            self.contents is not None or
            self.importersReference is not None or
            self.importersContact is not None or
            self.officeOrigin is not None or
            self.comments is not None or
            self.description is not None or
            self.invoiceNumber is not None or
            self.licenceNumber is not None or
            self.certificatNumber is not None or
            self.importerAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType88', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsDeclarationsType88')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsDeclarationsType88':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsDeclarationsType88')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsDeclarationsType88', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsDeclarationsType88'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsDeclarationsType88', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.includeCustomsDeclarations is not None:
            namespaceprefix_ = self.includeCustomsDeclarations_nsprefix_ + ':' if (UseCapturedNS_ and self.includeCustomsDeclarations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincludeCustomsDeclarations>%s</%sincludeCustomsDeclarations>%s' % (namespaceprefix_ , self.gds_format_boolean(self.includeCustomsDeclarations, input_name='includeCustomsDeclarations'), namespaceprefix_ , eol_))
        if self.contents is not None:
            namespaceprefix_ = self.contents_nsprefix_ + ':' if (UseCapturedNS_ and self.contents_nsprefix_) else ''
            self.contents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='contents', pretty_print=pretty_print)
        if self.importersReference is not None:
            namespaceprefix_ = self.importersReference_nsprefix_ + ':' if (UseCapturedNS_ and self.importersReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersReference>%s</%simportersReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersReference), input_name='importersReference')), namespaceprefix_ , eol_))
        if self.importersContact is not None:
            namespaceprefix_ = self.importersContact_nsprefix_ + ':' if (UseCapturedNS_ and self.importersContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simportersContact>%s</%simportersContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.importersContact), input_name='importersContact')), namespaceprefix_ , eol_))
        if self.officeOrigin is not None:
            namespaceprefix_ = self.officeOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.officeOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sofficeOrigin>%s</%sofficeOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.officeOrigin), input_name='officeOrigin')), namespaceprefix_ , eol_))
        if self.comments is not None:
            namespaceprefix_ = self.comments_nsprefix_ + ':' if (UseCapturedNS_ and self.comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomments>%s</%scomments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.invoiceNumber is not None:
            namespaceprefix_ = self.invoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.invoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinvoiceNumber>%s</%sinvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.invoiceNumber), input_name='invoiceNumber')), namespaceprefix_ , eol_))
        if self.licenceNumber is not None:
            namespaceprefix_ = self.licenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.licenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicenceNumber>%s</%slicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.licenceNumber), input_name='licenceNumber')), namespaceprefix_ , eol_))
        if self.certificatNumber is not None:
            namespaceprefix_ = self.certificatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.certificatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scertificatNumber>%s</%scertificatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.certificatNumber), input_name='certificatNumber')), namespaceprefix_ , eol_))
        if self.importerAddress is not None:
            namespaceprefix_ = self.importerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.importerAddress_nsprefix_) else ''
            self.importerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='importerAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'includeCustomsDeclarations':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'includeCustomsDeclarations')
            ival_ = self.gds_validate_boolean(ival_, node, 'includeCustomsDeclarations')
            self.includeCustomsDeclarations = ival_
            self.includeCustomsDeclarations_nsprefix_ = child_.prefix
        elif nodeName_ == 'contents':
            obj_ = contentsType89.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.contents = obj_
            obj_.original_tagname_ = 'contents'
        elif nodeName_ == 'importersReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersReference')
            value_ = self.gds_validate_string(value_, node, 'importersReference')
            self.importersReference = value_
            self.importersReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'importersContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'importersContact')
            value_ = self.gds_validate_string(value_, node, 'importersContact')
            self.importersContact = value_
            self.importersContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'officeOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'officeOrigin')
            value_ = self.gds_validate_string(value_, node, 'officeOrigin')
            self.officeOrigin = value_
            self.officeOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comments')
            value_ = self.gds_validate_string(value_, node, 'comments')
            self.comments = value_
            self.comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'invoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'invoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'invoiceNumber')
            self.invoiceNumber = value_
            self.invoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'licenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'licenceNumber')
            value_ = self.gds_validate_string(value_, node, 'licenceNumber')
            self.licenceNumber = value_
            self.licenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'certificatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'certificatNumber')
            value_ = self.gds_validate_string(value_, node, 'certificatNumber')
            self.certificatNumber = value_
            self.certificatNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'importerAddress':
            obj_ = importerAddressType93.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.importerAddress = obj_
            obj_.original_tagname_ = 'importerAddress'
# end class customsDeclarationsType88


class contentsType89(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, article=None, category=None, original=None, explanations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if article is None:
            self.article = []
        else:
            self.article = article
        self.article_nsprefix_ = None
        self.category = category
        self.category_nsprefix_ = None
        if original is None:
            self.original = []
        else:
            self.original = original
        self.original_nsprefix_ = None
        self.explanations = explanations
        self.explanations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contentsType89)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contentsType89.subclass:
            return contentsType89.subclass(*args_, **kwargs_)
        else:
            return contentsType89(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_article(self):
        return self.article
    def set_article(self, article):
        self.article = article
    def add_article(self, value):
        self.article.append(value)
    def insert_article_at(self, index, value):
        self.article.insert(index, value)
    def replace_article_at(self, index, value):
        self.article[index] = value
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_original(self):
        return self.original
    def set_original(self, original):
        self.original = original
    def add_original(self, value):
        self.original.append(value)
    def insert_original_at(self, index, value):
        self.original.insert(index, value)
    def replace_original_at(self, index, value):
        self.original[index] = value
    def get_explanations(self):
        return self.explanations
    def set_explanations(self, explanations):
        self.explanations = explanations
    def _hasContent(self):
        if (
            self.article or
            self.category is not None or
            self.original or
            self.explanations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType89', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contentsType89')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'contentsType89':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='contentsType89')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='contentsType89', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='contentsType89'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='contentsType89', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for article_ in self.article:
            namespaceprefix_ = self.article_nsprefix_ + ':' if (UseCapturedNS_ and self.article_nsprefix_) else ''
            article_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='article', pretty_print=pretty_print)
        if self.category is not None:
            namespaceprefix_ = self.category_nsprefix_ + ':' if (UseCapturedNS_ and self.category_nsprefix_) else ''
            self.category.export(outfile, level, namespaceprefix_, namespacedef_='', name_='category', pretty_print=pretty_print)
        for original_ in self.original:
            namespaceprefix_ = self.original_nsprefix_ + ':' if (UseCapturedNS_ and self.original_nsprefix_) else ''
            original_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='original', pretty_print=pretty_print)
        if self.explanations is not None:
            namespaceprefix_ = self.explanations_nsprefix_ + ':' if (UseCapturedNS_ and self.explanations_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexplanations>%s</%sexplanations>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.explanations), input_name='explanations')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'article':
            obj_ = articleType90.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.article.append(obj_)
            obj_.original_tagname_ = 'article'
        elif nodeName_ == 'category':
            obj_ = categoryType91.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.category = obj_
            obj_.original_tagname_ = 'category'
        elif nodeName_ == 'original':
            obj_ = originalType92.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.original.append(obj_)
            obj_.original_tagname_ = 'original'
        elif nodeName_ == 'explanations':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'explanations')
            value_ = self.gds_validate_string(value_, node, 'explanations')
            self.explanations = value_
            self.explanations_nsprefix_ = child_.prefix
# end class contentsType89


class articleType90(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, description=None, quantity=None, weight=None, value=None, hsCode=None, originCountry=None, currency=None, artref=None, originalIdent=None, vatAmount=None, customsFees=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.hsCode = hsCode
        self.hsCode_nsprefix_ = None
        self.originCountry = originCountry
        self.originCountry_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.artref = artref
        self.artref_nsprefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.vatAmount = vatAmount
        self.vatAmount_nsprefix_ = None
        self.customsFees = customsFees
        self.customsFees_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleType90)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleType90.subclass:
            return articleType90.subclass(*args_, **kwargs_)
        else:
            return articleType90(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_hsCode(self):
        return self.hsCode
    def set_hsCode(self, hsCode):
        self.hsCode = hsCode
    def get_originCountry(self):
        return self.originCountry
    def set_originCountry(self, originCountry):
        self.originCountry = originCountry
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_artref(self):
        return self.artref
    def set_artref(self, artref):
        self.artref = artref
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_vatAmount(self):
        return self.vatAmount
    def set_vatAmount(self, vatAmount):
        self.vatAmount = vatAmount
    def get_customsFees(self):
        return self.customsFees
    def set_customsFees(self, customsFees):
        self.customsFees = customsFees
    def _hasContent(self):
        if (
            self.description is not None or
            self.quantity is not None or
            self.weight is not None or
            self.value is not None or
            self.hsCode is not None or
            self.originCountry is not None or
            self.currency is not None or
            self.artref is not None or
            self.originalIdent is not None or
            self.vatAmount is not None or
            self.customsFees is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType90', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleType90')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleType90':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleType90')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleType90', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleType90'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleType90', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.hsCode is not None:
            namespaceprefix_ = self.hsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.hsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shsCode>%s</%shsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hsCode), input_name='hsCode')), namespaceprefix_ , eol_))
        if self.originCountry is not None:
            namespaceprefix_ = self.originCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.originCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginCountry>%s</%soriginCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originCountry), input_name='originCountry')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.artref is not None:
            namespaceprefix_ = self.artref_nsprefix_ + ':' if (UseCapturedNS_ and self.artref_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartref>%s</%sartref>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.artref), input_name='artref')), namespaceprefix_ , eol_))
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.vatAmount is not None:
            namespaceprefix_ = self.vatAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.vatAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatAmount>%s</%svatAmount>%s' % (namespaceprefix_ , self.gds_format_float(self.vatAmount, input_name='vatAmount'), namespaceprefix_ , eol_))
        if self.customsFees is not None:
            namespaceprefix_ = self.customsFees_nsprefix_ + ':' if (UseCapturedNS_ and self.customsFees_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsFees>%s</%scustomsFees>%s' % (namespaceprefix_ , self.gds_format_float(self.customsFees, input_name='customsFees'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'hsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hsCode')
            value_ = self.gds_validate_string(value_, node, 'hsCode')
            self.hsCode = value_
            self.hsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'originCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originCountry')
            value_ = self.gds_validate_string(value_, node, 'originCountry')
            self.originCountry = value_
            self.originCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'artref':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'artref')
            value_ = self.gds_validate_string(value_, node, 'artref')
            self.artref = value_
            self.artref_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'vatAmount')
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
            self.vatAmount_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsFees' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsFees')
            fval_ = self.gds_validate_float(fval_, node, 'customsFees')
            self.customsFees = fval_
            self.customsFees_nsprefix_ = child_.prefix
# end class articleType90


class categoryType91(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType91)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType91.subclass:
            return categoryType91.subclass(*args_, **kwargs_)
        else:
            return categoryType91(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType91', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType91')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'categoryType91':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='categoryType91')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='categoryType91', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='categoryType91'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='categoryType91', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_integer(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'value')
            ival_ = self.gds_validate_integer(ival_, node, 'value')
            self.value = ival_
            self.value_nsprefix_ = child_.prefix
# end class categoryType91


class originalType92(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, originalIdent=None, originalInvoiceNumber=None, originalInvoiceDate=None, originalParcelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.originalIdent = originalIdent
        self.originalIdent_nsprefix_ = None
        self.originalInvoiceNumber = originalInvoiceNumber
        self.originalInvoiceNumber_nsprefix_ = None
        if isinstance(originalInvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(originalInvoiceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = originalInvoiceDate
        self.originalInvoiceDate = initvalue_
        self.originalInvoiceDate_nsprefix_ = None
        self.originalParcelNumber = originalParcelNumber
        self.originalParcelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, originalType92)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if originalType92.subclass:
            return originalType92.subclass(*args_, **kwargs_)
        else:
            return originalType92(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_originalIdent(self):
        return self.originalIdent
    def set_originalIdent(self, originalIdent):
        self.originalIdent = originalIdent
    def get_originalInvoiceNumber(self):
        return self.originalInvoiceNumber
    def set_originalInvoiceNumber(self, originalInvoiceNumber):
        self.originalInvoiceNumber = originalInvoiceNumber
    def get_originalInvoiceDate(self):
        return self.originalInvoiceDate
    def set_originalInvoiceDate(self, originalInvoiceDate):
        self.originalInvoiceDate = originalInvoiceDate
    def get_originalParcelNumber(self):
        return self.originalParcelNumber
    def set_originalParcelNumber(self, originalParcelNumber):
        self.originalParcelNumber = originalParcelNumber
    def _hasContent(self):
        if (
            self.originalIdent is not None or
            self.originalInvoiceNumber is not None or
            self.originalInvoiceDate is not None or
            self.originalParcelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType92', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('originalType92')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'originalType92':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='originalType92')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='originalType92', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='originalType92'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='originalType92', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originalIdent is not None:
            namespaceprefix_ = self.originalIdent_nsprefix_ + ':' if (UseCapturedNS_ and self.originalIdent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalIdent>%s</%soriginalIdent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalIdent), input_name='originalIdent')), namespaceprefix_ , eol_))
        if self.originalInvoiceNumber is not None:
            namespaceprefix_ = self.originalInvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceNumber>%s</%soriginalInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalInvoiceNumber), input_name='originalInvoiceNumber')), namespaceprefix_ , eol_))
        if self.originalInvoiceDate is not None:
            namespaceprefix_ = self.originalInvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.originalInvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalInvoiceDate>%s</%soriginalInvoiceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.originalInvoiceDate, input_name='originalInvoiceDate'), namespaceprefix_ , eol_))
        if self.originalParcelNumber is not None:
            namespaceprefix_ = self.originalParcelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.originalParcelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginalParcelNumber>%s</%soriginalParcelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.originalParcelNumber), input_name='originalParcelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'originalIdent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalIdent')
            value_ = self.gds_validate_string(value_, node, 'originalIdent')
            self.originalIdent = value_
            self.originalIdent_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalInvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'originalInvoiceNumber')
            self.originalInvoiceNumber = value_
            self.originalInvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalInvoiceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.originalInvoiceDate = dval_
            self.originalInvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'originalParcelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'originalParcelNumber')
            value_ = self.gds_validate_string(value_, node, 'originalParcelNumber')
            self.originalParcelNumber = value_
            self.originalParcelNumber_nsprefix_ = child_.prefix
# end class originalType92


class importerAddressType93(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, importerAddressType93)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if importerAddressType93.subclass:
            return importerAddressType93.subclass(*args_, **kwargs_)
        else:
            return importerAddressType93(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType93', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('importerAddressType93')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'importerAddressType93':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='importerAddressType93')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='importerAddressType93', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='importerAddressType93'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='importerAddressType93', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class importerAddressType93


class senderType94(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, senderParcelRef=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.senderParcelRef = senderParcelRef
        self.senderParcelRef_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, senderType94)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if senderType94.subclass:
            return senderType94.subclass(*args_, **kwargs_)
        else:
            return senderType94(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_senderParcelRef(self):
        return self.senderParcelRef
    def set_senderParcelRef(self, senderParcelRef):
        self.senderParcelRef = senderParcelRef
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.senderParcelRef is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType94', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('senderType94')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'senderType94':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='senderType94')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='senderType94', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='senderType94'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='senderType94', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.senderParcelRef is not None:
            namespaceprefix_ = self.senderParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.senderParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenderParcelRef>%s</%ssenderParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.senderParcelRef), input_name='senderParcelRef')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'senderParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'senderParcelRef')
            value_ = self.gds_validate_string(value_, node, 'senderParcelRef')
            self.senderParcelRef = value_
            self.senderParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType95.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class senderType94


class addressType95(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType95)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType95.subclass:
            return addressType95.subclass(*args_, **kwargs_)
        else:
            return addressType95(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType95', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType95')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType95':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType95')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType95', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType95'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType95', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType95


class addresseeType96(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, addresseeParcelRef=None, codeBarForReference=None, serviceInfo=None, promotionCode=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.addresseeParcelRef = addresseeParcelRef
        self.addresseeParcelRef_nsprefix_ = None
        self.codeBarForReference = codeBarForReference
        self.codeBarForReference_nsprefix_ = None
        self.serviceInfo = serviceInfo
        self.serviceInfo_nsprefix_ = None
        self.promotionCode = promotionCode
        self.promotionCode_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresseeType96)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresseeType96.subclass:
            return addresseeType96.subclass(*args_, **kwargs_)
        else:
            return addresseeType96(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_addresseeParcelRef(self):
        return self.addresseeParcelRef
    def set_addresseeParcelRef(self, addresseeParcelRef):
        self.addresseeParcelRef = addresseeParcelRef
    def get_codeBarForReference(self):
        return self.codeBarForReference
    def set_codeBarForReference(self, codeBarForReference):
        self.codeBarForReference = codeBarForReference
    def get_serviceInfo(self):
        return self.serviceInfo
    def set_serviceInfo(self, serviceInfo):
        self.serviceInfo = serviceInfo
    def get_promotionCode(self):
        return self.promotionCode
    def set_promotionCode(self, promotionCode):
        self.promotionCode = promotionCode
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def _hasContent(self):
        if (
            self.addresseeParcelRef is not None or
            self.codeBarForReference is not None or
            self.serviceInfo is not None or
            self.promotionCode is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType96', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresseeType96')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresseeType96':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresseeType96')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresseeType96', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresseeType96'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addresseeType96', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.addresseeParcelRef is not None:
            namespaceprefix_ = self.addresseeParcelRef_nsprefix_ + ':' if (UseCapturedNS_ and self.addresseeParcelRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddresseeParcelRef>%s</%saddresseeParcelRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.addresseeParcelRef), input_name='addresseeParcelRef')), namespaceprefix_ , eol_))
        if self.codeBarForReference is not None:
            namespaceprefix_ = self.codeBarForReference_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBarForReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBarForReference>%s</%scodeBarForReference>%s' % (namespaceprefix_ , self.gds_format_boolean(self.codeBarForReference, input_name='codeBarForReference'), namespaceprefix_ , eol_))
        if self.serviceInfo is not None:
            namespaceprefix_ = self.serviceInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceInfo>%s</%sserviceInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceInfo), input_name='serviceInfo')), namespaceprefix_ , eol_))
        if self.promotionCode is not None:
            namespaceprefix_ = self.promotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.promotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spromotionCode>%s</%spromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.promotionCode), input_name='promotionCode')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'addresseeParcelRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'addresseeParcelRef')
            value_ = self.gds_validate_string(value_, node, 'addresseeParcelRef')
            self.addresseeParcelRef = value_
            self.addresseeParcelRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBarForReference':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'codeBarForReference')
            ival_ = self.gds_validate_boolean(ival_, node, 'codeBarForReference')
            self.codeBarForReference = ival_
            self.codeBarForReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceInfo')
            value_ = self.gds_validate_string(value_, node, 'serviceInfo')
            self.serviceInfo = value_
            self.serviceInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'promotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'promotionCode')
            value_ = self.gds_validate_string(value_, node, 'promotionCode')
            self.promotionCode = value_
            self.promotionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = addressType97.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class addresseeType96


class addressType97(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addressType97)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addressType97.subclass:
            return addressType97.subclass(*args_, **kwargs_)
        else:
            return addressType97(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType97', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addressType97')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addressType97':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addressType97')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addressType97', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addressType97'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='addressType97', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class addressType97


class codSenderAddressType98(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, companyName=None, lastName=None, firstName=None, line0=None, line1=None, line2=None, line3=None, countryCode=None, city=None, zipCode=None, phoneNumber=None, mobileNumber=None, doorCode1=None, doorCode2=None, email=None, intercom=None, language=None, stateOrProvinceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.companyName = companyName
        self.companyName_nsprefix_ = None
        self.lastName = lastName
        self.lastName_nsprefix_ = None
        self.firstName = firstName
        self.firstName_nsprefix_ = None
        self.line0 = line0
        self.line0_nsprefix_ = None
        self.line1 = line1
        self.line1_nsprefix_ = None
        self.line2 = line2
        self.line2_nsprefix_ = None
        self.line3 = line3
        self.line3_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.phoneNumber = phoneNumber
        self.phoneNumber_nsprefix_ = None
        self.mobileNumber = mobileNumber
        self.mobileNumber_nsprefix_ = None
        self.doorCode1 = doorCode1
        self.doorCode1_nsprefix_ = None
        self.doorCode2 = doorCode2
        self.doorCode2_nsprefix_ = None
        self.email = email
        self.email_nsprefix_ = None
        self.intercom = intercom
        self.intercom_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codSenderAddressType98)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codSenderAddressType98.subclass:
            return codSenderAddressType98.subclass(*args_, **kwargs_)
        else:
            return codSenderAddressType98(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_companyName(self):
        return self.companyName
    def set_companyName(self, companyName):
        self.companyName = companyName
    def get_lastName(self):
        return self.lastName
    def set_lastName(self, lastName):
        self.lastName = lastName
    def get_firstName(self):
        return self.firstName
    def set_firstName(self, firstName):
        self.firstName = firstName
    def get_line0(self):
        return self.line0
    def set_line0(self, line0):
        self.line0 = line0
    def get_line1(self):
        return self.line1
    def set_line1(self, line1):
        self.line1 = line1
    def get_line2(self):
        return self.line2
    def set_line2(self, line2):
        self.line2 = line2
    def get_line3(self):
        return self.line3
    def set_line3(self, line3):
        self.line3 = line3
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_phoneNumber(self):
        return self.phoneNumber
    def set_phoneNumber(self, phoneNumber):
        self.phoneNumber = phoneNumber
    def get_mobileNumber(self):
        return self.mobileNumber
    def set_mobileNumber(self, mobileNumber):
        self.mobileNumber = mobileNumber
    def get_doorCode1(self):
        return self.doorCode1
    def set_doorCode1(self, doorCode1):
        self.doorCode1 = doorCode1
    def get_doorCode2(self):
        return self.doorCode2
    def set_doorCode2(self, doorCode2):
        self.doorCode2 = doorCode2
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_intercom(self):
        return self.intercom
    def set_intercom(self, intercom):
        self.intercom = intercom
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_stateOrProvinceCode(self):
        return self.stateOrProvinceCode
    def set_stateOrProvinceCode(self, stateOrProvinceCode):
        self.stateOrProvinceCode = stateOrProvinceCode
    def _hasContent(self):
        if (
            self.companyName is not None or
            self.lastName is not None or
            self.firstName is not None or
            self.line0 is not None or
            self.line1 is not None or
            self.line2 is not None or
            self.line3 is not None or
            self.countryCode is not None or
            self.city is not None or
            self.zipCode is not None or
            self.phoneNumber is not None or
            self.mobileNumber is not None or
            self.doorCode1 is not None or
            self.doorCode2 is not None or
            self.email is not None or
            self.intercom is not None or
            self.language is not None or
            self.stateOrProvinceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType98', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codSenderAddressType98')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'codSenderAddressType98':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='codSenderAddressType98')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='codSenderAddressType98', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='codSenderAddressType98'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='codSenderAddressType98', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.companyName is not None:
            namespaceprefix_ = self.companyName_nsprefix_ + ':' if (UseCapturedNS_ and self.companyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompanyName>%s</%scompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.companyName), input_name='companyName')), namespaceprefix_ , eol_))
        if self.lastName is not None:
            namespaceprefix_ = self.lastName_nsprefix_ + ':' if (UseCapturedNS_ and self.lastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastName>%s</%slastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastName), input_name='lastName')), namespaceprefix_ , eol_))
        if self.firstName is not None:
            namespaceprefix_ = self.firstName_nsprefix_ + ':' if (UseCapturedNS_ and self.firstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirstName>%s</%sfirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.firstName), input_name='firstName')), namespaceprefix_ , eol_))
        if self.line0 is not None:
            namespaceprefix_ = self.line0_nsprefix_ + ':' if (UseCapturedNS_ and self.line0_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline0>%s</%sline0>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line0), input_name='line0')), namespaceprefix_ , eol_))
        if self.line1 is not None:
            namespaceprefix_ = self.line1_nsprefix_ + ':' if (UseCapturedNS_ and self.line1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline1>%s</%sline1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line1), input_name='line1')), namespaceprefix_ , eol_))
        if self.line2 is not None:
            namespaceprefix_ = self.line2_nsprefix_ + ':' if (UseCapturedNS_ and self.line2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline2>%s</%sline2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line2), input_name='line2')), namespaceprefix_ , eol_))
        if self.line3 is not None:
            namespaceprefix_ = self.line3_nsprefix_ + ':' if (UseCapturedNS_ and self.line3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sline3>%s</%sline3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.line3), input_name='line3')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.phoneNumber is not None:
            namespaceprefix_ = self.phoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.phoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphoneNumber>%s</%sphoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.phoneNumber), input_name='phoneNumber')), namespaceprefix_ , eol_))
        if self.mobileNumber is not None:
            namespaceprefix_ = self.mobileNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.mobileNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smobileNumber>%s</%smobileNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mobileNumber), input_name='mobileNumber')), namespaceprefix_ , eol_))
        if self.doorCode1 is not None:
            namespaceprefix_ = self.doorCode1_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode1>%s</%sdoorCode1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode1), input_name='doorCode1')), namespaceprefix_ , eol_))
        if self.doorCode2 is not None:
            namespaceprefix_ = self.doorCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.doorCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoorCode2>%s</%sdoorCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.doorCode2), input_name='doorCode2')), namespaceprefix_ , eol_))
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.intercom is not None:
            namespaceprefix_ = self.intercom_nsprefix_ + ':' if (UseCapturedNS_ and self.intercom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintercom>%s</%sintercom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.intercom), input_name='intercom')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.stateOrProvinceCode is not None:
            namespaceprefix_ = self.stateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.stateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstateOrProvinceCode>%s</%sstateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.stateOrProvinceCode), input_name='stateOrProvinceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'companyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'companyName')
            value_ = self.gds_validate_string(value_, node, 'companyName')
            self.companyName = value_
            self.companyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'lastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lastName')
            value_ = self.gds_validate_string(value_, node, 'lastName')
            self.lastName = value_
            self.lastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'firstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'firstName')
            value_ = self.gds_validate_string(value_, node, 'firstName')
            self.firstName = value_
            self.firstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'line0':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line0')
            value_ = self.gds_validate_string(value_, node, 'line0')
            self.line0 = value_
            self.line0_nsprefix_ = child_.prefix
        elif nodeName_ == 'line1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line1')
            value_ = self.gds_validate_string(value_, node, 'line1')
            self.line1 = value_
            self.line1_nsprefix_ = child_.prefix
        elif nodeName_ == 'line2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line2')
            value_ = self.gds_validate_string(value_, node, 'line2')
            self.line2 = value_
            self.line2_nsprefix_ = child_.prefix
        elif nodeName_ == 'line3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'line3')
            value_ = self.gds_validate_string(value_, node, 'line3')
            self.line3 = value_
            self.line3_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'phoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'phoneNumber')
            value_ = self.gds_validate_string(value_, node, 'phoneNumber')
            self.phoneNumber = value_
            self.phoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mobileNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mobileNumber')
            value_ = self.gds_validate_string(value_, node, 'mobileNumber')
            self.mobileNumber = value_
            self.mobileNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode1')
            value_ = self.gds_validate_string(value_, node, 'doorCode1')
            self.doorCode1 = value_
            self.doorCode1_nsprefix_ = child_.prefix
        elif nodeName_ == 'doorCode2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'doorCode2')
            value_ = self.gds_validate_string(value_, node, 'doorCode2')
            self.doorCode2 = value_
            self.doorCode2_nsprefix_ = child_.prefix
        elif nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        elif nodeName_ == 'intercom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'intercom')
            value_ = self.gds_validate_string(value_, node, 'intercom')
            self.intercom = value_
            self.intercom_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'stateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'stateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'stateOrProvinceCode')
            self.stateOrProvinceCode = value_
            self.stateOrProvinceCode_nsprefix_ = child_.prefix
# end class codSenderAddressType98


class uploadDocumentType99(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, documentContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.documentContent = documentContent
        self.documentContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uploadDocumentType99)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uploadDocumentType99.subclass:
            return uploadDocumentType99.subclass(*args_, **kwargs_)
        else:
            return uploadDocumentType99(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_documentContent(self):
        return self.documentContent
    def set_documentContent(self, documentContent):
        self.documentContent = documentContent
    def _hasContent(self):
        if (
            self.documentContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType99', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uploadDocumentType99')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uploadDocumentType99':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uploadDocumentType99')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uploadDocumentType99', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uploadDocumentType99'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='uploadDocumentType99', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.documentContent is not None:
            namespaceprefix_ = self.documentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.documentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentContent>%s</%sdocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.documentContent, input_name='documentContent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'documentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'documentContent')
            else:
                bval_ = None
            self.documentContent = bval_
            self.documentContent_nsprefix_ = child_.prefix
# end class uploadDocumentType99


class fieldsType100(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType100)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType100.subclass:
            return fieldsType100.subclass(*args_, **kwargs_)
        else:
            return fieldsType100(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType100', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType100')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType100':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType100')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType100', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType100'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType100', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType101.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType100


class fieldType101(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType101)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType101.subclass:
            return fieldType101.subclass(*args_, **kwargs_)
        else:
            return fieldType101(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType101', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType101')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType101':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType101')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType101', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType101'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType101', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType101


class fieldsType102(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldsType102)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldsType102.subclass:
            return fieldsType102.subclass(*args_, **kwargs_)
        else:
            return fieldsType102(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def _hasContent(self):
        if (
            self.field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType102', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldsType102')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldsType102':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldsType102')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldsType102', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldsType102'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldsType102', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = fieldType103.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
# end class fieldsType102


class fieldType103(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldType103)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldType103.subclass:
            return fieldType103.subclass(*args_, **kwargs_)
        else:
            return fieldType103(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType103', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldType103')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'fieldType103':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldType103')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='fieldType103', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldType103'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='fieldType103', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class fieldType103


class labelV2Response(labelResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = labelResponse
    def __init__(self, label=None, cn23=None, parcelNumber=None, parcelNumberPartner=None, pdfUrl=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("labelV2Response"), self).__init__(label, cn23, parcelNumber, parcelNumberPartner, pdfUrl,  **kwargs_)
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, labelV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if labelV2Response.subclass:
            return labelV2Response.subclass(*args_, **kwargs_)
        else:
            return labelV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.fields is not None or
            super(labelV2Response, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='labelV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('labelV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'labelV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='labelV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='labelV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='labelV2Response'):
        super(labelV2Response, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='labelV2Response')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='labelV2Response', fromsubclass_=False, pretty_print=True):
        super(labelV2Response, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(labelV2Response, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'fields':
            obj_ = fieldsType64.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
        super(labelV2Response, self)._buildChildren(child_, node, nodeName_, True)
# end class labelV2Response


class xmlV2Response(xmlResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = xmlResponse
    def __init__(self, cn23=None, addressee=None, barCodeCityssimo=None, barCodePCH=None, barCodeRouting=None, belgiumLabel=None, cabAztec=None, contractNumber=None, elementVisual=None, numberPCH=None, numberRouting=None, parcelNumber=None, parcelNumberPartner=None, pickupLocation=None, routing=None, sender=None, sitePCH=None, swissLabel=None, zoneRouting=None, fields=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("xmlV2Response"), self).__init__(cn23, addressee, barCodeCityssimo, barCodePCH, barCodeRouting, belgiumLabel, cabAztec, contractNumber, elementVisual, numberPCH, numberRouting, parcelNumber, parcelNumberPartner, pickupLocation, routing, sender, sitePCH, swissLabel, zoneRouting,  **kwargs_)
        self.fields = fields
        self.fields_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xmlV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xmlV2Response.subclass:
            return xmlV2Response.subclass(*args_, **kwargs_)
        else:
            return xmlV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_fields(self):
        return self.fields
    def set_fields(self, fields):
        self.fields = fields
    def _hasContent(self):
        if (
            self.fields is not None or
            super(xmlV2Response, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='xmlV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xmlV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'xmlV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='xmlV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='xmlV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='xmlV2Response'):
        super(xmlV2Response, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='xmlV2Response')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='xmlV2Response', fromsubclass_=False, pretty_print=True):
        super(xmlV2Response, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.fields is not None:
            namespaceprefix_ = self.fields_nsprefix_ + ':' if (UseCapturedNS_ and self.fields_nsprefix_) else ''
            self.fields.export(outfile, level, namespaceprefix_, namespacedef_='', name_='fields', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(xmlV2Response, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'fields':
            obj_ = fieldsType58.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.fields = obj_
            obj_.original_tagname_ = 'fields'
        super(xmlV2Response, self)._buildChildren(child_, node, nodeName_, True)
# end class xmlV2Response


class GetListMailBoxPickingDatesResponseType(baseResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = baseResponse
    def __init__(self, messages=None, mailBoxPickingDateMaxHour=None, mailBoxPickingDates=None, validityTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("GetListMailBoxPickingDatesResponseType"), self).__init__(messages,  **kwargs_)
        self.mailBoxPickingDateMaxHour = mailBoxPickingDateMaxHour
        self.mailBoxPickingDateMaxHour_nsprefix_ = None
        if mailBoxPickingDates is None:
            self.mailBoxPickingDates = []
        else:
            self.mailBoxPickingDates = mailBoxPickingDates
        self.mailBoxPickingDates_nsprefix_ = None
        self.validityTime = validityTime
        self.validityTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetListMailBoxPickingDatesResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetListMailBoxPickingDatesResponseType.subclass:
            return GetListMailBoxPickingDatesResponseType.subclass(*args_, **kwargs_)
        else:
            return GetListMailBoxPickingDatesResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_mailBoxPickingDateMaxHour(self):
        return self.mailBoxPickingDateMaxHour
    def set_mailBoxPickingDateMaxHour(self, mailBoxPickingDateMaxHour):
        self.mailBoxPickingDateMaxHour = mailBoxPickingDateMaxHour
    def get_mailBoxPickingDates(self):
        return self.mailBoxPickingDates
    def set_mailBoxPickingDates(self, mailBoxPickingDates):
        self.mailBoxPickingDates = mailBoxPickingDates
    def add_mailBoxPickingDates(self, value):
        self.mailBoxPickingDates.append(value)
    def insert_mailBoxPickingDates_at(self, index, value):
        self.mailBoxPickingDates.insert(index, value)
    def replace_mailBoxPickingDates_at(self, index, value):
        self.mailBoxPickingDates[index] = value
    def get_validityTime(self):
        return self.validityTime
    def set_validityTime(self, validityTime):
        self.validityTime = validityTime
    def _hasContent(self):
        if (
            self.mailBoxPickingDateMaxHour is not None or
            self.mailBoxPickingDates or
            self.validityTime is not None or
            super(GetListMailBoxPickingDatesResponseType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetListMailBoxPickingDatesResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetListMailBoxPickingDatesResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetListMailBoxPickingDatesResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetListMailBoxPickingDatesResponseType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetListMailBoxPickingDatesResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetListMailBoxPickingDatesResponseType'):
        super(GetListMailBoxPickingDatesResponseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetListMailBoxPickingDatesResponseType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetListMailBoxPickingDatesResponseType', fromsubclass_=False, pretty_print=True):
        super(GetListMailBoxPickingDatesResponseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mailBoxPickingDateMaxHour is not None:
            namespaceprefix_ = self.mailBoxPickingDateMaxHour_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDateMaxHour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDateMaxHour>%s</%smailBoxPickingDateMaxHour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mailBoxPickingDateMaxHour), input_name='mailBoxPickingDateMaxHour')), namespaceprefix_ , eol_))
        for mailBoxPickingDates_ in self.mailBoxPickingDates:
            namespaceprefix_ = self.mailBoxPickingDates_nsprefix_ + ':' if (UseCapturedNS_ and self.mailBoxPickingDates_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smailBoxPickingDates>%s</%smailBoxPickingDates>%s' % (namespaceprefix_ , self.gds_format_datetime(mailBoxPickingDates_, input_name='mailBoxPickingDates'), namespaceprefix_ , eol_))
        if self.validityTime is not None:
            namespaceprefix_ = self.validityTime_nsprefix_ + ':' if (UseCapturedNS_ and self.validityTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalidityTime>%s</%svalidityTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.validityTime), input_name='validityTime')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(GetListMailBoxPickingDatesResponseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'mailBoxPickingDateMaxHour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mailBoxPickingDateMaxHour')
            value_ = self.gds_validate_string(value_, node, 'mailBoxPickingDateMaxHour')
            self.mailBoxPickingDateMaxHour = value_
            self.mailBoxPickingDateMaxHour_nsprefix_ = child_.prefix
        elif nodeName_ == 'mailBoxPickingDates':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.mailBoxPickingDates.append(dval_)
            self.mailBoxPickingDates_nsprefix_ = child_.prefix
        elif nodeName_ == 'validityTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'validityTime')
            value_ = self.gds_validate_string(value_, node, 'validityTime')
            self.validityTime = value_
            self.validityTime_nsprefix_ = child_.prefix
        super(GetListMailBoxPickingDatesResponseType, self)._buildChildren(child_, node, nodeName_, True)
# end class GetListMailBoxPickingDatesResponseType


GDSClassesMapping = {
    'checkGenerateLabel': checkGenerateLabel,
    'checkGenerateLabelResponse': checkGenerateLabelResponse,
    'generateBordereauByParcelsNumbers': generateBordereauByParcelsNumbers,
    'generateBordereauByParcelsNumbersResponse': generateBordereauByParcelsNumbersResponse,
    'generateCN23': generateCN23,
    'generateCN23Response': generateCN23Response,
    'generateLabel': generateLabel,
    'generateLabelResponse': generateLabelResponse,
    'getBordereauByNumber': getBordereauByNumber,
    'getBordereauByNumberResponse': getBordereauByNumberResponse,
    'getListMailBoxPickingDates': getListMailBoxPickingDates,
    'getListMailBoxPickingDatesResponse': getListMailBoxPickingDatesResponse,
    'getProductInter': getProductInter,
    'getProductInterResponse': getProductInterResponse,
    'planPickup': planPickup,
    'planPickupResponse': planPickupResponse,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CheckGenerateLabelRequestType'
        rootClass = CheckGenerateLabelRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CheckGenerateLabelRequestType'
        rootClass = CheckGenerateLabelRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CheckGenerateLabelRequestType'
        rootClass = CheckGenerateLabelRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://sls.ws.coliposte.fr"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CheckGenerateLabelRequestType'
        rootClass = CheckGenerateLabelRequestType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from services import *\n\n')
        sys.stdout.write('import services as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'http://sls.ws.coliposte.fr': [('getListMailBoxPickingDates',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('getListMailBoxPickingDatesResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('GetListMailBoxPickingDatesResponseType',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('baseResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('Message', './schemas/services.xsd', 'CT'),
                                ('generateLabel',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('generateLabelResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('GenerateLabelV2ResponseType',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('xmlV2Response',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('xmlResponse', './schemas/services.xsd', 'CT'),
                                ('belgiumLabel',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('codeVAS', './schemas/services.xsd', 'CT'),
                                ('returnAddressBelgium',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('elementVisual',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('pickupLocation',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('addressPickupLocation',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('routing', './schemas/services.xsd', 'CT'),
                                ('site', './schemas/services.xsd', 'CT'),
                                ('addressPCH', './schemas/services.xsd', 'CT'),
                                ('swissLabel', './schemas/services.xsd', 'CT'),
                                ('zoneRouting', './schemas/services.xsd', 'CT'),
                                ('zoneCABRoutage',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('zoneInfosRoutage',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('labelV2Response',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('labelResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('planPickup', './schemas/services.xsd', 'CT'),
                                ('planPickupResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('planPickupResponseType',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('checkGenerateLabel',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('checkGenerateLabelResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('CheckGenerateLabelResponseType',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('getProductInter',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('getProductInterResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('GetProductInterResponseType',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('generateBordereauByParcelsNumbers',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('generateBordereauByParcelsNumbersResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('bordereauResponse',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('bordereau', './schemas/services.xsd', 'CT'),
                                ('bordereauHeader',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('generateCN23',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('generateCN23Response',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('GenerateCN23V2ResponseType',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('getBordereauByNumber',
                                 './schemas/services.xsd',
                                 'CT'),
                                ('getBordereauByNumberResponse',
                                 './schemas/services.xsd',
                                 'CT')]}

__all__ = [
    "CheckGenerateLabelRequestType",
    "CheckGenerateLabelResponseType",
    "GenerateCN23RequestType",
    "GenerateCN23V2ResponseType",
    "GenerateLabelRequestType",
    "GenerateLabelV2ResponseType",
    "GetListMailBoxPickingDatesResponseType",
    "GetListMailBoxPickingDatesRetourRequestType",
    "GetProductInterRequestType",
    "GetProductInterResponseType",
    "Message",
    "addressPCH",
    "addressPickupLocation",
    "addressType",
    "addressType1",
    "addressType12",
    "addressType14",
    "addressType30",
    "addressType32",
    "addressType51",
    "addressType53",
    "addressType61",
    "addressType63",
    "addressType78",
    "addressType80",
    "addressType95",
    "addressType97",
    "addresseeType",
    "addresseeType13",
    "addresseeType31",
    "addresseeType52",
    "addresseeType60",
    "addresseeType79",
    "addresseeType96",
    "articleType",
    "articleType25",
    "articleType46",
    "articleType7",
    "articleType73",
    "articleType90",
    "baseResponse",
    "belgiumLabel",
    "bordereau",
    "bordereauHeader",
    "bordereauResponse",
    "categoryType",
    "categoryType26",
    "categoryType47",
    "categoryType74",
    "categoryType8",
    "categoryType91",
    "checkGenerateLabel",
    "checkGenerateLabelRequestType",
    "checkGenerateLabelResponse",
    "codSenderAddressType",
    "codSenderAddressType15",
    "codSenderAddressType33",
    "codSenderAddressType54",
    "codSenderAddressType81",
    "codSenderAddressType98",
    "codeVAS",
    "contentsType",
    "contentsType24",
    "contentsType45",
    "contentsType6",
    "contentsType72",
    "contentsType89",
    "customsDeclarationsType",
    "customsDeclarationsType23",
    "customsDeclarationsType44",
    "customsDeclarationsType5",
    "customsDeclarationsType71",
    "customsDeclarationsType88",
    "elementVisual",
    "fieldType",
    "fieldType101",
    "fieldType103",
    "fieldType18",
    "fieldType36",
    "fieldType57",
    "fieldType59",
    "fieldType65",
    "fieldType84",
    "fieldsType",
    "fieldsType100",
    "fieldsType102",
    "fieldsType17",
    "fieldsType35",
    "fieldsType56",
    "fieldsType58",
    "fieldsType64",
    "fieldsType83",
    "generateBordereauByParcelsNumbers",
    "generateBordereauByParcelsNumbersResponse",
    "generateBordereauParcelNumberListType",
    "generateCN23",
    "generateCN23RequestType",
    "generateCN23Response",
    "generateLabel",
    "generateLabelRequestType",
    "generateLabelResponse",
    "getBordereauByNumber",
    "getBordereauByNumberResponse",
    "getListMailBoxPickingDates",
    "getListMailBoxPickingDatesResponse",
    "getListMailBoxPickingDatesRetourRequestType",
    "getProductInter",
    "getProductInterRequestType",
    "getProductInterResponse",
    "importerAddressType",
    "importerAddressType10",
    "importerAddressType28",
    "importerAddressType49",
    "importerAddressType76",
    "importerAddressType93",
    "labelResponse",
    "labelV2Response",
    "letterType",
    "letterType2",
    "letterType20",
    "letterType41",
    "letterType68",
    "letterType85",
    "originalType",
    "originalType27",
    "originalType48",
    "originalType75",
    "originalType9",
    "originalType92",
    "outputFormatType",
    "outputFormatType19",
    "outputFormatType40",
    "outputFormatType67",
    "parcelType",
    "parcelType22",
    "parcelType4",
    "parcelType43",
    "parcelType70",
    "parcelType87",
    "pickupLocation",
    "planPickup",
    "planPickupRequestType",
    "planPickupResponse",
    "planPickupResponseType",
    "returnAddressBelgium",
    "routing",
    "senderType",
    "senderType11",
    "senderType29",
    "senderType37",
    "senderType38",
    "senderType39",
    "senderType50",
    "senderType62",
    "senderType66",
    "senderType77",
    "senderType94",
    "serviceType",
    "serviceType21",
    "serviceType3",
    "serviceType42",
    "serviceType69",
    "serviceType86",
    "site",
    "swissLabel",
    "uploadDocumentType",
    "uploadDocumentType16",
    "uploadDocumentType34",
    "uploadDocumentType55",
    "uploadDocumentType82",
    "uploadDocumentType99",
    "xmlResponse",
    "xmlV2Response",
    "zoneCABRoutage",
    "zoneInfosRoutage",
    "zoneRouting"
]
