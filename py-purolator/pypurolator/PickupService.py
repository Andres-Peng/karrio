#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 14:06:23 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/PickupService.xsd.py')
#
# Command line arguments:
#   PickupService.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/PickupService.xsd.py" PickupService.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RequestContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContainer.subclass:
            return RequestContainer.subclass(*args_, **kwargs_)
        else:
            return RequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContainer', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContainer', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RequestContainer


class PickupInstruction(GeneratedsSuper):
    """PickupInstruction"""
    subclass = None
    superclass = None
    def __init__(self, Date=None, AnyTimeAfter=None, UntilTime=None, TotalWeight=None, TotalPieces=None, BoxesIndicator=None, PickUpLocation=None, AdditionalInstructions=None, SupplyRequestCodes=None, TrailerAccessible=None, LoadingDockAvailable=None, ShipmentOnSkids=None, NumberOfSkids=None):
        self.original_tagname_ = None
        self.Date = Date
        self.AnyTimeAfter = AnyTimeAfter
        self.UntilTime = UntilTime
        self.TotalWeight = TotalWeight
        self.TotalPieces = TotalPieces
        self.BoxesIndicator = BoxesIndicator
        self.PickUpLocation = PickUpLocation
        self.AdditionalInstructions = AdditionalInstructions
        self.SupplyRequestCodes = SupplyRequestCodes
        self.TrailerAccessible = TrailerAccessible
        self.LoadingDockAvailable = LoadingDockAvailable
        self.ShipmentOnSkids = ShipmentOnSkids
        self.NumberOfSkids = NumberOfSkids
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupInstruction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupInstruction.subclass:
            return PickupInstruction.subclass(*args_, **kwargs_)
        else:
            return PickupInstruction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_AnyTimeAfter(self): return self.AnyTimeAfter
    def set_AnyTimeAfter(self, AnyTimeAfter): self.AnyTimeAfter = AnyTimeAfter
    def get_UntilTime(self): return self.UntilTime
    def set_UntilTime(self, UntilTime): self.UntilTime = UntilTime
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_TotalPieces(self): return self.TotalPieces
    def set_TotalPieces(self, TotalPieces): self.TotalPieces = TotalPieces
    def get_BoxesIndicator(self): return self.BoxesIndicator
    def set_BoxesIndicator(self, BoxesIndicator): self.BoxesIndicator = BoxesIndicator
    def get_PickUpLocation(self): return self.PickUpLocation
    def set_PickUpLocation(self, PickUpLocation): self.PickUpLocation = PickUpLocation
    def get_AdditionalInstructions(self): return self.AdditionalInstructions
    def set_AdditionalInstructions(self, AdditionalInstructions): self.AdditionalInstructions = AdditionalInstructions
    def get_SupplyRequestCodes(self): return self.SupplyRequestCodes
    def set_SupplyRequestCodes(self, SupplyRequestCodes): self.SupplyRequestCodes = SupplyRequestCodes
    def get_TrailerAccessible(self): return self.TrailerAccessible
    def set_TrailerAccessible(self, TrailerAccessible): self.TrailerAccessible = TrailerAccessible
    def get_LoadingDockAvailable(self): return self.LoadingDockAvailable
    def set_LoadingDockAvailable(self, LoadingDockAvailable): self.LoadingDockAvailable = LoadingDockAvailable
    def get_ShipmentOnSkids(self): return self.ShipmentOnSkids
    def set_ShipmentOnSkids(self, ShipmentOnSkids): self.ShipmentOnSkids = ShipmentOnSkids
    def get_NumberOfSkids(self): return self.NumberOfSkids
    def set_NumberOfSkids(self, NumberOfSkids): self.NumberOfSkids = NumberOfSkids
    def hasContent_(self):
        if (
            self.Date is not None or
            self.AnyTimeAfter is not None or
            self.UntilTime is not None or
            self.TotalWeight is not None or
            self.TotalPieces is not None or
            self.BoxesIndicator is not None or
            self.PickUpLocation is not None or
            self.AdditionalInstructions is not None or
            self.SupplyRequestCodes is not None or
            self.TrailerAccessible is not None or
            self.LoadingDockAvailable is not None or
            self.ShipmentOnSkids is not None or
            self.NumberOfSkids is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PickupInstruction', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupInstruction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupInstruction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PickupInstruction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PickupInstruction'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PickupInstruction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Date>%s</tns:Date>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), eol_))
        if self.AnyTimeAfter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AnyTimeAfter>%s</tns:AnyTimeAfter>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AnyTimeAfter), input_name='AnyTimeAfter')), eol_))
        if self.UntilTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UntilTime>%s</tns:UntilTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UntilTime), input_name='UntilTime')), eol_))
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
        if self.TotalPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:TotalPieces>%s</tns:TotalPieces>%s' % (self.gds_format_integer(self.TotalPieces, input_name='TotalPieces'), eol_))
        if self.BoxesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BoxesIndicator>%s</tns:BoxesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BoxesIndicator), input_name='BoxesIndicator')), eol_))
        if self.PickUpLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickUpLocation>%s</tns:PickUpLocation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickUpLocation), input_name='PickUpLocation')), eol_))
        if self.AdditionalInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AdditionalInstructions>%s</tns:AdditionalInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalInstructions), input_name='AdditionalInstructions')), eol_))
        if self.SupplyRequestCodes is not None:
            self.SupplyRequestCodes.export(outfile, level, namespace_, name_='SupplyRequestCodes', pretty_print=pretty_print)
        if self.TrailerAccessible is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:TrailerAccessible>%s</tns:TrailerAccessible>%s' % (self.gds_format_boolean(self.TrailerAccessible, input_name='TrailerAccessible'), eol_))
        if self.LoadingDockAvailable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:LoadingDockAvailable>%s</tns:LoadingDockAvailable>%s' % (self.gds_format_boolean(self.LoadingDockAvailable, input_name='LoadingDockAvailable'), eol_))
        if self.ShipmentOnSkids is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ShipmentOnSkids>%s</tns:ShipmentOnSkids>%s' % (self.gds_format_boolean(self.ShipmentOnSkids, input_name='ShipmentOnSkids'), eol_))
        if self.NumberOfSkids is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:NumberOfSkids>%s</tns:NumberOfSkids>%s' % (self.gds_format_integer(self.NumberOfSkids, input_name='NumberOfSkids'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'AnyTimeAfter':
            AnyTimeAfter_ = child_.text
            AnyTimeAfter_ = self.gds_validate_string(AnyTimeAfter_, node, 'AnyTimeAfter')
            self.AnyTimeAfter = AnyTimeAfter_
        elif nodeName_ == 'UntilTime':
            UntilTime_ = child_.text
            UntilTime_ = self.gds_validate_string(UntilTime_, node, 'UntilTime')
            self.UntilTime = UntilTime_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'TotalPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPieces')
            self.TotalPieces = ival_
        elif nodeName_ == 'BoxesIndicator':
            BoxesIndicator_ = child_.text
            BoxesIndicator_ = self.gds_validate_string(BoxesIndicator_, node, 'BoxesIndicator')
            self.BoxesIndicator = BoxesIndicator_
        elif nodeName_ == 'PickUpLocation':
            PickUpLocation_ = child_.text
            PickUpLocation_ = self.gds_validate_string(PickUpLocation_, node, 'PickUpLocation')
            self.PickUpLocation = PickUpLocation_
        elif nodeName_ == 'AdditionalInstructions':
            AdditionalInstructions_ = child_.text
            AdditionalInstructions_ = self.gds_validate_string(AdditionalInstructions_, node, 'AdditionalInstructions')
            self.AdditionalInstructions = AdditionalInstructions_
        elif nodeName_ == 'SupplyRequestCodes':
            obj_ = SupplyRequestCodes.factory()
            obj_.build(child_)
            self.SupplyRequestCodes = obj_
            obj_.original_tagname_ = 'SupplyRequestCodes'
        elif nodeName_ == 'TrailerAccessible':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'TrailerAccessible')
            self.TrailerAccessible = ival_
        elif nodeName_ == 'LoadingDockAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'LoadingDockAvailable')
            self.LoadingDockAvailable = ival_
        elif nodeName_ == 'ShipmentOnSkids':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ShipmentOnSkids')
            self.ShipmentOnSkids = ival_
        elif nodeName_ == 'NumberOfSkids':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfSkids')
            self.NumberOfSkids = ival_
# end class PickupInstruction


class Weight(GeneratedsSuper):
    """Weight"""
    subclass = None
    superclass = None
    def __init__(self, Value=None, WeightUnit=None):
        self.original_tagname_ = None
        self.Value = Value
        self.WeightUnit = WeightUnit
        self.validate_WeightUnit(self.WeightUnit)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_WeightUnit(self): return self.WeightUnit
    def set_WeightUnit(self, WeightUnit): self.WeightUnit = WeightUnit
    def validate_WeightUnit(self, value):
        # Validate type WeightUnit, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['lb', 'kg']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUnit' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.WeightUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Weight', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Value>%s</tns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.WeightUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:WeightUnit>%s</tns:WeightUnit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WeightUnit), input_name='WeightUnit')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'WeightUnit':
            WeightUnit_ = child_.text
            WeightUnit_ = self.gds_validate_string(WeightUnit_, node, 'WeightUnit')
            self.WeightUnit = WeightUnit_
            # validate type WeightUnit
            self.validate_WeightUnit(self.WeightUnit)
# end class Weight


class SupplyRequestCodes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SupplyRequestCode=None):
        self.original_tagname_ = None
        if SupplyRequestCode is None:
            self.SupplyRequestCode = []
        else:
            self.SupplyRequestCode = SupplyRequestCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplyRequestCodes)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplyRequestCodes.subclass:
            return SupplyRequestCodes.subclass(*args_, **kwargs_)
        else:
            return SupplyRequestCodes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SupplyRequestCode(self): return self.SupplyRequestCode
    def set_SupplyRequestCode(self, SupplyRequestCode): self.SupplyRequestCode = SupplyRequestCode
    def add_SupplyRequestCode(self, value): self.SupplyRequestCode.append(value)
    def insert_SupplyRequestCode_at(self, index, value): self.SupplyRequestCode.insert(index, value)
    def replace_SupplyRequestCode_at(self, index, value): self.SupplyRequestCode[index] = value
    def hasContent_(self):
        if (
            self.SupplyRequestCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='SupplyRequestCodes', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplyRequestCodes')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SupplyRequestCodes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='SupplyRequestCodes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SupplyRequestCodes'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SupplyRequestCodes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SupplyRequestCode_ in self.SupplyRequestCode:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SupplyRequestCode>%s</tns:SupplyRequestCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SupplyRequestCode_), input_name='SupplyRequestCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SupplyRequestCode':
            SupplyRequestCode_ = child_.text
            SupplyRequestCode_ = self.gds_validate_string(SupplyRequestCode_, node, 'SupplyRequestCode')
            self.SupplyRequestCode.append(SupplyRequestCode_)
# end class SupplyRequestCodes


class Address(GeneratedsSuper):
    """Address"""
    subclass = None
    superclass = None
    def __init__(self, Name=None, Company=None, Department=None, StreetNumber=None, StreetSuffix=None, StreetName=None, StreetType=None, StreetDirection=None, Suite=None, Floor=None, StreetAddress2=None, StreetAddress3=None, City=None, Province=None, Country=None, PostalCode=None, PhoneNumber=None, FaxNumber=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Company = Company
        self.Department = Department
        self.StreetNumber = StreetNumber
        self.StreetSuffix = StreetSuffix
        self.StreetName = StreetName
        self.StreetType = StreetType
        self.StreetDirection = StreetDirection
        self.Suite = Suite
        self.Floor = Floor
        self.StreetAddress2 = StreetAddress2
        self.StreetAddress3 = StreetAddress3
        self.City = City
        self.Province = Province
        self.Country = Country
        self.PostalCode = PostalCode
        self.PhoneNumber = PhoneNumber
        self.FaxNumber = FaxNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Company(self): return self.Company
    def set_Company(self, Company): self.Company = Company
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_StreetNumber(self): return self.StreetNumber
    def set_StreetNumber(self, StreetNumber): self.StreetNumber = StreetNumber
    def get_StreetSuffix(self): return self.StreetSuffix
    def set_StreetSuffix(self, StreetSuffix): self.StreetSuffix = StreetSuffix
    def get_StreetName(self): return self.StreetName
    def set_StreetName(self, StreetName): self.StreetName = StreetName
    def get_StreetType(self): return self.StreetType
    def set_StreetType(self, StreetType): self.StreetType = StreetType
    def get_StreetDirection(self): return self.StreetDirection
    def set_StreetDirection(self, StreetDirection): self.StreetDirection = StreetDirection
    def get_Suite(self): return self.Suite
    def set_Suite(self, Suite): self.Suite = Suite
    def get_Floor(self): return self.Floor
    def set_Floor(self, Floor): self.Floor = Floor
    def get_StreetAddress2(self): return self.StreetAddress2
    def set_StreetAddress2(self, StreetAddress2): self.StreetAddress2 = StreetAddress2
    def get_StreetAddress3(self): return self.StreetAddress3
    def set_StreetAddress3(self, StreetAddress3): self.StreetAddress3 = StreetAddress3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_Province(self): return self.Province
    def set_Province(self, Province): self.Province = Province
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Company is not None or
            self.Department is not None or
            self.StreetNumber is not None or
            self.StreetSuffix is not None or
            self.StreetName is not None or
            self.StreetType is not None or
            self.StreetDirection is not None or
            self.Suite is not None or
            self.Floor is not None or
            self.StreetAddress2 is not None or
            self.StreetAddress3 is not None or
            self.City is not None or
            self.Province is not None or
            self.Country is not None or
            self.PostalCode is not None or
            self.PhoneNumber is not None or
            self.FaxNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Address', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Name>%s</tns:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Company>%s</tns:Company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Company), input_name='Company')), eol_))
        if self.Department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Department>%s</tns:Department>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), eol_))
        if self.StreetNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetNumber>%s</tns:StreetNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetNumber), input_name='StreetNumber')), eol_))
        if self.StreetSuffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetSuffix>%s</tns:StreetSuffix>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetSuffix), input_name='StreetSuffix')), eol_))
        if self.StreetName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetName>%s</tns:StreetName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetName), input_name='StreetName')), eol_))
        if self.StreetType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetType>%s</tns:StreetType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetType), input_name='StreetType')), eol_))
        if self.StreetDirection is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetDirection>%s</tns:StreetDirection>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetDirection), input_name='StreetDirection')), eol_))
        if self.Suite is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Suite>%s</tns:Suite>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Suite), input_name='Suite')), eol_))
        if self.Floor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Floor>%s</tns:Floor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Floor), input_name='Floor')), eol_))
        if self.StreetAddress2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetAddress2>%s</tns:StreetAddress2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetAddress2), input_name='StreetAddress2')), eol_))
        if self.StreetAddress3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetAddress3>%s</tns:StreetAddress3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetAddress3), input_name='StreetAddress3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:City>%s</tns:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.Province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Province>%s</tns:Province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Province), input_name='Province')), eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Country>%s</tns:Country>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PostalCode>%s</tns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.PhoneNumber is not None:
            self.PhoneNumber.export(outfile, level, namespace_, name_='PhoneNumber', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            self.FaxNumber.export(outfile, level, namespace_, name_='FaxNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Company':
            Company_ = child_.text
            Company_ = self.gds_validate_string(Company_, node, 'Company')
            self.Company = Company_
        elif nodeName_ == 'Department':
            Department_ = child_.text
            Department_ = self.gds_validate_string(Department_, node, 'Department')
            self.Department = Department_
        elif nodeName_ == 'StreetNumber':
            StreetNumber_ = child_.text
            StreetNumber_ = self.gds_validate_string(StreetNumber_, node, 'StreetNumber')
            self.StreetNumber = StreetNumber_
        elif nodeName_ == 'StreetSuffix':
            StreetSuffix_ = child_.text
            StreetSuffix_ = self.gds_validate_string(StreetSuffix_, node, 'StreetSuffix')
            self.StreetSuffix = StreetSuffix_
        elif nodeName_ == 'StreetName':
            StreetName_ = child_.text
            StreetName_ = self.gds_validate_string(StreetName_, node, 'StreetName')
            self.StreetName = StreetName_
        elif nodeName_ == 'StreetType':
            StreetType_ = child_.text
            StreetType_ = self.gds_validate_string(StreetType_, node, 'StreetType')
            self.StreetType = StreetType_
        elif nodeName_ == 'StreetDirection':
            StreetDirection_ = child_.text
            StreetDirection_ = self.gds_validate_string(StreetDirection_, node, 'StreetDirection')
            self.StreetDirection = StreetDirection_
        elif nodeName_ == 'Suite':
            Suite_ = child_.text
            Suite_ = self.gds_validate_string(Suite_, node, 'Suite')
            self.Suite = Suite_
        elif nodeName_ == 'Floor':
            Floor_ = child_.text
            Floor_ = self.gds_validate_string(Floor_, node, 'Floor')
            self.Floor = Floor_
        elif nodeName_ == 'StreetAddress2':
            StreetAddress2_ = child_.text
            StreetAddress2_ = self.gds_validate_string(StreetAddress2_, node, 'StreetAddress2')
            self.StreetAddress2 = StreetAddress2_
        elif nodeName_ == 'StreetAddress3':
            StreetAddress3_ = child_.text
            StreetAddress3_ = self.gds_validate_string(StreetAddress3_, node, 'StreetAddress3')
            self.StreetAddress3 = StreetAddress3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'Province':
            Province_ = child_.text
            Province_ = self.gds_validate_string(Province_, node, 'Province')
            self.Province = Province_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'PhoneNumber':
            obj_ = PhoneNumber.factory()
            obj_.build(child_)
            self.PhoneNumber = obj_
            obj_.original_tagname_ = 'PhoneNumber'
        elif nodeName_ == 'FaxNumber':
            obj_ = PhoneNumber.factory()
            obj_.build(child_)
            self.FaxNumber = obj_
            obj_.original_tagname_ = 'FaxNumber'
# end class Address


class PhoneNumber(GeneratedsSuper):
    """PhoneNumber"""
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, AreaCode=None, Phone=None, Extension=None):
        self.original_tagname_ = None
        self.CountryCode = CountryCode
        self.AreaCode = AreaCode
        self.Phone = Phone
        self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneNumber)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneNumber.subclass:
            return PhoneNumber.subclass(*args_, **kwargs_)
        else:
            return PhoneNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_AreaCode(self): return self.AreaCode
    def set_AreaCode(self, AreaCode): self.AreaCode = AreaCode
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def hasContent_(self):
        if (
            self.CountryCode is not None or
            self.AreaCode is not None or
            self.Phone is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PhoneNumber', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneNumber')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhoneNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PhoneNumber', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PhoneNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PhoneNumber', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CountryCode>%s</tns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.AreaCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AreaCode>%s</tns:AreaCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AreaCode), input_name='AreaCode')), eol_))
        if self.Phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Phone>%s</tns:Phone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Phone), input_name='Phone')), eol_))
        if self.Extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Extension>%s</tns:Extension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'AreaCode':
            AreaCode_ = child_.text
            AreaCode_ = self.gds_validate_string(AreaCode_, node, 'AreaCode')
            self.AreaCode = AreaCode_
        elif nodeName_ == 'Phone':
            Phone_ = child_.text
            Phone_ = self.gds_validate_string(Phone_, node, 'Phone')
            self.Phone = Phone_
        elif nodeName_ == 'Extension':
            Extension_ = child_.text
            Extension_ = self.gds_validate_string(Extension_, node, 'Extension')
            self.Extension = Extension_
# end class PhoneNumber


class ShipmentSummary(GeneratedsSuper):
    """Shipment Summary"""
    subclass = None
    superclass = None
    def __init__(self, ShipmentSummaryDetails=None):
        self.original_tagname_ = None
        self.ShipmentSummaryDetails = ShipmentSummaryDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSummary)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSummary.subclass:
            return ShipmentSummary.subclass(*args_, **kwargs_)
        else:
            return ShipmentSummary(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentSummaryDetails(self): return self.ShipmentSummaryDetails
    def set_ShipmentSummaryDetails(self, ShipmentSummaryDetails): self.ShipmentSummaryDetails = ShipmentSummaryDetails
    def hasContent_(self):
        if (
            self.ShipmentSummaryDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ShipmentSummary', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSummary')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentSummary')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ShipmentSummary', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ShipmentSummary'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ShipmentSummary', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentSummaryDetails is not None:
            self.ShipmentSummaryDetails.export(outfile, level, namespace_, name_='ShipmentSummaryDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentSummaryDetails':
            obj_ = ArrayOfShipmentSummaryDetail.factory()
            obj_.build(child_)
            self.ShipmentSummaryDetails = obj_
            obj_.original_tagname_ = 'ShipmentSummaryDetails'
# end class ShipmentSummary


class ArrayOfShipmentSummaryDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentSummaryDetail=None):
        self.original_tagname_ = None
        if ShipmentSummaryDetail is None:
            self.ShipmentSummaryDetail = []
        else:
            self.ShipmentSummaryDetail = ShipmentSummaryDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfShipmentSummaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfShipmentSummaryDetail.subclass:
            return ArrayOfShipmentSummaryDetail.subclass(*args_, **kwargs_)
        else:
            return ArrayOfShipmentSummaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentSummaryDetail(self): return self.ShipmentSummaryDetail
    def set_ShipmentSummaryDetail(self, ShipmentSummaryDetail): self.ShipmentSummaryDetail = ShipmentSummaryDetail
    def add_ShipmentSummaryDetail(self, value): self.ShipmentSummaryDetail.append(value)
    def insert_ShipmentSummaryDetail_at(self, index, value): self.ShipmentSummaryDetail.insert(index, value)
    def replace_ShipmentSummaryDetail_at(self, index, value): self.ShipmentSummaryDetail[index] = value
    def hasContent_(self):
        if (
            self.ShipmentSummaryDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfShipmentSummaryDetail', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfShipmentSummaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfShipmentSummaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfShipmentSummaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfShipmentSummaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfShipmentSummaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShipmentSummaryDetail_ in self.ShipmentSummaryDetail:
            ShipmentSummaryDetail_.export(outfile, level, namespace_, name_='ShipmentSummaryDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentSummaryDetail':
            obj_ = ShipmentSummaryDetail.factory()
            obj_.build(child_)
            self.ShipmentSummaryDetail.append(obj_)
            obj_.original_tagname_ = 'ShipmentSummaryDetail'
# end class ArrayOfShipmentSummaryDetail


class ShipmentSummaryDetail(GeneratedsSuper):
    """Shipment Summary"""
    subclass = None
    superclass = None
    def __init__(self, DestinationCode=None, ModeOfTransport=None, TotalPieces=None, TotalWeight=None):
        self.original_tagname_ = None
        self.DestinationCode = DestinationCode
        self.ModeOfTransport = ModeOfTransport
        self.TotalPieces = TotalPieces
        self.TotalWeight = TotalWeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSummaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSummaryDetail.subclass:
            return ShipmentSummaryDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentSummaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DestinationCode(self): return self.DestinationCode
    def set_DestinationCode(self, DestinationCode): self.DestinationCode = DestinationCode
    def get_ModeOfTransport(self): return self.ModeOfTransport
    def set_ModeOfTransport(self, ModeOfTransport): self.ModeOfTransport = ModeOfTransport
    def get_TotalPieces(self): return self.TotalPieces
    def set_TotalPieces(self, TotalPieces): self.TotalPieces = TotalPieces
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def hasContent_(self):
        if (
            self.DestinationCode is not None or
            self.ModeOfTransport is not None or
            self.TotalPieces is not None or
            self.TotalWeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ShipmentSummaryDetail', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSummaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentSummaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ShipmentSummaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ShipmentSummaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ShipmentSummaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DestinationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DestinationCode>%s</tns:DestinationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCode), input_name='DestinationCode')), eol_))
        if self.ModeOfTransport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ModeOfTransport>%s</tns:ModeOfTransport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ModeOfTransport), input_name='ModeOfTransport')), eol_))
        if self.TotalPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:TotalPieces>%s</tns:TotalPieces>%s' % (self.gds_format_integer(self.TotalPieces, input_name='TotalPieces'), eol_))
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DestinationCode':
            DestinationCode_ = child_.text
            DestinationCode_ = self.gds_validate_string(DestinationCode_, node, 'DestinationCode')
            self.DestinationCode = DestinationCode_
        elif nodeName_ == 'ModeOfTransport':
            ModeOfTransport_ = child_.text
            ModeOfTransport_ = self.gds_validate_string(ModeOfTransport_, node, 'ModeOfTransport')
            self.ModeOfTransport = ModeOfTransport_
        elif nodeName_ == 'TotalPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPieces')
            self.TotalPieces = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
# end class ShipmentSummaryDetail


class NotificationEmails(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NotificationEmail=None):
        self.original_tagname_ = None
        if NotificationEmail is None:
            self.NotificationEmail = []
        else:
            self.NotificationEmail = NotificationEmail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationEmails)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationEmails.subclass:
            return NotificationEmails.subclass(*args_, **kwargs_)
        else:
            return NotificationEmails(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationEmail(self): return self.NotificationEmail
    def set_NotificationEmail(self, NotificationEmail): self.NotificationEmail = NotificationEmail
    def add_NotificationEmail(self, value): self.NotificationEmail.append(value)
    def insert_NotificationEmail_at(self, index, value): self.NotificationEmail.insert(index, value)
    def replace_NotificationEmail_at(self, index, value): self.NotificationEmail[index] = value
    def hasContent_(self):
        if (
            self.NotificationEmail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='NotificationEmails', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationEmails')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationEmails')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='NotificationEmails', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='NotificationEmails'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='NotificationEmails', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NotificationEmail_ in self.NotificationEmail:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:NotificationEmail>%s</tns:NotificationEmail>%s' % (self.gds_encode(self.gds_format_string(quote_xml(NotificationEmail_), input_name='NotificationEmail')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationEmail':
            NotificationEmail_ = child_.text
            NotificationEmail_ = self.gds_validate_string(NotificationEmail_, node, 'NotificationEmail')
            self.NotificationEmail.append(NotificationEmail_)
# end class NotificationEmails


class RequestContext(GeneratedsSuper):
    """RequestContext"""
    subclass = None
    superclass = None
    def __init__(self, Version=None, Language=None, GroupID=None, RequestReference=None, UserToken=None):
        self.original_tagname_ = None
        self.Version = Version
        self.Language = Language
        self.validate_Language(self.Language)
        self.GroupID = GroupID
        self.RequestReference = RequestReference
        self.UserToken = UserToken
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContext.subclass:
            return RequestContext.subclass(*args_, **kwargs_)
        else:
            return RequestContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_GroupID(self): return self.GroupID
    def set_GroupID(self, GroupID): self.GroupID = GroupID
    def get_RequestReference(self): return self.RequestReference
    def set_RequestReference(self, RequestReference): self.RequestReference = RequestReference
    def get_UserToken(self): return self.UserToken
    def set_UserToken(self, UserToken): self.UserToken = UserToken
    def validate_Language(self, value):
        # Validate type Language, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['en', 'fr']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Language' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Version is not None or
            self.Language is not None or
            self.GroupID is not None or
            self.RequestReference is not None or
            self.UserToken is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Version>%s</tns:Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Language>%s</tns:Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Language), input_name='Language')), eol_))
        if self.GroupID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:GroupID>%s</tns:GroupID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GroupID), input_name='GroupID')), eol_))
        if self.RequestReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:RequestReference>%s</tns:RequestReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RequestReference), input_name='RequestReference')), eol_))
        if self.UserToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UserToken>%s</tns:UserToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserToken), input_name='UserToken')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
            # validate type Language
            self.validate_Language(self.Language)
        elif nodeName_ == 'GroupID':
            GroupID_ = child_.text
            GroupID_ = self.gds_validate_string(GroupID_, node, 'GroupID')
            self.GroupID = GroupID_
        elif nodeName_ == 'RequestReference':
            RequestReference_ = child_.text
            RequestReference_ = self.gds_validate_string(RequestReference_, node, 'RequestReference')
            self.RequestReference = RequestReference_
        elif nodeName_ == 'UserToken':
            UserToken_ = child_.text
            UserToken_ = self.gds_validate_string(UserToken_, node, 'UserToken')
            self.UserToken = UserToken_
# end class RequestContext


class ResponseContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseInformation=None):
        self.original_tagname_ = None
        self.ResponseInformation = ResponseInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContainer.subclass:
            return ResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseInformation(self): return self.ResponseInformation
    def set_ResponseInformation(self, ResponseInformation): self.ResponseInformation = ResponseInformation
    def hasContent_(self):
        if (
            self.ResponseInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseInformation is not None:
            self.ResponseInformation.export(outfile, level, namespace_, name_='ResponseInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseInformation':
            obj_ = ResponseInformation.factory()
            obj_.build(child_)
            self.ResponseInformation = obj_
            obj_.original_tagname_ = 'ResponseInformation'
# end class ResponseContainer


class ResponseInformation(GeneratedsSuper):
    """ResponseInformation"""
    subclass = None
    superclass = None
    def __init__(self, Errors=None, InformationalMessages=None):
        self.original_tagname_ = None
        self.Errors = Errors
        self.InformationalMessages = InformationalMessages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseInformation.subclass:
            return ResponseInformation.subclass(*args_, **kwargs_)
        else:
            return ResponseInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Errors(self): return self.Errors
    def set_Errors(self, Errors): self.Errors = Errors
    def get_InformationalMessages(self): return self.InformationalMessages
    def set_InformationalMessages(self, InformationalMessages): self.InformationalMessages = InformationalMessages
    def hasContent_(self):
        if (
            self.Errors is not None or
            self.InformationalMessages is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Errors is not None:
            self.Errors.export(outfile, level, namespace_, name_='Errors', pretty_print=pretty_print)
        if self.InformationalMessages is not None:
            self.InformationalMessages.export(outfile, level, namespace_, name_='InformationalMessages', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Errors':
            obj_ = ArrayOfError.factory()
            obj_.build(child_)
            self.Errors = obj_
            obj_.original_tagname_ = 'Errors'
        elif nodeName_ == 'InformationalMessages':
            obj_ = ArrayOfInformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessages = obj_
            obj_.original_tagname_ = 'InformationalMessages'
# end class ResponseInformation


class ArrayOfError(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Error=None):
        self.original_tagname_ = None
        if Error is None:
            self.Error = []
        else:
            self.Error = Error
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfError)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfError.subclass:
            return ArrayOfError.subclass(*args_, **kwargs_)
        else:
            return ArrayOfError(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def add_Error(self, value): self.Error.append(value)
    def insert_Error_at(self, index, value): self.Error.insert(index, value)
    def replace_Error_at(self, index, value): self.Error[index] = value
    def hasContent_(self):
        if (
            self.Error
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfError', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfError')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfError')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfError', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfError'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfError', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Error_ in self.Error:
            Error_.export(outfile, level, namespace_, name_='Error', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Error':
            obj_ = Error.factory()
            obj_.build(child_)
            self.Error.append(obj_)
            obj_.original_tagname_ = 'Error'
# end class ArrayOfError


class Error(GeneratedsSuper):
    """Error"""
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, AdditionalInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.AdditionalInformation = AdditionalInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Error.subclass:
            return Error.subclass(*args_, **kwargs_)
        else:
            return Error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_AdditionalInformation(self): return self.AdditionalInformation
    def set_AdditionalInformation(self, AdditionalInformation): self.AdditionalInformation = AdditionalInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.AdditionalInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Error', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Error'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.AdditionalInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AdditionalInformation>%s</tns:AdditionalInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalInformation), input_name='AdditionalInformation')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'AdditionalInformation':
            AdditionalInformation_ = child_.text
            AdditionalInformation_ = self.gds_validate_string(AdditionalInformation_, node, 'AdditionalInformation')
            self.AdditionalInformation = AdditionalInformation_
# end class Error


class ArrayOfInformationalMessage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InformationalMessage=None):
        self.original_tagname_ = None
        if InformationalMessage is None:
            self.InformationalMessage = []
        else:
            self.InformationalMessage = InformationalMessage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfInformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfInformationalMessage.subclass:
            return ArrayOfInformationalMessage.subclass(*args_, **kwargs_)
        else:
            return ArrayOfInformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InformationalMessage(self): return self.InformationalMessage
    def set_InformationalMessage(self, InformationalMessage): self.InformationalMessage = InformationalMessage
    def add_InformationalMessage(self, value): self.InformationalMessage.append(value)
    def insert_InformationalMessage_at(self, index, value): self.InformationalMessage.insert(index, value)
    def replace_InformationalMessage_at(self, index, value): self.InformationalMessage[index] = value
    def hasContent_(self):
        if (
            self.InformationalMessage
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfInformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfInformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfInformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfInformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformationalMessage_ in self.InformationalMessage:
            InformationalMessage_.export(outfile, level, namespace_, name_='InformationalMessage', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InformationalMessage':
            obj_ = InformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessage.append(obj_)
            obj_.original_tagname_ = 'InformationalMessage'
# end class ArrayOfInformationalMessage


class InformationalMessage(GeneratedsSuper):
    """InformationalMessage"""
    subclass = None
    superclass = None
    def __init__(self, Code=None, Message=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformationalMessage.subclass:
            return InformationalMessage.subclass(*args_, **kwargs_)
        else:
            return InformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='InformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='InformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='InformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='InformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Message>%s</tns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class InformationalMessage


class ResponseContext(GeneratedsSuper):
    """ResponseContext"""
    subclass = None
    superclass = None
    def __init__(self, ResponseReference=None):
        self.original_tagname_ = None
        self.ResponseReference = ResponseReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContext.subclass:
            return ResponseContext.subclass(*args_, **kwargs_)
        else:
            return ResponseContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseReference(self): return self.ResponseReference
    def set_ResponseReference(self, ResponseReference): self.ResponseReference = ResponseReference
    def hasContent_(self):
        if (
            self.ResponseReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ResponseReference>%s</tns:ResponseReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResponseReference), input_name='ResponseReference')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseReference':
            ResponseReference_ = child_.text
            ResponseReference_ = self.gds_validate_string(ResponseReference_, node, 'ResponseReference')
            self.ResponseReference = ResponseReference_
# end class ResponseContext


class VoidPickUpRequestContainer(RequestContainer):
    """VoidPickUpRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, PickUpConfirmationNumber=None):
        self.original_tagname_ = None
        super(VoidPickUpRequestContainer, self).__init__()
        self.PickUpConfirmationNumber = PickUpConfirmationNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VoidPickUpRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VoidPickUpRequestContainer.subclass:
            return VoidPickUpRequestContainer.subclass(*args_, **kwargs_)
        else:
            return VoidPickUpRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpConfirmationNumber(self): return self.PickUpConfirmationNumber
    def set_PickUpConfirmationNumber(self, PickUpConfirmationNumber): self.PickUpConfirmationNumber = PickUpConfirmationNumber
    def hasContent_(self):
        if (
            self.PickUpConfirmationNumber is not None or
            super(VoidPickUpRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='VoidPickUpRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VoidPickUpRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VoidPickUpRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='VoidPickUpRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='VoidPickUpRequestContainer'):
        super(VoidPickUpRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='VoidPickUpRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='VoidPickUpRequestContainer', fromsubclass_=False, pretty_print=True):
        super(VoidPickUpRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickUpConfirmationNumber>%s</tns:PickUpConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickUpConfirmationNumber), input_name='PickUpConfirmationNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(VoidPickUpRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpConfirmationNumber':
            PickUpConfirmationNumber_ = child_.text
            PickUpConfirmationNumber_ = self.gds_validate_string(PickUpConfirmationNumber_, node, 'PickUpConfirmationNumber')
            self.PickUpConfirmationNumber = PickUpConfirmationNumber_
        super(VoidPickUpRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class VoidPickUpRequestContainer


class VoidPickUpResponseContainer(ResponseContainer):
    """VoidPickUpRespone"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, PickUpVoided=None):
        self.original_tagname_ = None
        super(VoidPickUpResponseContainer, self).__init__()
        self.PickUpVoided = PickUpVoided
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VoidPickUpResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VoidPickUpResponseContainer.subclass:
            return VoidPickUpResponseContainer.subclass(*args_, **kwargs_)
        else:
            return VoidPickUpResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpVoided(self): return self.PickUpVoided
    def set_PickUpVoided(self, PickUpVoided): self.PickUpVoided = PickUpVoided
    def hasContent_(self):
        if (
            self.PickUpVoided is not None or
            super(VoidPickUpResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='VoidPickUpResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VoidPickUpResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VoidPickUpResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='VoidPickUpResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='VoidPickUpResponseContainer'):
        super(VoidPickUpResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='VoidPickUpResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='VoidPickUpResponseContainer', fromsubclass_=False, pretty_print=True):
        super(VoidPickUpResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpVoided is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickUpVoided>%s</tns:PickUpVoided>%s' % (self.gds_format_boolean(self.PickUpVoided, input_name='PickUpVoided'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(VoidPickUpResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpVoided':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'PickUpVoided')
            self.PickUpVoided = ival_
        super(VoidPickUpResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class VoidPickUpResponseContainer


class ValidatePickUpRequestContainer(RequestContainer):
    """ValidatePickUpRequestContainer"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, BillingAccountNumber=None, PartnerID=None, PickupInstruction=None, Address=None, ShipmentSummary=None, NotificationEmails=None):
        self.original_tagname_ = None
        super(ValidatePickUpRequestContainer, self).__init__()
        self.BillingAccountNumber = BillingAccountNumber
        self.PartnerID = PartnerID
        self.PickupInstruction = PickupInstruction
        self.Address = Address
        self.ShipmentSummary = ShipmentSummary
        self.NotificationEmails = NotificationEmails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidatePickUpRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidatePickUpRequestContainer.subclass:
            return ValidatePickUpRequestContainer.subclass(*args_, **kwargs_)
        else:
            return ValidatePickUpRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillingAccountNumber(self): return self.BillingAccountNumber
    def set_BillingAccountNumber(self, BillingAccountNumber): self.BillingAccountNumber = BillingAccountNumber
    def get_PartnerID(self): return self.PartnerID
    def set_PartnerID(self, PartnerID): self.PartnerID = PartnerID
    def get_PickupInstruction(self): return self.PickupInstruction
    def set_PickupInstruction(self, PickupInstruction): self.PickupInstruction = PickupInstruction
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ShipmentSummary(self): return self.ShipmentSummary
    def set_ShipmentSummary(self, ShipmentSummary): self.ShipmentSummary = ShipmentSummary
    def get_NotificationEmails(self): return self.NotificationEmails
    def set_NotificationEmails(self, NotificationEmails): self.NotificationEmails = NotificationEmails
    def hasContent_(self):
        if (
            self.BillingAccountNumber is not None or
            self.PartnerID is not None or
            self.PickupInstruction is not None or
            self.Address is not None or
            self.ShipmentSummary is not None or
            self.NotificationEmails is not None or
            super(ValidatePickUpRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ValidatePickUpRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidatePickUpRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValidatePickUpRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ValidatePickUpRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ValidatePickUpRequestContainer'):
        super(ValidatePickUpRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ValidatePickUpRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ValidatePickUpRequestContainer', fromsubclass_=False, pretty_print=True):
        super(ValidatePickUpRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillingAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BillingAccountNumber>%s</tns:BillingAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillingAccountNumber), input_name='BillingAccountNumber')), eol_))
        if self.PartnerID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PartnerID>%s</tns:PartnerID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartnerID), input_name='PartnerID')), eol_))
        if self.PickupInstruction is not None:
            self.PickupInstruction.export(outfile, level, namespace_, name_='PickupInstruction', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.ShipmentSummary is not None:
            self.ShipmentSummary.export(outfile, level, namespace_, name_='ShipmentSummary', pretty_print=pretty_print)
        if self.NotificationEmails is not None:
            self.NotificationEmails.export(outfile, level, namespace_, name_='NotificationEmails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ValidatePickUpRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillingAccountNumber':
            BillingAccountNumber_ = child_.text
            BillingAccountNumber_ = self.gds_validate_string(BillingAccountNumber_, node, 'BillingAccountNumber')
            self.BillingAccountNumber = BillingAccountNumber_
        elif nodeName_ == 'PartnerID':
            PartnerID_ = child_.text
            PartnerID_ = self.gds_validate_string(PartnerID_, node, 'PartnerID')
            self.PartnerID = PartnerID_
        elif nodeName_ == 'PickupInstruction':
            obj_ = PickupInstruction.factory()
            obj_.build(child_)
            self.PickupInstruction = obj_
            obj_.original_tagname_ = 'PickupInstruction'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ShipmentSummary':
            obj_ = ShipmentSummary.factory()
            obj_.build(child_)
            self.ShipmentSummary = obj_
            obj_.original_tagname_ = 'ShipmentSummary'
        elif nodeName_ == 'NotificationEmails':
            obj_ = NotificationEmails.factory()
            obj_.build(child_)
            self.NotificationEmails = obj_
            obj_.original_tagname_ = 'NotificationEmails'
        super(ValidatePickUpRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class ValidatePickUpRequestContainer


class ValidatePickUpResponseContainer(ResponseContainer):
    """ValidatePickUpRespone"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, IsBulkdRequired=None, CutOffTime=None, CutOffWindow=None, BulkMaxWeight=None, BulkMaxPackages=None):
        self.original_tagname_ = None
        super(ValidatePickUpResponseContainer, self).__init__()
        self.IsBulkdRequired = IsBulkdRequired
        self.CutOffTime = CutOffTime
        self.CutOffWindow = CutOffWindow
        self.BulkMaxWeight = BulkMaxWeight
        self.BulkMaxPackages = BulkMaxPackages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidatePickUpResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidatePickUpResponseContainer.subclass:
            return ValidatePickUpResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ValidatePickUpResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IsBulkdRequired(self): return self.IsBulkdRequired
    def set_IsBulkdRequired(self, IsBulkdRequired): self.IsBulkdRequired = IsBulkdRequired
    def get_CutOffTime(self): return self.CutOffTime
    def set_CutOffTime(self, CutOffTime): self.CutOffTime = CutOffTime
    def get_CutOffWindow(self): return self.CutOffWindow
    def set_CutOffWindow(self, CutOffWindow): self.CutOffWindow = CutOffWindow
    def get_BulkMaxWeight(self): return self.BulkMaxWeight
    def set_BulkMaxWeight(self, BulkMaxWeight): self.BulkMaxWeight = BulkMaxWeight
    def get_BulkMaxPackages(self): return self.BulkMaxPackages
    def set_BulkMaxPackages(self, BulkMaxPackages): self.BulkMaxPackages = BulkMaxPackages
    def hasContent_(self):
        if (
            self.IsBulkdRequired is not None or
            self.CutOffTime is not None or
            self.CutOffWindow is not None or
            self.BulkMaxWeight is not None or
            self.BulkMaxPackages is not None or
            super(ValidatePickUpResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ValidatePickUpResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidatePickUpResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValidatePickUpResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ValidatePickUpResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ValidatePickUpResponseContainer'):
        super(ValidatePickUpResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ValidatePickUpResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ValidatePickUpResponseContainer', fromsubclass_=False, pretty_print=True):
        super(ValidatePickUpResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsBulkdRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:IsBulkdRequired>%s</tns:IsBulkdRequired>%s' % (self.gds_format_boolean(self.IsBulkdRequired, input_name='IsBulkdRequired'), eol_))
        if self.CutOffTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CutOffTime>%s</tns:CutOffTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CutOffTime), input_name='CutOffTime')), eol_))
        if self.CutOffWindow is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CutOffWindow>%s</tns:CutOffWindow>%s' % (self.gds_format_integer(self.CutOffWindow, input_name='CutOffWindow'), eol_))
        if self.BulkMaxWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BulkMaxWeight>%s</tns:BulkMaxWeight>%s' % (self.gds_format_float(self.BulkMaxWeight, input_name='BulkMaxWeight'), eol_))
        if self.BulkMaxPackages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BulkMaxPackages>%s</tns:BulkMaxPackages>%s' % (self.gds_format_integer(self.BulkMaxPackages, input_name='BulkMaxPackages'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ValidatePickUpResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IsBulkdRequired':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'IsBulkdRequired')
            self.IsBulkdRequired = ival_
        elif nodeName_ == 'CutOffTime':
            CutOffTime_ = child_.text
            CutOffTime_ = self.gds_validate_string(CutOffTime_, node, 'CutOffTime')
            self.CutOffTime = CutOffTime_
        elif nodeName_ == 'CutOffWindow':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CutOffWindow')
            self.CutOffWindow = ival_
        elif nodeName_ == 'BulkMaxWeight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BulkMaxWeight')
            self.BulkMaxWeight = fval_
        elif nodeName_ == 'BulkMaxPackages':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'BulkMaxPackages')
            self.BulkMaxPackages = ival_
        super(ValidatePickUpResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class ValidatePickUpResponseContainer


class GetPickUpHistoryRequestContainer(RequestContainer):
    """GetPickUpHistoryRequestContainer"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, PickUpHistorySearchCriteria=None):
        self.original_tagname_ = None
        super(GetPickUpHistoryRequestContainer, self).__init__()
        self.PickUpHistorySearchCriteria = PickUpHistorySearchCriteria
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetPickUpHistoryRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetPickUpHistoryRequestContainer.subclass:
            return GetPickUpHistoryRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetPickUpHistoryRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpHistorySearchCriteria(self): return self.PickUpHistorySearchCriteria
    def set_PickUpHistorySearchCriteria(self, PickUpHistorySearchCriteria): self.PickUpHistorySearchCriteria = PickUpHistorySearchCriteria
    def hasContent_(self):
        if (
            self.PickUpHistorySearchCriteria is not None or
            super(GetPickUpHistoryRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetPickUpHistoryRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetPickUpHistoryRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetPickUpHistoryRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetPickUpHistoryRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetPickUpHistoryRequestContainer'):
        super(GetPickUpHistoryRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetPickUpHistoryRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetPickUpHistoryRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetPickUpHistoryRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpHistorySearchCriteria is not None:
            self.PickUpHistorySearchCriteria.export(outfile, level, namespace_, name_='PickUpHistorySearchCriteria', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetPickUpHistoryRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpHistorySearchCriteria':
            obj_ = PickUpHistorySearchCriteria.factory()
            obj_.build(child_)
            self.PickUpHistorySearchCriteria = obj_
            obj_.original_tagname_ = 'PickUpHistorySearchCriteria'
        super(GetPickUpHistoryRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetPickUpHistoryRequestContainer


class PickUpHistorySearchCriteria(GeneratedsSuper):
    """PickUpHistorySearchCriteria"""
    subclass = None
    superclass = None
    def __init__(self, FromDate=None, ToDate=None, ConfirmationNumber=None, AccountNumber=None, Status=None, MaxNumOfRecords=None, SortColumn=None, SortDirection=None):
        self.original_tagname_ = None
        self.FromDate = FromDate
        self.ToDate = ToDate
        self.ConfirmationNumber = ConfirmationNumber
        self.AccountNumber = AccountNumber
        self.Status = Status
        self.MaxNumOfRecords = MaxNumOfRecords
        self.SortColumn = SortColumn
        self.SortDirection = SortDirection
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickUpHistorySearchCriteria)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickUpHistorySearchCriteria.subclass:
            return PickUpHistorySearchCriteria.subclass(*args_, **kwargs_)
        else:
            return PickUpHistorySearchCriteria(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FromDate(self): return self.FromDate
    def set_FromDate(self, FromDate): self.FromDate = FromDate
    def get_ToDate(self): return self.ToDate
    def set_ToDate(self, ToDate): self.ToDate = ToDate
    def get_ConfirmationNumber(self): return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber): self.ConfirmationNumber = ConfirmationNumber
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_MaxNumOfRecords(self): return self.MaxNumOfRecords
    def set_MaxNumOfRecords(self, MaxNumOfRecords): self.MaxNumOfRecords = MaxNumOfRecords
    def get_SortColumn(self): return self.SortColumn
    def set_SortColumn(self, SortColumn): self.SortColumn = SortColumn
    def get_SortDirection(self): return self.SortDirection
    def set_SortDirection(self, SortDirection): self.SortDirection = SortDirection
    def hasContent_(self):
        if (
            self.FromDate is not None or
            self.ToDate is not None or
            self.ConfirmationNumber is not None or
            self.AccountNumber is not None or
            self.Status is not None or
            self.MaxNumOfRecords is not None or
            self.SortColumn is not None or
            self.SortDirection is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PickUpHistorySearchCriteria', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickUpHistorySearchCriteria')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickUpHistorySearchCriteria')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PickUpHistorySearchCriteria', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PickUpHistorySearchCriteria'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PickUpHistorySearchCriteria', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FromDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:FromDate>%s</tns:FromDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromDate), input_name='FromDate')), eol_))
        if self.ToDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ToDate>%s</tns:ToDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToDate), input_name='ToDate')), eol_))
        if self.ConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ConfirmationNumber>%s</tns:ConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConfirmationNumber), input_name='ConfirmationNumber')), eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AccountNumber>%s</tns:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Status>%s</tns:Status>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), eol_))
        if self.MaxNumOfRecords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:MaxNumOfRecords>%s</tns:MaxNumOfRecords>%s' % (self.gds_format_integer(self.MaxNumOfRecords, input_name='MaxNumOfRecords'), eol_))
        if self.SortColumn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SortColumn>%s</tns:SortColumn>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SortColumn), input_name='SortColumn')), eol_))
        if self.SortDirection is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SortDirection>%s</tns:SortDirection>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SortDirection), input_name='SortDirection')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FromDate':
            FromDate_ = child_.text
            FromDate_ = self.gds_validate_string(FromDate_, node, 'FromDate')
            self.FromDate = FromDate_
        elif nodeName_ == 'ToDate':
            ToDate_ = child_.text
            ToDate_ = self.gds_validate_string(ToDate_, node, 'ToDate')
            self.ToDate = ToDate_
        elif nodeName_ == 'ConfirmationNumber':
            ConfirmationNumber_ = child_.text
            ConfirmationNumber_ = self.gds_validate_string(ConfirmationNumber_, node, 'ConfirmationNumber')
            self.ConfirmationNumber = ConfirmationNumber_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
        elif nodeName_ == 'MaxNumOfRecords':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxNumOfRecords')
            self.MaxNumOfRecords = ival_
        elif nodeName_ == 'SortColumn':
            SortColumn_ = child_.text
            SortColumn_ = self.gds_validate_string(SortColumn_, node, 'SortColumn')
            self.SortColumn = SortColumn_
        elif nodeName_ == 'SortDirection':
            SortDirection_ = child_.text
            SortDirection_ = self.gds_validate_string(SortDirection_, node, 'SortDirection')
            self.SortDirection = SortDirection_
# end class PickUpHistorySearchCriteria


class GetPickUpHistoryResponseContainer(ResponseContainer):
    """Service Contract Class - GetPickUpHistoryResponseContainer"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, PickUpDetailList=None):
        self.original_tagname_ = None
        super(GetPickUpHistoryResponseContainer, self).__init__()
        self.PickUpDetailList = PickUpDetailList
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetPickUpHistoryResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetPickUpHistoryResponseContainer.subclass:
            return GetPickUpHistoryResponseContainer.subclass(*args_, **kwargs_)
        else:
            return GetPickUpHistoryResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpDetailList(self): return self.PickUpDetailList
    def set_PickUpDetailList(self, PickUpDetailList): self.PickUpDetailList = PickUpDetailList
    def hasContent_(self):
        if (
            self.PickUpDetailList is not None or
            super(GetPickUpHistoryResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetPickUpHistoryResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetPickUpHistoryResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetPickUpHistoryResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetPickUpHistoryResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetPickUpHistoryResponseContainer'):
        super(GetPickUpHistoryResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetPickUpHistoryResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetPickUpHistoryResponseContainer', fromsubclass_=False, pretty_print=True):
        super(GetPickUpHistoryResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpDetailList is not None:
            self.PickUpDetailList.export(outfile, level, namespace_, name_='PickUpDetailList', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetPickUpHistoryResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpDetailList':
            obj_ = ArrayOfPickUpDetail.factory()
            obj_.build(child_)
            self.PickUpDetailList = obj_
            obj_.original_tagname_ = 'PickUpDetailList'
        super(GetPickUpHistoryResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetPickUpHistoryResponseContainer


class ArrayOfPickUpDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PickUpDetail=None):
        self.original_tagname_ = None
        if PickUpDetail is None:
            self.PickUpDetail = []
        else:
            self.PickUpDetail = PickUpDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfPickUpDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfPickUpDetail.subclass:
            return ArrayOfPickUpDetail.subclass(*args_, **kwargs_)
        else:
            return ArrayOfPickUpDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpDetail(self): return self.PickUpDetail
    def set_PickUpDetail(self, PickUpDetail): self.PickUpDetail = PickUpDetail
    def add_PickUpDetail(self, value): self.PickUpDetail.append(value)
    def insert_PickUpDetail_at(self, index, value): self.PickUpDetail.insert(index, value)
    def replace_PickUpDetail_at(self, index, value): self.PickUpDetail[index] = value
    def hasContent_(self):
        if (
            self.PickUpDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfPickUpDetail', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfPickUpDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfPickUpDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfPickUpDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfPickUpDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfPickUpDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PickUpDetail_ in self.PickUpDetail:
            PickUpDetail_.export(outfile, level, namespace_, name_='PickUpDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpDetail':
            obj_ = PickUpDetail.factory()
            obj_.build(child_)
            self.PickUpDetail.append(obj_)
            obj_.original_tagname_ = 'PickUpDetail'
# end class ArrayOfPickUpDetail


class PickUpDetail(GeneratedsSuper):
    """PickUp Detail"""
    subclass = None
    superclass = None
    def __init__(self, BillingAccountNumber=None, PartnerId=None, ConfirmationNumber=None, PickupStatus=None, PickupType=None, PickupInstruction=None, Address=None, ShipmentSummary=None, NotificationEmails=None):
        self.original_tagname_ = None
        self.BillingAccountNumber = BillingAccountNumber
        self.PartnerId = PartnerId
        self.ConfirmationNumber = ConfirmationNumber
        self.PickupStatus = PickupStatus
        self.PickupType = PickupType
        self.PickupInstruction = PickupInstruction
        self.Address = Address
        self.ShipmentSummary = ShipmentSummary
        self.NotificationEmails = NotificationEmails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickUpDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickUpDetail.subclass:
            return PickUpDetail.subclass(*args_, **kwargs_)
        else:
            return PickUpDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillingAccountNumber(self): return self.BillingAccountNumber
    def set_BillingAccountNumber(self, BillingAccountNumber): self.BillingAccountNumber = BillingAccountNumber
    def get_PartnerId(self): return self.PartnerId
    def set_PartnerId(self, PartnerId): self.PartnerId = PartnerId
    def get_ConfirmationNumber(self): return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber): self.ConfirmationNumber = ConfirmationNumber
    def get_PickupStatus(self): return self.PickupStatus
    def set_PickupStatus(self, PickupStatus): self.PickupStatus = PickupStatus
    def get_PickupType(self): return self.PickupType
    def set_PickupType(self, PickupType): self.PickupType = PickupType
    def get_PickupInstruction(self): return self.PickupInstruction
    def set_PickupInstruction(self, PickupInstruction): self.PickupInstruction = PickupInstruction
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ShipmentSummary(self): return self.ShipmentSummary
    def set_ShipmentSummary(self, ShipmentSummary): self.ShipmentSummary = ShipmentSummary
    def get_NotificationEmails(self): return self.NotificationEmails
    def set_NotificationEmails(self, NotificationEmails): self.NotificationEmails = NotificationEmails
    def hasContent_(self):
        if (
            self.BillingAccountNumber is not None or
            self.PartnerId is not None or
            self.ConfirmationNumber is not None or
            self.PickupStatus is not None or
            self.PickupType is not None or
            self.PickupInstruction is not None or
            self.Address is not None or
            self.ShipmentSummary is not None or
            self.NotificationEmails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PickUpDetail', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickUpDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickUpDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PickUpDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PickUpDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PickUpDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillingAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BillingAccountNumber>%s</tns:BillingAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillingAccountNumber), input_name='BillingAccountNumber')), eol_))
        if self.PartnerId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PartnerId>%s</tns:PartnerId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartnerId), input_name='PartnerId')), eol_))
        if self.ConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ConfirmationNumber>%s</tns:ConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConfirmationNumber), input_name='ConfirmationNumber')), eol_))
        if self.PickupStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickupStatus>%s</tns:PickupStatus>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupStatus), input_name='PickupStatus')), eol_))
        if self.PickupType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickupType>%s</tns:PickupType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupType), input_name='PickupType')), eol_))
        if self.PickupInstruction is not None:
            self.PickupInstruction.export(outfile, level, namespace_, name_='PickupInstruction', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.ShipmentSummary is not None:
            self.ShipmentSummary.export(outfile, level, namespace_, name_='ShipmentSummary', pretty_print=pretty_print)
        if self.NotificationEmails is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:NotificationEmails>%s</tns:NotificationEmails>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NotificationEmails), input_name='NotificationEmails')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillingAccountNumber':
            BillingAccountNumber_ = child_.text
            BillingAccountNumber_ = self.gds_validate_string(BillingAccountNumber_, node, 'BillingAccountNumber')
            self.BillingAccountNumber = BillingAccountNumber_
        elif nodeName_ == 'PartnerId':
            PartnerId_ = child_.text
            PartnerId_ = self.gds_validate_string(PartnerId_, node, 'PartnerId')
            self.PartnerId = PartnerId_
        elif nodeName_ == 'ConfirmationNumber':
            ConfirmationNumber_ = child_.text
            ConfirmationNumber_ = self.gds_validate_string(ConfirmationNumber_, node, 'ConfirmationNumber')
            self.ConfirmationNumber = ConfirmationNumber_
        elif nodeName_ == 'PickupStatus':
            PickupStatus_ = child_.text
            PickupStatus_ = self.gds_validate_string(PickupStatus_, node, 'PickupStatus')
            self.PickupStatus = PickupStatus_
        elif nodeName_ == 'PickupType':
            PickupType_ = child_.text
            PickupType_ = self.gds_validate_string(PickupType_, node, 'PickupType')
            self.PickupType = PickupType_
        elif nodeName_ == 'PickupInstruction':
            obj_ = PickupInstruction.factory()
            obj_.build(child_)
            self.PickupInstruction = obj_
            obj_.original_tagname_ = 'PickupInstruction'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ShipmentSummary':
            obj_ = ShipmentSummary.factory()
            obj_.build(child_)
            self.ShipmentSummary = obj_
            obj_.original_tagname_ = 'ShipmentSummary'
        elif nodeName_ == 'NotificationEmails':
            NotificationEmails_ = child_.text
            NotificationEmails_ = self.gds_validate_string(NotificationEmails_, node, 'NotificationEmails')
            self.NotificationEmails = NotificationEmails_
# end class PickUpDetail


class ModifyPickUpRequestContainer(RequestContainer):
    """ModifyPickUpRequestContainer"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, BillingAccountNumber=None, ConfirmationNumber=None, ModifyPickupInstruction=None, ShipmentSummary=None):
        self.original_tagname_ = None
        super(ModifyPickUpRequestContainer, self).__init__()
        self.BillingAccountNumber = BillingAccountNumber
        self.ConfirmationNumber = ConfirmationNumber
        self.ModifyPickupInstruction = ModifyPickupInstruction
        self.ShipmentSummary = ShipmentSummary
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ModifyPickUpRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ModifyPickUpRequestContainer.subclass:
            return ModifyPickUpRequestContainer.subclass(*args_, **kwargs_)
        else:
            return ModifyPickUpRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillingAccountNumber(self): return self.BillingAccountNumber
    def set_BillingAccountNumber(self, BillingAccountNumber): self.BillingAccountNumber = BillingAccountNumber
    def get_ConfirmationNumber(self): return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber): self.ConfirmationNumber = ConfirmationNumber
    def get_ModifyPickupInstruction(self): return self.ModifyPickupInstruction
    def set_ModifyPickupInstruction(self, ModifyPickupInstruction): self.ModifyPickupInstruction = ModifyPickupInstruction
    def get_ShipmentSummary(self): return self.ShipmentSummary
    def set_ShipmentSummary(self, ShipmentSummary): self.ShipmentSummary = ShipmentSummary
    def hasContent_(self):
        if (
            self.BillingAccountNumber is not None or
            self.ConfirmationNumber is not None or
            self.ModifyPickupInstruction is not None or
            self.ShipmentSummary is not None or
            super(ModifyPickUpRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ModifyPickUpRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ModifyPickUpRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ModifyPickUpRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ModifyPickUpRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ModifyPickUpRequestContainer'):
        super(ModifyPickUpRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ModifyPickUpRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ModifyPickUpRequestContainer', fromsubclass_=False, pretty_print=True):
        super(ModifyPickUpRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillingAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BillingAccountNumber>%s</tns:BillingAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillingAccountNumber), input_name='BillingAccountNumber')), eol_))
        if self.ConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ConfirmationNumber>%s</tns:ConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConfirmationNumber), input_name='ConfirmationNumber')), eol_))
        if self.ModifyPickupInstruction is not None:
            self.ModifyPickupInstruction.export(outfile, level, namespace_, name_='ModifyPickupInstruction', pretty_print=pretty_print)
        if self.ShipmentSummary is not None:
            self.ShipmentSummary.export(outfile, level, namespace_, name_='ShipmentSummary', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ModifyPickUpRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillingAccountNumber':
            BillingAccountNumber_ = child_.text
            BillingAccountNumber_ = self.gds_validate_string(BillingAccountNumber_, node, 'BillingAccountNumber')
            self.BillingAccountNumber = BillingAccountNumber_
        elif nodeName_ == 'ConfirmationNumber':
            ConfirmationNumber_ = child_.text
            ConfirmationNumber_ = self.gds_validate_string(ConfirmationNumber_, node, 'ConfirmationNumber')
            self.ConfirmationNumber = ConfirmationNumber_
        elif nodeName_ == 'ModifyPickupInstruction':
            obj_ = ModifyPickupInstruction.factory()
            obj_.build(child_)
            self.ModifyPickupInstruction = obj_
            obj_.original_tagname_ = 'ModifyPickupInstruction'
        elif nodeName_ == 'ShipmentSummary':
            obj_ = ShipmentSummary.factory()
            obj_.build(child_)
            self.ShipmentSummary = obj_
            obj_.original_tagname_ = 'ShipmentSummary'
        super(ModifyPickUpRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class ModifyPickUpRequestContainer


class ModifyPickupInstruction(GeneratedsSuper):
    """ModifyPickupInstruction"""
    subclass = None
    superclass = None
    def __init__(self, UntilTime=None, PickUpLocation=None, SupplyRequestCodes=None, TrailerAccessible=None, LoadingDockAvailable=None, ShipmentOnSkids=None, NumberOfSkids=None):
        self.original_tagname_ = None
        self.UntilTime = UntilTime
        self.PickUpLocation = PickUpLocation
        self.SupplyRequestCodes = SupplyRequestCodes
        self.TrailerAccessible = TrailerAccessible
        self.LoadingDockAvailable = LoadingDockAvailable
        self.ShipmentOnSkids = ShipmentOnSkids
        self.NumberOfSkids = NumberOfSkids
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ModifyPickupInstruction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ModifyPickupInstruction.subclass:
            return ModifyPickupInstruction.subclass(*args_, **kwargs_)
        else:
            return ModifyPickupInstruction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UntilTime(self): return self.UntilTime
    def set_UntilTime(self, UntilTime): self.UntilTime = UntilTime
    def get_PickUpLocation(self): return self.PickUpLocation
    def set_PickUpLocation(self, PickUpLocation): self.PickUpLocation = PickUpLocation
    def get_SupplyRequestCodes(self): return self.SupplyRequestCodes
    def set_SupplyRequestCodes(self, SupplyRequestCodes): self.SupplyRequestCodes = SupplyRequestCodes
    def get_TrailerAccessible(self): return self.TrailerAccessible
    def set_TrailerAccessible(self, TrailerAccessible): self.TrailerAccessible = TrailerAccessible
    def get_LoadingDockAvailable(self): return self.LoadingDockAvailable
    def set_LoadingDockAvailable(self, LoadingDockAvailable): self.LoadingDockAvailable = LoadingDockAvailable
    def get_ShipmentOnSkids(self): return self.ShipmentOnSkids
    def set_ShipmentOnSkids(self, ShipmentOnSkids): self.ShipmentOnSkids = ShipmentOnSkids
    def get_NumberOfSkids(self): return self.NumberOfSkids
    def set_NumberOfSkids(self, NumberOfSkids): self.NumberOfSkids = NumberOfSkids
    def hasContent_(self):
        if (
            self.UntilTime is not None or
            self.PickUpLocation is not None or
            self.SupplyRequestCodes is not None or
            self.TrailerAccessible is not None or
            self.LoadingDockAvailable is not None or
            self.ShipmentOnSkids is not None or
            self.NumberOfSkids is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ModifyPickupInstruction', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ModifyPickupInstruction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ModifyPickupInstruction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ModifyPickupInstruction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ModifyPickupInstruction'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ModifyPickupInstruction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UntilTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UntilTime>%s</tns:UntilTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UntilTime), input_name='UntilTime')), eol_))
        if self.PickUpLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickUpLocation>%s</tns:PickUpLocation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickUpLocation), input_name='PickUpLocation')), eol_))
        if self.SupplyRequestCodes is not None:
            self.SupplyRequestCodes.export(outfile, level, namespace_, name_='SupplyRequestCodes', pretty_print=pretty_print)
        if self.TrailerAccessible is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:TrailerAccessible>%s</tns:TrailerAccessible>%s' % (self.gds_format_boolean(self.TrailerAccessible, input_name='TrailerAccessible'), eol_))
        if self.LoadingDockAvailable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:LoadingDockAvailable>%s</tns:LoadingDockAvailable>%s' % (self.gds_format_boolean(self.LoadingDockAvailable, input_name='LoadingDockAvailable'), eol_))
        if self.ShipmentOnSkids is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ShipmentOnSkids>%s</tns:ShipmentOnSkids>%s' % (self.gds_format_boolean(self.ShipmentOnSkids, input_name='ShipmentOnSkids'), eol_))
        if self.NumberOfSkids is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:NumberOfSkids>%s</tns:NumberOfSkids>%s' % (self.gds_format_integer(self.NumberOfSkids, input_name='NumberOfSkids'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UntilTime':
            UntilTime_ = child_.text
            UntilTime_ = self.gds_validate_string(UntilTime_, node, 'UntilTime')
            self.UntilTime = UntilTime_
        elif nodeName_ == 'PickUpLocation':
            PickUpLocation_ = child_.text
            PickUpLocation_ = self.gds_validate_string(PickUpLocation_, node, 'PickUpLocation')
            self.PickUpLocation = PickUpLocation_
        elif nodeName_ == 'SupplyRequestCodes':
            obj_ = SupplyRequestCodes.factory()
            obj_.build(child_)
            self.SupplyRequestCodes = obj_
            obj_.original_tagname_ = 'SupplyRequestCodes'
        elif nodeName_ == 'TrailerAccessible':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'TrailerAccessible')
            self.TrailerAccessible = ival_
        elif nodeName_ == 'LoadingDockAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'LoadingDockAvailable')
            self.LoadingDockAvailable = ival_
        elif nodeName_ == 'ShipmentOnSkids':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ShipmentOnSkids')
            self.ShipmentOnSkids = ival_
        elif nodeName_ == 'NumberOfSkids':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfSkids')
            self.NumberOfSkids = ival_
# end class ModifyPickupInstruction


class ModifyPickUpResponseContainer(ResponseContainer):
    """ModifyPickUpResponseContainer"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, PickUpConfirmationNumber=None):
        self.original_tagname_ = None
        super(ModifyPickUpResponseContainer, self).__init__()
        self.PickUpConfirmationNumber = PickUpConfirmationNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ModifyPickUpResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ModifyPickUpResponseContainer.subclass:
            return ModifyPickUpResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ModifyPickUpResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpConfirmationNumber(self): return self.PickUpConfirmationNumber
    def set_PickUpConfirmationNumber(self, PickUpConfirmationNumber): self.PickUpConfirmationNumber = PickUpConfirmationNumber
    def hasContent_(self):
        if (
            self.PickUpConfirmationNumber is not None or
            super(ModifyPickUpResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ModifyPickUpResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ModifyPickUpResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ModifyPickUpResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ModifyPickUpResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ModifyPickUpResponseContainer'):
        super(ModifyPickUpResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ModifyPickUpResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ModifyPickUpResponseContainer', fromsubclass_=False, pretty_print=True):
        super(ModifyPickUpResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickUpConfirmationNumber>%s</tns:PickUpConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickUpConfirmationNumber), input_name='PickUpConfirmationNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ModifyPickUpResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpConfirmationNumber':
            PickUpConfirmationNumber_ = child_.text
            PickUpConfirmationNumber_ = self.gds_validate_string(PickUpConfirmationNumber_, node, 'PickUpConfirmationNumber')
            self.PickUpConfirmationNumber = PickUpConfirmationNumber_
        super(ModifyPickUpResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class ModifyPickUpResponseContainer


class SchedulePickUpResponseContainer(ResponseContainer):
    """SchedulePickUpRespone"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, PickUpConfirmationNumber=None):
        self.original_tagname_ = None
        super(SchedulePickUpResponseContainer, self).__init__()
        self.PickUpConfirmationNumber = PickUpConfirmationNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SchedulePickUpResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SchedulePickUpResponseContainer.subclass:
            return SchedulePickUpResponseContainer.subclass(*args_, **kwargs_)
        else:
            return SchedulePickUpResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickUpConfirmationNumber(self): return self.PickUpConfirmationNumber
    def set_PickUpConfirmationNumber(self, PickUpConfirmationNumber): self.PickUpConfirmationNumber = PickUpConfirmationNumber
    def hasContent_(self):
        if (
            self.PickUpConfirmationNumber is not None or
            super(SchedulePickUpResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='SchedulePickUpResponseContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SchedulePickUpResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SchedulePickUpResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='SchedulePickUpResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SchedulePickUpResponseContainer'):
        super(SchedulePickUpResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SchedulePickUpResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SchedulePickUpResponseContainer', fromsubclass_=False, pretty_print=True):
        super(SchedulePickUpResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PickUpConfirmationNumber>%s</tns:PickUpConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickUpConfirmationNumber), input_name='PickUpConfirmationNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SchedulePickUpResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickUpConfirmationNumber':
            PickUpConfirmationNumber_ = child_.text
            PickUpConfirmationNumber_ = self.gds_validate_string(PickUpConfirmationNumber_, node, 'PickUpConfirmationNumber')
            self.PickUpConfirmationNumber = PickUpConfirmationNumber_
        super(SchedulePickUpResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class SchedulePickUpResponseContainer


class SchedulePickUpRequestContainer(RequestContainer):
    """SchedulePickUpRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, BillingAccountNumber=None, PartnerID=None, PickupInstruction=None, Address=None, ShipmentSummary=None, NotificationEmails=None):
        self.original_tagname_ = None
        super(SchedulePickUpRequestContainer, self).__init__()
        self.BillingAccountNumber = BillingAccountNumber
        self.PartnerID = PartnerID
        self.PickupInstruction = PickupInstruction
        self.Address = Address
        self.ShipmentSummary = ShipmentSummary
        self.NotificationEmails = NotificationEmails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SchedulePickUpRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SchedulePickUpRequestContainer.subclass:
            return SchedulePickUpRequestContainer.subclass(*args_, **kwargs_)
        else:
            return SchedulePickUpRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillingAccountNumber(self): return self.BillingAccountNumber
    def set_BillingAccountNumber(self, BillingAccountNumber): self.BillingAccountNumber = BillingAccountNumber
    def get_PartnerID(self): return self.PartnerID
    def set_PartnerID(self, PartnerID): self.PartnerID = PartnerID
    def get_PickupInstruction(self): return self.PickupInstruction
    def set_PickupInstruction(self, PickupInstruction): self.PickupInstruction = PickupInstruction
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ShipmentSummary(self): return self.ShipmentSummary
    def set_ShipmentSummary(self, ShipmentSummary): self.ShipmentSummary = ShipmentSummary
    def get_NotificationEmails(self): return self.NotificationEmails
    def set_NotificationEmails(self, NotificationEmails): self.NotificationEmails = NotificationEmails
    def hasContent_(self):
        if (
            self.BillingAccountNumber is not None or
            self.PartnerID is not None or
            self.PickupInstruction is not None or
            self.Address is not None or
            self.ShipmentSummary is not None or
            self.NotificationEmails is not None or
            super(SchedulePickUpRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='SchedulePickUpRequestContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SchedulePickUpRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SchedulePickUpRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='SchedulePickUpRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SchedulePickUpRequestContainer'):
        super(SchedulePickUpRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SchedulePickUpRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SchedulePickUpRequestContainer', fromsubclass_=False, pretty_print=True):
        super(SchedulePickUpRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillingAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BillingAccountNumber>%s</tns:BillingAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillingAccountNumber), input_name='BillingAccountNumber')), eol_))
        if self.PartnerID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PartnerID>%s</tns:PartnerID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartnerID), input_name='PartnerID')), eol_))
        if self.PickupInstruction is not None:
            self.PickupInstruction.export(outfile, level, namespace_, name_='PickupInstruction', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.ShipmentSummary is not None:
            self.ShipmentSummary.export(outfile, level, namespace_, name_='ShipmentSummary', pretty_print=pretty_print)
        if self.NotificationEmails is not None:
            self.NotificationEmails.export(outfile, level, namespace_, name_='NotificationEmails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SchedulePickUpRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillingAccountNumber':
            BillingAccountNumber_ = child_.text
            BillingAccountNumber_ = self.gds_validate_string(BillingAccountNumber_, node, 'BillingAccountNumber')
            self.BillingAccountNumber = BillingAccountNumber_
        elif nodeName_ == 'PartnerID':
            PartnerID_ = child_.text
            PartnerID_ = self.gds_validate_string(PartnerID_, node, 'PartnerID')
            self.PartnerID = PartnerID_
        elif nodeName_ == 'PickupInstruction':
            obj_ = PickupInstruction.factory()
            obj_.build(child_)
            self.PickupInstruction = obj_
            obj_.original_tagname_ = 'PickupInstruction'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ShipmentSummary':
            obj_ = ShipmentSummary.factory()
            obj_.build(child_)
            self.ShipmentSummary = obj_
            obj_.original_tagname_ = 'ShipmentSummary'
        elif nodeName_ == 'NotificationEmails':
            obj_ = NotificationEmails.factory()
            obj_.build(child_)
            self.NotificationEmails = obj_
            obj_.original_tagname_ = 'NotificationEmails'
        super(SchedulePickUpRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class SchedulePickUpRequestContainer


GDSClassesMapping = {
    'Address': Address,
    'ArrayOfError': ArrayOfError,
    'ArrayOfInformationalMessage': ArrayOfInformationalMessage,
    'ArrayOfPickUpDetail': ArrayOfPickUpDetail,
    'ArrayOfShipmentSummaryDetail': ArrayOfShipmentSummaryDetail,
    'Error': Error,
    'GetPickUpHistoryRequest': GetPickUpHistoryRequestContainer,
    'GetPickUpHistoryRequestContainer': GetPickUpHistoryRequestContainer,
    'GetPickUpHistoryResponse': GetPickUpHistoryResponseContainer,
    'GetPickUpHistoryResponseContainer': GetPickUpHistoryResponseContainer,
    'InformationalMessage': InformationalMessage,
    'ModifyPickUpRequest': ModifyPickUpRequestContainer,
    'ModifyPickUpRequestContainer': ModifyPickUpRequestContainer,
    'ModifyPickUpResponse': ModifyPickUpResponseContainer,
    'ModifyPickUpResponseContainer': ModifyPickUpResponseContainer,
    'ModifyPickupInstruction': ModifyPickupInstruction,
    'NotificationEmails': NotificationEmails,
    'PhoneNumber': PhoneNumber,
    'PickUpDetail': PickUpDetail,
    'PickUpHistorySearchCriteria': PickUpHistorySearchCriteria,
    'PickupInstruction': PickupInstruction,
    'RequestContainer': RequestContainer,
    'RequestContext': RequestContext,
    'ResponseContainer': ResponseContainer,
    'ResponseContext': ResponseContext,
    'ResponseInformation': ResponseInformation,
    'SchedulePickUpRequest': SchedulePickUpRequestContainer,
    'SchedulePickUpRequestContainer': SchedulePickUpRequestContainer,
    'SchedulePickUpResponse': SchedulePickUpResponseContainer,
    'SchedulePickUpResponseContainer': SchedulePickUpResponseContainer,
    'ShipmentSummary': ShipmentSummary,
    'ShipmentSummaryDetail': ShipmentSummaryDetail,
    'SupplyRequestCodes': SupplyRequestCodes,
    'ValidatePickUpRequest': ValidatePickUpRequestContainer,
    'ValidatePickUpRequestContainer': ValidatePickUpRequestContainer,
    'ValidatePickUpResponse': ValidatePickUpResponseContainer,
    'ValidatePickUpResponseContainer': ValidatePickUpResponseContainer,
    'VoidPickUpRequest': VoidPickUpRequestContainer,
    'VoidPickUpRequestContainer': VoidPickUpRequestContainer,
    'VoidPickUpResponse': VoidPickUpResponseContainer,
    'VoidPickUpResponseContainer': VoidPickUpResponseContainer,
    'Weight': Weight,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SchedulePickUpRequestContainer'
        rootClass = SchedulePickUpRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SchedulePickUpRequestContainer'
        rootClass = SchedulePickUpRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SchedulePickUpRequestContainer'
        rootClass = SchedulePickUpRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SchedulePickUpRequestContainer'
        rootClass = SchedulePickUpRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from PickupService.xsd import *\n\n')
        sys.stdout.write('import PickupService.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "ArrayOfError",
    "ArrayOfInformationalMessage",
    "ArrayOfPickUpDetail",
    "ArrayOfShipmentSummaryDetail",
    "Error",
    "GetPickUpHistoryRequestContainer",
    "GetPickUpHistoryResponseContainer",
    "InformationalMessage",
    "ModifyPickUpRequestContainer",
    "ModifyPickUpResponseContainer",
    "ModifyPickupInstruction",
    "NotificationEmails",
    "PhoneNumber",
    "PickUpDetail",
    "PickUpHistorySearchCriteria",
    "PickupInstruction",
    "RequestContainer",
    "RequestContext",
    "ResponseContainer",
    "ResponseContext",
    "ResponseInformation",
    "SchedulePickUpRequestContainer",
    "SchedulePickUpResponseContainer",
    "ShipmentSummary",
    "ShipmentSummaryDetail",
    "SupplyRequestCodes",
    "ValidatePickUpRequestContainer",
    "ValidatePickUpResponseContainer",
    "VoidPickUpRequestContainer",
    "VoidPickUpResponseContainer",
    "Weight"
]
