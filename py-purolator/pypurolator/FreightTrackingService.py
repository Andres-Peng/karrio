#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 14:06:22 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/FreightTrackingService.xsd.py')
#
# Command line arguments:
#   FreightTrackingService.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/FreightTrackingService.xsd.py" FreightTrackingService.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RequestContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContainer.subclass:
            return RequestContainer.subclass(*args_, **kwargs_)
        else:
            return RequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContainer', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContainer', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RequestContainer


class ArrayOfPIN(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PIN=None):
        self.original_tagname_ = None
        if PIN is None:
            self.PIN = []
        else:
            self.PIN = PIN
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfPIN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfPIN.subclass:
            return ArrayOfPIN.subclass(*args_, **kwargs_)
        else:
            return ArrayOfPIN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PIN(self): return self.PIN
    def set_PIN(self, PIN): self.PIN = PIN
    def add_PIN(self, value): self.PIN.append(value)
    def insert_PIN_at(self, index, value): self.PIN.insert(index, value)
    def replace_PIN_at(self, index, value): self.PIN[index] = value
    def hasContent_(self):
        if (
            self.PIN
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfPIN', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfPIN')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfPIN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfPIN', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfPIN'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfPIN', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PIN_ in self.PIN:
            PIN_.export(outfile, level, namespace_, name_='PIN', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PIN':
            obj_ = PIN.factory()
            obj_.build(child_)
            self.PIN.append(obj_)
            obj_.original_tagname_ = 'PIN'
# end class ArrayOfPIN


class PIN(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None):
        self.original_tagname_ = None
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PIN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PIN.subclass:
            return PIN.subclass(*args_, **kwargs_)
        else:
            return PIN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PIN', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PIN')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PIN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PIN', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PIN'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PIN', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Value>%s</tns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class PIN


class RequestContext(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Version=None, Language=None, GroupID=None, RequestReference=None, UserToken=None):
        self.original_tagname_ = None
        self.Version = Version
        self.Language = Language
        self.validate_Language(self.Language)
        self.GroupID = GroupID
        self.RequestReference = RequestReference
        self.UserToken = UserToken
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContext.subclass:
            return RequestContext.subclass(*args_, **kwargs_)
        else:
            return RequestContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_GroupID(self): return self.GroupID
    def set_GroupID(self, GroupID): self.GroupID = GroupID
    def get_RequestReference(self): return self.RequestReference
    def set_RequestReference(self, RequestReference): self.RequestReference = RequestReference
    def get_UserToken(self): return self.UserToken
    def set_UserToken(self, UserToken): self.UserToken = UserToken
    def validate_Language(self, value):
        # Validate type Language, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['en', 'fr']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Language' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Version is not None or
            self.Language is not None or
            self.GroupID is not None or
            self.RequestReference is not None or
            self.UserToken is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Version>%s</tns:Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Language>%s</tns:Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Language), input_name='Language')), eol_))
        if self.GroupID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:GroupID>%s</tns:GroupID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GroupID), input_name='GroupID')), eol_))
        if self.RequestReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:RequestReference>%s</tns:RequestReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RequestReference), input_name='RequestReference')), eol_))
        if self.UserToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UserToken>%s</tns:UserToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserToken), input_name='UserToken')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
            # validate type Language
            self.validate_Language(self.Language)
        elif nodeName_ == 'GroupID':
            GroupID_ = child_.text
            GroupID_ = self.gds_validate_string(GroupID_, node, 'GroupID')
            self.GroupID = GroupID_
        elif nodeName_ == 'RequestReference':
            RequestReference_ = child_.text
            RequestReference_ = self.gds_validate_string(RequestReference_, node, 'RequestReference')
            self.RequestReference = RequestReference_
        elif nodeName_ == 'UserToken':
            UserToken_ = child_.text
            UserToken_ = self.gds_validate_string(UserToken_, node, 'UserToken')
            self.UserToken = UserToken_
# end class RequestContext


class ResponseContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseInformation=None):
        self.original_tagname_ = None
        self.ResponseInformation = ResponseInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContainer.subclass:
            return ResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseInformation(self): return self.ResponseInformation
    def set_ResponseInformation(self, ResponseInformation): self.ResponseInformation = ResponseInformation
    def hasContent_(self):
        if (
            self.ResponseInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseInformation is not None:
            self.ResponseInformation.export(outfile, level, namespace_, name_='ResponseInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseInformation':
            obj_ = ResponseInformation.factory()
            obj_.build(child_)
            self.ResponseInformation = obj_
            obj_.original_tagname_ = 'ResponseInformation'
# end class ResponseContainer


class ResponseInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Errors=None, InformationalMessages=None):
        self.original_tagname_ = None
        self.Errors = Errors
        self.InformationalMessages = InformationalMessages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseInformation.subclass:
            return ResponseInformation.subclass(*args_, **kwargs_)
        else:
            return ResponseInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Errors(self): return self.Errors
    def set_Errors(self, Errors): self.Errors = Errors
    def get_InformationalMessages(self): return self.InformationalMessages
    def set_InformationalMessages(self, InformationalMessages): self.InformationalMessages = InformationalMessages
    def hasContent_(self):
        if (
            self.Errors is not None or
            self.InformationalMessages is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Errors is not None:
            self.Errors.export(outfile, level, namespace_, name_='Errors', pretty_print=pretty_print)
        if self.InformationalMessages is not None:
            self.InformationalMessages.export(outfile, level, namespace_, name_='InformationalMessages', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Errors':
            obj_ = ArrayOfError.factory()
            obj_.build(child_)
            self.Errors = obj_
            obj_.original_tagname_ = 'Errors'
        elif nodeName_ == 'InformationalMessages':
            obj_ = ArrayOfInformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessages = obj_
            obj_.original_tagname_ = 'InformationalMessages'
# end class ResponseInformation


class ArrayOfError(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Error=None):
        self.original_tagname_ = None
        if Error is None:
            self.Error = []
        else:
            self.Error = Error
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfError)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfError.subclass:
            return ArrayOfError.subclass(*args_, **kwargs_)
        else:
            return ArrayOfError(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def add_Error(self, value): self.Error.append(value)
    def insert_Error_at(self, index, value): self.Error.insert(index, value)
    def replace_Error_at(self, index, value): self.Error[index] = value
    def hasContent_(self):
        if (
            self.Error
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfError', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfError')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfError')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfError', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfError'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfError', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Error_ in self.Error:
            Error_.export(outfile, level, namespace_, name_='Error', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Error':
            obj_ = Error.factory()
            obj_.build(child_)
            self.Error.append(obj_)
            obj_.original_tagname_ = 'Error'
# end class ArrayOfError


class Error(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, AdditionalInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.AdditionalInformation = AdditionalInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Error.subclass:
            return Error.subclass(*args_, **kwargs_)
        else:
            return Error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_AdditionalInformation(self): return self.AdditionalInformation
    def set_AdditionalInformation(self, AdditionalInformation): self.AdditionalInformation = AdditionalInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.AdditionalInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Error', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Error'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.AdditionalInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AdditionalInformation>%s</tns:AdditionalInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalInformation), input_name='AdditionalInformation')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'AdditionalInformation':
            AdditionalInformation_ = child_.text
            AdditionalInformation_ = self.gds_validate_string(AdditionalInformation_, node, 'AdditionalInformation')
            self.AdditionalInformation = AdditionalInformation_
# end class Error


class ArrayOfInformationalMessage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InformationalMessage=None):
        self.original_tagname_ = None
        if InformationalMessage is None:
            self.InformationalMessage = []
        else:
            self.InformationalMessage = InformationalMessage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfInformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfInformationalMessage.subclass:
            return ArrayOfInformationalMessage.subclass(*args_, **kwargs_)
        else:
            return ArrayOfInformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InformationalMessage(self): return self.InformationalMessage
    def set_InformationalMessage(self, InformationalMessage): self.InformationalMessage = InformationalMessage
    def add_InformationalMessage(self, value): self.InformationalMessage.append(value)
    def insert_InformationalMessage_at(self, index, value): self.InformationalMessage.insert(index, value)
    def replace_InformationalMessage_at(self, index, value): self.InformationalMessage[index] = value
    def hasContent_(self):
        if (
            self.InformationalMessage
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfInformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfInformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfInformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfInformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformationalMessage_ in self.InformationalMessage:
            InformationalMessage_.export(outfile, level, namespace_, name_='InformationalMessage', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InformationalMessage':
            obj_ = InformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessage.append(obj_)
            obj_.original_tagname_ = 'InformationalMessage'
# end class ArrayOfInformationalMessage


class InformationalMessage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Message=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformationalMessage.subclass:
            return InformationalMessage.subclass(*args_, **kwargs_)
        else:
            return InformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='InformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='InformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='InformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='InformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Message>%s</tns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class InformationalMessage


class ArrayOfTrackingInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingInformation=None):
        self.original_tagname_ = None
        if TrackingInformation is None:
            self.TrackingInformation = []
        else:
            self.TrackingInformation = TrackingInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfTrackingInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfTrackingInformation.subclass:
            return ArrayOfTrackingInformation.subclass(*args_, **kwargs_)
        else:
            return ArrayOfTrackingInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingInformation(self): return self.TrackingInformation
    def set_TrackingInformation(self, TrackingInformation): self.TrackingInformation = TrackingInformation
    def add_TrackingInformation(self, value): self.TrackingInformation.append(value)
    def insert_TrackingInformation_at(self, index, value): self.TrackingInformation.insert(index, value)
    def replace_TrackingInformation_at(self, index, value): self.TrackingInformation[index] = value
    def hasContent_(self):
        if (
            self.TrackingInformation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfTrackingInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfTrackingInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfTrackingInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfTrackingInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfTrackingInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfTrackingInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TrackingInformation_ in self.TrackingInformation:
            TrackingInformation_.export(outfile, level, namespace_, name_='TrackingInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingInformation':
            obj_ = TrackingInformation.factory()
            obj_.build(child_)
            self.TrackingInformation.append(obj_)
            obj_.original_tagname_ = 'TrackingInformation'
# end class ArrayOfTrackingInformation


class TrackingInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentDetails=None, ShipmentStatus=None, ShipmentPinHistory=None):
        self.original_tagname_ = None
        self.ShipmentDetails = ShipmentDetails
        self.ShipmentStatus = ShipmentStatus
        self.ShipmentPinHistory = ShipmentPinHistory
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingInformation.subclass:
            return TrackingInformation.subclass(*args_, **kwargs_)
        else:
            return TrackingInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentDetails(self): return self.ShipmentDetails
    def set_ShipmentDetails(self, ShipmentDetails): self.ShipmentDetails = ShipmentDetails
    def get_ShipmentStatus(self): return self.ShipmentStatus
    def set_ShipmentStatus(self, ShipmentStatus): self.ShipmentStatus = ShipmentStatus
    def get_ShipmentPinHistory(self): return self.ShipmentPinHistory
    def set_ShipmentPinHistory(self, ShipmentPinHistory): self.ShipmentPinHistory = ShipmentPinHistory
    def hasContent_(self):
        if (
            self.ShipmentDetails is not None or
            self.ShipmentStatus is not None or
            self.ShipmentPinHistory is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='TrackingInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='TrackingInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TrackingInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TrackingInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentDetails is not None:
            self.ShipmentDetails.export(outfile, level, namespace_, name_='ShipmentDetails', pretty_print=pretty_print)
        if self.ShipmentStatus is not None:
            self.ShipmentStatus.export(outfile, level, namespace_, name_='ShipmentStatus', pretty_print=pretty_print)
        if self.ShipmentPinHistory is not None:
            self.ShipmentPinHistory.export(outfile, level, namespace_, name_='ShipmentPinHistory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentDetails':
            obj_ = ShipmentDetails.factory()
            obj_.build(child_)
            self.ShipmentDetails = obj_
            obj_.original_tagname_ = 'ShipmentDetails'
        elif nodeName_ == 'ShipmentStatus':
            obj_ = ShipmentStatus.factory()
            obj_.build(child_)
            self.ShipmentStatus = obj_
            obj_.original_tagname_ = 'ShipmentStatus'
        elif nodeName_ == 'ShipmentPinHistory':
            obj_ = ArrayOfPinTraceHistory.factory()
            obj_.build(child_)
            self.ShipmentPinHistory = obj_
            obj_.original_tagname_ = 'ShipmentPinHistory'
# end class TrackingInformation


class ShipmentDetails(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SenderInformation=None, ReceiverInformation=None, ThirdPartyInformation=None, ProNumber=None, Trn=None, BOLNo=None, ShipDate=None, Pieces=None, Weight=None, Pallets=None, ServiceTypeCode=None, ServiceTypeDesc=None, InternalPro=None, POType=None, PONumber=None):
        self.original_tagname_ = None
        self.SenderInformation = SenderInformation
        self.ReceiverInformation = ReceiverInformation
        self.ThirdPartyInformation = ThirdPartyInformation
        self.ProNumber = ProNumber
        self.Trn = Trn
        self.BOLNo = BOLNo
        self.ShipDate = ShipDate
        self.Pieces = Pieces
        self.Weight = Weight
        self.Pallets = Pallets
        self.ServiceTypeCode = ServiceTypeCode
        self.ServiceTypeDesc = ServiceTypeDesc
        self.InternalPro = InternalPro
        self.POType = POType
        self.PONumber = PONumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDetails)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDetails.subclass:
            return ShipmentDetails.subclass(*args_, **kwargs_)
        else:
            return ShipmentDetails(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SenderInformation(self): return self.SenderInformation
    def set_SenderInformation(self, SenderInformation): self.SenderInformation = SenderInformation
    def get_ReceiverInformation(self): return self.ReceiverInformation
    def set_ReceiverInformation(self, ReceiverInformation): self.ReceiverInformation = ReceiverInformation
    def get_ThirdPartyInformation(self): return self.ThirdPartyInformation
    def set_ThirdPartyInformation(self, ThirdPartyInformation): self.ThirdPartyInformation = ThirdPartyInformation
    def get_ProNumber(self): return self.ProNumber
    def set_ProNumber(self, ProNumber): self.ProNumber = ProNumber
    def get_Trn(self): return self.Trn
    def set_Trn(self, Trn): self.Trn = Trn
    def get_BOLNo(self): return self.BOLNo
    def set_BOLNo(self, BOLNo): self.BOLNo = BOLNo
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_Pieces(self): return self.Pieces
    def set_Pieces(self, Pieces): self.Pieces = Pieces
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_Pallets(self): return self.Pallets
    def set_Pallets(self, Pallets): self.Pallets = Pallets
    def get_ServiceTypeCode(self): return self.ServiceTypeCode
    def set_ServiceTypeCode(self, ServiceTypeCode): self.ServiceTypeCode = ServiceTypeCode
    def get_ServiceTypeDesc(self): return self.ServiceTypeDesc
    def set_ServiceTypeDesc(self, ServiceTypeDesc): self.ServiceTypeDesc = ServiceTypeDesc
    def get_InternalPro(self): return self.InternalPro
    def set_InternalPro(self, InternalPro): self.InternalPro = InternalPro
    def get_POType(self): return self.POType
    def set_POType(self, POType): self.POType = POType
    def get_PONumber(self): return self.PONumber
    def set_PONumber(self, PONumber): self.PONumber = PONumber
    def hasContent_(self):
        if (
            self.SenderInformation is not None or
            self.ReceiverInformation is not None or
            self.ThirdPartyInformation is not None or
            self.ProNumber is not None or
            self.Trn is not None or
            self.BOLNo is not None or
            self.ShipDate is not None or
            self.Pieces is not None or
            self.Weight is not None or
            self.Pallets is not None or
            self.ServiceTypeCode is not None or
            self.ServiceTypeDesc is not None or
            self.InternalPro is not None or
            self.POType is not None or
            self.PONumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ShipmentDetails', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDetails')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentDetails')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ShipmentDetails', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ShipmentDetails'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ShipmentDetails', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SenderInformation is not None:
            self.SenderInformation.export(outfile, level, namespace_, name_='SenderInformation', pretty_print=pretty_print)
        if self.ReceiverInformation is not None:
            self.ReceiverInformation.export(outfile, level, namespace_, name_='ReceiverInformation', pretty_print=pretty_print)
        if self.ThirdPartyInformation is not None:
            self.ThirdPartyInformation.export(outfile, level, namespace_, name_='ThirdPartyInformation', pretty_print=pretty_print)
        if self.ProNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ProNumber>%s</tns:ProNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProNumber), input_name='ProNumber')), eol_))
        if self.Trn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Trn>%s</tns:Trn>%s' % (self.gds_format_integer(self.Trn, input_name='Trn'), eol_))
        if self.BOLNo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BOLNo>%s</tns:BOLNo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BOLNo), input_name='BOLNo')), eol_))
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ShipDate>%s</tns:ShipDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipDate), input_name='ShipDate')), eol_))
        if self.Pieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Pieces>%s</tns:Pieces>%s' % (self.gds_format_integer(self.Pieces, input_name='Pieces'), eol_))
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Weight>%s</tns:Weight>%s' % (self.gds_format_float(self.Weight, input_name='Weight'), eol_))
        if self.Pallets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Pallets>%s</tns:Pallets>%s' % (self.gds_format_integer(self.Pallets, input_name='Pallets'), eol_))
        if self.ServiceTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ServiceTypeCode>%s</tns:ServiceTypeCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceTypeCode), input_name='ServiceTypeCode')), eol_))
        if self.ServiceTypeDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ServiceTypeDesc>%s</tns:ServiceTypeDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceTypeDesc), input_name='ServiceTypeDesc')), eol_))
        if self.InternalPro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:InternalPro>%s</tns:InternalPro>%s' % (self.gds_format_float(self.InternalPro, input_name='InternalPro'), eol_))
        if self.POType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:POType>%s</tns:POType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POType), input_name='POType')), eol_))
        if self.PONumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PONumber>%s</tns:PONumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PONumber), input_name='PONumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SenderInformation':
            obj_ = SenderInformation.factory()
            obj_.build(child_)
            self.SenderInformation = obj_
            obj_.original_tagname_ = 'SenderInformation'
        elif nodeName_ == 'ReceiverInformation':
            obj_ = ReceiverInformation.factory()
            obj_.build(child_)
            self.ReceiverInformation = obj_
            obj_.original_tagname_ = 'ReceiverInformation'
        elif nodeName_ == 'ThirdPartyInformation':
            obj_ = ThirdPartyInformation.factory()
            obj_.build(child_)
            self.ThirdPartyInformation = obj_
            obj_.original_tagname_ = 'ThirdPartyInformation'
        elif nodeName_ == 'ProNumber':
            ProNumber_ = child_.text
            ProNumber_ = self.gds_validate_string(ProNumber_, node, 'ProNumber')
            self.ProNumber = ProNumber_
        elif nodeName_ == 'Trn':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Trn')
            self.Trn = ival_
        elif nodeName_ == 'BOLNo':
            BOLNo_ = child_.text
            BOLNo_ = self.gds_validate_string(BOLNo_, node, 'BOLNo')
            self.BOLNo = BOLNo_
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'Pieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Pieces')
            self.Pieces = ival_
        elif nodeName_ == 'Weight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Weight')
            self.Weight = fval_
        elif nodeName_ == 'Pallets':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Pallets')
            self.Pallets = ival_
        elif nodeName_ == 'ServiceTypeCode':
            ServiceTypeCode_ = child_.text
            ServiceTypeCode_ = self.gds_validate_string(ServiceTypeCode_, node, 'ServiceTypeCode')
            self.ServiceTypeCode = ServiceTypeCode_
        elif nodeName_ == 'ServiceTypeDesc':
            ServiceTypeDesc_ = child_.text
            ServiceTypeDesc_ = self.gds_validate_string(ServiceTypeDesc_, node, 'ServiceTypeDesc')
            self.ServiceTypeDesc = ServiceTypeDesc_
        elif nodeName_ == 'InternalPro':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InternalPro')
            self.InternalPro = fval_
        elif nodeName_ == 'POType':
            POType_ = child_.text
            POType_ = self.gds_validate_string(POType_, node, 'POType')
            self.POType = POType_
        elif nodeName_ == 'PONumber':
            PONumber_ = child_.text
            PONumber_ = self.gds_validate_string(PONumber_, node, 'PONumber')
            self.PONumber = PONumber_
# end class ShipmentDetails


class SenderInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None, EmailAddress=None):
        self.original_tagname_ = None
        self.Address = Address
        self.EmailAddress = EmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SenderInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SenderInformation.subclass:
            return SenderInformation.subclass(*args_, **kwargs_)
        else:
            return SenderInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_EmailAddress(self): return self.EmailAddress
    def set_EmailAddress(self, EmailAddress): self.EmailAddress = EmailAddress
    def hasContent_(self):
        if (
            self.Address is not None or
            self.EmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='SenderInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SenderInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SenderInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='SenderInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SenderInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SenderInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.EmailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:EmailAddress>%s</tns:EmailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'EmailAddress':
            EmailAddress_ = child_.text
            EmailAddress_ = self.gds_validate_string(EmailAddress_, node, 'EmailAddress')
            self.EmailAddress = EmailAddress_
# end class SenderInformation


class Address(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Company=None, Department=None, StreetNumber=None, StreetSuffix=None, StreetName=None, StreetType=None, StreetDirection=None, Suite=None, Floor=None, StreetAddress2=None, StreetAddress3=None, City=None, Province=None, Country=None, PostalCode=None, PhoneNumber=None, FaxNumber=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Company = Company
        self.Department = Department
        self.StreetNumber = StreetNumber
        self.StreetSuffix = StreetSuffix
        self.StreetName = StreetName
        self.StreetType = StreetType
        self.StreetDirection = StreetDirection
        self.Suite = Suite
        self.Floor = Floor
        self.StreetAddress2 = StreetAddress2
        self.StreetAddress3 = StreetAddress3
        self.City = City
        self.Province = Province
        self.Country = Country
        self.PostalCode = PostalCode
        self.PhoneNumber = PhoneNumber
        self.FaxNumber = FaxNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Company(self): return self.Company
    def set_Company(self, Company): self.Company = Company
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_StreetNumber(self): return self.StreetNumber
    def set_StreetNumber(self, StreetNumber): self.StreetNumber = StreetNumber
    def get_StreetSuffix(self): return self.StreetSuffix
    def set_StreetSuffix(self, StreetSuffix): self.StreetSuffix = StreetSuffix
    def get_StreetName(self): return self.StreetName
    def set_StreetName(self, StreetName): self.StreetName = StreetName
    def get_StreetType(self): return self.StreetType
    def set_StreetType(self, StreetType): self.StreetType = StreetType
    def get_StreetDirection(self): return self.StreetDirection
    def set_StreetDirection(self, StreetDirection): self.StreetDirection = StreetDirection
    def get_Suite(self): return self.Suite
    def set_Suite(self, Suite): self.Suite = Suite
    def get_Floor(self): return self.Floor
    def set_Floor(self, Floor): self.Floor = Floor
    def get_StreetAddress2(self): return self.StreetAddress2
    def set_StreetAddress2(self, StreetAddress2): self.StreetAddress2 = StreetAddress2
    def get_StreetAddress3(self): return self.StreetAddress3
    def set_StreetAddress3(self, StreetAddress3): self.StreetAddress3 = StreetAddress3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_Province(self): return self.Province
    def set_Province(self, Province): self.Province = Province
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Company is not None or
            self.Department is not None or
            self.StreetNumber is not None or
            self.StreetSuffix is not None or
            self.StreetName is not None or
            self.StreetType is not None or
            self.StreetDirection is not None or
            self.Suite is not None or
            self.Floor is not None or
            self.StreetAddress2 is not None or
            self.StreetAddress3 is not None or
            self.City is not None or
            self.Province is not None or
            self.Country is not None or
            self.PostalCode is not None or
            self.PhoneNumber is not None or
            self.FaxNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Address', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Name>%s</tns:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Company is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Company>%s</tns:Company>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Company), input_name='Company')), eol_))
        if self.Department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Department>%s</tns:Department>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), eol_))
        if self.StreetNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetNumber>%s</tns:StreetNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetNumber), input_name='StreetNumber')), eol_))
        if self.StreetSuffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetSuffix>%s</tns:StreetSuffix>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetSuffix), input_name='StreetSuffix')), eol_))
        if self.StreetName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetName>%s</tns:StreetName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetName), input_name='StreetName')), eol_))
        if self.StreetType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetType>%s</tns:StreetType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetType), input_name='StreetType')), eol_))
        if self.StreetDirection is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetDirection>%s</tns:StreetDirection>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetDirection), input_name='StreetDirection')), eol_))
        if self.Suite is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Suite>%s</tns:Suite>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Suite), input_name='Suite')), eol_))
        if self.Floor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Floor>%s</tns:Floor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Floor), input_name='Floor')), eol_))
        if self.StreetAddress2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetAddress2>%s</tns:StreetAddress2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetAddress2), input_name='StreetAddress2')), eol_))
        if self.StreetAddress3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetAddress3>%s</tns:StreetAddress3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetAddress3), input_name='StreetAddress3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:City>%s</tns:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.Province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Province>%s</tns:Province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Province), input_name='Province')), eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Country>%s</tns:Country>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PostalCode>%s</tns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.PhoneNumber is not None:
            self.PhoneNumber.export(outfile, level, namespace_, name_='PhoneNumber', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            self.FaxNumber.export(outfile, level, namespace_, name_='FaxNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Company':
            Company_ = child_.text
            Company_ = self.gds_validate_string(Company_, node, 'Company')
            self.Company = Company_
        elif nodeName_ == 'Department':
            Department_ = child_.text
            Department_ = self.gds_validate_string(Department_, node, 'Department')
            self.Department = Department_
        elif nodeName_ == 'StreetNumber':
            StreetNumber_ = child_.text
            StreetNumber_ = self.gds_validate_string(StreetNumber_, node, 'StreetNumber')
            self.StreetNumber = StreetNumber_
        elif nodeName_ == 'StreetSuffix':
            StreetSuffix_ = child_.text
            StreetSuffix_ = self.gds_validate_string(StreetSuffix_, node, 'StreetSuffix')
            self.StreetSuffix = StreetSuffix_
        elif nodeName_ == 'StreetName':
            StreetName_ = child_.text
            StreetName_ = self.gds_validate_string(StreetName_, node, 'StreetName')
            self.StreetName = StreetName_
        elif nodeName_ == 'StreetType':
            StreetType_ = child_.text
            StreetType_ = self.gds_validate_string(StreetType_, node, 'StreetType')
            self.StreetType = StreetType_
        elif nodeName_ == 'StreetDirection':
            StreetDirection_ = child_.text
            StreetDirection_ = self.gds_validate_string(StreetDirection_, node, 'StreetDirection')
            self.StreetDirection = StreetDirection_
        elif nodeName_ == 'Suite':
            Suite_ = child_.text
            Suite_ = self.gds_validate_string(Suite_, node, 'Suite')
            self.Suite = Suite_
        elif nodeName_ == 'Floor':
            Floor_ = child_.text
            Floor_ = self.gds_validate_string(Floor_, node, 'Floor')
            self.Floor = Floor_
        elif nodeName_ == 'StreetAddress2':
            StreetAddress2_ = child_.text
            StreetAddress2_ = self.gds_validate_string(StreetAddress2_, node, 'StreetAddress2')
            self.StreetAddress2 = StreetAddress2_
        elif nodeName_ == 'StreetAddress3':
            StreetAddress3_ = child_.text
            StreetAddress3_ = self.gds_validate_string(StreetAddress3_, node, 'StreetAddress3')
            self.StreetAddress3 = StreetAddress3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'Province':
            Province_ = child_.text
            Province_ = self.gds_validate_string(Province_, node, 'Province')
            self.Province = Province_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'PhoneNumber':
            obj_ = PhoneNumber.factory()
            obj_.build(child_)
            self.PhoneNumber = obj_
            obj_.original_tagname_ = 'PhoneNumber'
        elif nodeName_ == 'FaxNumber':
            obj_ = PhoneNumber.factory()
            obj_.build(child_)
            self.FaxNumber = obj_
            obj_.original_tagname_ = 'FaxNumber'
# end class Address


class PhoneNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, AreaCode=None, Phone=None, Extension=None):
        self.original_tagname_ = None
        self.CountryCode = CountryCode
        self.AreaCode = AreaCode
        self.Phone = Phone
        self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneNumber)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneNumber.subclass:
            return PhoneNumber.subclass(*args_, **kwargs_)
        else:
            return PhoneNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_AreaCode(self): return self.AreaCode
    def set_AreaCode(self, AreaCode): self.AreaCode = AreaCode
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def hasContent_(self):
        if (
            self.CountryCode is not None or
            self.AreaCode is not None or
            self.Phone is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PhoneNumber', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneNumber')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhoneNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PhoneNumber', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PhoneNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PhoneNumber', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CountryCode>%s</tns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.AreaCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AreaCode>%s</tns:AreaCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AreaCode), input_name='AreaCode')), eol_))
        if self.Phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Phone>%s</tns:Phone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Phone), input_name='Phone')), eol_))
        if self.Extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Extension>%s</tns:Extension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'AreaCode':
            AreaCode_ = child_.text
            AreaCode_ = self.gds_validate_string(AreaCode_, node, 'AreaCode')
            self.AreaCode = AreaCode_
        elif nodeName_ == 'Phone':
            Phone_ = child_.text
            Phone_ = self.gds_validate_string(Phone_, node, 'Phone')
            self.Phone = Phone_
        elif nodeName_ == 'Extension':
            Extension_ = child_.text
            Extension_ = self.gds_validate_string(Extension_, node, 'Extension')
            self.Extension = Extension_
# end class PhoneNumber


class ReceiverInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None, EmailAddress=None):
        self.original_tagname_ = None
        self.Address = Address
        self.EmailAddress = EmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiverInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiverInformation.subclass:
            return ReceiverInformation.subclass(*args_, **kwargs_)
        else:
            return ReceiverInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_EmailAddress(self): return self.EmailAddress
    def set_EmailAddress(self, EmailAddress): self.EmailAddress = EmailAddress
    def hasContent_(self):
        if (
            self.Address is not None or
            self.EmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ReceiverInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiverInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReceiverInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ReceiverInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ReceiverInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ReceiverInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.EmailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:EmailAddress>%s</tns:EmailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'EmailAddress':
            EmailAddress_ = child_.text
            EmailAddress_ = self.gds_validate_string(EmailAddress_, node, 'EmailAddress')
            self.EmailAddress = EmailAddress_
# end class ReceiverInformation


class ThirdPartyInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None):
        self.original_tagname_ = None
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ThirdPartyInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ThirdPartyInformation.subclass:
            return ThirdPartyInformation.subclass(*args_, **kwargs_)
        else:
            return ThirdPartyInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ThirdPartyInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ThirdPartyInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ThirdPartyInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ThirdPartyInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ThirdPartyInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ThirdPartyInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ThirdPartyInformation


class ShipmentStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentStatus_member=None, Delivered=None, DelDate=None, DelTime=None, SignedBy=None, DelStatCode=None, DelStatDesc=None, AppDateStart=None, AppDateEnd=None, AppTimeStart=None, AppTimeEnd=None, AppContact=None, ImageType=None, ImageLink=None):
        self.original_tagname_ = None
        self.ShipmentStatus = ShipmentStatus_member
        self.Delivered = Delivered
        self.DelDate = DelDate
        self.DelTime = DelTime
        self.SignedBy = SignedBy
        self.DelStatCode = DelStatCode
        self.DelStatDesc = DelStatDesc
        self.AppDateStart = AppDateStart
        self.AppDateEnd = AppDateEnd
        self.AppTimeStart = AppTimeStart
        self.AppTimeEnd = AppTimeEnd
        self.AppContact = AppContact
        self.ImageType = ImageType
        self.ImageLink = ImageLink
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentStatus)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentStatus.subclass:
            return ShipmentStatus.subclass(*args_, **kwargs_)
        else:
            return ShipmentStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentStatus(self): return self.ShipmentStatus
    def set_ShipmentStatus(self, ShipmentStatus): self.ShipmentStatus = ShipmentStatus
    def get_Delivered(self): return self.Delivered
    def set_Delivered(self, Delivered): self.Delivered = Delivered
    def get_DelDate(self): return self.DelDate
    def set_DelDate(self, DelDate): self.DelDate = DelDate
    def get_DelTime(self): return self.DelTime
    def set_DelTime(self, DelTime): self.DelTime = DelTime
    def get_SignedBy(self): return self.SignedBy
    def set_SignedBy(self, SignedBy): self.SignedBy = SignedBy
    def get_DelStatCode(self): return self.DelStatCode
    def set_DelStatCode(self, DelStatCode): self.DelStatCode = DelStatCode
    def get_DelStatDesc(self): return self.DelStatDesc
    def set_DelStatDesc(self, DelStatDesc): self.DelStatDesc = DelStatDesc
    def get_AppDateStart(self): return self.AppDateStart
    def set_AppDateStart(self, AppDateStart): self.AppDateStart = AppDateStart
    def get_AppDateEnd(self): return self.AppDateEnd
    def set_AppDateEnd(self, AppDateEnd): self.AppDateEnd = AppDateEnd
    def get_AppTimeStart(self): return self.AppTimeStart
    def set_AppTimeStart(self, AppTimeStart): self.AppTimeStart = AppTimeStart
    def get_AppTimeEnd(self): return self.AppTimeEnd
    def set_AppTimeEnd(self, AppTimeEnd): self.AppTimeEnd = AppTimeEnd
    def get_AppContact(self): return self.AppContact
    def set_AppContact(self, AppContact): self.AppContact = AppContact
    def get_ImageType(self): return self.ImageType
    def set_ImageType(self, ImageType): self.ImageType = ImageType
    def get_ImageLink(self): return self.ImageLink
    def set_ImageLink(self, ImageLink): self.ImageLink = ImageLink
    def hasContent_(self):
        if (
            self.ShipmentStatus is not None or
            self.Delivered is not None or
            self.DelDate is not None or
            self.DelTime is not None or
            self.SignedBy is not None or
            self.DelStatCode is not None or
            self.DelStatDesc is not None or
            self.AppDateStart is not None or
            self.AppDateEnd is not None or
            self.AppTimeStart is not None or
            self.AppTimeEnd is not None or
            self.AppContact is not None or
            self.ImageType is not None or
            self.ImageLink is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ShipmentStatus', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentStatus')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ShipmentStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ShipmentStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ShipmentStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ShipmentStatus>%s</tns:ShipmentStatus>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentStatus), input_name='ShipmentStatus')), eol_))
        if self.Delivered is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Delivered>%s</tns:Delivered>%s' % (self.gds_format_boolean(self.Delivered, input_name='Delivered'), eol_))
        if self.DelDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DelDate>%s</tns:DelDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DelDate), input_name='DelDate')), eol_))
        if self.DelTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DelTime>%s</tns:DelTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DelTime), input_name='DelTime')), eol_))
        if self.SignedBy is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SignedBy>%s</tns:SignedBy>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SignedBy), input_name='SignedBy')), eol_))
        if self.DelStatCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DelStatCode>%s</tns:DelStatCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DelStatCode), input_name='DelStatCode')), eol_))
        if self.DelStatDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DelStatDesc>%s</tns:DelStatDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DelStatDesc), input_name='DelStatDesc')), eol_))
        if self.AppDateStart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AppDateStart>%s</tns:AppDateStart>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AppDateStart), input_name='AppDateStart')), eol_))
        if self.AppDateEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AppDateEnd>%s</tns:AppDateEnd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AppDateEnd), input_name='AppDateEnd')), eol_))
        if self.AppTimeStart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AppTimeStart>%s</tns:AppTimeStart>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AppTimeStart), input_name='AppTimeStart')), eol_))
        if self.AppTimeEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AppTimeEnd>%s</tns:AppTimeEnd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AppTimeEnd), input_name='AppTimeEnd')), eol_))
        if self.AppContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AppContact>%s</tns:AppContact>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AppContact), input_name='AppContact')), eol_))
        if self.ImageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ImageType>%s</tns:ImageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), eol_))
        if self.ImageLink is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ImageLink>%s</tns:ImageLink>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageLink), input_name='ImageLink')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentStatus':
            ShipmentStatus_ = child_.text
            ShipmentStatus_ = self.gds_validate_string(ShipmentStatus_, node, 'ShipmentStatus')
            self.ShipmentStatus = ShipmentStatus_
        elif nodeName_ == 'Delivered':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Delivered')
            self.Delivered = ival_
        elif nodeName_ == 'DelDate':
            DelDate_ = child_.text
            DelDate_ = self.gds_validate_string(DelDate_, node, 'DelDate')
            self.DelDate = DelDate_
        elif nodeName_ == 'DelTime':
            DelTime_ = child_.text
            DelTime_ = self.gds_validate_string(DelTime_, node, 'DelTime')
            self.DelTime = DelTime_
        elif nodeName_ == 'SignedBy':
            SignedBy_ = child_.text
            SignedBy_ = self.gds_validate_string(SignedBy_, node, 'SignedBy')
            self.SignedBy = SignedBy_
        elif nodeName_ == 'DelStatCode':
            DelStatCode_ = child_.text
            DelStatCode_ = self.gds_validate_string(DelStatCode_, node, 'DelStatCode')
            self.DelStatCode = DelStatCode_
        elif nodeName_ == 'DelStatDesc':
            DelStatDesc_ = child_.text
            DelStatDesc_ = self.gds_validate_string(DelStatDesc_, node, 'DelStatDesc')
            self.DelStatDesc = DelStatDesc_
        elif nodeName_ == 'AppDateStart':
            AppDateStart_ = child_.text
            AppDateStart_ = self.gds_validate_string(AppDateStart_, node, 'AppDateStart')
            self.AppDateStart = AppDateStart_
        elif nodeName_ == 'AppDateEnd':
            AppDateEnd_ = child_.text
            AppDateEnd_ = self.gds_validate_string(AppDateEnd_, node, 'AppDateEnd')
            self.AppDateEnd = AppDateEnd_
        elif nodeName_ == 'AppTimeStart':
            AppTimeStart_ = child_.text
            AppTimeStart_ = self.gds_validate_string(AppTimeStart_, node, 'AppTimeStart')
            self.AppTimeStart = AppTimeStart_
        elif nodeName_ == 'AppTimeEnd':
            AppTimeEnd_ = child_.text
            AppTimeEnd_ = self.gds_validate_string(AppTimeEnd_, node, 'AppTimeEnd')
            self.AppTimeEnd = AppTimeEnd_
        elif nodeName_ == 'AppContact':
            AppContact_ = child_.text
            AppContact_ = self.gds_validate_string(AppContact_, node, 'AppContact')
            self.AppContact = AppContact_
        elif nodeName_ == 'ImageType':
            ImageType_ = child_.text
            ImageType_ = self.gds_validate_string(ImageType_, node, 'ImageType')
            self.ImageType = ImageType_
        elif nodeName_ == 'ImageLink':
            ImageLink_ = child_.text
            ImageLink_ = self.gds_validate_string(ImageLink_, node, 'ImageLink')
            self.ImageLink = ImageLink_
# end class ShipmentStatus


class ArrayOfPinTraceHistory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PinTraceHistory=None):
        self.original_tagname_ = None
        if PinTraceHistory is None:
            self.PinTraceHistory = []
        else:
            self.PinTraceHistory = PinTraceHistory
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfPinTraceHistory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfPinTraceHistory.subclass:
            return ArrayOfPinTraceHistory.subclass(*args_, **kwargs_)
        else:
            return ArrayOfPinTraceHistory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PinTraceHistory(self): return self.PinTraceHistory
    def set_PinTraceHistory(self, PinTraceHistory): self.PinTraceHistory = PinTraceHistory
    def add_PinTraceHistory(self, value): self.PinTraceHistory.append(value)
    def insert_PinTraceHistory_at(self, index, value): self.PinTraceHistory.insert(index, value)
    def replace_PinTraceHistory_at(self, index, value): self.PinTraceHistory[index] = value
    def hasContent_(self):
        if (
            self.PinTraceHistory
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfPinTraceHistory', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfPinTraceHistory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfPinTraceHistory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfPinTraceHistory', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfPinTraceHistory'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfPinTraceHistory', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PinTraceHistory_ in self.PinTraceHistory:
            PinTraceHistory_.export(outfile, level, namespace_, name_='PinTraceHistory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PinTraceHistory':
            obj_ = PinTraceHistory.factory()
            obj_.build(child_)
            self.PinTraceHistory.append(obj_)
            obj_.original_tagname_ = 'PinTraceHistory'
# end class ArrayOfPinTraceHistory


class PinTraceHistory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProNumber=None, PIN=None, ScanDetails=None):
        self.original_tagname_ = None
        self.ProNumber = ProNumber
        self.PIN = PIN
        self.ScanDetails = ScanDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PinTraceHistory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PinTraceHistory.subclass:
            return PinTraceHistory.subclass(*args_, **kwargs_)
        else:
            return PinTraceHistory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProNumber(self): return self.ProNumber
    def set_ProNumber(self, ProNumber): self.ProNumber = ProNumber
    def get_PIN(self): return self.PIN
    def set_PIN(self, PIN): self.PIN = PIN
    def get_ScanDetails(self): return self.ScanDetails
    def set_ScanDetails(self, ScanDetails): self.ScanDetails = ScanDetails
    def hasContent_(self):
        if (
            self.ProNumber is not None or
            self.PIN is not None or
            self.ScanDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='PinTraceHistory', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PinTraceHistory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PinTraceHistory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='PinTraceHistory', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PinTraceHistory'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PinTraceHistory', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ProNumber>%s</tns:ProNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProNumber), input_name='ProNumber')), eol_))
        if self.PIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PIN>%s</tns:PIN>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PIN), input_name='PIN')), eol_))
        if self.ScanDetails is not None:
            self.ScanDetails.export(outfile, level, namespace_, name_='ScanDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProNumber':
            ProNumber_ = child_.text
            ProNumber_ = self.gds_validate_string(ProNumber_, node, 'ProNumber')
            self.ProNumber = ProNumber_
        elif nodeName_ == 'PIN':
            PIN_ = child_.text
            PIN_ = self.gds_validate_string(PIN_, node, 'PIN')
            self.PIN = PIN_
        elif nodeName_ == 'ScanDetails':
            obj_ = ScanDetail.factory()
            obj_.build(child_)
            self.ScanDetails = obj_
            obj_.original_tagname_ = 'ScanDetails'
# end class PinTraceHistory


class ScanDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HistDate=None, HistTime=None, HistCode=None, HistDesc=None, HistLocation=None):
        self.original_tagname_ = None
        self.HistDate = HistDate
        self.HistTime = HistTime
        self.HistCode = HistCode
        self.HistDesc = HistDesc
        self.HistLocation = HistLocation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScanDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScanDetail.subclass:
            return ScanDetail.subclass(*args_, **kwargs_)
        else:
            return ScanDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HistDate(self): return self.HistDate
    def set_HistDate(self, HistDate): self.HistDate = HistDate
    def get_HistTime(self): return self.HistTime
    def set_HistTime(self, HistTime): self.HistTime = HistTime
    def get_HistCode(self): return self.HistCode
    def set_HistCode(self, HistCode): self.HistCode = HistCode
    def get_HistDesc(self): return self.HistDesc
    def set_HistDesc(self, HistDesc): self.HistDesc = HistDesc
    def get_HistLocation(self): return self.HistLocation
    def set_HistLocation(self, HistLocation): self.HistLocation = HistLocation
    def hasContent_(self):
        if (
            self.HistDate is not None or
            self.HistTime is not None or
            self.HistCode is not None or
            self.HistDesc is not None or
            self.HistLocation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ScanDetail', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScanDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ScanDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ScanDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ScanDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ScanDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HistDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HistDate>%s</tns:HistDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HistDate), input_name='HistDate')), eol_))
        if self.HistTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HistTime>%s</tns:HistTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HistTime), input_name='HistTime')), eol_))
        if self.HistCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HistCode>%s</tns:HistCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HistCode), input_name='HistCode')), eol_))
        if self.HistDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HistDesc>%s</tns:HistDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HistDesc), input_name='HistDesc')), eol_))
        if self.HistLocation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HistLocation>%s</tns:HistLocation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HistLocation), input_name='HistLocation')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HistDate':
            HistDate_ = child_.text
            HistDate_ = self.gds_validate_string(HistDate_, node, 'HistDate')
            self.HistDate = HistDate_
        elif nodeName_ == 'HistTime':
            HistTime_ = child_.text
            HistTime_ = self.gds_validate_string(HistTime_, node, 'HistTime')
            self.HistTime = HistTime_
        elif nodeName_ == 'HistCode':
            HistCode_ = child_.text
            HistCode_ = self.gds_validate_string(HistCode_, node, 'HistCode')
            self.HistCode = HistCode_
        elif nodeName_ == 'HistDesc':
            HistDesc_ = child_.text
            HistDesc_ = self.gds_validate_string(HistDesc_, node, 'HistDesc')
            self.HistDesc = HistDesc_
        elif nodeName_ == 'HistLocation':
            HistLocation_ = child_.text
            HistLocation_ = self.gds_validate_string(HistLocation_, node, 'HistLocation')
            self.HistLocation = HistLocation_
# end class ScanDetail


class ResponseContext(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseReference=None):
        self.original_tagname_ = None
        self.ResponseReference = ResponseReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContext.subclass:
            return ResponseContext.subclass(*args_, **kwargs_)
        else:
            return ResponseContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseReference(self): return self.ResponseReference
    def set_ResponseReference(self, ResponseReference): self.ResponseReference = ResponseReference
    def hasContent_(self):
        if (
            self.ResponseReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ResponseReference>%s</tns:ResponseReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResponseReference), input_name='ResponseReference')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseReference':
            ResponseReference_ = child_.text
            ResponseReference_ = self.gds_validate_string(ResponseReference_, node, 'ResponseReference')
            self.ResponseReference = ResponseReference_
# end class ResponseContext


class TrackingResponse(ResponseContainer):
    subclass = None
    superclass = ResponseContainer
    def __init__(self, TrackingInformationList=None):
        self.original_tagname_ = None
        super(TrackingResponse, self).__init__()
        self.TrackingInformationList = TrackingInformationList
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingResponse.subclass:
            return TrackingResponse.subclass(*args_, **kwargs_)
        else:
            return TrackingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingInformationList(self): return self.TrackingInformationList
    def set_TrackingInformationList(self, TrackingInformationList): self.TrackingInformationList = TrackingInformationList
    def hasContent_(self):
        if (
            self.TrackingInformationList is not None or
            super(TrackingResponse, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='TrackingResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='TrackingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TrackingResponse'):
        super(TrackingResponse, self).exportAttributes(outfile, level, already_processed, namespace_, name_='TrackingResponse')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TrackingResponse', fromsubclass_=False, pretty_print=True):
        super(TrackingResponse, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingInformationList is not None:
            self.TrackingInformationList.export(outfile, level, namespace_, name_='TrackingInformationList', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(TrackingResponse, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingInformationList':
            obj_ = ArrayOfTrackingInformation.factory()
            obj_.build(child_)
            self.TrackingInformationList = obj_
            obj_.original_tagname_ = 'TrackingInformationList'
        super(TrackingResponse, self).buildChildren(child_, node, nodeName_, True)
# end class TrackingResponse


class TrackPackagesByPinRequestContainer(RequestContainer):
    subclass = None
    superclass = RequestContainer
    def __init__(self, PINs=None, SearchType=None):
        self.original_tagname_ = None
        super(TrackPackagesByPinRequestContainer, self).__init__()
        self.PINs = PINs
        self.SearchType = SearchType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackPackagesByPinRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackPackagesByPinRequestContainer.subclass:
            return TrackPackagesByPinRequestContainer.subclass(*args_, **kwargs_)
        else:
            return TrackPackagesByPinRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PINs(self): return self.PINs
    def set_PINs(self, PINs): self.PINs = PINs
    def get_SearchType(self): return self.SearchType
    def set_SearchType(self, SearchType): self.SearchType = SearchType
    def hasContent_(self):
        if (
            self.PINs is not None or
            self.SearchType is not None or
            super(TrackPackagesByPinRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='TrackPackagesByPinRequestContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackPackagesByPinRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackPackagesByPinRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='TrackPackagesByPinRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TrackPackagesByPinRequestContainer'):
        super(TrackPackagesByPinRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='TrackPackagesByPinRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TrackPackagesByPinRequestContainer', fromsubclass_=False, pretty_print=True):
        super(TrackPackagesByPinRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PINs is not None:
            self.PINs.export(outfile, level, namespace_, name_='PINs', pretty_print=pretty_print)
        if self.SearchType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SearchType>%s</tns:SearchType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SearchType), input_name='SearchType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(TrackPackagesByPinRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PINs':
            obj_ = ArrayOfPIN.factory()
            obj_.build(child_)
            self.PINs = obj_
            obj_.original_tagname_ = 'PINs'
        elif nodeName_ == 'SearchType':
            SearchType_ = child_.text
            SearchType_ = self.gds_validate_string(SearchType_, node, 'SearchType')
            self.SearchType = SearchType_
        super(TrackPackagesByPinRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class TrackPackagesByPinRequestContainer


GDSClassesMapping = {
    'Address': Address,
    'ArrayOfError': ArrayOfError,
    'ArrayOfInformationalMessage': ArrayOfInformationalMessage,
    'ArrayOfPIN': ArrayOfPIN,
    'ArrayOfPinTraceHistory': ArrayOfPinTraceHistory,
    'ArrayOfTrackingInformation': ArrayOfTrackingInformation,
    'Error': Error,
    'InformationalMessage': InformationalMessage,
    'PIN': PIN,
    'PhoneNumber': PhoneNumber,
    'PinTraceHistory': PinTraceHistory,
    'ReceiverInformation': ReceiverInformation,
    'RequestContainer': RequestContainer,
    'RequestContext': RequestContext,
    'ResponseContainer': ResponseContainer,
    'ResponseContext': ResponseContext,
    'ResponseInformation': ResponseInformation,
    'ScanDetail': ScanDetail,
    'SenderInformation': SenderInformation,
    'ShipmentDetails': ShipmentDetails,
    'ShipmentStatus': ShipmentStatus,
    'ThirdPartyInformation': ThirdPartyInformation,
    'TrackPackageByPINSearchCriteria': TrackPackagesByPinRequestContainer,
    'TrackPackagesByPinRequestContainer': TrackPackagesByPinRequestContainer,
    'TrackingInformation': TrackingInformation,
    'TrackingResponse': TrackingResponse,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackPackagesByPinRequestContainer'
        rootClass = TrackPackagesByPinRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackPackagesByPinRequestContainer'
        rootClass = TrackPackagesByPinRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackPackagesByPinRequestContainer'
        rootClass = TrackPackagesByPinRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackPackagesByPinRequestContainer'
        rootClass = TrackPackagesByPinRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from FreightTrackingService.xsd import *\n\n')
        sys.stdout.write('import FreightTrackingService.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "ArrayOfError",
    "ArrayOfInformationalMessage",
    "ArrayOfPIN",
    "ArrayOfPinTraceHistory",
    "ArrayOfTrackingInformation",
    "Error",
    "InformationalMessage",
    "PIN",
    "PhoneNumber",
    "PinTraceHistory",
    "ReceiverInformation",
    "RequestContainer",
    "RequestContext",
    "ResponseContainer",
    "ResponseContext",
    "ResponseInformation",
    "ScanDetail",
    "SenderInformation",
    "ShipmentDetails",
    "ShipmentStatus",
    "ThirdPartyInformation",
    "TrackPackagesByPinRequestContainer",
    "TrackingInformation",
    "TrackingResponse"
]
