#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 14:06:24 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/ServiceAvailabilityService.xsd.py')
#
# Command line arguments:
#   ServiceAvailabilityService.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/ServiceAvailabilityService.xsd.py" ServiceAvailabilityService.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RequestContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContainer.subclass:
            return RequestContainer.subclass(*args_, **kwargs_)
        else:
            return RequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContainer', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContainer', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RequestContainer


class ShortAddress(GeneratedsSuper):
    """ShortAddress"""
    subclass = None
    superclass = None
    def __init__(self, City=None, Province=None, Country=None, PostalCode=None):
        self.original_tagname_ = None
        self.City = City
        self.Province = Province
        self.Country = Country
        self.PostalCode = PostalCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShortAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShortAddress.subclass:
            return ShortAddress.subclass(*args_, **kwargs_)
        else:
            return ShortAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_Province(self): return self.Province
    def set_Province(self, Province): self.Province = Province
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def hasContent_(self):
        if (
            self.City is not None or
            self.Province is not None or
            self.Country is not None or
            self.PostalCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ShortAddress', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShortAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShortAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ShortAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ShortAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ShortAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:City>%s</tns:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.Province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Province>%s</tns:Province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Province), input_name='Province')), eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Country>%s</tns:Country>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PostalCode>%s</tns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'Province':
            Province_ = child_.text
            Province_ = self.gds_validate_string(Province_, node, 'Province')
            self.Province = Province_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
# end class ShortAddress


class RequestContext(GeneratedsSuper):
    """RequestContext"""
    subclass = None
    superclass = None
    def __init__(self, Version=None, Language=None, GroupID=None, RequestReference=None, UserToken=None):
        self.original_tagname_ = None
        self.Version = Version
        self.Language = Language
        self.validate_Language(self.Language)
        self.GroupID = GroupID
        self.RequestReference = RequestReference
        self.UserToken = UserToken
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContext.subclass:
            return RequestContext.subclass(*args_, **kwargs_)
        else:
            return RequestContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_GroupID(self): return self.GroupID
    def set_GroupID(self, GroupID): self.GroupID = GroupID
    def get_RequestReference(self): return self.RequestReference
    def set_RequestReference(self, RequestReference): self.RequestReference = RequestReference
    def get_UserToken(self): return self.UserToken
    def set_UserToken(self, UserToken): self.UserToken = UserToken
    def validate_Language(self, value):
        # Validate type Language, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['en', 'fr']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Language' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Version is not None or
            self.Language is not None or
            self.GroupID is not None or
            self.RequestReference is not None or
            self.UserToken is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Version>%s</tns:Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Language>%s</tns:Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Language), input_name='Language')), eol_))
        if self.GroupID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:GroupID>%s</tns:GroupID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GroupID), input_name='GroupID')), eol_))
        if self.RequestReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:RequestReference>%s</tns:RequestReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RequestReference), input_name='RequestReference')), eol_))
        if self.UserToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UserToken>%s</tns:UserToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserToken), input_name='UserToken')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
            # validate type Language
            self.validate_Language(self.Language)
        elif nodeName_ == 'GroupID':
            GroupID_ = child_.text
            GroupID_ = self.gds_validate_string(GroupID_, node, 'GroupID')
            self.GroupID = GroupID_
        elif nodeName_ == 'RequestReference':
            RequestReference_ = child_.text
            RequestReference_ = self.gds_validate_string(RequestReference_, node, 'RequestReference')
            self.RequestReference = RequestReference_
        elif nodeName_ == 'UserToken':
            UserToken_ = child_.text
            UserToken_ = self.gds_validate_string(UserToken_, node, 'UserToken')
            self.UserToken = UserToken_
# end class RequestContext


class ResponseContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseInformation=None):
        self.original_tagname_ = None
        self.ResponseInformation = ResponseInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContainer.subclass:
            return ResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseInformation(self): return self.ResponseInformation
    def set_ResponseInformation(self, ResponseInformation): self.ResponseInformation = ResponseInformation
    def hasContent_(self):
        if (
            self.ResponseInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseInformation is not None:
            self.ResponseInformation.export(outfile, level, namespace_, name_='ResponseInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseInformation':
            obj_ = ResponseInformation.factory()
            obj_.build(child_)
            self.ResponseInformation = obj_
            obj_.original_tagname_ = 'ResponseInformation'
# end class ResponseContainer


class ResponseInformation(GeneratedsSuper):
    """ResponseInformation"""
    subclass = None
    superclass = None
    def __init__(self, Errors=None, InformationalMessages=None):
        self.original_tagname_ = None
        self.Errors = Errors
        self.InformationalMessages = InformationalMessages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseInformation.subclass:
            return ResponseInformation.subclass(*args_, **kwargs_)
        else:
            return ResponseInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Errors(self): return self.Errors
    def set_Errors(self, Errors): self.Errors = Errors
    def get_InformationalMessages(self): return self.InformationalMessages
    def set_InformationalMessages(self, InformationalMessages): self.InformationalMessages = InformationalMessages
    def hasContent_(self):
        if (
            self.Errors is not None or
            self.InformationalMessages is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Errors is not None:
            self.Errors.export(outfile, level, namespace_, name_='Errors', pretty_print=pretty_print)
        if self.InformationalMessages is not None:
            self.InformationalMessages.export(outfile, level, namespace_, name_='InformationalMessages', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Errors':
            obj_ = ArrayOfError.factory()
            obj_.build(child_)
            self.Errors = obj_
            obj_.original_tagname_ = 'Errors'
        elif nodeName_ == 'InformationalMessages':
            obj_ = ArrayOfInformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessages = obj_
            obj_.original_tagname_ = 'InformationalMessages'
# end class ResponseInformation


class ArrayOfError(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Error=None):
        self.original_tagname_ = None
        if Error is None:
            self.Error = []
        else:
            self.Error = Error
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfError)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfError.subclass:
            return ArrayOfError.subclass(*args_, **kwargs_)
        else:
            return ArrayOfError(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def add_Error(self, value): self.Error.append(value)
    def insert_Error_at(self, index, value): self.Error.insert(index, value)
    def replace_Error_at(self, index, value): self.Error[index] = value
    def hasContent_(self):
        if (
            self.Error
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfError', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfError')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfError')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfError', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfError'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfError', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Error_ in self.Error:
            Error_.export(outfile, level, namespace_, name_='Error', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Error':
            obj_ = Error.factory()
            obj_.build(child_)
            self.Error.append(obj_)
            obj_.original_tagname_ = 'Error'
# end class ArrayOfError


class Error(GeneratedsSuper):
    """Error"""
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, AdditionalInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.AdditionalInformation = AdditionalInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Error.subclass:
            return Error.subclass(*args_, **kwargs_)
        else:
            return Error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_AdditionalInformation(self): return self.AdditionalInformation
    def set_AdditionalInformation(self, AdditionalInformation): self.AdditionalInformation = AdditionalInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.AdditionalInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Error', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Error'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.AdditionalInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AdditionalInformation>%s</tns:AdditionalInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalInformation), input_name='AdditionalInformation')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'AdditionalInformation':
            AdditionalInformation_ = child_.text
            AdditionalInformation_ = self.gds_validate_string(AdditionalInformation_, node, 'AdditionalInformation')
            self.AdditionalInformation = AdditionalInformation_
# end class Error


class ArrayOfInformationalMessage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InformationalMessage=None):
        self.original_tagname_ = None
        if InformationalMessage is None:
            self.InformationalMessage = []
        else:
            self.InformationalMessage = InformationalMessage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfInformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfInformationalMessage.subclass:
            return ArrayOfInformationalMessage.subclass(*args_, **kwargs_)
        else:
            return ArrayOfInformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InformationalMessage(self): return self.InformationalMessage
    def set_InformationalMessage(self, InformationalMessage): self.InformationalMessage = InformationalMessage
    def add_InformationalMessage(self, value): self.InformationalMessage.append(value)
    def insert_InformationalMessage_at(self, index, value): self.InformationalMessage.insert(index, value)
    def replace_InformationalMessage_at(self, index, value): self.InformationalMessage[index] = value
    def hasContent_(self):
        if (
            self.InformationalMessage
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfInformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfInformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfInformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfInformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformationalMessage_ in self.InformationalMessage:
            InformationalMessage_.export(outfile, level, namespace_, name_='InformationalMessage', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InformationalMessage':
            obj_ = InformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessage.append(obj_)
            obj_.original_tagname_ = 'InformationalMessage'
# end class ArrayOfInformationalMessage


class InformationalMessage(GeneratedsSuper):
    """InformationalMessage"""
    subclass = None
    superclass = None
    def __init__(self, Code=None, Message=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformationalMessage.subclass:
            return InformationalMessage.subclass(*args_, **kwargs_)
        else:
            return InformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='InformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='InformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='InformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='InformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Message>%s</tns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class InformationalMessage


class ArrayOfService(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Service=None):
        self.original_tagname_ = None
        if Service is None:
            self.Service = []
        else:
            self.Service = Service
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfService)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfService.subclass:
            return ArrayOfService.subclass(*args_, **kwargs_)
        else:
            return ArrayOfService(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def add_Service(self, value): self.Service.append(value)
    def insert_Service_at(self, index, value): self.Service.insert(index, value)
    def replace_Service_at(self, index, value): self.Service[index] = value
    def hasContent_(self):
        if (
            self.Service
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfService', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfService')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfService')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfService', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfService'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfService', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Service_ in self.Service:
            Service_.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            obj_ = Service.factory()
            obj_.build(child_)
            self.Service.append(obj_)
            obj_.original_tagname_ = 'Service'
# end class ArrayOfService


class Service(GeneratedsSuper):
    """Service"""
    subclass = None
    superclass = None
    def __init__(self, ID=None, Description=None, PackageType=None, PackageTypeDescription=None, Options=None):
        self.original_tagname_ = None
        self.ID = ID
        self.Description = Description
        self.PackageType = PackageType
        self.PackageTypeDescription = PackageTypeDescription
        self.Options = Options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Service)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Service.subclass:
            return Service.subclass(*args_, **kwargs_)
        else:
            return Service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PackageType(self): return self.PackageType
    def set_PackageType(self, PackageType): self.PackageType = PackageType
    def get_PackageTypeDescription(self): return self.PackageTypeDescription
    def set_PackageTypeDescription(self, PackageTypeDescription): self.PackageTypeDescription = PackageTypeDescription
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def hasContent_(self):
        if (
            self.ID is not None or
            self.Description is not None or
            self.PackageType is not None or
            self.PackageTypeDescription is not None or
            self.Options is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Service', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Service')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Service')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Service', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Service'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Service', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ID>%s</tns:ID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ID), input_name='ID')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PackageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PackageType>%s</tns:PackageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageType), input_name='PackageType')), eol_))
        if self.PackageTypeDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PackageTypeDescription>%s</tns:PackageTypeDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageTypeDescription), input_name='PackageTypeDescription')), eol_))
        if self.Options is not None:
            self.Options.export(outfile, level, namespace_, name_='Options', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ID':
            ID_ = child_.text
            ID_ = self.gds_validate_string(ID_, node, 'ID')
            self.ID = ID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PackageType':
            PackageType_ = child_.text
            PackageType_ = self.gds_validate_string(PackageType_, node, 'PackageType')
            self.PackageType = PackageType_
        elif nodeName_ == 'PackageTypeDescription':
            PackageTypeDescription_ = child_.text
            PackageTypeDescription_ = self.gds_validate_string(PackageTypeDescription_, node, 'PackageTypeDescription')
            self.PackageTypeDescription = PackageTypeDescription_
        elif nodeName_ == 'Options':
            obj_ = ArrayOfOption.factory()
            obj_.build(child_)
            self.Options = obj_
            obj_.original_tagname_ = 'Options'
# end class Service


class ArrayOfOption(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Option=None):
        self.original_tagname_ = None
        if Option is None:
            self.Option = []
        else:
            self.Option = Option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfOption)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfOption.subclass:
            return ArrayOfOption.subclass(*args_, **kwargs_)
        else:
            return ArrayOfOption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def add_Option(self, value): self.Option.append(value)
    def insert_Option_at(self, index, value): self.Option.insert(index, value)
    def replace_Option_at(self, index, value): self.Option[index] = value
    def hasContent_(self):
        if (
            self.Option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfOption', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfOption')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfOption')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfOption', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfOption'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfOption', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Option_ in self.Option:
            Option_.export(outfile, level, namespace_, name_='Option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            obj_ = Option.factory()
            obj_.build(child_)
            self.Option.append(obj_)
            obj_.original_tagname_ = 'Option'
# end class ArrayOfOption


class Option(GeneratedsSuper):
    """Option"""
    subclass = None
    superclass = None
    def __init__(self, ID=None, Description=None, ValueType=None, AvailableForPieces=None, PossibleValues=None, ChildServiceOptions=None):
        self.original_tagname_ = None
        self.ID = ID
        self.Description = Description
        self.ValueType = ValueType
        self.validate_ValueType(self.ValueType)
        self.AvailableForPieces = AvailableForPieces
        self.PossibleValues = PossibleValues
        self.ChildServiceOptions = ChildServiceOptions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Option)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Option.subclass:
            return Option.subclass(*args_, **kwargs_)
        else:
            return Option(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ValueType(self): return self.ValueType
    def set_ValueType(self, ValueType): self.ValueType = ValueType
    def get_AvailableForPieces(self): return self.AvailableForPieces
    def set_AvailableForPieces(self, AvailableForPieces): self.AvailableForPieces = AvailableForPieces
    def get_PossibleValues(self): return self.PossibleValues
    def set_PossibleValues(self, PossibleValues): self.PossibleValues = PossibleValues
    def get_ChildServiceOptions(self): return self.ChildServiceOptions
    def set_ChildServiceOptions(self, ChildServiceOptions): self.ChildServiceOptions = ChildServiceOptions
    def validate_ValueType(self, value):
        # Validate type ValueType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['String', 'Decimal', 'DateTime', 'Enumeration']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ValueType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ID is not None or
            self.Description is not None or
            self.ValueType is not None or
            self.AvailableForPieces is not None or
            self.PossibleValues is not None or
            self.ChildServiceOptions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Option', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Option')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Option')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Option', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Option'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Option', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ID>%s</tns:ID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ID), input_name='ID')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ValueType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ValueType>%s</tns:ValueType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ValueType), input_name='ValueType')), eol_))
        if self.AvailableForPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AvailableForPieces>%s</tns:AvailableForPieces>%s' % (self.gds_format_boolean(self.AvailableForPieces, input_name='AvailableForPieces'), eol_))
        if self.PossibleValues is not None:
            self.PossibleValues.export(outfile, level, namespace_, name_='PossibleValues', pretty_print=pretty_print)
        if self.ChildServiceOptions is not None:
            self.ChildServiceOptions.export(outfile, level, namespace_, name_='ChildServiceOptions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ID':
            ID_ = child_.text
            ID_ = self.gds_validate_string(ID_, node, 'ID')
            self.ID = ID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ValueType':
            ValueType_ = child_.text
            ValueType_ = self.gds_validate_string(ValueType_, node, 'ValueType')
            self.ValueType = ValueType_
            # validate type ValueType
            self.validate_ValueType(self.ValueType)
        elif nodeName_ == 'AvailableForPieces':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AvailableForPieces')
            self.AvailableForPieces = ival_
        elif nodeName_ == 'PossibleValues':
            obj_ = ArrayOfOptionValue.factory()
            obj_.build(child_)
            self.PossibleValues = obj_
            obj_.original_tagname_ = 'PossibleValues'
        elif nodeName_ == 'ChildServiceOptions':
            obj_ = ArrayOfOption.factory()
            obj_.build(child_)
            self.ChildServiceOptions = obj_
            obj_.original_tagname_ = 'ChildServiceOptions'
# end class Option


class ArrayOfOptionValue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OptionValue=None):
        self.original_tagname_ = None
        if OptionValue is None:
            self.OptionValue = []
        else:
            self.OptionValue = OptionValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfOptionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfOptionValue.subclass:
            return ArrayOfOptionValue.subclass(*args_, **kwargs_)
        else:
            return ArrayOfOptionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OptionValue(self): return self.OptionValue
    def set_OptionValue(self, OptionValue): self.OptionValue = OptionValue
    def add_OptionValue(self, value): self.OptionValue.append(value)
    def insert_OptionValue_at(self, index, value): self.OptionValue.insert(index, value)
    def replace_OptionValue_at(self, index, value): self.OptionValue[index] = value
    def hasContent_(self):
        if (
            self.OptionValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfOptionValue', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfOptionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfOptionValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfOptionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfOptionValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfOptionValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OptionValue_ in self.OptionValue:
            OptionValue_.export(outfile, level, namespace_, name_='OptionValue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OptionValue':
            obj_ = OptionValue.factory()
            obj_.build(child_)
            self.OptionValue.append(obj_)
            obj_.original_tagname_ = 'OptionValue'
# end class ArrayOfOptionValue


class OptionValue(GeneratedsSuper):
    """OptionValue"""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Description=None):
        self.original_tagname_ = None
        self.Value = Value
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OptionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OptionValue.subclass:
            return OptionValue.subclass(*args_, **kwargs_)
        else:
            return OptionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='OptionValue', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OptionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OptionValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='OptionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='OptionValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='OptionValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Value>%s</tns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class OptionValue


class ResponseContext(GeneratedsSuper):
    """ResponseContext"""
    subclass = None
    superclass = None
    def __init__(self, ResponseReference=None):
        self.original_tagname_ = None
        self.ResponseReference = ResponseReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContext.subclass:
            return ResponseContext.subclass(*args_, **kwargs_)
        else:
            return ResponseContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseReference(self): return self.ResponseReference
    def set_ResponseReference(self, ResponseReference): self.ResponseReference = ResponseReference
    def hasContent_(self):
        if (
            self.ResponseReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ResponseReference>%s</tns:ResponseReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResponseReference), input_name='ResponseReference')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseReference':
            ResponseReference_ = child_.text
            ResponseReference_ = self.gds_validate_string(ResponseReference_, node, 'ResponseReference')
            self.ResponseReference = ResponseReference_
# end class ResponseContext


class GetServiceRulesRequestContainer(RequestContainer):
    """GetServiceRulesRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, BillingAccountNumber=None, SenderAddress=None, ReceiverAddress=None):
        self.original_tagname_ = None
        super(GetServiceRulesRequestContainer, self).__init__()
        self.BillingAccountNumber = BillingAccountNumber
        self.SenderAddress = SenderAddress
        self.ReceiverAddress = ReceiverAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetServiceRulesRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetServiceRulesRequestContainer.subclass:
            return GetServiceRulesRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetServiceRulesRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillingAccountNumber(self): return self.BillingAccountNumber
    def set_BillingAccountNumber(self, BillingAccountNumber): self.BillingAccountNumber = BillingAccountNumber
    def get_SenderAddress(self): return self.SenderAddress
    def set_SenderAddress(self, SenderAddress): self.SenderAddress = SenderAddress
    def get_ReceiverAddress(self): return self.ReceiverAddress
    def set_ReceiverAddress(self, ReceiverAddress): self.ReceiverAddress = ReceiverAddress
    def hasContent_(self):
        if (
            self.BillingAccountNumber is not None or
            self.SenderAddress is not None or
            self.ReceiverAddress is not None or
            super(GetServiceRulesRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetServiceRulesRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetServiceRulesRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetServiceRulesRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetServiceRulesRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetServiceRulesRequestContainer'):
        super(GetServiceRulesRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetServiceRulesRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetServiceRulesRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetServiceRulesRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillingAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BillingAccountNumber>%s</tns:BillingAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillingAccountNumber), input_name='BillingAccountNumber')), eol_))
        if self.SenderAddress is not None:
            self.SenderAddress.export(outfile, level, namespace_, name_='SenderAddress', pretty_print=pretty_print)
        if self.ReceiverAddress is not None:
            self.ReceiverAddress.export(outfile, level, namespace_, name_='ReceiverAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetServiceRulesRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillingAccountNumber':
            BillingAccountNumber_ = child_.text
            BillingAccountNumber_ = self.gds_validate_string(BillingAccountNumber_, node, 'BillingAccountNumber')
            self.BillingAccountNumber = BillingAccountNumber_
        elif nodeName_ == 'SenderAddress':
            obj_ = ShortAddress.factory()
            obj_.build(child_)
            self.SenderAddress = obj_
            obj_.original_tagname_ = 'SenderAddress'
        elif nodeName_ == 'ReceiverAddress':
            obj_ = ShortAddress.factory()
            obj_.build(child_)
            self.ReceiverAddress = obj_
            obj_.original_tagname_ = 'ReceiverAddress'
        super(GetServiceRulesRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetServiceRulesRequestContainer


class GetServiceRulesResponseContainer(ResponseContainer):
    """GetServiceRulesResponse"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, ServiceRules=None, ServiceOptionRules=None, OptionRules=None):
        self.original_tagname_ = None
        super(GetServiceRulesResponseContainer, self).__init__()
        self.ServiceRules = ServiceRules
        self.ServiceOptionRules = ServiceOptionRules
        self.OptionRules = OptionRules
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetServiceRulesResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetServiceRulesResponseContainer.subclass:
            return GetServiceRulesResponseContainer.subclass(*args_, **kwargs_)
        else:
            return GetServiceRulesResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceRules(self): return self.ServiceRules
    def set_ServiceRules(self, ServiceRules): self.ServiceRules = ServiceRules
    def get_ServiceOptionRules(self): return self.ServiceOptionRules
    def set_ServiceOptionRules(self, ServiceOptionRules): self.ServiceOptionRules = ServiceOptionRules
    def get_OptionRules(self): return self.OptionRules
    def set_OptionRules(self, OptionRules): self.OptionRules = OptionRules
    def hasContent_(self):
        if (
            self.ServiceRules is not None or
            self.ServiceOptionRules is not None or
            self.OptionRules is not None or
            super(GetServiceRulesResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetServiceRulesResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetServiceRulesResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetServiceRulesResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetServiceRulesResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetServiceRulesResponseContainer'):
        super(GetServiceRulesResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetServiceRulesResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetServiceRulesResponseContainer', fromsubclass_=False, pretty_print=True):
        super(GetServiceRulesResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceRules is not None:
            self.ServiceRules.export(outfile, level, namespace_, name_='ServiceRules', pretty_print=pretty_print)
        if self.ServiceOptionRules is not None:
            self.ServiceOptionRules.export(outfile, level, namespace_, name_='ServiceOptionRules', pretty_print=pretty_print)
        if self.OptionRules is not None:
            self.OptionRules.export(outfile, level, namespace_, name_='OptionRules', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetServiceRulesResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceRules':
            obj_ = ArrayOfServiceRule.factory()
            obj_.build(child_)
            self.ServiceRules = obj_
            obj_.original_tagname_ = 'ServiceRules'
        elif nodeName_ == 'ServiceOptionRules':
            obj_ = ArrayOfServiceOptionRules.factory()
            obj_.build(child_)
            self.ServiceOptionRules = obj_
            obj_.original_tagname_ = 'ServiceOptionRules'
        elif nodeName_ == 'OptionRules':
            obj_ = ArrayOfOptionRule.factory()
            obj_.build(child_)
            self.OptionRules = obj_
            obj_.original_tagname_ = 'OptionRules'
        super(GetServiceRulesResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetServiceRulesResponseContainer


class ArrayOfServiceRule(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceRule=None):
        self.original_tagname_ = None
        if ServiceRule is None:
            self.ServiceRule = []
        else:
            self.ServiceRule = ServiceRule
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfServiceRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfServiceRule.subclass:
            return ArrayOfServiceRule.subclass(*args_, **kwargs_)
        else:
            return ArrayOfServiceRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceRule(self): return self.ServiceRule
    def set_ServiceRule(self, ServiceRule): self.ServiceRule = ServiceRule
    def add_ServiceRule(self, value): self.ServiceRule.append(value)
    def insert_ServiceRule_at(self, index, value): self.ServiceRule.insert(index, value)
    def replace_ServiceRule_at(self, index, value): self.ServiceRule[index] = value
    def hasContent_(self):
        if (
            self.ServiceRule
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfServiceRule', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfServiceRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfServiceRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfServiceRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfServiceRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfServiceRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ServiceRule_ in self.ServiceRule:
            ServiceRule_.export(outfile, level, namespace_, name_='ServiceRule', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceRule':
            obj_ = ServiceRule.factory()
            obj_.build(child_)
            self.ServiceRule.append(obj_)
            obj_.original_tagname_ = 'ServiceRule'
# end class ArrayOfServiceRule


class ServiceRule(GeneratedsSuper):
    """ServiceRules"""
    subclass = None
    superclass = None
    def __init__(self, ServiceID=None, MinimumTotalPieces=None, MaximumTotalPieces=None, MinimumTotalWeight=None, MaximumTotalWeight=None, MinimumPieceWeight=None, MaximumPieceWeight=None, MinimumPieceLength=None, MaximumPieceLength=None, MinimumPieceWidth=None, MaximumPieceWidth=None, MinimumPieceHeight=None, MaximumPieceHeight=None, MaximumSize=None, MaximumDeclaredValue=None, AndMinimumLengthFlatPackage=None, AndMaximumLengthFlatPackage=None, AndMaximumHeightFlatPackage=None, AndMinimumSizeLargePackage=None, MinimumSizeLargePackage=None, OrMinimumWeightOverSized=None, OrMinimumLengthOverSized=None, AndMinimumWeightResidentialAreaHeavyWeight=None, AndLowerDensityDeliveryResidentialAreaHeavyWeight=None, AndHoldForPickupResidentialAreaHeavyWeight=None):
        self.original_tagname_ = None
        self.ServiceID = ServiceID
        self.MinimumTotalPieces = MinimumTotalPieces
        self.MaximumTotalPieces = MaximumTotalPieces
        self.MinimumTotalWeight = MinimumTotalWeight
        self.MaximumTotalWeight = MaximumTotalWeight
        self.MinimumPieceWeight = MinimumPieceWeight
        self.MaximumPieceWeight = MaximumPieceWeight
        self.MinimumPieceLength = MinimumPieceLength
        self.MaximumPieceLength = MaximumPieceLength
        self.MinimumPieceWidth = MinimumPieceWidth
        self.MaximumPieceWidth = MaximumPieceWidth
        self.MinimumPieceHeight = MinimumPieceHeight
        self.MaximumPieceHeight = MaximumPieceHeight
        self.MaximumSize = MaximumSize
        self.MaximumDeclaredValue = MaximumDeclaredValue
        self.AndMinimumLengthFlatPackage = AndMinimumLengthFlatPackage
        self.AndMaximumLengthFlatPackage = AndMaximumLengthFlatPackage
        self.AndMaximumHeightFlatPackage = AndMaximumHeightFlatPackage
        self.AndMinimumSizeLargePackage = AndMinimumSizeLargePackage
        self.MinimumSizeLargePackage = MinimumSizeLargePackage
        self.OrMinimumWeightOverSized = OrMinimumWeightOverSized
        self.OrMinimumLengthOverSized = OrMinimumLengthOverSized
        self.AndMinimumWeightResidentialAreaHeavyWeight = AndMinimumWeightResidentialAreaHeavyWeight
        self.AndLowerDensityDeliveryResidentialAreaHeavyWeight = AndLowerDensityDeliveryResidentialAreaHeavyWeight
        self.AndHoldForPickupResidentialAreaHeavyWeight = AndHoldForPickupResidentialAreaHeavyWeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceRule.subclass:
            return ServiceRule.subclass(*args_, **kwargs_)
        else:
            return ServiceRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceID(self): return self.ServiceID
    def set_ServiceID(self, ServiceID): self.ServiceID = ServiceID
    def get_MinimumTotalPieces(self): return self.MinimumTotalPieces
    def set_MinimumTotalPieces(self, MinimumTotalPieces): self.MinimumTotalPieces = MinimumTotalPieces
    def get_MaximumTotalPieces(self): return self.MaximumTotalPieces
    def set_MaximumTotalPieces(self, MaximumTotalPieces): self.MaximumTotalPieces = MaximumTotalPieces
    def get_MinimumTotalWeight(self): return self.MinimumTotalWeight
    def set_MinimumTotalWeight(self, MinimumTotalWeight): self.MinimumTotalWeight = MinimumTotalWeight
    def get_MaximumTotalWeight(self): return self.MaximumTotalWeight
    def set_MaximumTotalWeight(self, MaximumTotalWeight): self.MaximumTotalWeight = MaximumTotalWeight
    def get_MinimumPieceWeight(self): return self.MinimumPieceWeight
    def set_MinimumPieceWeight(self, MinimumPieceWeight): self.MinimumPieceWeight = MinimumPieceWeight
    def get_MaximumPieceWeight(self): return self.MaximumPieceWeight
    def set_MaximumPieceWeight(self, MaximumPieceWeight): self.MaximumPieceWeight = MaximumPieceWeight
    def get_MinimumPieceLength(self): return self.MinimumPieceLength
    def set_MinimumPieceLength(self, MinimumPieceLength): self.MinimumPieceLength = MinimumPieceLength
    def get_MaximumPieceLength(self): return self.MaximumPieceLength
    def set_MaximumPieceLength(self, MaximumPieceLength): self.MaximumPieceLength = MaximumPieceLength
    def get_MinimumPieceWidth(self): return self.MinimumPieceWidth
    def set_MinimumPieceWidth(self, MinimumPieceWidth): self.MinimumPieceWidth = MinimumPieceWidth
    def get_MaximumPieceWidth(self): return self.MaximumPieceWidth
    def set_MaximumPieceWidth(self, MaximumPieceWidth): self.MaximumPieceWidth = MaximumPieceWidth
    def get_MinimumPieceHeight(self): return self.MinimumPieceHeight
    def set_MinimumPieceHeight(self, MinimumPieceHeight): self.MinimumPieceHeight = MinimumPieceHeight
    def get_MaximumPieceHeight(self): return self.MaximumPieceHeight
    def set_MaximumPieceHeight(self, MaximumPieceHeight): self.MaximumPieceHeight = MaximumPieceHeight
    def get_MaximumSize(self): return self.MaximumSize
    def set_MaximumSize(self, MaximumSize): self.MaximumSize = MaximumSize
    def get_MaximumDeclaredValue(self): return self.MaximumDeclaredValue
    def set_MaximumDeclaredValue(self, MaximumDeclaredValue): self.MaximumDeclaredValue = MaximumDeclaredValue
    def get_AndMinimumLengthFlatPackage(self): return self.AndMinimumLengthFlatPackage
    def set_AndMinimumLengthFlatPackage(self, AndMinimumLengthFlatPackage): self.AndMinimumLengthFlatPackage = AndMinimumLengthFlatPackage
    def get_AndMaximumLengthFlatPackage(self): return self.AndMaximumLengthFlatPackage
    def set_AndMaximumLengthFlatPackage(self, AndMaximumLengthFlatPackage): self.AndMaximumLengthFlatPackage = AndMaximumLengthFlatPackage
    def get_AndMaximumHeightFlatPackage(self): return self.AndMaximumHeightFlatPackage
    def set_AndMaximumHeightFlatPackage(self, AndMaximumHeightFlatPackage): self.AndMaximumHeightFlatPackage = AndMaximumHeightFlatPackage
    def get_AndMinimumSizeLargePackage(self): return self.AndMinimumSizeLargePackage
    def set_AndMinimumSizeLargePackage(self, AndMinimumSizeLargePackage): self.AndMinimumSizeLargePackage = AndMinimumSizeLargePackage
    def get_MinimumSizeLargePackage(self): return self.MinimumSizeLargePackage
    def set_MinimumSizeLargePackage(self, MinimumSizeLargePackage): self.MinimumSizeLargePackage = MinimumSizeLargePackage
    def get_OrMinimumWeightOverSized(self): return self.OrMinimumWeightOverSized
    def set_OrMinimumWeightOverSized(self, OrMinimumWeightOverSized): self.OrMinimumWeightOverSized = OrMinimumWeightOverSized
    def get_OrMinimumLengthOverSized(self): return self.OrMinimumLengthOverSized
    def set_OrMinimumLengthOverSized(self, OrMinimumLengthOverSized): self.OrMinimumLengthOverSized = OrMinimumLengthOverSized
    def get_AndMinimumWeightResidentialAreaHeavyWeight(self): return self.AndMinimumWeightResidentialAreaHeavyWeight
    def set_AndMinimumWeightResidentialAreaHeavyWeight(self, AndMinimumWeightResidentialAreaHeavyWeight): self.AndMinimumWeightResidentialAreaHeavyWeight = AndMinimumWeightResidentialAreaHeavyWeight
    def get_AndLowerDensityDeliveryResidentialAreaHeavyWeight(self): return self.AndLowerDensityDeliveryResidentialAreaHeavyWeight
    def set_AndLowerDensityDeliveryResidentialAreaHeavyWeight(self, AndLowerDensityDeliveryResidentialAreaHeavyWeight): self.AndLowerDensityDeliveryResidentialAreaHeavyWeight = AndLowerDensityDeliveryResidentialAreaHeavyWeight
    def get_AndHoldForPickupResidentialAreaHeavyWeight(self): return self.AndHoldForPickupResidentialAreaHeavyWeight
    def set_AndHoldForPickupResidentialAreaHeavyWeight(self, AndHoldForPickupResidentialAreaHeavyWeight): self.AndHoldForPickupResidentialAreaHeavyWeight = AndHoldForPickupResidentialAreaHeavyWeight
    def hasContent_(self):
        if (
            self.ServiceID is not None or
            self.MinimumTotalPieces is not None or
            self.MaximumTotalPieces is not None or
            self.MinimumTotalWeight is not None or
            self.MaximumTotalWeight is not None or
            self.MinimumPieceWeight is not None or
            self.MaximumPieceWeight is not None or
            self.MinimumPieceLength is not None or
            self.MaximumPieceLength is not None or
            self.MinimumPieceWidth is not None or
            self.MaximumPieceWidth is not None or
            self.MinimumPieceHeight is not None or
            self.MaximumPieceHeight is not None or
            self.MaximumSize is not None or
            self.MaximumDeclaredValue is not None or
            self.AndMinimumLengthFlatPackage is not None or
            self.AndMaximumLengthFlatPackage is not None or
            self.AndMaximumHeightFlatPackage is not None or
            self.AndMinimumSizeLargePackage is not None or
            self.MinimumSizeLargePackage is not None or
            self.OrMinimumWeightOverSized is not None or
            self.OrMinimumLengthOverSized is not None or
            self.AndMinimumWeightResidentialAreaHeavyWeight is not None or
            self.AndLowerDensityDeliveryResidentialAreaHeavyWeight is not None or
            self.AndHoldForPickupResidentialAreaHeavyWeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ServiceRule', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ServiceRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ServiceRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ServiceRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ServiceID>%s</tns:ServiceID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceID), input_name='ServiceID')), eol_))
        if self.MinimumTotalPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:MinimumTotalPieces>%s</tns:MinimumTotalPieces>%s' % (self.gds_format_integer(self.MinimumTotalPieces, input_name='MinimumTotalPieces'), eol_))
        if self.MaximumTotalPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:MaximumTotalPieces>%s</tns:MaximumTotalPieces>%s' % (self.gds_format_integer(self.MaximumTotalPieces, input_name='MaximumTotalPieces'), eol_))
        if self.MinimumTotalWeight is not None:
            self.MinimumTotalWeight.export(outfile, level, namespace_, name_='MinimumTotalWeight', pretty_print=pretty_print)
        if self.MaximumTotalWeight is not None:
            self.MaximumTotalWeight.export(outfile, level, namespace_, name_='MaximumTotalWeight', pretty_print=pretty_print)
        if self.MinimumPieceWeight is not None:
            self.MinimumPieceWeight.export(outfile, level, namespace_, name_='MinimumPieceWeight', pretty_print=pretty_print)
        if self.MaximumPieceWeight is not None:
            self.MaximumPieceWeight.export(outfile, level, namespace_, name_='MaximumPieceWeight', pretty_print=pretty_print)
        if self.MinimumPieceLength is not None:
            self.MinimumPieceLength.export(outfile, level, namespace_, name_='MinimumPieceLength', pretty_print=pretty_print)
        if self.MaximumPieceLength is not None:
            self.MaximumPieceLength.export(outfile, level, namespace_, name_='MaximumPieceLength', pretty_print=pretty_print)
        if self.MinimumPieceWidth is not None:
            self.MinimumPieceWidth.export(outfile, level, namespace_, name_='MinimumPieceWidth', pretty_print=pretty_print)
        if self.MaximumPieceWidth is not None:
            self.MaximumPieceWidth.export(outfile, level, namespace_, name_='MaximumPieceWidth', pretty_print=pretty_print)
        if self.MinimumPieceHeight is not None:
            self.MinimumPieceHeight.export(outfile, level, namespace_, name_='MinimumPieceHeight', pretty_print=pretty_print)
        if self.MaximumPieceHeight is not None:
            self.MaximumPieceHeight.export(outfile, level, namespace_, name_='MaximumPieceHeight', pretty_print=pretty_print)
        if self.MaximumSize is not None:
            self.MaximumSize.export(outfile, level, namespace_, name_='MaximumSize', pretty_print=pretty_print)
        if self.MaximumDeclaredValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:MaximumDeclaredValue>%s</tns:MaximumDeclaredValue>%s' % (self.gds_format_float(self.MaximumDeclaredValue, input_name='MaximumDeclaredValue'), eol_))
        if self.AndMinimumLengthFlatPackage is not None:
            self.AndMinimumLengthFlatPackage.export(outfile, level, namespace_, name_='AndMinimumLengthFlatPackage', pretty_print=pretty_print)
        if self.AndMaximumLengthFlatPackage is not None:
            self.AndMaximumLengthFlatPackage.export(outfile, level, namespace_, name_='AndMaximumLengthFlatPackage', pretty_print=pretty_print)
        if self.AndMaximumHeightFlatPackage is not None:
            self.AndMaximumHeightFlatPackage.export(outfile, level, namespace_, name_='AndMaximumHeightFlatPackage', pretty_print=pretty_print)
        if self.AndMinimumSizeLargePackage is not None:
            self.AndMinimumSizeLargePackage.export(outfile, level, namespace_, name_='AndMinimumSizeLargePackage', pretty_print=pretty_print)
        if self.MinimumSizeLargePackage is not None:
            self.MinimumSizeLargePackage.export(outfile, level, namespace_, name_='MinimumSizeLargePackage', pretty_print=pretty_print)
        if self.OrMinimumWeightOverSized is not None:
            self.OrMinimumWeightOverSized.export(outfile, level, namespace_, name_='OrMinimumWeightOverSized', pretty_print=pretty_print)
        if self.OrMinimumLengthOverSized is not None:
            self.OrMinimumLengthOverSized.export(outfile, level, namespace_, name_='OrMinimumLengthOverSized', pretty_print=pretty_print)
        if self.AndMinimumWeightResidentialAreaHeavyWeight is not None:
            self.AndMinimumWeightResidentialAreaHeavyWeight.export(outfile, level, namespace_, name_='AndMinimumWeightResidentialAreaHeavyWeight', pretty_print=pretty_print)
        if self.AndLowerDensityDeliveryResidentialAreaHeavyWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AndLowerDensityDeliveryResidentialAreaHeavyWeight>%s</tns:AndLowerDensityDeliveryResidentialAreaHeavyWeight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AndLowerDensityDeliveryResidentialAreaHeavyWeight), input_name='AndLowerDensityDeliveryResidentialAreaHeavyWeight')), eol_))
        if self.AndHoldForPickupResidentialAreaHeavyWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AndHoldForPickupResidentialAreaHeavyWeight>%s</tns:AndHoldForPickupResidentialAreaHeavyWeight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AndHoldForPickupResidentialAreaHeavyWeight), input_name='AndHoldForPickupResidentialAreaHeavyWeight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceID':
            ServiceID_ = child_.text
            ServiceID_ = self.gds_validate_string(ServiceID_, node, 'ServiceID')
            self.ServiceID = ServiceID_
        elif nodeName_ == 'MinimumTotalPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MinimumTotalPieces')
            self.MinimumTotalPieces = ival_
        elif nodeName_ == 'MaximumTotalPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaximumTotalPieces')
            self.MaximumTotalPieces = ival_
        elif nodeName_ == 'MinimumTotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.MinimumTotalWeight = obj_
            obj_.original_tagname_ = 'MinimumTotalWeight'
        elif nodeName_ == 'MaximumTotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.MaximumTotalWeight = obj_
            obj_.original_tagname_ = 'MaximumTotalWeight'
        elif nodeName_ == 'MinimumPieceWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.MinimumPieceWeight = obj_
            obj_.original_tagname_ = 'MinimumPieceWeight'
        elif nodeName_ == 'MaximumPieceWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.MaximumPieceWeight = obj_
            obj_.original_tagname_ = 'MaximumPieceWeight'
        elif nodeName_ == 'MinimumPieceLength':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MinimumPieceLength = obj_
            obj_.original_tagname_ = 'MinimumPieceLength'
        elif nodeName_ == 'MaximumPieceLength':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MaximumPieceLength = obj_
            obj_.original_tagname_ = 'MaximumPieceLength'
        elif nodeName_ == 'MinimumPieceWidth':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MinimumPieceWidth = obj_
            obj_.original_tagname_ = 'MinimumPieceWidth'
        elif nodeName_ == 'MaximumPieceWidth':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MaximumPieceWidth = obj_
            obj_.original_tagname_ = 'MaximumPieceWidth'
        elif nodeName_ == 'MinimumPieceHeight':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MinimumPieceHeight = obj_
            obj_.original_tagname_ = 'MinimumPieceHeight'
        elif nodeName_ == 'MaximumPieceHeight':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MaximumPieceHeight = obj_
            obj_.original_tagname_ = 'MaximumPieceHeight'
        elif nodeName_ == 'MaximumSize':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MaximumSize = obj_
            obj_.original_tagname_ = 'MaximumSize'
        elif nodeName_ == 'MaximumDeclaredValue':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MaximumDeclaredValue')
            self.MaximumDeclaredValue = fval_
        elif nodeName_ == 'AndMinimumLengthFlatPackage':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.AndMinimumLengthFlatPackage = obj_
            obj_.original_tagname_ = 'AndMinimumLengthFlatPackage'
        elif nodeName_ == 'AndMaximumLengthFlatPackage':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.AndMaximumLengthFlatPackage = obj_
            obj_.original_tagname_ = 'AndMaximumLengthFlatPackage'
        elif nodeName_ == 'AndMaximumHeightFlatPackage':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.AndMaximumHeightFlatPackage = obj_
            obj_.original_tagname_ = 'AndMaximumHeightFlatPackage'
        elif nodeName_ == 'AndMinimumSizeLargePackage':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.AndMinimumSizeLargePackage = obj_
            obj_.original_tagname_ = 'AndMinimumSizeLargePackage'
        elif nodeName_ == 'MinimumSizeLargePackage':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.MinimumSizeLargePackage = obj_
            obj_.original_tagname_ = 'MinimumSizeLargePackage'
        elif nodeName_ == 'OrMinimumWeightOverSized':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.OrMinimumWeightOverSized = obj_
            obj_.original_tagname_ = 'OrMinimumWeightOverSized'
        elif nodeName_ == 'OrMinimumLengthOverSized':
            obj_ = Dimension.factory()
            obj_.build(child_)
            self.OrMinimumLengthOverSized = obj_
            obj_.original_tagname_ = 'OrMinimumLengthOverSized'
        elif nodeName_ == 'AndMinimumWeightResidentialAreaHeavyWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.AndMinimumWeightResidentialAreaHeavyWeight = obj_
            obj_.original_tagname_ = 'AndMinimumWeightResidentialAreaHeavyWeight'
        elif nodeName_ == 'AndLowerDensityDeliveryResidentialAreaHeavyWeight':
            AndLowerDensityDeliveryResidentialAreaHeavyWeight_ = child_.text
            AndLowerDensityDeliveryResidentialAreaHeavyWeight_ = self.gds_validate_string(AndLowerDensityDeliveryResidentialAreaHeavyWeight_, node, 'AndLowerDensityDeliveryResidentialAreaHeavyWeight')
            self.AndLowerDensityDeliveryResidentialAreaHeavyWeight = AndLowerDensityDeliveryResidentialAreaHeavyWeight_
        elif nodeName_ == 'AndHoldForPickupResidentialAreaHeavyWeight':
            AndHoldForPickupResidentialAreaHeavyWeight_ = child_.text
            AndHoldForPickupResidentialAreaHeavyWeight_ = self.gds_validate_string(AndHoldForPickupResidentialAreaHeavyWeight_, node, 'AndHoldForPickupResidentialAreaHeavyWeight')
            self.AndHoldForPickupResidentialAreaHeavyWeight = AndHoldForPickupResidentialAreaHeavyWeight_
# end class ServiceRule


class Weight(GeneratedsSuper):
    """Weight"""
    subclass = None
    superclass = None
    def __init__(self, Value=None, WeightUnit=None):
        self.original_tagname_ = None
        self.Value = Value
        self.WeightUnit = WeightUnit
        self.validate_WeightUnit(self.WeightUnit)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_WeightUnit(self): return self.WeightUnit
    def set_WeightUnit(self, WeightUnit): self.WeightUnit = WeightUnit
    def validate_WeightUnit(self, value):
        # Validate type WeightUnit, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['lb', 'kg']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on WeightUnit' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.WeightUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Weight', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Value>%s</tns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.WeightUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:WeightUnit>%s</tns:WeightUnit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WeightUnit), input_name='WeightUnit')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'WeightUnit':
            WeightUnit_ = child_.text
            WeightUnit_ = self.gds_validate_string(WeightUnit_, node, 'WeightUnit')
            self.WeightUnit = WeightUnit_
            # validate type WeightUnit
            self.validate_WeightUnit(self.WeightUnit)
# end class Weight


class Dimension(GeneratedsSuper):
    """Dimension"""
    subclass = None
    superclass = None
    def __init__(self, Value=None, DimensionUnit=None):
        self.original_tagname_ = None
        self.Value = Value
        self.DimensionUnit = DimensionUnit
        self.validate_DimensionUnit(self.DimensionUnit)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimension)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimension.subclass:
            return Dimension.subclass(*args_, **kwargs_)
        else:
            return Dimension(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_DimensionUnit(self): return self.DimensionUnit
    def set_DimensionUnit(self, DimensionUnit): self.DimensionUnit = DimensionUnit
    def validate_DimensionUnit(self, value):
        # Validate type DimensionUnit, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['in', 'cm']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DimensionUnit' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.DimensionUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Dimension', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimension')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dimension')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Dimension', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Dimension'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Dimension', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Value>%s</tns:Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.DimensionUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DimensionUnit>%s</tns:DimensionUnit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DimensionUnit), input_name='DimensionUnit')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'DimensionUnit':
            DimensionUnit_ = child_.text
            DimensionUnit_ = self.gds_validate_string(DimensionUnit_, node, 'DimensionUnit')
            self.DimensionUnit = DimensionUnit_
            # validate type DimensionUnit
            self.validate_DimensionUnit(self.DimensionUnit)
# end class Dimension


class ArrayOfServiceOptionRules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceOptionRules=None):
        self.original_tagname_ = None
        if ServiceOptionRules is None:
            self.ServiceOptionRules = []
        else:
            self.ServiceOptionRules = ServiceOptionRules
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfServiceOptionRules)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfServiceOptionRules.subclass:
            return ArrayOfServiceOptionRules.subclass(*args_, **kwargs_)
        else:
            return ArrayOfServiceOptionRules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceOptionRules(self): return self.ServiceOptionRules
    def set_ServiceOptionRules(self, ServiceOptionRules): self.ServiceOptionRules = ServiceOptionRules
    def add_ServiceOptionRules(self, value): self.ServiceOptionRules.append(value)
    def insert_ServiceOptionRules_at(self, index, value): self.ServiceOptionRules.insert(index, value)
    def replace_ServiceOptionRules_at(self, index, value): self.ServiceOptionRules[index] = value
    def hasContent_(self):
        if (
            self.ServiceOptionRules
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfServiceOptionRules', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfServiceOptionRules')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfServiceOptionRules')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfServiceOptionRules', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfServiceOptionRules'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfServiceOptionRules', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ServiceOptionRules_ in self.ServiceOptionRules:
            ServiceOptionRules_.export(outfile, level, namespace_, name_='ServiceOptionRules', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceOptionRules':
            obj_ = ServiceOptionRules.factory()
            obj_.build(child_)
            self.ServiceOptionRules.append(obj_)
            obj_.original_tagname_ = 'ServiceOptionRules'
# end class ArrayOfServiceOptionRules


class ServiceOptionRules(GeneratedsSuper):
    """ServiceOptionRules"""
    subclass = None
    superclass = None
    def __init__(self, ServiceID=None, Exclusions=None, Inclusions=None):
        self.original_tagname_ = None
        self.ServiceID = ServiceID
        self.Exclusions = Exclusions
        self.Inclusions = Inclusions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceOptionRules)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceOptionRules.subclass:
            return ServiceOptionRules.subclass(*args_, **kwargs_)
        else:
            return ServiceOptionRules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceID(self): return self.ServiceID
    def set_ServiceID(self, ServiceID): self.ServiceID = ServiceID
    def get_Exclusions(self): return self.Exclusions
    def set_Exclusions(self, Exclusions): self.Exclusions = Exclusions
    def get_Inclusions(self): return self.Inclusions
    def set_Inclusions(self, Inclusions): self.Inclusions = Inclusions
    def hasContent_(self):
        if (
            self.ServiceID is not None or
            self.Exclusions is not None or
            self.Inclusions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ServiceOptionRules', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceOptionRules')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceOptionRules')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ServiceOptionRules', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ServiceOptionRules'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ServiceOptionRules', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ServiceID>%s</tns:ServiceID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceID), input_name='ServiceID')), eol_))
        if self.Exclusions is not None:
            self.Exclusions.export(outfile, level, namespace_, name_='Exclusions', pretty_print=pretty_print)
        if self.Inclusions is not None:
            self.Inclusions.export(outfile, level, namespace_, name_='Inclusions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceID':
            ServiceID_ = child_.text
            ServiceID_ = self.gds_validate_string(ServiceID_, node, 'ServiceID')
            self.ServiceID = ServiceID_
        elif nodeName_ == 'Exclusions':
            obj_ = ArrayOfOptionIDValuePair.factory()
            obj_.build(child_)
            self.Exclusions = obj_
            obj_.original_tagname_ = 'Exclusions'
        elif nodeName_ == 'Inclusions':
            obj_ = ArrayOfOptionIDValuePair.factory()
            obj_.build(child_)
            self.Inclusions = obj_
            obj_.original_tagname_ = 'Inclusions'
# end class ServiceOptionRules


class ArrayOfOptionIDValuePair(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OptionIDValuePair=None):
        self.original_tagname_ = None
        if OptionIDValuePair is None:
            self.OptionIDValuePair = []
        else:
            self.OptionIDValuePair = OptionIDValuePair
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfOptionIDValuePair)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfOptionIDValuePair.subclass:
            return ArrayOfOptionIDValuePair.subclass(*args_, **kwargs_)
        else:
            return ArrayOfOptionIDValuePair(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OptionIDValuePair(self): return self.OptionIDValuePair
    def set_OptionIDValuePair(self, OptionIDValuePair): self.OptionIDValuePair = OptionIDValuePair
    def add_OptionIDValuePair(self, value): self.OptionIDValuePair.append(value)
    def insert_OptionIDValuePair_at(self, index, value): self.OptionIDValuePair.insert(index, value)
    def replace_OptionIDValuePair_at(self, index, value): self.OptionIDValuePair[index] = value
    def hasContent_(self):
        if (
            self.OptionIDValuePair
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfOptionIDValuePair', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfOptionIDValuePair')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfOptionIDValuePair')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfOptionIDValuePair', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfOptionIDValuePair'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfOptionIDValuePair', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OptionIDValuePair_ in self.OptionIDValuePair:
            OptionIDValuePair_.export(outfile, level, namespace_, name_='OptionIDValuePair', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OptionIDValuePair':
            obj_ = OptionIDValuePair.factory()
            obj_.build(child_)
            self.OptionIDValuePair.append(obj_)
            obj_.original_tagname_ = 'OptionIDValuePair'
# end class ArrayOfOptionIDValuePair


class OptionIDValuePair(GeneratedsSuper):
    """OptionIDValuePair"""
    subclass = None
    superclass = None
    def __init__(self, ID=None, Value=None):
        self.original_tagname_ = None
        self.ID = ID
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OptionIDValuePair)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OptionIDValuePair.subclass:
            return OptionIDValuePair.subclass(*args_, **kwargs_)
        else:
            return OptionIDValuePair(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.ID is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='OptionIDValuePair', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OptionIDValuePair')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OptionIDValuePair')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='OptionIDValuePair', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='OptionIDValuePair'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='OptionIDValuePair', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ID>%s</tns:ID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ID), input_name='ID')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Value>%s</tns:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ID':
            ID_ = child_.text
            ID_ = self.gds_validate_string(ID_, node, 'ID')
            self.ID = ID_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class OptionIDValuePair


class ArrayOfOptionRule(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OptionRule=None):
        self.original_tagname_ = None
        if OptionRule is None:
            self.OptionRule = []
        else:
            self.OptionRule = OptionRule
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfOptionRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfOptionRule.subclass:
            return ArrayOfOptionRule.subclass(*args_, **kwargs_)
        else:
            return ArrayOfOptionRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OptionRule(self): return self.OptionRule
    def set_OptionRule(self, OptionRule): self.OptionRule = OptionRule
    def add_OptionRule(self, value): self.OptionRule.append(value)
    def insert_OptionRule_at(self, index, value): self.OptionRule.insert(index, value)
    def replace_OptionRule_at(self, index, value): self.OptionRule[index] = value
    def hasContent_(self):
        if (
            self.OptionRule
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfOptionRule', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfOptionRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfOptionRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfOptionRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfOptionRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfOptionRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OptionRule_ in self.OptionRule:
            OptionRule_.export(outfile, level, namespace_, name_='OptionRule', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OptionRule':
            obj_ = OptionRule.factory()
            obj_.build(child_)
            self.OptionRule.append(obj_)
            obj_.original_tagname_ = 'OptionRule'
# end class ArrayOfOptionRule


class OptionRule(GeneratedsSuper):
    """OptionRule"""
    subclass = None
    superclass = None
    def __init__(self, OptionIDValuePair=None, Exclusions=None, Inclusions=None):
        self.original_tagname_ = None
        self.OptionIDValuePair = OptionIDValuePair
        self.Exclusions = Exclusions
        self.Inclusions = Inclusions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OptionRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OptionRule.subclass:
            return OptionRule.subclass(*args_, **kwargs_)
        else:
            return OptionRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OptionIDValuePair(self): return self.OptionIDValuePair
    def set_OptionIDValuePair(self, OptionIDValuePair): self.OptionIDValuePair = OptionIDValuePair
    def get_Exclusions(self): return self.Exclusions
    def set_Exclusions(self, Exclusions): self.Exclusions = Exclusions
    def get_Inclusions(self): return self.Inclusions
    def set_Inclusions(self, Inclusions): self.Inclusions = Inclusions
    def hasContent_(self):
        if (
            self.OptionIDValuePair is not None or
            self.Exclusions is not None or
            self.Inclusions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='OptionRule', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OptionRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OptionRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='OptionRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='OptionRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='OptionRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OptionIDValuePair is not None:
            self.OptionIDValuePair.export(outfile, level, namespace_, name_='OptionIDValuePair', pretty_print=pretty_print)
        if self.Exclusions is not None:
            self.Exclusions.export(outfile, level, namespace_, name_='Exclusions', pretty_print=pretty_print)
        if self.Inclusions is not None:
            self.Inclusions.export(outfile, level, namespace_, name_='Inclusions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OptionIDValuePair':
            obj_ = OptionIDValuePair.factory()
            obj_.build(child_)
            self.OptionIDValuePair = obj_
            obj_.original_tagname_ = 'OptionIDValuePair'
        elif nodeName_ == 'Exclusions':
            obj_ = ArrayOfOptionIDValuePair.factory()
            obj_.build(child_)
            self.Exclusions = obj_
            obj_.original_tagname_ = 'Exclusions'
        elif nodeName_ == 'Inclusions':
            obj_ = ArrayOfOptionIDValuePair.factory()
            obj_.build(child_)
            self.Inclusions = obj_
            obj_.original_tagname_ = 'Inclusions'
# end class OptionRule


class ValidateCityPostalCodeZipRequestContainer(RequestContainer):
    """ValidateCityPostalCodeZipRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, Addresses=None):
        self.original_tagname_ = None
        super(ValidateCityPostalCodeZipRequestContainer, self).__init__()
        self.Addresses = Addresses
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidateCityPostalCodeZipRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidateCityPostalCodeZipRequestContainer.subclass:
            return ValidateCityPostalCodeZipRequestContainer.subclass(*args_, **kwargs_)
        else:
            return ValidateCityPostalCodeZipRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addresses(self): return self.Addresses
    def set_Addresses(self, Addresses): self.Addresses = Addresses
    def hasContent_(self):
        if (
            self.Addresses is not None or
            super(ValidateCityPostalCodeZipRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ValidateCityPostalCodeZipRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidateCityPostalCodeZipRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValidateCityPostalCodeZipRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ValidateCityPostalCodeZipRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ValidateCityPostalCodeZipRequestContainer'):
        super(ValidateCityPostalCodeZipRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ValidateCityPostalCodeZipRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ValidateCityPostalCodeZipRequestContainer', fromsubclass_=False, pretty_print=True):
        super(ValidateCityPostalCodeZipRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addresses is not None:
            self.Addresses.export(outfile, level, namespace_, name_='Addresses', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ValidateCityPostalCodeZipRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addresses':
            obj_ = ArrayOfShortAddress.factory()
            obj_.build(child_)
            self.Addresses = obj_
            obj_.original_tagname_ = 'Addresses'
        super(ValidateCityPostalCodeZipRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class ValidateCityPostalCodeZipRequestContainer


class ArrayOfShortAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShortAddress=None):
        self.original_tagname_ = None
        if ShortAddress is None:
            self.ShortAddress = []
        else:
            self.ShortAddress = ShortAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfShortAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfShortAddress.subclass:
            return ArrayOfShortAddress.subclass(*args_, **kwargs_)
        else:
            return ArrayOfShortAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShortAddress(self): return self.ShortAddress
    def set_ShortAddress(self, ShortAddress): self.ShortAddress = ShortAddress
    def add_ShortAddress(self, value): self.ShortAddress.append(value)
    def insert_ShortAddress_at(self, index, value): self.ShortAddress.insert(index, value)
    def replace_ShortAddress_at(self, index, value): self.ShortAddress[index] = value
    def hasContent_(self):
        if (
            self.ShortAddress
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfShortAddress', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfShortAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfShortAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfShortAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfShortAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfShortAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShortAddress_ in self.ShortAddress:
            ShortAddress_.export(outfile, level, namespace_, name_='ShortAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShortAddress':
            obj_ = ShortAddress.factory()
            obj_.build(child_)
            self.ShortAddress.append(obj_)
            obj_.original_tagname_ = 'ShortAddress'
# end class ArrayOfShortAddress


class ValidateCityPostalCodeZipResponseContainer(ResponseContainer):
    """ValidateCityPostalCodeZipResponse"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, SuggestedAddresses=None):
        self.original_tagname_ = None
        super(ValidateCityPostalCodeZipResponseContainer, self).__init__()
        self.SuggestedAddresses = SuggestedAddresses
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidateCityPostalCodeZipResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidateCityPostalCodeZipResponseContainer.subclass:
            return ValidateCityPostalCodeZipResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ValidateCityPostalCodeZipResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SuggestedAddresses(self): return self.SuggestedAddresses
    def set_SuggestedAddresses(self, SuggestedAddresses): self.SuggestedAddresses = SuggestedAddresses
    def hasContent_(self):
        if (
            self.SuggestedAddresses is not None or
            super(ValidateCityPostalCodeZipResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ValidateCityPostalCodeZipResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidateCityPostalCodeZipResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValidateCityPostalCodeZipResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ValidateCityPostalCodeZipResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ValidateCityPostalCodeZipResponseContainer'):
        super(ValidateCityPostalCodeZipResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ValidateCityPostalCodeZipResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ValidateCityPostalCodeZipResponseContainer', fromsubclass_=False, pretty_print=True):
        super(ValidateCityPostalCodeZipResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SuggestedAddresses is not None:
            self.SuggestedAddresses.export(outfile, level, namespace_, name_='SuggestedAddresses', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ValidateCityPostalCodeZipResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SuggestedAddresses':
            obj_ = ArrayOfSuggestedAddress.factory()
            obj_.build(child_)
            self.SuggestedAddresses = obj_
            obj_.original_tagname_ = 'SuggestedAddresses'
        super(ValidateCityPostalCodeZipResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class ValidateCityPostalCodeZipResponseContainer


class ArrayOfSuggestedAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SuggestedAddress=None):
        self.original_tagname_ = None
        if SuggestedAddress is None:
            self.SuggestedAddress = []
        else:
            self.SuggestedAddress = SuggestedAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfSuggestedAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfSuggestedAddress.subclass:
            return ArrayOfSuggestedAddress.subclass(*args_, **kwargs_)
        else:
            return ArrayOfSuggestedAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SuggestedAddress(self): return self.SuggestedAddress
    def set_SuggestedAddress(self, SuggestedAddress): self.SuggestedAddress = SuggestedAddress
    def add_SuggestedAddress(self, value): self.SuggestedAddress.append(value)
    def insert_SuggestedAddress_at(self, index, value): self.SuggestedAddress.insert(index, value)
    def replace_SuggestedAddress_at(self, index, value): self.SuggestedAddress[index] = value
    def hasContent_(self):
        if (
            self.SuggestedAddress
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfSuggestedAddress', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfSuggestedAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfSuggestedAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfSuggestedAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfSuggestedAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfSuggestedAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SuggestedAddress_ in self.SuggestedAddress:
            SuggestedAddress_.export(outfile, level, namespace_, name_='SuggestedAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SuggestedAddress':
            obj_ = SuggestedAddress.factory()
            obj_.build(child_)
            self.SuggestedAddress.append(obj_)
            obj_.original_tagname_ = 'SuggestedAddress'
# end class ArrayOfSuggestedAddress


class SuggestedAddress(GeneratedsSuper):
    """SuggestedShortAddress"""
    subclass = None
    superclass = None
    def __init__(self, Address=None, ResponseInformation=None):
        self.original_tagname_ = None
        self.Address = Address
        self.ResponseInformation = ResponseInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SuggestedAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SuggestedAddress.subclass:
            return SuggestedAddress.subclass(*args_, **kwargs_)
        else:
            return SuggestedAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ResponseInformation(self): return self.ResponseInformation
    def set_ResponseInformation(self, ResponseInformation): self.ResponseInformation = ResponseInformation
    def hasContent_(self):
        if (
            self.Address is not None or
            self.ResponseInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='SuggestedAddress', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SuggestedAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SuggestedAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='SuggestedAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SuggestedAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SuggestedAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.ResponseInformation is not None:
            self.ResponseInformation.export(outfile, level, namespace_, name_='ResponseInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = ShortAddress.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ResponseInformation':
            obj_ = ResponseInformation.factory()
            obj_.build(child_)
            self.ResponseInformation = obj_
            obj_.original_tagname_ = 'ResponseInformation'
# end class SuggestedAddress


class GetServicesOptionsResponseContainer(ResponseContainer):
    """GetServicesOptionsResponse"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, Services=None):
        self.original_tagname_ = None
        super(GetServicesOptionsResponseContainer, self).__init__()
        self.Services = Services
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetServicesOptionsResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetServicesOptionsResponseContainer.subclass:
            return GetServicesOptionsResponseContainer.subclass(*args_, **kwargs_)
        else:
            return GetServicesOptionsResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Services(self): return self.Services
    def set_Services(self, Services): self.Services = Services
    def hasContent_(self):
        if (
            self.Services is not None or
            super(GetServicesOptionsResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetServicesOptionsResponseContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetServicesOptionsResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetServicesOptionsResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetServicesOptionsResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetServicesOptionsResponseContainer'):
        super(GetServicesOptionsResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetServicesOptionsResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetServicesOptionsResponseContainer', fromsubclass_=False, pretty_print=True):
        super(GetServicesOptionsResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Services is not None:
            self.Services.export(outfile, level, namespace_, name_='Services', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetServicesOptionsResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Services':
            obj_ = ArrayOfService.factory()
            obj_.build(child_)
            self.Services = obj_
            obj_.original_tagname_ = 'Services'
        super(GetServicesOptionsResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetServicesOptionsResponseContainer


class GetServicesOptionsRequestContainer(RequestContainer):
    """GetServicesOptionsRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, BillingAccountNumber=None, SenderAddress=None, ReceiverAddress=None, ShipmentDate=None):
        self.original_tagname_ = None
        super(GetServicesOptionsRequestContainer, self).__init__()
        self.BillingAccountNumber = BillingAccountNumber
        self.SenderAddress = SenderAddress
        self.ReceiverAddress = ReceiverAddress
        self.ShipmentDate = ShipmentDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetServicesOptionsRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetServicesOptionsRequestContainer.subclass:
            return GetServicesOptionsRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetServicesOptionsRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillingAccountNumber(self): return self.BillingAccountNumber
    def set_BillingAccountNumber(self, BillingAccountNumber): self.BillingAccountNumber = BillingAccountNumber
    def get_SenderAddress(self): return self.SenderAddress
    def set_SenderAddress(self, SenderAddress): self.SenderAddress = SenderAddress
    def get_ReceiverAddress(self): return self.ReceiverAddress
    def set_ReceiverAddress(self, ReceiverAddress): self.ReceiverAddress = ReceiverAddress
    def get_ShipmentDate(self): return self.ShipmentDate
    def set_ShipmentDate(self, ShipmentDate): self.ShipmentDate = ShipmentDate
    def hasContent_(self):
        if (
            self.BillingAccountNumber is not None or
            self.SenderAddress is not None or
            self.ReceiverAddress is not None or
            self.ShipmentDate is not None or
            super(GetServicesOptionsRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetServicesOptionsRequestContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetServicesOptionsRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetServicesOptionsRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetServicesOptionsRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetServicesOptionsRequestContainer'):
        super(GetServicesOptionsRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetServicesOptionsRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetServicesOptionsRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetServicesOptionsRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillingAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:BillingAccountNumber>%s</tns:BillingAccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillingAccountNumber), input_name='BillingAccountNumber')), eol_))
        if self.SenderAddress is not None:
            self.SenderAddress.export(outfile, level, namespace_, name_='SenderAddress', pretty_print=pretty_print)
        if self.ReceiverAddress is not None:
            self.ReceiverAddress.export(outfile, level, namespace_, name_='ReceiverAddress', pretty_print=pretty_print)
        if self.ShipmentDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ShipmentDate>%s</tns:ShipmentDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDate), input_name='ShipmentDate')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetServicesOptionsRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillingAccountNumber':
            BillingAccountNumber_ = child_.text
            BillingAccountNumber_ = self.gds_validate_string(BillingAccountNumber_, node, 'BillingAccountNumber')
            self.BillingAccountNumber = BillingAccountNumber_
        elif nodeName_ == 'SenderAddress':
            obj_ = ShortAddress.factory()
            obj_.build(child_)
            self.SenderAddress = obj_
            obj_.original_tagname_ = 'SenderAddress'
        elif nodeName_ == 'ReceiverAddress':
            obj_ = ShortAddress.factory()
            obj_.build(child_)
            self.ReceiverAddress = obj_
            obj_.original_tagname_ = 'ReceiverAddress'
        elif nodeName_ == 'ShipmentDate':
            ShipmentDate_ = child_.text
            ShipmentDate_ = self.gds_validate_string(ShipmentDate_, node, 'ShipmentDate')
            self.ShipmentDate = ShipmentDate_
        super(GetServicesOptionsRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetServicesOptionsRequestContainer


GDSClassesMapping = {
    'ArrayOfError': ArrayOfError,
    'ArrayOfInformationalMessage': ArrayOfInformationalMessage,
    'ArrayOfOption': ArrayOfOption,
    'ArrayOfOptionIDValuePair': ArrayOfOptionIDValuePair,
    'ArrayOfOptionRule': ArrayOfOptionRule,
    'ArrayOfOptionValue': ArrayOfOptionValue,
    'ArrayOfService': ArrayOfService,
    'ArrayOfServiceOptionRules': ArrayOfServiceOptionRules,
    'ArrayOfServiceRule': ArrayOfServiceRule,
    'ArrayOfShortAddress': ArrayOfShortAddress,
    'ArrayOfSuggestedAddress': ArrayOfSuggestedAddress,
    'Dimension': Dimension,
    'Error': Error,
    'GetServiceRulesRequest': GetServiceRulesRequestContainer,
    'GetServiceRulesRequestContainer': GetServiceRulesRequestContainer,
    'GetServiceRulesResponse': GetServiceRulesResponseContainer,
    'GetServiceRulesResponseContainer': GetServiceRulesResponseContainer,
    'GetServicesOptionsRequest': GetServicesOptionsRequestContainer,
    'GetServicesOptionsRequestContainer': GetServicesOptionsRequestContainer,
    'GetServicesOptionsResponse': GetServicesOptionsResponseContainer,
    'GetServicesOptionsResponseContainer': GetServicesOptionsResponseContainer,
    'InformationalMessage': InformationalMessage,
    'Option': Option,
    'OptionIDValuePair': OptionIDValuePair,
    'OptionRule': OptionRule,
    'OptionValue': OptionValue,
    'RequestContainer': RequestContainer,
    'RequestContext': RequestContext,
    'ResponseContainer': ResponseContainer,
    'ResponseContext': ResponseContext,
    'ResponseInformation': ResponseInformation,
    'Service': Service,
    'ServiceOptionRules': ServiceOptionRules,
    'ServiceRule': ServiceRule,
    'ShortAddress': ShortAddress,
    'SuggestedAddress': SuggestedAddress,
    'ValidateCityPostalCodeZipRequest': ValidateCityPostalCodeZipRequestContainer,
    'ValidateCityPostalCodeZipRequestContainer': ValidateCityPostalCodeZipRequestContainer,
    'ValidateCityPostalCodeZipResponse': ValidateCityPostalCodeZipResponseContainer,
    'ValidateCityPostalCodeZipResponseContainer': ValidateCityPostalCodeZipResponseContainer,
    'Weight': Weight,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetServicesOptionsRequestContainer'
        rootClass = GetServicesOptionsRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetServicesOptionsRequestContainer'
        rootClass = GetServicesOptionsRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetServicesOptionsRequestContainer'
        rootClass = GetServicesOptionsRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v2"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetServicesOptionsRequestContainer'
        rootClass = GetServicesOptionsRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from ServiceAvailabilityService.xsd import *\n\n')
        sys.stdout.write('import ServiceAvailabilityService.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ArrayOfError",
    "ArrayOfInformationalMessage",
    "ArrayOfOption",
    "ArrayOfOptionIDValuePair",
    "ArrayOfOptionRule",
    "ArrayOfOptionValue",
    "ArrayOfService",
    "ArrayOfServiceOptionRules",
    "ArrayOfServiceRule",
    "ArrayOfShortAddress",
    "ArrayOfSuggestedAddress",
    "Dimension",
    "Error",
    "GetServiceRulesRequestContainer",
    "GetServiceRulesResponseContainer",
    "GetServicesOptionsRequestContainer",
    "GetServicesOptionsResponseContainer",
    "InformationalMessage",
    "Option",
    "OptionIDValuePair",
    "OptionRule",
    "OptionValue",
    "RequestContainer",
    "RequestContext",
    "ResponseContainer",
    "ResponseContext",
    "ResponseInformation",
    "Service",
    "ServiceOptionRules",
    "ServiceRule",
    "ShortAddress",
    "SuggestedAddress",
    "ValidateCityPostalCodeZipRequestContainer",
    "ValidateCityPostalCodeZipResponseContainer",
    "Weight"
]
