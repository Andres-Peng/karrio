#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 14:06:22 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/LocatorService.xsd.py')
#
# Command line arguments:
#   LocatorService.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/LocatorService.xsd.py" LocatorService.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RequestContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContainer.subclass:
            return RequestContainer.subclass(*args_, **kwargs_)
        else:
            return RequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContainer', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContainer', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RequestContainer


class Address(GeneratedsSuper):
    """SearchByAddress"""
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Address', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressLine1>%s</tns:AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressLine2>%s</tns:AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressLine3>%s</tns:AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
# end class Address


class SearchOptions(GeneratedsSuper):
    """SearchOptions"""
    subclass = None
    superclass = None
    def __init__(self, RadialDistanceInKM=None, HoldForPickup=None, DangerousGoods=None, Kiosk=None, StreetAccess=None, WheelChairAccess=None, MaxNumberOfLocations=None):
        self.original_tagname_ = None
        self.RadialDistanceInKM = RadialDistanceInKM
        self.HoldForPickup = HoldForPickup
        self.DangerousGoods = DangerousGoods
        self.Kiosk = Kiosk
        self.StreetAccess = StreetAccess
        self.WheelChairAccess = WheelChairAccess
        self.MaxNumberOfLocations = MaxNumberOfLocations
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchOptions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchOptions.subclass:
            return SearchOptions.subclass(*args_, **kwargs_)
        else:
            return SearchOptions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RadialDistanceInKM(self): return self.RadialDistanceInKM
    def set_RadialDistanceInKM(self, RadialDistanceInKM): self.RadialDistanceInKM = RadialDistanceInKM
    def get_HoldForPickup(self): return self.HoldForPickup
    def set_HoldForPickup(self, HoldForPickup): self.HoldForPickup = HoldForPickup
    def get_DangerousGoods(self): return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods): self.DangerousGoods = DangerousGoods
    def get_Kiosk(self): return self.Kiosk
    def set_Kiosk(self, Kiosk): self.Kiosk = Kiosk
    def get_StreetAccess(self): return self.StreetAccess
    def set_StreetAccess(self, StreetAccess): self.StreetAccess = StreetAccess
    def get_WheelChairAccess(self): return self.WheelChairAccess
    def set_WheelChairAccess(self, WheelChairAccess): self.WheelChairAccess = WheelChairAccess
    def get_MaxNumberOfLocations(self): return self.MaxNumberOfLocations
    def set_MaxNumberOfLocations(self, MaxNumberOfLocations): self.MaxNumberOfLocations = MaxNumberOfLocations
    def hasContent_(self):
        if (
            self.RadialDistanceInKM is not None or
            self.HoldForPickup is not None or
            self.DangerousGoods is not None or
            self.Kiosk is not None or
            self.StreetAccess is not None or
            self.WheelChairAccess is not None or
            self.MaxNumberOfLocations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='SearchOptions', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchOptions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SearchOptions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='SearchOptions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SearchOptions'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SearchOptions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RadialDistanceInKM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:RadialDistanceInKM>%s</tns:RadialDistanceInKM>%s' % (self.gds_format_float(self.RadialDistanceInKM, input_name='RadialDistanceInKM'), eol_))
        if self.HoldForPickup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HoldForPickup>%s</tns:HoldForPickup>%s' % (self.gds_format_boolean(self.HoldForPickup, input_name='HoldForPickup'), eol_))
        if self.DangerousGoods is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DangerousGoods>%s</tns:DangerousGoods>%s' % (self.gds_format_boolean(self.DangerousGoods, input_name='DangerousGoods'), eol_))
        if self.Kiosk is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Kiosk>%s</tns:Kiosk>%s' % (self.gds_format_boolean(self.Kiosk, input_name='Kiosk'), eol_))
        if self.StreetAccess is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetAccess>%s</tns:StreetAccess>%s' % (self.gds_format_boolean(self.StreetAccess, input_name='StreetAccess'), eol_))
        if self.WheelChairAccess is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:WheelChairAccess>%s</tns:WheelChairAccess>%s' % (self.gds_format_boolean(self.WheelChairAccess, input_name='WheelChairAccess'), eol_))
        if self.MaxNumberOfLocations is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:MaxNumberOfLocations>%s</tns:MaxNumberOfLocations>%s' % (self.gds_format_integer(self.MaxNumberOfLocations, input_name='MaxNumberOfLocations'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RadialDistanceInKM':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RadialDistanceInKM')
            self.RadialDistanceInKM = fval_
        elif nodeName_ == 'HoldForPickup':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HoldForPickup')
            self.HoldForPickup = ival_
        elif nodeName_ == 'DangerousGoods':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DangerousGoods')
            self.DangerousGoods = ival_
        elif nodeName_ == 'Kiosk':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Kiosk')
            self.Kiosk = ival_
        elif nodeName_ == 'StreetAccess':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'StreetAccess')
            self.StreetAccess = ival_
        elif nodeName_ == 'WheelChairAccess':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'WheelChairAccess')
            self.WheelChairAccess = ival_
        elif nodeName_ == 'MaxNumberOfLocations':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxNumberOfLocations')
            self.MaxNumberOfLocations = ival_
# end class SearchOptions


class LocationTypes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LocationType=None):
        self.original_tagname_ = None
        if LocationType is None:
            self.LocationType = []
        else:
            self.LocationType = LocationType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationTypes)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationTypes.subclass:
            return LocationTypes.subclass(*args_, **kwargs_)
        else:
            return LocationTypes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LocationType(self): return self.LocationType
    def set_LocationType(self, LocationType): self.LocationType = LocationType
    def add_LocationType(self, value): self.LocationType.append(value)
    def insert_LocationType_at(self, index, value): self.LocationType.insert(index, value)
    def replace_LocationType_at(self, index, value): self.LocationType[index] = value
    def hasContent_(self):
        if (
            self.LocationType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='LocationTypes', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationTypes')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationTypes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='LocationTypes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='LocationTypes'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='LocationTypes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LocationType_ in self.LocationType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:LocationType>%s</tns:LocationType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(LocationType_), input_name='LocationType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LocationType':
            LocationType_ = child_.text
            LocationType_ = self.gds_validate_string(LocationType_, node, 'LocationType')
            self.LocationType.append(LocationType_)
# end class LocationTypes


class HoursOfOperation(GeneratedsSuper):
    """HoursOfOperation"""
    subclass = None
    superclass = None
    def __init__(self, OpenTime=None, CloseTime=None, CurrentlyOpen=None, GMTOffset=None):
        self.original_tagname_ = None
        if isinstance(OpenTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OpenTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OpenTime
        self.OpenTime = initvalue_
        if isinstance(CloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CloseTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CloseTime
        self.CloseTime = initvalue_
        self.CurrentlyOpen = CurrentlyOpen
        if isinstance(GMTOffset, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GMTOffset, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = GMTOffset
        self.GMTOffset = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HoursOfOperation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HoursOfOperation.subclass:
            return HoursOfOperation.subclass(*args_, **kwargs_)
        else:
            return HoursOfOperation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OpenTime(self): return self.OpenTime
    def set_OpenTime(self, OpenTime): self.OpenTime = OpenTime
    def get_CloseTime(self): return self.CloseTime
    def set_CloseTime(self, CloseTime): self.CloseTime = CloseTime
    def get_CurrentlyOpen(self): return self.CurrentlyOpen
    def set_CurrentlyOpen(self, CurrentlyOpen): self.CurrentlyOpen = CurrentlyOpen
    def get_GMTOffset(self): return self.GMTOffset
    def set_GMTOffset(self, GMTOffset): self.GMTOffset = GMTOffset
    def hasContent_(self):
        if (
            self.OpenTime is not None or
            self.CloseTime is not None or
            self.CurrentlyOpen is not None or
            self.GMTOffset is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='HoursOfOperation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HoursOfOperation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HoursOfOperation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='HoursOfOperation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='HoursOfOperation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='HoursOfOperation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OpenTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenTime>%s</tns:OpenTime>%s' % (self.gds_format_datetime(self.OpenTime, input_name='OpenTime'), eol_))
        if self.CloseTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseTime>%s</tns:CloseTime>%s' % (self.gds_format_datetime(self.CloseTime, input_name='CloseTime'), eol_))
        if self.CurrentlyOpen is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CurrentlyOpen>%s</tns:CurrentlyOpen>%s' % (self.gds_format_boolean(self.CurrentlyOpen, input_name='CurrentlyOpen'), eol_))
        if self.GMTOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:GMTOffset>%s</tns:GMTOffset>%s' % (self.gds_format_datetime(self.GMTOffset, input_name='GMTOffset'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OpenTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OpenTime = dval_
        elif nodeName_ == 'CloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CloseTime = dval_
        elif nodeName_ == 'CurrentlyOpen':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'CurrentlyOpen')
            self.CurrentlyOpen = ival_
        elif nodeName_ == 'GMTOffset':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.GMTOffset = dval_
# end class HoursOfOperation


class DaysOfOperation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DaysOfWeek=None):
        self.original_tagname_ = None
        if DaysOfWeek is None:
            self.DaysOfWeek = []
        else:
            self.DaysOfWeek = DaysOfWeek
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DaysOfOperation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DaysOfOperation.subclass:
            return DaysOfOperation.subclass(*args_, **kwargs_)
        else:
            return DaysOfOperation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DaysOfWeek(self): return self.DaysOfWeek
    def set_DaysOfWeek(self, DaysOfWeek): self.DaysOfWeek = DaysOfWeek
    def add_DaysOfWeek(self, value): self.DaysOfWeek.append(value)
    def insert_DaysOfWeek_at(self, index, value): self.DaysOfWeek.insert(index, value)
    def replace_DaysOfWeek_at(self, index, value): self.DaysOfWeek[index] = value
    def hasContent_(self):
        if (
            self.DaysOfWeek
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='DaysOfOperation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DaysOfOperation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DaysOfOperation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='DaysOfOperation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DaysOfOperation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DaysOfOperation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DaysOfWeek_ in self.DaysOfWeek:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DaysOfWeek>%s</tns:DaysOfWeek>%s' % (self.gds_encode(self.gds_format_string(quote_xml(DaysOfWeek_), input_name='DaysOfWeek')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DaysOfWeek':
            DaysOfWeek_ = child_.text
            DaysOfWeek_ = self.gds_validate_string(DaysOfWeek_, node, 'DaysOfWeek')
            self.DaysOfWeek.append(DaysOfWeek_)
# end class DaysOfOperation


class RequestContext(GeneratedsSuper):
    """RequestContext"""
    subclass = None
    superclass = None
    def __init__(self, Version=None, Language=None, GroupID=None, RequestReference=None, UserToken=None):
        self.original_tagname_ = None
        self.Version = Version
        self.Language = Language
        self.validate_Language(self.Language)
        self.GroupID = GroupID
        self.RequestReference = RequestReference
        self.UserToken = UserToken
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestContext.subclass:
            return RequestContext.subclass(*args_, **kwargs_)
        else:
            return RequestContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_GroupID(self): return self.GroupID
    def set_GroupID(self, GroupID): self.GroupID = GroupID
    def get_RequestReference(self): return self.RequestReference
    def set_RequestReference(self, RequestReference): self.RequestReference = RequestReference
    def get_UserToken(self): return self.UserToken
    def set_UserToken(self, UserToken): self.UserToken = UserToken
    def validate_Language(self, value):
        # Validate type Language, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['en', 'fr']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Language' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Version is not None or
            self.Language is not None or
            self.GroupID is not None or
            self.RequestReference is not None or
            self.UserToken is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='RequestContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='RequestContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RequestContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RequestContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Version>%s</tns:Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Language>%s</tns:Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Language), input_name='Language')), eol_))
        if self.GroupID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:GroupID>%s</tns:GroupID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GroupID), input_name='GroupID')), eol_))
        if self.RequestReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:RequestReference>%s</tns:RequestReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RequestReference), input_name='RequestReference')), eol_))
        if self.UserToken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UserToken>%s</tns:UserToken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserToken), input_name='UserToken')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
            # validate type Language
            self.validate_Language(self.Language)
        elif nodeName_ == 'GroupID':
            GroupID_ = child_.text
            GroupID_ = self.gds_validate_string(GroupID_, node, 'GroupID')
            self.GroupID = GroupID_
        elif nodeName_ == 'RequestReference':
            RequestReference_ = child_.text
            RequestReference_ = self.gds_validate_string(RequestReference_, node, 'RequestReference')
            self.RequestReference = RequestReference_
        elif nodeName_ == 'UserToken':
            UserToken_ = child_.text
            UserToken_ = self.gds_validate_string(UserToken_, node, 'UserToken')
            self.UserToken = UserToken_
# end class RequestContext


class ResponseContainer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseInformation=None):
        self.original_tagname_ = None
        self.ResponseInformation = ResponseInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContainer.subclass:
            return ResponseContainer.subclass(*args_, **kwargs_)
        else:
            return ResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseInformation(self): return self.ResponseInformation
    def set_ResponseInformation(self, ResponseInformation): self.ResponseInformation = ResponseInformation
    def hasContent_(self):
        if (
            self.ResponseInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContainer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseInformation is not None:
            self.ResponseInformation.export(outfile, level, namespace_, name_='ResponseInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseInformation':
            obj_ = ResponseInformation.factory()
            obj_.build(child_)
            self.ResponseInformation = obj_
            obj_.original_tagname_ = 'ResponseInformation'
# end class ResponseContainer


class ResponseInformation(GeneratedsSuper):
    """ResponseInformation"""
    subclass = None
    superclass = None
    def __init__(self, Errors=None, InformationalMessages=None):
        self.original_tagname_ = None
        self.Errors = Errors
        self.InformationalMessages = InformationalMessages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseInformation.subclass:
            return ResponseInformation.subclass(*args_, **kwargs_)
        else:
            return ResponseInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Errors(self): return self.Errors
    def set_Errors(self, Errors): self.Errors = Errors
    def get_InformationalMessages(self): return self.InformationalMessages
    def set_InformationalMessages(self, InformationalMessages): self.InformationalMessages = InformationalMessages
    def hasContent_(self):
        if (
            self.Errors is not None or
            self.InformationalMessages is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseInformation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseInformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Errors is not None:
            self.Errors.export(outfile, level, namespace_, name_='Errors', pretty_print=pretty_print)
        if self.InformationalMessages is not None:
            self.InformationalMessages.export(outfile, level, namespace_, name_='InformationalMessages', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Errors':
            obj_ = ArrayOfError.factory()
            obj_.build(child_)
            self.Errors = obj_
            obj_.original_tagname_ = 'Errors'
        elif nodeName_ == 'InformationalMessages':
            obj_ = ArrayOfInformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessages = obj_
            obj_.original_tagname_ = 'InformationalMessages'
# end class ResponseInformation


class ArrayOfError(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Error=None):
        self.original_tagname_ = None
        if Error is None:
            self.Error = []
        else:
            self.Error = Error
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfError)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfError.subclass:
            return ArrayOfError.subclass(*args_, **kwargs_)
        else:
            return ArrayOfError(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def add_Error(self, value): self.Error.append(value)
    def insert_Error_at(self, index, value): self.Error.insert(index, value)
    def replace_Error_at(self, index, value): self.Error[index] = value
    def hasContent_(self):
        if (
            self.Error
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfError', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfError')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfError')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfError', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfError'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfError', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Error_ in self.Error:
            Error_.export(outfile, level, namespace_, name_='Error', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Error':
            obj_ = Error.factory()
            obj_.build(child_)
            self.Error.append(obj_)
            obj_.original_tagname_ = 'Error'
# end class ArrayOfError


class Error(GeneratedsSuper):
    """Error"""
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, AdditionalInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.AdditionalInformation = AdditionalInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Error.subclass:
            return Error.subclass(*args_, **kwargs_)
        else:
            return Error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_AdditionalInformation(self): return self.AdditionalInformation
    def set_AdditionalInformation(self, AdditionalInformation): self.AdditionalInformation = AdditionalInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.AdditionalInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Error', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Error'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Description>%s</tns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.AdditionalInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AdditionalInformation>%s</tns:AdditionalInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalInformation), input_name='AdditionalInformation')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'AdditionalInformation':
            AdditionalInformation_ = child_.text
            AdditionalInformation_ = self.gds_validate_string(AdditionalInformation_, node, 'AdditionalInformation')
            self.AdditionalInformation = AdditionalInformation_
# end class Error


class ArrayOfInformationalMessage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InformationalMessage=None):
        self.original_tagname_ = None
        if InformationalMessage is None:
            self.InformationalMessage = []
        else:
            self.InformationalMessage = InformationalMessage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfInformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfInformationalMessage.subclass:
            return ArrayOfInformationalMessage.subclass(*args_, **kwargs_)
        else:
            return ArrayOfInformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InformationalMessage(self): return self.InformationalMessage
    def set_InformationalMessage(self, InformationalMessage): self.InformationalMessage = InformationalMessage
    def add_InformationalMessage(self, value): self.InformationalMessage.append(value)
    def insert_InformationalMessage_at(self, index, value): self.InformationalMessage.insert(index, value)
    def replace_InformationalMessage_at(self, index, value): self.InformationalMessage[index] = value
    def hasContent_(self):
        if (
            self.InformationalMessage
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfInformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfInformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfInformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfInformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfInformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformationalMessage_ in self.InformationalMessage:
            InformationalMessage_.export(outfile, level, namespace_, name_='InformationalMessage', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InformationalMessage':
            obj_ = InformationalMessage.factory()
            obj_.build(child_)
            self.InformationalMessage.append(obj_)
            obj_.original_tagname_ = 'InformationalMessage'
# end class ArrayOfInformationalMessage


class InformationalMessage(GeneratedsSuper):
    """InformationalMessage"""
    subclass = None
    superclass = None
    def __init__(self, Code=None, Message=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformationalMessage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformationalMessage.subclass:
            return InformationalMessage.subclass(*args_, **kwargs_)
        else:
            return InformationalMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='InformationalMessage', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformationalMessage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InformationalMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='InformationalMessage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='InformationalMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='InformationalMessage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Code>%s</tns:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Message>%s</tns:Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class InformationalMessage


class ArrayOfDepotLocation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DepotLocation=None):
        self.original_tagname_ = None
        if DepotLocation is None:
            self.DepotLocation = []
        else:
            self.DepotLocation = DepotLocation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfDepotLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfDepotLocation.subclass:
            return ArrayOfDepotLocation.subclass(*args_, **kwargs_)
        else:
            return ArrayOfDepotLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DepotLocation(self): return self.DepotLocation
    def set_DepotLocation(self, DepotLocation): self.DepotLocation = DepotLocation
    def add_DepotLocation(self, value): self.DepotLocation.append(value)
    def insert_DepotLocation_at(self, index, value): self.DepotLocation.insert(index, value)
    def replace_DepotLocation_at(self, index, value): self.DepotLocation[index] = value
    def hasContent_(self):
        if (
            self.DepotLocation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfDepotLocation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfDepotLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfDepotLocation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ArrayOfDepotLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfDepotLocation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfDepotLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DepotLocation_ in self.DepotLocation:
            DepotLocation_.export(outfile, level, namespace_, name_='DepotLocation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DepotLocation':
            obj_ = DepotLocation.factory()
            obj_.build(child_)
            self.DepotLocation.append(obj_)
            obj_.original_tagname_ = 'DepotLocation'
# end class ArrayOfDepotLocation


class DepotLocation(GeneratedsSuper):
    """DepotLocation"""
    subclass = None
    superclass = None
    def __init__(self, LocationId=None, LocationTypes=None, LocationName=None, locationAddress=None, ContactName=None, PhoneNumber=None, SpecialInstructionsEn=None, SpecialInstructionsFr=None, Depot=None, Unicode=None, HoldForPickup=None, DangerousGoods=None, Kiosk=None, StreetAccess=None, WheelChairAccess=None, OpenMon=None, CloseMon=None, OpenExceptionMon=None, CloseExceptionMon=None, OpenTue=None, CloseTue=None, OpenExceptionTue=None, CloseExceptionTue=None, OpenWed=None, CloseWed=None, OpenExceptionWed=None, CloseExceptionWed=None, OpenThu=None, CloseThu=None, OpenExceptionThu=None, CloseExceptionThu=None, OpenFri=None, CloseFri=None, OpenExceptionFri=None, CloseExceptionFri=None, OpenSat=None, CloseSat=None, OpenExceptionSat=None, CloseExceptionSat=None, OpenSun=None, CloseSun=None, OpenExceptionSun=None, CloseExceptionSun=None, Latitude=None, Longitude=None, RadialDistanceInKM=None, GMTOffset=None, ActivatedDate=None, DropOffWeekDayAirDom=None, DropOffWeekDayAirUS=None, DropOffWeekDayAirIntl=None, DropOffWeekDayGndDom=None, DropOffWeekDayGndUS=None, DropOffWeekDayGndIntl=None, DropOffSatAirDom=None, DropOffSatAirUS=None, DropOffSatAirIntl=None, DropOffSatGndDom=None, DropOffSatGndUS=None, DropOffSatGndIntl=None):
        self.original_tagname_ = None
        self.LocationId = LocationId
        self.LocationTypes = LocationTypes
        self.LocationName = LocationName
        self.locationAddress = locationAddress
        self.ContactName = ContactName
        self.PhoneNumber = PhoneNumber
        self.SpecialInstructionsEn = SpecialInstructionsEn
        self.SpecialInstructionsFr = SpecialInstructionsFr
        self.Depot = Depot
        self.Unicode = Unicode
        self.HoldForPickup = HoldForPickup
        self.DangerousGoods = DangerousGoods
        self.Kiosk = Kiosk
        self.StreetAccess = StreetAccess
        self.WheelChairAccess = WheelChairAccess
        self.OpenMon = OpenMon
        self.CloseMon = CloseMon
        self.OpenExceptionMon = OpenExceptionMon
        self.CloseExceptionMon = CloseExceptionMon
        self.OpenTue = OpenTue
        self.CloseTue = CloseTue
        self.OpenExceptionTue = OpenExceptionTue
        self.CloseExceptionTue = CloseExceptionTue
        self.OpenWed = OpenWed
        self.CloseWed = CloseWed
        self.OpenExceptionWed = OpenExceptionWed
        self.CloseExceptionWed = CloseExceptionWed
        self.OpenThu = OpenThu
        self.CloseThu = CloseThu
        self.OpenExceptionThu = OpenExceptionThu
        self.CloseExceptionThu = CloseExceptionThu
        self.OpenFri = OpenFri
        self.CloseFri = CloseFri
        self.OpenExceptionFri = OpenExceptionFri
        self.CloseExceptionFri = CloseExceptionFri
        self.OpenSat = OpenSat
        self.CloseSat = CloseSat
        self.OpenExceptionSat = OpenExceptionSat
        self.CloseExceptionSat = CloseExceptionSat
        self.OpenSun = OpenSun
        self.CloseSun = CloseSun
        self.OpenExceptionSun = OpenExceptionSun
        self.CloseExceptionSun = CloseExceptionSun
        self.Latitude = Latitude
        self.Longitude = Longitude
        self.RadialDistanceInKM = RadialDistanceInKM
        self.GMTOffset = GMTOffset
        if isinstance(ActivatedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActivatedDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ActivatedDate
        self.ActivatedDate = initvalue_
        self.DropOffWeekDayAirDom = DropOffWeekDayAirDom
        self.DropOffWeekDayAirUS = DropOffWeekDayAirUS
        self.DropOffWeekDayAirIntl = DropOffWeekDayAirIntl
        self.DropOffWeekDayGndDom = DropOffWeekDayGndDom
        self.DropOffWeekDayGndUS = DropOffWeekDayGndUS
        self.DropOffWeekDayGndIntl = DropOffWeekDayGndIntl
        self.DropOffSatAirDom = DropOffSatAirDom
        self.DropOffSatAirUS = DropOffSatAirUS
        self.DropOffSatAirIntl = DropOffSatAirIntl
        self.DropOffSatGndDom = DropOffSatGndDom
        self.DropOffSatGndUS = DropOffSatGndUS
        self.DropOffSatGndIntl = DropOffSatGndIntl
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DepotLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DepotLocation.subclass:
            return DepotLocation.subclass(*args_, **kwargs_)
        else:
            return DepotLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LocationId(self): return self.LocationId
    def set_LocationId(self, LocationId): self.LocationId = LocationId
    def get_LocationTypes(self): return self.LocationTypes
    def set_LocationTypes(self, LocationTypes): self.LocationTypes = LocationTypes
    def get_LocationName(self): return self.LocationName
    def set_LocationName(self, LocationName): self.LocationName = LocationName
    def get_locationAddress(self): return self.locationAddress
    def set_locationAddress(self, locationAddress): self.locationAddress = locationAddress
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_SpecialInstructionsEn(self): return self.SpecialInstructionsEn
    def set_SpecialInstructionsEn(self, SpecialInstructionsEn): self.SpecialInstructionsEn = SpecialInstructionsEn
    def get_SpecialInstructionsFr(self): return self.SpecialInstructionsFr
    def set_SpecialInstructionsFr(self, SpecialInstructionsFr): self.SpecialInstructionsFr = SpecialInstructionsFr
    def get_Depot(self): return self.Depot
    def set_Depot(self, Depot): self.Depot = Depot
    def get_Unicode(self): return self.Unicode
    def set_Unicode(self, Unicode): self.Unicode = Unicode
    def get_HoldForPickup(self): return self.HoldForPickup
    def set_HoldForPickup(self, HoldForPickup): self.HoldForPickup = HoldForPickup
    def get_DangerousGoods(self): return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods): self.DangerousGoods = DangerousGoods
    def get_Kiosk(self): return self.Kiosk
    def set_Kiosk(self, Kiosk): self.Kiosk = Kiosk
    def get_StreetAccess(self): return self.StreetAccess
    def set_StreetAccess(self, StreetAccess): self.StreetAccess = StreetAccess
    def get_WheelChairAccess(self): return self.WheelChairAccess
    def set_WheelChairAccess(self, WheelChairAccess): self.WheelChairAccess = WheelChairAccess
    def get_OpenMon(self): return self.OpenMon
    def set_OpenMon(self, OpenMon): self.OpenMon = OpenMon
    def get_CloseMon(self): return self.CloseMon
    def set_CloseMon(self, CloseMon): self.CloseMon = CloseMon
    def get_OpenExceptionMon(self): return self.OpenExceptionMon
    def set_OpenExceptionMon(self, OpenExceptionMon): self.OpenExceptionMon = OpenExceptionMon
    def get_CloseExceptionMon(self): return self.CloseExceptionMon
    def set_CloseExceptionMon(self, CloseExceptionMon): self.CloseExceptionMon = CloseExceptionMon
    def get_OpenTue(self): return self.OpenTue
    def set_OpenTue(self, OpenTue): self.OpenTue = OpenTue
    def get_CloseTue(self): return self.CloseTue
    def set_CloseTue(self, CloseTue): self.CloseTue = CloseTue
    def get_OpenExceptionTue(self): return self.OpenExceptionTue
    def set_OpenExceptionTue(self, OpenExceptionTue): self.OpenExceptionTue = OpenExceptionTue
    def get_CloseExceptionTue(self): return self.CloseExceptionTue
    def set_CloseExceptionTue(self, CloseExceptionTue): self.CloseExceptionTue = CloseExceptionTue
    def get_OpenWed(self): return self.OpenWed
    def set_OpenWed(self, OpenWed): self.OpenWed = OpenWed
    def get_CloseWed(self): return self.CloseWed
    def set_CloseWed(self, CloseWed): self.CloseWed = CloseWed
    def get_OpenExceptionWed(self): return self.OpenExceptionWed
    def set_OpenExceptionWed(self, OpenExceptionWed): self.OpenExceptionWed = OpenExceptionWed
    def get_CloseExceptionWed(self): return self.CloseExceptionWed
    def set_CloseExceptionWed(self, CloseExceptionWed): self.CloseExceptionWed = CloseExceptionWed
    def get_OpenThu(self): return self.OpenThu
    def set_OpenThu(self, OpenThu): self.OpenThu = OpenThu
    def get_CloseThu(self): return self.CloseThu
    def set_CloseThu(self, CloseThu): self.CloseThu = CloseThu
    def get_OpenExceptionThu(self): return self.OpenExceptionThu
    def set_OpenExceptionThu(self, OpenExceptionThu): self.OpenExceptionThu = OpenExceptionThu
    def get_CloseExceptionThu(self): return self.CloseExceptionThu
    def set_CloseExceptionThu(self, CloseExceptionThu): self.CloseExceptionThu = CloseExceptionThu
    def get_OpenFri(self): return self.OpenFri
    def set_OpenFri(self, OpenFri): self.OpenFri = OpenFri
    def get_CloseFri(self): return self.CloseFri
    def set_CloseFri(self, CloseFri): self.CloseFri = CloseFri
    def get_OpenExceptionFri(self): return self.OpenExceptionFri
    def set_OpenExceptionFri(self, OpenExceptionFri): self.OpenExceptionFri = OpenExceptionFri
    def get_CloseExceptionFri(self): return self.CloseExceptionFri
    def set_CloseExceptionFri(self, CloseExceptionFri): self.CloseExceptionFri = CloseExceptionFri
    def get_OpenSat(self): return self.OpenSat
    def set_OpenSat(self, OpenSat): self.OpenSat = OpenSat
    def get_CloseSat(self): return self.CloseSat
    def set_CloseSat(self, CloseSat): self.CloseSat = CloseSat
    def get_OpenExceptionSat(self): return self.OpenExceptionSat
    def set_OpenExceptionSat(self, OpenExceptionSat): self.OpenExceptionSat = OpenExceptionSat
    def get_CloseExceptionSat(self): return self.CloseExceptionSat
    def set_CloseExceptionSat(self, CloseExceptionSat): self.CloseExceptionSat = CloseExceptionSat
    def get_OpenSun(self): return self.OpenSun
    def set_OpenSun(self, OpenSun): self.OpenSun = OpenSun
    def get_CloseSun(self): return self.CloseSun
    def set_CloseSun(self, CloseSun): self.CloseSun = CloseSun
    def get_OpenExceptionSun(self): return self.OpenExceptionSun
    def set_OpenExceptionSun(self, OpenExceptionSun): self.OpenExceptionSun = OpenExceptionSun
    def get_CloseExceptionSun(self): return self.CloseExceptionSun
    def set_CloseExceptionSun(self, CloseExceptionSun): self.CloseExceptionSun = CloseExceptionSun
    def get_Latitude(self): return self.Latitude
    def set_Latitude(self, Latitude): self.Latitude = Latitude
    def get_Longitude(self): return self.Longitude
    def set_Longitude(self, Longitude): self.Longitude = Longitude
    def get_RadialDistanceInKM(self): return self.RadialDistanceInKM
    def set_RadialDistanceInKM(self, RadialDistanceInKM): self.RadialDistanceInKM = RadialDistanceInKM
    def get_GMTOffset(self): return self.GMTOffset
    def set_GMTOffset(self, GMTOffset): self.GMTOffset = GMTOffset
    def get_ActivatedDate(self): return self.ActivatedDate
    def set_ActivatedDate(self, ActivatedDate): self.ActivatedDate = ActivatedDate
    def get_DropOffWeekDayAirDom(self): return self.DropOffWeekDayAirDom
    def set_DropOffWeekDayAirDom(self, DropOffWeekDayAirDom): self.DropOffWeekDayAirDom = DropOffWeekDayAirDom
    def get_DropOffWeekDayAirUS(self): return self.DropOffWeekDayAirUS
    def set_DropOffWeekDayAirUS(self, DropOffWeekDayAirUS): self.DropOffWeekDayAirUS = DropOffWeekDayAirUS
    def get_DropOffWeekDayAirIntl(self): return self.DropOffWeekDayAirIntl
    def set_DropOffWeekDayAirIntl(self, DropOffWeekDayAirIntl): self.DropOffWeekDayAirIntl = DropOffWeekDayAirIntl
    def get_DropOffWeekDayGndDom(self): return self.DropOffWeekDayGndDom
    def set_DropOffWeekDayGndDom(self, DropOffWeekDayGndDom): self.DropOffWeekDayGndDom = DropOffWeekDayGndDom
    def get_DropOffWeekDayGndUS(self): return self.DropOffWeekDayGndUS
    def set_DropOffWeekDayGndUS(self, DropOffWeekDayGndUS): self.DropOffWeekDayGndUS = DropOffWeekDayGndUS
    def get_DropOffWeekDayGndIntl(self): return self.DropOffWeekDayGndIntl
    def set_DropOffWeekDayGndIntl(self, DropOffWeekDayGndIntl): self.DropOffWeekDayGndIntl = DropOffWeekDayGndIntl
    def get_DropOffSatAirDom(self): return self.DropOffSatAirDom
    def set_DropOffSatAirDom(self, DropOffSatAirDom): self.DropOffSatAirDom = DropOffSatAirDom
    def get_DropOffSatAirUS(self): return self.DropOffSatAirUS
    def set_DropOffSatAirUS(self, DropOffSatAirUS): self.DropOffSatAirUS = DropOffSatAirUS
    def get_DropOffSatAirIntl(self): return self.DropOffSatAirIntl
    def set_DropOffSatAirIntl(self, DropOffSatAirIntl): self.DropOffSatAirIntl = DropOffSatAirIntl
    def get_DropOffSatGndDom(self): return self.DropOffSatGndDom
    def set_DropOffSatGndDom(self, DropOffSatGndDom): self.DropOffSatGndDom = DropOffSatGndDom
    def get_DropOffSatGndUS(self): return self.DropOffSatGndUS
    def set_DropOffSatGndUS(self, DropOffSatGndUS): self.DropOffSatGndUS = DropOffSatGndUS
    def get_DropOffSatGndIntl(self): return self.DropOffSatGndIntl
    def set_DropOffSatGndIntl(self, DropOffSatGndIntl): self.DropOffSatGndIntl = DropOffSatGndIntl
    def hasContent_(self):
        if (
            self.LocationId is not None or
            self.LocationTypes is not None or
            self.LocationName is not None or
            self.locationAddress is not None or
            self.ContactName is not None or
            self.PhoneNumber is not None or
            self.SpecialInstructionsEn is not None or
            self.SpecialInstructionsFr is not None or
            self.Depot is not None or
            self.Unicode is not None or
            self.HoldForPickup is not None or
            self.DangerousGoods is not None or
            self.Kiosk is not None or
            self.StreetAccess is not None or
            self.WheelChairAccess is not None or
            self.OpenMon is not None or
            self.CloseMon is not None or
            self.OpenExceptionMon is not None or
            self.CloseExceptionMon is not None or
            self.OpenTue is not None or
            self.CloseTue is not None or
            self.OpenExceptionTue is not None or
            self.CloseExceptionTue is not None or
            self.OpenWed is not None or
            self.CloseWed is not None or
            self.OpenExceptionWed is not None or
            self.CloseExceptionWed is not None or
            self.OpenThu is not None or
            self.CloseThu is not None or
            self.OpenExceptionThu is not None or
            self.CloseExceptionThu is not None or
            self.OpenFri is not None or
            self.CloseFri is not None or
            self.OpenExceptionFri is not None or
            self.CloseExceptionFri is not None or
            self.OpenSat is not None or
            self.CloseSat is not None or
            self.OpenExceptionSat is not None or
            self.CloseExceptionSat is not None or
            self.OpenSun is not None or
            self.CloseSun is not None or
            self.OpenExceptionSun is not None or
            self.CloseExceptionSun is not None or
            self.Latitude is not None or
            self.Longitude is not None or
            self.RadialDistanceInKM is not None or
            self.GMTOffset is not None or
            self.ActivatedDate is not None or
            self.DropOffWeekDayAirDom is not None or
            self.DropOffWeekDayAirUS is not None or
            self.DropOffWeekDayAirIntl is not None or
            self.DropOffWeekDayGndDom is not None or
            self.DropOffWeekDayGndUS is not None or
            self.DropOffWeekDayGndIntl is not None or
            self.DropOffSatAirDom is not None or
            self.DropOffSatAirUS is not None or
            self.DropOffSatAirIntl is not None or
            self.DropOffSatGndDom is not None or
            self.DropOffSatGndUS is not None or
            self.DropOffSatGndIntl is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='DepotLocation', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DepotLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DepotLocation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='DepotLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DepotLocation'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DepotLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:LocationId>%s</tns:LocationId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), eol_))
        if self.LocationTypes is not None:
            self.LocationTypes.export(outfile, level, namespace_, name_='LocationTypes', pretty_print=pretty_print)
        if self.LocationName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:LocationName>%s</tns:LocationName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationName), input_name='LocationName')), eol_))
        if self.locationAddress is not None:
            self.locationAddress.export(outfile, level, namespace_, name_='locationAddress', pretty_print=pretty_print)
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ContactName>%s</tns:ContactName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PhoneNumber>%s</tns:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.SpecialInstructionsEn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SpecialInstructionsEn>%s</tns:SpecialInstructionsEn>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructionsEn), input_name='SpecialInstructionsEn')), eol_))
        if self.SpecialInstructionsFr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:SpecialInstructionsFr>%s</tns:SpecialInstructionsFr>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructionsFr), input_name='SpecialInstructionsFr')), eol_))
        if self.Depot is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Depot>%s</tns:Depot>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Depot), input_name='Depot')), eol_))
        if self.Unicode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Unicode>%s</tns:Unicode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Unicode), input_name='Unicode')), eol_))
        if self.HoldForPickup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:HoldForPickup>%s</tns:HoldForPickup>%s' % (self.gds_format_boolean(self.HoldForPickup, input_name='HoldForPickup'), eol_))
        if self.DangerousGoods is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DangerousGoods>%s</tns:DangerousGoods>%s' % (self.gds_format_boolean(self.DangerousGoods, input_name='DangerousGoods'), eol_))
        if self.Kiosk is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Kiosk>%s</tns:Kiosk>%s' % (self.gds_format_boolean(self.Kiosk, input_name='Kiosk'), eol_))
        if self.StreetAccess is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetAccess>%s</tns:StreetAccess>%s' % (self.gds_format_boolean(self.StreetAccess, input_name='StreetAccess'), eol_))
        if self.WheelChairAccess is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:WheelChairAccess>%s</tns:WheelChairAccess>%s' % (self.gds_format_boolean(self.WheelChairAccess, input_name='WheelChairAccess'), eol_))
        if self.OpenMon is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenMon>%s</tns:OpenMon>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenMon), input_name='OpenMon')), eol_))
        if self.CloseMon is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseMon>%s</tns:CloseMon>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseMon), input_name='CloseMon')), eol_))
        if self.OpenExceptionMon is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionMon>%s</tns:OpenExceptionMon>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionMon), input_name='OpenExceptionMon')), eol_))
        if self.CloseExceptionMon is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionMon>%s</tns:CloseExceptionMon>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionMon), input_name='CloseExceptionMon')), eol_))
        if self.OpenTue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenTue>%s</tns:OpenTue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenTue), input_name='OpenTue')), eol_))
        if self.CloseTue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseTue>%s</tns:CloseTue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseTue), input_name='CloseTue')), eol_))
        if self.OpenExceptionTue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionTue>%s</tns:OpenExceptionTue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionTue), input_name='OpenExceptionTue')), eol_))
        if self.CloseExceptionTue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionTue>%s</tns:CloseExceptionTue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionTue), input_name='CloseExceptionTue')), eol_))
        if self.OpenWed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenWed>%s</tns:OpenWed>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenWed), input_name='OpenWed')), eol_))
        if self.CloseWed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseWed>%s</tns:CloseWed>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseWed), input_name='CloseWed')), eol_))
        if self.OpenExceptionWed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionWed>%s</tns:OpenExceptionWed>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionWed), input_name='OpenExceptionWed')), eol_))
        if self.CloseExceptionWed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionWed>%s</tns:CloseExceptionWed>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionWed), input_name='CloseExceptionWed')), eol_))
        if self.OpenThu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenThu>%s</tns:OpenThu>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenThu), input_name='OpenThu')), eol_))
        if self.CloseThu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseThu>%s</tns:CloseThu>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseThu), input_name='CloseThu')), eol_))
        if self.OpenExceptionThu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionThu>%s</tns:OpenExceptionThu>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionThu), input_name='OpenExceptionThu')), eol_))
        if self.CloseExceptionThu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionThu>%s</tns:CloseExceptionThu>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionThu), input_name='CloseExceptionThu')), eol_))
        if self.OpenFri is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenFri>%s</tns:OpenFri>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenFri), input_name='OpenFri')), eol_))
        if self.CloseFri is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseFri>%s</tns:CloseFri>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseFri), input_name='CloseFri')), eol_))
        if self.OpenExceptionFri is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionFri>%s</tns:OpenExceptionFri>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionFri), input_name='OpenExceptionFri')), eol_))
        if self.CloseExceptionFri is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionFri>%s</tns:CloseExceptionFri>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionFri), input_name='CloseExceptionFri')), eol_))
        if self.OpenSat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenSat>%s</tns:OpenSat>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenSat), input_name='OpenSat')), eol_))
        if self.CloseSat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseSat>%s</tns:CloseSat>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseSat), input_name='CloseSat')), eol_))
        if self.OpenExceptionSat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionSat>%s</tns:OpenExceptionSat>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionSat), input_name='OpenExceptionSat')), eol_))
        if self.CloseExceptionSat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionSat>%s</tns:CloseExceptionSat>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionSat), input_name='CloseExceptionSat')), eol_))
        if self.OpenSun is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenSun>%s</tns:OpenSun>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenSun), input_name='OpenSun')), eol_))
        if self.CloseSun is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseSun>%s</tns:CloseSun>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseSun), input_name='CloseSun')), eol_))
        if self.OpenExceptionSun is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:OpenExceptionSun>%s</tns:OpenExceptionSun>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenExceptionSun), input_name='OpenExceptionSun')), eol_))
        if self.CloseExceptionSun is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CloseExceptionSun>%s</tns:CloseExceptionSun>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CloseExceptionSun), input_name='CloseExceptionSun')), eol_))
        if self.Latitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Latitude>%s</tns:Latitude>%s' % (self.gds_format_float(self.Latitude, input_name='Latitude'), eol_))
        if self.Longitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Longitude>%s</tns:Longitude>%s' % (self.gds_format_float(self.Longitude, input_name='Longitude'), eol_))
        if self.RadialDistanceInKM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:RadialDistanceInKM>%s</tns:RadialDistanceInKM>%s' % (self.gds_format_float(self.RadialDistanceInKM, input_name='RadialDistanceInKM'), eol_))
        if self.GMTOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:GMTOffset>%s</tns:GMTOffset>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GMTOffset), input_name='GMTOffset')), eol_))
        if self.ActivatedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ActivatedDate>%s</tns:ActivatedDate>%s' % (self.gds_format_datetime(self.ActivatedDate, input_name='ActivatedDate'), eol_))
        if self.DropOffWeekDayAirDom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffWeekDayAirDom>%s</tns:DropOffWeekDayAirDom>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffWeekDayAirDom), input_name='DropOffWeekDayAirDom')), eol_))
        if self.DropOffWeekDayAirUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffWeekDayAirUS>%s</tns:DropOffWeekDayAirUS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffWeekDayAirUS), input_name='DropOffWeekDayAirUS')), eol_))
        if self.DropOffWeekDayAirIntl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffWeekDayAirIntl>%s</tns:DropOffWeekDayAirIntl>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffWeekDayAirIntl), input_name='DropOffWeekDayAirIntl')), eol_))
        if self.DropOffWeekDayGndDom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffWeekDayGndDom>%s</tns:DropOffWeekDayGndDom>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffWeekDayGndDom), input_name='DropOffWeekDayGndDom')), eol_))
        if self.DropOffWeekDayGndUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffWeekDayGndUS>%s</tns:DropOffWeekDayGndUS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffWeekDayGndUS), input_name='DropOffWeekDayGndUS')), eol_))
        if self.DropOffWeekDayGndIntl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffWeekDayGndIntl>%s</tns:DropOffWeekDayGndIntl>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffWeekDayGndIntl), input_name='DropOffWeekDayGndIntl')), eol_))
        if self.DropOffSatAirDom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffSatAirDom>%s</tns:DropOffSatAirDom>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffSatAirDom), input_name='DropOffSatAirDom')), eol_))
        if self.DropOffSatAirUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffSatAirUS>%s</tns:DropOffSatAirUS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffSatAirUS), input_name='DropOffSatAirUS')), eol_))
        if self.DropOffSatAirIntl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffSatAirIntl>%s</tns:DropOffSatAirIntl>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffSatAirIntl), input_name='DropOffSatAirIntl')), eol_))
        if self.DropOffSatGndDom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffSatGndDom>%s</tns:DropOffSatGndDom>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffSatGndDom), input_name='DropOffSatGndDom')), eol_))
        if self.DropOffSatGndUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffSatGndUS>%s</tns:DropOffSatGndUS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffSatGndUS), input_name='DropOffSatGndUS')), eol_))
        if self.DropOffSatGndIntl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:DropOffSatGndIntl>%s</tns:DropOffSatGndIntl>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffSatGndIntl), input_name='DropOffSatGndIntl')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LocationId':
            LocationId_ = child_.text
            LocationId_ = self.gds_validate_string(LocationId_, node, 'LocationId')
            self.LocationId = LocationId_
        elif nodeName_ == 'LocationTypes':
            obj_ = LocationTypes.factory()
            obj_.build(child_)
            self.LocationTypes = obj_
            obj_.original_tagname_ = 'LocationTypes'
        elif nodeName_ == 'LocationName':
            LocationName_ = child_.text
            LocationName_ = self.gds_validate_string(LocationName_, node, 'LocationName')
            self.LocationName = LocationName_
        elif nodeName_ == 'locationAddress':
            obj_ = LocationAddress.factory()
            obj_.build(child_)
            self.locationAddress = obj_
            obj_.original_tagname_ = 'locationAddress'
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'SpecialInstructionsEn':
            SpecialInstructionsEn_ = child_.text
            SpecialInstructionsEn_ = self.gds_validate_string(SpecialInstructionsEn_, node, 'SpecialInstructionsEn')
            self.SpecialInstructionsEn = SpecialInstructionsEn_
        elif nodeName_ == 'SpecialInstructionsFr':
            SpecialInstructionsFr_ = child_.text
            SpecialInstructionsFr_ = self.gds_validate_string(SpecialInstructionsFr_, node, 'SpecialInstructionsFr')
            self.SpecialInstructionsFr = SpecialInstructionsFr_
        elif nodeName_ == 'Depot':
            Depot_ = child_.text
            Depot_ = self.gds_validate_string(Depot_, node, 'Depot')
            self.Depot = Depot_
        elif nodeName_ == 'Unicode':
            Unicode_ = child_.text
            Unicode_ = self.gds_validate_string(Unicode_, node, 'Unicode')
            self.Unicode = Unicode_
        elif nodeName_ == 'HoldForPickup':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HoldForPickup')
            self.HoldForPickup = ival_
        elif nodeName_ == 'DangerousGoods':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DangerousGoods')
            self.DangerousGoods = ival_
        elif nodeName_ == 'Kiosk':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Kiosk')
            self.Kiosk = ival_
        elif nodeName_ == 'StreetAccess':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'StreetAccess')
            self.StreetAccess = ival_
        elif nodeName_ == 'WheelChairAccess':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'WheelChairAccess')
            self.WheelChairAccess = ival_
        elif nodeName_ == 'OpenMon':
            OpenMon_ = child_.text
            OpenMon_ = self.gds_validate_string(OpenMon_, node, 'OpenMon')
            self.OpenMon = OpenMon_
        elif nodeName_ == 'CloseMon':
            CloseMon_ = child_.text
            CloseMon_ = self.gds_validate_string(CloseMon_, node, 'CloseMon')
            self.CloseMon = CloseMon_
        elif nodeName_ == 'OpenExceptionMon':
            OpenExceptionMon_ = child_.text
            OpenExceptionMon_ = self.gds_validate_string(OpenExceptionMon_, node, 'OpenExceptionMon')
            self.OpenExceptionMon = OpenExceptionMon_
        elif nodeName_ == 'CloseExceptionMon':
            CloseExceptionMon_ = child_.text
            CloseExceptionMon_ = self.gds_validate_string(CloseExceptionMon_, node, 'CloseExceptionMon')
            self.CloseExceptionMon = CloseExceptionMon_
        elif nodeName_ == 'OpenTue':
            OpenTue_ = child_.text
            OpenTue_ = self.gds_validate_string(OpenTue_, node, 'OpenTue')
            self.OpenTue = OpenTue_
        elif nodeName_ == 'CloseTue':
            CloseTue_ = child_.text
            CloseTue_ = self.gds_validate_string(CloseTue_, node, 'CloseTue')
            self.CloseTue = CloseTue_
        elif nodeName_ == 'OpenExceptionTue':
            OpenExceptionTue_ = child_.text
            OpenExceptionTue_ = self.gds_validate_string(OpenExceptionTue_, node, 'OpenExceptionTue')
            self.OpenExceptionTue = OpenExceptionTue_
        elif nodeName_ == 'CloseExceptionTue':
            CloseExceptionTue_ = child_.text
            CloseExceptionTue_ = self.gds_validate_string(CloseExceptionTue_, node, 'CloseExceptionTue')
            self.CloseExceptionTue = CloseExceptionTue_
        elif nodeName_ == 'OpenWed':
            OpenWed_ = child_.text
            OpenWed_ = self.gds_validate_string(OpenWed_, node, 'OpenWed')
            self.OpenWed = OpenWed_
        elif nodeName_ == 'CloseWed':
            CloseWed_ = child_.text
            CloseWed_ = self.gds_validate_string(CloseWed_, node, 'CloseWed')
            self.CloseWed = CloseWed_
        elif nodeName_ == 'OpenExceptionWed':
            OpenExceptionWed_ = child_.text
            OpenExceptionWed_ = self.gds_validate_string(OpenExceptionWed_, node, 'OpenExceptionWed')
            self.OpenExceptionWed = OpenExceptionWed_
        elif nodeName_ == 'CloseExceptionWed':
            CloseExceptionWed_ = child_.text
            CloseExceptionWed_ = self.gds_validate_string(CloseExceptionWed_, node, 'CloseExceptionWed')
            self.CloseExceptionWed = CloseExceptionWed_
        elif nodeName_ == 'OpenThu':
            OpenThu_ = child_.text
            OpenThu_ = self.gds_validate_string(OpenThu_, node, 'OpenThu')
            self.OpenThu = OpenThu_
        elif nodeName_ == 'CloseThu':
            CloseThu_ = child_.text
            CloseThu_ = self.gds_validate_string(CloseThu_, node, 'CloseThu')
            self.CloseThu = CloseThu_
        elif nodeName_ == 'OpenExceptionThu':
            OpenExceptionThu_ = child_.text
            OpenExceptionThu_ = self.gds_validate_string(OpenExceptionThu_, node, 'OpenExceptionThu')
            self.OpenExceptionThu = OpenExceptionThu_
        elif nodeName_ == 'CloseExceptionThu':
            CloseExceptionThu_ = child_.text
            CloseExceptionThu_ = self.gds_validate_string(CloseExceptionThu_, node, 'CloseExceptionThu')
            self.CloseExceptionThu = CloseExceptionThu_
        elif nodeName_ == 'OpenFri':
            OpenFri_ = child_.text
            OpenFri_ = self.gds_validate_string(OpenFri_, node, 'OpenFri')
            self.OpenFri = OpenFri_
        elif nodeName_ == 'CloseFri':
            CloseFri_ = child_.text
            CloseFri_ = self.gds_validate_string(CloseFri_, node, 'CloseFri')
            self.CloseFri = CloseFri_
        elif nodeName_ == 'OpenExceptionFri':
            OpenExceptionFri_ = child_.text
            OpenExceptionFri_ = self.gds_validate_string(OpenExceptionFri_, node, 'OpenExceptionFri')
            self.OpenExceptionFri = OpenExceptionFri_
        elif nodeName_ == 'CloseExceptionFri':
            CloseExceptionFri_ = child_.text
            CloseExceptionFri_ = self.gds_validate_string(CloseExceptionFri_, node, 'CloseExceptionFri')
            self.CloseExceptionFri = CloseExceptionFri_
        elif nodeName_ == 'OpenSat':
            OpenSat_ = child_.text
            OpenSat_ = self.gds_validate_string(OpenSat_, node, 'OpenSat')
            self.OpenSat = OpenSat_
        elif nodeName_ == 'CloseSat':
            CloseSat_ = child_.text
            CloseSat_ = self.gds_validate_string(CloseSat_, node, 'CloseSat')
            self.CloseSat = CloseSat_
        elif nodeName_ == 'OpenExceptionSat':
            OpenExceptionSat_ = child_.text
            OpenExceptionSat_ = self.gds_validate_string(OpenExceptionSat_, node, 'OpenExceptionSat')
            self.OpenExceptionSat = OpenExceptionSat_
        elif nodeName_ == 'CloseExceptionSat':
            CloseExceptionSat_ = child_.text
            CloseExceptionSat_ = self.gds_validate_string(CloseExceptionSat_, node, 'CloseExceptionSat')
            self.CloseExceptionSat = CloseExceptionSat_
        elif nodeName_ == 'OpenSun':
            OpenSun_ = child_.text
            OpenSun_ = self.gds_validate_string(OpenSun_, node, 'OpenSun')
            self.OpenSun = OpenSun_
        elif nodeName_ == 'CloseSun':
            CloseSun_ = child_.text
            CloseSun_ = self.gds_validate_string(CloseSun_, node, 'CloseSun')
            self.CloseSun = CloseSun_
        elif nodeName_ == 'OpenExceptionSun':
            OpenExceptionSun_ = child_.text
            OpenExceptionSun_ = self.gds_validate_string(OpenExceptionSun_, node, 'OpenExceptionSun')
            self.OpenExceptionSun = OpenExceptionSun_
        elif nodeName_ == 'CloseExceptionSun':
            CloseExceptionSun_ = child_.text
            CloseExceptionSun_ = self.gds_validate_string(CloseExceptionSun_, node, 'CloseExceptionSun')
            self.CloseExceptionSun = CloseExceptionSun_
        elif nodeName_ == 'Latitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Latitude')
            self.Latitude = fval_
        elif nodeName_ == 'Longitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Longitude')
            self.Longitude = fval_
        elif nodeName_ == 'RadialDistanceInKM':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RadialDistanceInKM')
            self.RadialDistanceInKM = fval_
        elif nodeName_ == 'GMTOffset':
            GMTOffset_ = child_.text
            GMTOffset_ = self.gds_validate_string(GMTOffset_, node, 'GMTOffset')
            self.GMTOffset = GMTOffset_
        elif nodeName_ == 'ActivatedDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ActivatedDate = dval_
        elif nodeName_ == 'DropOffWeekDayAirDom':
            DropOffWeekDayAirDom_ = child_.text
            DropOffWeekDayAirDom_ = self.gds_validate_string(DropOffWeekDayAirDom_, node, 'DropOffWeekDayAirDom')
            self.DropOffWeekDayAirDom = DropOffWeekDayAirDom_
        elif nodeName_ == 'DropOffWeekDayAirUS':
            DropOffWeekDayAirUS_ = child_.text
            DropOffWeekDayAirUS_ = self.gds_validate_string(DropOffWeekDayAirUS_, node, 'DropOffWeekDayAirUS')
            self.DropOffWeekDayAirUS = DropOffWeekDayAirUS_
        elif nodeName_ == 'DropOffWeekDayAirIntl':
            DropOffWeekDayAirIntl_ = child_.text
            DropOffWeekDayAirIntl_ = self.gds_validate_string(DropOffWeekDayAirIntl_, node, 'DropOffWeekDayAirIntl')
            self.DropOffWeekDayAirIntl = DropOffWeekDayAirIntl_
        elif nodeName_ == 'DropOffWeekDayGndDom':
            DropOffWeekDayGndDom_ = child_.text
            DropOffWeekDayGndDom_ = self.gds_validate_string(DropOffWeekDayGndDom_, node, 'DropOffWeekDayGndDom')
            self.DropOffWeekDayGndDom = DropOffWeekDayGndDom_
        elif nodeName_ == 'DropOffWeekDayGndUS':
            DropOffWeekDayGndUS_ = child_.text
            DropOffWeekDayGndUS_ = self.gds_validate_string(DropOffWeekDayGndUS_, node, 'DropOffWeekDayGndUS')
            self.DropOffWeekDayGndUS = DropOffWeekDayGndUS_
        elif nodeName_ == 'DropOffWeekDayGndIntl':
            DropOffWeekDayGndIntl_ = child_.text
            DropOffWeekDayGndIntl_ = self.gds_validate_string(DropOffWeekDayGndIntl_, node, 'DropOffWeekDayGndIntl')
            self.DropOffWeekDayGndIntl = DropOffWeekDayGndIntl_
        elif nodeName_ == 'DropOffSatAirDom':
            DropOffSatAirDom_ = child_.text
            DropOffSatAirDom_ = self.gds_validate_string(DropOffSatAirDom_, node, 'DropOffSatAirDom')
            self.DropOffSatAirDom = DropOffSatAirDom_
        elif nodeName_ == 'DropOffSatAirUS':
            DropOffSatAirUS_ = child_.text
            DropOffSatAirUS_ = self.gds_validate_string(DropOffSatAirUS_, node, 'DropOffSatAirUS')
            self.DropOffSatAirUS = DropOffSatAirUS_
        elif nodeName_ == 'DropOffSatAirIntl':
            DropOffSatAirIntl_ = child_.text
            DropOffSatAirIntl_ = self.gds_validate_string(DropOffSatAirIntl_, node, 'DropOffSatAirIntl')
            self.DropOffSatAirIntl = DropOffSatAirIntl_
        elif nodeName_ == 'DropOffSatGndDom':
            DropOffSatGndDom_ = child_.text
            DropOffSatGndDom_ = self.gds_validate_string(DropOffSatGndDom_, node, 'DropOffSatGndDom')
            self.DropOffSatGndDom = DropOffSatGndDom_
        elif nodeName_ == 'DropOffSatGndUS':
            DropOffSatGndUS_ = child_.text
            DropOffSatGndUS_ = self.gds_validate_string(DropOffSatGndUS_, node, 'DropOffSatGndUS')
            self.DropOffSatGndUS = DropOffSatGndUS_
        elif nodeName_ == 'DropOffSatGndIntl':
            DropOffSatGndIntl_ = child_.text
            DropOffSatGndIntl_ = self.gds_validate_string(DropOffSatGndIntl_, node, 'DropOffSatGndIntl')
            self.DropOffSatGndIntl = DropOffSatGndIntl_
# end class DepotLocation


class LocationAddress(GeneratedsSuper):
    """LocationAddress"""
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, AddressType=None, FloorNumber=None, StreetNumber=None, UnitSuiteApt=None, CityCode=None, CityName=None, ProvinceStateCode=None, CountryCode=None, Direction=None, PostalCode=None, StreetName=None, StreetType=None, Suffix=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.AddressType = AddressType
        self.FloorNumber = FloorNumber
        self.StreetNumber = StreetNumber
        self.UnitSuiteApt = UnitSuiteApt
        self.CityCode = CityCode
        self.CityName = CityName
        self.ProvinceStateCode = ProvinceStateCode
        self.CountryCode = CountryCode
        self.Direction = Direction
        self.validate_Direction(self.Direction)
        self.PostalCode = PostalCode
        self.StreetName = StreetName
        self.StreetType = StreetType
        self.Suffix = Suffix
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationAddress.subclass:
            return LocationAddress.subclass(*args_, **kwargs_)
        else:
            return LocationAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_AddressType(self): return self.AddressType
    def set_AddressType(self, AddressType): self.AddressType = AddressType
    def get_FloorNumber(self): return self.FloorNumber
    def set_FloorNumber(self, FloorNumber): self.FloorNumber = FloorNumber
    def get_StreetNumber(self): return self.StreetNumber
    def set_StreetNumber(self, StreetNumber): self.StreetNumber = StreetNumber
    def get_UnitSuiteApt(self): return self.UnitSuiteApt
    def set_UnitSuiteApt(self, UnitSuiteApt): self.UnitSuiteApt = UnitSuiteApt
    def get_CityCode(self): return self.CityCode
    def set_CityCode(self, CityCode): self.CityCode = CityCode
    def get_CityName(self): return self.CityName
    def set_CityName(self, CityName): self.CityName = CityName
    def get_ProvinceStateCode(self): return self.ProvinceStateCode
    def set_ProvinceStateCode(self, ProvinceStateCode): self.ProvinceStateCode = ProvinceStateCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_Direction(self): return self.Direction
    def set_Direction(self, Direction): self.Direction = Direction
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_StreetName(self): return self.StreetName
    def set_StreetName(self, StreetName): self.StreetName = StreetName
    def get_StreetType(self): return self.StreetType
    def set_StreetType(self, StreetType): self.StreetType = StreetType
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def validate_Direction(self, value):
        # Validate type Direction, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N', 'S', 'E', 'W', 'NW', 'NE', 'SE', 'SO', 'O', 'NO', 'SW']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Direction' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.AddressType is not None or
            self.FloorNumber is not None or
            self.StreetNumber is not None or
            self.UnitSuiteApt is not None or
            self.CityCode is not None or
            self.CityName is not None or
            self.ProvinceStateCode is not None or
            self.CountryCode is not None or
            self.Direction is not None or
            self.PostalCode is not None or
            self.StreetName is not None or
            self.StreetType is not None or
            self.Suffix is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='LocationAddress', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='LocationAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='LocationAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='LocationAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressLine1>%s</tns:AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressLine2>%s</tns:AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressLine3>%s</tns:AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.AddressType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:AddressType>%s</tns:AddressType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressType), input_name='AddressType')), eol_))
        if self.FloorNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:FloorNumber>%s</tns:FloorNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FloorNumber), input_name='FloorNumber')), eol_))
        if self.StreetNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetNumber>%s</tns:StreetNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetNumber), input_name='StreetNumber')), eol_))
        if self.UnitSuiteApt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:UnitSuiteApt>%s</tns:UnitSuiteApt>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UnitSuiteApt), input_name='UnitSuiteApt')), eol_))
        if self.CityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CityCode>%s</tns:CityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CityCode), input_name='CityCode')), eol_))
        if self.CityName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CityName>%s</tns:CityName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CityName), input_name='CityName')), eol_))
        if self.ProvinceStateCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ProvinceStateCode>%s</tns:ProvinceStateCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProvinceStateCode), input_name='ProvinceStateCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CountryCode>%s</tns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.Direction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Direction>%s</tns:Direction>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Direction), input_name='Direction')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PostalCode>%s</tns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.StreetName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetName>%s</tns:StreetName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetName), input_name='StreetName')), eol_))
        if self.StreetType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:StreetType>%s</tns:StreetType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StreetType), input_name='StreetType')), eol_))
        if self.Suffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Suffix>%s</tns:Suffix>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Suffix), input_name='Suffix')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'AddressType':
            AddressType_ = child_.text
            AddressType_ = self.gds_validate_string(AddressType_, node, 'AddressType')
            self.AddressType = AddressType_
        elif nodeName_ == 'FloorNumber':
            FloorNumber_ = child_.text
            FloorNumber_ = self.gds_validate_string(FloorNumber_, node, 'FloorNumber')
            self.FloorNumber = FloorNumber_
        elif nodeName_ == 'StreetNumber':
            StreetNumber_ = child_.text
            StreetNumber_ = self.gds_validate_string(StreetNumber_, node, 'StreetNumber')
            self.StreetNumber = StreetNumber_
        elif nodeName_ == 'UnitSuiteApt':
            UnitSuiteApt_ = child_.text
            UnitSuiteApt_ = self.gds_validate_string(UnitSuiteApt_, node, 'UnitSuiteApt')
            self.UnitSuiteApt = UnitSuiteApt_
        elif nodeName_ == 'CityCode':
            CityCode_ = child_.text
            CityCode_ = self.gds_validate_string(CityCode_, node, 'CityCode')
            self.CityCode = CityCode_
        elif nodeName_ == 'CityName':
            CityName_ = child_.text
            CityName_ = self.gds_validate_string(CityName_, node, 'CityName')
            self.CityName = CityName_
        elif nodeName_ == 'ProvinceStateCode':
            ProvinceStateCode_ = child_.text
            ProvinceStateCode_ = self.gds_validate_string(ProvinceStateCode_, node, 'ProvinceStateCode')
            self.ProvinceStateCode = ProvinceStateCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'Direction':
            Direction_ = child_.text
            Direction_ = self.gds_validate_string(Direction_, node, 'Direction')
            self.Direction = Direction_
            # validate type Direction
            self.validate_Direction(self.Direction)
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'StreetName':
            StreetName_ = child_.text
            StreetName_ = self.gds_validate_string(StreetName_, node, 'StreetName')
            self.StreetName = StreetName_
        elif nodeName_ == 'StreetType':
            StreetType_ = child_.text
            StreetType_ = self.gds_validate_string(StreetType_, node, 'StreetType')
            self.StreetType = StreetType_
        elif nodeName_ == 'Suffix':
            Suffix_ = child_.text
            Suffix_ = self.gds_validate_string(Suffix_, node, 'Suffix')
            self.Suffix = Suffix_
# end class LocationAddress


class ResponseContext(GeneratedsSuper):
    """ResponseContext"""
    subclass = None
    superclass = None
    def __init__(self, ResponseReference=None):
        self.original_tagname_ = None
        self.ResponseReference = ResponseReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseContext)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseContext.subclass:
            return ResponseContext.subclass(*args_, **kwargs_)
        else:
            return ResponseContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseReference(self): return self.ResponseReference
    def set_ResponseReference(self, ResponseReference): self.ResponseReference = ResponseReference
    def hasContent_(self):
        if (
            self.ResponseReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='ResponseContext', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseContext')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseContext')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='ResponseContext', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ResponseContext'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ResponseContext', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ResponseReference>%s</tns:ResponseReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResponseReference), input_name='ResponseReference')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseReference':
            ResponseReference_ = child_.text
            ResponseReference_ = self.gds_validate_string(ResponseReference_, node, 'ResponseReference')
            self.ResponseReference = ResponseReference_
# end class ResponseContext


class GetLocationsByCoordinatesRequestContainer(RequestContainer):
    """GetLocationsByCoordinatesRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, Coordinates=None, SearchOptions=None, LocationTypes=None, HoursOfOperation=None, DaysOfOperation=None):
        self.original_tagname_ = None
        super(GetLocationsByCoordinatesRequestContainer, self).__init__()
        self.Coordinates = Coordinates
        self.SearchOptions = SearchOptions
        self.LocationTypes = LocationTypes
        self.HoursOfOperation = HoursOfOperation
        self.DaysOfOperation = DaysOfOperation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetLocationsByCoordinatesRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetLocationsByCoordinatesRequestContainer.subclass:
            return GetLocationsByCoordinatesRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetLocationsByCoordinatesRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Coordinates(self): return self.Coordinates
    def set_Coordinates(self, Coordinates): self.Coordinates = Coordinates
    def get_SearchOptions(self): return self.SearchOptions
    def set_SearchOptions(self, SearchOptions): self.SearchOptions = SearchOptions
    def get_LocationTypes(self): return self.LocationTypes
    def set_LocationTypes(self, LocationTypes): self.LocationTypes = LocationTypes
    def get_HoursOfOperation(self): return self.HoursOfOperation
    def set_HoursOfOperation(self, HoursOfOperation): self.HoursOfOperation = HoursOfOperation
    def get_DaysOfOperation(self): return self.DaysOfOperation
    def set_DaysOfOperation(self, DaysOfOperation): self.DaysOfOperation = DaysOfOperation
    def hasContent_(self):
        if (
            self.Coordinates is not None or
            self.SearchOptions is not None or
            self.LocationTypes is not None or
            self.HoursOfOperation is not None or
            self.DaysOfOperation is not None or
            super(GetLocationsByCoordinatesRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetLocationsByCoordinatesRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetLocationsByCoordinatesRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByCoordinatesRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetLocationsByCoordinatesRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetLocationsByCoordinatesRequestContainer'):
        super(GetLocationsByCoordinatesRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByCoordinatesRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetLocationsByCoordinatesRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetLocationsByCoordinatesRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Coordinates is not None:
            self.Coordinates.export(outfile, level, namespace_, name_='Coordinates', pretty_print=pretty_print)
        if self.SearchOptions is not None:
            self.SearchOptions.export(outfile, level, namespace_, name_='SearchOptions', pretty_print=pretty_print)
        if self.LocationTypes is not None:
            self.LocationTypes.export(outfile, level, namespace_, name_='LocationTypes', pretty_print=pretty_print)
        if self.HoursOfOperation is not None:
            self.HoursOfOperation.export(outfile, level, namespace_, name_='HoursOfOperation', pretty_print=pretty_print)
        if self.DaysOfOperation is not None:
            self.DaysOfOperation.export(outfile, level, namespace_, name_='DaysOfOperation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetLocationsByCoordinatesRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Coordinates':
            obj_ = Coordinates.factory()
            obj_.build(child_)
            self.Coordinates = obj_
            obj_.original_tagname_ = 'Coordinates'
        elif nodeName_ == 'SearchOptions':
            obj_ = SearchOptions.factory()
            obj_.build(child_)
            self.SearchOptions = obj_
            obj_.original_tagname_ = 'SearchOptions'
        elif nodeName_ == 'LocationTypes':
            obj_ = LocationTypes.factory()
            obj_.build(child_)
            self.LocationTypes = obj_
            obj_.original_tagname_ = 'LocationTypes'
        elif nodeName_ == 'HoursOfOperation':
            obj_ = HoursOfOperation.factory()
            obj_.build(child_)
            self.HoursOfOperation = obj_
            obj_.original_tagname_ = 'HoursOfOperation'
        elif nodeName_ == 'DaysOfOperation':
            obj_ = DaysOfOperation.factory()
            obj_.build(child_)
            self.DaysOfOperation = obj_
            obj_.original_tagname_ = 'DaysOfOperation'
        super(GetLocationsByCoordinatesRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetLocationsByCoordinatesRequestContainer


class Coordinates(GeneratedsSuper):
    """Coordinates"""
    subclass = None
    superclass = None
    def __init__(self, Latitude=None, Longitude=None):
        self.original_tagname_ = None
        self.Latitude = Latitude
        self.Longitude = Longitude
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Coordinates)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Coordinates.subclass:
            return Coordinates.subclass(*args_, **kwargs_)
        else:
            return Coordinates(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Latitude(self): return self.Latitude
    def set_Latitude(self, Latitude): self.Latitude = Latitude
    def get_Longitude(self): return self.Longitude
    def set_Longitude(self, Longitude): self.Longitude = Longitude
    def hasContent_(self):
        if (
            self.Latitude is not None or
            self.Longitude is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='Coordinates', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Coordinates')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Coordinates')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='Coordinates', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Coordinates'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Coordinates', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Latitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Latitude>%s</tns:Latitude>%s' % (self.gds_format_float(self.Latitude, input_name='Latitude'), eol_))
        if self.Longitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:Longitude>%s</tns:Longitude>%s' % (self.gds_format_float(self.Longitude, input_name='Longitude'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Latitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Latitude')
            self.Latitude = fval_
        elif nodeName_ == 'Longitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Longitude')
            self.Longitude = fval_
# end class Coordinates


class GetLocationsByCityRequestContainer(RequestContainer):
    """GetLocationsByCityRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, CountryCode=None, CityName=None, ProvinceStateCode=None, SearchOptions=None, LocationTypes=None, HoursOfOperation=None, DaysOfOperation=None):
        self.original_tagname_ = None
        super(GetLocationsByCityRequestContainer, self).__init__()
        self.CountryCode = CountryCode
        self.CityName = CityName
        self.ProvinceStateCode = ProvinceStateCode
        self.SearchOptions = SearchOptions
        self.LocationTypes = LocationTypes
        self.HoursOfOperation = HoursOfOperation
        self.DaysOfOperation = DaysOfOperation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetLocationsByCityRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetLocationsByCityRequestContainer.subclass:
            return GetLocationsByCityRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetLocationsByCityRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_CityName(self): return self.CityName
    def set_CityName(self, CityName): self.CityName = CityName
    def get_ProvinceStateCode(self): return self.ProvinceStateCode
    def set_ProvinceStateCode(self, ProvinceStateCode): self.ProvinceStateCode = ProvinceStateCode
    def get_SearchOptions(self): return self.SearchOptions
    def set_SearchOptions(self, SearchOptions): self.SearchOptions = SearchOptions
    def get_LocationTypes(self): return self.LocationTypes
    def set_LocationTypes(self, LocationTypes): self.LocationTypes = LocationTypes
    def get_HoursOfOperation(self): return self.HoursOfOperation
    def set_HoursOfOperation(self, HoursOfOperation): self.HoursOfOperation = HoursOfOperation
    def get_DaysOfOperation(self): return self.DaysOfOperation
    def set_DaysOfOperation(self, DaysOfOperation): self.DaysOfOperation = DaysOfOperation
    def hasContent_(self):
        if (
            self.CountryCode is not None or
            self.CityName is not None or
            self.ProvinceStateCode is not None or
            self.SearchOptions is not None or
            self.LocationTypes is not None or
            self.HoursOfOperation is not None or
            self.DaysOfOperation is not None or
            super(GetLocationsByCityRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetLocationsByCityRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetLocationsByCityRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByCityRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetLocationsByCityRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetLocationsByCityRequestContainer'):
        super(GetLocationsByCityRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByCityRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetLocationsByCityRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetLocationsByCityRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CountryCode>%s</tns:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.CityName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:CityName>%s</tns:CityName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CityName), input_name='CityName')), eol_))
        if self.ProvinceStateCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:ProvinceStateCode>%s</tns:ProvinceStateCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProvinceStateCode), input_name='ProvinceStateCode')), eol_))
        if self.SearchOptions is not None:
            self.SearchOptions.export(outfile, level, namespace_, name_='SearchOptions', pretty_print=pretty_print)
        if self.LocationTypes is not None:
            self.LocationTypes.export(outfile, level, namespace_, name_='LocationTypes', pretty_print=pretty_print)
        if self.HoursOfOperation is not None:
            self.HoursOfOperation.export(outfile, level, namespace_, name_='HoursOfOperation', pretty_print=pretty_print)
        if self.DaysOfOperation is not None:
            self.DaysOfOperation.export(outfile, level, namespace_, name_='DaysOfOperation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetLocationsByCityRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'CityName':
            CityName_ = child_.text
            CityName_ = self.gds_validate_string(CityName_, node, 'CityName')
            self.CityName = CityName_
        elif nodeName_ == 'ProvinceStateCode':
            ProvinceStateCode_ = child_.text
            ProvinceStateCode_ = self.gds_validate_string(ProvinceStateCode_, node, 'ProvinceStateCode')
            self.ProvinceStateCode = ProvinceStateCode_
        elif nodeName_ == 'SearchOptions':
            obj_ = SearchOptions.factory()
            obj_.build(child_)
            self.SearchOptions = obj_
            obj_.original_tagname_ = 'SearchOptions'
        elif nodeName_ == 'LocationTypes':
            obj_ = LocationTypes.factory()
            obj_.build(child_)
            self.LocationTypes = obj_
            obj_.original_tagname_ = 'LocationTypes'
        elif nodeName_ == 'HoursOfOperation':
            obj_ = HoursOfOperation.factory()
            obj_.build(child_)
            self.HoursOfOperation = obj_
            obj_.original_tagname_ = 'HoursOfOperation'
        elif nodeName_ == 'DaysOfOperation':
            obj_ = DaysOfOperation.factory()
            obj_.build(child_)
            self.DaysOfOperation = obj_
            obj_.original_tagname_ = 'DaysOfOperation'
        super(GetLocationsByCityRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetLocationsByCityRequestContainer


class GetLocationsByPointOfInterestRequestContainer(RequestContainer):
    """GetLocationsByPointOfInterestRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, PointOfInterest=None, SearchOptions=None, LocationTypes=None, HoursOfOperation=None, DaysOfOperation=None):
        self.original_tagname_ = None
        super(GetLocationsByPointOfInterestRequestContainer, self).__init__()
        self.PointOfInterest = PointOfInterest
        self.SearchOptions = SearchOptions
        self.LocationTypes = LocationTypes
        self.HoursOfOperation = HoursOfOperation
        self.DaysOfOperation = DaysOfOperation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetLocationsByPointOfInterestRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetLocationsByPointOfInterestRequestContainer.subclass:
            return GetLocationsByPointOfInterestRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetLocationsByPointOfInterestRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PointOfInterest(self): return self.PointOfInterest
    def set_PointOfInterest(self, PointOfInterest): self.PointOfInterest = PointOfInterest
    def get_SearchOptions(self): return self.SearchOptions
    def set_SearchOptions(self, SearchOptions): self.SearchOptions = SearchOptions
    def get_LocationTypes(self): return self.LocationTypes
    def set_LocationTypes(self, LocationTypes): self.LocationTypes = LocationTypes
    def get_HoursOfOperation(self): return self.HoursOfOperation
    def set_HoursOfOperation(self, HoursOfOperation): self.HoursOfOperation = HoursOfOperation
    def get_DaysOfOperation(self): return self.DaysOfOperation
    def set_DaysOfOperation(self, DaysOfOperation): self.DaysOfOperation = DaysOfOperation
    def hasContent_(self):
        if (
            self.PointOfInterest is not None or
            self.SearchOptions is not None or
            self.LocationTypes is not None or
            self.HoursOfOperation is not None or
            self.DaysOfOperation is not None or
            super(GetLocationsByPointOfInterestRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetLocationsByPointOfInterestRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetLocationsByPointOfInterestRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByPointOfInterestRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetLocationsByPointOfInterestRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetLocationsByPointOfInterestRequestContainer'):
        super(GetLocationsByPointOfInterestRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByPointOfInterestRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetLocationsByPointOfInterestRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetLocationsByPointOfInterestRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PointOfInterest is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PointOfInterest>%s</tns:PointOfInterest>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PointOfInterest), input_name='PointOfInterest')), eol_))
        if self.SearchOptions is not None:
            self.SearchOptions.export(outfile, level, namespace_, name_='SearchOptions', pretty_print=pretty_print)
        if self.LocationTypes is not None:
            self.LocationTypes.export(outfile, level, namespace_, name_='LocationTypes', pretty_print=pretty_print)
        if self.HoursOfOperation is not None:
            self.HoursOfOperation.export(outfile, level, namespace_, name_='HoursOfOperation', pretty_print=pretty_print)
        if self.DaysOfOperation is not None:
            self.DaysOfOperation.export(outfile, level, namespace_, name_='DaysOfOperation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetLocationsByPointOfInterestRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PointOfInterest':
            PointOfInterest_ = child_.text
            PointOfInterest_ = self.gds_validate_string(PointOfInterest_, node, 'PointOfInterest')
            self.PointOfInterest = PointOfInterest_
        elif nodeName_ == 'SearchOptions':
            obj_ = SearchOptions.factory()
            obj_.build(child_)
            self.SearchOptions = obj_
            obj_.original_tagname_ = 'SearchOptions'
        elif nodeName_ == 'LocationTypes':
            obj_ = LocationTypes.factory()
            obj_.build(child_)
            self.LocationTypes = obj_
            obj_.original_tagname_ = 'LocationTypes'
        elif nodeName_ == 'HoursOfOperation':
            obj_ = HoursOfOperation.factory()
            obj_.build(child_)
            self.HoursOfOperation = obj_
            obj_.original_tagname_ = 'HoursOfOperation'
        elif nodeName_ == 'DaysOfOperation':
            obj_ = DaysOfOperation.factory()
            obj_.build(child_)
            self.DaysOfOperation = obj_
            obj_.original_tagname_ = 'DaysOfOperation'
        super(GetLocationsByPointOfInterestRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetLocationsByPointOfInterestRequestContainer


class GetLocationsByPostalCodeRequestContainer(RequestContainer):
    """GetLocationsByPostalCodeRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, PostalCode=None, SearchOptions=None, LocationTypes=None, HoursOfOperation=None, DaysOfOperation=None):
        self.original_tagname_ = None
        super(GetLocationsByPostalCodeRequestContainer, self).__init__()
        self.PostalCode = PostalCode
        self.SearchOptions = SearchOptions
        self.LocationTypes = LocationTypes
        self.HoursOfOperation = HoursOfOperation
        self.DaysOfOperation = DaysOfOperation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetLocationsByPostalCodeRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetLocationsByPostalCodeRequestContainer.subclass:
            return GetLocationsByPostalCodeRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetLocationsByPostalCodeRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_SearchOptions(self): return self.SearchOptions
    def set_SearchOptions(self, SearchOptions): self.SearchOptions = SearchOptions
    def get_LocationTypes(self): return self.LocationTypes
    def set_LocationTypes(self, LocationTypes): self.LocationTypes = LocationTypes
    def get_HoursOfOperation(self): return self.HoursOfOperation
    def set_HoursOfOperation(self, HoursOfOperation): self.HoursOfOperation = HoursOfOperation
    def get_DaysOfOperation(self): return self.DaysOfOperation
    def set_DaysOfOperation(self, DaysOfOperation): self.DaysOfOperation = DaysOfOperation
    def hasContent_(self):
        if (
            self.PostalCode is not None or
            self.SearchOptions is not None or
            self.LocationTypes is not None or
            self.HoursOfOperation is not None or
            self.DaysOfOperation is not None or
            super(GetLocationsByPostalCodeRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetLocationsByPostalCodeRequestContainer', namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetLocationsByPostalCodeRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByPostalCodeRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetLocationsByPostalCodeRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetLocationsByPostalCodeRequestContainer'):
        super(GetLocationsByPostalCodeRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByPostalCodeRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetLocationsByPostalCodeRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetLocationsByPostalCodeRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tns:PostalCode>%s</tns:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.SearchOptions is not None:
            self.SearchOptions.export(outfile, level, namespace_, name_='SearchOptions', pretty_print=pretty_print)
        if self.LocationTypes is not None:
            self.LocationTypes.export(outfile, level, namespace_, name_='LocationTypes', pretty_print=pretty_print)
        if self.HoursOfOperation is not None:
            self.HoursOfOperation.export(outfile, level, namespace_, name_='HoursOfOperation', pretty_print=pretty_print)
        if self.DaysOfOperation is not None:
            self.DaysOfOperation.export(outfile, level, namespace_, name_='DaysOfOperation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetLocationsByPostalCodeRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'SearchOptions':
            obj_ = SearchOptions.factory()
            obj_.build(child_)
            self.SearchOptions = obj_
            obj_.original_tagname_ = 'SearchOptions'
        elif nodeName_ == 'LocationTypes':
            obj_ = LocationTypes.factory()
            obj_.build(child_)
            self.LocationTypes = obj_
            obj_.original_tagname_ = 'LocationTypes'
        elif nodeName_ == 'HoursOfOperation':
            obj_ = HoursOfOperation.factory()
            obj_.build(child_)
            self.HoursOfOperation = obj_
            obj_.original_tagname_ = 'HoursOfOperation'
        elif nodeName_ == 'DaysOfOperation':
            obj_ = DaysOfOperation.factory()
            obj_.build(child_)
            self.DaysOfOperation = obj_
            obj_.original_tagname_ = 'DaysOfOperation'
        super(GetLocationsByPostalCodeRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetLocationsByPostalCodeRequestContainer


class GetLocationsResponseContainer(ResponseContainer):
    """GetLocationsResponse"""
    subclass = None
    superclass = ResponseContainer
    def __init__(self, Locations=None):
        self.original_tagname_ = None
        super(GetLocationsResponseContainer, self).__init__()
        self.Locations = Locations
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetLocationsResponseContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetLocationsResponseContainer.subclass:
            return GetLocationsResponseContainer.subclass(*args_, **kwargs_)
        else:
            return GetLocationsResponseContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Locations(self): return self.Locations
    def set_Locations(self, Locations): self.Locations = Locations
    def hasContent_(self):
        if (
            self.Locations is not None or
            super(GetLocationsResponseContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetLocationsResponseContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetLocationsResponseContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsResponseContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetLocationsResponseContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetLocationsResponseContainer'):
        super(GetLocationsResponseContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsResponseContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetLocationsResponseContainer', fromsubclass_=False, pretty_print=True):
        super(GetLocationsResponseContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Locations is not None:
            self.Locations.export(outfile, level, namespace_, name_='Locations', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetLocationsResponseContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Locations':
            obj_ = ArrayOfDepotLocation.factory()
            obj_.build(child_)
            self.Locations = obj_
            obj_.original_tagname_ = 'Locations'
        super(GetLocationsResponseContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetLocationsResponseContainer


class GetLocationsByAddressRequestContainer(RequestContainer):
    """GetLocationsByAddressRequest"""
    subclass = None
    superclass = RequestContainer
    def __init__(self, Address=None, SearchOptions=None, LocationTypes=None, HoursOfOperation=None, DaysOfOperation=None):
        self.original_tagname_ = None
        super(GetLocationsByAddressRequestContainer, self).__init__()
        self.Address = Address
        self.SearchOptions = SearchOptions
        self.LocationTypes = LocationTypes
        self.HoursOfOperation = HoursOfOperation
        self.DaysOfOperation = DaysOfOperation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetLocationsByAddressRequestContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetLocationsByAddressRequestContainer.subclass:
            return GetLocationsByAddressRequestContainer.subclass(*args_, **kwargs_)
        else:
            return GetLocationsByAddressRequestContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_SearchOptions(self): return self.SearchOptions
    def set_SearchOptions(self, SearchOptions): self.SearchOptions = SearchOptions
    def get_LocationTypes(self): return self.LocationTypes
    def set_LocationTypes(self, LocationTypes): self.LocationTypes = LocationTypes
    def get_HoursOfOperation(self): return self.HoursOfOperation
    def set_HoursOfOperation(self, HoursOfOperation): self.HoursOfOperation = HoursOfOperation
    def get_DaysOfOperation(self): return self.DaysOfOperation
    def set_DaysOfOperation(self, DaysOfOperation): self.DaysOfOperation = DaysOfOperation
    def hasContent_(self):
        if (
            self.Address is not None or
            self.SearchOptions is not None or
            self.LocationTypes is not None or
            self.HoursOfOperation is not None or
            self.DaysOfOperation is not None or
            super(GetLocationsByAddressRequestContainer, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='tns:', name_='GetLocationsByAddressRequestContainer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetLocationsByAddressRequestContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByAddressRequestContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='tns:', name_='GetLocationsByAddressRequestContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='GetLocationsByAddressRequestContainer'):
        super(GetLocationsByAddressRequestContainer, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GetLocationsByAddressRequestContainer')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='GetLocationsByAddressRequestContainer', fromsubclass_=False, pretty_print=True):
        super(GetLocationsByAddressRequestContainer, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.SearchOptions is not None:
            self.SearchOptions.export(outfile, level, namespace_, name_='SearchOptions', pretty_print=pretty_print)
        if self.LocationTypes is not None:
            self.LocationTypes.export(outfile, level, namespace_, name_='LocationTypes', pretty_print=pretty_print)
        if self.HoursOfOperation is not None:
            self.HoursOfOperation.export(outfile, level, namespace_, name_='HoursOfOperation', pretty_print=pretty_print)
        if self.DaysOfOperation is not None:
            self.DaysOfOperation.export(outfile, level, namespace_, name_='DaysOfOperation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(GetLocationsByAddressRequestContainer, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'SearchOptions':
            obj_ = SearchOptions.factory()
            obj_.build(child_)
            self.SearchOptions = obj_
            obj_.original_tagname_ = 'SearchOptions'
        elif nodeName_ == 'LocationTypes':
            obj_ = LocationTypes.factory()
            obj_.build(child_)
            self.LocationTypes = obj_
            obj_.original_tagname_ = 'LocationTypes'
        elif nodeName_ == 'HoursOfOperation':
            obj_ = HoursOfOperation.factory()
            obj_.build(child_)
            self.HoursOfOperation = obj_
            obj_.original_tagname_ = 'HoursOfOperation'
        elif nodeName_ == 'DaysOfOperation':
            obj_ = DaysOfOperation.factory()
            obj_.build(child_)
            self.DaysOfOperation = obj_
            obj_.original_tagname_ = 'DaysOfOperation'
        super(GetLocationsByAddressRequestContainer, self).buildChildren(child_, node, nodeName_, True)
# end class GetLocationsByAddressRequestContainer


GDSClassesMapping = {
    'Address': Address,
    'ArrayOfDepotLocation': ArrayOfDepotLocation,
    'ArrayOfError': ArrayOfError,
    'ArrayOfInformationalMessage': ArrayOfInformationalMessage,
    'Coordinates': Coordinates,
    'DaysOfOperation': DaysOfOperation,
    'DepotLocation': DepotLocation,
    'Error': Error,
    'GetLocationsByAddressRequest': GetLocationsByAddressRequestContainer,
    'GetLocationsByAddressRequestContainer': GetLocationsByAddressRequestContainer,
    'GetLocationsByCityRequest': GetLocationsByCityRequestContainer,
    'GetLocationsByCityRequestContainer': GetLocationsByCityRequestContainer,
    'GetLocationsByCoordinatesRequest': GetLocationsByCoordinatesRequestContainer,
    'GetLocationsByCoordinatesRequestContainer': GetLocationsByCoordinatesRequestContainer,
    'GetLocationsByPointOfInterestRequest': GetLocationsByPointOfInterestRequestContainer,
    'GetLocationsByPointOfInterestRequestContainer': GetLocationsByPointOfInterestRequestContainer,
    'GetLocationsByPostalCodeRequest': GetLocationsByPostalCodeRequestContainer,
    'GetLocationsByPostalCodeRequestContainer': GetLocationsByPostalCodeRequestContainer,
    'GetLocationsResponse': GetLocationsResponseContainer,
    'GetLocationsResponseContainer': GetLocationsResponseContainer,
    'HoursOfOperation': HoursOfOperation,
    'InformationalMessage': InformationalMessage,
    'LocationAddress': LocationAddress,
    'LocationTypes': LocationTypes,
    'RequestContainer': RequestContainer,
    'RequestContext': RequestContext,
    'ResponseContainer': ResponseContainer,
    'ResponseContext': ResponseContext,
    'ResponseInformation': ResponseInformation,
    'SearchOptions': SearchOptions,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetLocationsByAddressRequestContainer'
        rootClass = GetLocationsByAddressRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetLocationsByAddressRequestContainer'
        rootClass = GetLocationsByAddressRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetLocationsByAddressRequestContainer'
        rootClass = GetLocationsByAddressRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://purolator.com/pws/datatypes/v1"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetLocationsByAddressRequestContainer'
        rootClass = GetLocationsByAddressRequestContainer
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from LocatorService.xsd import *\n\n')
        sys.stdout.write('import LocatorService.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "ArrayOfDepotLocation",
    "ArrayOfError",
    "ArrayOfInformationalMessage",
    "Coordinates",
    "DaysOfOperation",
    "DepotLocation",
    "Error",
    "GetLocationsByAddressRequestContainer",
    "GetLocationsByCityRequestContainer",
    "GetLocationsByCoordinatesRequestContainer",
    "GetLocationsByPointOfInterestRequestContainer",
    "GetLocationsByPostalCodeRequestContainer",
    "GetLocationsResponseContainer",
    "HoursOfOperation",
    "InformationalMessage",
    "LocationAddress",
    "LocationTypes",
    "RequestContainer",
    "RequestContext",
    "ResponseContainer",
    "ResponseContext",
    "ResponseInformation",
    "SearchOptions"
]
