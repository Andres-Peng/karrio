#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Apr 10 09:01:50 2019 by generateDS.py version 2.30.11.
# Python 3.6.7 (v3.6.7:6ec5cf24b7, Oct 20 2018, 03:02:14)  [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('-o', 'pyschenker/__init__.py')
#
# Command line arguments:
#   schemas/PublicMethodesTypes.xml
#
# Command line:
#   generateDS -o "pyschenker/__init__.py" schemas/PublicMethodesTypes.xml
#
# Current working directory (os.getcwd()):
#   py-dbshenker
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class TrackAndTrace(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, password=None, id=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.username = username
        self.password = password
        self.id = id
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAndTrace)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAndTrace.subclass:
            return TrackAndTrace.subclass(*args_, **kwargs_)
        else:
            return TrackAndTrace(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self):
        return self.username
    def set_username(self, username):
        self.username = username
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def hasContent_(self):
        if (
            self.username is not None or
            self.password is not None or
            self.id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTrace', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAndTrace')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAndTrace')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAndTrace', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAndTrace'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTrace', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.username is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%susername>%s</%susername>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.username), input_name='username')), namespaceprefix_ , eol_))
        if self.password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'username':
            username_ = child_.text
            username_ = self.gds_validate_string(username_, node, 'username')
            self.username = username_
        elif nodeName_ == 'password':
            password_ = child_.text
            password_ = self.gds_validate_string(password_, node, 'password')
            self.password = password_
        elif nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
# end class TrackAndTrace


class TrackAndTraceResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackAndTraceResult=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TrackAndTraceResult = TrackAndTraceResult
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAndTraceResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAndTraceResponse.subclass:
            return TrackAndTraceResponse.subclass(*args_, **kwargs_)
        else:
            return TrackAndTraceResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackAndTraceResult(self):
        return self.TrackAndTraceResult
    def set_TrackAndTraceResult(self, TrackAndTraceResult):
        self.TrackAndTraceResult = TrackAndTraceResult
    def hasContent_(self):
        if (
            self.TrackAndTraceResult is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTraceResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAndTraceResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAndTraceResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAndTraceResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAndTraceResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTraceResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackAndTraceResult is not None:
            self.TrackAndTraceResult.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackAndTraceResult', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackAndTraceResult':
            obj_ = TrackAndTraceResultat.factory(parent_object_=self)
            obj_.build(child_)
            self.TrackAndTraceResult = obj_
            obj_.original_tagname_ = 'TrackAndTraceResult'
# end class TrackAndTraceResponse


class TrackAndTraceResultat(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseCode=None, ResponseMessage=None, AmountOfShipments=None, Shipments=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ResponseCode = ResponseCode
        self.ResponseMessage = ResponseMessage
        self.AmountOfShipments = AmountOfShipments
        self.Shipments = Shipments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAndTraceResultat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAndTraceResultat.subclass:
            return TrackAndTraceResultat.subclass(*args_, **kwargs_)
        else:
            return TrackAndTraceResultat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseCode(self):
        return self.ResponseCode
    def set_ResponseCode(self, ResponseCode):
        self.ResponseCode = ResponseCode
    def get_ResponseMessage(self):
        return self.ResponseMessage
    def set_ResponseMessage(self, ResponseMessage):
        self.ResponseMessage = ResponseMessage
    def get_AmountOfShipments(self):
        return self.AmountOfShipments
    def set_AmountOfShipments(self, AmountOfShipments):
        self.AmountOfShipments = AmountOfShipments
    def get_Shipments(self):
        return self.Shipments
    def set_Shipments(self, Shipments):
        self.Shipments = Shipments
    def hasContent_(self):
        if (
            self.ResponseCode is not None or
            self.ResponseMessage is not None or
            self.AmountOfShipments is not None or
            self.Shipments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTraceResultat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAndTraceResultat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAndTraceResultat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAndTraceResultat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAndTraceResultat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTraceResultat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseCode>%s</%sResponseCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseCode), input_name='ResponseCode')), namespaceprefix_ , eol_))
        if self.ResponseMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseMessage>%s</%sResponseMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseMessage), input_name='ResponseMessage')), namespaceprefix_ , eol_))
        if self.AmountOfShipments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountOfShipments>%s</%sAmountOfShipments>%s' % (namespaceprefix_ , self.gds_format_integer(self.AmountOfShipments, input_name='AmountOfShipments'), namespaceprefix_ , eol_))
        if self.Shipments is not None:
            self.Shipments.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipments', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseCode':
            ResponseCode_ = child_.text
            ResponseCode_ = self.gds_validate_string(ResponseCode_, node, 'ResponseCode')
            self.ResponseCode = ResponseCode_
        elif nodeName_ == 'ResponseMessage':
            ResponseMessage_ = child_.text
            ResponseMessage_ = self.gds_validate_string(ResponseMessage_, node, 'ResponseMessage')
            self.ResponseMessage = ResponseMessage_
        elif nodeName_ == 'AmountOfShipments' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AmountOfShipments')
            self.AmountOfShipments = ival_
        elif nodeName_ == 'Shipments':
            obj_ = ArrayOfShipment.factory(parent_object_=self)
            obj_.build(child_)
            self.Shipments = obj_
            obj_.original_tagname_ = 'Shipments'
# end class TrackAndTraceResultat


class ArrayOfShipment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Shipment=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Shipment is None:
            self.Shipment = []
        else:
            self.Shipment = Shipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfShipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfShipment.subclass:
            return ArrayOfShipment.subclass(*args_, **kwargs_)
        else:
            return ArrayOfShipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Shipment(self):
        return self.Shipment
    def set_Shipment(self, Shipment):
        self.Shipment = Shipment
    def add_Shipment(self, value):
        self.Shipment.append(value)
    def add_Shipment(self, value):
        self.Shipment.append(value)
    def insert_Shipment_at(self, index, value):
        self.Shipment.insert(index, value)
    def replace_Shipment_at(self, index, value):
        self.Shipment[index] = value
    def hasContent_(self):
        if (
            self.Shipment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfShipment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfShipment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayOfShipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArrayOfShipment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArrayOfShipment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfShipment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Shipment_ in self.Shipment:
            Shipment_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Shipment':
            obj_ = Shipment.factory(parent_object_=self)
            obj_.build(child_)
            self.Shipment.append(obj_)
            obj_.original_tagname_ = 'Shipment'
# end class ArrayOfShipment


class Shipment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AmountOfPods=None, AmountOfKollies=None, ShipmentMessage=None, Fraktbrevnr=None, SendersRef=None, SendKundenv=None, ProduktKD=None, ProduktKDTxt=None, IlevStedNr=None, PostStednv=None, InnlevDt=None, UtlevDt=None, UtlevKl=None, UlevSignNv=None, Vekt=None, Volum=None, Kolli=None, MottKundenv=None, UlevAdrNv=None, UlevAdrNv2=None, UtlevStedNr=None, UtlevStedNv=None, GiroKidTx=None, GarOppfyltJn=None, AmountOfKolliesDelivered=None, NetFreight=None, CollectionSurcharge=None, Documents=None, OrdreReferanse=None, SendingTilstandKd=None, SendingTilstand=None, TilstandAvvikJN=None, UtslippCo2Kg=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AmountOfPods = AmountOfPods
        self.AmountOfKollies = AmountOfKollies
        self.ShipmentMessage = ShipmentMessage
        self.Fraktbrevnr = Fraktbrevnr
        self.SendersRef = SendersRef
        self.SendKundenv = SendKundenv
        self.ProduktKD = ProduktKD
        self.ProduktKDTxt = ProduktKDTxt
        self.IlevStedNr = IlevStedNr
        self.PostStednv = PostStednv
        if isinstance(InnlevDt, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InnlevDt, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = InnlevDt
        self.InnlevDt = initvalue_
        if isinstance(UtlevDt, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UtlevDt, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = UtlevDt
        self.UtlevDt = initvalue_
        self.UtlevKl = UtlevKl
        self.UlevSignNv = UlevSignNv
        self.Vekt = Vekt
        self.Volum = Volum
        self.Kolli = Kolli
        self.MottKundenv = MottKundenv
        self.UlevAdrNv = UlevAdrNv
        self.UlevAdrNv2 = UlevAdrNv2
        self.UtlevStedNr = UtlevStedNr
        self.UtlevStedNv = UtlevStedNv
        self.GiroKidTx = GiroKidTx
        self.GarOppfyltJn = GarOppfyltJn
        self.AmountOfKolliesDelivered = AmountOfKolliesDelivered
        self.NetFreight = NetFreight
        self.CollectionSurcharge = CollectionSurcharge
        self.Documents = Documents
        self.OrdreReferanse = OrdreReferanse
        self.SendingTilstandKd = SendingTilstandKd
        self.SendingTilstand = SendingTilstand
        self.TilstandAvvikJN = TilstandAvvikJN
        self.UtslippCo2Kg = UtslippCo2Kg
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Shipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Shipment.subclass:
            return Shipment.subclass(*args_, **kwargs_)
        else:
            return Shipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AmountOfPods(self):
        return self.AmountOfPods
    def set_AmountOfPods(self, AmountOfPods):
        self.AmountOfPods = AmountOfPods
    def get_AmountOfKollies(self):
        return self.AmountOfKollies
    def set_AmountOfKollies(self, AmountOfKollies):
        self.AmountOfKollies = AmountOfKollies
    def get_ShipmentMessage(self):
        return self.ShipmentMessage
    def set_ShipmentMessage(self, ShipmentMessage):
        self.ShipmentMessage = ShipmentMessage
    def get_Fraktbrevnr(self):
        return self.Fraktbrevnr
    def set_Fraktbrevnr(self, Fraktbrevnr):
        self.Fraktbrevnr = Fraktbrevnr
    def get_SendersRef(self):
        return self.SendersRef
    def set_SendersRef(self, SendersRef):
        self.SendersRef = SendersRef
    def get_SendKundenv(self):
        return self.SendKundenv
    def set_SendKundenv(self, SendKundenv):
        self.SendKundenv = SendKundenv
    def get_ProduktKD(self):
        return self.ProduktKD
    def set_ProduktKD(self, ProduktKD):
        self.ProduktKD = ProduktKD
    def get_ProduktKDTxt(self):
        return self.ProduktKDTxt
    def set_ProduktKDTxt(self, ProduktKDTxt):
        self.ProduktKDTxt = ProduktKDTxt
    def get_IlevStedNr(self):
        return self.IlevStedNr
    def set_IlevStedNr(self, IlevStedNr):
        self.IlevStedNr = IlevStedNr
    def get_PostStednv(self):
        return self.PostStednv
    def set_PostStednv(self, PostStednv):
        self.PostStednv = PostStednv
    def get_InnlevDt(self):
        return self.InnlevDt
    def set_InnlevDt(self, InnlevDt):
        self.InnlevDt = InnlevDt
    def get_UtlevDt(self):
        return self.UtlevDt
    def set_UtlevDt(self, UtlevDt):
        self.UtlevDt = UtlevDt
    def get_UtlevKl(self):
        return self.UtlevKl
    def set_UtlevKl(self, UtlevKl):
        self.UtlevKl = UtlevKl
    def get_UlevSignNv(self):
        return self.UlevSignNv
    def set_UlevSignNv(self, UlevSignNv):
        self.UlevSignNv = UlevSignNv
    def get_Vekt(self):
        return self.Vekt
    def set_Vekt(self, Vekt):
        self.Vekt = Vekt
    def get_Volum(self):
        return self.Volum
    def set_Volum(self, Volum):
        self.Volum = Volum
    def get_Kolli(self):
        return self.Kolli
    def set_Kolli(self, Kolli):
        self.Kolli = Kolli
    def get_MottKundenv(self):
        return self.MottKundenv
    def set_MottKundenv(self, MottKundenv):
        self.MottKundenv = MottKundenv
    def get_UlevAdrNv(self):
        return self.UlevAdrNv
    def set_UlevAdrNv(self, UlevAdrNv):
        self.UlevAdrNv = UlevAdrNv
    def get_UlevAdrNv2(self):
        return self.UlevAdrNv2
    def set_UlevAdrNv2(self, UlevAdrNv2):
        self.UlevAdrNv2 = UlevAdrNv2
    def get_UtlevStedNr(self):
        return self.UtlevStedNr
    def set_UtlevStedNr(self, UtlevStedNr):
        self.UtlevStedNr = UtlevStedNr
    def get_UtlevStedNv(self):
        return self.UtlevStedNv
    def set_UtlevStedNv(self, UtlevStedNv):
        self.UtlevStedNv = UtlevStedNv
    def get_GiroKidTx(self):
        return self.GiroKidTx
    def set_GiroKidTx(self, GiroKidTx):
        self.GiroKidTx = GiroKidTx
    def get_GarOppfyltJn(self):
        return self.GarOppfyltJn
    def set_GarOppfyltJn(self, GarOppfyltJn):
        self.GarOppfyltJn = GarOppfyltJn
    def get_AmountOfKolliesDelivered(self):
        return self.AmountOfKolliesDelivered
    def set_AmountOfKolliesDelivered(self, AmountOfKolliesDelivered):
        self.AmountOfKolliesDelivered = AmountOfKolliesDelivered
    def get_NetFreight(self):
        return self.NetFreight
    def set_NetFreight(self, NetFreight):
        self.NetFreight = NetFreight
    def get_CollectionSurcharge(self):
        return self.CollectionSurcharge
    def set_CollectionSurcharge(self, CollectionSurcharge):
        self.CollectionSurcharge = CollectionSurcharge
    def get_Documents(self):
        return self.Documents
    def set_Documents(self, Documents):
        self.Documents = Documents
    def get_OrdreReferanse(self):
        return self.OrdreReferanse
    def set_OrdreReferanse(self, OrdreReferanse):
        self.OrdreReferanse = OrdreReferanse
    def get_SendingTilstandKd(self):
        return self.SendingTilstandKd
    def set_SendingTilstandKd(self, SendingTilstandKd):
        self.SendingTilstandKd = SendingTilstandKd
    def get_SendingTilstand(self):
        return self.SendingTilstand
    def set_SendingTilstand(self, SendingTilstand):
        self.SendingTilstand = SendingTilstand
    def get_TilstandAvvikJN(self):
        return self.TilstandAvvikJN
    def set_TilstandAvvikJN(self, TilstandAvvikJN):
        self.TilstandAvvikJN = TilstandAvvikJN
    def get_UtslippCo2Kg(self):
        return self.UtslippCo2Kg
    def set_UtslippCo2Kg(self, UtslippCo2Kg):
        self.UtslippCo2Kg = UtslippCo2Kg
    def hasContent_(self):
        if (
            self.AmountOfPods is not None or
            self.AmountOfKollies is not None or
            self.ShipmentMessage is not None or
            self.Fraktbrevnr is not None or
            self.SendersRef is not None or
            self.SendKundenv is not None or
            self.ProduktKD is not None or
            self.ProduktKDTxt is not None or
            self.IlevStedNr is not None or
            self.PostStednv is not None or
            self.InnlevDt is not None or
            self.UtlevDt is not None or
            self.UtlevKl is not None or
            self.UlevSignNv is not None or
            self.Vekt is not None or
            self.Volum is not None or
            self.Kolli is not None or
            self.MottKundenv is not None or
            self.UlevAdrNv is not None or
            self.UlevAdrNv2 is not None or
            self.UtlevStedNr is not None or
            self.UtlevStedNv is not None or
            self.GiroKidTx is not None or
            self.GarOppfyltJn is not None or
            self.AmountOfKolliesDelivered is not None or
            self.NetFreight is not None or
            self.CollectionSurcharge is not None or
            self.Documents is not None or
            self.OrdreReferanse is not None or
            self.SendingTilstandKd is not None or
            self.SendingTilstand is not None or
            self.TilstandAvvikJN is not None or
            self.UtslippCo2Kg is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Shipment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Shipment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Shipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Shipment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Shipment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Shipment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AmountOfPods is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountOfPods>%s</%sAmountOfPods>%s' % (namespaceprefix_ , self.gds_format_integer(self.AmountOfPods, input_name='AmountOfPods'), namespaceprefix_ , eol_))
        if self.AmountOfKollies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountOfKollies>%s</%sAmountOfKollies>%s' % (namespaceprefix_ , self.gds_format_integer(self.AmountOfKollies, input_name='AmountOfKollies'), namespaceprefix_ , eol_))
        if self.ShipmentMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentMessage>%s</%sShipmentMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentMessage), input_name='ShipmentMessage')), namespaceprefix_ , eol_))
        if self.Fraktbrevnr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFraktbrevnr>%s</%sFraktbrevnr>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Fraktbrevnr), input_name='Fraktbrevnr')), namespaceprefix_ , eol_))
        if self.SendersRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSendersRef>%s</%sSendersRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SendersRef), input_name='SendersRef')), namespaceprefix_ , eol_))
        if self.SendKundenv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSendKundenv>%s</%sSendKundenv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SendKundenv), input_name='SendKundenv')), namespaceprefix_ , eol_))
        if self.ProduktKD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProduktKD>%s</%sProduktKD>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProduktKD), input_name='ProduktKD')), namespaceprefix_ , eol_))
        if self.ProduktKDTxt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProduktKDTxt>%s</%sProduktKDTxt>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProduktKDTxt), input_name='ProduktKDTxt')), namespaceprefix_ , eol_))
        if self.IlevStedNr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIlevStedNr>%s</%sIlevStedNr>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IlevStedNr), input_name='IlevStedNr')), namespaceprefix_ , eol_))
        if self.PostStednv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostStednv>%s</%sPostStednv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostStednv), input_name='PostStednv')), namespaceprefix_ , eol_))
        if self.InnlevDt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInnlevDt>%s</%sInnlevDt>%s' % (namespaceprefix_ , self.gds_format_datetime(self.InnlevDt, input_name='InnlevDt'), namespaceprefix_ , eol_))
        if self.UtlevDt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtlevDt>%s</%sUtlevDt>%s' % (namespaceprefix_ , self.gds_format_datetime(self.UtlevDt, input_name='UtlevDt'), namespaceprefix_ , eol_))
        if self.UtlevKl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtlevKl>%s</%sUtlevKl>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UtlevKl), input_name='UtlevKl')), namespaceprefix_ , eol_))
        if self.UlevSignNv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUlevSignNv>%s</%sUlevSignNv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UlevSignNv), input_name='UlevSignNv')), namespaceprefix_ , eol_))
        if self.Vekt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVekt>%s</%sVekt>%s' % (namespaceprefix_ , self.gds_format_integer(self.Vekt, input_name='Vekt'), namespaceprefix_ , eol_))
        if self.Volum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolum>%s</%sVolum>%s' % (namespaceprefix_ , self.gds_format_integer(self.Volum, input_name='Volum'), namespaceprefix_ , eol_))
        if self.Kolli is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKolli>%s</%sKolli>%s' % (namespaceprefix_ , self.gds_format_integer(self.Kolli, input_name='Kolli'), namespaceprefix_ , eol_))
        if self.MottKundenv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMottKundenv>%s</%sMottKundenv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MottKundenv), input_name='MottKundenv')), namespaceprefix_ , eol_))
        if self.UlevAdrNv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUlevAdrNv>%s</%sUlevAdrNv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UlevAdrNv), input_name='UlevAdrNv')), namespaceprefix_ , eol_))
        if self.UlevAdrNv2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUlevAdrNv2>%s</%sUlevAdrNv2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UlevAdrNv2), input_name='UlevAdrNv2')), namespaceprefix_ , eol_))
        if self.UtlevStedNr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtlevStedNr>%s</%sUtlevStedNr>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UtlevStedNr), input_name='UtlevStedNr')), namespaceprefix_ , eol_))
        if self.UtlevStedNv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtlevStedNv>%s</%sUtlevStedNv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UtlevStedNv), input_name='UtlevStedNv')), namespaceprefix_ , eol_))
        if self.GiroKidTx is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGiroKidTx>%s</%sGiroKidTx>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GiroKidTx), input_name='GiroKidTx')), namespaceprefix_ , eol_))
        if self.GarOppfyltJn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGarOppfyltJn>%s</%sGarOppfyltJn>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GarOppfyltJn), input_name='GarOppfyltJn')), namespaceprefix_ , eol_))
        if self.AmountOfKolliesDelivered is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountOfKolliesDelivered>%s</%sAmountOfKolliesDelivered>%s' % (namespaceprefix_ , self.gds_format_integer(self.AmountOfKolliesDelivered, input_name='AmountOfKolliesDelivered'), namespaceprefix_ , eol_))
        if self.NetFreight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetFreight>%s</%sNetFreight>%s' % (namespaceprefix_ , self.gds_format_float(self.NetFreight, input_name='NetFreight'), namespaceprefix_ , eol_))
        if self.CollectionSurcharge is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectionSurcharge>%s</%sCollectionSurcharge>%s' % (namespaceprefix_ , self.gds_format_float(self.CollectionSurcharge, input_name='CollectionSurcharge'), namespaceprefix_ , eol_))
        if self.Documents is not None:
            self.Documents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Documents', pretty_print=pretty_print)
        if self.OrdreReferanse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrdreReferanse>%s</%sOrdreReferanse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrdreReferanse), input_name='OrdreReferanse')), namespaceprefix_ , eol_))
        if self.SendingTilstandKd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSendingTilstandKd>%s</%sSendingTilstandKd>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SendingTilstandKd), input_name='SendingTilstandKd')), namespaceprefix_ , eol_))
        if self.SendingTilstand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSendingTilstand>%s</%sSendingTilstand>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SendingTilstand), input_name='SendingTilstand')), namespaceprefix_ , eol_))
        if self.TilstandAvvikJN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTilstandAvvikJN>%s</%sTilstandAvvikJN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TilstandAvvikJN), input_name='TilstandAvvikJN')), namespaceprefix_ , eol_))
        if self.UtslippCo2Kg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtslippCo2Kg>%s</%sUtslippCo2Kg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UtslippCo2Kg), input_name='UtslippCo2Kg')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AmountOfPods' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AmountOfPods')
            self.AmountOfPods = ival_
        elif nodeName_ == 'AmountOfKollies' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AmountOfKollies')
            self.AmountOfKollies = ival_
        elif nodeName_ == 'ShipmentMessage':
            ShipmentMessage_ = child_.text
            ShipmentMessage_ = self.gds_validate_string(ShipmentMessage_, node, 'ShipmentMessage')
            self.ShipmentMessage = ShipmentMessage_
        elif nodeName_ == 'Fraktbrevnr':
            Fraktbrevnr_ = child_.text
            Fraktbrevnr_ = self.gds_validate_string(Fraktbrevnr_, node, 'Fraktbrevnr')
            self.Fraktbrevnr = Fraktbrevnr_
        elif nodeName_ == 'SendersRef':
            SendersRef_ = child_.text
            SendersRef_ = self.gds_validate_string(SendersRef_, node, 'SendersRef')
            self.SendersRef = SendersRef_
        elif nodeName_ == 'SendKundenv':
            SendKundenv_ = child_.text
            SendKundenv_ = self.gds_validate_string(SendKundenv_, node, 'SendKundenv')
            self.SendKundenv = SendKundenv_
        elif nodeName_ == 'ProduktKD':
            ProduktKD_ = child_.text
            ProduktKD_ = self.gds_validate_string(ProduktKD_, node, 'ProduktKD')
            self.ProduktKD = ProduktKD_
        elif nodeName_ == 'ProduktKDTxt':
            ProduktKDTxt_ = child_.text
            ProduktKDTxt_ = self.gds_validate_string(ProduktKDTxt_, node, 'ProduktKDTxt')
            self.ProduktKDTxt = ProduktKDTxt_
        elif nodeName_ == 'IlevStedNr':
            IlevStedNr_ = child_.text
            IlevStedNr_ = self.gds_validate_string(IlevStedNr_, node, 'IlevStedNr')
            self.IlevStedNr = IlevStedNr_
        elif nodeName_ == 'PostStednv':
            PostStednv_ = child_.text
            PostStednv_ = self.gds_validate_string(PostStednv_, node, 'PostStednv')
            self.PostStednv = PostStednv_
        elif nodeName_ == 'InnlevDt':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.InnlevDt = dval_
        elif nodeName_ == 'UtlevDt':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.UtlevDt = dval_
        elif nodeName_ == 'UtlevKl':
            UtlevKl_ = child_.text
            UtlevKl_ = self.gds_validate_string(UtlevKl_, node, 'UtlevKl')
            self.UtlevKl = UtlevKl_
        elif nodeName_ == 'UlevSignNv':
            UlevSignNv_ = child_.text
            UlevSignNv_ = self.gds_validate_string(UlevSignNv_, node, 'UlevSignNv')
            self.UlevSignNv = UlevSignNv_
        elif nodeName_ == 'Vekt' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Vekt')
            self.Vekt = ival_
        elif nodeName_ == 'Volum' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Volum')
            self.Volum = ival_
        elif nodeName_ == 'Kolli' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Kolli')
            self.Kolli = ival_
        elif nodeName_ == 'MottKundenv':
            MottKundenv_ = child_.text
            MottKundenv_ = self.gds_validate_string(MottKundenv_, node, 'MottKundenv')
            self.MottKundenv = MottKundenv_
        elif nodeName_ == 'UlevAdrNv':
            UlevAdrNv_ = child_.text
            UlevAdrNv_ = self.gds_validate_string(UlevAdrNv_, node, 'UlevAdrNv')
            self.UlevAdrNv = UlevAdrNv_
        elif nodeName_ == 'UlevAdrNv2':
            UlevAdrNv2_ = child_.text
            UlevAdrNv2_ = self.gds_validate_string(UlevAdrNv2_, node, 'UlevAdrNv2')
            self.UlevAdrNv2 = UlevAdrNv2_
        elif nodeName_ == 'UtlevStedNr':
            UtlevStedNr_ = child_.text
            UtlevStedNr_ = self.gds_validate_string(UtlevStedNr_, node, 'UtlevStedNr')
            self.UtlevStedNr = UtlevStedNr_
        elif nodeName_ == 'UtlevStedNv':
            UtlevStedNv_ = child_.text
            UtlevStedNv_ = self.gds_validate_string(UtlevStedNv_, node, 'UtlevStedNv')
            self.UtlevStedNv = UtlevStedNv_
        elif nodeName_ == 'GiroKidTx':
            GiroKidTx_ = child_.text
            GiroKidTx_ = self.gds_validate_string(GiroKidTx_, node, 'GiroKidTx')
            self.GiroKidTx = GiroKidTx_
        elif nodeName_ == 'GarOppfyltJn':
            GarOppfyltJn_ = child_.text
            GarOppfyltJn_ = self.gds_validate_string(GarOppfyltJn_, node, 'GarOppfyltJn')
            self.GarOppfyltJn = GarOppfyltJn_
        elif nodeName_ == 'AmountOfKolliesDelivered' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AmountOfKolliesDelivered')
            self.AmountOfKolliesDelivered = ival_
        elif nodeName_ == 'NetFreight' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NetFreight')
            self.NetFreight = fval_
        elif nodeName_ == 'CollectionSurcharge' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CollectionSurcharge')
            self.CollectionSurcharge = fval_
        elif nodeName_ == 'Documents':
            obj_ = Documents.factory(parent_object_=self)
            obj_.build(child_)
            self.Documents = obj_
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'OrdreReferanse':
            OrdreReferanse_ = child_.text
            OrdreReferanse_ = self.gds_validate_string(OrdreReferanse_, node, 'OrdreReferanse')
            self.OrdreReferanse = OrdreReferanse_
        elif nodeName_ == 'SendingTilstandKd':
            SendingTilstandKd_ = child_.text
            SendingTilstandKd_ = self.gds_validate_string(SendingTilstandKd_, node, 'SendingTilstandKd')
            self.SendingTilstandKd = SendingTilstandKd_
        elif nodeName_ == 'SendingTilstand':
            SendingTilstand_ = child_.text
            SendingTilstand_ = self.gds_validate_string(SendingTilstand_, node, 'SendingTilstand')
            self.SendingTilstand = SendingTilstand_
        elif nodeName_ == 'TilstandAvvikJN':
            TilstandAvvikJN_ = child_.text
            TilstandAvvikJN_ = self.gds_validate_string(TilstandAvvikJN_, node, 'TilstandAvvikJN')
            self.TilstandAvvikJN = TilstandAvvikJN_
        elif nodeName_ == 'UtslippCo2Kg':
            UtslippCo2Kg_ = child_.text
            UtslippCo2Kg_ = self.gds_validate_string(UtslippCo2Kg_, node, 'UtslippCo2Kg')
            self.UtslippCo2Kg = UtslippCo2Kg_
# end class Shipment


class Documents(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PODs=None, ColliObservations=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.PODs = PODs
        self.ColliObservations = ColliObservations
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Documents)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Documents.subclass:
            return Documents.subclass(*args_, **kwargs_)
        else:
            return Documents(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PODs(self):
        return self.PODs
    def set_PODs(self, PODs):
        self.PODs = PODs
    def get_ColliObservations(self):
        return self.ColliObservations
    def set_ColliObservations(self, ColliObservations):
        self.ColliObservations = ColliObservations
    def hasContent_(self):
        if (
            self.PODs is not None or
            self.ColliObservations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Documents', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Documents')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Documents')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Documents', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Documents'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Documents', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PODs is not None:
            self.PODs.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PODs', pretty_print=pretty_print)
        if self.ColliObservations is not None:
            self.ColliObservations.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ColliObservations', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PODs':
            obj_ = ArrayOfPOD.factory(parent_object_=self)
            obj_.build(child_)
            self.PODs = obj_
            obj_.original_tagname_ = 'PODs'
        elif nodeName_ == 'ColliObservations':
            obj_ = ArrayOfColliObservation.factory(parent_object_=self)
            obj_.build(child_)
            self.ColliObservations = obj_
            obj_.original_tagname_ = 'ColliObservations'
# end class Documents


class ArrayOfPOD(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, POD=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if POD is None:
            self.POD = []
        else:
            self.POD = POD
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfPOD)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfPOD.subclass:
            return ArrayOfPOD.subclass(*args_, **kwargs_)
        else:
            return ArrayOfPOD(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_POD(self):
        return self.POD
    def set_POD(self, POD):
        self.POD = POD
    def add_POD(self, value):
        self.POD.append(value)
    def add_POD(self, value):
        self.POD.append(value)
    def insert_POD_at(self, index, value):
        self.POD.insert(index, value)
    def replace_POD_at(self, index, value):
        self.POD[index] = value
    def hasContent_(self):
        if (
            self.POD
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfPOD', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfPOD')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayOfPOD')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArrayOfPOD', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArrayOfPOD'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfPOD', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for POD_ in self.POD:
            POD_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POD', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'POD':
            obj_ = POD.factory(parent_object_=self)
            obj_.build(child_)
            self.POD.append(obj_)
            obj_.original_tagname_ = 'POD'
# end class ArrayOfPOD


class POD(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ConsignmentNo=None, DocumentType=None, RegDT=None, URIToTiffImage=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ConsignmentNo = ConsignmentNo
        self.DocumentType = DocumentType
        if isinstance(RegDT, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegDT, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RegDT
        self.RegDT = initvalue_
        self.URIToTiffImage = URIToTiffImage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POD)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POD.subclass:
            return POD.subclass(*args_, **kwargs_)
        else:
            return POD(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ConsignmentNo(self):
        return self.ConsignmentNo
    def set_ConsignmentNo(self, ConsignmentNo):
        self.ConsignmentNo = ConsignmentNo
    def get_DocumentType(self):
        return self.DocumentType
    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType
    def get_RegDT(self):
        return self.RegDT
    def set_RegDT(self, RegDT):
        self.RegDT = RegDT
    def get_URIToTiffImage(self):
        return self.URIToTiffImage
    def set_URIToTiffImage(self, URIToTiffImage):
        self.URIToTiffImage = URIToTiffImage
    def hasContent_(self):
        if (
            self.ConsignmentNo is not None or
            self.DocumentType is not None or
            self.RegDT is not None or
            self.URIToTiffImage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='POD', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POD')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POD')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POD', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='POD'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='POD', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ConsignmentNo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignmentNo>%s</%sConsignmentNo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsignmentNo), input_name='ConsignmentNo')), namespaceprefix_ , eol_))
        if self.DocumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentType>%s</%sDocumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), namespaceprefix_ , eol_))
        if self.RegDT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegDT>%s</%sRegDT>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RegDT, input_name='RegDT'), namespaceprefix_ , eol_))
        if self.URIToTiffImage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sURIToTiffImage>%s</%sURIToTiffImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.URIToTiffImage), input_name='URIToTiffImage')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ConsignmentNo':
            ConsignmentNo_ = child_.text
            ConsignmentNo_ = self.gds_validate_string(ConsignmentNo_, node, 'ConsignmentNo')
            self.ConsignmentNo = ConsignmentNo_
        elif nodeName_ == 'DocumentType':
            DocumentType_ = child_.text
            DocumentType_ = self.gds_validate_string(DocumentType_, node, 'DocumentType')
            self.DocumentType = DocumentType_
        elif nodeName_ == 'RegDT':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RegDT = dval_
        elif nodeName_ == 'URIToTiffImage':
            URIToTiffImage_ = child_.text
            URIToTiffImage_ = self.gds_validate_string(URIToTiffImage_, node, 'URIToTiffImage')
            self.URIToTiffImage = URIToTiffImage_
# end class POD


class ArrayOfColliObservation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ColliObservation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if ColliObservation is None:
            self.ColliObservation = []
        else:
            self.ColliObservation = ColliObservation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfColliObservation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfColliObservation.subclass:
            return ArrayOfColliObservation.subclass(*args_, **kwargs_)
        else:
            return ArrayOfColliObservation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ColliObservation(self):
        return self.ColliObservation
    def set_ColliObservation(self, ColliObservation):
        self.ColliObservation = ColliObservation
    def add_ColliObservation(self, value):
        self.ColliObservation.append(value)
    def add_ColliObservation(self, value):
        self.ColliObservation.append(value)
    def insert_ColliObservation_at(self, index, value):
        self.ColliObservation.insert(index, value)
    def replace_ColliObservation_at(self, index, value):
        self.ColliObservation[index] = value
    def hasContent_(self):
        if (
            self.ColliObservation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfColliObservation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfColliObservation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayOfColliObservation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArrayOfColliObservation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArrayOfColliObservation'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ArrayOfColliObservation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ColliObservation_ in self.ColliObservation:
            ColliObservation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ColliObservation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ColliObservation':
            obj_ = ColliObservation.factory(parent_object_=self)
            obj_.build(child_)
            self.ColliObservation.append(obj_)
            obj_.original_tagname_ = 'ColliObservation'
# end class ArrayOfColliObservation


class ColliObservation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kollinr=None, obstype=None, obstypekode=None, obsdato=None, obssted=None, TilleggsInfo=None, Breddegrad=None, Lengdegrad=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.kollinr = kollinr
        self.obstype = obstype
        self.obstypekode = obstypekode
        if isinstance(obsdato, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(obsdato, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = obsdato
        self.obsdato = initvalue_
        self.obssted = obssted
        self.TilleggsInfo = TilleggsInfo
        self.Breddegrad = Breddegrad
        self.Lengdegrad = Lengdegrad
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ColliObservation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ColliObservation.subclass:
            return ColliObservation.subclass(*args_, **kwargs_)
        else:
            return ColliObservation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_kollinr(self):
        return self.kollinr
    def set_kollinr(self, kollinr):
        self.kollinr = kollinr
    def get_obstype(self):
        return self.obstype
    def set_obstype(self, obstype):
        self.obstype = obstype
    def get_obstypekode(self):
        return self.obstypekode
    def set_obstypekode(self, obstypekode):
        self.obstypekode = obstypekode
    def get_obsdato(self):
        return self.obsdato
    def set_obsdato(self, obsdato):
        self.obsdato = obsdato
    def get_obssted(self):
        return self.obssted
    def set_obssted(self, obssted):
        self.obssted = obssted
    def get_TilleggsInfo(self):
        return self.TilleggsInfo
    def set_TilleggsInfo(self, TilleggsInfo):
        self.TilleggsInfo = TilleggsInfo
    def get_Breddegrad(self):
        return self.Breddegrad
    def set_Breddegrad(self, Breddegrad):
        self.Breddegrad = Breddegrad
    def get_Lengdegrad(self):
        return self.Lengdegrad
    def set_Lengdegrad(self, Lengdegrad):
        self.Lengdegrad = Lengdegrad
    def hasContent_(self):
        if (
            self.kollinr is not None or
            self.obstype is not None or
            self.obstypekode is not None or
            self.obsdato is not None or
            self.obssted is not None or
            self.TilleggsInfo is not None or
            self.Breddegrad is not None or
            self.Lengdegrad is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ColliObservation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ColliObservation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ColliObservation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ColliObservation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ColliObservation'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ColliObservation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.kollinr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skollinr>%s</%skollinr>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.kollinr), input_name='kollinr')), namespaceprefix_ , eol_))
        if self.obstype is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobstype>%s</%sobstype>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.obstype), input_name='obstype')), namespaceprefix_ , eol_))
        if self.obstypekode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobstypekode>%s</%sobstypekode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.obstypekode), input_name='obstypekode')), namespaceprefix_ , eol_))
        if self.obsdato is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobsdato>%s</%sobsdato>%s' % (namespaceprefix_ , self.gds_format_datetime(self.obsdato, input_name='obsdato'), namespaceprefix_ , eol_))
        if self.obssted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobssted>%s</%sobssted>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.obssted), input_name='obssted')), namespaceprefix_ , eol_))
        if self.TilleggsInfo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTilleggsInfo>%s</%sTilleggsInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TilleggsInfo), input_name='TilleggsInfo')), namespaceprefix_ , eol_))
        if self.Breddegrad is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBreddegrad>%s</%sBreddegrad>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Breddegrad), input_name='Breddegrad')), namespaceprefix_ , eol_))
        if self.Lengdegrad is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLengdegrad>%s</%sLengdegrad>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Lengdegrad), input_name='Lengdegrad')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'kollinr':
            kollinr_ = child_.text
            kollinr_ = self.gds_validate_string(kollinr_, node, 'kollinr')
            self.kollinr = kollinr_
        elif nodeName_ == 'obstype':
            obstype_ = child_.text
            obstype_ = self.gds_validate_string(obstype_, node, 'obstype')
            self.obstype = obstype_
        elif nodeName_ == 'obstypekode':
            obstypekode_ = child_.text
            obstypekode_ = self.gds_validate_string(obstypekode_, node, 'obstypekode')
            self.obstypekode = obstypekode_
        elif nodeName_ == 'obsdato':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.obsdato = dval_
        elif nodeName_ == 'obssted':
            obssted_ = child_.text
            obssted_ = self.gds_validate_string(obssted_, node, 'obssted')
            self.obssted = obssted_
        elif nodeName_ == 'TilleggsInfo':
            TilleggsInfo_ = child_.text
            TilleggsInfo_ = self.gds_validate_string(TilleggsInfo_, node, 'TilleggsInfo')
            self.TilleggsInfo = TilleggsInfo_
        elif nodeName_ == 'Breddegrad':
            Breddegrad_ = child_.text
            Breddegrad_ = self.gds_validate_string(Breddegrad_, node, 'Breddegrad')
            self.Breddegrad = Breddegrad_
        elif nodeName_ == 'Lengdegrad':
            Lengdegrad_ = child_.text
            Lengdegrad_ = self.gds_validate_string(Lengdegrad_, node, 'Lengdegrad')
            self.Lengdegrad = Lengdegrad_
# end class ColliObservation


class TrackAndTracePODs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, user=None, password=None, id=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.user = user
        self.password = password
        self.id = id
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAndTracePODs)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAndTracePODs.subclass:
            return TrackAndTracePODs.subclass(*args_, **kwargs_)
        else:
            return TrackAndTracePODs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_user(self):
        return self.user
    def set_user(self, user):
        self.user = user
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def hasContent_(self):
        if (
            self.user is not None or
            self.password is not None or
            self.id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTracePODs', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAndTracePODs')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAndTracePODs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAndTracePODs', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAndTracePODs'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTracePODs', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.user is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%suser>%s</%suser>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.user), input_name='user')), namespaceprefix_ , eol_))
        if self.password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'user':
            user_ = child_.text
            user_ = self.gds_validate_string(user_, node, 'user')
            self.user = user_
        elif nodeName_ == 'password':
            password_ = child_.text
            password_ = self.gds_validate_string(password_, node, 'password')
            self.password = password_
        elif nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
# end class TrackAndTracePODs


class TrackAndTracePODsResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackAndTracePODsResult=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TrackAndTracePODsResult = TrackAndTracePODsResult
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAndTracePODsResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAndTracePODsResponse.subclass:
            return TrackAndTracePODsResponse.subclass(*args_, **kwargs_)
        else:
            return TrackAndTracePODsResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackAndTracePODsResult(self):
        return self.TrackAndTracePODsResult
    def set_TrackAndTracePODsResult(self, TrackAndTracePODsResult):
        self.TrackAndTracePODsResult = TrackAndTracePODsResult
    def hasContent_(self):
        if (
            self.TrackAndTracePODsResult is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTracePODsResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAndTracePODsResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAndTracePODsResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAndTracePODsResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAndTracePODsResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTracePODsResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackAndTracePODsResult is not None:
            self.TrackAndTracePODsResult.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackAndTracePODsResult', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackAndTracePODsResult':
            obj_ = TrackAndTracePODsResultat.factory(parent_object_=self)
            obj_.build(child_)
            self.TrackAndTracePODsResult = obj_
            obj_.original_tagname_ = 'TrackAndTracePODsResult'
# end class TrackAndTracePODsResponse


class TrackAndTracePODsResultat(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseCode=None, ResponseMessage=None, AmountOfPODs=None, PODs=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ResponseCode = ResponseCode
        self.ResponseMessage = ResponseMessage
        self.AmountOfPODs = AmountOfPODs
        self.PODs = PODs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAndTracePODsResultat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAndTracePODsResultat.subclass:
            return TrackAndTracePODsResultat.subclass(*args_, **kwargs_)
        else:
            return TrackAndTracePODsResultat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseCode(self):
        return self.ResponseCode
    def set_ResponseCode(self, ResponseCode):
        self.ResponseCode = ResponseCode
    def get_ResponseMessage(self):
        return self.ResponseMessage
    def set_ResponseMessage(self, ResponseMessage):
        self.ResponseMessage = ResponseMessage
    def get_AmountOfPODs(self):
        return self.AmountOfPODs
    def set_AmountOfPODs(self, AmountOfPODs):
        self.AmountOfPODs = AmountOfPODs
    def get_PODs(self):
        return self.PODs
    def set_PODs(self, PODs):
        self.PODs = PODs
    def hasContent_(self):
        if (
            self.ResponseCode is not None or
            self.ResponseMessage is not None or
            self.AmountOfPODs is not None or
            self.PODs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTracePODsResultat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAndTracePODsResultat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAndTracePODsResultat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAndTracePODsResultat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAndTracePODsResultat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAndTracePODsResultat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseCode>%s</%sResponseCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseCode), input_name='ResponseCode')), namespaceprefix_ , eol_))
        if self.ResponseMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseMessage>%s</%sResponseMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseMessage), input_name='ResponseMessage')), namespaceprefix_ , eol_))
        if self.AmountOfPODs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountOfPODs>%s</%sAmountOfPODs>%s' % (namespaceprefix_ , self.gds_format_integer(self.AmountOfPODs, input_name='AmountOfPODs'), namespaceprefix_ , eol_))
        if self.PODs is not None:
            self.PODs.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PODs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseCode':
            ResponseCode_ = child_.text
            ResponseCode_ = self.gds_validate_string(ResponseCode_, node, 'ResponseCode')
            self.ResponseCode = ResponseCode_
        elif nodeName_ == 'ResponseMessage':
            ResponseMessage_ = child_.text
            ResponseMessage_ = self.gds_validate_string(ResponseMessage_, node, 'ResponseMessage')
            self.ResponseMessage = ResponseMessage_
        elif nodeName_ == 'AmountOfPODs' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AmountOfPODs')
            self.AmountOfPODs = ival_
        elif nodeName_ == 'PODs':
            obj_ = ArrayOfPOD.factory(parent_object_=self)
            obj_.build(child_)
            self.PODs = obj_
            obj_.original_tagname_ = 'PODs'
# end class TrackAndTracePODsResultat


class PriceAndTimeTable(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, password=None, kriterie=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.username = username
        self.password = password
        self.kriterie = kriterie
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceAndTimeTable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceAndTimeTable.subclass:
            return PriceAndTimeTable.subclass(*args_, **kwargs_)
        else:
            return PriceAndTimeTable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self):
        return self.username
    def set_username(self, username):
        self.username = username
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_kriterie(self):
        return self.kriterie
    def set_kriterie(self, kriterie):
        self.kriterie = kriterie
    def hasContent_(self):
        if (
            self.username is not None or
            self.password is not None or
            self.kriterie is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriceAndTimeTable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriceAndTimeTable')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriceAndTimeTable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriceAndTimeTable'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTable', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.username is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%susername>%s</%susername>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.username), input_name='username')), namespaceprefix_ , eol_))
        if self.password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.kriterie is not None:
            self.kriterie.export(outfile, level, namespaceprefix_, namespacedef_='', name_='kriterie', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'username':
            username_ = child_.text
            username_ = self.gds_validate_string(username_, node, 'username')
            self.username = username_
        elif nodeName_ == 'password':
            password_ = child_.text
            password_ = self.gds_validate_string(password_, node, 'password')
            self.password = password_
        elif nodeName_ == 'kriterie':
            obj_ = FreightPriceArguments.factory(parent_object_=self)
            obj_.build(child_)
            self.kriterie = obj_
            obj_.original_tagname_ = 'kriterie'
# end class PriceAndTimeTable


class FreightPriceArguments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Customnumber=None, PaymentCode=None, Weight=None, Volumd3=None, ProductCode=None, TypeOfGoods=None, HandleCodeOfPackes=None, ConsignorPostCode=None, ConsigneePostCode=None, AcceptanceDate=None, NumberOfPackages=None, UnitNumbers=None, UnitCode=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Customnumber = Customnumber
        self.PaymentCode = PaymentCode
        self.Weight = Weight
        self.Volumd3 = Volumd3
        self.ProductCode = ProductCode
        self.TypeOfGoods = TypeOfGoods
        self.HandleCodeOfPackes = HandleCodeOfPackes
        self.ConsignorPostCode = ConsignorPostCode
        self.ConsigneePostCode = ConsigneePostCode
        if isinstance(AcceptanceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AcceptanceDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = AcceptanceDate
        self.AcceptanceDate = initvalue_
        self.NumberOfPackages = NumberOfPackages
        self.UnitNumbers = UnitNumbers
        self.UnitCode = UnitCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPriceArguments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPriceArguments.subclass:
            return FreightPriceArguments.subclass(*args_, **kwargs_)
        else:
            return FreightPriceArguments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Customnumber(self):
        return self.Customnumber
    def set_Customnumber(self, Customnumber):
        self.Customnumber = Customnumber
    def get_PaymentCode(self):
        return self.PaymentCode
    def set_PaymentCode(self, PaymentCode):
        self.PaymentCode = PaymentCode
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Volumd3(self):
        return self.Volumd3
    def set_Volumd3(self, Volumd3):
        self.Volumd3 = Volumd3
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_TypeOfGoods(self):
        return self.TypeOfGoods
    def set_TypeOfGoods(self, TypeOfGoods):
        self.TypeOfGoods = TypeOfGoods
    def get_HandleCodeOfPackes(self):
        return self.HandleCodeOfPackes
    def set_HandleCodeOfPackes(self, HandleCodeOfPackes):
        self.HandleCodeOfPackes = HandleCodeOfPackes
    def get_ConsignorPostCode(self):
        return self.ConsignorPostCode
    def set_ConsignorPostCode(self, ConsignorPostCode):
        self.ConsignorPostCode = ConsignorPostCode
    def get_ConsigneePostCode(self):
        return self.ConsigneePostCode
    def set_ConsigneePostCode(self, ConsigneePostCode):
        self.ConsigneePostCode = ConsigneePostCode
    def get_AcceptanceDate(self):
        return self.AcceptanceDate
    def set_AcceptanceDate(self, AcceptanceDate):
        self.AcceptanceDate = AcceptanceDate
    def get_NumberOfPackages(self):
        return self.NumberOfPackages
    def set_NumberOfPackages(self, NumberOfPackages):
        self.NumberOfPackages = NumberOfPackages
    def get_UnitNumbers(self):
        return self.UnitNumbers
    def set_UnitNumbers(self, UnitNumbers):
        self.UnitNumbers = UnitNumbers
    def get_UnitCode(self):
        return self.UnitCode
    def set_UnitCode(self, UnitCode):
        self.UnitCode = UnitCode
    def hasContent_(self):
        if (
            self.Customnumber is not None or
            self.PaymentCode is not None or
            self.Weight is not None or
            self.Volumd3 is not None or
            self.ProductCode is not None or
            self.TypeOfGoods is not None or
            self.HandleCodeOfPackes is not None or
            self.ConsignorPostCode is not None or
            self.ConsigneePostCode is not None or
            self.AcceptanceDate is not None or
            self.NumberOfPackages is not None or
            self.UnitNumbers is not None or
            self.UnitCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPriceArguments', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPriceArguments')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightPriceArguments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightPriceArguments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightPriceArguments'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPriceArguments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Customnumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomnumber>%s</%sCustomnumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Customnumber), input_name='Customnumber')), namespaceprefix_ , eol_))
        if self.PaymentCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCode>%s</%sPaymentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCode), input_name='PaymentCode')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_format_float(self.Weight, input_name='Weight'), namespaceprefix_ , eol_))
        if self.Volumd3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumd3>%s</%sVolumd3>%s' % (namespaceprefix_ , self.gds_format_float(self.Volumd3, input_name='Volumd3'), namespaceprefix_ , eol_))
        if self.ProductCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.TypeOfGoods is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeOfGoods>%s</%sTypeOfGoods>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeOfGoods), input_name='TypeOfGoods')), namespaceprefix_ , eol_))
        if self.HandleCodeOfPackes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHandleCodeOfPackes>%s</%sHandleCodeOfPackes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HandleCodeOfPackes), input_name='HandleCodeOfPackes')), namespaceprefix_ , eol_))
        if self.ConsignorPostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignorPostCode>%s</%sConsignorPostCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsignorPostCode), input_name='ConsignorPostCode')), namespaceprefix_ , eol_))
        if self.ConsigneePostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsigneePostCode>%s</%sConsigneePostCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneePostCode), input_name='ConsigneePostCode')), namespaceprefix_ , eol_))
        if self.AcceptanceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcceptanceDate>%s</%sAcceptanceDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.AcceptanceDate, input_name='AcceptanceDate'), namespaceprefix_ , eol_))
        if self.NumberOfPackages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPackages>%s</%sNumberOfPackages>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfPackages, input_name='NumberOfPackages'), namespaceprefix_ , eol_))
        if self.UnitNumbers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitNumbers>%s</%sUnitNumbers>%s' % (namespaceprefix_ , self.gds_format_integer(self.UnitNumbers, input_name='UnitNumbers'), namespaceprefix_ , eol_))
        if self.UnitCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitCode>%s</%sUnitCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitCode), input_name='UnitCode')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Customnumber':
            Customnumber_ = child_.text
            Customnumber_ = self.gds_validate_string(Customnumber_, node, 'Customnumber')
            self.Customnumber = Customnumber_
        elif nodeName_ == 'PaymentCode':
            PaymentCode_ = child_.text
            PaymentCode_ = self.gds_validate_string(PaymentCode_, node, 'PaymentCode')
            self.PaymentCode = PaymentCode_
        elif nodeName_ == 'Weight' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Weight')
            self.Weight = fval_
        elif nodeName_ == 'Volumd3' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Volumd3')
            self.Volumd3 = fval_
        elif nodeName_ == 'ProductCode':
            ProductCode_ = child_.text
            ProductCode_ = self.gds_validate_string(ProductCode_, node, 'ProductCode')
            self.ProductCode = ProductCode_
        elif nodeName_ == 'TypeOfGoods':
            TypeOfGoods_ = child_.text
            TypeOfGoods_ = self.gds_validate_string(TypeOfGoods_, node, 'TypeOfGoods')
            self.TypeOfGoods = TypeOfGoods_
        elif nodeName_ == 'HandleCodeOfPackes':
            HandleCodeOfPackes_ = child_.text
            HandleCodeOfPackes_ = self.gds_validate_string(HandleCodeOfPackes_, node, 'HandleCodeOfPackes')
            self.HandleCodeOfPackes = HandleCodeOfPackes_
        elif nodeName_ == 'ConsignorPostCode':
            ConsignorPostCode_ = child_.text
            ConsignorPostCode_ = self.gds_validate_string(ConsignorPostCode_, node, 'ConsignorPostCode')
            self.ConsignorPostCode = ConsignorPostCode_
        elif nodeName_ == 'ConsigneePostCode':
            ConsigneePostCode_ = child_.text
            ConsigneePostCode_ = self.gds_validate_string(ConsigneePostCode_, node, 'ConsigneePostCode')
            self.ConsigneePostCode = ConsigneePostCode_
        elif nodeName_ == 'AcceptanceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.AcceptanceDate = dval_
        elif nodeName_ == 'NumberOfPackages' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPackages')
            self.NumberOfPackages = ival_
        elif nodeName_ == 'UnitNumbers' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'UnitNumbers')
            self.UnitNumbers = ival_
        elif nodeName_ == 'UnitCode':
            UnitCode_ = child_.text
            UnitCode_ = self.gds_validate_string(UnitCode_, node, 'UnitCode')
            self.UnitCode = UnitCode_
# end class FreightPriceArguments


class PriceAndTimeTableResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PriceAndTimeTableResult=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.PriceAndTimeTableResult = PriceAndTimeTableResult
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceAndTimeTableResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceAndTimeTableResponse.subclass:
            return PriceAndTimeTableResponse.subclass(*args_, **kwargs_)
        else:
            return PriceAndTimeTableResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PriceAndTimeTableResult(self):
        return self.PriceAndTimeTableResult
    def set_PriceAndTimeTableResult(self, PriceAndTimeTableResult):
        self.PriceAndTimeTableResult = PriceAndTimeTableResult
    def hasContent_(self):
        if (
            self.PriceAndTimeTableResult is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriceAndTimeTableResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriceAndTimeTableResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriceAndTimeTableResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriceAndTimeTableResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PriceAndTimeTableResult is not None:
            self.PriceAndTimeTableResult.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriceAndTimeTableResult', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PriceAndTimeTableResult':
            obj_ = PriceAndTimeTableResult.factory(parent_object_=self)
            obj_.build(child_)
            self.PriceAndTimeTableResult = obj_
            obj_.original_tagname_ = 'PriceAndTimeTableResult'
# end class PriceAndTimeTableResponse


class PriceAndTimeTableResult(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseCode=None, ResponseMessage=None, price=None, timeTable=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ResponseCode = ResponseCode
        self.ResponseMessage = ResponseMessage
        self.price = price
        self.timeTable = timeTable
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceAndTimeTableResult)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceAndTimeTableResult.subclass:
            return PriceAndTimeTableResult.subclass(*args_, **kwargs_)
        else:
            return PriceAndTimeTableResult(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseCode(self):
        return self.ResponseCode
    def set_ResponseCode(self, ResponseCode):
        self.ResponseCode = ResponseCode
    def get_ResponseMessage(self):
        return self.ResponseMessage
    def set_ResponseMessage(self, ResponseMessage):
        self.ResponseMessage = ResponseMessage
    def get_price(self):
        return self.price
    def set_price(self, price):
        self.price = price
    def get_timeTable(self):
        return self.timeTable
    def set_timeTable(self, timeTable):
        self.timeTable = timeTable
    def hasContent_(self):
        if (
            self.ResponseCode is not None or
            self.ResponseMessage is not None or
            self.price is not None or
            self.timeTable is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableResult', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriceAndTimeTableResult')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriceAndTimeTableResult')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriceAndTimeTableResult', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriceAndTimeTableResult'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableResult', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseCode>%s</%sResponseCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseCode), input_name='ResponseCode')), namespaceprefix_ , eol_))
        if self.ResponseMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseMessage>%s</%sResponseMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseMessage), input_name='ResponseMessage')), namespaceprefix_ , eol_))
        if self.price is not None:
            self.price.export(outfile, level, namespaceprefix_, namespacedef_='', name_='price', pretty_print=pretty_print)
        if self.timeTable is not None:
            self.timeTable.export(outfile, level, namespaceprefix_, namespacedef_='', name_='timeTable', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseCode':
            ResponseCode_ = child_.text
            ResponseCode_ = self.gds_validate_string(ResponseCode_, node, 'ResponseCode')
            self.ResponseCode = ResponseCode_
        elif nodeName_ == 'ResponseMessage':
            ResponseMessage_ = child_.text
            ResponseMessage_ = self.gds_validate_string(ResponseMessage_, node, 'ResponseMessage')
            self.ResponseMessage = ResponseMessage_
        elif nodeName_ == 'price':
            obj_ = FreightPriceResultat.factory(parent_object_=self)
            obj_.build(child_)
            self.price = obj_
            obj_.original_tagname_ = 'price'
        elif nodeName_ == 'timeTable':
            obj_ = ScheduledDeliveryTimeResultat.factory(parent_object_=self)
            obj_.build(child_)
            self.timeTable = obj_
            obj_.original_tagname_ = 'timeTable'
# end class PriceAndTimeTableResult


class FreightPriceResultat(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MessageId=None, Message=None, Grossfreight=None, Discount=None, Freight=None, Netfreight=None, PrivateDeliverySurcharge=None, ParcelVolumSurcharge=None, GiroServiceSurcharge=None, ConsigneeToPay=None, CollectionSurcharge=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MessageId = MessageId
        self.Message = Message
        self.Grossfreight = Grossfreight
        self.Discount = Discount
        self.Freight = Freight
        self.Netfreight = Netfreight
        self.PrivateDeliverySurcharge = PrivateDeliverySurcharge
        self.ParcelVolumSurcharge = ParcelVolumSurcharge
        self.GiroServiceSurcharge = GiroServiceSurcharge
        self.ConsigneeToPay = ConsigneeToPay
        self.CollectionSurcharge = CollectionSurcharge
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPriceResultat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPriceResultat.subclass:
            return FreightPriceResultat.subclass(*args_, **kwargs_)
        else:
            return FreightPriceResultat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageId(self):
        return self.MessageId
    def set_MessageId(self, MessageId):
        self.MessageId = MessageId
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_Grossfreight(self):
        return self.Grossfreight
    def set_Grossfreight(self, Grossfreight):
        self.Grossfreight = Grossfreight
    def get_Discount(self):
        return self.Discount
    def set_Discount(self, Discount):
        self.Discount = Discount
    def get_Freight(self):
        return self.Freight
    def set_Freight(self, Freight):
        self.Freight = Freight
    def get_Netfreight(self):
        return self.Netfreight
    def set_Netfreight(self, Netfreight):
        self.Netfreight = Netfreight
    def get_PrivateDeliverySurcharge(self):
        return self.PrivateDeliverySurcharge
    def set_PrivateDeliverySurcharge(self, PrivateDeliverySurcharge):
        self.PrivateDeliverySurcharge = PrivateDeliverySurcharge
    def get_ParcelVolumSurcharge(self):
        return self.ParcelVolumSurcharge
    def set_ParcelVolumSurcharge(self, ParcelVolumSurcharge):
        self.ParcelVolumSurcharge = ParcelVolumSurcharge
    def get_GiroServiceSurcharge(self):
        return self.GiroServiceSurcharge
    def set_GiroServiceSurcharge(self, GiroServiceSurcharge):
        self.GiroServiceSurcharge = GiroServiceSurcharge
    def get_ConsigneeToPay(self):
        return self.ConsigneeToPay
    def set_ConsigneeToPay(self, ConsigneeToPay):
        self.ConsigneeToPay = ConsigneeToPay
    def get_CollectionSurcharge(self):
        return self.CollectionSurcharge
    def set_CollectionSurcharge(self, CollectionSurcharge):
        self.CollectionSurcharge = CollectionSurcharge
    def hasContent_(self):
        if (
            self.MessageId is not None or
            self.Message is not None or
            self.Grossfreight is not None or
            self.Discount is not None or
            self.Freight is not None or
            self.Netfreight is not None or
            self.PrivateDeliverySurcharge is not None or
            self.ParcelVolumSurcharge is not None or
            self.GiroServiceSurcharge is not None or
            self.ConsigneeToPay is not None or
            self.CollectionSurcharge is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPriceResultat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPriceResultat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightPriceResultat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightPriceResultat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightPriceResultat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPriceResultat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MessageId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageId>%s</%sMessageId>%s' % (namespaceprefix_ , self.gds_format_integer(self.MessageId, input_name='MessageId'), namespaceprefix_ , eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.Grossfreight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossfreight>%s</%sGrossfreight>%s' % (namespaceprefix_ , self.gds_format_float(self.Grossfreight, input_name='Grossfreight'), namespaceprefix_ , eol_))
        if self.Discount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscount>%s</%sDiscount>%s' % (namespaceprefix_ , self.gds_format_float(self.Discount, input_name='Discount'), namespaceprefix_ , eol_))
        if self.Freight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreight>%s</%sFreight>%s' % (namespaceprefix_ , self.gds_format_float(self.Freight, input_name='Freight'), namespaceprefix_ , eol_))
        if self.Netfreight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetfreight>%s</%sNetfreight>%s' % (namespaceprefix_ , self.gds_format_float(self.Netfreight, input_name='Netfreight'), namespaceprefix_ , eol_))
        if self.PrivateDeliverySurcharge is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrivateDeliverySurcharge>%s</%sPrivateDeliverySurcharge>%s' % (namespaceprefix_ , self.gds_format_float(self.PrivateDeliverySurcharge, input_name='PrivateDeliverySurcharge'), namespaceprefix_ , eol_))
        if self.ParcelVolumSurcharge is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParcelVolumSurcharge>%s</%sParcelVolumSurcharge>%s' % (namespaceprefix_ , self.gds_format_float(self.ParcelVolumSurcharge, input_name='ParcelVolumSurcharge'), namespaceprefix_ , eol_))
        if self.GiroServiceSurcharge is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGiroServiceSurcharge>%s</%sGiroServiceSurcharge>%s' % (namespaceprefix_ , self.gds_format_float(self.GiroServiceSurcharge, input_name='GiroServiceSurcharge'), namespaceprefix_ , eol_))
        if self.ConsigneeToPay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsigneeToPay>%s</%sConsigneeToPay>%s' % (namespaceprefix_ , self.gds_format_float(self.ConsigneeToPay, input_name='ConsigneeToPay'), namespaceprefix_ , eol_))
        if self.CollectionSurcharge is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectionSurcharge>%s</%sCollectionSurcharge>%s' % (namespaceprefix_ , self.gds_format_float(self.CollectionSurcharge, input_name='CollectionSurcharge'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MessageId' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MessageId')
            self.MessageId = ival_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'Grossfreight' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Grossfreight')
            self.Grossfreight = fval_
        elif nodeName_ == 'Discount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Discount')
            self.Discount = fval_
        elif nodeName_ == 'Freight' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Freight')
            self.Freight = fval_
        elif nodeName_ == 'Netfreight' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Netfreight')
            self.Netfreight = fval_
        elif nodeName_ == 'PrivateDeliverySurcharge' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PrivateDeliverySurcharge')
            self.PrivateDeliverySurcharge = fval_
        elif nodeName_ == 'ParcelVolumSurcharge' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ParcelVolumSurcharge')
            self.ParcelVolumSurcharge = fval_
        elif nodeName_ == 'GiroServiceSurcharge' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'GiroServiceSurcharge')
            self.GiroServiceSurcharge = fval_
        elif nodeName_ == 'ConsigneeToPay' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ConsigneeToPay')
            self.ConsigneeToPay = fval_
        elif nodeName_ == 'CollectionSurcharge' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CollectionSurcharge')
            self.CollectionSurcharge = fval_
# end class FreightPriceResultat


class ScheduledDeliveryTimeResultat(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ScheduledDeliveryTime=None, MessageId=None, Message=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(ScheduledDeliveryTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ScheduledDeliveryTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ScheduledDeliveryTime
        self.ScheduledDeliveryTime = initvalue_
        self.MessageId = MessageId
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScheduledDeliveryTimeResultat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScheduledDeliveryTimeResultat.subclass:
            return ScheduledDeliveryTimeResultat.subclass(*args_, **kwargs_)
        else:
            return ScheduledDeliveryTimeResultat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ScheduledDeliveryTime(self):
        return self.ScheduledDeliveryTime
    def set_ScheduledDeliveryTime(self, ScheduledDeliveryTime):
        self.ScheduledDeliveryTime = ScheduledDeliveryTime
    def get_MessageId(self):
        return self.MessageId
    def set_MessageId(self, MessageId):
        self.MessageId = MessageId
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def hasContent_(self):
        if (
            self.ScheduledDeliveryTime is not None or
            self.MessageId is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ScheduledDeliveryTimeResultat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScheduledDeliveryTimeResultat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ScheduledDeliveryTimeResultat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ScheduledDeliveryTimeResultat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ScheduledDeliveryTimeResultat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ScheduledDeliveryTimeResultat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ScheduledDeliveryTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScheduledDeliveryTime>%s</%sScheduledDeliveryTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ScheduledDeliveryTime, input_name='ScheduledDeliveryTime'), namespaceprefix_ , eol_))
        if self.MessageId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageId>%s</%sMessageId>%s' % (namespaceprefix_ , self.gds_format_integer(self.MessageId, input_name='MessageId'), namespaceprefix_ , eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ScheduledDeliveryTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ScheduledDeliveryTime = dval_
        elif nodeName_ == 'MessageId' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MessageId')
            self.MessageId = ival_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class ScheduledDeliveryTimeResultat


class PriceAndTimeTableV2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, password=None, kriterie=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.username = username
        self.password = password
        self.kriterie = kriterie
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceAndTimeTableV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceAndTimeTableV2.subclass:
            return PriceAndTimeTableV2.subclass(*args_, **kwargs_)
        else:
            return PriceAndTimeTableV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self):
        return self.username
    def set_username(self, username):
        self.username = username
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_kriterie(self):
        return self.kriterie
    def set_kriterie(self, kriterie):
        self.kriterie = kriterie
    def hasContent_(self):
        if (
            self.username is not None or
            self.password is not None or
            self.kriterie is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriceAndTimeTableV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriceAndTimeTableV2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriceAndTimeTableV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriceAndTimeTableV2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.username is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%susername>%s</%susername>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.username), input_name='username')), namespaceprefix_ , eol_))
        if self.password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.kriterie is not None:
            self.kriterie.export(outfile, level, namespaceprefix_, namespacedef_='', name_='kriterie', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'username':
            username_ = child_.text
            username_ = self.gds_validate_string(username_, node, 'username')
            self.username = username_
        elif nodeName_ == 'password':
            password_ = child_.text
            password_ = self.gds_validate_string(password_, node, 'password')
            self.password = password_
        elif nodeName_ == 'kriterie':
            obj_ = FreightPriceArgumentsV2.factory(parent_object_=self)
            obj_.build(child_)
            self.kriterie = obj_
            obj_.original_tagname_ = 'kriterie'
# end class PriceAndTimeTableV2


class FreightPriceArgumentsV2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Customnumber=None, PaymentCode=None, Weight=None, Volumd3=None, ProductCode=None, TypeOfGoods=None, HandleCodeOfPackes=None, ConsignorPostCode=None, ConsigneePostCode=None, AcceptanceDate=None, NumberOfPackages=None, UnitNumbers=None, UnitCode=None, LengthCm=None, WidthCm=None, HeightCm=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Customnumber = Customnumber
        self.PaymentCode = PaymentCode
        self.Weight = Weight
        self.Volumd3 = Volumd3
        self.ProductCode = ProductCode
        self.TypeOfGoods = TypeOfGoods
        self.HandleCodeOfPackes = HandleCodeOfPackes
        self.ConsignorPostCode = ConsignorPostCode
        self.ConsigneePostCode = ConsigneePostCode
        if isinstance(AcceptanceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AcceptanceDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = AcceptanceDate
        self.AcceptanceDate = initvalue_
        self.NumberOfPackages = NumberOfPackages
        self.UnitNumbers = UnitNumbers
        self.UnitCode = UnitCode
        self.LengthCm = LengthCm
        self.WidthCm = WidthCm
        self.HeightCm = HeightCm
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPriceArgumentsV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPriceArgumentsV2.subclass:
            return FreightPriceArgumentsV2.subclass(*args_, **kwargs_)
        else:
            return FreightPriceArgumentsV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Customnumber(self):
        return self.Customnumber
    def set_Customnumber(self, Customnumber):
        self.Customnumber = Customnumber
    def get_PaymentCode(self):
        return self.PaymentCode
    def set_PaymentCode(self, PaymentCode):
        self.PaymentCode = PaymentCode
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Volumd3(self):
        return self.Volumd3
    def set_Volumd3(self, Volumd3):
        self.Volumd3 = Volumd3
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_TypeOfGoods(self):
        return self.TypeOfGoods
    def set_TypeOfGoods(self, TypeOfGoods):
        self.TypeOfGoods = TypeOfGoods
    def get_HandleCodeOfPackes(self):
        return self.HandleCodeOfPackes
    def set_HandleCodeOfPackes(self, HandleCodeOfPackes):
        self.HandleCodeOfPackes = HandleCodeOfPackes
    def get_ConsignorPostCode(self):
        return self.ConsignorPostCode
    def set_ConsignorPostCode(self, ConsignorPostCode):
        self.ConsignorPostCode = ConsignorPostCode
    def get_ConsigneePostCode(self):
        return self.ConsigneePostCode
    def set_ConsigneePostCode(self, ConsigneePostCode):
        self.ConsigneePostCode = ConsigneePostCode
    def get_AcceptanceDate(self):
        return self.AcceptanceDate
    def set_AcceptanceDate(self, AcceptanceDate):
        self.AcceptanceDate = AcceptanceDate
    def get_NumberOfPackages(self):
        return self.NumberOfPackages
    def set_NumberOfPackages(self, NumberOfPackages):
        self.NumberOfPackages = NumberOfPackages
    def get_UnitNumbers(self):
        return self.UnitNumbers
    def set_UnitNumbers(self, UnitNumbers):
        self.UnitNumbers = UnitNumbers
    def get_UnitCode(self):
        return self.UnitCode
    def set_UnitCode(self, UnitCode):
        self.UnitCode = UnitCode
    def get_LengthCm(self):
        return self.LengthCm
    def set_LengthCm(self, LengthCm):
        self.LengthCm = LengthCm
    def get_WidthCm(self):
        return self.WidthCm
    def set_WidthCm(self, WidthCm):
        self.WidthCm = WidthCm
    def get_HeightCm(self):
        return self.HeightCm
    def set_HeightCm(self, HeightCm):
        self.HeightCm = HeightCm
    def hasContent_(self):
        if (
            self.Customnumber is not None or
            self.PaymentCode is not None or
            self.Weight is not None or
            self.Volumd3 is not None or
            self.ProductCode is not None or
            self.TypeOfGoods is not None or
            self.HandleCodeOfPackes is not None or
            self.ConsignorPostCode is not None or
            self.ConsigneePostCode is not None or
            self.AcceptanceDate is not None or
            self.NumberOfPackages is not None or
            self.UnitNumbers is not None or
            self.UnitCode is not None or
            self.LengthCm is not None or
            self.WidthCm is not None or
            self.HeightCm is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPriceArgumentsV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPriceArgumentsV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightPriceArgumentsV2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightPriceArgumentsV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightPriceArgumentsV2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPriceArgumentsV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Customnumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomnumber>%s</%sCustomnumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Customnumber), input_name='Customnumber')), namespaceprefix_ , eol_))
        if self.PaymentCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCode>%s</%sPaymentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCode), input_name='PaymentCode')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_format_float(self.Weight, input_name='Weight'), namespaceprefix_ , eol_))
        if self.Volumd3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumd3>%s</%sVolumd3>%s' % (namespaceprefix_ , self.gds_format_float(self.Volumd3, input_name='Volumd3'), namespaceprefix_ , eol_))
        if self.ProductCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.TypeOfGoods is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeOfGoods>%s</%sTypeOfGoods>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeOfGoods), input_name='TypeOfGoods')), namespaceprefix_ , eol_))
        if self.HandleCodeOfPackes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHandleCodeOfPackes>%s</%sHandleCodeOfPackes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HandleCodeOfPackes), input_name='HandleCodeOfPackes')), namespaceprefix_ , eol_))
        if self.ConsignorPostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignorPostCode>%s</%sConsignorPostCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsignorPostCode), input_name='ConsignorPostCode')), namespaceprefix_ , eol_))
        if self.ConsigneePostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsigneePostCode>%s</%sConsigneePostCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneePostCode), input_name='ConsigneePostCode')), namespaceprefix_ , eol_))
        if self.AcceptanceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcceptanceDate>%s</%sAcceptanceDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.AcceptanceDate, input_name='AcceptanceDate'), namespaceprefix_ , eol_))
        if self.NumberOfPackages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPackages>%s</%sNumberOfPackages>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfPackages, input_name='NumberOfPackages'), namespaceprefix_ , eol_))
        if self.UnitNumbers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitNumbers>%s</%sUnitNumbers>%s' % (namespaceprefix_ , self.gds_format_integer(self.UnitNumbers, input_name='UnitNumbers'), namespaceprefix_ , eol_))
        if self.UnitCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitCode>%s</%sUnitCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitCode), input_name='UnitCode')), namespaceprefix_ , eol_))
        if self.LengthCm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLengthCm>%s</%sLengthCm>%s' % (namespaceprefix_ , self.gds_format_integer(self.LengthCm, input_name='LengthCm'), namespaceprefix_ , eol_))
        if self.WidthCm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidthCm>%s</%sWidthCm>%s' % (namespaceprefix_ , self.gds_format_integer(self.WidthCm, input_name='WidthCm'), namespaceprefix_ , eol_))
        if self.HeightCm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeightCm>%s</%sHeightCm>%s' % (namespaceprefix_ , self.gds_format_integer(self.HeightCm, input_name='HeightCm'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Customnumber':
            Customnumber_ = child_.text
            Customnumber_ = self.gds_validate_string(Customnumber_, node, 'Customnumber')
            self.Customnumber = Customnumber_
        elif nodeName_ == 'PaymentCode':
            PaymentCode_ = child_.text
            PaymentCode_ = self.gds_validate_string(PaymentCode_, node, 'PaymentCode')
            self.PaymentCode = PaymentCode_
        elif nodeName_ == 'Weight' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Weight')
            self.Weight = fval_
        elif nodeName_ == 'Volumd3' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Volumd3')
            self.Volumd3 = fval_
        elif nodeName_ == 'ProductCode':
            ProductCode_ = child_.text
            ProductCode_ = self.gds_validate_string(ProductCode_, node, 'ProductCode')
            self.ProductCode = ProductCode_
        elif nodeName_ == 'TypeOfGoods':
            TypeOfGoods_ = child_.text
            TypeOfGoods_ = self.gds_validate_string(TypeOfGoods_, node, 'TypeOfGoods')
            self.TypeOfGoods = TypeOfGoods_
        elif nodeName_ == 'HandleCodeOfPackes':
            HandleCodeOfPackes_ = child_.text
            HandleCodeOfPackes_ = self.gds_validate_string(HandleCodeOfPackes_, node, 'HandleCodeOfPackes')
            self.HandleCodeOfPackes = HandleCodeOfPackes_
        elif nodeName_ == 'ConsignorPostCode':
            ConsignorPostCode_ = child_.text
            ConsignorPostCode_ = self.gds_validate_string(ConsignorPostCode_, node, 'ConsignorPostCode')
            self.ConsignorPostCode = ConsignorPostCode_
        elif nodeName_ == 'ConsigneePostCode':
            ConsigneePostCode_ = child_.text
            ConsigneePostCode_ = self.gds_validate_string(ConsigneePostCode_, node, 'ConsigneePostCode')
            self.ConsigneePostCode = ConsigneePostCode_
        elif nodeName_ == 'AcceptanceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.AcceptanceDate = dval_
        elif nodeName_ == 'NumberOfPackages' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPackages')
            self.NumberOfPackages = ival_
        elif nodeName_ == 'UnitNumbers' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'UnitNumbers')
            self.UnitNumbers = ival_
        elif nodeName_ == 'UnitCode':
            UnitCode_ = child_.text
            UnitCode_ = self.gds_validate_string(UnitCode_, node, 'UnitCode')
            self.UnitCode = UnitCode_
        elif nodeName_ == 'LengthCm' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'LengthCm')
            self.LengthCm = ival_
        elif nodeName_ == 'WidthCm' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'WidthCm')
            self.WidthCm = ival_
        elif nodeName_ == 'HeightCm' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'HeightCm')
            self.HeightCm = ival_
# end class FreightPriceArgumentsV2


class PriceAndTimeTableV2Response(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PriceAndTimeTableV2Result=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.PriceAndTimeTableV2Result = PriceAndTimeTableV2Result
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceAndTimeTableV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceAndTimeTableV2Response.subclass:
            return PriceAndTimeTableV2Response.subclass(*args_, **kwargs_)
        else:
            return PriceAndTimeTableV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PriceAndTimeTableV2Result(self):
        return self.PriceAndTimeTableV2Result
    def set_PriceAndTimeTableV2Result(self, PriceAndTimeTableV2Result):
        self.PriceAndTimeTableV2Result = PriceAndTimeTableV2Result
    def hasContent_(self):
        if (
            self.PriceAndTimeTableV2Result is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriceAndTimeTableV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriceAndTimeTableV2Response')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriceAndTimeTableV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriceAndTimeTableV2Response'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriceAndTimeTableV2Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PriceAndTimeTableV2Result is not None:
            self.PriceAndTimeTableV2Result.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriceAndTimeTableV2Result', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PriceAndTimeTableV2Result':
            obj_ = PriceAndTimeTableResult.factory(parent_object_=self)
            obj_.build(child_)
            self.PriceAndTimeTableV2Result = obj_
            obj_.original_tagname_ = 'PriceAndTimeTableV2Result'
# end class PriceAndTimeTableV2Response


GDSClassesMapping = {
    'TrackAndTracePODsResultat': TrackAndTracePODsResultat,
    'TrackAndTraceResultat': TrackAndTraceResultat,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackAndTrace'
        rootClass = TrackAndTrace
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackAndTrace'
        rootClass = TrackAndTrace
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackAndTrace'
        rootClass = TrackAndTrace
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackAndTrace'
        rootClass = TrackAndTrace
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from __init__ import *\n\n')
        sys.stdout.write('import __init__ as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ArrayOfColliObservation",
    "ArrayOfPOD",
    "ArrayOfShipment",
    "ColliObservation",
    "Documents",
    "FreightPriceArguments",
    "FreightPriceArgumentsV2",
    "FreightPriceResultat",
    "POD",
    "PriceAndTimeTable",
    "PriceAndTimeTableResponse",
    "PriceAndTimeTableResult",
    "PriceAndTimeTableV2",
    "PriceAndTimeTableV2Response",
    "ScheduledDeliveryTimeResultat",
    "Shipment",
    "TrackAndTrace",
    "TrackAndTracePODs",
    "TrackAndTracePODsResponse",
    "TrackAndTracePODsResultat",
    "TrackAndTraceResponse",
    "TrackAndTraceResultat"
]
