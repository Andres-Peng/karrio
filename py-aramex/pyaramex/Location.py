#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 13:44:00 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/Location.xsd.py')
#
# Command line arguments:
#   Location.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/Location.xsd.py" Location.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AddressValidationRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientInfo=None, Transaction=None, Address=None):
        self.original_tagname_ = None
        self.ClientInfo = ClientInfo
        self.Transaction = Transaction
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressValidationRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressValidationRequest.subclass:
            return AddressValidationRequest.subclass(*args_, **kwargs_)
        else:
            return AddressValidationRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientInfo(self): return self.ClientInfo
    def set_ClientInfo(self, ClientInfo): self.ClientInfo = ClientInfo
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.ClientInfo is not None or
            self.Transaction is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressValidationRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressValidationRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressValidationRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressValidationRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressValidationRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientInfo is not None:
            self.ClientInfo.export(outfile, level, namespace_, name_='ClientInfo', pretty_print=pretty_print)
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientInfo':
            obj_ = ClientInfo.factory()
            obj_.build(child_)
            self.ClientInfo = obj_
            obj_.original_tagname_ = 'ClientInfo'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class AddressValidationRequest


class ClientInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UserName=None, Password=None, Version=None, AccountNumber=None, AccountPin=None, AccountEntity=None, AccountCountryCode=None, Source=None):
        self.original_tagname_ = None
        self.UserName = UserName
        self.Password = Password
        self.Version = Version
        self.AccountNumber = AccountNumber
        self.AccountPin = AccountPin
        self.AccountEntity = AccountEntity
        self.AccountCountryCode = AccountCountryCode
        self.Source = Source
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInfo.subclass:
            return ClientInfo.subclass(*args_, **kwargs_)
        else:
            return ClientInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserName(self): return self.UserName
    def set_UserName(self, UserName): self.UserName = UserName
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_AccountPin(self): return self.AccountPin
    def set_AccountPin(self, AccountPin): self.AccountPin = AccountPin
    def get_AccountEntity(self): return self.AccountEntity
    def set_AccountEntity(self, AccountEntity): self.AccountEntity = AccountEntity
    def get_AccountCountryCode(self): return self.AccountCountryCode
    def set_AccountCountryCode(self, AccountCountryCode): self.AccountCountryCode = AccountCountryCode
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def hasContent_(self):
        if (
            self.UserName is not None or
            self.Password is not None or
            self.Version is not None or
            self.AccountNumber is not None or
            self.AccountPin is not None or
            self.AccountEntity is not None or
            self.AccountCountryCode is not None or
            self.Source is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ClientInfo', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ClientInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ClientInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ClientInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UserName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UserName>%s</UserName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserName), input_name='UserName')), eol_))
        if self.Password is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Password>%s</Password>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), eol_))
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Version>%s</Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountNumber>%s</AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.AccountPin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountPin>%s</AccountPin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountPin), input_name='AccountPin')), eol_))
        if self.AccountEntity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountEntity>%s</AccountEntity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountEntity), input_name='AccountEntity')), eol_))
        if self.AccountCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountCountryCode>%s</AccountCountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountCountryCode), input_name='AccountCountryCode')), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Source>%s</Source>%s' % (self.gds_format_integer(self.Source, input_name='Source'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserName':
            UserName_ = child_.text
            UserName_ = self.gds_validate_string(UserName_, node, 'UserName')
            self.UserName = UserName_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
        elif nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'AccountPin':
            AccountPin_ = child_.text
            AccountPin_ = self.gds_validate_string(AccountPin_, node, 'AccountPin')
            self.AccountPin = AccountPin_
        elif nodeName_ == 'AccountEntity':
            AccountEntity_ = child_.text
            AccountEntity_ = self.gds_validate_string(AccountEntity_, node, 'AccountEntity')
            self.AccountEntity = AccountEntity_
        elif nodeName_ == 'AccountCountryCode':
            AccountCountryCode_ = child_.text
            AccountCountryCode_ = self.gds_validate_string(AccountCountryCode_, node, 'AccountCountryCode')
            self.AccountCountryCode = AccountCountryCode_
        elif nodeName_ == 'Source':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Source')
            self.Source = ival_
# end class ClientInfo


class Transaction(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Reference1=None, Reference2=None, Reference3=None, Reference4=None, Reference5=None):
        self.original_tagname_ = None
        self.Reference1 = Reference1
        self.Reference2 = Reference2
        self.Reference3 = Reference3
        self.Reference4 = Reference4
        self.Reference5 = Reference5
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Transaction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Transaction.subclass:
            return Transaction.subclass(*args_, **kwargs_)
        else:
            return Transaction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference1(self): return self.Reference1
    def set_Reference1(self, Reference1): self.Reference1 = Reference1
    def get_Reference2(self): return self.Reference2
    def set_Reference2(self, Reference2): self.Reference2 = Reference2
    def get_Reference3(self): return self.Reference3
    def set_Reference3(self, Reference3): self.Reference3 = Reference3
    def get_Reference4(self): return self.Reference4
    def set_Reference4(self, Reference4): self.Reference4 = Reference4
    def get_Reference5(self): return self.Reference5
    def set_Reference5(self, Reference5): self.Reference5 = Reference5
    def hasContent_(self):
        if (
            self.Reference1 is not None or
            self.Reference2 is not None or
            self.Reference3 is not None or
            self.Reference4 is not None or
            self.Reference5 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Transaction', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Transaction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Transaction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Transaction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Transaction'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Transaction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reference1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Reference1>%s</Reference1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reference1), input_name='Reference1')), eol_))
        if self.Reference2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Reference2>%s</Reference2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reference2), input_name='Reference2')), eol_))
        if self.Reference3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Reference3>%s</Reference3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reference3), input_name='Reference3')), eol_))
        if self.Reference4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Reference4>%s</Reference4>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reference4), input_name='Reference4')), eol_))
        if self.Reference5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Reference5>%s</Reference5>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Reference5), input_name='Reference5')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference1':
            Reference1_ = child_.text
            Reference1_ = self.gds_validate_string(Reference1_, node, 'Reference1')
            self.Reference1 = Reference1_
        elif nodeName_ == 'Reference2':
            Reference2_ = child_.text
            Reference2_ = self.gds_validate_string(Reference2_, node, 'Reference2')
            self.Reference2 = Reference2_
        elif nodeName_ == 'Reference3':
            Reference3_ = child_.text
            Reference3_ = self.gds_validate_string(Reference3_, node, 'Reference3')
            self.Reference3 = Reference3_
        elif nodeName_ == 'Reference4':
            Reference4_ = child_.text
            Reference4_ = self.gds_validate_string(Reference4_, node, 'Reference4')
            self.Reference4 = Reference4_
        elif nodeName_ == 'Reference5':
            Reference5_ = child_.text
            Reference5_ = self.gds_validate_string(Reference5_, node, 'Reference5')
            self.Reference5 = Reference5_
# end class Transaction


class Address(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Line1=None, Line2=None, Line3=None, City=None, StateOrProvinceCode=None, PostCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.Line1 = Line1
        self.Line2 = Line2
        self.Line3 = Line3
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostCode = PostCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Line1(self): return self.Line1
    def set_Line1(self, Line1): self.Line1 = Line1
    def get_Line2(self): return self.Line2
    def set_Line2(self, Line2): self.Line2 = Line2
    def get_Line3(self): return self.Line3
    def set_Line3(self, Line3): self.Line3 = Line3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostCode(self): return self.PostCode
    def set_PostCode(self, PostCode): self.PostCode = PostCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.Line1 is not None or
            self.Line2 is not None or
            self.Line3 is not None or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Address', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Line1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Line1>%s</Line1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Line1), input_name='Line1')), eol_))
        if self.Line2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Line2>%s</Line2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Line2), input_name='Line2')), eol_))
        if self.Line3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Line3>%s</Line3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Line3), input_name='Line3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateOrProvinceCode>%s</StateOrProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), eol_))
        if self.PostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostCode>%s</PostCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostCode), input_name='PostCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Line1':
            Line1_ = child_.text
            Line1_ = self.gds_validate_string(Line1_, node, 'Line1')
            self.Line1 = Line1_
        elif nodeName_ == 'Line2':
            Line2_ = child_.text
            Line2_ = self.gds_validate_string(Line2_, node, 'Line2')
            self.Line2 = Line2_
        elif nodeName_ == 'Line3':
            Line3_ = child_.text
            Line3_ = self.gds_validate_string(Line3_, node, 'Line3')
            self.Line3 = Line3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostCode':
            PostCode_ = child_.text
            PostCode_ = self.gds_validate_string(PostCode_, node, 'PostCode')
            self.PostCode = PostCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class Address


class AddressValidationResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transaction=None, Notifications=None, HasErrors=None, SuggestedAddresses=None):
        self.original_tagname_ = None
        self.Transaction = Transaction
        self.Notifications = Notifications
        self.HasErrors = HasErrors
        self.SuggestedAddresses = SuggestedAddresses
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressValidationResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressValidationResponse.subclass:
            return AddressValidationResponse.subclass(*args_, **kwargs_)
        else:
            return AddressValidationResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def get_HasErrors(self): return self.HasErrors
    def set_HasErrors(self, HasErrors): self.HasErrors = HasErrors
    def get_SuggestedAddresses(self): return self.SuggestedAddresses
    def set_SuggestedAddresses(self, SuggestedAddresses): self.SuggestedAddresses = SuggestedAddresses
    def hasContent_(self):
        if (
            self.Transaction is not None or
            self.Notifications is not None or
            self.HasErrors is not None or
            self.SuggestedAddresses is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressValidationResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressValidationResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressValidationResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressValidationResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressValidationResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.HasErrors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HasErrors>%s</HasErrors>%s' % (self.gds_format_boolean(self.HasErrors, input_name='HasErrors'), eol_))
        if self.SuggestedAddresses is not None:
            self.SuggestedAddresses.export(outfile, level, namespace_, name_='SuggestedAddresses', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Notifications':
            obj_ = ArrayOfNotification.factory()
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'HasErrors':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HasErrors')
            self.HasErrors = ival_
        elif nodeName_ == 'SuggestedAddresses':
            obj_ = ArrayOfAddress.factory()
            obj_.build(child_)
            self.SuggestedAddresses = obj_
            obj_.original_tagname_ = 'SuggestedAddresses'
# end class AddressValidationResponse


class ArrayOfNotification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Notification=None):
        self.original_tagname_ = None
        if Notification is None:
            self.Notification = []
        else:
            self.Notification = Notification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfNotification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfNotification.subclass:
            return ArrayOfNotification.subclass(*args_, **kwargs_)
        else:
            return ArrayOfNotification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Notification(self): return self.Notification
    def set_Notification(self, Notification): self.Notification = Notification
    def add_Notification(self, value): self.Notification.append(value)
    def insert_Notification_at(self, index, value): self.Notification.insert(index, value)
    def replace_Notification_at(self, index, value): self.Notification[index] = value
    def hasContent_(self):
        if (
            self.Notification
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ArrayOfNotification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfNotification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfNotification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ArrayOfNotification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ArrayOfNotification'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ArrayOfNotification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Notification_ in self.Notification:
            Notification_.export(outfile, level, namespace_, name_='Notification', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Notification':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notification.append(obj_)
            obj_.original_tagname_ = 'Notification'
# end class ArrayOfNotification


class Notification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Message=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Notification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Message>%s</Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class Notification


class ArrayOfAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None):
        self.original_tagname_ = None
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfAddress.subclass:
            return ArrayOfAddress.subclass(*args_, **kwargs_)
        else:
            return ArrayOfAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def hasContent_(self):
        if (
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ArrayOfAddress', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ArrayOfAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ArrayOfAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ArrayOfAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class ArrayOfAddress


class CountriesFetchingRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientInfo=None, Transaction=None):
        self.original_tagname_ = None
        self.ClientInfo = ClientInfo
        self.Transaction = Transaction
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountriesFetchingRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountriesFetchingRequest.subclass:
            return CountriesFetchingRequest.subclass(*args_, **kwargs_)
        else:
            return CountriesFetchingRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientInfo(self): return self.ClientInfo
    def set_ClientInfo(self, ClientInfo): self.ClientInfo = ClientInfo
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def hasContent_(self):
        if (
            self.ClientInfo is not None or
            self.Transaction is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CountriesFetchingRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountriesFetchingRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountriesFetchingRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CountriesFetchingRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CountriesFetchingRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CountriesFetchingRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientInfo is not None:
            self.ClientInfo.export(outfile, level, namespace_, name_='ClientInfo', pretty_print=pretty_print)
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientInfo':
            obj_ = ClientInfo.factory()
            obj_.build(child_)
            self.ClientInfo = obj_
            obj_.original_tagname_ = 'ClientInfo'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
# end class CountriesFetchingRequest


class CountriesFetchingResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transaction=None, Notifications=None, HasErrors=None, Countries=None):
        self.original_tagname_ = None
        self.Transaction = Transaction
        self.Notifications = Notifications
        self.HasErrors = HasErrors
        self.Countries = Countries
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountriesFetchingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountriesFetchingResponse.subclass:
            return CountriesFetchingResponse.subclass(*args_, **kwargs_)
        else:
            return CountriesFetchingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def get_HasErrors(self): return self.HasErrors
    def set_HasErrors(self, HasErrors): self.HasErrors = HasErrors
    def get_Countries(self): return self.Countries
    def set_Countries(self, Countries): self.Countries = Countries
    def hasContent_(self):
        if (
            self.Transaction is not None or
            self.Notifications is not None or
            self.HasErrors is not None or
            self.Countries is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CountriesFetchingResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountriesFetchingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountriesFetchingResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CountriesFetchingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CountriesFetchingResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CountriesFetchingResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.HasErrors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HasErrors>%s</HasErrors>%s' % (self.gds_format_boolean(self.HasErrors, input_name='HasErrors'), eol_))
        if self.Countries is not None:
            self.Countries.export(outfile, level, namespace_, name_='Countries', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Notifications':
            obj_ = ArrayOfNotification.factory()
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'HasErrors':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HasErrors')
            self.HasErrors = ival_
        elif nodeName_ == 'Countries':
            obj_ = ArrayOfCountry.factory()
            obj_.build(child_)
            self.Countries = obj_
            obj_.original_tagname_ = 'Countries'
# end class CountriesFetchingResponse


class ArrayOfCountry(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Country=None):
        self.original_tagname_ = None
        if Country is None:
            self.Country = []
        else:
            self.Country = Country
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfCountry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfCountry.subclass:
            return ArrayOfCountry.subclass(*args_, **kwargs_)
        else:
            return ArrayOfCountry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def add_Country(self, value): self.Country.append(value)
    def insert_Country_at(self, index, value): self.Country.insert(index, value)
    def replace_Country_at(self, index, value): self.Country[index] = value
    def hasContent_(self):
        if (
            self.Country
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ArrayOfCountry', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfCountry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfCountry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ArrayOfCountry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ArrayOfCountry'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ArrayOfCountry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Country_ in self.Country:
            Country_.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Country':
            obj_ = Country.factory()
            obj_.build(child_)
            self.Country.append(obj_)
            obj_.original_tagname_ = 'Country'
# end class ArrayOfCountry


class Country(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Name=None, IsoCode=None, StateRequired=None, PostCodeRequired=None, PostCodeRegex=None, InternationalCallingNumber=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Name = Name
        self.IsoCode = IsoCode
        self.StateRequired = StateRequired
        self.PostCodeRequired = PostCodeRequired
        self.PostCodeRegex = PostCodeRegex
        self.InternationalCallingNumber = InternationalCallingNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Country)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Country.subclass:
            return Country.subclass(*args_, **kwargs_)
        else:
            return Country(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_IsoCode(self): return self.IsoCode
    def set_IsoCode(self, IsoCode): self.IsoCode = IsoCode
    def get_StateRequired(self): return self.StateRequired
    def set_StateRequired(self, StateRequired): self.StateRequired = StateRequired
    def get_PostCodeRequired(self): return self.PostCodeRequired
    def set_PostCodeRequired(self, PostCodeRequired): self.PostCodeRequired = PostCodeRequired
    def get_PostCodeRegex(self): return self.PostCodeRegex
    def set_PostCodeRegex(self, PostCodeRegex): self.PostCodeRegex = PostCodeRegex
    def get_InternationalCallingNumber(self): return self.InternationalCallingNumber
    def set_InternationalCallingNumber(self, InternationalCallingNumber): self.InternationalCallingNumber = InternationalCallingNumber
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Name is not None or
            self.IsoCode is not None or
            self.StateRequired is not None or
            self.PostCodeRequired is not None or
            self.PostCodeRegex is not None or
            self.InternationalCallingNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Country', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Country')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Country')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Country', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Country'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Country', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.IsoCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IsoCode>%s</IsoCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IsoCode), input_name='IsoCode')), eol_))
        if self.StateRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateRequired>%s</StateRequired>%s' % (self.gds_format_boolean(self.StateRequired, input_name='StateRequired'), eol_))
        if self.PostCodeRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostCodeRequired>%s</PostCodeRequired>%s' % (self.gds_format_boolean(self.PostCodeRequired, input_name='PostCodeRequired'), eol_))
        if self.PostCodeRegex is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostCodeRegex>%s</PostCodeRegex>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostCodeRegex), input_name='PostCodeRegex')), eol_))
        if self.InternationalCallingNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<InternationalCallingNumber>%s</InternationalCallingNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InternationalCallingNumber), input_name='InternationalCallingNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'IsoCode':
            IsoCode_ = child_.text
            IsoCode_ = self.gds_validate_string(IsoCode_, node, 'IsoCode')
            self.IsoCode = IsoCode_
        elif nodeName_ == 'StateRequired':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'StateRequired')
            self.StateRequired = ival_
        elif nodeName_ == 'PostCodeRequired':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'PostCodeRequired')
            self.PostCodeRequired = ival_
        elif nodeName_ == 'PostCodeRegex':
            PostCodeRegex_ = child_.text
            PostCodeRegex_ = self.gds_validate_string(PostCodeRegex_, node, 'PostCodeRegex')
            self.PostCodeRegex = PostCodeRegex_
        elif nodeName_ == 'InternationalCallingNumber':
            InternationalCallingNumber_ = child_.text
            InternationalCallingNumber_ = self.gds_validate_string(InternationalCallingNumber_, node, 'InternationalCallingNumber')
            self.InternationalCallingNumber = InternationalCallingNumber_
# end class Country


class CountryFetchingRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientInfo=None, Transaction=None, Code=None):
        self.original_tagname_ = None
        self.ClientInfo = ClientInfo
        self.Transaction = Transaction
        self.Code = Code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryFetchingRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryFetchingRequest.subclass:
            return CountryFetchingRequest.subclass(*args_, **kwargs_)
        else:
            return CountryFetchingRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientInfo(self): return self.ClientInfo
    def set_ClientInfo(self, ClientInfo): self.ClientInfo = ClientInfo
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def hasContent_(self):
        if (
            self.ClientInfo is not None or
            self.Transaction is not None or
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CountryFetchingRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryFetchingRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountryFetchingRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CountryFetchingRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CountryFetchingRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CountryFetchingRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientInfo is not None:
            self.ClientInfo.export(outfile, level, namespace_, name_='ClientInfo', pretty_print=pretty_print)
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientInfo':
            obj_ = ClientInfo.factory()
            obj_.build(child_)
            self.ClientInfo = obj_
            obj_.original_tagname_ = 'ClientInfo'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
# end class CountryFetchingRequest


class CountryFetchingResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transaction=None, Notifications=None, HasErrors=None, Country=None):
        self.original_tagname_ = None
        self.Transaction = Transaction
        self.Notifications = Notifications
        self.HasErrors = HasErrors
        self.Country = Country
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryFetchingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryFetchingResponse.subclass:
            return CountryFetchingResponse.subclass(*args_, **kwargs_)
        else:
            return CountryFetchingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def get_HasErrors(self): return self.HasErrors
    def set_HasErrors(self, HasErrors): self.HasErrors = HasErrors
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def hasContent_(self):
        if (
            self.Transaction is not None or
            self.Notifications is not None or
            self.HasErrors is not None or
            self.Country is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CountryFetchingResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryFetchingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountryFetchingResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CountryFetchingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CountryFetchingResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CountryFetchingResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.HasErrors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HasErrors>%s</HasErrors>%s' % (self.gds_format_boolean(self.HasErrors, input_name='HasErrors'), eol_))
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Notifications':
            obj_ = ArrayOfNotification.factory()
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'HasErrors':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HasErrors')
            self.HasErrors = ival_
        elif nodeName_ == 'Country':
            obj_ = Country.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
# end class CountryFetchingResponse


class CitiesFetchingRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientInfo=None, Transaction=None, CountryCode=None, State=None, NameStartsWith=None):
        self.original_tagname_ = None
        self.ClientInfo = ClientInfo
        self.Transaction = Transaction
        self.CountryCode = CountryCode
        self.State = State
        self.NameStartsWith = NameStartsWith
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CitiesFetchingRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CitiesFetchingRequest.subclass:
            return CitiesFetchingRequest.subclass(*args_, **kwargs_)
        else:
            return CitiesFetchingRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientInfo(self): return self.ClientInfo
    def set_ClientInfo(self, ClientInfo): self.ClientInfo = ClientInfo
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_NameStartsWith(self): return self.NameStartsWith
    def set_NameStartsWith(self, NameStartsWith): self.NameStartsWith = NameStartsWith
    def hasContent_(self):
        if (
            self.ClientInfo is not None or
            self.Transaction is not None or
            self.CountryCode is not None or
            self.State is not None or
            self.NameStartsWith is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CitiesFetchingRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CitiesFetchingRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CitiesFetchingRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CitiesFetchingRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CitiesFetchingRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CitiesFetchingRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientInfo is not None:
            self.ClientInfo.export(outfile, level, namespace_, name_='ClientInfo', pretty_print=pretty_print)
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<State>%s</State>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), eol_))
        if self.NameStartsWith is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NameStartsWith>%s</NameStartsWith>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NameStartsWith), input_name='NameStartsWith')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientInfo':
            obj_ = ClientInfo.factory()
            obj_.build(child_)
            self.ClientInfo = obj_
            obj_.original_tagname_ = 'ClientInfo'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'NameStartsWith':
            NameStartsWith_ = child_.text
            NameStartsWith_ = self.gds_validate_string(NameStartsWith_, node, 'NameStartsWith')
            self.NameStartsWith = NameStartsWith_
# end class CitiesFetchingRequest


class CitiesFetchingResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transaction=None, Notifications=None, HasErrors=None, Cities=None):
        self.original_tagname_ = None
        self.Transaction = Transaction
        self.Notifications = Notifications
        self.HasErrors = HasErrors
        self.Cities = Cities
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CitiesFetchingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CitiesFetchingResponse.subclass:
            return CitiesFetchingResponse.subclass(*args_, **kwargs_)
        else:
            return CitiesFetchingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def get_HasErrors(self): return self.HasErrors
    def set_HasErrors(self, HasErrors): self.HasErrors = HasErrors
    def get_Cities(self): return self.Cities
    def set_Cities(self, Cities): self.Cities = Cities
    def hasContent_(self):
        if (
            self.Transaction is not None or
            self.Notifications is not None or
            self.HasErrors is not None or
            self.Cities is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CitiesFetchingResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CitiesFetchingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CitiesFetchingResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CitiesFetchingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CitiesFetchingResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CitiesFetchingResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.HasErrors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HasErrors>%s</HasErrors>%s' % (self.gds_format_boolean(self.HasErrors, input_name='HasErrors'), eol_))
        if self.Cities is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Cities>%s</Cities>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Cities), input_name='Cities')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Notifications':
            obj_ = ArrayOfNotification.factory()
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'HasErrors':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HasErrors')
            self.HasErrors = ival_
        elif nodeName_ == 'Cities':
            Cities_ = child_.text
            Cities_ = self.gds_validate_string(Cities_, node, 'Cities')
            self.Cities = Cities_
# end class CitiesFetchingResponse


class OfficesFetchingRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientInfo=None, Transaction=None, CountryCode=None):
        self.original_tagname_ = None
        self.ClientInfo = ClientInfo
        self.Transaction = Transaction
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OfficesFetchingRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OfficesFetchingRequest.subclass:
            return OfficesFetchingRequest.subclass(*args_, **kwargs_)
        else:
            return OfficesFetchingRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientInfo(self): return self.ClientInfo
    def set_ClientInfo(self, ClientInfo): self.ClientInfo = ClientInfo
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.ClientInfo is not None or
            self.Transaction is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OfficesFetchingRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OfficesFetchingRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OfficesFetchingRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OfficesFetchingRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OfficesFetchingRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OfficesFetchingRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientInfo is not None:
            self.ClientInfo.export(outfile, level, namespace_, name_='ClientInfo', pretty_print=pretty_print)
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientInfo':
            obj_ = ClientInfo.factory()
            obj_.build(child_)
            self.ClientInfo = obj_
            obj_.original_tagname_ = 'ClientInfo'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class OfficesFetchingRequest


class OfficesFetchingResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transaction=None, Notifications=None, HasErrors=None, Offices=None):
        self.original_tagname_ = None
        self.Transaction = Transaction
        self.Notifications = Notifications
        self.HasErrors = HasErrors
        self.Offices = Offices
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OfficesFetchingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OfficesFetchingResponse.subclass:
            return OfficesFetchingResponse.subclass(*args_, **kwargs_)
        else:
            return OfficesFetchingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self): return self.Transaction
    def set_Transaction(self, Transaction): self.Transaction = Transaction
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def get_HasErrors(self): return self.HasErrors
    def set_HasErrors(self, HasErrors): self.HasErrors = HasErrors
    def get_Offices(self): return self.Offices
    def set_Offices(self, Offices): self.Offices = Offices
    def hasContent_(self):
        if (
            self.Transaction is not None or
            self.Notifications is not None or
            self.HasErrors is not None or
            self.Offices is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OfficesFetchingResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OfficesFetchingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OfficesFetchingResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OfficesFetchingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OfficesFetchingResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OfficesFetchingResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transaction is not None:
            self.Transaction.export(outfile, level, namespace_, name_='Transaction', pretty_print=pretty_print)
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespace_, name_='Notifications', pretty_print=pretty_print)
        if self.HasErrors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HasErrors>%s</HasErrors>%s' % (self.gds_format_boolean(self.HasErrors, input_name='HasErrors'), eol_))
        if self.Offices is not None:
            self.Offices.export(outfile, level, namespace_, name_='Offices', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory()
            obj_.build(child_)
            self.Transaction = obj_
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Notifications':
            obj_ = ArrayOfNotification.factory()
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'HasErrors':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HasErrors')
            self.HasErrors = ival_
        elif nodeName_ == 'Offices':
            obj_ = ArrayOfOffice.factory()
            obj_.build(child_)
            self.Offices = obj_
            obj_.original_tagname_ = 'Offices'
# end class OfficesFetchingResponse


class ArrayOfOffice(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Office=None):
        self.original_tagname_ = None
        if Office is None:
            self.Office = []
        else:
            self.Office = Office
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayOfOffice)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayOfOffice.subclass:
            return ArrayOfOffice.subclass(*args_, **kwargs_)
        else:
            return ArrayOfOffice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Office(self): return self.Office
    def set_Office(self, Office): self.Office = Office
    def add_Office(self, value): self.Office.append(value)
    def insert_Office_at(self, index, value): self.Office.insert(index, value)
    def replace_Office_at(self, index, value): self.Office[index] = value
    def hasContent_(self):
        if (
            self.Office
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ArrayOfOffice', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayOfOffice')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfOffice')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ArrayOfOffice', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ArrayOfOffice'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ArrayOfOffice', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Office_ in self.Office:
            Office_.export(outfile, level, namespace_, name_='Office', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Office':
            obj_ = Office.factory()
            obj_.build(child_)
            self.Office.append(obj_)
            obj_.original_tagname_ = 'Office'
# end class ArrayOfOffice


class Office(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Entity=None, EntityDescription=None, OfficeType=None, Address=None, Telephone=None, WorkingDays=None, WorkingHours=None, Longtitude=None, Latitude=None):
        self.original_tagname_ = None
        self.Entity = Entity
        self.EntityDescription = EntityDescription
        self.OfficeType = OfficeType
        self.Address = Address
        self.Telephone = Telephone
        self.WorkingDays = WorkingDays
        self.WorkingHours = WorkingHours
        self.Longtitude = Longtitude
        self.Latitude = Latitude
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Office)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Office.subclass:
            return Office.subclass(*args_, **kwargs_)
        else:
            return Office(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Entity(self): return self.Entity
    def set_Entity(self, Entity): self.Entity = Entity
    def get_EntityDescription(self): return self.EntityDescription
    def set_EntityDescription(self, EntityDescription): self.EntityDescription = EntityDescription
    def get_OfficeType(self): return self.OfficeType
    def set_OfficeType(self, OfficeType): self.OfficeType = OfficeType
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Telephone(self): return self.Telephone
    def set_Telephone(self, Telephone): self.Telephone = Telephone
    def get_WorkingDays(self): return self.WorkingDays
    def set_WorkingDays(self, WorkingDays): self.WorkingDays = WorkingDays
    def get_WorkingHours(self): return self.WorkingHours
    def set_WorkingHours(self, WorkingHours): self.WorkingHours = WorkingHours
    def get_Longtitude(self): return self.Longtitude
    def set_Longtitude(self, Longtitude): self.Longtitude = Longtitude
    def get_Latitude(self): return self.Latitude
    def set_Latitude(self, Latitude): self.Latitude = Latitude
    def hasContent_(self):
        if (
            self.Entity is not None or
            self.EntityDescription is not None or
            self.OfficeType is not None or
            self.Address is not None or
            self.Telephone is not None or
            self.WorkingDays is not None or
            self.WorkingHours is not None or
            self.Longtitude is not None or
            self.Latitude is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Office', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Office')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Office')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Office', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Office'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Office', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Entity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Entity>%s</Entity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Entity), input_name='Entity')), eol_))
        if self.EntityDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EntityDescription>%s</EntityDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EntityDescription), input_name='EntityDescription')), eol_))
        if self.OfficeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OfficeType>%s</OfficeType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OfficeType), input_name='OfficeType')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Telephone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Telephone>%s</Telephone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Telephone), input_name='Telephone')), eol_))
        if self.WorkingDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WorkingDays>%s</WorkingDays>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WorkingDays), input_name='WorkingDays')), eol_))
        if self.WorkingHours is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WorkingHours>%s</WorkingHours>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WorkingHours), input_name='WorkingHours')), eol_))
        if self.Longtitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Longtitude>%s</Longtitude>%s' % (self.gds_format_float(self.Longtitude, input_name='Longtitude'), eol_))
        if self.Latitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Latitude>%s</Latitude>%s' % (self.gds_format_float(self.Latitude, input_name='Latitude'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Entity':
            Entity_ = child_.text
            Entity_ = self.gds_validate_string(Entity_, node, 'Entity')
            self.Entity = Entity_
        elif nodeName_ == 'EntityDescription':
            EntityDescription_ = child_.text
            EntityDescription_ = self.gds_validate_string(EntityDescription_, node, 'EntityDescription')
            self.EntityDescription = EntityDescription_
        elif nodeName_ == 'OfficeType':
            OfficeType_ = child_.text
            OfficeType_ = self.gds_validate_string(OfficeType_, node, 'OfficeType')
            self.OfficeType = OfficeType_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Telephone':
            Telephone_ = child_.text
            Telephone_ = self.gds_validate_string(Telephone_, node, 'Telephone')
            self.Telephone = Telephone_
        elif nodeName_ == 'WorkingDays':
            WorkingDays_ = child_.text
            WorkingDays_ = self.gds_validate_string(WorkingDays_, node, 'WorkingDays')
            self.WorkingDays = WorkingDays_
        elif nodeName_ == 'WorkingHours':
            WorkingHours_ = child_.text
            WorkingHours_ = self.gds_validate_string(WorkingHours_, node, 'WorkingHours')
            self.WorkingHours = WorkingHours_
        elif nodeName_ == 'Longtitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Longtitude')
            self.Longtitude = fval_
        elif nodeName_ == 'Latitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Latitude')
            self.Latitude = fval_
# end class Office


GDSClassesMapping = {
    'Address': Address,
    'ArrayOfAddress': ArrayOfAddress,
    'ArrayOfCountry': ArrayOfCountry,
    'ArrayOfNotification': ArrayOfNotification,
    'ArrayOfOffice': ArrayOfOffice,
    'ClientInfo': ClientInfo,
    'Country': Country,
    'Notification': Notification,
    'Office': Office,
    'Transaction': Transaction,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from Location.xsd import *\n\n')
        sys.stdout.write('import Location.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AddressValidationRequest",
    "AddressValidationResponse",
    "ArrayOfAddress",
    "ArrayOfCountry",
    "ArrayOfNotification",
    "ArrayOfOffice",
    "CitiesFetchingRequest",
    "CitiesFetchingResponse",
    "ClientInfo",
    "CountriesFetchingRequest",
    "CountriesFetchingResponse",
    "Country",
    "CountryFetchingRequest",
    "CountryFetchingResponse",
    "Notification",
    "Office",
    "OfficesFetchingRequest",
    "OfficesFetchingResponse",
    "Transaction"
]
