(self.webpackChunkpurplship_webapp=self.webpackChunkpurplship_webapp||[]).push([[786],{7459:function(e,t,S){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,S,r){void 0===r&&(r=S),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[S]}})}:function(e,t,S,r){void 0===r&&(r=S),e[r]=t[S]}),a=this&&this.__exportStar||function(e,t){for(var S in e)"default"===S||Object.prototype.hasOwnProperty.call(t,S)||r(t,e,S)};Object.defineProperty(t,"__esModule",{value:!0}),a(S(6405),t),a(S(206),t)},6405:(e,t,S)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GET_USER=t.MUTATE_USER=t.GET_USER_CONNECTIONS=t.GET_TOKEN=t.MUTATE_TOKEN=t.DELETE_TEMPLATE=t.UPDATED_TEMPLATE=t.CREATE_TEMPLATE=t.GET_SYSTEM_CONNECTIONS=t.GET_PARCEL_TEMPLATES=t.GET_LOGS=t.GET_LOG=t.DELETE_CONNECTION=t.UPDATED_CONNECTION=t.CREATE_CONNECTION=t.GET_DEFAULT_TEMPLATES=t.GET_CUSTOMS_TEMPLATES=t.GET_ADDRESS_TEMPLATES=void 0;const r=S(6829);t.GET_ADDRESS_TEMPLATES=r.gql`
query get_address_templates {
  address_templates {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      node {
        id
        is_default
        label
        address {
          company_name
          person_name
          address_line1
          address_line2
          postal_code
          residential
          city
          state_code
          country_code
          email
          phone_number
          validation
          validate_location
        }
        created_at
        updated_at
      }
    }
  }
}
`,t.GET_CUSTOMS_TEMPLATES=r.gql`
query get_customs_info_templates {
  customs_templates {
    pageInfo { 
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      node {
        id
        label
        is_default
        customs {
          aes
          eel_pfc
          incoterm
          content_type
          commercial_invoice
          certificate_number
          content_description
          duty
          invoice
          signer
          certify
          commodities {
            id
            sku
            weight
            quantity
            weight_unit
            description
            value_amount
            value_currency
            origin_country
          }
        }
      }
    }
  }
}
`,t.GET_DEFAULT_TEMPLATES=r.gql`
query get_default_templates {
  default_templates
}
`,t.CREATE_CONNECTION=r.gql`
  mutation create_connection($data: CreateConnectionInput!) {
    create_connection(input: $data) {
      id
      errors {
        field
        messages
      }
    }
  }
`,t.UPDATED_CONNECTION=r.gql`
  mutation update_connection($data: UpdateConnectionInput!) {
    update_connection(input: $data) {
      id
      errors {
        field
        messages
      }
    }
  }
`,t.DELETE_CONNECTION=r.gql`
  mutation delete_connection($data: DeleteConnectionInput!) {
    delete_connection(input: $data) {
      id
    }
  }
`,t.GET_LOG=r.gql`
query get_log($id: Int!) {
  log(id: $id) {
    id
    username_persistent
    requested_at
    response_ms
    path
    view
    view_method
    remote_addr
    host
    method
    query_params
    data
    response
    errors
    status_code
  }
}
`,t.GET_LOGS=r.gql`
query get_logs {
  logs {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      node {
        id
        view
        view_method
        path
        data
        method
        response_ms
        remote_addr
        requested_at
        username_persistent
        status_code
        query_params
        host
        errors
        response
      }
    }
  }
}
`,t.GET_PARCEL_TEMPLATES=r.gql`
query get_parcel_templates {
  parcel_templates {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      node {
        id
        is_default
        label
        parcel {
          width
          height
          length
          dimension_unit
          weight
          weight_unit
          packaging_type
          package_preset
        }
        created_at
        updated_at
      }
    }
  }
}
`,t.GET_SYSTEM_CONNECTIONS=r.gql`
query get_system_connections {
  system_connections {
    id
    carrier_id
    carrier_name
    test
    active
  }
}
`,t.CREATE_TEMPLATE=r.gql`
  mutation create_template($data: CreateTemplateInput!) {
    create_template(input: $data) {
      id
      errors {
        field
        messages
      }
    }
  }
`,t.UPDATED_TEMPLATE=r.gql`
  mutation update_template($data: UpdateTemplateInput!) {
    update_template(input: $data) {
      id
      errors {
        field
        messages
      }
    }
  }
`,t.DELETE_TEMPLATE=r.gql`
  mutation delete_template($data: DeleteTemplateInput!) {
    delete_template(input: $data) {
      id
    }
  }
`,t.MUTATE_TOKEN=r.gql`
mutation mutate_token($data: TokenMutationInput!) {
  mutate_token(input: $data) {
    token {
      key
    }
  }
}
`,t.GET_TOKEN=r.gql`
  query GetToken {
    token {
      key
      created
    }
  }
`,t.GET_USER_CONNECTIONS=r.gql`
  query get_user_connections {
    user_connections {
      __typename
      ... on AramexSettings {
        id
        carrier_id
        carrier_name
        test
        active
        account_pin
        account_entity
        account_number
        account_country_code
        username
      }
      ... on AustraliaPostSettings {
        id
        carrier_id
        carrier_name
        test
        active
        account_number
        password
        api_key
      }
      ... on CanadaPostSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
      }
      ... on CanparSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
      }
      ... on DHLExpressSettings {
        id
        carrier_id
        carrier_name
        test
        active
        site_id
        password
        account_number
      }
      ... on DHLUniversalSettings {
        id
        carrier_id
        carrier_name
        test
        active
        consumer_key
        consumer_secret
      }
      ... on DicomSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
        billing_account
      }
      ... on EShipperSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
      }
      ... on FedexSettings {
        id
        carrier_id
        carrier_name
        test
        active
        account_number
        password
        meter_number
        user_key
      }
      ... on FreightcomSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
      }
      ... on PurolatorCourierSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
        account_number
        user_token
      }
      ... on RoyalMailSettings {
        id
        carrier_id
        carrier_name
        test
        active
        client_id
        client_secret
      }
      ... on SendleSettings {
        id
        carrier_id
        carrier_name
        test
        active
        sendle_id
        api_key
      }
      ... on SFExpressSettings {
        id
        carrier_id
        carrier_name
        test
        active
        partner_id
        check_word
      }
      ... on UPSSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
        access_license_number
        account_number
      }
      ... on USPSSettings {
        id
        carrier_id
        carrier_name
        test
        active
        username
        password
      }
      ... on YanwenSettings {
        id
        carrier_id
        carrier_name
        test
        active
        customer_number
        license_key
      }
      ... on YunExpressSettings {
        id
        carrier_id
        carrier_name
        test
        active
        customer_number
        api_secret
      }
    }
  }
`,t.MUTATE_USER=r.gql`
mutation mutate_user($data: UserMutationInput!) {
  mutate_user(input: $data) {
    email
    full_name
    is_staff
    last_login
    date_joined
    errors {
      field
      messages
    }
  }
}
`,t.GET_USER=r.gql`
query GetUser {
  user {
    email
    full_name
    is_staff
    last_login
    date_joined
  }
}
`},206:(e,t)=>{"use strict";var S,r,a,i,M,n,T,D,C,E,G,A;Object.defineProperty(t,"__esModule",{value:!0}),t.dimension_unit=t.weight_unit=t.incoterm=t.origin_country=t.value_currency=t.ParcelWeightUnit=t.ParcelDimensionUnit=t.CommodityOriginCountry=t.CommodityValueCurrency=t.CommodityWeightUnit=t.CustomsIncoterm=t.AddressCountryCode=void 0,(A=t.AddressCountryCode||(t.AddressCountryCode={})).AD="AD",A.AE="AE",A.AF="AF",A.AG="AG",A.AI="AI",A.AL="AL",A.AM="AM",A.AN="AN",A.AO="AO",A.AR="AR",A.AS="AS",A.AT="AT",A.AU="AU",A.AW="AW",A.AZ="AZ",A.BA="BA",A.BB="BB",A.BD="BD",A.BE="BE",A.BF="BF",A.BG="BG",A.BH="BH",A.BI="BI",A.BJ="BJ",A.BM="BM",A.BN="BN",A.BO="BO",A.BR="BR",A.BS="BS",A.BT="BT",A.BW="BW",A.BY="BY",A.BZ="BZ",A.CA="CA",A.CD="CD",A.CF="CF",A.CG="CG",A.CH="CH",A.CI="CI",A.CK="CK",A.CL="CL",A.CM="CM",A.CN="CN",A.CO="CO",A.CR="CR",A.CU="CU",A.CV="CV",A.CY="CY",A.CZ="CZ",A.DE="DE",A.DJ="DJ",A.DK="DK",A.DM="DM",A.DO="DO",A.DZ="DZ",A.EC="EC",A.EE="EE",A.EG="EG",A.ER="ER",A.ES="ES",A.ET="ET",A.FI="FI",A.FJ="FJ",A.FK="FK",A.FM="FM",A.FO="FO",A.FR="FR",A.GA="GA",A.GB="GB",A.GD="GD",A.GE="GE",A.GF="GF",A.GG="GG",A.GH="GH",A.GI="GI",A.GL="GL",A.GM="GM",A.GN="GN",A.GP="GP",A.GQ="GQ",A.GR="GR",A.GT="GT",A.GU="GU",A.GW="GW",A.GY="GY",A.HK="HK",A.HN="HN",A.HR="HR",A.HT="HT",A.HU="HU",A.IC="IC",A.ID="ID",A.IE="IE",A.IL="IL",A.IN="IN",A.IQ="IQ",A.IR="IR",A.IS="IS",A.IT="IT",A.JE="JE",A.JM="JM",A.JO="JO",A.JP="JP",A.KE="KE",A.KG="KG",A.KH="KH",A.KI="KI",A.KM="KM",A.KN="KN",A.KP="KP",A.KR="KR",A.KV="KV",A.KW="KW",A.KY="KY",A.KZ="KZ",A.LA="LA",A.LB="LB",A.LC="LC",A.LI="LI",A.LK="LK",A.LR="LR",A.LS="LS",A.LT="LT",A.LU="LU",A.LV="LV",A.LY="LY",A.MA="MA",A.MC="MC",A.MD="MD",A.ME="ME",A.MG="MG",A.MH="MH",A.MK="MK",A.ML="ML",A.MM="MM",A.MN="MN",A.MO="MO",A.MP="MP",A.MQ="MQ",A.MR="MR",A.MS="MS",A.MT="MT",A.MU="MU",A.MV="MV",A.MW="MW",A.MX="MX",A.MY="MY",A.MZ="MZ",A.NA="NA",A.NC="NC",A.NE="NE",A.NG="NG",A.NI="NI",A.NL="NL",A.NO="NO",A.NP="NP",A.NR="NR",A.NU="NU",A.NZ="NZ",A.OM="OM",A.PA="PA",A.PE="PE",A.PF="PF",A.PG="PG",A.PH="PH",A.PK="PK",A.PL="PL",A.PR="PR",A.PT="PT",A.PW="PW",A.PY="PY",A.QA="QA",A.RE="RE",A.RO="RO",A.RS="RS",A.RU="RU",A.RW="RW",A.SA="SA",A.SB="SB",A.SC="SC",A.SD="SD",A.SE="SE",A.SG="SG",A.SH="SH",A.SI="SI",A.SK="SK",A.SL="SL",A.SM="SM",A.SN="SN",A.SO="SO",A.SR="SR",A.SS="SS",A.ST="ST",A.SV="SV",A.SY="SY",A.SZ="SZ",A.TC="TC",A.TD="TD",A.TG="TG",A.TH="TH",A.TJ="TJ",A.TL="TL",A.TN="TN",A.TO="TO",A.TR="TR",A.TT="TT",A.TV="TV",A.TW="TW",A.TZ="TZ",A.UA="UA",A.UG="UG",A.US="US",A.UY="UY",A.UZ="UZ",A.VA="VA",A.VC="VC",A.VE="VE",A.VG="VG",A.VI="VI",A.VN="VN",A.VU="VU",A.WS="WS",A.XB="XB",A.XC="XC",A.XE="XE",A.XM="XM",A.XN="XN",A.XS="XS",A.XY="XY",A.YE="YE",A.YT="YT",A.ZA="ZA",A.ZM="ZM",A.ZW="ZW",(G=t.CustomsIncoterm||(t.CustomsIncoterm={})).CFR="CFR",G.CIF="CIF",G.CIP="CIP",G.CPT="CPT",G.DAF="DAF",G.DDP="DDP",G.DDU="DDU",G.DEQ="DEQ",G.DES="DES",G.EXW="EXW",G.FAS="FAS",G.FCA="FCA",G.FOB="FOB",(E=t.CommodityWeightUnit||(t.CommodityWeightUnit={})).KG="KG",E.LB="LB",(C=t.CommodityValueCurrency||(t.CommodityValueCurrency={})).AED="AED",C.AMD="AMD",C.ANG="ANG",C.AOA="AOA",C.ARS="ARS",C.AUD="AUD",C.AWG="AWG",C.AZN="AZN",C.BAM="BAM",C.BBD="BBD",C.BDT="BDT",C.BGN="BGN",C.BHD="BHD",C.BIF="BIF",C.BMD="BMD",C.BND="BND",C.BOB="BOB",C.BRL="BRL",C.BSD="BSD",C.BTN="BTN",C.BWP="BWP",C.BYN="BYN",C.BZD="BZD",C.CAD="CAD",C.CDF="CDF",C.CHF="CHF",C.CLP="CLP",C.CNY="CNY",C.COP="COP",C.CRC="CRC",C.CUC="CUC",C.CVE="CVE",C.CZK="CZK",C.DJF="DJF",C.DKK="DKK",C.DOP="DOP",C.DZD="DZD",C.EGP="EGP",C.ERN="ERN",C.ETB="ETB",C.EUR="EUR",C.FJD="FJD",C.GBP="GBP",C.GEL="GEL",C.GHS="GHS",C.GMD="GMD",C.GNF="GNF",C.GTQ="GTQ",C.GYD="GYD",C.HKD="HKD",C.HNL="HNL",C.HRK="HRK",C.HTG="HTG",C.HUF="HUF",C.IDR="IDR",C.ILS="ILS",C.INR="INR",C.IRR="IRR",C.ISK="ISK",C.JMD="JMD",C.JOD="JOD",C.JPY="JPY",C.KES="KES",C.KGS="KGS",C.KHR="KHR",C.KMF="KMF",C.KPW="KPW",C.KRW="KRW",C.KWD="KWD",C.KYD="KYD",C.KZT="KZT",C.LAK="LAK",C.LKR="LKR",C.LRD="LRD",C.LSL="LSL",C.LYD="LYD",C.MAD="MAD",C.MDL="MDL",C.MGA="MGA",C.MKD="MKD",C.MMK="MMK",C.MNT="MNT",C.MOP="MOP",C.MRO="MRO",C.MUR="MUR",C.MVR="MVR",C.MWK="MWK",C.MXN="MXN",C.MYR="MYR",C.MZN="MZN",C.NAD="NAD",C.NGN="NGN",C.NIO="NIO",C.NOK="NOK",C.NPR="NPR",C.NZD="NZD",C.OMR="OMR",C.PEN="PEN",C.PGK="PGK",C.PHP="PHP",C.PKR="PKR",C.PLN="PLN",C.PYG="PYG",C.QAR="QAR",C.RSD="RSD",C.RUB="RUB",C.RWF="RWF",C.SAR="SAR",C.SBD="SBD",C.SCR="SCR",C.SDG="SDG",C.SEK="SEK",C.SGD="SGD",C.SHP="SHP",C.SLL="SLL",C.SOS="SOS",C.SRD="SRD",C.SSP="SSP",C.STD="STD",C.SYP="SYP",C.SZL="SZL",C.THB="THB",C.TJS="TJS",C.TND="TND",C.TOP="TOP",C.TRY="TRY",C.TTD="TTD",C.TWD="TWD",C.TZS="TZS",C.UAH="UAH",C.USD="USD",C.UYU="UYU",C.UZS="UZS",C.VEF="VEF",C.VND="VND",C.VUV="VUV",C.WST="WST",C.XAF="XAF",C.XCD="XCD",C.XOF="XOF",C.XPF="XPF",C.YER="YER",C.ZAR="ZAR",(D=t.CommodityOriginCountry||(t.CommodityOriginCountry={})).AD="AD",D.AE="AE",D.AF="AF",D.AG="AG",D.AI="AI",D.AL="AL",D.AM="AM",D.AN="AN",D.AO="AO",D.AR="AR",D.AS="AS",D.AT="AT",D.AU="AU",D.AW="AW",D.AZ="AZ",D.BA="BA",D.BB="BB",D.BD="BD",D.BE="BE",D.BF="BF",D.BG="BG",D.BH="BH",D.BI="BI",D.BJ="BJ",D.BM="BM",D.BN="BN",D.BO="BO",D.BR="BR",D.BS="BS",D.BT="BT",D.BW="BW",D.BY="BY",D.BZ="BZ",D.CA="CA",D.CD="CD",D.CF="CF",D.CG="CG",D.CH="CH",D.CI="CI",D.CK="CK",D.CL="CL",D.CM="CM",D.CN="CN",D.CO="CO",D.CR="CR",D.CU="CU",D.CV="CV",D.CY="CY",D.CZ="CZ",D.DE="DE",D.DJ="DJ",D.DK="DK",D.DM="DM",D.DO="DO",D.DZ="DZ",D.EC="EC",D.EE="EE",D.EG="EG",D.ER="ER",D.ES="ES",D.ET="ET",D.FI="FI",D.FJ="FJ",D.FK="FK",D.FM="FM",D.FO="FO",D.FR="FR",D.GA="GA",D.GB="GB",D.GD="GD",D.GE="GE",D.GF="GF",D.GG="GG",D.GH="GH",D.GI="GI",D.GL="GL",D.GM="GM",D.GN="GN",D.GP="GP",D.GQ="GQ",D.GR="GR",D.GT="GT",D.GU="GU",D.GW="GW",D.GY="GY",D.HK="HK",D.HN="HN",D.HR="HR",D.HT="HT",D.HU="HU",D.IC="IC",D.ID="ID",D.IE="IE",D.IL="IL",D.IN="IN",D.IQ="IQ",D.IR="IR",D.IS="IS",D.IT="IT",D.JE="JE",D.JM="JM",D.JO="JO",D.JP="JP",D.KE="KE",D.KG="KG",D.KH="KH",D.KI="KI",D.KM="KM",D.KN="KN",D.KP="KP",D.KR="KR",D.KV="KV",D.KW="KW",D.KY="KY",D.KZ="KZ",D.LA="LA",D.LB="LB",D.LC="LC",D.LI="LI",D.LK="LK",D.LR="LR",D.LS="LS",D.LT="LT",D.LU="LU",D.LV="LV",D.LY="LY",D.MA="MA",D.MC="MC",D.MD="MD",D.ME="ME",D.MG="MG",D.MH="MH",D.MK="MK",D.ML="ML",D.MM="MM",D.MN="MN",D.MO="MO",D.MP="MP",D.MQ="MQ",D.MR="MR",D.MS="MS",D.MT="MT",D.MU="MU",D.MV="MV",D.MW="MW",D.MX="MX",D.MY="MY",D.MZ="MZ",D.NA="NA",D.NC="NC",D.NE="NE",D.NG="NG",D.NI="NI",D.NL="NL",D.NO="NO",D.NP="NP",D.NR="NR",D.NU="NU",D.NZ="NZ",D.OM="OM",D.PA="PA",D.PE="PE",D.PF="PF",D.PG="PG",D.PH="PH",D.PK="PK",D.PL="PL",D.PR="PR",D.PT="PT",D.PW="PW",D.PY="PY",D.QA="QA",D.RE="RE",D.RO="RO",D.RS="RS",D.RU="RU",D.RW="RW",D.SA="SA",D.SB="SB",D.SC="SC",D.SD="SD",D.SE="SE",D.SG="SG",D.SH="SH",D.SI="SI",D.SK="SK",D.SL="SL",D.SM="SM",D.SN="SN",D.SO="SO",D.SR="SR",D.SS="SS",D.ST="ST",D.SV="SV",D.SY="SY",D.SZ="SZ",D.TC="TC",D.TD="TD",D.TG="TG",D.TH="TH",D.TJ="TJ",D.TL="TL",D.TN="TN",D.TO="TO",D.TR="TR",D.TT="TT",D.TV="TV",D.TW="TW",D.TZ="TZ",D.UA="UA",D.UG="UG",D.US="US",D.UY="UY",D.UZ="UZ",D.VA="VA",D.VC="VC",D.VE="VE",D.VG="VG",D.VI="VI",D.VN="VN",D.VU="VU",D.WS="WS",D.XB="XB",D.XC="XC",D.XE="XE",D.XM="XM",D.XN="XN",D.XS="XS",D.XY="XY",D.YE="YE",D.YT="YT",D.ZA="ZA",D.ZM="ZM",D.ZW="ZW",(T=t.ParcelDimensionUnit||(t.ParcelDimensionUnit={})).CM="CM",T.IN="IN",(n=t.ParcelWeightUnit||(t.ParcelWeightUnit={})).KG="KG",n.LB="LB",(M=t.value_currency||(t.value_currency={})).AED="AED",M.AMD="AMD",M.ANG="ANG",M.AOA="AOA",M.ARS="ARS",M.AUD="AUD",M.AWG="AWG",M.AZN="AZN",M.BAM="BAM",M.BBD="BBD",M.BDT="BDT",M.BGN="BGN",M.BHD="BHD",M.BIF="BIF",M.BMD="BMD",M.BND="BND",M.BOB="BOB",M.BRL="BRL",M.BSD="BSD",M.BTN="BTN",M.BWP="BWP",M.BYN="BYN",M.BZD="BZD",M.CAD="CAD",M.CDF="CDF",M.CHF="CHF",M.CLP="CLP",M.CNY="CNY",M.COP="COP",M.CRC="CRC",M.CUC="CUC",M.CVE="CVE",M.CZK="CZK",M.DJF="DJF",M.DKK="DKK",M.DOP="DOP",M.DZD="DZD",M.EGP="EGP",M.ERN="ERN",M.ETB="ETB",M.EUR="EUR",M.FJD="FJD",M.GBP="GBP",M.GEL="GEL",M.GHS="GHS",M.GMD="GMD",M.GNF="GNF",M.GTQ="GTQ",M.GYD="GYD",M.HKD="HKD",M.HNL="HNL",M.HRK="HRK",M.HTG="HTG",M.HUF="HUF",M.IDR="IDR",M.ILS="ILS",M.INR="INR",M.IRR="IRR",M.ISK="ISK",M.JMD="JMD",M.JOD="JOD",M.JPY="JPY",M.KES="KES",M.KGS="KGS",M.KHR="KHR",M.KMF="KMF",M.KPW="KPW",M.KRW="KRW",M.KWD="KWD",M.KYD="KYD",M.KZT="KZT",M.LAK="LAK",M.LKR="LKR",M.LRD="LRD",M.LSL="LSL",M.LYD="LYD",M.MAD="MAD",M.MDL="MDL",M.MGA="MGA",M.MKD="MKD",M.MMK="MMK",M.MNT="MNT",M.MOP="MOP",M.MRO="MRO",M.MUR="MUR",M.MVR="MVR",M.MWK="MWK",M.MXN="MXN",M.MYR="MYR",M.MZN="MZN",M.NAD="NAD",M.NGN="NGN",M.NIO="NIO",M.NOK="NOK",M.NPR="NPR",M.NZD="NZD",M.OMR="OMR",M.PEN="PEN",M.PGK="PGK",M.PHP="PHP",M.PKR="PKR",M.PLN="PLN",M.PYG="PYG",M.QAR="QAR",M.RSD="RSD",M.RUB="RUB",M.RWF="RWF",M.SAR="SAR",M.SBD="SBD",M.SCR="SCR",M.SDG="SDG",M.SEK="SEK",M.SGD="SGD",M.SHP="SHP",M.SLL="SLL",M.SOS="SOS",M.SRD="SRD",M.SSP="SSP",M.STD="STD",M.SYP="SYP",M.SZL="SZL",M.THB="THB",M.TJS="TJS",M.TND="TND",M.TOP="TOP",M.TRY="TRY",M.TTD="TTD",M.TWD="TWD",M.TZS="TZS",M.UAH="UAH",M.USD="USD",M.UYU="UYU",M.UZS="UZS",M.VEF="VEF",M.VND="VND",M.VUV="VUV",M.WST="WST",M.XAF="XAF",M.XCD="XCD",M.XOF="XOF",M.XPF="XPF",M.YER="YER",M.ZAR="ZAR",(i=t.origin_country||(t.origin_country={})).AD="AD",i.AE="AE",i.AF="AF",i.AG="AG",i.AI="AI",i.AL="AL",i.AM="AM",i.AN="AN",i.AO="AO",i.AR="AR",i.AS="AS",i.AT="AT",i.AU="AU",i.AW="AW",i.AZ="AZ",i.BA="BA",i.BB="BB",i.BD="BD",i.BE="BE",i.BF="BF",i.BG="BG",i.BH="BH",i.BI="BI",i.BJ="BJ",i.BM="BM",i.BN="BN",i.BO="BO",i.BR="BR",i.BS="BS",i.BT="BT",i.BW="BW",i.BY="BY",i.BZ="BZ",i.CA="CA",i.CD="CD",i.CF="CF",i.CG="CG",i.CH="CH",i.CI="CI",i.CK="CK",i.CL="CL",i.CM="CM",i.CN="CN",i.CO="CO",i.CR="CR",i.CU="CU",i.CV="CV",i.CY="CY",i.CZ="CZ",i.DE="DE",i.DJ="DJ",i.DK="DK",i.DM="DM",i.DO="DO",i.DZ="DZ",i.EC="EC",i.EE="EE",i.EG="EG",i.ER="ER",i.ES="ES",i.ET="ET",i.FI="FI",i.FJ="FJ",i.FK="FK",i.FM="FM",i.FO="FO",i.FR="FR",i.GA="GA",i.GB="GB",i.GD="GD",i.GE="GE",i.GF="GF",i.GG="GG",i.GH="GH",i.GI="GI",i.GL="GL",i.GM="GM",i.GN="GN",i.GP="GP",i.GQ="GQ",i.GR="GR",i.GT="GT",i.GU="GU",i.GW="GW",i.GY="GY",i.HK="HK",i.HN="HN",i.HR="HR",i.HT="HT",i.HU="HU",i.IC="IC",i.ID="ID",i.IE="IE",i.IL="IL",i.IN="IN",i.IQ="IQ",i.IR="IR",i.IS="IS",i.IT="IT",i.JE="JE",i.JM="JM",i.JO="JO",i.JP="JP",i.KE="KE",i.KG="KG",i.KH="KH",i.KI="KI",i.KM="KM",i.KN="KN",i.KP="KP",i.KR="KR",i.KV="KV",i.KW="KW",i.KY="KY",i.KZ="KZ",i.LA="LA",i.LB="LB",i.LC="LC",i.LI="LI",i.LK="LK",i.LR="LR",i.LS="LS",i.LT="LT",i.LU="LU",i.LV="LV",i.LY="LY",i.MA="MA",i.MC="MC",i.MD="MD",i.ME="ME",i.MG="MG",i.MH="MH",i.MK="MK",i.ML="ML",i.MM="MM",i.MN="MN",i.MO="MO",i.MP="MP",i.MQ="MQ",i.MR="MR",i.MS="MS",i.MT="MT",i.MU="MU",i.MV="MV",i.MW="MW",i.MX="MX",i.MY="MY",i.MZ="MZ",i.NA="NA",i.NC="NC",i.NE="NE",i.NG="NG",i.NI="NI",i.NL="NL",i.NO="NO",i.NP="NP",i.NR="NR",i.NU="NU",i.NZ="NZ",i.OM="OM",i.PA="PA",i.PE="PE",i.PF="PF",i.PG="PG",i.PH="PH",i.PK="PK",i.PL="PL",i.PR="PR",i.PT="PT",i.PW="PW",i.PY="PY",i.QA="QA",i.RE="RE",i.RO="RO",i.RS="RS",i.RU="RU",i.RW="RW",i.SA="SA",i.SB="SB",i.SC="SC",i.SD="SD",i.SE="SE",i.SG="SG",i.SH="SH",i.SI="SI",i.SK="SK",i.SL="SL",i.SM="SM",i.SN="SN",i.SO="SO",i.SR="SR",i.SS="SS",i.ST="ST",i.SV="SV",i.SY="SY",i.SZ="SZ",i.TC="TC",i.TD="TD",i.TG="TG",i.TH="TH",i.TJ="TJ",i.TL="TL",i.TN="TN",i.TO="TO",i.TR="TR",i.TT="TT",i.TV="TV",i.TW="TW",i.TZ="TZ",i.UA="UA",i.UG="UG",i.US="US",i.UY="UY",i.UZ="UZ",i.VA="VA",i.VC="VC",i.VE="VE",i.VG="VG",i.VI="VI",i.VN="VN",i.VU="VU",i.WS="WS",i.XB="XB",i.XC="XC",i.XE="XE",i.XM="XM",i.XN="XN",i.XS="XS",i.XY="XY",i.YE="YE",i.YT="YT",i.ZA="ZA",i.ZM="ZM",i.ZW="ZW",(a=t.incoterm||(t.incoterm={})).CFR="CFR",a.CIF="CIF",a.CIP="CIP",a.CPT="CPT",a.DAF="DAF",a.DDP="DDP",a.DDU="DDU",a.DEQ="DEQ",a.DES="DES",a.EXW="EXW",a.FAS="FAS",a.FCA="FCA",a.FOB="FOB",(r=t.weight_unit||(t.weight_unit={})).KG="KG",r.LB="LB",(S=t.dimension_unit||(t.dimension_unit={})).CM="CM",S.IN="IN"},7960:(e,t,S)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.graphClient=void 0;const r=S(6829);t.graphClient=new r.ApolloClient({uri:"/graphql",cache:new r.InMemoryCache({addTypename:!1})})}},e=>{"use strict";var t=t=>e(e.s=t);e.O(0,[736],(()=>(t(7960),t(7459)))),e.O()}]);
//# sourceMappingURL=purplship.graph.min.js.map