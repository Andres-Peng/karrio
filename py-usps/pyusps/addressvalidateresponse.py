#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 17:55:55 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/AddressValidateResponse.xsd.py')
#
# Command line arguments:
#   AddressValidateResponse.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/AddressValidateResponse.xsd.py" AddressValidateResponse.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AddressValidateResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None):
        self.original_tagname_ = None
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressValidateResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressValidateResponse.subclass:
            return AddressValidateResponse.subclass(*args_, **kwargs_)
        else:
            return AddressValidateResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressValidateResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressValidateResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidateResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressValidateResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressValidateResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressValidateResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class AddressValidateResponse


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, Address1=None, Address2=None, Address2Abbreviation=None, City=None, CityAbbreviation=None, State=None, Urbanization=None, Zip5=None, Zip4=None, DeliveryPoint=None, CarrierRoute=None, FirmName=None, Footnotes=None, DPVConfirmation=None, DPVCMRA=None, DPVFootnotes=None, Business=None, CentralDeliveryPoint=None, Vacant=None, ReturnText=None):
        self.original_tagname_ = None
        self.ID = _cast(int, ID)
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address2Abbreviation = Address2Abbreviation
        self.City = City
        self.CityAbbreviation = CityAbbreviation
        self.State = State
        self.Urbanization = Urbanization
        self.Zip5 = Zip5
        self.Zip4 = Zip4
        self.DeliveryPoint = DeliveryPoint
        self.CarrierRoute = CarrierRoute
        self.FirmName = FirmName
        self.Footnotes = Footnotes
        self.DPVConfirmation = DPVConfirmation
        self.DPVCMRA = DPVCMRA
        self.DPVFootnotes = DPVFootnotes
        self.Business = Business
        self.CentralDeliveryPoint = CentralDeliveryPoint
        self.Vacant = Vacant
        self.ReturnText = ReturnText
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address2Abbreviation(self): return self.Address2Abbreviation
    def set_Address2Abbreviation(self, Address2Abbreviation): self.Address2Abbreviation = Address2Abbreviation
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_CityAbbreviation(self): return self.CityAbbreviation
    def set_CityAbbreviation(self, CityAbbreviation): self.CityAbbreviation = CityAbbreviation
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_Urbanization(self): return self.Urbanization
    def set_Urbanization(self, Urbanization): self.Urbanization = Urbanization
    def get_Zip5(self): return self.Zip5
    def set_Zip5(self, Zip5): self.Zip5 = Zip5
    def get_Zip4(self): return self.Zip4
    def set_Zip4(self, Zip4): self.Zip4 = Zip4
    def get_DeliveryPoint(self): return self.DeliveryPoint
    def set_DeliveryPoint(self, DeliveryPoint): self.DeliveryPoint = DeliveryPoint
    def get_CarrierRoute(self): return self.CarrierRoute
    def set_CarrierRoute(self, CarrierRoute): self.CarrierRoute = CarrierRoute
    def get_FirmName(self): return self.FirmName
    def set_FirmName(self, FirmName): self.FirmName = FirmName
    def get_Footnotes(self): return self.Footnotes
    def set_Footnotes(self, Footnotes): self.Footnotes = Footnotes
    def get_DPVConfirmation(self): return self.DPVConfirmation
    def set_DPVConfirmation(self, DPVConfirmation): self.DPVConfirmation = DPVConfirmation
    def get_DPVCMRA(self): return self.DPVCMRA
    def set_DPVCMRA(self, DPVCMRA): self.DPVCMRA = DPVCMRA
    def get_DPVFootnotes(self): return self.DPVFootnotes
    def set_DPVFootnotes(self, DPVFootnotes): self.DPVFootnotes = DPVFootnotes
    def get_Business(self): return self.Business
    def set_Business(self, Business): self.Business = Business
    def get_CentralDeliveryPoint(self): return self.CentralDeliveryPoint
    def set_CentralDeliveryPoint(self, CentralDeliveryPoint): self.CentralDeliveryPoint = CentralDeliveryPoint
    def get_Vacant(self): return self.Vacant
    def set_Vacant(self, Vacant): self.Vacant = Vacant
    def get_ReturnText(self): return self.ReturnText
    def set_ReturnText(self, ReturnText): self.ReturnText = ReturnText
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address2Abbreviation is not None or
            self.City is not None or
            self.CityAbbreviation is not None or
            self.State is not None or
            self.Urbanization is not None or
            self.Zip5 is not None or
            self.Zip4 is not None or
            self.DeliveryPoint is not None or
            self.CarrierRoute is not None or
            self.FirmName is not None or
            self.Footnotes is not None or
            self.DPVConfirmation is not None or
            self.DPVCMRA is not None or
            self.DPVFootnotes is not None or
            self.Business is not None or
            self.CentralDeliveryPoint is not None or
            self.Vacant is not None or
            self.ReturnText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID="%s"' % self.gds_format_integer(self.ID, input_name='ID'))
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Address1>%s</Address1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Address1), input_name='Address1')), eol_))
        if self.Address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Address2>%s</Address2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Address2), input_name='Address2')), eol_))
        if self.Address2Abbreviation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Address2Abbreviation>%s</Address2Abbreviation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Address2Abbreviation), input_name='Address2Abbreviation')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.CityAbbreviation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CityAbbreviation>%s</CityAbbreviation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CityAbbreviation), input_name='CityAbbreviation')), eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<State>%s</State>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), eol_))
        if self.Urbanization is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Urbanization>%s</Urbanization>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Urbanization), input_name='Urbanization')), eol_))
        if self.Zip5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Zip5>%s</Zip5>%s' % (self.gds_format_integer(self.Zip5, input_name='Zip5'), eol_))
        if self.Zip4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Zip4>%s</Zip4>%s' % (self.gds_format_integer(self.Zip4, input_name='Zip4'), eol_))
        if self.DeliveryPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DeliveryPoint>%s</DeliveryPoint>%s' % (self.gds_format_integer(self.DeliveryPoint, input_name='DeliveryPoint'), eol_))
        if self.CarrierRoute is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CarrierRoute>%s</CarrierRoute>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierRoute), input_name='CarrierRoute')), eol_))
        if self.FirmName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FirmName>%s</FirmName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FirmName), input_name='FirmName')), eol_))
        if self.Footnotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Footnotes>%s</Footnotes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Footnotes), input_name='Footnotes')), eol_))
        if self.DPVConfirmation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DPVConfirmation>%s</DPVConfirmation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DPVConfirmation), input_name='DPVConfirmation')), eol_))
        if self.DPVCMRA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DPVCMRA>%s</DPVCMRA>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DPVCMRA), input_name='DPVCMRA')), eol_))
        if self.DPVFootnotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DPVFootnotes>%s</DPVFootnotes>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DPVFootnotes), input_name='DPVFootnotes')), eol_))
        if self.Business is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Business>%s</Business>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Business), input_name='Business')), eol_))
        if self.CentralDeliveryPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CentralDeliveryPoint>%s</CentralDeliveryPoint>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CentralDeliveryPoint), input_name='CentralDeliveryPoint')), eol_))
        if self.Vacant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Vacant>%s</Vacant>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Vacant), input_name='Vacant')), eol_))
        if self.ReturnText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReturnText>%s</ReturnText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReturnText), input_name='ReturnText')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            try:
                self.ID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address1':
            Address1_ = child_.text
            Address1_ = self.gds_validate_string(Address1_, node, 'Address1')
            self.Address1 = Address1_
        elif nodeName_ == 'Address2':
            Address2_ = child_.text
            Address2_ = self.gds_validate_string(Address2_, node, 'Address2')
            self.Address2 = Address2_
        elif nodeName_ == 'Address2Abbreviation':
            Address2Abbreviation_ = child_.text
            Address2Abbreviation_ = self.gds_validate_string(Address2Abbreviation_, node, 'Address2Abbreviation')
            self.Address2Abbreviation = Address2Abbreviation_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'CityAbbreviation':
            CityAbbreviation_ = child_.text
            CityAbbreviation_ = self.gds_validate_string(CityAbbreviation_, node, 'CityAbbreviation')
            self.CityAbbreviation = CityAbbreviation_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'Urbanization':
            Urbanization_ = child_.text
            Urbanization_ = self.gds_validate_string(Urbanization_, node, 'Urbanization')
            self.Urbanization = Urbanization_
        elif nodeName_ == 'Zip5':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Zip5')
            self.Zip5 = ival_
        elif nodeName_ == 'Zip4':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Zip4')
            self.Zip4 = ival_
        elif nodeName_ == 'DeliveryPoint':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DeliveryPoint')
            self.DeliveryPoint = ival_
        elif nodeName_ == 'CarrierRoute':
            CarrierRoute_ = child_.text
            CarrierRoute_ = self.gds_validate_string(CarrierRoute_, node, 'CarrierRoute')
            self.CarrierRoute = CarrierRoute_
        elif nodeName_ == 'FirmName':
            FirmName_ = child_.text
            FirmName_ = self.gds_validate_string(FirmName_, node, 'FirmName')
            self.FirmName = FirmName_
        elif nodeName_ == 'Footnotes':
            Footnotes_ = child_.text
            Footnotes_ = self.gds_validate_string(Footnotes_, node, 'Footnotes')
            self.Footnotes = Footnotes_
        elif nodeName_ == 'DPVConfirmation':
            DPVConfirmation_ = child_.text
            DPVConfirmation_ = self.gds_validate_string(DPVConfirmation_, node, 'DPVConfirmation')
            self.DPVConfirmation = DPVConfirmation_
        elif nodeName_ == 'DPVCMRA':
            DPVCMRA_ = child_.text
            DPVCMRA_ = self.gds_validate_string(DPVCMRA_, node, 'DPVCMRA')
            self.DPVCMRA = DPVCMRA_
        elif nodeName_ == 'DPVFootnotes':
            DPVFootnotes_ = child_.text
            DPVFootnotes_ = self.gds_validate_string(DPVFootnotes_, node, 'DPVFootnotes')
            self.DPVFootnotes = DPVFootnotes_
        elif nodeName_ == 'Business':
            Business_ = child_.text
            Business_ = self.gds_validate_string(Business_, node, 'Business')
            self.Business = Business_
        elif nodeName_ == 'CentralDeliveryPoint':
            CentralDeliveryPoint_ = child_.text
            CentralDeliveryPoint_ = self.gds_validate_string(CentralDeliveryPoint_, node, 'CentralDeliveryPoint')
            self.CentralDeliveryPoint = CentralDeliveryPoint_
        elif nodeName_ == 'Vacant':
            Vacant_ = child_.text
            Vacant_ = self.gds_validate_string(Vacant_, node, 'Vacant')
            self.Vacant = Vacant_
        elif nodeName_ == 'ReturnText':
            ReturnText_ = child_.text
            ReturnText_ = self.gds_validate_string(ReturnText_, node, 'ReturnText')
            self.ReturnText = ReturnText_
# end class AddressType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidateResponse'
        rootClass = AddressValidateResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidateResponse'
        rootClass = AddressValidateResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidateResponse'
        rootClass = AddressValidateResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidateResponse'
        rootClass = AddressValidateResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from AddressValidateResponse.xsd import *\n\n')
        sys.stdout.write('import AddressValidateResponse.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AddressType",
    "AddressValidateResponse"
]
