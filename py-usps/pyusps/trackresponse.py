#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Mar 29 21:54:57 2019 by generateDS.py version 2.30.11.
# Python 3.6.7 (v3.6.7:6ec5cf24b7, Oct 20 2018, 03:02:14)  [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('-o', 'pyusps/trackresponse.py')
#
# Command line arguments:
#   schemas/TrackResponse.xsd
#
# Command line:
#   /Users/danielkobina/.local/share/virtualenvs/purplship-1e5r9ZQo/bin/generateDS -o "pyusps/trackresponse.py" schemas/TrackResponse.xsd
#
# Current working directory (os.getcwd()):
#   py-usps
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class TrackResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackInfo=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if TrackInfo is None:
            self.TrackInfo = []
        else:
            self.TrackInfo = TrackInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackResponse.subclass:
            return TrackResponse.subclass(*args_, **kwargs_)
        else:
            return TrackResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackInfo(self):
        return self.TrackInfo
    def set_TrackInfo(self, TrackInfo):
        self.TrackInfo = TrackInfo
    def add_TrackInfo(self, value):
        self.TrackInfo.append(value)
    def add_TrackInfo(self, value):
        self.TrackInfo.append(value)
    def insert_TrackInfo_at(self, index, value):
        self.TrackInfo.insert(index, value)
    def replace_TrackInfo_at(self, index, value):
        self.TrackInfo[index] = value
    def hasContent_(self):
        if (
            self.TrackInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TrackInfo_ in self.TrackInfo:
            TrackInfo_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackInfo':
            obj_ = TrackInfoType.factory(parent_object_=self)
            obj_.build(child_)
            self.TrackInfo.append(obj_)
            obj_.original_tagname_ = 'TrackInfo'
# end class TrackResponse


class TrackInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackInfoID=None, AdditionalInfo=None, ADPScripting=None, ARCHDATA=None, ArchiveRestoreInfo=None, AssociatedLabel=None, Class=None, ClassOfMailCode=None, DeliveryNotificationDate=None, DestinationCity=None, DestinationCountryCode=None, DestinationState=None, DestinationZip=None, EditedLabelID=None, EmailEnabled=None, ExpectedDeliveryDate=None, ExpectedDeliveryTime=None, GuaranteedDeliveryDate=None, GuaranteedDeliveryTime=None, GuaranteedDetails=None, KahalaIndicator=None, MailTypeCode=None, MPDATE=None, MPSUFFIX=None, OriginCity=None, OriginCountryCode=None, OriginState=None, OriginZip=None, PodEnabled=None, PredictedDeliveryDate=None, PredictedDeliveryTime=None, PDWStart=None, PDWEnd=None, RelatedRRID=None, RestoreEnabled=None, RRAMenabled=None, RreEnabled=None, Service=None, ServiceTypeCode=None, Status=None, StatusCategory=None, StatusSummary=None, TABLECODE=None, TpodEnabled=None, ValueofArticle=None, EnabledNotificationRequests=None, TrackSummary=None, TrackDetail=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TrackInfoID = _cast(None, TrackInfoID)
        self.AdditionalInfo = AdditionalInfo
        self.ADPScripting = ADPScripting
        self.ARCHDATA = ARCHDATA
        self.ArchiveRestoreInfo = ArchiveRestoreInfo
        self.AssociatedLabel = AssociatedLabel
        self.Class = Class
        self.ClassOfMailCode = ClassOfMailCode
        self.DeliveryNotificationDate = DeliveryNotificationDate
        self.DestinationCity = DestinationCity
        self.DestinationCountryCode = DestinationCountryCode
        self.DestinationState = DestinationState
        self.DestinationZip = DestinationZip
        self.EditedLabelID = EditedLabelID
        self.EmailEnabled = EmailEnabled
        self.ExpectedDeliveryDate = ExpectedDeliveryDate
        self.ExpectedDeliveryTime = ExpectedDeliveryTime
        self.GuaranteedDeliveryDate = GuaranteedDeliveryDate
        self.GuaranteedDeliveryTime = GuaranteedDeliveryTime
        self.GuaranteedDetails = GuaranteedDetails
        self.KahalaIndicator = KahalaIndicator
        self.MailTypeCode = MailTypeCode
        self.MPDATE = MPDATE
        self.MPSUFFIX = MPSUFFIX
        self.OriginCity = OriginCity
        self.OriginCountryCode = OriginCountryCode
        self.OriginState = OriginState
        self.OriginZip = OriginZip
        self.PodEnabled = PodEnabled
        self.PredictedDeliveryDate = PredictedDeliveryDate
        self.PredictedDeliveryTime = PredictedDeliveryTime
        self.PDWStart = PDWStart
        self.PDWEnd = PDWEnd
        self.RelatedRRID = RelatedRRID
        self.RestoreEnabled = RestoreEnabled
        self.RRAMenabled = RRAMenabled
        self.RreEnabled = RreEnabled
        self.Service = Service
        self.ServiceTypeCode = ServiceTypeCode
        self.Status = Status
        self.StatusCategory = StatusCategory
        self.StatusSummary = StatusSummary
        self.TABLECODE = TABLECODE
        self.TpodEnabled = TpodEnabled
        self.ValueofArticle = ValueofArticle
        self.EnabledNotificationRequests = EnabledNotificationRequests
        self.TrackSummary = TrackSummary
        self.TrackDetail = TrackDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackInfoType.subclass:
            return TrackInfoType.subclass(*args_, **kwargs_)
        else:
            return TrackInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AdditionalInfo(self):
        return self.AdditionalInfo
    def set_AdditionalInfo(self, AdditionalInfo):
        self.AdditionalInfo = AdditionalInfo
    def get_ADPScripting(self):
        return self.ADPScripting
    def set_ADPScripting(self, ADPScripting):
        self.ADPScripting = ADPScripting
    def get_ARCHDATA(self):
        return self.ARCHDATA
    def set_ARCHDATA(self, ARCHDATA):
        self.ARCHDATA = ARCHDATA
    def get_ArchiveRestoreInfo(self):
        return self.ArchiveRestoreInfo
    def set_ArchiveRestoreInfo(self, ArchiveRestoreInfo):
        self.ArchiveRestoreInfo = ArchiveRestoreInfo
    def get_AssociatedLabel(self):
        return self.AssociatedLabel
    def set_AssociatedLabel(self, AssociatedLabel):
        self.AssociatedLabel = AssociatedLabel
    def get_Class(self):
        return self.Class
    def set_Class(self, Class):
        self.Class = Class
    def get_ClassOfMailCode(self):
        return self.ClassOfMailCode
    def set_ClassOfMailCode(self, ClassOfMailCode):
        self.ClassOfMailCode = ClassOfMailCode
    def get_DeliveryNotificationDate(self):
        return self.DeliveryNotificationDate
    def set_DeliveryNotificationDate(self, DeliveryNotificationDate):
        self.DeliveryNotificationDate = DeliveryNotificationDate
    def get_DestinationCity(self):
        return self.DestinationCity
    def set_DestinationCity(self, DestinationCity):
        self.DestinationCity = DestinationCity
    def get_DestinationCountryCode(self):
        return self.DestinationCountryCode
    def set_DestinationCountryCode(self, DestinationCountryCode):
        self.DestinationCountryCode = DestinationCountryCode
    def get_DestinationState(self):
        return self.DestinationState
    def set_DestinationState(self, DestinationState):
        self.DestinationState = DestinationState
    def get_DestinationZip(self):
        return self.DestinationZip
    def set_DestinationZip(self, DestinationZip):
        self.DestinationZip = DestinationZip
    def get_EditedLabelID(self):
        return self.EditedLabelID
    def set_EditedLabelID(self, EditedLabelID):
        self.EditedLabelID = EditedLabelID
    def get_EmailEnabled(self):
        return self.EmailEnabled
    def set_EmailEnabled(self, EmailEnabled):
        self.EmailEnabled = EmailEnabled
    def get_ExpectedDeliveryDate(self):
        return self.ExpectedDeliveryDate
    def set_ExpectedDeliveryDate(self, ExpectedDeliveryDate):
        self.ExpectedDeliveryDate = ExpectedDeliveryDate
    def get_ExpectedDeliveryTime(self):
        return self.ExpectedDeliveryTime
    def set_ExpectedDeliveryTime(self, ExpectedDeliveryTime):
        self.ExpectedDeliveryTime = ExpectedDeliveryTime
    def get_GuaranteedDeliveryDate(self):
        return self.GuaranteedDeliveryDate
    def set_GuaranteedDeliveryDate(self, GuaranteedDeliveryDate):
        self.GuaranteedDeliveryDate = GuaranteedDeliveryDate
    def get_GuaranteedDeliveryTime(self):
        return self.GuaranteedDeliveryTime
    def set_GuaranteedDeliveryTime(self, GuaranteedDeliveryTime):
        self.GuaranteedDeliveryTime = GuaranteedDeliveryTime
    def get_GuaranteedDetails(self):
        return self.GuaranteedDetails
    def set_GuaranteedDetails(self, GuaranteedDetails):
        self.GuaranteedDetails = GuaranteedDetails
    def get_KahalaIndicator(self):
        return self.KahalaIndicator
    def set_KahalaIndicator(self, KahalaIndicator):
        self.KahalaIndicator = KahalaIndicator
    def get_MailTypeCode(self):
        return self.MailTypeCode
    def set_MailTypeCode(self, MailTypeCode):
        self.MailTypeCode = MailTypeCode
    def get_MPDATE(self):
        return self.MPDATE
    def set_MPDATE(self, MPDATE):
        self.MPDATE = MPDATE
    def get_MPSUFFIX(self):
        return self.MPSUFFIX
    def set_MPSUFFIX(self, MPSUFFIX):
        self.MPSUFFIX = MPSUFFIX
    def get_OriginCity(self):
        return self.OriginCity
    def set_OriginCity(self, OriginCity):
        self.OriginCity = OriginCity
    def get_OriginCountryCode(self):
        return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode):
        self.OriginCountryCode = OriginCountryCode
    def get_OriginState(self):
        return self.OriginState
    def set_OriginState(self, OriginState):
        self.OriginState = OriginState
    def get_OriginZip(self):
        return self.OriginZip
    def set_OriginZip(self, OriginZip):
        self.OriginZip = OriginZip
    def get_PodEnabled(self):
        return self.PodEnabled
    def set_PodEnabled(self, PodEnabled):
        self.PodEnabled = PodEnabled
    def get_PredictedDeliveryDate(self):
        return self.PredictedDeliveryDate
    def set_PredictedDeliveryDate(self, PredictedDeliveryDate):
        self.PredictedDeliveryDate = PredictedDeliveryDate
    def get_PredictedDeliveryTime(self):
        return self.PredictedDeliveryTime
    def set_PredictedDeliveryTime(self, PredictedDeliveryTime):
        self.PredictedDeliveryTime = PredictedDeliveryTime
    def get_PDWStart(self):
        return self.PDWStart
    def set_PDWStart(self, PDWStart):
        self.PDWStart = PDWStart
    def get_PDWEnd(self):
        return self.PDWEnd
    def set_PDWEnd(self, PDWEnd):
        self.PDWEnd = PDWEnd
    def get_RelatedRRID(self):
        return self.RelatedRRID
    def set_RelatedRRID(self, RelatedRRID):
        self.RelatedRRID = RelatedRRID
    def get_RestoreEnabled(self):
        return self.RestoreEnabled
    def set_RestoreEnabled(self, RestoreEnabled):
        self.RestoreEnabled = RestoreEnabled
    def get_RRAMenabled(self):
        return self.RRAMenabled
    def set_RRAMenabled(self, RRAMenabled):
        self.RRAMenabled = RRAMenabled
    def get_RreEnabled(self):
        return self.RreEnabled
    def set_RreEnabled(self, RreEnabled):
        self.RreEnabled = RreEnabled
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_ServiceTypeCode(self):
        return self.ServiceTypeCode
    def set_ServiceTypeCode(self, ServiceTypeCode):
        self.ServiceTypeCode = ServiceTypeCode
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_StatusCategory(self):
        return self.StatusCategory
    def set_StatusCategory(self, StatusCategory):
        self.StatusCategory = StatusCategory
    def get_StatusSummary(self):
        return self.StatusSummary
    def set_StatusSummary(self, StatusSummary):
        self.StatusSummary = StatusSummary
    def get_TABLECODE(self):
        return self.TABLECODE
    def set_TABLECODE(self, TABLECODE):
        self.TABLECODE = TABLECODE
    def get_TpodEnabled(self):
        return self.TpodEnabled
    def set_TpodEnabled(self, TpodEnabled):
        self.TpodEnabled = TpodEnabled
    def get_ValueofArticle(self):
        return self.ValueofArticle
    def set_ValueofArticle(self, ValueofArticle):
        self.ValueofArticle = ValueofArticle
    def get_EnabledNotificationRequests(self):
        return self.EnabledNotificationRequests
    def set_EnabledNotificationRequests(self, EnabledNotificationRequests):
        self.EnabledNotificationRequests = EnabledNotificationRequests
    def get_TrackSummary(self):
        return self.TrackSummary
    def set_TrackSummary(self, TrackSummary):
        self.TrackSummary = TrackSummary
    def get_TrackDetail(self):
        return self.TrackDetail
    def set_TrackDetail(self, TrackDetail):
        self.TrackDetail = TrackDetail
    def get_TrackInfoID(self):
        return self.TrackInfoID
    def set_TrackInfoID(self, TrackInfoID):
        self.TrackInfoID = TrackInfoID
    def hasContent_(self):
        if (
            self.AdditionalInfo is not None or
            self.ADPScripting is not None or
            self.ARCHDATA is not None or
            self.ArchiveRestoreInfo is not None or
            self.AssociatedLabel is not None or
            self.Class is not None or
            self.ClassOfMailCode is not None or
            self.DeliveryNotificationDate is not None or
            self.DestinationCity is not None or
            self.DestinationCountryCode is not None or
            self.DestinationState is not None or
            self.DestinationZip is not None or
            self.EditedLabelID is not None or
            self.EmailEnabled is not None or
            self.ExpectedDeliveryDate is not None or
            self.ExpectedDeliveryTime is not None or
            self.GuaranteedDeliveryDate is not None or
            self.GuaranteedDeliveryTime is not None or
            self.GuaranteedDetails is not None or
            self.KahalaIndicator is not None or
            self.MailTypeCode is not None or
            self.MPDATE is not None or
            self.MPSUFFIX is not None or
            self.OriginCity is not None or
            self.OriginCountryCode is not None or
            self.OriginState is not None or
            self.OriginZip is not None or
            self.PodEnabled is not None or
            self.PredictedDeliveryDate is not None or
            self.PredictedDeliveryTime is not None or
            self.PDWStart is not None or
            self.PDWEnd is not None or
            self.RelatedRRID is not None or
            self.RestoreEnabled is not None or
            self.RRAMenabled is not None or
            self.RreEnabled is not None or
            self.Service is not None or
            self.ServiceTypeCode is not None or
            self.Status is not None or
            self.StatusCategory is not None or
            self.StatusSummary is not None or
            self.TABLECODE is not None or
            self.TpodEnabled is not None or
            self.ValueofArticle is not None or
            self.EnabledNotificationRequests is not None or
            self.TrackSummary is not None or
            self.TrackDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackInfoType'):
        if self.TrackInfoID is not None and 'TrackInfoID' not in already_processed:
            already_processed.add('TrackInfoID')
            outfile.write(' TrackInfoID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TrackInfoID), input_name='TrackInfoID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AdditionalInfo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalInfo>%s</%sAdditionalInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalInfo), input_name='AdditionalInfo')), namespaceprefix_ , eol_))
        if self.ADPScripting is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sADPScripting>%s</%sADPScripting>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ADPScripting), input_name='ADPScripting')), namespaceprefix_ , eol_))
        if self.ARCHDATA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sARCHDATA>%s</%sARCHDATA>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ARCHDATA, input_name='ARCHDATA'), namespaceprefix_ , eol_))
        if self.ArchiveRestoreInfo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sArchiveRestoreInfo>%s</%sArchiveRestoreInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ArchiveRestoreInfo), input_name='ArchiveRestoreInfo')), namespaceprefix_ , eol_))
        if self.AssociatedLabel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssociatedLabel>%s</%sAssociatedLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AssociatedLabel), input_name='AssociatedLabel')), namespaceprefix_ , eol_))
        if self.Class is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClass>%s</%sClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Class), input_name='Class')), namespaceprefix_ , eol_))
        if self.ClassOfMailCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassOfMailCode>%s</%sClassOfMailCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassOfMailCode), input_name='ClassOfMailCode')), namespaceprefix_ , eol_))
        if self.DeliveryNotificationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryNotificationDate>%s</%sDeliveryNotificationDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryNotificationDate), input_name='DeliveryNotificationDate')), namespaceprefix_ , eol_))
        if self.DestinationCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCity>%s</%sDestinationCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCity), input_name='DestinationCity')), namespaceprefix_ , eol_))
        if self.DestinationCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountryCode>%s</%sDestinationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountryCode), input_name='DestinationCountryCode')), namespaceprefix_ , eol_))
        if self.DestinationState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationState>%s</%sDestinationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationState), input_name='DestinationState')), namespaceprefix_ , eol_))
        if self.DestinationZip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationZip>%s</%sDestinationZip>%s' % (namespaceprefix_ , self.gds_format_integer(self.DestinationZip, input_name='DestinationZip'), namespaceprefix_ , eol_))
        if self.EditedLabelID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditedLabelID>%s</%sEditedLabelID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EditedLabelID), input_name='EditedLabelID')), namespaceprefix_ , eol_))
        if self.EmailEnabled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailEnabled>%s</%sEmailEnabled>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailEnabled), input_name='EmailEnabled')), namespaceprefix_ , eol_))
        if self.ExpectedDeliveryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpectedDeliveryDate>%s</%sExpectedDeliveryDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExpectedDeliveryDate), input_name='ExpectedDeliveryDate')), namespaceprefix_ , eol_))
        if self.ExpectedDeliveryTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpectedDeliveryTime>%s</%sExpectedDeliveryTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExpectedDeliveryTime), input_name='ExpectedDeliveryTime')), namespaceprefix_ , eol_))
        if self.GuaranteedDeliveryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteedDeliveryDate>%s</%sGuaranteedDeliveryDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedDeliveryDate), input_name='GuaranteedDeliveryDate')), namespaceprefix_ , eol_))
        if self.GuaranteedDeliveryTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteedDeliveryTime>%s</%sGuaranteedDeliveryTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedDeliveryTime), input_name='GuaranteedDeliveryTime')), namespaceprefix_ , eol_))
        if self.GuaranteedDetails is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteedDetails>%s</%sGuaranteedDetails>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedDetails), input_name='GuaranteedDetails')), namespaceprefix_ , eol_))
        if self.KahalaIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKahalaIndicator>%s</%sKahalaIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KahalaIndicator), input_name='KahalaIndicator')), namespaceprefix_ , eol_))
        if self.MailTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMailTypeCode>%s</%sMailTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MailTypeCode), input_name='MailTypeCode')), namespaceprefix_ , eol_))
        if self.MPDATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMPDATE>%s</%sMPDATE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MPDATE), input_name='MPDATE')), namespaceprefix_ , eol_))
        if self.MPSUFFIX is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMPSUFFIX>%s</%sMPSUFFIX>%s' % (namespaceprefix_ , self.gds_format_integer(self.MPSUFFIX, input_name='MPSUFFIX'), namespaceprefix_ , eol_))
        if self.OriginCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCity>%s</%sOriginCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCity), input_name='OriginCity')), namespaceprefix_ , eol_))
        if self.OriginCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryCode>%s</%sOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), namespaceprefix_ , eol_))
        if self.OriginState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginState>%s</%sOriginState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginState), input_name='OriginState')), namespaceprefix_ , eol_))
        if self.OriginZip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginZip>%s</%sOriginZip>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginZip), input_name='OriginZip')), namespaceprefix_ , eol_))
        if self.PodEnabled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPodEnabled>%s</%sPodEnabled>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PodEnabled), input_name='PodEnabled')), namespaceprefix_ , eol_))
        if self.PredictedDeliveryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPredictedDeliveryDate>%s</%sPredictedDeliveryDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PredictedDeliveryDate), input_name='PredictedDeliveryDate')), namespaceprefix_ , eol_))
        if self.PredictedDeliveryTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPredictedDeliveryTime>%s</%sPredictedDeliveryTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PredictedDeliveryTime), input_name='PredictedDeliveryTime')), namespaceprefix_ , eol_))
        if self.PDWStart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPDWStart>%s</%sPDWStart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PDWStart), input_name='PDWStart')), namespaceprefix_ , eol_))
        if self.PDWEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPDWEnd>%s</%sPDWEnd>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PDWEnd), input_name='PDWEnd')), namespaceprefix_ , eol_))
        if self.RelatedRRID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelatedRRID>%s</%sRelatedRRID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RelatedRRID), input_name='RelatedRRID')), namespaceprefix_ , eol_))
        if self.RestoreEnabled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestoreEnabled>%s</%sRestoreEnabled>%s' % (namespaceprefix_ , self.gds_format_boolean(self.RestoreEnabled, input_name='RestoreEnabled'), namespaceprefix_ , eol_))
        if self.RRAMenabled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRRAMenabled>%s</%sRRAMenabled>%s' % (namespaceprefix_ , self.gds_format_boolean(self.RRAMenabled, input_name='RRAMenabled'), namespaceprefix_ , eol_))
        if self.RreEnabled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRreEnabled>%s</%sRreEnabled>%s' % (namespaceprefix_ , self.gds_format_boolean(self.RreEnabled, input_name='RreEnabled'), namespaceprefix_ , eol_))
        if self.Service is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sService>%s</%sService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), namespaceprefix_ , eol_))
        if self.ServiceTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceTypeCode>%s</%sServiceTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceTypeCode), input_name='ServiceTypeCode')), namespaceprefix_ , eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
        if self.StatusCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCategory>%s</%sStatusCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusCategory), input_name='StatusCategory')), namespaceprefix_ , eol_))
        if self.StatusSummary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusSummary>%s</%sStatusSummary>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusSummary), input_name='StatusSummary')), namespaceprefix_ , eol_))
        if self.TABLECODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTABLECODE>%s</%sTABLECODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TABLECODE), input_name='TABLECODE')), namespaceprefix_ , eol_))
        if self.TpodEnabled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTpodEnabled>%s</%sTpodEnabled>%s' % (namespaceprefix_ , self.gds_format_boolean(self.TpodEnabled, input_name='TpodEnabled'), namespaceprefix_ , eol_))
        if self.ValueofArticle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueofArticle>%s</%sValueofArticle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ValueofArticle), input_name='ValueofArticle')), namespaceprefix_ , eol_))
        if self.EnabledNotificationRequests is not None:
            self.EnabledNotificationRequests.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EnabledNotificationRequests', pretty_print=pretty_print)
        if self.TrackSummary is not None:
            self.TrackSummary.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackSummary', pretty_print=pretty_print)
        if self.TrackDetail is not None:
            self.TrackDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('TrackInfoID', node)
        if value is not None and 'TrackInfoID' not in already_processed:
            already_processed.add('TrackInfoID')
            self.TrackInfoID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AdditionalInfo':
            AdditionalInfo_ = child_.text
            AdditionalInfo_ = self.gds_validate_string(AdditionalInfo_, node, 'AdditionalInfo')
            self.AdditionalInfo = AdditionalInfo_
        elif nodeName_ == 'ADPScripting':
            ADPScripting_ = child_.text
            ADPScripting_ = self.gds_validate_string(ADPScripting_, node, 'ADPScripting')
            self.ADPScripting = ADPScripting_
        elif nodeName_ == 'ARCHDATA':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ARCHDATA')
            self.ARCHDATA = ival_
        elif nodeName_ == 'ArchiveRestoreInfo':
            ArchiveRestoreInfo_ = child_.text
            ArchiveRestoreInfo_ = self.gds_validate_string(ArchiveRestoreInfo_, node, 'ArchiveRestoreInfo')
            self.ArchiveRestoreInfo = ArchiveRestoreInfo_
        elif nodeName_ == 'AssociatedLabel':
            AssociatedLabel_ = child_.text
            AssociatedLabel_ = self.gds_validate_string(AssociatedLabel_, node, 'AssociatedLabel')
            self.AssociatedLabel = AssociatedLabel_
        elif nodeName_ == 'Class':
            Class_ = child_.text
            Class_ = self.gds_validate_string(Class_, node, 'Class')
            self.Class = Class_
        elif nodeName_ == 'ClassOfMailCode':
            ClassOfMailCode_ = child_.text
            ClassOfMailCode_ = self.gds_validate_string(ClassOfMailCode_, node, 'ClassOfMailCode')
            self.ClassOfMailCode = ClassOfMailCode_
        elif nodeName_ == 'DeliveryNotificationDate':
            DeliveryNotificationDate_ = child_.text
            DeliveryNotificationDate_ = self.gds_validate_string(DeliveryNotificationDate_, node, 'DeliveryNotificationDate')
            self.DeliveryNotificationDate = DeliveryNotificationDate_
        elif nodeName_ == 'DestinationCity':
            DestinationCity_ = child_.text
            DestinationCity_ = self.gds_validate_string(DestinationCity_, node, 'DestinationCity')
            self.DestinationCity = DestinationCity_
        elif nodeName_ == 'DestinationCountryCode':
            DestinationCountryCode_ = child_.text
            DestinationCountryCode_ = self.gds_validate_string(DestinationCountryCode_, node, 'DestinationCountryCode')
            self.DestinationCountryCode = DestinationCountryCode_
        elif nodeName_ == 'DestinationState':
            DestinationState_ = child_.text
            DestinationState_ = self.gds_validate_string(DestinationState_, node, 'DestinationState')
            self.DestinationState = DestinationState_
        elif nodeName_ == 'DestinationZip' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DestinationZip')
            self.DestinationZip = ival_
        elif nodeName_ == 'EditedLabelID':
            EditedLabelID_ = child_.text
            EditedLabelID_ = self.gds_validate_string(EditedLabelID_, node, 'EditedLabelID')
            self.EditedLabelID = EditedLabelID_
        elif nodeName_ == 'EmailEnabled':
            EmailEnabled_ = child_.text
            EmailEnabled_ = self.gds_validate_string(EmailEnabled_, node, 'EmailEnabled')
            self.EmailEnabled = EmailEnabled_
        elif nodeName_ == 'ExpectedDeliveryDate':
            ExpectedDeliveryDate_ = child_.text
            ExpectedDeliveryDate_ = self.gds_validate_string(ExpectedDeliveryDate_, node, 'ExpectedDeliveryDate')
            self.ExpectedDeliveryDate = ExpectedDeliveryDate_
        elif nodeName_ == 'ExpectedDeliveryTime':
            ExpectedDeliveryTime_ = child_.text
            ExpectedDeliveryTime_ = self.gds_validate_string(ExpectedDeliveryTime_, node, 'ExpectedDeliveryTime')
            self.ExpectedDeliveryTime = ExpectedDeliveryTime_
        elif nodeName_ == 'GuaranteedDeliveryDate':
            GuaranteedDeliveryDate_ = child_.text
            GuaranteedDeliveryDate_ = self.gds_validate_string(GuaranteedDeliveryDate_, node, 'GuaranteedDeliveryDate')
            self.GuaranteedDeliveryDate = GuaranteedDeliveryDate_
        elif nodeName_ == 'GuaranteedDeliveryTime':
            GuaranteedDeliveryTime_ = child_.text
            GuaranteedDeliveryTime_ = self.gds_validate_string(GuaranteedDeliveryTime_, node, 'GuaranteedDeliveryTime')
            self.GuaranteedDeliveryTime = GuaranteedDeliveryTime_
        elif nodeName_ == 'GuaranteedDetails':
            GuaranteedDetails_ = child_.text
            GuaranteedDetails_ = self.gds_validate_string(GuaranteedDetails_, node, 'GuaranteedDetails')
            self.GuaranteedDetails = GuaranteedDetails_
        elif nodeName_ == 'KahalaIndicator':
            KahalaIndicator_ = child_.text
            KahalaIndicator_ = self.gds_validate_string(KahalaIndicator_, node, 'KahalaIndicator')
            self.KahalaIndicator = KahalaIndicator_
        elif nodeName_ == 'MailTypeCode':
            MailTypeCode_ = child_.text
            MailTypeCode_ = self.gds_validate_string(MailTypeCode_, node, 'MailTypeCode')
            self.MailTypeCode = MailTypeCode_
        elif nodeName_ == 'MPDATE':
            MPDATE_ = child_.text
            MPDATE_ = self.gds_validate_string(MPDATE_, node, 'MPDATE')
            self.MPDATE = MPDATE_
        elif nodeName_ == 'MPSUFFIX' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MPSUFFIX')
            self.MPSUFFIX = ival_
        elif nodeName_ == 'OriginCity':
            OriginCity_ = child_.text
            OriginCity_ = self.gds_validate_string(OriginCity_, node, 'OriginCity')
            self.OriginCity = OriginCity_
        elif nodeName_ == 'OriginCountryCode':
            OriginCountryCode_ = child_.text
            OriginCountryCode_ = self.gds_validate_string(OriginCountryCode_, node, 'OriginCountryCode')
            self.OriginCountryCode = OriginCountryCode_
        elif nodeName_ == 'OriginState':
            OriginState_ = child_.text
            OriginState_ = self.gds_validate_string(OriginState_, node, 'OriginState')
            self.OriginState = OriginState_
        elif nodeName_ == 'OriginZip':
            OriginZip_ = child_.text
            OriginZip_ = self.gds_validate_string(OriginZip_, node, 'OriginZip')
            self.OriginZip = OriginZip_
        elif nodeName_ == 'PodEnabled':
            PodEnabled_ = child_.text
            PodEnabled_ = self.gds_validate_string(PodEnabled_, node, 'PodEnabled')
            self.PodEnabled = PodEnabled_
        elif nodeName_ == 'PredictedDeliveryDate':
            PredictedDeliveryDate_ = child_.text
            PredictedDeliveryDate_ = self.gds_validate_string(PredictedDeliveryDate_, node, 'PredictedDeliveryDate')
            self.PredictedDeliveryDate = PredictedDeliveryDate_
        elif nodeName_ == 'PredictedDeliveryTime':
            PredictedDeliveryTime_ = child_.text
            PredictedDeliveryTime_ = self.gds_validate_string(PredictedDeliveryTime_, node, 'PredictedDeliveryTime')
            self.PredictedDeliveryTime = PredictedDeliveryTime_
        elif nodeName_ == 'PDWStart':
            PDWStart_ = child_.text
            PDWStart_ = self.gds_validate_string(PDWStart_, node, 'PDWStart')
            self.PDWStart = PDWStart_
        elif nodeName_ == 'PDWEnd':
            PDWEnd_ = child_.text
            PDWEnd_ = self.gds_validate_string(PDWEnd_, node, 'PDWEnd')
            self.PDWEnd = PDWEnd_
        elif nodeName_ == 'RelatedRRID':
            RelatedRRID_ = child_.text
            RelatedRRID_ = self.gds_validate_string(RelatedRRID_, node, 'RelatedRRID')
            self.RelatedRRID = RelatedRRID_
        elif nodeName_ == 'RestoreEnabled':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'RestoreEnabled')
            self.RestoreEnabled = ival_
        elif nodeName_ == 'RRAMenabled':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'RRAMenabled')
            self.RRAMenabled = ival_
        elif nodeName_ == 'RreEnabled':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'RreEnabled')
            self.RreEnabled = ival_
        elif nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
        elif nodeName_ == 'ServiceTypeCode':
            ServiceTypeCode_ = child_.text
            ServiceTypeCode_ = self.gds_validate_string(ServiceTypeCode_, node, 'ServiceTypeCode')
            self.ServiceTypeCode = ServiceTypeCode_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
        elif nodeName_ == 'StatusCategory':
            StatusCategory_ = child_.text
            StatusCategory_ = self.gds_validate_string(StatusCategory_, node, 'StatusCategory')
            self.StatusCategory = StatusCategory_
        elif nodeName_ == 'StatusSummary':
            StatusSummary_ = child_.text
            StatusSummary_ = self.gds_validate_string(StatusSummary_, node, 'StatusSummary')
            self.StatusSummary = StatusSummary_
        elif nodeName_ == 'TABLECODE':
            TABLECODE_ = child_.text
            TABLECODE_ = self.gds_validate_string(TABLECODE_, node, 'TABLECODE')
            self.TABLECODE = TABLECODE_
        elif nodeName_ == 'TpodEnabled':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'TpodEnabled')
            self.TpodEnabled = ival_
        elif nodeName_ == 'ValueofArticle':
            ValueofArticle_ = child_.text
            ValueofArticle_ = self.gds_validate_string(ValueofArticle_, node, 'ValueofArticle')
            self.ValueofArticle = ValueofArticle_
        elif nodeName_ == 'EnabledNotificationRequests':
            obj_ = EnabledNotificationRequestsType.factory(parent_object_=self)
            obj_.build(child_)
            self.EnabledNotificationRequests = obj_
            obj_.original_tagname_ = 'EnabledNotificationRequests'
        elif nodeName_ == 'TrackSummary':
            obj_ = TrackSummaryType.factory(parent_object_=self)
            obj_.build(child_)
            self.TrackSummary = obj_
            obj_.original_tagname_ = 'TrackSummary'
        elif nodeName_ == 'TrackDetail':
            obj_ = TrackDetailType.factory(parent_object_=self)
            obj_.build(child_)
            self.TrackDetail = obj_
            obj_.original_tagname_ = 'TrackDetail'
# end class TrackInfoType


class EnabledNotificationRequestsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SMS=None, EMAIL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.SMS = SMS
        self.EMAIL = EMAIL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnabledNotificationRequestsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnabledNotificationRequestsType.subclass:
            return EnabledNotificationRequestsType.subclass(*args_, **kwargs_)
        else:
            return EnabledNotificationRequestsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SMS(self):
        return self.SMS
    def set_SMS(self, SMS):
        self.SMS = SMS
    def get_EMAIL(self):
        return self.EMAIL
    def set_EMAIL(self, EMAIL):
        self.EMAIL = EMAIL
    def hasContent_(self):
        if (
            self.SMS is not None or
            self.EMAIL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnabledNotificationRequestsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnabledNotificationRequestsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnabledNotificationRequestsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnabledNotificationRequestsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnabledNotificationRequestsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnabledNotificationRequestsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SMS is not None:
            self.SMS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SMS', pretty_print=pretty_print)
        if self.EMAIL is not None:
            self.EMAIL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMAIL', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SMS':
            obj_ = SMSType.factory(parent_object_=self)
            obj_.build(child_)
            self.SMS = obj_
            obj_.original_tagname_ = 'SMS'
        elif nodeName_ == 'EMAIL':
            obj_ = EMAILType.factory(parent_object_=self)
            obj_.build(child_)
            self.EMAIL = obj_
            obj_.original_tagname_ = 'EMAIL'
# end class EnabledNotificationRequestsType


class SMSType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FD=None, AL=None, TD=None, UP=None, DND=None, FS=None, OA=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.FD = FD
        self.AL = AL
        self.TD = TD
        self.UP = UP
        self.DND = DND
        self.FS = FS
        self.OA = OA
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SMSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SMSType.subclass:
            return SMSType.subclass(*args_, **kwargs_)
        else:
            return SMSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FD(self):
        return self.FD
    def set_FD(self, FD):
        self.FD = FD
    def get_AL(self):
        return self.AL
    def set_AL(self, AL):
        self.AL = AL
    def get_TD(self):
        return self.TD
    def set_TD(self, TD):
        self.TD = TD
    def get_UP(self):
        return self.UP
    def set_UP(self, UP):
        self.UP = UP
    def get_DND(self):
        return self.DND
    def set_DND(self, DND):
        self.DND = DND
    def get_FS(self):
        return self.FS
    def set_FS(self, FS):
        self.FS = FS
    def get_OA(self):
        return self.OA
    def set_OA(self, OA):
        self.OA = OA
    def hasContent_(self):
        if (
            self.FD is not None or
            self.AL is not None or
            self.TD is not None or
            self.UP is not None or
            self.DND is not None or
            self.FS is not None or
            self.OA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SMSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SMSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SMSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SMSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SMSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SMSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFD>%s</%sFD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.FD, input_name='FD'), namespaceprefix_ , eol_))
        if self.AL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAL>%s</%sAL>%s' % (namespaceprefix_ , self.gds_format_boolean(self.AL, input_name='AL'), namespaceprefix_ , eol_))
        if self.TD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTD>%s</%sTD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.TD, input_name='TD'), namespaceprefix_ , eol_))
        if self.UP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUP>%s</%sUP>%s' % (namespaceprefix_ , self.gds_format_boolean(self.UP, input_name='UP'), namespaceprefix_ , eol_))
        if self.DND is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDND>%s</%sDND>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DND, input_name='DND'), namespaceprefix_ , eol_))
        if self.FS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFS>%s</%sFS>%s' % (namespaceprefix_ , self.gds_format_boolean(self.FS, input_name='FS'), namespaceprefix_ , eol_))
        if self.OA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOA>%s</%sOA>%s' % (namespaceprefix_ , self.gds_format_boolean(self.OA, input_name='OA'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FD':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FD')
            self.FD = ival_
        elif nodeName_ == 'AL':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AL')
            self.AL = ival_
        elif nodeName_ == 'TD':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'TD')
            self.TD = ival_
        elif nodeName_ == 'UP':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'UP')
            self.UP = ival_
        elif nodeName_ == 'DND':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DND')
            self.DND = ival_
        elif nodeName_ == 'FS':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FS')
            self.FS = ival_
        elif nodeName_ == 'OA':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'OA')
            self.OA = ival_
# end class SMSType


class EMAILType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FD=None, AL=None, TD=None, UP=None, DND=None, FS=None, OA=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.FD = FD
        self.AL = AL
        self.TD = TD
        self.UP = UP
        self.DND = DND
        self.FS = FS
        self.OA = OA
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMAILType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMAILType.subclass:
            return EMAILType.subclass(*args_, **kwargs_)
        else:
            return EMAILType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FD(self):
        return self.FD
    def set_FD(self, FD):
        self.FD = FD
    def get_AL(self):
        return self.AL
    def set_AL(self, AL):
        self.AL = AL
    def get_TD(self):
        return self.TD
    def set_TD(self, TD):
        self.TD = TD
    def get_UP(self):
        return self.UP
    def set_UP(self, UP):
        self.UP = UP
    def get_DND(self):
        return self.DND
    def set_DND(self, DND):
        self.DND = DND
    def get_FS(self):
        return self.FS
    def set_FS(self, FS):
        self.FS = FS
    def get_OA(self):
        return self.OA
    def set_OA(self, OA):
        self.OA = OA
    def hasContent_(self):
        if (
            self.FD is not None or
            self.AL is not None or
            self.TD is not None or
            self.UP is not None or
            self.DND is not None or
            self.FS is not None or
            self.OA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMAILType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMAILType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMAILType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMAILType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMAILType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMAILType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFD>%s</%sFD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.FD, input_name='FD'), namespaceprefix_ , eol_))
        if self.AL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAL>%s</%sAL>%s' % (namespaceprefix_ , self.gds_format_boolean(self.AL, input_name='AL'), namespaceprefix_ , eol_))
        if self.TD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTD>%s</%sTD>%s' % (namespaceprefix_ , self.gds_format_boolean(self.TD, input_name='TD'), namespaceprefix_ , eol_))
        if self.UP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUP>%s</%sUP>%s' % (namespaceprefix_ , self.gds_format_boolean(self.UP, input_name='UP'), namespaceprefix_ , eol_))
        if self.DND is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDND>%s</%sDND>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DND, input_name='DND'), namespaceprefix_ , eol_))
        if self.FS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFS>%s</%sFS>%s' % (namespaceprefix_ , self.gds_format_boolean(self.FS, input_name='FS'), namespaceprefix_ , eol_))
        if self.OA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOA>%s</%sOA>%s' % (namespaceprefix_ , self.gds_format_boolean(self.OA, input_name='OA'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FD':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FD')
            self.FD = ival_
        elif nodeName_ == 'AL':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AL')
            self.AL = ival_
        elif nodeName_ == 'TD':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'TD')
            self.TD = ival_
        elif nodeName_ == 'UP':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'UP')
            self.UP = ival_
        elif nodeName_ == 'DND':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DND')
            self.DND = ival_
        elif nodeName_ == 'FS':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FS')
            self.FS = ival_
        elif nodeName_ == 'OA':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'OA')
            self.OA = ival_
# end class EMAILType


class TrackSummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EventTime=None, EventDate=None, Event=None, EventCity=None, EventState=None, EventZIPCode=None, EventCountry=None, FirmName=None, Name=None, AuthorizedAgent=None, EventCode=None, ActionCode=None, ReasonCode=None, GeoCertified=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.EventTime = EventTime
        self.EventDate = EventDate
        self.Event = Event
        self.EventCity = EventCity
        self.EventState = EventState
        self.EventZIPCode = EventZIPCode
        self.EventCountry = EventCountry
        self.FirmName = FirmName
        self.Name = Name
        self.AuthorizedAgent = AuthorizedAgent
        self.EventCode = EventCode
        self.ActionCode = ActionCode
        self.ReasonCode = ReasonCode
        self.GeoCertified = GeoCertified
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSummaryType.subclass:
            return TrackSummaryType.subclass(*args_, **kwargs_)
        else:
            return TrackSummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EventTime(self):
        return self.EventTime
    def set_EventTime(self, EventTime):
        self.EventTime = EventTime
    def get_EventDate(self):
        return self.EventDate
    def set_EventDate(self, EventDate):
        self.EventDate = EventDate
    def get_Event(self):
        return self.Event
    def set_Event(self, Event):
        self.Event = Event
    def get_EventCity(self):
        return self.EventCity
    def set_EventCity(self, EventCity):
        self.EventCity = EventCity
    def get_EventState(self):
        return self.EventState
    def set_EventState(self, EventState):
        self.EventState = EventState
    def get_EventZIPCode(self):
        return self.EventZIPCode
    def set_EventZIPCode(self, EventZIPCode):
        self.EventZIPCode = EventZIPCode
    def get_EventCountry(self):
        return self.EventCountry
    def set_EventCountry(self, EventCountry):
        self.EventCountry = EventCountry
    def get_FirmName(self):
        return self.FirmName
    def set_FirmName(self, FirmName):
        self.FirmName = FirmName
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AuthorizedAgent(self):
        return self.AuthorizedAgent
    def set_AuthorizedAgent(self, AuthorizedAgent):
        self.AuthorizedAgent = AuthorizedAgent
    def get_EventCode(self):
        return self.EventCode
    def set_EventCode(self, EventCode):
        self.EventCode = EventCode
    def get_ActionCode(self):
        return self.ActionCode
    def set_ActionCode(self, ActionCode):
        self.ActionCode = ActionCode
    def get_ReasonCode(self):
        return self.ReasonCode
    def set_ReasonCode(self, ReasonCode):
        self.ReasonCode = ReasonCode
    def get_GeoCertified(self):
        return self.GeoCertified
    def set_GeoCertified(self, GeoCertified):
        self.GeoCertified = GeoCertified
    def hasContent_(self):
        if (
            self.EventTime is not None or
            self.EventDate is not None or
            self.Event is not None or
            self.EventCity is not None or
            self.EventState is not None or
            self.EventZIPCode is not None or
            self.EventCountry is not None or
            self.FirmName is not None or
            self.Name is not None or
            self.AuthorizedAgent is not None or
            self.EventCode is not None or
            self.ActionCode is not None or
            self.ReasonCode is not None or
            self.GeoCertified is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSummaryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSummaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackSummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackSummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackSummaryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EventTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventTime>%s</%sEventTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventTime), input_name='EventTime')), namespaceprefix_ , eol_))
        if self.EventDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventDate>%s</%sEventDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventDate), input_name='EventDate')), namespaceprefix_ , eol_))
        if self.Event is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEvent>%s</%sEvent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Event), input_name='Event')), namespaceprefix_ , eol_))
        if self.EventCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventCity>%s</%sEventCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventCity), input_name='EventCity')), namespaceprefix_ , eol_))
        if self.EventState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventState>%s</%sEventState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventState), input_name='EventState')), namespaceprefix_ , eol_))
        if self.EventZIPCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventZIPCode>%s</%sEventZIPCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.EventZIPCode, input_name='EventZIPCode'), namespaceprefix_ , eol_))
        if self.EventCountry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventCountry>%s</%sEventCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventCountry), input_name='EventCountry')), namespaceprefix_ , eol_))
        if self.FirmName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirmName>%s</%sFirmName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirmName), input_name='FirmName')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AuthorizedAgent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizedAgent>%s</%sAuthorizedAgent>%s' % (namespaceprefix_ , self.gds_format_boolean(self.AuthorizedAgent, input_name='AuthorizedAgent'), namespaceprefix_ , eol_))
        if self.EventCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventCode>%s</%sEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventCode), input_name='EventCode')), namespaceprefix_ , eol_))
        if self.ActionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActionCode>%s</%sActionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActionCode), input_name='ActionCode')), namespaceprefix_ , eol_))
        if self.ReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReasonCode>%s</%sReasonCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReasonCode), input_name='ReasonCode')), namespaceprefix_ , eol_))
        if self.GeoCertified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeoCertified>%s</%sGeoCertified>%s' % (namespaceprefix_ , self.gds_format_boolean(self.GeoCertified, input_name='GeoCertified'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EventTime':
            EventTime_ = child_.text
            EventTime_ = self.gds_validate_string(EventTime_, node, 'EventTime')
            self.EventTime = EventTime_
        elif nodeName_ == 'EventDate':
            EventDate_ = child_.text
            EventDate_ = self.gds_validate_string(EventDate_, node, 'EventDate')
            self.EventDate = EventDate_
        elif nodeName_ == 'Event':
            Event_ = child_.text
            Event_ = self.gds_validate_string(Event_, node, 'Event')
            self.Event = Event_
        elif nodeName_ == 'EventCity':
            EventCity_ = child_.text
            EventCity_ = self.gds_validate_string(EventCity_, node, 'EventCity')
            self.EventCity = EventCity_
        elif nodeName_ == 'EventState':
            EventState_ = child_.text
            EventState_ = self.gds_validate_string(EventState_, node, 'EventState')
            self.EventState = EventState_
        elif nodeName_ == 'EventZIPCode' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'EventZIPCode')
            self.EventZIPCode = ival_
        elif nodeName_ == 'EventCountry':
            EventCountry_ = child_.text
            EventCountry_ = self.gds_validate_string(EventCountry_, node, 'EventCountry')
            self.EventCountry = EventCountry_
        elif nodeName_ == 'FirmName':
            FirmName_ = child_.text
            FirmName_ = self.gds_validate_string(FirmName_, node, 'FirmName')
            self.FirmName = FirmName_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AuthorizedAgent':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AuthorizedAgent')
            self.AuthorizedAgent = ival_
        elif nodeName_ == 'EventCode':
            EventCode_ = child_.text
            EventCode_ = self.gds_validate_string(EventCode_, node, 'EventCode')
            self.EventCode = EventCode_
        elif nodeName_ == 'ActionCode':
            ActionCode_ = child_.text
            ActionCode_ = self.gds_validate_string(ActionCode_, node, 'ActionCode')
            self.ActionCode = ActionCode_
        elif nodeName_ == 'ReasonCode':
            ReasonCode_ = child_.text
            ReasonCode_ = self.gds_validate_string(ReasonCode_, node, 'ReasonCode')
            self.ReasonCode = ReasonCode_
        elif nodeName_ == 'GeoCertified':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'GeoCertified')
            self.GeoCertified = ival_
# end class TrackSummaryType


class TrackDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EventTime=None, EventDate=None, Event=None, EventCity=None, EventState=None, EventZIPCode=None, EventCountry=None, FirmName=None, Name=None, AuthorizedAgent=None, GeoCertified=None, EventCode=None, ActionCode=None, ReasonCode=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.EventTime = EventTime
        self.EventDate = EventDate
        self.Event = Event
        self.EventCity = EventCity
        self.EventState = EventState
        self.EventZIPCode = EventZIPCode
        self.EventCountry = EventCountry
        self.FirmName = FirmName
        self.Name = Name
        self.AuthorizedAgent = AuthorizedAgent
        self.GeoCertified = GeoCertified
        self.EventCode = EventCode
        self.ActionCode = ActionCode
        self.ReasonCode = ReasonCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackDetailType.subclass:
            return TrackDetailType.subclass(*args_, **kwargs_)
        else:
            return TrackDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EventTime(self):
        return self.EventTime
    def set_EventTime(self, EventTime):
        self.EventTime = EventTime
    def get_EventDate(self):
        return self.EventDate
    def set_EventDate(self, EventDate):
        self.EventDate = EventDate
    def get_Event(self):
        return self.Event
    def set_Event(self, Event):
        self.Event = Event
    def get_EventCity(self):
        return self.EventCity
    def set_EventCity(self, EventCity):
        self.EventCity = EventCity
    def get_EventState(self):
        return self.EventState
    def set_EventState(self, EventState):
        self.EventState = EventState
    def get_EventZIPCode(self):
        return self.EventZIPCode
    def set_EventZIPCode(self, EventZIPCode):
        self.EventZIPCode = EventZIPCode
    def get_EventCountry(self):
        return self.EventCountry
    def set_EventCountry(self, EventCountry):
        self.EventCountry = EventCountry
    def get_FirmName(self):
        return self.FirmName
    def set_FirmName(self, FirmName):
        self.FirmName = FirmName
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AuthorizedAgent(self):
        return self.AuthorizedAgent
    def set_AuthorizedAgent(self, AuthorizedAgent):
        self.AuthorizedAgent = AuthorizedAgent
    def get_GeoCertified(self):
        return self.GeoCertified
    def set_GeoCertified(self, GeoCertified):
        self.GeoCertified = GeoCertified
    def get_EventCode(self):
        return self.EventCode
    def set_EventCode(self, EventCode):
        self.EventCode = EventCode
    def get_ActionCode(self):
        return self.ActionCode
    def set_ActionCode(self, ActionCode):
        self.ActionCode = ActionCode
    def get_ReasonCode(self):
        return self.ReasonCode
    def set_ReasonCode(self, ReasonCode):
        self.ReasonCode = ReasonCode
    def hasContent_(self):
        if (
            self.EventTime is not None or
            self.EventDate is not None or
            self.Event is not None or
            self.EventCity is not None or
            self.EventState is not None or
            self.EventZIPCode is not None or
            self.EventCountry is not None or
            self.FirmName is not None or
            self.Name is not None or
            self.AuthorizedAgent is not None or
            self.GeoCertified is not None or
            self.EventCode is not None or
            self.ActionCode is not None or
            self.ReasonCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackDetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackDetailType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EventTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventTime>%s</%sEventTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventTime), input_name='EventTime')), namespaceprefix_ , eol_))
        if self.EventDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventDate>%s</%sEventDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventDate), input_name='EventDate')), namespaceprefix_ , eol_))
        if self.Event is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEvent>%s</%sEvent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Event), input_name='Event')), namespaceprefix_ , eol_))
        if self.EventCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventCity>%s</%sEventCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventCity), input_name='EventCity')), namespaceprefix_ , eol_))
        if self.EventState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventState>%s</%sEventState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventState), input_name='EventState')), namespaceprefix_ , eol_))
        if self.EventZIPCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventZIPCode>%s</%sEventZIPCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.EventZIPCode, input_name='EventZIPCode'), namespaceprefix_ , eol_))
        if self.EventCountry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventCountry>%s</%sEventCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventCountry), input_name='EventCountry')), namespaceprefix_ , eol_))
        if self.FirmName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirmName>%s</%sFirmName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirmName), input_name='FirmName')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AuthorizedAgent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizedAgent>%s</%sAuthorizedAgent>%s' % (namespaceprefix_ , self.gds_format_boolean(self.AuthorizedAgent, input_name='AuthorizedAgent'), namespaceprefix_ , eol_))
        if self.GeoCertified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeoCertified>%s</%sGeoCertified>%s' % (namespaceprefix_ , self.gds_format_boolean(self.GeoCertified, input_name='GeoCertified'), namespaceprefix_ , eol_))
        if self.EventCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventCode>%s</%sEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventCode), input_name='EventCode')), namespaceprefix_ , eol_))
        if self.ActionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActionCode>%s</%sActionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActionCode), input_name='ActionCode')), namespaceprefix_ , eol_))
        if self.ReasonCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReasonCode>%s</%sReasonCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReasonCode), input_name='ReasonCode')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EventTime':
            EventTime_ = child_.text
            EventTime_ = self.gds_validate_string(EventTime_, node, 'EventTime')
            self.EventTime = EventTime_
        elif nodeName_ == 'EventDate':
            EventDate_ = child_.text
            EventDate_ = self.gds_validate_string(EventDate_, node, 'EventDate')
            self.EventDate = EventDate_
        elif nodeName_ == 'Event':
            Event_ = child_.text
            Event_ = self.gds_validate_string(Event_, node, 'Event')
            self.Event = Event_
        elif nodeName_ == 'EventCity':
            EventCity_ = child_.text
            EventCity_ = self.gds_validate_string(EventCity_, node, 'EventCity')
            self.EventCity = EventCity_
        elif nodeName_ == 'EventState':
            EventState_ = child_.text
            EventState_ = self.gds_validate_string(EventState_, node, 'EventState')
            self.EventState = EventState_
        elif nodeName_ == 'EventZIPCode' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'EventZIPCode')
            self.EventZIPCode = ival_
        elif nodeName_ == 'EventCountry':
            EventCountry_ = child_.text
            EventCountry_ = self.gds_validate_string(EventCountry_, node, 'EventCountry')
            self.EventCountry = EventCountry_
        elif nodeName_ == 'FirmName':
            FirmName_ = child_.text
            FirmName_ = self.gds_validate_string(FirmName_, node, 'FirmName')
            self.FirmName = FirmName_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AuthorizedAgent':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AuthorizedAgent')
            self.AuthorizedAgent = ival_
        elif nodeName_ == 'GeoCertified':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'GeoCertified')
            self.GeoCertified = ival_
        elif nodeName_ == 'EventCode':
            EventCode_ = child_.text
            EventCode_ = self.gds_validate_string(EventCode_, node, 'EventCode')
            self.EventCode = EventCode_
        elif nodeName_ == 'ActionCode':
            ActionCode_ = child_.text
            ActionCode_ = self.gds_validate_string(ActionCode_, node, 'ActionCode')
            self.ActionCode = ActionCode_
        elif nodeName_ == 'ReasonCode':
            ReasonCode_ = child_.text
            ReasonCode_ = self.gds_validate_string(ReasonCode_, node, 'ReasonCode')
            self.ReasonCode = ReasonCode_
# end class TrackDetailType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from trackresponse import *\n\n')
        sys.stdout.write('import trackresponse as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "EMAILType",
    "EnabledNotificationRequestsType",
    "SMSType",
    "TrackDetailType",
    "TrackInfoType",
    "TrackResponse",
    "TrackSummaryType"
]
