#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 17:56:11 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/SDCGetLocationsResponse.xsd.py')
#
# Command line arguments:
#   SDCGetLocationsResponse.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/SDCGetLocationsResponse.xsd.py" SDCGetLocationsResponse.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class SDCGetLocationsResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Release=None, MailClass=None, OriginZIP=None, OriginCity=None, OriginState=None, DestZIP=None, DestCity=None, DestState=None, AcceptDate=None, AcceptTime=None, Expedited=None, NonExpedited=None):
        self.original_tagname_ = None
        self.Release = Release
        self.MailClass = MailClass
        self.OriginZIP = OriginZIP
        self.OriginCity = OriginCity
        self.OriginState = OriginState
        self.DestZIP = DestZIP
        self.DestCity = DestCity
        self.DestState = DestState
        if isinstance(AcceptDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AcceptDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AcceptDate
        self.AcceptDate = initvalue_
        self.AcceptTime = AcceptTime
        self.Expedited = Expedited
        if NonExpedited is None:
            self.NonExpedited = []
        else:
            self.NonExpedited = NonExpedited
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SDCGetLocationsResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SDCGetLocationsResponse.subclass:
            return SDCGetLocationsResponse.subclass(*args_, **kwargs_)
        else:
            return SDCGetLocationsResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Release(self): return self.Release
    def set_Release(self, Release): self.Release = Release
    def get_MailClass(self): return self.MailClass
    def set_MailClass(self, MailClass): self.MailClass = MailClass
    def get_OriginZIP(self): return self.OriginZIP
    def set_OriginZIP(self, OriginZIP): self.OriginZIP = OriginZIP
    def get_OriginCity(self): return self.OriginCity
    def set_OriginCity(self, OriginCity): self.OriginCity = OriginCity
    def get_OriginState(self): return self.OriginState
    def set_OriginState(self, OriginState): self.OriginState = OriginState
    def get_DestZIP(self): return self.DestZIP
    def set_DestZIP(self, DestZIP): self.DestZIP = DestZIP
    def get_DestCity(self): return self.DestCity
    def set_DestCity(self, DestCity): self.DestCity = DestCity
    def get_DestState(self): return self.DestState
    def set_DestState(self, DestState): self.DestState = DestState
    def get_AcceptDate(self): return self.AcceptDate
    def set_AcceptDate(self, AcceptDate): self.AcceptDate = AcceptDate
    def get_AcceptTime(self): return self.AcceptTime
    def set_AcceptTime(self, AcceptTime): self.AcceptTime = AcceptTime
    def get_Expedited(self): return self.Expedited
    def set_Expedited(self, Expedited): self.Expedited = Expedited
    def get_NonExpedited(self): return self.NonExpedited
    def set_NonExpedited(self, NonExpedited): self.NonExpedited = NonExpedited
    def add_NonExpedited(self, value): self.NonExpedited.append(value)
    def insert_NonExpedited_at(self, index, value): self.NonExpedited.insert(index, value)
    def replace_NonExpedited_at(self, index, value): self.NonExpedited[index] = value
    def hasContent_(self):
        if (
            self.Release is not None or
            self.MailClass is not None or
            self.OriginZIP is not None or
            self.OriginCity is not None or
            self.OriginState is not None or
            self.DestZIP is not None or
            self.DestCity is not None or
            self.DestState is not None or
            self.AcceptDate is not None or
            self.AcceptTime is not None or
            self.Expedited is not None or
            self.NonExpedited
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SDCGetLocationsResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SDCGetLocationsResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SDCGetLocationsResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SDCGetLocationsResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SDCGetLocationsResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SDCGetLocationsResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Release is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Release>%s</Release>%s' % (self.gds_format_integer(self.Release, input_name='Release'), eol_))
        if self.MailClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MailClass>%s</MailClass>%s' % (self.gds_format_integer(self.MailClass, input_name='MailClass'), eol_))
        if self.OriginZIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OriginZIP>%s</OriginZIP>%s' % (self.gds_format_integer(self.OriginZIP, input_name='OriginZIP'), eol_))
        if self.OriginCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OriginCity>%s</OriginCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginCity), input_name='OriginCity')), eol_))
        if self.OriginState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OriginState>%s</OriginState>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginState), input_name='OriginState')), eol_))
        if self.DestZIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DestZIP>%s</DestZIP>%s' % (self.gds_format_integer(self.DestZIP, input_name='DestZIP'), eol_))
        if self.DestCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DestCity>%s</DestCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestCity), input_name='DestCity')), eol_))
        if self.DestState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DestState>%s</DestState>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestState), input_name='DestState')), eol_))
        if self.AcceptDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AcceptDate>%s</AcceptDate>%s' % (self.gds_format_date(self.AcceptDate, input_name='AcceptDate'), eol_))
        if self.AcceptTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AcceptTime>%s</AcceptTime>%s' % (self.gds_format_integer(self.AcceptTime, input_name='AcceptTime'), eol_))
        if self.Expedited is not None:
            self.Expedited.export(outfile, level, namespace_, name_='Expedited', pretty_print=pretty_print)
        for NonExpedited_ in self.NonExpedited:
            NonExpedited_.export(outfile, level, namespace_, name_='NonExpedited', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Release':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Release')
            self.Release = ival_
        elif nodeName_ == 'MailClass':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MailClass')
            self.MailClass = ival_
        elif nodeName_ == 'OriginZIP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'OriginZIP')
            self.OriginZIP = ival_
        elif nodeName_ == 'OriginCity':
            OriginCity_ = child_.text
            OriginCity_ = self.gds_validate_string(OriginCity_, node, 'OriginCity')
            self.OriginCity = OriginCity_
        elif nodeName_ == 'OriginState':
            OriginState_ = child_.text
            OriginState_ = self.gds_validate_string(OriginState_, node, 'OriginState')
            self.OriginState = OriginState_
        elif nodeName_ == 'DestZIP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'DestZIP')
            self.DestZIP = ival_
        elif nodeName_ == 'DestCity':
            DestCity_ = child_.text
            DestCity_ = self.gds_validate_string(DestCity_, node, 'DestCity')
            self.DestCity = DestCity_
        elif nodeName_ == 'DestState':
            DestState_ = child_.text
            DestState_ = self.gds_validate_string(DestState_, node, 'DestState')
            self.DestState = DestState_
        elif nodeName_ == 'AcceptDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AcceptDate = dval_
        elif nodeName_ == 'AcceptTime':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AcceptTime')
            self.AcceptTime = ival_
        elif nodeName_ == 'Expedited':
            obj_ = ExpeditedType.factory()
            obj_.build(child_)
            self.Expedited = obj_
            obj_.original_tagname_ = 'Expedited'
        elif nodeName_ == 'NonExpedited':
            obj_ = NonExpeditedType.factory()
            obj_.build(child_)
            self.NonExpedited.append(obj_)
            obj_.original_tagname_ = 'NonExpedited'
# end class SDCGetLocationsResponse


class ExpeditedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EAD=None, Commitment=None):
        self.original_tagname_ = None
        if isinstance(EAD, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EAD, '%Y-%m-%d').date()
        else:
            initvalue_ = EAD
        self.EAD = initvalue_
        if Commitment is None:
            self.Commitment = []
        else:
            self.Commitment = Commitment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpeditedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpeditedType.subclass:
            return ExpeditedType.subclass(*args_, **kwargs_)
        else:
            return ExpeditedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EAD(self): return self.EAD
    def set_EAD(self, EAD): self.EAD = EAD
    def get_Commitment(self): return self.Commitment
    def set_Commitment(self, Commitment): self.Commitment = Commitment
    def add_Commitment(self, value): self.Commitment.append(value)
    def insert_Commitment_at(self, index, value): self.Commitment.insert(index, value)
    def replace_Commitment_at(self, index, value): self.Commitment[index] = value
    def hasContent_(self):
        if (
            self.EAD is not None or
            self.Commitment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExpeditedType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpeditedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpeditedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExpeditedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExpeditedType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExpeditedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EAD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EAD>%s</EAD>%s' % (self.gds_format_date(self.EAD, input_name='EAD'), eol_))
        for Commitment_ in self.Commitment:
            Commitment_.export(outfile, level, namespace_, name_='Commitment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EAD':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EAD = dval_
        elif nodeName_ == 'Commitment':
            obj_ = CommitmentType.factory()
            obj_.build(child_)
            self.Commitment.append(obj_)
            obj_.original_tagname_ = 'Commitment'
# end class ExpeditedType


class CommitmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MailClass=None, CommitmentName=None, CommitmentTime=None, CommitmentSeq=None, Location=None):
        self.original_tagname_ = None
        self.MailClass = MailClass
        self.CommitmentName = CommitmentName
        self.CommitmentTime = CommitmentTime
        self.CommitmentSeq = CommitmentSeq
        if Location is None:
            self.Location = []
        else:
            self.Location = Location
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommitmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommitmentType.subclass:
            return CommitmentType.subclass(*args_, **kwargs_)
        else:
            return CommitmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MailClass(self): return self.MailClass
    def set_MailClass(self, MailClass): self.MailClass = MailClass
    def get_CommitmentName(self): return self.CommitmentName
    def set_CommitmentName(self, CommitmentName): self.CommitmentName = CommitmentName
    def get_CommitmentTime(self): return self.CommitmentTime
    def set_CommitmentTime(self, CommitmentTime): self.CommitmentTime = CommitmentTime
    def get_CommitmentSeq(self): return self.CommitmentSeq
    def set_CommitmentSeq(self, CommitmentSeq): self.CommitmentSeq = CommitmentSeq
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def add_Location(self, value): self.Location.append(value)
    def insert_Location_at(self, index, value): self.Location.insert(index, value)
    def replace_Location_at(self, index, value): self.Location[index] = value
    def hasContent_(self):
        if (
            self.MailClass is not None or
            self.CommitmentName is not None or
            self.CommitmentTime is not None or
            self.CommitmentSeq is not None or
            self.Location
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommitmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommitmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommitmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommitmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommitmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommitmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MailClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MailClass>%s</MailClass>%s' % (self.gds_format_integer(self.MailClass, input_name='MailClass'), eol_))
        if self.CommitmentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommitmentName>%s</CommitmentName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommitmentName), input_name='CommitmentName')), eol_))
        if self.CommitmentTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommitmentTime>%s</CommitmentTime>%s' % (self.gds_format_integer(self.CommitmentTime, input_name='CommitmentTime'), eol_))
        if self.CommitmentSeq is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommitmentSeq>%s</CommitmentSeq>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommitmentSeq), input_name='CommitmentSeq')), eol_))
        for Location_ in self.Location:
            Location_.export(outfile, level, namespace_, name_='Location', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MailClass':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MailClass')
            self.MailClass = ival_
        elif nodeName_ == 'CommitmentName':
            CommitmentName_ = child_.text
            CommitmentName_ = self.gds_validate_string(CommitmentName_, node, 'CommitmentName')
            self.CommitmentName = CommitmentName_
        elif nodeName_ == 'CommitmentTime':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CommitmentTime')
            self.CommitmentTime = ival_
        elif nodeName_ == 'CommitmentSeq':
            CommitmentSeq_ = child_.text
            CommitmentSeq_ = self.gds_validate_string(CommitmentSeq_, node, 'CommitmentSeq')
            self.CommitmentSeq = CommitmentSeq_
        elif nodeName_ == 'Location':
            obj_ = LocationType.factory()
            obj_.build(child_)
            self.Location.append(obj_)
            obj_.original_tagname_ = 'Location'
# end class CommitmentType


class LocationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SDD=None, COT=None, FacType=None, Street=None, City=None, State=None, ZIP=None, IsGuaranteed=None):
        self.original_tagname_ = None
        if isinstance(SDD, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SDD, '%Y-%m-%d').date()
        else:
            initvalue_ = SDD
        self.SDD = initvalue_
        self.COT = COT
        self.FacType = FacType
        self.Street = Street
        self.City = City
        self.State = State
        self.ZIP = ZIP
        self.IsGuaranteed = IsGuaranteed
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationType.subclass:
            return LocationType.subclass(*args_, **kwargs_)
        else:
            return LocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SDD(self): return self.SDD
    def set_SDD(self, SDD): self.SDD = SDD
    def get_COT(self): return self.COT
    def set_COT(self, COT): self.COT = COT
    def get_FacType(self): return self.FacType
    def set_FacType(self, FacType): self.FacType = FacType
    def get_Street(self): return self.Street
    def set_Street(self, Street): self.Street = Street
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_ZIP(self): return self.ZIP
    def set_ZIP(self, ZIP): self.ZIP = ZIP
    def get_IsGuaranteed(self): return self.IsGuaranteed
    def set_IsGuaranteed(self, IsGuaranteed): self.IsGuaranteed = IsGuaranteed
    def hasContent_(self):
        if (
            self.SDD is not None or
            self.COT is not None or
            self.FacType is not None or
            self.Street is not None or
            self.City is not None or
            self.State is not None or
            self.ZIP is not None or
            self.IsGuaranteed is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LocationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SDD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SDD>%s</SDD>%s' % (self.gds_format_date(self.SDD, input_name='SDD'), eol_))
        if self.COT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COT>%s</COT>%s' % (self.gds_format_integer(self.COT, input_name='COT'), eol_))
        if self.FacType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FacType>%s</FacType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FacType), input_name='FacType')), eol_))
        if self.Street is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Street>%s</Street>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Street), input_name='Street')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<State>%s</State>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), eol_))
        if self.ZIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ZIP>%s</ZIP>%s' % (self.gds_format_integer(self.ZIP, input_name='ZIP'), eol_))
        if self.IsGuaranteed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IsGuaranteed>%s</IsGuaranteed>%s' % (self.gds_format_integer(self.IsGuaranteed, input_name='IsGuaranteed'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SDD':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SDD = dval_
        elif nodeName_ == 'COT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'COT')
            self.COT = ival_
        elif nodeName_ == 'FacType':
            FacType_ = child_.text
            FacType_ = self.gds_validate_string(FacType_, node, 'FacType')
            self.FacType = FacType_
        elif nodeName_ == 'Street':
            Street_ = child_.text
            Street_ = self.gds_validate_string(Street_, node, 'Street')
            self.Street = Street_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'ZIP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ZIP')
            self.ZIP = ival_
        elif nodeName_ == 'IsGuaranteed':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IsGuaranteed')
            self.IsGuaranteed = ival_
# end class LocationType


class NonExpeditedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MailClass=None, NonExpeditedDestType=None, EAD=None, COT=None, SvcStdMsg=None, SvcStdDays=None, TotDaysDeliver=None, SchedDlvryDate=None, NonDlvryDays=None, NonExpeditedExceptions=None, HFPU=None):
        self.original_tagname_ = None
        self.MailClass = MailClass
        self.NonExpeditedDestType = NonExpeditedDestType
        if isinstance(EAD, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EAD, '%Y-%m-%d').date()
        else:
            initvalue_ = EAD
        self.EAD = initvalue_
        self.COT = COT
        self.SvcStdMsg = SvcStdMsg
        self.SvcStdDays = SvcStdDays
        self.TotDaysDeliver = TotDaysDeliver
        if isinstance(SchedDlvryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SchedDlvryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SchedDlvryDate
        self.SchedDlvryDate = initvalue_
        self.NonDlvryDays = NonDlvryDays
        self.NonExpeditedExceptions = NonExpeditedExceptions
        self.HFPU = HFPU
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NonExpeditedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NonExpeditedType.subclass:
            return NonExpeditedType.subclass(*args_, **kwargs_)
        else:
            return NonExpeditedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MailClass(self): return self.MailClass
    def set_MailClass(self, MailClass): self.MailClass = MailClass
    def get_NonExpeditedDestType(self): return self.NonExpeditedDestType
    def set_NonExpeditedDestType(self, NonExpeditedDestType): self.NonExpeditedDestType = NonExpeditedDestType
    def get_EAD(self): return self.EAD
    def set_EAD(self, EAD): self.EAD = EAD
    def get_COT(self): return self.COT
    def set_COT(self, COT): self.COT = COT
    def get_SvcStdMsg(self): return self.SvcStdMsg
    def set_SvcStdMsg(self, SvcStdMsg): self.SvcStdMsg = SvcStdMsg
    def get_SvcStdDays(self): return self.SvcStdDays
    def set_SvcStdDays(self, SvcStdDays): self.SvcStdDays = SvcStdDays
    def get_TotDaysDeliver(self): return self.TotDaysDeliver
    def set_TotDaysDeliver(self, TotDaysDeliver): self.TotDaysDeliver = TotDaysDeliver
    def get_SchedDlvryDate(self): return self.SchedDlvryDate
    def set_SchedDlvryDate(self, SchedDlvryDate): self.SchedDlvryDate = SchedDlvryDate
    def get_NonDlvryDays(self): return self.NonDlvryDays
    def set_NonDlvryDays(self, NonDlvryDays): self.NonDlvryDays = NonDlvryDays
    def get_NonExpeditedExceptions(self): return self.NonExpeditedExceptions
    def set_NonExpeditedExceptions(self, NonExpeditedExceptions): self.NonExpeditedExceptions = NonExpeditedExceptions
    def get_HFPU(self): return self.HFPU
    def set_HFPU(self, HFPU): self.HFPU = HFPU
    def hasContent_(self):
        if (
            self.MailClass is not None or
            self.NonExpeditedDestType is not None or
            self.EAD is not None or
            self.COT is not None or
            self.SvcStdMsg is not None or
            self.SvcStdDays is not None or
            self.TotDaysDeliver is not None or
            self.SchedDlvryDate is not None or
            self.NonDlvryDays is not None or
            self.NonExpeditedExceptions is not None or
            self.HFPU is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NonExpeditedType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NonExpeditedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NonExpeditedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NonExpeditedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NonExpeditedType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NonExpeditedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MailClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MailClass>%s</MailClass>%s' % (self.gds_format_integer(self.MailClass, input_name='MailClass'), eol_))
        if self.NonExpeditedDestType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NonExpeditedDestType>%s</NonExpeditedDestType>%s' % (self.gds_format_integer(self.NonExpeditedDestType, input_name='NonExpeditedDestType'), eol_))
        if self.EAD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EAD>%s</EAD>%s' % (self.gds_format_date(self.EAD, input_name='EAD'), eol_))
        if self.COT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COT>%s</COT>%s' % (self.gds_format_integer(self.COT, input_name='COT'), eol_))
        if self.SvcStdMsg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SvcStdMsg>%s</SvcStdMsg>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SvcStdMsg), input_name='SvcStdMsg')), eol_))
        if self.SvcStdDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SvcStdDays>%s</SvcStdDays>%s' % (self.gds_format_integer(self.SvcStdDays, input_name='SvcStdDays'), eol_))
        if self.TotDaysDeliver is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TotDaysDeliver>%s</TotDaysDeliver>%s' % (self.gds_format_integer(self.TotDaysDeliver, input_name='TotDaysDeliver'), eol_))
        if self.SchedDlvryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SchedDlvryDate>%s</SchedDlvryDate>%s' % (self.gds_format_date(self.SchedDlvryDate, input_name='SchedDlvryDate'), eol_))
        if self.NonDlvryDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NonDlvryDays>%s</NonDlvryDays>%s' % (self.gds_format_integer(self.NonDlvryDays, input_name='NonDlvryDays'), eol_))
        if self.NonExpeditedExceptions is not None:
            self.NonExpeditedExceptions.export(outfile, level, namespace_, name_='NonExpeditedExceptions', pretty_print=pretty_print)
        if self.HFPU is not None:
            self.HFPU.export(outfile, level, namespace_, name_='HFPU', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MailClass':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MailClass')
            self.MailClass = ival_
        elif nodeName_ == 'NonExpeditedDestType':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NonExpeditedDestType')
            self.NonExpeditedDestType = ival_
        elif nodeName_ == 'EAD':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EAD = dval_
        elif nodeName_ == 'COT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'COT')
            self.COT = ival_
        elif nodeName_ == 'SvcStdMsg':
            SvcStdMsg_ = child_.text
            SvcStdMsg_ = self.gds_validate_string(SvcStdMsg_, node, 'SvcStdMsg')
            self.SvcStdMsg = SvcStdMsg_
        elif nodeName_ == 'SvcStdDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SvcStdDays')
            self.SvcStdDays = ival_
        elif nodeName_ == 'TotDaysDeliver':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotDaysDeliver')
            self.TotDaysDeliver = ival_
        elif nodeName_ == 'SchedDlvryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SchedDlvryDate = dval_
        elif nodeName_ == 'NonDlvryDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NonDlvryDays')
            self.NonDlvryDays = ival_
        elif nodeName_ == 'NonExpeditedExceptions':
            obj_ = NonExpeditedExceptionsType.factory()
            obj_.build(child_)
            self.NonExpeditedExceptions = obj_
            obj_.original_tagname_ = 'NonExpeditedExceptions'
        elif nodeName_ == 'HFPU':
            obj_ = HFPUType.factory()
            obj_.build(child_)
            self.HFPU = obj_
            obj_.original_tagname_ = 'HFPU'
# end class NonExpeditedType


class NonExpeditedExceptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SunHol=None):
        self.original_tagname_ = None
        self.SunHol = SunHol
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NonExpeditedExceptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NonExpeditedExceptionsType.subclass:
            return NonExpeditedExceptionsType.subclass(*args_, **kwargs_)
        else:
            return NonExpeditedExceptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SunHol(self): return self.SunHol
    def set_SunHol(self, SunHol): self.SunHol = SunHol
    def hasContent_(self):
        if (
            self.SunHol is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NonExpeditedExceptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NonExpeditedExceptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NonExpeditedExceptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NonExpeditedExceptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NonExpeditedExceptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NonExpeditedExceptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SunHol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SunHol>%s</SunHol>%s' % (self.gds_format_integer(self.SunHol, input_name='SunHol'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SunHol':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SunHol')
            self.SunHol = ival_
# end class NonExpeditedExceptionsType


class HFPUType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EAD=None, COT=None, ServiceStandard=None):
        self.original_tagname_ = None
        if isinstance(EAD, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EAD, '%Y-%m-%d').date()
        else:
            initvalue_ = EAD
        self.EAD = initvalue_
        self.COT = COT
        self.ServiceStandard = ServiceStandard
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HFPUType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HFPUType.subclass:
            return HFPUType.subclass(*args_, **kwargs_)
        else:
            return HFPUType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EAD(self): return self.EAD
    def set_EAD(self, EAD): self.EAD = EAD
    def get_COT(self): return self.COT
    def set_COT(self, COT): self.COT = COT
    def get_ServiceStandard(self): return self.ServiceStandard
    def set_ServiceStandard(self, ServiceStandard): self.ServiceStandard = ServiceStandard
    def hasContent_(self):
        if (
            self.EAD is not None or
            self.COT is not None or
            self.ServiceStandard is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HFPUType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HFPUType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HFPUType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HFPUType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HFPUType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HFPUType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EAD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EAD>%s</EAD>%s' % (self.gds_format_date(self.EAD, input_name='EAD'), eol_))
        if self.COT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COT>%s</COT>%s' % (self.gds_format_integer(self.COT, input_name='COT'), eol_))
        if self.ServiceStandard is not None:
            self.ServiceStandard.export(outfile, level, namespace_, name_='ServiceStandard', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EAD':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EAD = dval_
        elif nodeName_ == 'COT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'COT')
            self.COT = ival_
        elif nodeName_ == 'ServiceStandard':
            obj_ = ServiceStandardType.factory()
            obj_.build(child_)
            self.ServiceStandard = obj_
            obj_.original_tagname_ = 'ServiceStandard'
# end class HFPUType


class ServiceStandardType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SvcStdMsg=None, SvcStdDays=None, Location=None):
        self.original_tagname_ = None
        self.SvcStdMsg = SvcStdMsg
        self.SvcStdDays = SvcStdDays
        self.Location = Location
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceStandardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceStandardType.subclass:
            return ServiceStandardType.subclass(*args_, **kwargs_)
        else:
            return ServiceStandardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SvcStdMsg(self): return self.SvcStdMsg
    def set_SvcStdMsg(self, SvcStdMsg): self.SvcStdMsg = SvcStdMsg
    def get_SvcStdDays(self): return self.SvcStdDays
    def set_SvcStdDays(self, SvcStdDays): self.SvcStdDays = SvcStdDays
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def hasContent_(self):
        if (
            self.SvcStdMsg is not None or
            self.SvcStdDays is not None or
            self.Location is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceStandardType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceStandardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceStandardType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceStandardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceStandardType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceStandardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SvcStdMsg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SvcStdMsg>%s</SvcStdMsg>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SvcStdMsg), input_name='SvcStdMsg')), eol_))
        if self.SvcStdDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SvcStdDays>%s</SvcStdDays>%s' % (self.gds_format_integer(self.SvcStdDays, input_name='SvcStdDays'), eol_))
        if self.Location is not None:
            self.Location.export(outfile, level, namespace_, name_='Location', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SvcStdMsg':
            SvcStdMsg_ = child_.text
            SvcStdMsg_ = self.gds_validate_string(SvcStdMsg_, node, 'SvcStdMsg')
            self.SvcStdMsg = SvcStdMsg_
        elif nodeName_ == 'SvcStdDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SvcStdDays')
            self.SvcStdDays = ival_
        elif nodeName_ == 'Location':
            obj_ = LocationType1.factory()
            obj_.build(child_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
# end class ServiceStandardType


class LocationType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TotDaysDeliver=None, SchedDlvryDate=None, NonDlvryDays=None, RAUName=None, Street=None, ZIP=None, CloseTimes=None, NonExpeditedExceptions=None, City=None, State=None):
        self.original_tagname_ = None
        self.TotDaysDeliver = TotDaysDeliver
        if isinstance(SchedDlvryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SchedDlvryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SchedDlvryDate
        self.SchedDlvryDate = initvalue_
        self.NonDlvryDays = NonDlvryDays
        self.RAUName = RAUName
        self.Street = Street
        self.ZIP = ZIP
        self.CloseTimes = CloseTimes
        self.NonExpeditedExceptions = NonExpeditedExceptions
        self.City = City
        self.State = State
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationType1.subclass:
            return LocationType1.subclass(*args_, **kwargs_)
        else:
            return LocationType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TotDaysDeliver(self): return self.TotDaysDeliver
    def set_TotDaysDeliver(self, TotDaysDeliver): self.TotDaysDeliver = TotDaysDeliver
    def get_SchedDlvryDate(self): return self.SchedDlvryDate
    def set_SchedDlvryDate(self, SchedDlvryDate): self.SchedDlvryDate = SchedDlvryDate
    def get_NonDlvryDays(self): return self.NonDlvryDays
    def set_NonDlvryDays(self, NonDlvryDays): self.NonDlvryDays = NonDlvryDays
    def get_RAUName(self): return self.RAUName
    def set_RAUName(self, RAUName): self.RAUName = RAUName
    def get_Street(self): return self.Street
    def set_Street(self, Street): self.Street = Street
    def get_ZIP(self): return self.ZIP
    def set_ZIP(self, ZIP): self.ZIP = ZIP
    def get_CloseTimes(self): return self.CloseTimes
    def set_CloseTimes(self, CloseTimes): self.CloseTimes = CloseTimes
    def get_NonExpeditedExceptions(self): return self.NonExpeditedExceptions
    def set_NonExpeditedExceptions(self, NonExpeditedExceptions): self.NonExpeditedExceptions = NonExpeditedExceptions
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def hasContent_(self):
        if (
            self.TotDaysDeliver is not None or
            self.SchedDlvryDate is not None or
            self.NonDlvryDays is not None or
            self.RAUName is not None or
            self.Street is not None or
            self.ZIP is not None or
            self.CloseTimes is not None or
            self.NonExpeditedExceptions is not None or
            self.City is not None or
            self.State is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LocationType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TotDaysDeliver is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TotDaysDeliver>%s</TotDaysDeliver>%s' % (self.gds_format_integer(self.TotDaysDeliver, input_name='TotDaysDeliver'), eol_))
        if self.SchedDlvryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SchedDlvryDate>%s</SchedDlvryDate>%s' % (self.gds_format_date(self.SchedDlvryDate, input_name='SchedDlvryDate'), eol_))
        if self.NonDlvryDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NonDlvryDays>%s</NonDlvryDays>%s' % (self.gds_format_integer(self.NonDlvryDays, input_name='NonDlvryDays'), eol_))
        if self.RAUName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RAUName>%s</RAUName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RAUName), input_name='RAUName')), eol_))
        if self.Street is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Street>%s</Street>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Street), input_name='Street')), eol_))
        if self.ZIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ZIP>%s</ZIP>%s' % (self.gds_format_integer(self.ZIP, input_name='ZIP'), eol_))
        if self.CloseTimes is not None:
            self.CloseTimes.export(outfile, level, namespace_, name_='CloseTimes', pretty_print=pretty_print)
        if self.NonExpeditedExceptions is not None:
            self.NonExpeditedExceptions.export(outfile, level, namespace_, name_='NonExpeditedExceptions', pretty_print=pretty_print)
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<State>%s</State>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TotDaysDeliver':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotDaysDeliver')
            self.TotDaysDeliver = ival_
        elif nodeName_ == 'SchedDlvryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SchedDlvryDate = dval_
        elif nodeName_ == 'NonDlvryDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NonDlvryDays')
            self.NonDlvryDays = ival_
        elif nodeName_ == 'RAUName':
            RAUName_ = child_.text
            RAUName_ = self.gds_validate_string(RAUName_, node, 'RAUName')
            self.RAUName = RAUName_
        elif nodeName_ == 'Street':
            Street_ = child_.text
            Street_ = self.gds_validate_string(Street_, node, 'Street')
            self.Street = Street_
        elif nodeName_ == 'ZIP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ZIP')
            self.ZIP = ival_
        elif nodeName_ == 'CloseTimes':
            obj_ = CloseTimesType.factory()
            obj_.build(child_)
            self.CloseTimes = obj_
            obj_.original_tagname_ = 'CloseTimes'
        elif nodeName_ == 'NonExpeditedExceptions':
            obj_ = NonExpeditedExceptionsType2.factory()
            obj_.build(child_)
            self.NonExpeditedExceptions = obj_
            obj_.original_tagname_ = 'NonExpeditedExceptions'
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
# end class LocationType1


class CloseTimesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, M=None, Tu=None, W=None, Th=None, F=None, Sa=None, Su=None, H=None):
        self.original_tagname_ = None
        self.M = M
        self.Tu = Tu
        self.W = W
        self.Th = Th
        self.F = F
        self.Sa = Sa
        self.Su = Su
        self.H = H
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CloseTimesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CloseTimesType.subclass:
            return CloseTimesType.subclass(*args_, **kwargs_)
        else:
            return CloseTimesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_M(self): return self.M
    def set_M(self, M): self.M = M
    def get_Tu(self): return self.Tu
    def set_Tu(self, Tu): self.Tu = Tu
    def get_W(self): return self.W
    def set_W(self, W): self.W = W
    def get_Th(self): return self.Th
    def set_Th(self, Th): self.Th = Th
    def get_F(self): return self.F
    def set_F(self, F): self.F = F
    def get_Sa(self): return self.Sa
    def set_Sa(self, Sa): self.Sa = Sa
    def get_Su(self): return self.Su
    def set_Su(self, Su): self.Su = Su
    def get_H(self): return self.H
    def set_H(self, H): self.H = H
    def hasContent_(self):
        if (
            self.M is not None or
            self.Tu is not None or
            self.W is not None or
            self.Th is not None or
            self.F is not None or
            self.Sa is not None or
            self.Su is not None or
            self.H is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CloseTimesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CloseTimesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CloseTimesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CloseTimesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CloseTimesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CloseTimesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.M is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<M>%s</M>%s' % (self.gds_format_integer(self.M, input_name='M'), eol_))
        if self.Tu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Tu>%s</Tu>%s' % (self.gds_format_integer(self.Tu, input_name='Tu'), eol_))
        if self.W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<W>%s</W>%s' % (self.gds_format_integer(self.W, input_name='W'), eol_))
        if self.Th is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Th>%s</Th>%s' % (self.gds_format_integer(self.Th, input_name='Th'), eol_))
        if self.F is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<F>%s</F>%s' % (self.gds_format_integer(self.F, input_name='F'), eol_))
        if self.Sa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Sa>%s</Sa>%s' % (self.gds_format_integer(self.Sa, input_name='Sa'), eol_))
        if self.Su is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Su>%s</Su>%s' % (self.gds_format_integer(self.Su, input_name='Su'), eol_))
        if self.H is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<H>%s</H>%s' % (self.gds_format_integer(self.H, input_name='H'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'M':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'M')
            self.M = ival_
        elif nodeName_ == 'Tu':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Tu')
            self.Tu = ival_
        elif nodeName_ == 'W':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'W')
            self.W = ival_
        elif nodeName_ == 'Th':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Th')
            self.Th = ival_
        elif nodeName_ == 'F':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'F')
            self.F = ival_
        elif nodeName_ == 'Sa':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sa')
            self.Sa = ival_
        elif nodeName_ == 'Su':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Su')
            self.Su = ival_
        elif nodeName_ == 'H':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'H')
            self.H = ival_
# end class CloseTimesType


class NonExpeditedExceptionsType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SunHol=None, Closed=None):
        self.original_tagname_ = None
        self.SunHol = SunHol
        self.Closed = Closed
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NonExpeditedExceptionsType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NonExpeditedExceptionsType2.subclass:
            return NonExpeditedExceptionsType2.subclass(*args_, **kwargs_)
        else:
            return NonExpeditedExceptionsType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SunHol(self): return self.SunHol
    def set_SunHol(self, SunHol): self.SunHol = SunHol
    def get_Closed(self): return self.Closed
    def set_Closed(self, Closed): self.Closed = Closed
    def hasContent_(self):
        if (
            self.SunHol is not None or
            self.Closed is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NonExpeditedExceptionsType2', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NonExpeditedExceptionsType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NonExpeditedExceptionsType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NonExpeditedExceptionsType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NonExpeditedExceptionsType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NonExpeditedExceptionsType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SunHol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SunHol>%s</SunHol>%s' % (self.gds_format_integer(self.SunHol, input_name='SunHol'), eol_))
        if self.Closed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Closed>%s</Closed>%s' % (self.gds_format_integer(self.Closed, input_name='Closed'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SunHol':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SunHol')
            self.SunHol = ival_
        elif nodeName_ == 'Closed':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Closed')
            self.Closed = ival_
# end class NonExpeditedExceptionsType2


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SDCGetLocationsResponse'
        rootClass = SDCGetLocationsResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SDCGetLocationsResponse'
        rootClass = SDCGetLocationsResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SDCGetLocationsResponse'
        rootClass = SDCGetLocationsResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SDCGetLocationsResponse'
        rootClass = SDCGetLocationsResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from SDCGetLocationsResponse.xsd import *\n\n')
        sys.stdout.write('import SDCGetLocationsResponse.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CloseTimesType",
    "CommitmentType",
    "ExpeditedType",
    "HFPUType",
    "LocationType",
    "LocationType1",
    "NonExpeditedExceptionsType",
    "NonExpeditedExceptionsType2",
    "NonExpeditedType",
    "SDCGetLocationsResponse",
    "ServiceStandardType"
]
