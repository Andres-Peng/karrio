#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 17:56:09 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/RateV4Response.xsd.py')
#
# Command line arguments:
#   RateV4Response.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/RateV4Response.xsd.py" RateV4Response.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RateV4Response(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Package=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        if Package is None:
            self.Package = []
        else:
            self.Package = Package
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateV4Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateV4Response.subclass:
            return RateV4Response.subclass(*args_, **kwargs_)
        else:
            return RateV4Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Package(self): return self.Package
    def set_Package(self, Package): self.Package = Package
    def add_Package(self, value): self.Package.append(value)
    def insert_Package_at(self, index, value): self.Package.insert(index, value)
    def replace_Package_at(self, index, value): self.Package[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.Package or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RateV4Response', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateV4Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateV4Response')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RateV4Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RateV4Response'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RateV4Response', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Package_ in self.Package:
            Package_.export(outfile, level, namespace_, name_='Package', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Package':
            obj_ = PackageType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Package', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Package'):
              self.add_Package(obj_.value)
            elif hasattr(self, 'set_Package'):
              self.set_Package(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class RateV4Response


class PackageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, Error=None, ZipOrigination=None, ZipDestination=None, Pounds=None, Ounces=None, FirstClassMailType=None, Container=None, Size=None, Width=None, Length=None, Height=None, Girth=None, Machinable=None, Zone=None, Postage=None, Restriction=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.ID = _cast(None, ID)
        self.Error = Error
        self.ZipOrigination = ZipOrigination
        self.ZipDestination = ZipDestination
        self.Pounds = Pounds
        self.Ounces = Ounces
        self.FirstClassMailType = FirstClassMailType
        self.Container = Container
        self.Size = Size
        self.Width = Width
        self.Length = Length
        self.Height = Height
        self.Girth = Girth
        self.Machinable = Machinable
        self.Zone = Zone
        if Postage is None:
            self.Postage = []
        else:
            self.Postage = Postage
        self.Restriction = Restriction
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageType.subclass:
            return PackageType.subclass(*args_, **kwargs_)
        else:
            return PackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def get_ZipOrigination(self): return self.ZipOrigination
    def set_ZipOrigination(self, ZipOrigination): self.ZipOrigination = ZipOrigination
    def get_ZipDestination(self): return self.ZipDestination
    def set_ZipDestination(self, ZipDestination): self.ZipDestination = ZipDestination
    def get_Pounds(self): return self.Pounds
    def set_Pounds(self, Pounds): self.Pounds = Pounds
    def get_Ounces(self): return self.Ounces
    def set_Ounces(self, Ounces): self.Ounces = Ounces
    def get_FirstClassMailType(self): return self.FirstClassMailType
    def set_FirstClassMailType(self, FirstClassMailType): self.FirstClassMailType = FirstClassMailType
    def get_Container(self): return self.Container
    def set_Container(self, Container): self.Container = Container
    def get_Size(self): return self.Size
    def set_Size(self, Size): self.Size = Size
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Girth(self): return self.Girth
    def set_Girth(self, Girth): self.Girth = Girth
    def get_Machinable(self): return self.Machinable
    def set_Machinable(self, Machinable): self.Machinable = Machinable
    def get_Zone(self): return self.Zone
    def set_Zone(self, Zone): self.Zone = Zone
    def get_Postage(self): return self.Postage
    def set_Postage(self, Postage): self.Postage = Postage
    def add_Postage(self, value): self.Postage.append(value)
    def insert_Postage_at(self, index, value): self.Postage.insert(index, value)
    def replace_Postage_at(self, index, value): self.Postage[index] = value
    def get_Restriction(self): return self.Restriction
    def set_Restriction(self, Restriction): self.Restriction = Restriction
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.Error is not None or
            self.ZipOrigination is not None or
            self.ZipDestination is not None or
            self.Pounds is not None or
            self.Ounces is not None or
            self.FirstClassMailType is not None or
            self.Container is not None or
            self.Size is not None or
            self.Width is not None or
            self.Length is not None or
            self.Height is not None or
            self.Girth is not None or
            self.Machinable is not None or
            self.Zone is not None or
            self.Postage or
            self.Restriction is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackageType'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ID), input_name='ID')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PackageType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Error is not None:
            self.Error.export(outfile, level, namespace_, name_='Error', pretty_print=pretty_print)
        if self.ZipOrigination is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ZipOrigination>%s</ZipOrigination>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ZipOrigination), input_name='ZipOrigination')), eol_))
        if self.ZipDestination is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ZipDestination>%s</ZipDestination>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ZipDestination), input_name='ZipDestination')), eol_))
        if self.Pounds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Pounds>%s</Pounds>%s' % (self.gds_format_integer(self.Pounds, input_name='Pounds'), eol_))
        if self.Ounces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Ounces>%s</Ounces>%s' % (self.gds_format_float(self.Ounces, input_name='Ounces'), eol_))
        if self.FirstClassMailType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FirstClassMailType>%s</FirstClassMailType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FirstClassMailType), input_name='FirstClassMailType')), eol_))
        if self.Container is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Container>%s</Container>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Container), input_name='Container')), eol_))
        if self.Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Size>%s</Size>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Size), input_name='Size')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Width>%s</Width>%s' % (self.gds_format_float(self.Width, input_name='Width'), eol_))
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Length>%s</Length>%s' % (self.gds_format_float(self.Length, input_name='Length'), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Height>%s</Height>%s' % (self.gds_format_float(self.Height, input_name='Height'), eol_))
        if self.Girth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Girth>%s</Girth>%s' % (self.gds_format_float(self.Girth, input_name='Girth'), eol_))
        if self.Machinable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Machinable>%s</Machinable>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Machinable), input_name='Machinable')), eol_))
        if self.Zone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Zone>%s</Zone>%s' % (self.gds_format_integer(self.Zone, input_name='Zone'), eol_))
        for Postage_ in self.Postage:
            Postage_.export(outfile, level, namespace_, name_='Postage', pretty_print=pretty_print)
        if self.Restriction is not None:
            self.Restriction.export(outfile, level, namespace_, name_='Restriction', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Error':
            obj_ = ErrorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Error', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Error'):
              self.add_Error(obj_.value)
            elif hasattr(self, 'set_Error'):
              self.set_Error(obj_.value)
        elif nodeName_ == 'ZipOrigination' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'ZipOrigination', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'ZipDestination' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'ZipDestination', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Pounds' and child_.text is not None:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'Pounds', ival_)
            self.content_.append(obj_)
        elif nodeName_ == 'Ounces' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'Ounces', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'FirstClassMailType' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'FirstClassMailType', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Container' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'Container', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Size' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'Size', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Width' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'Width', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'Length' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'Length', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'Height' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'Height', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'Girth' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'Girth', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'Machinable' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'Machinable', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Zone' and child_.text is not None:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'Zone', ival_)
            self.content_.append(obj_)
        elif nodeName_ == 'Postage':
            obj_ = PostageType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Postage', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Postage'):
              self.add_Postage(obj_.value)
            elif hasattr(self, 'set_Postage'):
              self.set_Postage(obj_.value)
        elif nodeName_ == 'Restriction':
            obj_ = RestrictionType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Restriction', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Restriction'):
              self.add_Restriction(obj_.value)
            elif hasattr(self, 'set_Restriction'):
              self.set_Restriction(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class PackageType


class ErrorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Source=None, Description=None, HelpFile=None, HelpContext=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Source = Source
        self.Description = Description
        self.HelpFile = HelpFile
        self.HelpContext = HelpContext
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ErrorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ErrorType.subclass:
            return ErrorType.subclass(*args_, **kwargs_)
        else:
            return ErrorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_HelpFile(self): return self.HelpFile
    def set_HelpFile(self, HelpFile): self.HelpFile = HelpFile
    def get_HelpContext(self): return self.HelpContext
    def set_HelpContext(self, HelpContext): self.HelpContext = HelpContext
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Source is not None or
            self.Description is not None or
            self.HelpFile is not None or
            self.HelpContext is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ErrorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ErrorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ErrorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ErrorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ErrorType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ErrorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_format_integer(self.Number, input_name='Number'), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Source>%s</Source>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.HelpFile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HelpFile>%s</HelpFile>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HelpFile), input_name='HelpFile')), eol_))
        if self.HelpContext is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HelpContext>%s</HelpContext>%s' % (self.gds_format_integer(self.HelpContext, input_name='HelpContext'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Number')
            self.Number = ival_
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'HelpFile':
            HelpFile_ = child_.text
            HelpFile_ = self.gds_validate_string(HelpFile_, node, 'HelpFile')
            self.HelpFile = HelpFile_
        elif nodeName_ == 'HelpContext':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'HelpContext')
            self.HelpContext = ival_
# end class ErrorType


class PostageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CLASSID=None, MailService=None, Rate=None, CommercialRate=None, CommercialPlusRate=None, CommitmentDate=None, CommitmentName=None, MaxDimensions=None, ServiceInformation=None, SpecialServices=None, Zone=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.CLASSID = _cast(int, CLASSID)
        self.MailService = MailService
        self.Rate = Rate
        self.CommercialRate = CommercialRate
        self.CommercialPlusRate = CommercialPlusRate
        self.CommitmentDate = CommitmentDate
        self.CommitmentName = CommitmentName
        self.MaxDimensions = MaxDimensions
        self.ServiceInformation = ServiceInformation
        self.SpecialServices = SpecialServices
        self.Zone = Zone
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PostageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PostageType.subclass:
            return PostageType.subclass(*args_, **kwargs_)
        else:
            return PostageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MailService(self): return self.MailService
    def set_MailService(self, MailService): self.MailService = MailService
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def get_CommercialRate(self): return self.CommercialRate
    def set_CommercialRate(self, CommercialRate): self.CommercialRate = CommercialRate
    def get_CommercialPlusRate(self): return self.CommercialPlusRate
    def set_CommercialPlusRate(self, CommercialPlusRate): self.CommercialPlusRate = CommercialPlusRate
    def get_CommitmentDate(self): return self.CommitmentDate
    def set_CommitmentDate(self, CommitmentDate): self.CommitmentDate = CommitmentDate
    def get_CommitmentName(self): return self.CommitmentName
    def set_CommitmentName(self, CommitmentName): self.CommitmentName = CommitmentName
    def get_MaxDimensions(self): return self.MaxDimensions
    def set_MaxDimensions(self, MaxDimensions): self.MaxDimensions = MaxDimensions
    def get_ServiceInformation(self): return self.ServiceInformation
    def set_ServiceInformation(self, ServiceInformation): self.ServiceInformation = ServiceInformation
    def get_SpecialServices(self): return self.SpecialServices
    def set_SpecialServices(self, SpecialServices): self.SpecialServices = SpecialServices
    def get_Zone(self): return self.Zone
    def set_Zone(self, Zone): self.Zone = Zone
    def get_CLASSID(self): return self.CLASSID
    def set_CLASSID(self, CLASSID): self.CLASSID = CLASSID
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.MailService is not None or
            self.Rate is not None or
            self.CommercialRate is not None or
            self.CommercialPlusRate is not None or
            self.CommitmentDate is not None or
            self.CommitmentName is not None or
            self.MaxDimensions is not None or
            self.ServiceInformation is not None or
            self.SpecialServices is not None or
            self.Zone is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PostageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PostageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PostageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PostageType'):
        if self.CLASSID is not None and 'CLASSID' not in already_processed:
            already_processed.add('CLASSID')
            outfile.write(' CLASSID="%s"' % self.gds_format_integer(self.CLASSID, input_name='CLASSID'))
    def exportChildren(self, outfile, level, namespace_='', name_='PostageType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MailService is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MailService>%s</MailService>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MailService), input_name='MailService')), eol_))
        if self.Rate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Rate>%s</Rate>%s' % (self.gds_format_float(self.Rate, input_name='Rate'), eol_))
        if self.CommercialRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommercialRate>%s</CommercialRate>%s' % (self.gds_format_float(self.CommercialRate, input_name='CommercialRate'), eol_))
        if self.CommercialPlusRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommercialPlusRate>%s</CommercialPlusRate>%s' % (self.gds_format_float(self.CommercialPlusRate, input_name='CommercialPlusRate'), eol_))
        if self.CommitmentDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommitmentDate>%s</CommitmentDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommitmentDate), input_name='CommitmentDate')), eol_))
        if self.CommitmentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommitmentName>%s</CommitmentName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommitmentName), input_name='CommitmentName')), eol_))
        if self.MaxDimensions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MaxDimensions>%s</MaxDimensions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MaxDimensions), input_name='MaxDimensions')), eol_))
        if self.ServiceInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ServiceInformation>%s</ServiceInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceInformation), input_name='ServiceInformation')), eol_))
        if self.SpecialServices is not None:
            self.SpecialServices.export(outfile, level, namespace_, name_='SpecialServices', pretty_print=pretty_print)
        if self.Zone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Zone>%s</Zone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Zone), input_name='Zone')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('CLASSID', node)
        if value is not None and 'CLASSID' not in already_processed:
            already_processed.add('CLASSID')
            try:
                self.CLASSID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MailService' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MailService', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Rate' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'Rate', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'CommercialRate' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'CommercialRate', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'CommercialPlusRate' and child_.text is not None:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeFloat, 'CommercialPlusRate', fval_)
            self.content_.append(obj_)
        elif nodeName_ == 'CommitmentDate' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'CommitmentDate', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'CommitmentName' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'CommitmentName', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'MaxDimensions' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MaxDimensions', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'ServiceInformation' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'ServiceInformation', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'SpecialServices':
            obj_ = SpecialServicesType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SpecialServices', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SpecialServices'):
              self.add_SpecialServices(obj_.value)
            elif hasattr(self, 'set_SpecialServices'):
              self.set_SpecialServices(obj_.value)
        elif nodeName_ == 'Zone' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'Zone', valuestr_)
            self.content_.append(obj_)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class PostageType


class SpecialServicesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialService=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        if SpecialService is None:
            self.SpecialService = []
        else:
            self.SpecialService = SpecialService
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialServicesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialServicesType.subclass:
            return SpecialServicesType.subclass(*args_, **kwargs_)
        else:
            return SpecialServicesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialService(self): return self.SpecialService
    def set_SpecialService(self, SpecialService): self.SpecialService = SpecialService
    def add_SpecialService(self, value): self.SpecialService.append(value)
    def insert_SpecialService_at(self, index, value): self.SpecialService.insert(index, value)
    def replace_SpecialService_at(self, index, value): self.SpecialService[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.SpecialService or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SpecialServicesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialServicesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialServicesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SpecialServicesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SpecialServicesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SpecialServicesType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialService_ in self.SpecialService:
            SpecialService_.export(outfile, level, namespace_, name_='SpecialService', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialService':
            obj_ = SpecialServiceType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SpecialService', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SpecialService'):
              self.add_SpecialService(obj_.value)
            elif hasattr(self, 'set_SpecialService'):
              self.set_SpecialService(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SpecialServicesType


class SpecialServiceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceID=None, ServiceName=None, Available=None, AvailableOnline=None, AvailableCPP=None, Price=None, PriceOnline=None, PriceCPP=None, DeclaredValueRequired=None, DueSenderRequired=None):
        self.original_tagname_ = None
        self.ServiceID = ServiceID
        self.ServiceName = ServiceName
        self.Available = Available
        self.AvailableOnline = AvailableOnline
        self.AvailableCPP = AvailableCPP
        self.Price = Price
        self.PriceOnline = PriceOnline
        self.PriceCPP = PriceCPP
        self.DeclaredValueRequired = DeclaredValueRequired
        self.DueSenderRequired = DueSenderRequired
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialServiceType.subclass:
            return SpecialServiceType.subclass(*args_, **kwargs_)
        else:
            return SpecialServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceID(self): return self.ServiceID
    def set_ServiceID(self, ServiceID): self.ServiceID = ServiceID
    def get_ServiceName(self): return self.ServiceName
    def set_ServiceName(self, ServiceName): self.ServiceName = ServiceName
    def get_Available(self): return self.Available
    def set_Available(self, Available): self.Available = Available
    def get_AvailableOnline(self): return self.AvailableOnline
    def set_AvailableOnline(self, AvailableOnline): self.AvailableOnline = AvailableOnline
    def get_AvailableCPP(self): return self.AvailableCPP
    def set_AvailableCPP(self, AvailableCPP): self.AvailableCPP = AvailableCPP
    def get_Price(self): return self.Price
    def set_Price(self, Price): self.Price = Price
    def get_PriceOnline(self): return self.PriceOnline
    def set_PriceOnline(self, PriceOnline): self.PriceOnline = PriceOnline
    def get_PriceCPP(self): return self.PriceCPP
    def set_PriceCPP(self, PriceCPP): self.PriceCPP = PriceCPP
    def get_DeclaredValueRequired(self): return self.DeclaredValueRequired
    def set_DeclaredValueRequired(self, DeclaredValueRequired): self.DeclaredValueRequired = DeclaredValueRequired
    def get_DueSenderRequired(self): return self.DueSenderRequired
    def set_DueSenderRequired(self, DueSenderRequired): self.DueSenderRequired = DueSenderRequired
    def hasContent_(self):
        if (
            self.ServiceID is not None or
            self.ServiceName is not None or
            self.Available is not None or
            self.AvailableOnline is not None or
            self.AvailableCPP is not None or
            self.Price is not None or
            self.PriceOnline is not None or
            self.PriceCPP is not None or
            self.DeclaredValueRequired is not None or
            self.DueSenderRequired is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SpecialServiceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SpecialServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SpecialServiceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SpecialServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ServiceID>%s</ServiceID>%s' % (self.gds_format_integer(self.ServiceID, input_name='ServiceID'), eol_))
        if self.ServiceName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ServiceName>%s</ServiceName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceName), input_name='ServiceName')), eol_))
        if self.Available is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Available>%s</Available>%s' % (self.gds_format_boolean(self.Available, input_name='Available'), eol_))
        if self.AvailableOnline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AvailableOnline>%s</AvailableOnline>%s' % (self.gds_format_boolean(self.AvailableOnline, input_name='AvailableOnline'), eol_))
        if self.AvailableCPP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AvailableCPP>%s</AvailableCPP>%s' % (self.gds_format_boolean(self.AvailableCPP, input_name='AvailableCPP'), eol_))
        if self.Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Price>%s</Price>%s' % (self.gds_format_float(self.Price, input_name='Price'), eol_))
        if self.PriceOnline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PriceOnline>%s</PriceOnline>%s' % (self.gds_format_float(self.PriceOnline, input_name='PriceOnline'), eol_))
        if self.PriceCPP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PriceCPP>%s</PriceCPP>%s' % (self.gds_format_float(self.PriceCPP, input_name='PriceCPP'), eol_))
        if self.DeclaredValueRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DeclaredValueRequired>%s</DeclaredValueRequired>%s' % (self.gds_format_boolean(self.DeclaredValueRequired, input_name='DeclaredValueRequired'), eol_))
        if self.DueSenderRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DueSenderRequired>%s</DueSenderRequired>%s' % (self.gds_format_boolean(self.DueSenderRequired, input_name='DueSenderRequired'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceID':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ServiceID')
            self.ServiceID = ival_
        elif nodeName_ == 'ServiceName':
            ServiceName_ = child_.text
            ServiceName_ = self.gds_validate_string(ServiceName_, node, 'ServiceName')
            self.ServiceName = ServiceName_
        elif nodeName_ == 'Available':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Available')
            self.Available = ival_
        elif nodeName_ == 'AvailableOnline':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AvailableOnline')
            self.AvailableOnline = ival_
        elif nodeName_ == 'AvailableCPP':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'AvailableCPP')
            self.AvailableCPP = ival_
        elif nodeName_ == 'Price':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Price')
            self.Price = fval_
        elif nodeName_ == 'PriceOnline':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PriceOnline')
            self.PriceOnline = fval_
        elif nodeName_ == 'PriceCPP':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PriceCPP')
            self.PriceCPP = fval_
        elif nodeName_ == 'DeclaredValueRequired':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DeclaredValueRequired')
            self.DeclaredValueRequired = ival_
        elif nodeName_ == 'DueSenderRequired':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DueSenderRequired')
            self.DueSenderRequired = ival_
# end class SpecialServiceType


class RestrictionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Restrictions=None):
        self.original_tagname_ = None
        self.Restrictions = Restrictions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RestrictionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RestrictionType.subclass:
            return RestrictionType.subclass(*args_, **kwargs_)
        else:
            return RestrictionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Restrictions(self): return self.Restrictions
    def set_Restrictions(self, Restrictions): self.Restrictions = Restrictions
    def hasContent_(self):
        if (
            self.Restrictions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RestrictionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RestrictionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RestrictionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RestrictionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RestrictionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RestrictionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Restrictions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Restrictions>%s</Restrictions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Restrictions), input_name='Restrictions')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Restrictions':
            Restrictions_ = child_.text
            Restrictions_ = self.gds_validate_string(Restrictions_, node, 'Restrictions')
            self.Restrictions = Restrictions_
# end class RestrictionType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateV4Response'
        rootClass = RateV4Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateV4Response'
        rootClass = RateV4Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateV4Response'
        rootClass = RateV4Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateV4Response'
        rootClass = RateV4Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from RateV4Response.xsd import *\n\n')
        sys.stdout.write('import RateV4Response.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ErrorType",
    "PackageType",
    "PostageType",
    "RateV4Response",
    "RestrictionType",
    "SpecialServiceType",
    "SpecialServicesType"
]
