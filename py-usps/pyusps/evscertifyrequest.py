#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 17:56:14 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/eVSCertifyRequest.xsd.py')
#
# Command line arguments:
#   eVSCertifyRequest.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/eVSCertifyRequest.xsd.py" eVSCertifyRequest.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class eVSCertifyRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, USERID=None, Option=None, Revision=None, ImageParameters=None, FromName=None, FromFirm=None, FromAddress1=None, FromAddress2=None, FromCity=None, FromState=None, FromZip5=None, FromZip4=None, FromPhone=None, POZipCode=None, AllowNonCleansedOriginAddr=None, ToName=None, ToFirm=None, ToAddress1=None, ToAddress2=None, ToCity=None, ToState=None, ToZip5=None, ToZip4=None, ToPhone=None, POBox=None, AllowNonCleansedDestAddr=None, WeightInOunces=None, ServiceType=None, Container=None, Width=None, Length=None, Height=None, Machinable=None, ProcessingCategory=None, PriceOptions=None, InsuredAmount=None, AddressServiceRequested=None, ExpressMailOptions=None, ShipDate=None, CustomerRefNo=None, ExtraServices=None, HoldForPickup=None, OpenDistribute=None, PermitNumber=None, PermitZIPCode=None, PermitHolderName=None, CRID=None, SenderName=None, SenderEMail=None, RecipientName=None, RecipientEMail=None, ReceiptOption=None, ImageType=None, HoldForManifest=None, NineDigitRoutingZip=None, ShipInfo=None, CarrierRelease=None, ReturnCommitments=None, PrintCustomerRefNo=None, Content=None, ShippingContents=None, CustomsContentType=None, ContentComments=None, RestrictionType=None, RestrictionComments=None, AESITN=None, ImportersReference=None, ImportersContact=None, ExportersReference=None, ExportersContact=None, InvoiceNumber=None, LicenseNumber=None, CertificateNumber=None):
        self.original_tagname_ = None
        self.USERID = _cast(None, USERID)
        self.Option = Option
        self.Revision = Revision
        self.ImageParameters = ImageParameters
        self.FromName = FromName
        self.FromFirm = FromFirm
        self.FromAddress1 = FromAddress1
        self.FromAddress2 = FromAddress2
        self.FromCity = FromCity
        self.FromState = FromState
        self.FromZip5 = FromZip5
        self.FromZip4 = FromZip4
        self.FromPhone = FromPhone
        self.POZipCode = POZipCode
        self.AllowNonCleansedOriginAddr = AllowNonCleansedOriginAddr
        self.ToName = ToName
        self.ToFirm = ToFirm
        self.ToAddress1 = ToAddress1
        self.ToAddress2 = ToAddress2
        self.ToCity = ToCity
        self.ToState = ToState
        self.ToZip5 = ToZip5
        self.ToZip4 = ToZip4
        self.ToPhone = ToPhone
        self.POBox = POBox
        self.AllowNonCleansedDestAddr = AllowNonCleansedDestAddr
        self.WeightInOunces = WeightInOunces
        self.ServiceType = ServiceType
        self.Container = Container
        self.Width = Width
        self.Length = Length
        self.Height = Height
        self.Machinable = Machinable
        self.ProcessingCategory = ProcessingCategory
        self.PriceOptions = PriceOptions
        self.InsuredAmount = InsuredAmount
        self.AddressServiceRequested = AddressServiceRequested
        self.ExpressMailOptions = ExpressMailOptions
        self.ShipDate = ShipDate
        self.CustomerRefNo = CustomerRefNo
        self.ExtraServices = ExtraServices
        self.HoldForPickup = HoldForPickup
        self.OpenDistribute = OpenDistribute
        self.PermitNumber = PermitNumber
        self.PermitZIPCode = PermitZIPCode
        self.PermitHolderName = PermitHolderName
        self.CRID = CRID
        self.SenderName = SenderName
        self.SenderEMail = SenderEMail
        self.RecipientName = RecipientName
        self.RecipientEMail = RecipientEMail
        self.ReceiptOption = ReceiptOption
        self.ImageType = ImageType
        self.HoldForManifest = HoldForManifest
        self.NineDigitRoutingZip = NineDigitRoutingZip
        self.ShipInfo = ShipInfo
        self.CarrierRelease = CarrierRelease
        self.ReturnCommitments = ReturnCommitments
        self.PrintCustomerRefNo = PrintCustomerRefNo
        self.Content = Content
        self.ShippingContents = ShippingContents
        self.CustomsContentType = CustomsContentType
        self.ContentComments = ContentComments
        self.RestrictionType = RestrictionType
        self.RestrictionComments = RestrictionComments
        self.AESITN = AESITN
        self.ImportersReference = ImportersReference
        self.ImportersContact = ImportersContact
        self.ExportersReference = ExportersReference
        self.ExportersContact = ExportersContact
        self.InvoiceNumber = InvoiceNumber
        self.LicenseNumber = LicenseNumber
        self.CertificateNumber = CertificateNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, eVSCertifyRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if eVSCertifyRequest.subclass:
            return eVSCertifyRequest.subclass(*args_, **kwargs_)
        else:
            return eVSCertifyRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_Revision(self): return self.Revision
    def set_Revision(self, Revision): self.Revision = Revision
    def get_ImageParameters(self): return self.ImageParameters
    def set_ImageParameters(self, ImageParameters): self.ImageParameters = ImageParameters
    def get_FromName(self): return self.FromName
    def set_FromName(self, FromName): self.FromName = FromName
    def get_FromFirm(self): return self.FromFirm
    def set_FromFirm(self, FromFirm): self.FromFirm = FromFirm
    def get_FromAddress1(self): return self.FromAddress1
    def set_FromAddress1(self, FromAddress1): self.FromAddress1 = FromAddress1
    def get_FromAddress2(self): return self.FromAddress2
    def set_FromAddress2(self, FromAddress2): self.FromAddress2 = FromAddress2
    def get_FromCity(self): return self.FromCity
    def set_FromCity(self, FromCity): self.FromCity = FromCity
    def get_FromState(self): return self.FromState
    def set_FromState(self, FromState): self.FromState = FromState
    def get_FromZip5(self): return self.FromZip5
    def set_FromZip5(self, FromZip5): self.FromZip5 = FromZip5
    def get_FromZip4(self): return self.FromZip4
    def set_FromZip4(self, FromZip4): self.FromZip4 = FromZip4
    def get_FromPhone(self): return self.FromPhone
    def set_FromPhone(self, FromPhone): self.FromPhone = FromPhone
    def get_POZipCode(self): return self.POZipCode
    def set_POZipCode(self, POZipCode): self.POZipCode = POZipCode
    def get_AllowNonCleansedOriginAddr(self): return self.AllowNonCleansedOriginAddr
    def set_AllowNonCleansedOriginAddr(self, AllowNonCleansedOriginAddr): self.AllowNonCleansedOriginAddr = AllowNonCleansedOriginAddr
    def get_ToName(self): return self.ToName
    def set_ToName(self, ToName): self.ToName = ToName
    def get_ToFirm(self): return self.ToFirm
    def set_ToFirm(self, ToFirm): self.ToFirm = ToFirm
    def get_ToAddress1(self): return self.ToAddress1
    def set_ToAddress1(self, ToAddress1): self.ToAddress1 = ToAddress1
    def get_ToAddress2(self): return self.ToAddress2
    def set_ToAddress2(self, ToAddress2): self.ToAddress2 = ToAddress2
    def get_ToCity(self): return self.ToCity
    def set_ToCity(self, ToCity): self.ToCity = ToCity
    def get_ToState(self): return self.ToState
    def set_ToState(self, ToState): self.ToState = ToState
    def get_ToZip5(self): return self.ToZip5
    def set_ToZip5(self, ToZip5): self.ToZip5 = ToZip5
    def get_ToZip4(self): return self.ToZip4
    def set_ToZip4(self, ToZip4): self.ToZip4 = ToZip4
    def get_ToPhone(self): return self.ToPhone
    def set_ToPhone(self, ToPhone): self.ToPhone = ToPhone
    def get_POBox(self): return self.POBox
    def set_POBox(self, POBox): self.POBox = POBox
    def get_AllowNonCleansedDestAddr(self): return self.AllowNonCleansedDestAddr
    def set_AllowNonCleansedDestAddr(self, AllowNonCleansedDestAddr): self.AllowNonCleansedDestAddr = AllowNonCleansedDestAddr
    def get_WeightInOunces(self): return self.WeightInOunces
    def set_WeightInOunces(self, WeightInOunces): self.WeightInOunces = WeightInOunces
    def get_ServiceType(self): return self.ServiceType
    def set_ServiceType(self, ServiceType): self.ServiceType = ServiceType
    def get_Container(self): return self.Container
    def set_Container(self, Container): self.Container = Container
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Machinable(self): return self.Machinable
    def set_Machinable(self, Machinable): self.Machinable = Machinable
    def get_ProcessingCategory(self): return self.ProcessingCategory
    def set_ProcessingCategory(self, ProcessingCategory): self.ProcessingCategory = ProcessingCategory
    def get_PriceOptions(self): return self.PriceOptions
    def set_PriceOptions(self, PriceOptions): self.PriceOptions = PriceOptions
    def get_InsuredAmount(self): return self.InsuredAmount
    def set_InsuredAmount(self, InsuredAmount): self.InsuredAmount = InsuredAmount
    def get_AddressServiceRequested(self): return self.AddressServiceRequested
    def set_AddressServiceRequested(self, AddressServiceRequested): self.AddressServiceRequested = AddressServiceRequested
    def get_ExpressMailOptions(self): return self.ExpressMailOptions
    def set_ExpressMailOptions(self, ExpressMailOptions): self.ExpressMailOptions = ExpressMailOptions
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_CustomerRefNo(self): return self.CustomerRefNo
    def set_CustomerRefNo(self, CustomerRefNo): self.CustomerRefNo = CustomerRefNo
    def get_ExtraServices(self): return self.ExtraServices
    def set_ExtraServices(self, ExtraServices): self.ExtraServices = ExtraServices
    def get_HoldForPickup(self): return self.HoldForPickup
    def set_HoldForPickup(self, HoldForPickup): self.HoldForPickup = HoldForPickup
    def get_OpenDistribute(self): return self.OpenDistribute
    def set_OpenDistribute(self, OpenDistribute): self.OpenDistribute = OpenDistribute
    def get_PermitNumber(self): return self.PermitNumber
    def set_PermitNumber(self, PermitNumber): self.PermitNumber = PermitNumber
    def get_PermitZIPCode(self): return self.PermitZIPCode
    def set_PermitZIPCode(self, PermitZIPCode): self.PermitZIPCode = PermitZIPCode
    def get_PermitHolderName(self): return self.PermitHolderName
    def set_PermitHolderName(self, PermitHolderName): self.PermitHolderName = PermitHolderName
    def get_CRID(self): return self.CRID
    def set_CRID(self, CRID): self.CRID = CRID
    def get_SenderName(self): return self.SenderName
    def set_SenderName(self, SenderName): self.SenderName = SenderName
    def get_SenderEMail(self): return self.SenderEMail
    def set_SenderEMail(self, SenderEMail): self.SenderEMail = SenderEMail
    def get_RecipientName(self): return self.RecipientName
    def set_RecipientName(self, RecipientName): self.RecipientName = RecipientName
    def get_RecipientEMail(self): return self.RecipientEMail
    def set_RecipientEMail(self, RecipientEMail): self.RecipientEMail = RecipientEMail
    def get_ReceiptOption(self): return self.ReceiptOption
    def set_ReceiptOption(self, ReceiptOption): self.ReceiptOption = ReceiptOption
    def get_ImageType(self): return self.ImageType
    def set_ImageType(self, ImageType): self.ImageType = ImageType
    def get_HoldForManifest(self): return self.HoldForManifest
    def set_HoldForManifest(self, HoldForManifest): self.HoldForManifest = HoldForManifest
    def get_NineDigitRoutingZip(self): return self.NineDigitRoutingZip
    def set_NineDigitRoutingZip(self, NineDigitRoutingZip): self.NineDigitRoutingZip = NineDigitRoutingZip
    def get_ShipInfo(self): return self.ShipInfo
    def set_ShipInfo(self, ShipInfo): self.ShipInfo = ShipInfo
    def get_CarrierRelease(self): return self.CarrierRelease
    def set_CarrierRelease(self, CarrierRelease): self.CarrierRelease = CarrierRelease
    def get_ReturnCommitments(self): return self.ReturnCommitments
    def set_ReturnCommitments(self, ReturnCommitments): self.ReturnCommitments = ReturnCommitments
    def get_PrintCustomerRefNo(self): return self.PrintCustomerRefNo
    def set_PrintCustomerRefNo(self, PrintCustomerRefNo): self.PrintCustomerRefNo = PrintCustomerRefNo
    def get_Content(self): return self.Content
    def set_Content(self, Content): self.Content = Content
    def get_ShippingContents(self): return self.ShippingContents
    def set_ShippingContents(self, ShippingContents): self.ShippingContents = ShippingContents
    def get_CustomsContentType(self): return self.CustomsContentType
    def set_CustomsContentType(self, CustomsContentType): self.CustomsContentType = CustomsContentType
    def get_ContentComments(self): return self.ContentComments
    def set_ContentComments(self, ContentComments): self.ContentComments = ContentComments
    def get_RestrictionType(self): return self.RestrictionType
    def set_RestrictionType(self, RestrictionType): self.RestrictionType = RestrictionType
    def get_RestrictionComments(self): return self.RestrictionComments
    def set_RestrictionComments(self, RestrictionComments): self.RestrictionComments = RestrictionComments
    def get_AESITN(self): return self.AESITN
    def set_AESITN(self, AESITN): self.AESITN = AESITN
    def get_ImportersReference(self): return self.ImportersReference
    def set_ImportersReference(self, ImportersReference): self.ImportersReference = ImportersReference
    def get_ImportersContact(self): return self.ImportersContact
    def set_ImportersContact(self, ImportersContact): self.ImportersContact = ImportersContact
    def get_ExportersReference(self): return self.ExportersReference
    def set_ExportersReference(self, ExportersReference): self.ExportersReference = ExportersReference
    def get_ExportersContact(self): return self.ExportersContact
    def set_ExportersContact(self, ExportersContact): self.ExportersContact = ExportersContact
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_LicenseNumber(self): return self.LicenseNumber
    def set_LicenseNumber(self, LicenseNumber): self.LicenseNumber = LicenseNumber
    def get_CertificateNumber(self): return self.CertificateNumber
    def set_CertificateNumber(self, CertificateNumber): self.CertificateNumber = CertificateNumber
    def get_USERID(self): return self.USERID
    def set_USERID(self, USERID): self.USERID = USERID
    def hasContent_(self):
        if (
            self.Option is not None or
            self.Revision is not None or
            self.ImageParameters is not None or
            self.FromName is not None or
            self.FromFirm is not None or
            self.FromAddress1 is not None or
            self.FromAddress2 is not None or
            self.FromCity is not None or
            self.FromState is not None or
            self.FromZip5 is not None or
            self.FromZip4 is not None or
            self.FromPhone is not None or
            self.POZipCode is not None or
            self.AllowNonCleansedOriginAddr is not None or
            self.ToName is not None or
            self.ToFirm is not None or
            self.ToAddress1 is not None or
            self.ToAddress2 is not None or
            self.ToCity is not None or
            self.ToState is not None or
            self.ToZip5 is not None or
            self.ToZip4 is not None or
            self.ToPhone is not None or
            self.POBox is not None or
            self.AllowNonCleansedDestAddr is not None or
            self.WeightInOunces is not None or
            self.ServiceType is not None or
            self.Container is not None or
            self.Width is not None or
            self.Length is not None or
            self.Height is not None or
            self.Machinable is not None or
            self.ProcessingCategory is not None or
            self.PriceOptions is not None or
            self.InsuredAmount is not None or
            self.AddressServiceRequested is not None or
            self.ExpressMailOptions is not None or
            self.ShipDate is not None or
            self.CustomerRefNo is not None or
            self.ExtraServices is not None or
            self.HoldForPickup is not None or
            self.OpenDistribute is not None or
            self.PermitNumber is not None or
            self.PermitZIPCode is not None or
            self.PermitHolderName is not None or
            self.CRID is not None or
            self.SenderName is not None or
            self.SenderEMail is not None or
            self.RecipientName is not None or
            self.RecipientEMail is not None or
            self.ReceiptOption is not None or
            self.ImageType is not None or
            self.HoldForManifest is not None or
            self.NineDigitRoutingZip is not None or
            self.ShipInfo is not None or
            self.CarrierRelease is not None or
            self.ReturnCommitments is not None or
            self.PrintCustomerRefNo is not None or
            self.Content is not None or
            self.ShippingContents is not None or
            self.CustomsContentType is not None or
            self.ContentComments is not None or
            self.RestrictionType is not None or
            self.RestrictionComments is not None or
            self.AESITN is not None or
            self.ImportersReference is not None or
            self.ImportersContact is not None or
            self.ExportersReference is not None or
            self.ExportersContact is not None or
            self.InvoiceNumber is not None or
            self.LicenseNumber is not None or
            self.CertificateNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='eVSCertifyRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('eVSCertifyRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='eVSCertifyRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='eVSCertifyRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='eVSCertifyRequest'):
        if self.USERID is not None and 'USERID' not in already_processed:
            already_processed.add('USERID')
            outfile.write(' USERID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.USERID), input_name='USERID')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='eVSCertifyRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Option>%s</Option>%s' % (self.gds_format_integer(self.Option, input_name='Option'), eol_))
        if self.Revision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Revision>%s</Revision>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Revision), input_name='Revision')), eol_))
        if self.ImageParameters is not None:
            self.ImageParameters.export(outfile, level, namespace_, name_='ImageParameters', pretty_print=pretty_print)
        if self.FromName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromName>%s</FromName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromName), input_name='FromName')), eol_))
        if self.FromFirm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromFirm>%s</FromFirm>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromFirm), input_name='FromFirm')), eol_))
        if self.FromAddress1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromAddress1>%s</FromAddress1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromAddress1), input_name='FromAddress1')), eol_))
        if self.FromAddress2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromAddress2>%s</FromAddress2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromAddress2), input_name='FromAddress2')), eol_))
        if self.FromCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromCity>%s</FromCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromCity), input_name='FromCity')), eol_))
        if self.FromState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromState>%s</FromState>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromState), input_name='FromState')), eol_))
        if self.FromZip5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromZip5>%s</FromZip5>%s' % (self.gds_format_integer(self.FromZip5, input_name='FromZip5'), eol_))
        if self.FromZip4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromZip4>%s</FromZip4>%s' % (self.gds_format_integer(self.FromZip4, input_name='FromZip4'), eol_))
        if self.FromPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromPhone>%s</FromPhone>%s' % (self.gds_format_integer(self.FromPhone, input_name='FromPhone'), eol_))
        if self.POZipCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POZipCode>%s</POZipCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POZipCode), input_name='POZipCode')), eol_))
        if self.AllowNonCleansedOriginAddr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AllowNonCleansedOriginAddr>%s</AllowNonCleansedOriginAddr>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AllowNonCleansedOriginAddr), input_name='AllowNonCleansedOriginAddr')), eol_))
        if self.ToName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToName>%s</ToName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToName), input_name='ToName')), eol_))
        if self.ToFirm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToFirm>%s</ToFirm>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToFirm), input_name='ToFirm')), eol_))
        if self.ToAddress1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToAddress1>%s</ToAddress1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToAddress1), input_name='ToAddress1')), eol_))
        if self.ToAddress2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToAddress2>%s</ToAddress2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToAddress2), input_name='ToAddress2')), eol_))
        if self.ToCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToCity>%s</ToCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToCity), input_name='ToCity')), eol_))
        if self.ToState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToState>%s</ToState>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToState), input_name='ToState')), eol_))
        if self.ToZip5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToZip5>%s</ToZip5>%s' % (self.gds_format_integer(self.ToZip5, input_name='ToZip5'), eol_))
        if self.ToZip4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToZip4>%s</ToZip4>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToZip4), input_name='ToZip4')), eol_))
        if self.ToPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToPhone>%s</ToPhone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToPhone), input_name='ToPhone')), eol_))
        if self.POBox is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POBox>%s</POBox>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POBox), input_name='POBox')), eol_))
        if self.AllowNonCleansedDestAddr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AllowNonCleansedDestAddr>%s</AllowNonCleansedDestAddr>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AllowNonCleansedDestAddr), input_name='AllowNonCleansedDestAddr')), eol_))
        if self.WeightInOunces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WeightInOunces>%s</WeightInOunces>%s' % (self.gds_format_integer(self.WeightInOunces, input_name='WeightInOunces'), eol_))
        if self.ServiceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ServiceType>%s</ServiceType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), eol_))
        if self.Container is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Container>%s</Container>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Container), input_name='Container')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Width>%s</Width>%s' % (self.gds_format_integer(self.Width, input_name='Width'), eol_))
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Length>%s</Length>%s' % (self.gds_format_integer(self.Length, input_name='Length'), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Height>%s</Height>%s' % (self.gds_format_integer(self.Height, input_name='Height'), eol_))
        if self.Machinable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Machinable>%s</Machinable>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Machinable), input_name='Machinable')), eol_))
        if self.ProcessingCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ProcessingCategory>%s</ProcessingCategory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProcessingCategory), input_name='ProcessingCategory')), eol_))
        if self.PriceOptions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PriceOptions>%s</PriceOptions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PriceOptions), input_name='PriceOptions')), eol_))
        if self.InsuredAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<InsuredAmount>%s</InsuredAmount>%s' % (self.gds_format_integer(self.InsuredAmount, input_name='InsuredAmount'), eol_))
        if self.AddressServiceRequested is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressServiceRequested>%s</AddressServiceRequested>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressServiceRequested), input_name='AddressServiceRequested')), eol_))
        if self.ExpressMailOptions is not None:
            self.ExpressMailOptions.export(outfile, level, namespace_, name_='ExpressMailOptions', pretty_print=pretty_print)
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipDate>%s</ShipDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipDate), input_name='ShipDate')), eol_))
        if self.CustomerRefNo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CustomerRefNo>%s</CustomerRefNo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerRefNo), input_name='CustomerRefNo')), eol_))
        if self.ExtraServices is not None:
            self.ExtraServices.export(outfile, level, namespace_, name_='ExtraServices', pretty_print=pretty_print)
        if self.HoldForPickup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HoldForPickup>%s</HoldForPickup>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldForPickup), input_name='HoldForPickup')), eol_))
        if self.OpenDistribute is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OpenDistribute>%s</OpenDistribute>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OpenDistribute), input_name='OpenDistribute')), eol_))
        if self.PermitNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PermitNumber>%s</PermitNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PermitNumber), input_name='PermitNumber')), eol_))
        if self.PermitZIPCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PermitZIPCode>%s</PermitZIPCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PermitZIPCode), input_name='PermitZIPCode')), eol_))
        if self.PermitHolderName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PermitHolderName>%s</PermitHolderName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PermitHolderName), input_name='PermitHolderName')), eol_))
        if self.CRID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CRID>%s</CRID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CRID), input_name='CRID')), eol_))
        if self.SenderName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SenderName>%s</SenderName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SenderName), input_name='SenderName')), eol_))
        if self.SenderEMail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SenderEMail>%s</SenderEMail>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SenderEMail), input_name='SenderEMail')), eol_))
        if self.RecipientName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RecipientName>%s</RecipientName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RecipientName), input_name='RecipientName')), eol_))
        if self.RecipientEMail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RecipientEMail>%s</RecipientEMail>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RecipientEMail), input_name='RecipientEMail')), eol_))
        if self.ReceiptOption is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReceiptOption>%s</ReceiptOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReceiptOption), input_name='ReceiptOption')), eol_))
        if self.ImageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ImageType>%s</ImageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), eol_))
        if self.HoldForManifest is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HoldForManifest>%s</HoldForManifest>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldForManifest), input_name='HoldForManifest')), eol_))
        if self.NineDigitRoutingZip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NineDigitRoutingZip>%s</NineDigitRoutingZip>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NineDigitRoutingZip), input_name='NineDigitRoutingZip')), eol_))
        if self.ShipInfo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipInfo>%s</ShipInfo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipInfo), input_name='ShipInfo')), eol_))
        if self.CarrierRelease is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CarrierRelease>%s</CarrierRelease>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierRelease), input_name='CarrierRelease')), eol_))
        if self.ReturnCommitments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReturnCommitments>%s</ReturnCommitments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReturnCommitments), input_name='ReturnCommitments')), eol_))
        if self.PrintCustomerRefNo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PrintCustomerRefNo>%s</PrintCustomerRefNo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrintCustomerRefNo), input_name='PrintCustomerRefNo')), eol_))
        if self.Content is not None:
            self.Content.export(outfile, level, namespace_, name_='Content', pretty_print=pretty_print)
        if self.ShippingContents is not None:
            self.ShippingContents.export(outfile, level, namespace_, name_='ShippingContents', pretty_print=pretty_print)
        if self.CustomsContentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CustomsContentType>%s</CustomsContentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomsContentType), input_name='CustomsContentType')), eol_))
        if self.ContentComments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContentComments>%s</ContentComments>%s' % (self.gds_format_integer(self.ContentComments, input_name='ContentComments'), eol_))
        if self.RestrictionType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RestrictionType>%s</RestrictionType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RestrictionType), input_name='RestrictionType')), eol_))
        if self.RestrictionComments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RestrictionComments>%s</RestrictionComments>%s' % (self.gds_format_integer(self.RestrictionComments, input_name='RestrictionComments'), eol_))
        if self.AESITN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AESITN>%s</AESITN>%s' % (self.gds_format_integer(self.AESITN, input_name='AESITN'), eol_))
        if self.ImportersReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ImportersReference>%s</ImportersReference>%s' % (self.gds_format_integer(self.ImportersReference, input_name='ImportersReference'), eol_))
        if self.ImportersContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ImportersContact>%s</ImportersContact>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImportersContact), input_name='ImportersContact')), eol_))
        if self.ExportersReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExportersReference>%s</ExportersReference>%s' % (self.gds_format_integer(self.ExportersReference, input_name='ExportersReference'), eol_))
        if self.ExportersContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExportersContact>%s</ExportersContact>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportersContact), input_name='ExportersContact')), eol_))
        if self.InvoiceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<InvoiceNumber>%s</InvoiceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceNumber), input_name='InvoiceNumber')), eol_))
        if self.LicenseNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LicenseNumber>%s</LicenseNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LicenseNumber), input_name='LicenseNumber')), eol_))
        if self.CertificateNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CertificateNumber>%s</CertificateNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CertificateNumber), input_name='CertificateNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('USERID', node)
        if value is not None and 'USERID' not in already_processed:
            already_processed.add('USERID')
            self.USERID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Option')
            self.Option = ival_
        elif nodeName_ == 'Revision':
            Revision_ = child_.text
            Revision_ = self.gds_validate_string(Revision_, node, 'Revision')
            self.Revision = Revision_
        elif nodeName_ == 'ImageParameters':
            obj_ = ImageParametersType.factory()
            obj_.build(child_)
            self.ImageParameters = obj_
            obj_.original_tagname_ = 'ImageParameters'
        elif nodeName_ == 'FromName':
            FromName_ = child_.text
            FromName_ = self.gds_validate_string(FromName_, node, 'FromName')
            self.FromName = FromName_
        elif nodeName_ == 'FromFirm':
            FromFirm_ = child_.text
            FromFirm_ = self.gds_validate_string(FromFirm_, node, 'FromFirm')
            self.FromFirm = FromFirm_
        elif nodeName_ == 'FromAddress1':
            FromAddress1_ = child_.text
            FromAddress1_ = self.gds_validate_string(FromAddress1_, node, 'FromAddress1')
            self.FromAddress1 = FromAddress1_
        elif nodeName_ == 'FromAddress2':
            FromAddress2_ = child_.text
            FromAddress2_ = self.gds_validate_string(FromAddress2_, node, 'FromAddress2')
            self.FromAddress2 = FromAddress2_
        elif nodeName_ == 'FromCity':
            FromCity_ = child_.text
            FromCity_ = self.gds_validate_string(FromCity_, node, 'FromCity')
            self.FromCity = FromCity_
        elif nodeName_ == 'FromState':
            FromState_ = child_.text
            FromState_ = self.gds_validate_string(FromState_, node, 'FromState')
            self.FromState = FromState_
        elif nodeName_ == 'FromZip5':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FromZip5')
            self.FromZip5 = ival_
        elif nodeName_ == 'FromZip4':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FromZip4')
            self.FromZip4 = ival_
        elif nodeName_ == 'FromPhone':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FromPhone')
            self.FromPhone = ival_
        elif nodeName_ == 'POZipCode':
            POZipCode_ = child_.text
            POZipCode_ = self.gds_validate_string(POZipCode_, node, 'POZipCode')
            self.POZipCode = POZipCode_
        elif nodeName_ == 'AllowNonCleansedOriginAddr':
            AllowNonCleansedOriginAddr_ = child_.text
            AllowNonCleansedOriginAddr_ = self.gds_validate_string(AllowNonCleansedOriginAddr_, node, 'AllowNonCleansedOriginAddr')
            self.AllowNonCleansedOriginAddr = AllowNonCleansedOriginAddr_
        elif nodeName_ == 'ToName':
            ToName_ = child_.text
            ToName_ = self.gds_validate_string(ToName_, node, 'ToName')
            self.ToName = ToName_
        elif nodeName_ == 'ToFirm':
            ToFirm_ = child_.text
            ToFirm_ = self.gds_validate_string(ToFirm_, node, 'ToFirm')
            self.ToFirm = ToFirm_
        elif nodeName_ == 'ToAddress1':
            ToAddress1_ = child_.text
            ToAddress1_ = self.gds_validate_string(ToAddress1_, node, 'ToAddress1')
            self.ToAddress1 = ToAddress1_
        elif nodeName_ == 'ToAddress2':
            ToAddress2_ = child_.text
            ToAddress2_ = self.gds_validate_string(ToAddress2_, node, 'ToAddress2')
            self.ToAddress2 = ToAddress2_
        elif nodeName_ == 'ToCity':
            ToCity_ = child_.text
            ToCity_ = self.gds_validate_string(ToCity_, node, 'ToCity')
            self.ToCity = ToCity_
        elif nodeName_ == 'ToState':
            ToState_ = child_.text
            ToState_ = self.gds_validate_string(ToState_, node, 'ToState')
            self.ToState = ToState_
        elif nodeName_ == 'ToZip5':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ToZip5')
            self.ToZip5 = ival_
        elif nodeName_ == 'ToZip4':
            ToZip4_ = child_.text
            ToZip4_ = self.gds_validate_string(ToZip4_, node, 'ToZip4')
            self.ToZip4 = ToZip4_
        elif nodeName_ == 'ToPhone':
            ToPhone_ = child_.text
            ToPhone_ = self.gds_validate_string(ToPhone_, node, 'ToPhone')
            self.ToPhone = ToPhone_
        elif nodeName_ == 'POBox':
            POBox_ = child_.text
            POBox_ = self.gds_validate_string(POBox_, node, 'POBox')
            self.POBox = POBox_
        elif nodeName_ == 'AllowNonCleansedDestAddr':
            AllowNonCleansedDestAddr_ = child_.text
            AllowNonCleansedDestAddr_ = self.gds_validate_string(AllowNonCleansedDestAddr_, node, 'AllowNonCleansedDestAddr')
            self.AllowNonCleansedDestAddr = AllowNonCleansedDestAddr_
        elif nodeName_ == 'WeightInOunces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'WeightInOunces')
            self.WeightInOunces = ival_
        elif nodeName_ == 'ServiceType':
            ServiceType_ = child_.text
            ServiceType_ = self.gds_validate_string(ServiceType_, node, 'ServiceType')
            self.ServiceType = ServiceType_
        elif nodeName_ == 'Container':
            Container_ = child_.text
            Container_ = self.gds_validate_string(Container_, node, 'Container')
            self.Container = Container_
        elif nodeName_ == 'Width':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
        elif nodeName_ == 'Length':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
        elif nodeName_ == 'Height':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
        elif nodeName_ == 'Machinable':
            Machinable_ = child_.text
            Machinable_ = self.gds_validate_string(Machinable_, node, 'Machinable')
            self.Machinable = Machinable_
        elif nodeName_ == 'ProcessingCategory':
            ProcessingCategory_ = child_.text
            ProcessingCategory_ = self.gds_validate_string(ProcessingCategory_, node, 'ProcessingCategory')
            self.ProcessingCategory = ProcessingCategory_
        elif nodeName_ == 'PriceOptions':
            PriceOptions_ = child_.text
            PriceOptions_ = self.gds_validate_string(PriceOptions_, node, 'PriceOptions')
            self.PriceOptions = PriceOptions_
        elif nodeName_ == 'InsuredAmount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InsuredAmount')
            self.InsuredAmount = ival_
        elif nodeName_ == 'AddressServiceRequested':
            AddressServiceRequested_ = child_.text
            AddressServiceRequested_ = self.gds_validate_string(AddressServiceRequested_, node, 'AddressServiceRequested')
            self.AddressServiceRequested = AddressServiceRequested_
        elif nodeName_ == 'ExpressMailOptions':
            obj_ = ExpressMailOptionsType.factory()
            obj_.build(child_)
            self.ExpressMailOptions = obj_
            obj_.original_tagname_ = 'ExpressMailOptions'
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'CustomerRefNo':
            CustomerRefNo_ = child_.text
            CustomerRefNo_ = self.gds_validate_string(CustomerRefNo_, node, 'CustomerRefNo')
            self.CustomerRefNo = CustomerRefNo_
        elif nodeName_ == 'ExtraServices':
            obj_ = ExtraServicesType.factory()
            obj_.build(child_)
            self.ExtraServices = obj_
            obj_.original_tagname_ = 'ExtraServices'
        elif nodeName_ == 'HoldForPickup':
            HoldForPickup_ = child_.text
            HoldForPickup_ = self.gds_validate_string(HoldForPickup_, node, 'HoldForPickup')
            self.HoldForPickup = HoldForPickup_
        elif nodeName_ == 'OpenDistribute':
            OpenDistribute_ = child_.text
            OpenDistribute_ = self.gds_validate_string(OpenDistribute_, node, 'OpenDistribute')
            self.OpenDistribute = OpenDistribute_
        elif nodeName_ == 'PermitNumber':
            PermitNumber_ = child_.text
            PermitNumber_ = self.gds_validate_string(PermitNumber_, node, 'PermitNumber')
            self.PermitNumber = PermitNumber_
        elif nodeName_ == 'PermitZIPCode':
            PermitZIPCode_ = child_.text
            PermitZIPCode_ = self.gds_validate_string(PermitZIPCode_, node, 'PermitZIPCode')
            self.PermitZIPCode = PermitZIPCode_
        elif nodeName_ == 'PermitHolderName':
            PermitHolderName_ = child_.text
            PermitHolderName_ = self.gds_validate_string(PermitHolderName_, node, 'PermitHolderName')
            self.PermitHolderName = PermitHolderName_
        elif nodeName_ == 'CRID':
            CRID_ = child_.text
            CRID_ = self.gds_validate_string(CRID_, node, 'CRID')
            self.CRID = CRID_
        elif nodeName_ == 'SenderName':
            SenderName_ = child_.text
            SenderName_ = self.gds_validate_string(SenderName_, node, 'SenderName')
            self.SenderName = SenderName_
        elif nodeName_ == 'SenderEMail':
            SenderEMail_ = child_.text
            SenderEMail_ = self.gds_validate_string(SenderEMail_, node, 'SenderEMail')
            self.SenderEMail = SenderEMail_
        elif nodeName_ == 'RecipientName':
            RecipientName_ = child_.text
            RecipientName_ = self.gds_validate_string(RecipientName_, node, 'RecipientName')
            self.RecipientName = RecipientName_
        elif nodeName_ == 'RecipientEMail':
            RecipientEMail_ = child_.text
            RecipientEMail_ = self.gds_validate_string(RecipientEMail_, node, 'RecipientEMail')
            self.RecipientEMail = RecipientEMail_
        elif nodeName_ == 'ReceiptOption':
            ReceiptOption_ = child_.text
            ReceiptOption_ = self.gds_validate_string(ReceiptOption_, node, 'ReceiptOption')
            self.ReceiptOption = ReceiptOption_
        elif nodeName_ == 'ImageType':
            ImageType_ = child_.text
            ImageType_ = self.gds_validate_string(ImageType_, node, 'ImageType')
            self.ImageType = ImageType_
        elif nodeName_ == 'HoldForManifest':
            HoldForManifest_ = child_.text
            HoldForManifest_ = self.gds_validate_string(HoldForManifest_, node, 'HoldForManifest')
            self.HoldForManifest = HoldForManifest_
        elif nodeName_ == 'NineDigitRoutingZip':
            NineDigitRoutingZip_ = child_.text
            NineDigitRoutingZip_ = self.gds_validate_string(NineDigitRoutingZip_, node, 'NineDigitRoutingZip')
            self.NineDigitRoutingZip = NineDigitRoutingZip_
        elif nodeName_ == 'ShipInfo':
            ShipInfo_ = child_.text
            ShipInfo_ = self.gds_validate_string(ShipInfo_, node, 'ShipInfo')
            self.ShipInfo = ShipInfo_
        elif nodeName_ == 'CarrierRelease':
            CarrierRelease_ = child_.text
            CarrierRelease_ = self.gds_validate_string(CarrierRelease_, node, 'CarrierRelease')
            self.CarrierRelease = CarrierRelease_
        elif nodeName_ == 'ReturnCommitments':
            ReturnCommitments_ = child_.text
            ReturnCommitments_ = self.gds_validate_string(ReturnCommitments_, node, 'ReturnCommitments')
            self.ReturnCommitments = ReturnCommitments_
        elif nodeName_ == 'PrintCustomerRefNo':
            PrintCustomerRefNo_ = child_.text
            PrintCustomerRefNo_ = self.gds_validate_string(PrintCustomerRefNo_, node, 'PrintCustomerRefNo')
            self.PrintCustomerRefNo = PrintCustomerRefNo_
        elif nodeName_ == 'Content':
            obj_ = ContentType.factory()
            obj_.build(child_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
        elif nodeName_ == 'ShippingContents':
            obj_ = ShippingContentsType.factory()
            obj_.build(child_)
            self.ShippingContents = obj_
            obj_.original_tagname_ = 'ShippingContents'
        elif nodeName_ == 'CustomsContentType':
            CustomsContentType_ = child_.text
            CustomsContentType_ = self.gds_validate_string(CustomsContentType_, node, 'CustomsContentType')
            self.CustomsContentType = CustomsContentType_
        elif nodeName_ == 'ContentComments':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ContentComments')
            self.ContentComments = ival_
        elif nodeName_ == 'RestrictionType':
            RestrictionType_ = child_.text
            RestrictionType_ = self.gds_validate_string(RestrictionType_, node, 'RestrictionType')
            self.RestrictionType = RestrictionType_
        elif nodeName_ == 'RestrictionComments':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RestrictionComments')
            self.RestrictionComments = ival_
        elif nodeName_ == 'AESITN':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AESITN')
            self.AESITN = ival_
        elif nodeName_ == 'ImportersReference':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ImportersReference')
            self.ImportersReference = ival_
        elif nodeName_ == 'ImportersContact':
            ImportersContact_ = child_.text
            ImportersContact_ = self.gds_validate_string(ImportersContact_, node, 'ImportersContact')
            self.ImportersContact = ImportersContact_
        elif nodeName_ == 'ExportersReference':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ExportersReference')
            self.ExportersReference = ival_
        elif nodeName_ == 'ExportersContact':
            ExportersContact_ = child_.text
            ExportersContact_ = self.gds_validate_string(ExportersContact_, node, 'ExportersContact')
            self.ExportersContact = ExportersContact_
        elif nodeName_ == 'InvoiceNumber':
            InvoiceNumber_ = child_.text
            InvoiceNumber_ = self.gds_validate_string(InvoiceNumber_, node, 'InvoiceNumber')
            self.InvoiceNumber = InvoiceNumber_
        elif nodeName_ == 'LicenseNumber':
            LicenseNumber_ = child_.text
            LicenseNumber_ = self.gds_validate_string(LicenseNumber_, node, 'LicenseNumber')
            self.LicenseNumber = LicenseNumber_
        elif nodeName_ == 'CertificateNumber':
            CertificateNumber_ = child_.text
            CertificateNumber_ = self.gds_validate_string(CertificateNumber_, node, 'CertificateNumber')
            self.CertificateNumber = CertificateNumber_
# end class eVSCertifyRequest


class ImageParametersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LabelSequence=None):
        self.original_tagname_ = None
        self.LabelSequence = LabelSequence
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageParametersType.subclass:
            return ImageParametersType.subclass(*args_, **kwargs_)
        else:
            return ImageParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LabelSequence(self): return self.LabelSequence
    def set_LabelSequence(self, LabelSequence): self.LabelSequence = LabelSequence
    def hasContent_(self):
        if (
            self.LabelSequence is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ImageParametersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImageParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ImageParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ImageParametersType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ImageParametersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelSequence is not None:
            self.LabelSequence.export(outfile, level, namespace_, name_='LabelSequence', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LabelSequence':
            obj_ = LabelSequenceType.factory()
            obj_.build(child_)
            self.LabelSequence = obj_
            obj_.original_tagname_ = 'LabelSequence'
# end class ImageParametersType


class LabelSequenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageNumber=None, TotalPackages=None):
        self.original_tagname_ = None
        self.PackageNumber = PackageNumber
        self.TotalPackages = TotalPackages
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelSequenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelSequenceType.subclass:
            return LabelSequenceType.subclass(*args_, **kwargs_)
        else:
            return LabelSequenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageNumber(self): return self.PackageNumber
    def set_PackageNumber(self, PackageNumber): self.PackageNumber = PackageNumber
    def get_TotalPackages(self): return self.TotalPackages
    def set_TotalPackages(self, TotalPackages): self.TotalPackages = TotalPackages
    def hasContent_(self):
        if (
            self.PackageNumber is not None or
            self.TotalPackages is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LabelSequenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelSequenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LabelSequenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LabelSequenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LabelSequenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LabelSequenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackageNumber>%s</PackageNumber>%s' % (self.gds_format_integer(self.PackageNumber, input_name='PackageNumber'), eol_))
        if self.TotalPackages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TotalPackages>%s</TotalPackages>%s' % (self.gds_format_integer(self.TotalPackages, input_name='TotalPackages'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'PackageNumber')
            self.PackageNumber = ival_
        elif nodeName_ == 'TotalPackages':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPackages')
            self.TotalPackages = ival_
# end class LabelSequenceType


class ExpressMailOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DeliveryOption=None, WaiverOfSignature=None):
        self.original_tagname_ = None
        self.DeliveryOption = DeliveryOption
        self.WaiverOfSignature = WaiverOfSignature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressMailOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressMailOptionsType.subclass:
            return ExpressMailOptionsType.subclass(*args_, **kwargs_)
        else:
            return ExpressMailOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DeliveryOption(self): return self.DeliveryOption
    def set_DeliveryOption(self, DeliveryOption): self.DeliveryOption = DeliveryOption
    def get_WaiverOfSignature(self): return self.WaiverOfSignature
    def set_WaiverOfSignature(self, WaiverOfSignature): self.WaiverOfSignature = WaiverOfSignature
    def hasContent_(self):
        if (
            self.DeliveryOption is not None or
            self.WaiverOfSignature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExpressMailOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressMailOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpressMailOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExpressMailOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExpressMailOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExpressMailOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryOption is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DeliveryOption>%s</DeliveryOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryOption), input_name='DeliveryOption')), eol_))
        if self.WaiverOfSignature is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WaiverOfSignature>%s</WaiverOfSignature>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WaiverOfSignature), input_name='WaiverOfSignature')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DeliveryOption':
            DeliveryOption_ = child_.text
            DeliveryOption_ = self.gds_validate_string(DeliveryOption_, node, 'DeliveryOption')
            self.DeliveryOption = DeliveryOption_
        elif nodeName_ == 'WaiverOfSignature':
            WaiverOfSignature_ = child_.text
            WaiverOfSignature_ = self.gds_validate_string(WaiverOfSignature_, node, 'WaiverOfSignature')
            self.WaiverOfSignature = WaiverOfSignature_
# end class ExpressMailOptionsType


class ExtraServicesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExtraService=None):
        self.original_tagname_ = None
        self.ExtraService = ExtraService
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraServicesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraServicesType.subclass:
            return ExtraServicesType.subclass(*args_, **kwargs_)
        else:
            return ExtraServicesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExtraService(self): return self.ExtraService
    def set_ExtraService(self, ExtraService): self.ExtraService = ExtraService
    def hasContent_(self):
        if (
            self.ExtraService is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExtraServicesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraServicesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExtraServicesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExtraServicesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExtraServicesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExtraServicesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExtraService is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExtraService>%s</ExtraService>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExtraService), input_name='ExtraService')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExtraService':
            ExtraService_ = child_.text
            ExtraService_ = self.gds_validate_string(ExtraService_, node, 'ExtraService')
            self.ExtraService = ExtraService_
# end class ExtraServicesType


class ContentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContentType_member=None, ContentDescription=None):
        self.original_tagname_ = None
        self.ContentType = ContentType_member
        self.ContentDescription = ContentDescription
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType.subclass:
            return ContentType.subclass(*args_, **kwargs_)
        else:
            return ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContentType(self): return self.ContentType
    def set_ContentType(self, ContentType): self.ContentType = ContentType
    def get_ContentDescription(self): return self.ContentDescription
    def set_ContentDescription(self, ContentDescription): self.ContentDescription = ContentDescription
    def hasContent_(self):
        if (
            self.ContentType is not None or
            self.ContentDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContentType>%s</ContentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContentType), input_name='ContentType')), eol_))
        if self.ContentDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContentDescription>%s</ContentDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContentDescription), input_name='ContentDescription')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContentType':
            ContentType_ = child_.text
            ContentType_ = self.gds_validate_string(ContentType_, node, 'ContentType')
            self.ContentType = ContentType_
        elif nodeName_ == 'ContentDescription':
            ContentDescription_ = child_.text
            ContentDescription_ = self.gds_validate_string(ContentDescription_, node, 'ContentDescription')
            self.ContentDescription = ContentDescription_
# end class ContentType


class ShippingContentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDetail=None):
        self.original_tagname_ = None
        if ItemDetail is None:
            self.ItemDetail = []
        else:
            self.ItemDetail = ItemDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingContentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingContentsType.subclass:
            return ShippingContentsType.subclass(*args_, **kwargs_)
        else:
            return ShippingContentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDetail(self): return self.ItemDetail
    def set_ItemDetail(self, ItemDetail): self.ItemDetail = ItemDetail
    def add_ItemDetail(self, value): self.ItemDetail.append(value)
    def insert_ItemDetail_at(self, index, value): self.ItemDetail.insert(index, value)
    def replace_ItemDetail_at(self, index, value): self.ItemDetail[index] = value
    def hasContent_(self):
        if (
            self.ItemDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShippingContentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingContentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingContentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShippingContentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShippingContentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShippingContentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemDetail_ in self.ItemDetail:
            ItemDetail_.export(outfile, level, namespace_, name_='ItemDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDetail':
            obj_ = ItemDetailType.factory()
            obj_.build(child_)
            self.ItemDetail.append(obj_)
            obj_.original_tagname_ = 'ItemDetail'
# end class ShippingContentsType


class ItemDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, Quantity=None, Value=None, NetPounds=None, NetOunces=None, HSTariffNumber=None, CountryOfOrigin=None):
        self.original_tagname_ = None
        self.Description = Description
        self.Quantity = Quantity
        self.Value = Value
        self.NetPounds = NetPounds
        self.NetOunces = NetOunces
        self.HSTariffNumber = HSTariffNumber
        self.CountryOfOrigin = CountryOfOrigin
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemDetailType.subclass:
            return ItemDetailType.subclass(*args_, **kwargs_)
        else:
            return ItemDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_NetPounds(self): return self.NetPounds
    def set_NetPounds(self, NetPounds): self.NetPounds = NetPounds
    def get_NetOunces(self): return self.NetOunces
    def set_NetOunces(self, NetOunces): self.NetOunces = NetOunces
    def get_HSTariffNumber(self): return self.HSTariffNumber
    def set_HSTariffNumber(self, HSTariffNumber): self.HSTariffNumber = HSTariffNumber
    def get_CountryOfOrigin(self): return self.CountryOfOrigin
    def set_CountryOfOrigin(self, CountryOfOrigin): self.CountryOfOrigin = CountryOfOrigin
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Quantity is not None or
            self.Value is not None or
            self.NetPounds is not None or
            self.NetOunces is not None or
            self.HSTariffNumber is not None or
            self.CountryOfOrigin is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemDetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ItemDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Quantity>%s</Quantity>%s' % (self.gds_format_integer(self.Quantity, input_name='Quantity'), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Value>%s</Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.NetPounds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NetPounds>%s</NetPounds>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NetPounds), input_name='NetPounds')), eol_))
        if self.NetOunces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NetOunces>%s</NetOunces>%s' % (self.gds_format_integer(self.NetOunces, input_name='NetOunces'), eol_))
        if self.HSTariffNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HSTariffNumber>%s</HSTariffNumber>%s' % (self.gds_format_integer(self.HSTariffNumber, input_name='HSTariffNumber'), eol_))
        if self.CountryOfOrigin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryOfOrigin>%s</CountryOfOrigin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryOfOrigin), input_name='CountryOfOrigin')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Quantity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Quantity')
            self.Quantity = ival_
        elif nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'NetPounds':
            NetPounds_ = child_.text
            NetPounds_ = self.gds_validate_string(NetPounds_, node, 'NetPounds')
            self.NetPounds = NetPounds_
        elif nodeName_ == 'NetOunces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NetOunces')
            self.NetOunces = ival_
        elif nodeName_ == 'HSTariffNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'HSTariffNumber')
            self.HSTariffNumber = ival_
        elif nodeName_ == 'CountryOfOrigin':
            CountryOfOrigin_ = child_.text
            CountryOfOrigin_ = self.gds_validate_string(CountryOfOrigin_, node, 'CountryOfOrigin')
            self.CountryOfOrigin = CountryOfOrigin_
# end class ItemDetailType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSCertifyRequest'
        rootClass = eVSCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSCertifyRequest'
        rootClass = eVSCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSCertifyRequest'
        rootClass = eVSCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSCertifyRequest'
        rootClass = eVSCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from eVSCertifyRequest.xsd import *\n\n')
        sys.stdout.write('import eVSCertifyRequest.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ContentType",
    "ExpressMailOptionsType",
    "ExtraServicesType",
    "ImageParametersType",
    "ItemDetailType",
    "LabelSequenceType",
    "ShippingContentsType",
    "eVSCertifyRequest"
]
