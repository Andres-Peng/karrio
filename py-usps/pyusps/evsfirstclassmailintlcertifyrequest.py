#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Dec 13 17:56:16 2018 by generateDS.py version 2.29.5.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('-o', '../python/eVSFirstClassMailIntlCertifyRequest.xsd.py')
#
# Command line arguments:
#   eVSFirstClassMailIntlCertifyRequest.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS -o "../python/eVSFirstClassMailIntlCertifyRequest.xsd.py" eVSFirstClassMailIntlCertifyRequest.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class eVSFirstClassMailIntlCertifyRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, USERID=None, PASSWORD=None, Option=None, Revision=None, ImageParameters=None, FromFirstName=None, FromMiddleInitial=None, FromLastName=None, FromFirm=None, FromAddress1=None, FromAddress2=None, FromCity=None, FromState=None, FromZip5=None, FromZip4=None, FromPhone=None, ToName=None, ToFirstName=None, ToLastName=None, ToFirm=None, ToAddress1=None, ToAddress2=None, ToAddress3=None, ToCity=None, ToProvince=None, ToCountry=None, ToPostalCode=None, ToPOBoxFlag=None, ToPhone=None, ToFax=None, ToEmail=None, FirstClassMailType=None, ShippingContents=None, GrossPounds=None, GrossOunces=None, ContentType=None, Agreement=None, Comments=None, ImageType=None, LabelDate=None, HoldForManifest=None, Container=None, Size=None, Length=None, Width=None, Height=None, Girth=None, ExtraServices=None, PriceOptions=None, DestinationRateIndicator=None):
        self.original_tagname_ = None
        self.USERID = _cast(None, USERID)
        self.PASSWORD = _cast(None, PASSWORD)
        self.Option = Option
        self.Revision = Revision
        self.ImageParameters = ImageParameters
        self.FromFirstName = FromFirstName
        self.FromMiddleInitial = FromMiddleInitial
        self.FromLastName = FromLastName
        self.FromFirm = FromFirm
        self.FromAddress1 = FromAddress1
        self.FromAddress2 = FromAddress2
        self.FromCity = FromCity
        self.FromState = FromState
        self.FromZip5 = FromZip5
        self.FromZip4 = FromZip4
        self.FromPhone = FromPhone
        self.ToName = ToName
        self.ToFirstName = ToFirstName
        self.ToLastName = ToLastName
        self.ToFirm = ToFirm
        self.ToAddress1 = ToAddress1
        self.ToAddress2 = ToAddress2
        self.ToAddress3 = ToAddress3
        self.ToCity = ToCity
        self.ToProvince = ToProvince
        self.ToCountry = ToCountry
        self.ToPostalCode = ToPostalCode
        self.ToPOBoxFlag = ToPOBoxFlag
        self.ToPhone = ToPhone
        self.ToFax = ToFax
        self.ToEmail = ToEmail
        self.FirstClassMailType = FirstClassMailType
        self.ShippingContents = ShippingContents
        self.GrossPounds = GrossPounds
        self.GrossOunces = GrossOunces
        self.ContentType = ContentType
        self.Agreement = Agreement
        self.Comments = Comments
        self.ImageType = ImageType
        self.LabelDate = LabelDate
        self.HoldForManifest = HoldForManifest
        self.Container = Container
        self.Size = Size
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.Girth = Girth
        self.ExtraServices = ExtraServices
        self.PriceOptions = PriceOptions
        self.DestinationRateIndicator = DestinationRateIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, eVSFirstClassMailIntlCertifyRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if eVSFirstClassMailIntlCertifyRequest.subclass:
            return eVSFirstClassMailIntlCertifyRequest.subclass(*args_, **kwargs_)
        else:
            return eVSFirstClassMailIntlCertifyRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_Revision(self): return self.Revision
    def set_Revision(self, Revision): self.Revision = Revision
    def get_ImageParameters(self): return self.ImageParameters
    def set_ImageParameters(self, ImageParameters): self.ImageParameters = ImageParameters
    def get_FromFirstName(self): return self.FromFirstName
    def set_FromFirstName(self, FromFirstName): self.FromFirstName = FromFirstName
    def get_FromMiddleInitial(self): return self.FromMiddleInitial
    def set_FromMiddleInitial(self, FromMiddleInitial): self.FromMiddleInitial = FromMiddleInitial
    def get_FromLastName(self): return self.FromLastName
    def set_FromLastName(self, FromLastName): self.FromLastName = FromLastName
    def get_FromFirm(self): return self.FromFirm
    def set_FromFirm(self, FromFirm): self.FromFirm = FromFirm
    def get_FromAddress1(self): return self.FromAddress1
    def set_FromAddress1(self, FromAddress1): self.FromAddress1 = FromAddress1
    def get_FromAddress2(self): return self.FromAddress2
    def set_FromAddress2(self, FromAddress2): self.FromAddress2 = FromAddress2
    def get_FromCity(self): return self.FromCity
    def set_FromCity(self, FromCity): self.FromCity = FromCity
    def get_FromState(self): return self.FromState
    def set_FromState(self, FromState): self.FromState = FromState
    def get_FromZip5(self): return self.FromZip5
    def set_FromZip5(self, FromZip5): self.FromZip5 = FromZip5
    def get_FromZip4(self): return self.FromZip4
    def set_FromZip4(self, FromZip4): self.FromZip4 = FromZip4
    def get_FromPhone(self): return self.FromPhone
    def set_FromPhone(self, FromPhone): self.FromPhone = FromPhone
    def get_ToName(self): return self.ToName
    def set_ToName(self, ToName): self.ToName = ToName
    def get_ToFirstName(self): return self.ToFirstName
    def set_ToFirstName(self, ToFirstName): self.ToFirstName = ToFirstName
    def get_ToLastName(self): return self.ToLastName
    def set_ToLastName(self, ToLastName): self.ToLastName = ToLastName
    def get_ToFirm(self): return self.ToFirm
    def set_ToFirm(self, ToFirm): self.ToFirm = ToFirm
    def get_ToAddress1(self): return self.ToAddress1
    def set_ToAddress1(self, ToAddress1): self.ToAddress1 = ToAddress1
    def get_ToAddress2(self): return self.ToAddress2
    def set_ToAddress2(self, ToAddress2): self.ToAddress2 = ToAddress2
    def get_ToAddress3(self): return self.ToAddress3
    def set_ToAddress3(self, ToAddress3): self.ToAddress3 = ToAddress3
    def get_ToCity(self): return self.ToCity
    def set_ToCity(self, ToCity): self.ToCity = ToCity
    def get_ToProvince(self): return self.ToProvince
    def set_ToProvince(self, ToProvince): self.ToProvince = ToProvince
    def get_ToCountry(self): return self.ToCountry
    def set_ToCountry(self, ToCountry): self.ToCountry = ToCountry
    def get_ToPostalCode(self): return self.ToPostalCode
    def set_ToPostalCode(self, ToPostalCode): self.ToPostalCode = ToPostalCode
    def get_ToPOBoxFlag(self): return self.ToPOBoxFlag
    def set_ToPOBoxFlag(self, ToPOBoxFlag): self.ToPOBoxFlag = ToPOBoxFlag
    def get_ToPhone(self): return self.ToPhone
    def set_ToPhone(self, ToPhone): self.ToPhone = ToPhone
    def get_ToFax(self): return self.ToFax
    def set_ToFax(self, ToFax): self.ToFax = ToFax
    def get_ToEmail(self): return self.ToEmail
    def set_ToEmail(self, ToEmail): self.ToEmail = ToEmail
    def get_FirstClassMailType(self): return self.FirstClassMailType
    def set_FirstClassMailType(self, FirstClassMailType): self.FirstClassMailType = FirstClassMailType
    def get_ShippingContents(self): return self.ShippingContents
    def set_ShippingContents(self, ShippingContents): self.ShippingContents = ShippingContents
    def get_GrossPounds(self): return self.GrossPounds
    def set_GrossPounds(self, GrossPounds): self.GrossPounds = GrossPounds
    def get_GrossOunces(self): return self.GrossOunces
    def set_GrossOunces(self, GrossOunces): self.GrossOunces = GrossOunces
    def get_ContentType(self): return self.ContentType
    def set_ContentType(self, ContentType): self.ContentType = ContentType
    def get_Agreement(self): return self.Agreement
    def set_Agreement(self, Agreement): self.Agreement = Agreement
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_ImageType(self): return self.ImageType
    def set_ImageType(self, ImageType): self.ImageType = ImageType
    def get_LabelDate(self): return self.LabelDate
    def set_LabelDate(self, LabelDate): self.LabelDate = LabelDate
    def get_HoldForManifest(self): return self.HoldForManifest
    def set_HoldForManifest(self, HoldForManifest): self.HoldForManifest = HoldForManifest
    def get_Container(self): return self.Container
    def set_Container(self, Container): self.Container = Container
    def get_Size(self): return self.Size
    def set_Size(self, Size): self.Size = Size
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Girth(self): return self.Girth
    def set_Girth(self, Girth): self.Girth = Girth
    def get_ExtraServices(self): return self.ExtraServices
    def set_ExtraServices(self, ExtraServices): self.ExtraServices = ExtraServices
    def get_PriceOptions(self): return self.PriceOptions
    def set_PriceOptions(self, PriceOptions): self.PriceOptions = PriceOptions
    def get_DestinationRateIndicator(self): return self.DestinationRateIndicator
    def set_DestinationRateIndicator(self, DestinationRateIndicator): self.DestinationRateIndicator = DestinationRateIndicator
    def get_USERID(self): return self.USERID
    def set_USERID(self, USERID): self.USERID = USERID
    def get_PASSWORD(self): return self.PASSWORD
    def set_PASSWORD(self, PASSWORD): self.PASSWORD = PASSWORD
    def hasContent_(self):
        if (
            self.Option is not None or
            self.Revision is not None or
            self.ImageParameters is not None or
            self.FromFirstName is not None or
            self.FromMiddleInitial is not None or
            self.FromLastName is not None or
            self.FromFirm is not None or
            self.FromAddress1 is not None or
            self.FromAddress2 is not None or
            self.FromCity is not None or
            self.FromState is not None or
            self.FromZip5 is not None or
            self.FromZip4 is not None or
            self.FromPhone is not None or
            self.ToName is not None or
            self.ToFirstName is not None or
            self.ToLastName is not None or
            self.ToFirm is not None or
            self.ToAddress1 is not None or
            self.ToAddress2 is not None or
            self.ToAddress3 is not None or
            self.ToCity is not None or
            self.ToProvince is not None or
            self.ToCountry is not None or
            self.ToPostalCode is not None or
            self.ToPOBoxFlag is not None or
            self.ToPhone is not None or
            self.ToFax is not None or
            self.ToEmail is not None or
            self.FirstClassMailType is not None or
            self.ShippingContents is not None or
            self.GrossPounds is not None or
            self.GrossOunces is not None or
            self.ContentType is not None or
            self.Agreement is not None or
            self.Comments is not None or
            self.ImageType is not None or
            self.LabelDate is not None or
            self.HoldForManifest is not None or
            self.Container is not None or
            self.Size is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Girth is not None or
            self.ExtraServices is not None or
            self.PriceOptions is not None or
            self.DestinationRateIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='eVSFirstClassMailIntlCertifyRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('eVSFirstClassMailIntlCertifyRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='eVSFirstClassMailIntlCertifyRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='eVSFirstClassMailIntlCertifyRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='eVSFirstClassMailIntlCertifyRequest'):
        if self.USERID is not None and 'USERID' not in already_processed:
            already_processed.add('USERID')
            outfile.write(' USERID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.USERID), input_name='USERID')), ))
        if self.PASSWORD is not None and 'PASSWORD' not in already_processed:
            already_processed.add('PASSWORD')
            outfile.write(' PASSWORD=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PASSWORD), input_name='PASSWORD')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='eVSFirstClassMailIntlCertifyRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Option>%s</Option>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), eol_))
        if self.Revision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Revision>%s</Revision>%s' % (self.gds_format_integer(self.Revision, input_name='Revision'), eol_))
        if self.ImageParameters is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ImageParameters>%s</ImageParameters>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageParameters), input_name='ImageParameters')), eol_))
        if self.FromFirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromFirstName>%s</FromFirstName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromFirstName), input_name='FromFirstName')), eol_))
        if self.FromMiddleInitial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromMiddleInitial>%s</FromMiddleInitial>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromMiddleInitial), input_name='FromMiddleInitial')), eol_))
        if self.FromLastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromLastName>%s</FromLastName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromLastName), input_name='FromLastName')), eol_))
        if self.FromFirm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromFirm>%s</FromFirm>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromFirm), input_name='FromFirm')), eol_))
        if self.FromAddress1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromAddress1>%s</FromAddress1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromAddress1), input_name='FromAddress1')), eol_))
        if self.FromAddress2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromAddress2>%s</FromAddress2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromAddress2), input_name='FromAddress2')), eol_))
        if self.FromCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromCity>%s</FromCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromCity), input_name='FromCity')), eol_))
        if self.FromState is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromState>%s</FromState>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromState), input_name='FromState')), eol_))
        if self.FromZip5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromZip5>%s</FromZip5>%s' % (self.gds_format_integer(self.FromZip5, input_name='FromZip5'), eol_))
        if self.FromZip4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromZip4>%s</FromZip4>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromZip4), input_name='FromZip4')), eol_))
        if self.FromPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromPhone>%s</FromPhone>%s' % (self.gds_format_integer(self.FromPhone, input_name='FromPhone'), eol_))
        if self.ToName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToName>%s</ToName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToName), input_name='ToName')), eol_))
        if self.ToFirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToFirstName>%s</ToFirstName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToFirstName), input_name='ToFirstName')), eol_))
        if self.ToLastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToLastName>%s</ToLastName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToLastName), input_name='ToLastName')), eol_))
        if self.ToFirm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToFirm>%s</ToFirm>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToFirm), input_name='ToFirm')), eol_))
        if self.ToAddress1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToAddress1>%s</ToAddress1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToAddress1), input_name='ToAddress1')), eol_))
        if self.ToAddress2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToAddress2>%s</ToAddress2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToAddress2), input_name='ToAddress2')), eol_))
        if self.ToAddress3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToAddress3>%s</ToAddress3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToAddress3), input_name='ToAddress3')), eol_))
        if self.ToCity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToCity>%s</ToCity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToCity), input_name='ToCity')), eol_))
        if self.ToProvince is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToProvince>%s</ToProvince>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToProvince), input_name='ToProvince')), eol_))
        if self.ToCountry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToCountry>%s</ToCountry>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToCountry), input_name='ToCountry')), eol_))
        if self.ToPostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToPostalCode>%s</ToPostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToPostalCode), input_name='ToPostalCode')), eol_))
        if self.ToPOBoxFlag is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToPOBoxFlag>%s</ToPOBoxFlag>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToPOBoxFlag), input_name='ToPOBoxFlag')), eol_))
        if self.ToPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToPhone>%s</ToPhone>%s' % (self.gds_format_integer(self.ToPhone, input_name='ToPhone'), eol_))
        if self.ToFax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToFax>%s</ToFax>%s' % (self.gds_format_integer(self.ToFax, input_name='ToFax'), eol_))
        if self.ToEmail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ToEmail>%s</ToEmail>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ToEmail), input_name='ToEmail')), eol_))
        if self.FirstClassMailType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FirstClassMailType>%s</FirstClassMailType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FirstClassMailType), input_name='FirstClassMailType')), eol_))
        if self.ShippingContents is not None:
            self.ShippingContents.export(outfile, level, namespace_, name_='ShippingContents', pretty_print=pretty_print)
        if self.GrossPounds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GrossPounds>%s</GrossPounds>%s' % (self.gds_format_integer(self.GrossPounds, input_name='GrossPounds'), eol_))
        if self.GrossOunces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GrossOunces>%s</GrossOunces>%s' % (self.gds_format_integer(self.GrossOunces, input_name='GrossOunces'), eol_))
        if self.ContentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContentType>%s</ContentType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContentType), input_name='ContentType')), eol_))
        if self.Agreement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Agreement>%s</Agreement>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Agreement), input_name='Agreement')), eol_))
        if self.Comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Comments>%s</Comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), eol_))
        if self.ImageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ImageType>%s</ImageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), eol_))
        if self.LabelDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LabelDate>%s</LabelDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelDate), input_name='LabelDate')), eol_))
        if self.HoldForManifest is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HoldForManifest>%s</HoldForManifest>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldForManifest), input_name='HoldForManifest')), eol_))
        if self.Container is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Container>%s</Container>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Container), input_name='Container')), eol_))
        if self.Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Size>%s</Size>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Size), input_name='Size')), eol_))
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Length>%s</Length>%s' % (self.gds_format_float(self.Length, input_name='Length'), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Width>%s</Width>%s' % (self.gds_format_float(self.Width, input_name='Width'), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Height>%s</Height>%s' % (self.gds_format_float(self.Height, input_name='Height'), eol_))
        if self.Girth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Girth>%s</Girth>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Girth), input_name='Girth')), eol_))
        if self.ExtraServices is not None:
            self.ExtraServices.export(outfile, level, namespace_, name_='ExtraServices', pretty_print=pretty_print)
        if self.PriceOptions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PriceOptions>%s</PriceOptions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PriceOptions), input_name='PriceOptions')), eol_))
        if self.DestinationRateIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DestinationRateIndicator>%s</DestinationRateIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationRateIndicator), input_name='DestinationRateIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('USERID', node)
        if value is not None and 'USERID' not in already_processed:
            already_processed.add('USERID')
            self.USERID = value
        value = find_attr_value_('PASSWORD', node)
        if value is not None and 'PASSWORD' not in already_processed:
            already_processed.add('PASSWORD')
            self.PASSWORD = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            Option_ = child_.text
            Option_ = self.gds_validate_string(Option_, node, 'Option')
            self.Option = Option_
        elif nodeName_ == 'Revision':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Revision')
            self.Revision = ival_
        elif nodeName_ == 'ImageParameters':
            ImageParameters_ = child_.text
            ImageParameters_ = self.gds_validate_string(ImageParameters_, node, 'ImageParameters')
            self.ImageParameters = ImageParameters_
        elif nodeName_ == 'FromFirstName':
            FromFirstName_ = child_.text
            FromFirstName_ = self.gds_validate_string(FromFirstName_, node, 'FromFirstName')
            self.FromFirstName = FromFirstName_
        elif nodeName_ == 'FromMiddleInitial':
            FromMiddleInitial_ = child_.text
            FromMiddleInitial_ = self.gds_validate_string(FromMiddleInitial_, node, 'FromMiddleInitial')
            self.FromMiddleInitial = FromMiddleInitial_
        elif nodeName_ == 'FromLastName':
            FromLastName_ = child_.text
            FromLastName_ = self.gds_validate_string(FromLastName_, node, 'FromLastName')
            self.FromLastName = FromLastName_
        elif nodeName_ == 'FromFirm':
            FromFirm_ = child_.text
            FromFirm_ = self.gds_validate_string(FromFirm_, node, 'FromFirm')
            self.FromFirm = FromFirm_
        elif nodeName_ == 'FromAddress1':
            FromAddress1_ = child_.text
            FromAddress1_ = self.gds_validate_string(FromAddress1_, node, 'FromAddress1')
            self.FromAddress1 = FromAddress1_
        elif nodeName_ == 'FromAddress2':
            FromAddress2_ = child_.text
            FromAddress2_ = self.gds_validate_string(FromAddress2_, node, 'FromAddress2')
            self.FromAddress2 = FromAddress2_
        elif nodeName_ == 'FromCity':
            FromCity_ = child_.text
            FromCity_ = self.gds_validate_string(FromCity_, node, 'FromCity')
            self.FromCity = FromCity_
        elif nodeName_ == 'FromState':
            FromState_ = child_.text
            FromState_ = self.gds_validate_string(FromState_, node, 'FromState')
            self.FromState = FromState_
        elif nodeName_ == 'FromZip5':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FromZip5')
            self.FromZip5 = ival_
        elif nodeName_ == 'FromZip4':
            FromZip4_ = child_.text
            FromZip4_ = self.gds_validate_string(FromZip4_, node, 'FromZip4')
            self.FromZip4 = FromZip4_
        elif nodeName_ == 'FromPhone':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FromPhone')
            self.FromPhone = ival_
        elif nodeName_ == 'ToName':
            ToName_ = child_.text
            ToName_ = self.gds_validate_string(ToName_, node, 'ToName')
            self.ToName = ToName_
        elif nodeName_ == 'ToFirstName':
            ToFirstName_ = child_.text
            ToFirstName_ = self.gds_validate_string(ToFirstName_, node, 'ToFirstName')
            self.ToFirstName = ToFirstName_
        elif nodeName_ == 'ToLastName':
            ToLastName_ = child_.text
            ToLastName_ = self.gds_validate_string(ToLastName_, node, 'ToLastName')
            self.ToLastName = ToLastName_
        elif nodeName_ == 'ToFirm':
            ToFirm_ = child_.text
            ToFirm_ = self.gds_validate_string(ToFirm_, node, 'ToFirm')
            self.ToFirm = ToFirm_
        elif nodeName_ == 'ToAddress1':
            ToAddress1_ = child_.text
            ToAddress1_ = self.gds_validate_string(ToAddress1_, node, 'ToAddress1')
            self.ToAddress1 = ToAddress1_
        elif nodeName_ == 'ToAddress2':
            ToAddress2_ = child_.text
            ToAddress2_ = self.gds_validate_string(ToAddress2_, node, 'ToAddress2')
            self.ToAddress2 = ToAddress2_
        elif nodeName_ == 'ToAddress3':
            ToAddress3_ = child_.text
            ToAddress3_ = self.gds_validate_string(ToAddress3_, node, 'ToAddress3')
            self.ToAddress3 = ToAddress3_
        elif nodeName_ == 'ToCity':
            ToCity_ = child_.text
            ToCity_ = self.gds_validate_string(ToCity_, node, 'ToCity')
            self.ToCity = ToCity_
        elif nodeName_ == 'ToProvince':
            ToProvince_ = child_.text
            ToProvince_ = self.gds_validate_string(ToProvince_, node, 'ToProvince')
            self.ToProvince = ToProvince_
        elif nodeName_ == 'ToCountry':
            ToCountry_ = child_.text
            ToCountry_ = self.gds_validate_string(ToCountry_, node, 'ToCountry')
            self.ToCountry = ToCountry_
        elif nodeName_ == 'ToPostalCode':
            ToPostalCode_ = child_.text
            ToPostalCode_ = self.gds_validate_string(ToPostalCode_, node, 'ToPostalCode')
            self.ToPostalCode = ToPostalCode_
        elif nodeName_ == 'ToPOBoxFlag':
            ToPOBoxFlag_ = child_.text
            ToPOBoxFlag_ = self.gds_validate_string(ToPOBoxFlag_, node, 'ToPOBoxFlag')
            self.ToPOBoxFlag = ToPOBoxFlag_
        elif nodeName_ == 'ToPhone':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ToPhone')
            self.ToPhone = ival_
        elif nodeName_ == 'ToFax':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ToFax')
            self.ToFax = ival_
        elif nodeName_ == 'ToEmail':
            ToEmail_ = child_.text
            ToEmail_ = self.gds_validate_string(ToEmail_, node, 'ToEmail')
            self.ToEmail = ToEmail_
        elif nodeName_ == 'FirstClassMailType':
            FirstClassMailType_ = child_.text
            FirstClassMailType_ = self.gds_validate_string(FirstClassMailType_, node, 'FirstClassMailType')
            self.FirstClassMailType = FirstClassMailType_
        elif nodeName_ == 'ShippingContents':
            obj_ = ShippingContentsType.factory()
            obj_.build(child_)
            self.ShippingContents = obj_
            obj_.original_tagname_ = 'ShippingContents'
        elif nodeName_ == 'GrossPounds':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'GrossPounds')
            self.GrossPounds = ival_
        elif nodeName_ == 'GrossOunces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'GrossOunces')
            self.GrossOunces = ival_
        elif nodeName_ == 'ContentType':
            ContentType_ = child_.text
            ContentType_ = self.gds_validate_string(ContentType_, node, 'ContentType')
            self.ContentType = ContentType_
        elif nodeName_ == 'Agreement':
            Agreement_ = child_.text
            Agreement_ = self.gds_validate_string(Agreement_, node, 'Agreement')
            self.Agreement = Agreement_
        elif nodeName_ == 'Comments':
            Comments_ = child_.text
            Comments_ = self.gds_validate_string(Comments_, node, 'Comments')
            self.Comments = Comments_
        elif nodeName_ == 'ImageType':
            ImageType_ = child_.text
            ImageType_ = self.gds_validate_string(ImageType_, node, 'ImageType')
            self.ImageType = ImageType_
        elif nodeName_ == 'LabelDate':
            LabelDate_ = child_.text
            LabelDate_ = self.gds_validate_string(LabelDate_, node, 'LabelDate')
            self.LabelDate = LabelDate_
        elif nodeName_ == 'HoldForManifest':
            HoldForManifest_ = child_.text
            HoldForManifest_ = self.gds_validate_string(HoldForManifest_, node, 'HoldForManifest')
            self.HoldForManifest = HoldForManifest_
        elif nodeName_ == 'Container':
            Container_ = child_.text
            Container_ = self.gds_validate_string(Container_, node, 'Container')
            self.Container = Container_
        elif nodeName_ == 'Size':
            Size_ = child_.text
            Size_ = self.gds_validate_string(Size_, node, 'Size')
            self.Size = Size_
        elif nodeName_ == 'Length':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Length')
            self.Length = fval_
        elif nodeName_ == 'Width':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Width')
            self.Width = fval_
        elif nodeName_ == 'Height':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Height')
            self.Height = fval_
        elif nodeName_ == 'Girth':
            Girth_ = child_.text
            Girth_ = self.gds_validate_string(Girth_, node, 'Girth')
            self.Girth = Girth_
        elif nodeName_ == 'ExtraServices':
            obj_ = ExtraServicesType.factory()
            obj_.build(child_)
            self.ExtraServices = obj_
            obj_.original_tagname_ = 'ExtraServices'
        elif nodeName_ == 'PriceOptions':
            PriceOptions_ = child_.text
            PriceOptions_ = self.gds_validate_string(PriceOptions_, node, 'PriceOptions')
            self.PriceOptions = PriceOptions_
        elif nodeName_ == 'DestinationRateIndicator':
            DestinationRateIndicator_ = child_.text
            DestinationRateIndicator_ = self.gds_validate_string(DestinationRateIndicator_, node, 'DestinationRateIndicator')
            self.DestinationRateIndicator = DestinationRateIndicator_
# end class eVSFirstClassMailIntlCertifyRequest


class ShippingContentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDetail=None):
        self.original_tagname_ = None
        self.ItemDetail = ItemDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingContentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingContentsType.subclass:
            return ShippingContentsType.subclass(*args_, **kwargs_)
        else:
            return ShippingContentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDetail(self): return self.ItemDetail
    def set_ItemDetail(self, ItemDetail): self.ItemDetail = ItemDetail
    def hasContent_(self):
        if (
            self.ItemDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShippingContentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingContentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingContentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShippingContentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShippingContentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShippingContentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDetail is not None:
            self.ItemDetail.export(outfile, level, namespace_, name_='ItemDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDetail':
            obj_ = ItemDetailType.factory()
            obj_.build(child_)
            self.ItemDetail = obj_
            obj_.original_tagname_ = 'ItemDetail'
# end class ShippingContentsType


class ItemDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, Quantity=None, Value=None, NetPounds=None, NetOunces=None, HSTariffNumber=None, CountryOfOrigin=None):
        self.original_tagname_ = None
        self.Description = Description
        self.Quantity = Quantity
        self.Value = Value
        self.NetPounds = NetPounds
        self.NetOunces = NetOunces
        self.HSTariffNumber = HSTariffNumber
        self.CountryOfOrigin = CountryOfOrigin
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemDetailType.subclass:
            return ItemDetailType.subclass(*args_, **kwargs_)
        else:
            return ItemDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_NetPounds(self): return self.NetPounds
    def set_NetPounds(self, NetPounds): self.NetPounds = NetPounds
    def get_NetOunces(self): return self.NetOunces
    def set_NetOunces(self, NetOunces): self.NetOunces = NetOunces
    def get_HSTariffNumber(self): return self.HSTariffNumber
    def set_HSTariffNumber(self, HSTariffNumber): self.HSTariffNumber = HSTariffNumber
    def get_CountryOfOrigin(self): return self.CountryOfOrigin
    def set_CountryOfOrigin(self, CountryOfOrigin): self.CountryOfOrigin = CountryOfOrigin
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Quantity is not None or
            self.Value is not None or
            self.NetPounds is not None or
            self.NetOunces is not None or
            self.HSTariffNumber is not None or
            self.CountryOfOrigin is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemDetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ItemDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Quantity>%s</Quantity>%s' % (self.gds_format_integer(self.Quantity, input_name='Quantity'), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Value>%s</Value>%s' % (self.gds_format_float(self.Value, input_name='Value'), eol_))
        if self.NetPounds is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NetPounds>%s</NetPounds>%s' % (self.gds_format_integer(self.NetPounds, input_name='NetPounds'), eol_))
        if self.NetOunces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NetOunces>%s</NetOunces>%s' % (self.gds_format_integer(self.NetOunces, input_name='NetOunces'), eol_))
        if self.HSTariffNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HSTariffNumber>%s</HSTariffNumber>%s' % (self.gds_format_integer(self.HSTariffNumber, input_name='HSTariffNumber'), eol_))
        if self.CountryOfOrigin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryOfOrigin>%s</CountryOfOrigin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryOfOrigin), input_name='CountryOfOrigin')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Quantity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Quantity')
            self.Quantity = ival_
        elif nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'NetPounds':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NetPounds')
            self.NetPounds = ival_
        elif nodeName_ == 'NetOunces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NetOunces')
            self.NetOunces = ival_
        elif nodeName_ == 'HSTariffNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'HSTariffNumber')
            self.HSTariffNumber = ival_
        elif nodeName_ == 'CountryOfOrigin':
            CountryOfOrigin_ = child_.text
            CountryOfOrigin_ = self.gds_validate_string(CountryOfOrigin_, node, 'CountryOfOrigin')
            self.CountryOfOrigin = CountryOfOrigin_
# end class ItemDetailType


class ExtraServicesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExtraService=None):
        self.original_tagname_ = None
        self.ExtraService = ExtraService
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraServicesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraServicesType.subclass:
            return ExtraServicesType.subclass(*args_, **kwargs_)
        else:
            return ExtraServicesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExtraService(self): return self.ExtraService
    def set_ExtraService(self, ExtraService): self.ExtraService = ExtraService
    def hasContent_(self):
        if (
            self.ExtraService is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExtraServicesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraServicesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExtraServicesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExtraServicesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExtraServicesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExtraServicesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExtraService is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExtraService>%s</ExtraService>%s' % (self.gds_format_integer(self.ExtraService, input_name='ExtraService'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExtraService':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ExtraService')
            self.ExtraService = ival_
# end class ExtraServicesType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSFirstClassMailIntlCertifyRequest'
        rootClass = eVSFirstClassMailIntlCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSFirstClassMailIntlCertifyRequest'
        rootClass = eVSFirstClassMailIntlCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSFirstClassMailIntlCertifyRequest'
        rootClass = eVSFirstClassMailIntlCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eVSFirstClassMailIntlCertifyRequest'
        rootClass = eVSFirstClassMailIntlCertifyRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from eVSFirstClassMailIntlCertifyRequest.xsd import *\n\n')
        sys.stdout.write('import eVSFirstClassMailIntlCertifyRequest.xsd as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ExtraServicesType",
    "ItemDetailType",
    "ShippingContentsType",
    "eVSFirstClassMailIntlCertifyRequest"
]
