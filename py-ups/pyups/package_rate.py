#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun 12 20:22:54 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', 'pyups/package_rate.py')
#
# Command line arguments:
#    /UPS/Rates_Pkg_Gnd/RatingPACKAGE/PACKAGEWebServices/SCHEMA-WSDLs/RateWebServiceSchema.xsd
#
# Command line:
#    generateDS --no-namespace-defs -o "pyups/package_rate.py"  /UPS/Rates_Pkg_Gnd/RatingPACKAGE/PACKAGEWebServices/SCHEMA-WSDLs/RateWebServiceSchema.xsd
#
# Current working directory (os.getcwd()):
#   py_ups
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RateRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Request=None, PickupType=None, CustomerClassification=None, Shipment=None):
        self.original_tagname_ = None
        self.Request = Request
        self.PickupType = PickupType
        self.CustomerClassification = CustomerClassification
        self.Shipment = Shipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateRequest.subclass:
            return RateRequest.subclass(*args_, **kwargs_)
        else:
            return RateRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Request(self): return self.Request
    def set_Request(self, Request): self.Request = Request
    def get_PickupType(self): return self.PickupType
    def set_PickupType(self, PickupType): self.PickupType = PickupType
    def get_CustomerClassification(self): return self.CustomerClassification
    def set_CustomerClassification(self, CustomerClassification): self.CustomerClassification = CustomerClassification
    def get_Shipment(self): return self.Shipment
    def set_Shipment(self, Shipment): self.Shipment = Shipment
    def hasContent_(self):
        if (
            self.Request is not None or
            self.PickupType is not None or
            self.CustomerClassification is not None or
            self.Shipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='RateRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='RateRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='RateRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='RateRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            self.Request.export(outfile, level, namespace_='common:', name_='Request', pretty_print=pretty_print)
        if self.PickupType is not None:
            self.PickupType.export(outfile, level, namespace_, name_='PickupType', pretty_print=pretty_print)
        if self.CustomerClassification is not None:
            self.CustomerClassification.export(outfile, level, namespace_, name_='CustomerClassification', pretty_print=pretty_print)
        if self.Shipment is not None:
            self.Shipment.export(outfile, level, namespace_, name_='Shipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory()
            obj_.build(child_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'PickupType':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.PickupType = obj_
            obj_.original_tagname_ = 'PickupType'
        elif nodeName_ == 'CustomerClassification':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.CustomerClassification = obj_
            obj_.original_tagname_ = 'CustomerClassification'
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory()
            obj_.build(child_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
# end class RateRequest


class RateResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Response=None, RatedShipment=None):
        self.original_tagname_ = None
        self.Response = Response
        if RatedShipment is None:
            self.RatedShipment = []
        else:
            self.RatedShipment = RatedShipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateResponse.subclass:
            return RateResponse.subclass(*args_, **kwargs_)
        else:
            return RateResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Response(self): return self.Response
    def set_Response(self, Response): self.Response = Response
    def get_RatedShipment(self): return self.RatedShipment
    def set_RatedShipment(self, RatedShipment): self.RatedShipment = RatedShipment
    def add_RatedShipment(self, value): self.RatedShipment.append(value)
    def insert_RatedShipment_at(self, index, value): self.RatedShipment.insert(index, value)
    def replace_RatedShipment_at(self, index, value): self.RatedShipment[index] = value
    def hasContent_(self):
        if (
            self.Response is not None or
            self.RatedShipment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='RateResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='RateResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='RateResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='RateResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            self.Response.export(outfile, level, namespace_='common:', name_='Response', pretty_print=pretty_print)
        for RatedShipment_ in self.RatedShipment:
            RatedShipment_.export(outfile, level, namespace_, name_='RatedShipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory()
            obj_.build(child_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'RatedShipment':
            obj_ = RatedShipmentType.factory()
            obj_.build(child_)
            self.RatedShipment.append(obj_)
            obj_.original_tagname_ = 'RatedShipment'
# end class RateResponse


class BillingWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillingWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillingWeightType.subclass:
            return BillingWeightType.subclass(*args_, **kwargs_)
        else:
            return BillingWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='BillingWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillingWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillingWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='BillingWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='BillingWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='BillingWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Weight>%s</rate:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class BillingWeightType


class RatedPackageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TransportationCharges=None, BaseServiceCharge=None, ServiceOptionsCharges=None, TotalCharges=None, Weight=None, BillingWeight=None, Accessorial=None, ItemizedCharges=None, NegotiatedCharges=None):
        self.original_tagname_ = None
        self.TransportationCharges = TransportationCharges
        self.BaseServiceCharge = BaseServiceCharge
        self.ServiceOptionsCharges = ServiceOptionsCharges
        self.TotalCharges = TotalCharges
        self.Weight = Weight
        self.BillingWeight = BillingWeight
        if Accessorial is None:
            self.Accessorial = []
        else:
            self.Accessorial = Accessorial
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        self.NegotiatedCharges = NegotiatedCharges
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RatedPackageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RatedPackageType.subclass:
            return RatedPackageType.subclass(*args_, **kwargs_)
        else:
            return RatedPackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TransportationCharges(self): return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges): self.TransportationCharges = TransportationCharges
    def get_BaseServiceCharge(self): return self.BaseServiceCharge
    def set_BaseServiceCharge(self, BaseServiceCharge): self.BaseServiceCharge = BaseServiceCharge
    def get_ServiceOptionsCharges(self): return self.ServiceOptionsCharges
    def set_ServiceOptionsCharges(self, ServiceOptionsCharges): self.ServiceOptionsCharges = ServiceOptionsCharges
    def get_TotalCharges(self): return self.TotalCharges
    def set_TotalCharges(self, TotalCharges): self.TotalCharges = TotalCharges
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_BillingWeight(self): return self.BillingWeight
    def set_BillingWeight(self, BillingWeight): self.BillingWeight = BillingWeight
    def get_Accessorial(self): return self.Accessorial
    def set_Accessorial(self, Accessorial): self.Accessorial = Accessorial
    def add_Accessorial(self, value): self.Accessorial.append(value)
    def insert_Accessorial_at(self, index, value): self.Accessorial.insert(index, value)
    def replace_Accessorial_at(self, index, value): self.Accessorial[index] = value
    def get_ItemizedCharges(self): return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges): self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value): self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value): self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value): self.ItemizedCharges[index] = value
    def get_NegotiatedCharges(self): return self.NegotiatedCharges
    def set_NegotiatedCharges(self, NegotiatedCharges): self.NegotiatedCharges = NegotiatedCharges
    def hasContent_(self):
        if (
            self.TransportationCharges is not None or
            self.BaseServiceCharge is not None or
            self.ServiceOptionsCharges is not None or
            self.TotalCharges is not None or
            self.Weight is not None or
            self.BillingWeight is not None or
            self.Accessorial or
            self.ItemizedCharges or
            self.NegotiatedCharges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='RatedPackageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RatedPackageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatedPackageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='RatedPackageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='RatedPackageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='RatedPackageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportationCharges is not None:
            self.TransportationCharges.export(outfile, level, namespace_, name_='TransportationCharges', pretty_print=pretty_print)
        if self.BaseServiceCharge is not None:
            self.BaseServiceCharge.export(outfile, level, namespace_, name_='BaseServiceCharge', pretty_print=pretty_print)
        if self.ServiceOptionsCharges is not None:
            self.ServiceOptionsCharges.export(outfile, level, namespace_, name_='ServiceOptionsCharges', pretty_print=pretty_print)
        if self.TotalCharges is not None:
            self.TotalCharges.export(outfile, level, namespace_, name_='TotalCharges', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Weight>%s</rate:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
        if self.BillingWeight is not None:
            self.BillingWeight.export(outfile, level, namespace_, name_='BillingWeight', pretty_print=pretty_print)
        for Accessorial_ in self.Accessorial:
            Accessorial_.export(outfile, level, namespace_, name_='Accessorial', pretty_print=pretty_print)
        for ItemizedCharges_ in self.ItemizedCharges:
            ItemizedCharges_.export(outfile, level, namespace_, name_='ItemizedCharges', pretty_print=pretty_print)
        if self.NegotiatedCharges is not None:
            self.NegotiatedCharges.export(outfile, level, namespace_, name_='NegotiatedCharges', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TransportationCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TransportationCharges = obj_
            obj_.original_tagname_ = 'TransportationCharges'
        elif nodeName_ == 'BaseServiceCharge':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.BaseServiceCharge = obj_
            obj_.original_tagname_ = 'BaseServiceCharge'
        elif nodeName_ == 'ServiceOptionsCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.ServiceOptionsCharges = obj_
            obj_.original_tagname_ = 'ServiceOptionsCharges'
        elif nodeName_ == 'TotalCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TotalCharges = obj_
            obj_.original_tagname_ = 'TotalCharges'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
        elif nodeName_ == 'BillingWeight':
            obj_ = BillingWeightType.factory()
            obj_.build(child_)
            self.BillingWeight = obj_
            obj_.original_tagname_ = 'BillingWeight'
        elif nodeName_ == 'Accessorial':
            obj_ = AccessorialType.factory()
            obj_.build(child_)
            self.Accessorial.append(obj_)
            obj_.original_tagname_ = 'Accessorial'
        elif nodeName_ == 'ItemizedCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
        elif nodeName_ == 'NegotiatedCharges':
            obj_ = NegotiatedChargesType.factory()
            obj_.build(child_)
            self.NegotiatedCharges = obj_
            obj_.original_tagname_ = 'NegotiatedCharges'
# end class RatedPackageType


class AccessorialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccessorialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccessorialType.subclass:
            return AccessorialType.subclass(*args_, **kwargs_)
        else:
            return AccessorialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='AccessorialType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccessorialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccessorialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='AccessorialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='AccessorialType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='AccessorialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class AccessorialType


class NegotiatedChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemizedCharges=None):
        self.original_tagname_ = None
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NegotiatedChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NegotiatedChargesType.subclass:
            return NegotiatedChargesType.subclass(*args_, **kwargs_)
        else:
            return NegotiatedChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemizedCharges(self): return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges): self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value): self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value): self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value): self.ItemizedCharges[index] = value
    def hasContent_(self):
        if (
            self.ItemizedCharges
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='NegotiatedChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NegotiatedChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NegotiatedChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='NegotiatedChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='NegotiatedChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='NegotiatedChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemizedCharges_ in self.ItemizedCharges:
            ItemizedCharges_.export(outfile, level, namespace_, name_='ItemizedCharges', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemizedCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
# end class NegotiatedChargesType


class RatedShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Disclaimer=None, Service=None, RateChart=None, RatedShipmentAlert=None, BillableWeightCalculationMethod=None, RatingMethod=None, BillingWeight=None, TransportationCharges=None, BaseServiceCharge=None, ItemizedCharges=None, FRSShipmentData=None, ServiceOptionsCharges=None, TaxCharges=None, TotalCharges=None, TotalChargesWithTaxes=None, NegotiatedRateCharges=None, GuaranteedDelivery=None, RatedPackage=None, TimeInTransit=None):
        self.original_tagname_ = None
        if Disclaimer is None:
            self.Disclaimer = []
        else:
            self.Disclaimer = Disclaimer
        self.Service = Service
        self.RateChart = RateChart
        if RatedShipmentAlert is None:
            self.RatedShipmentAlert = []
        else:
            self.RatedShipmentAlert = RatedShipmentAlert
        self.BillableWeightCalculationMethod = BillableWeightCalculationMethod
        self.RatingMethod = RatingMethod
        self.BillingWeight = BillingWeight
        self.TransportationCharges = TransportationCharges
        self.BaseServiceCharge = BaseServiceCharge
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        self.FRSShipmentData = FRSShipmentData
        self.ServiceOptionsCharges = ServiceOptionsCharges
        if TaxCharges is None:
            self.TaxCharges = []
        else:
            self.TaxCharges = TaxCharges
        self.TotalCharges = TotalCharges
        self.TotalChargesWithTaxes = TotalChargesWithTaxes
        self.NegotiatedRateCharges = NegotiatedRateCharges
        self.GuaranteedDelivery = GuaranteedDelivery
        if RatedPackage is None:
            self.RatedPackage = []
        else:
            self.RatedPackage = RatedPackage
        self.TimeInTransit = TimeInTransit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RatedShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RatedShipmentType.subclass:
            return RatedShipmentType.subclass(*args_, **kwargs_)
        else:
            return RatedShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Disclaimer(self): return self.Disclaimer
    def set_Disclaimer(self, Disclaimer): self.Disclaimer = Disclaimer
    def add_Disclaimer(self, value): self.Disclaimer.append(value)
    def insert_Disclaimer_at(self, index, value): self.Disclaimer.insert(index, value)
    def replace_Disclaimer_at(self, index, value): self.Disclaimer[index] = value
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_RateChart(self): return self.RateChart
    def set_RateChart(self, RateChart): self.RateChart = RateChart
    def get_RatedShipmentAlert(self): return self.RatedShipmentAlert
    def set_RatedShipmentAlert(self, RatedShipmentAlert): self.RatedShipmentAlert = RatedShipmentAlert
    def add_RatedShipmentAlert(self, value): self.RatedShipmentAlert.append(value)
    def insert_RatedShipmentAlert_at(self, index, value): self.RatedShipmentAlert.insert(index, value)
    def replace_RatedShipmentAlert_at(self, index, value): self.RatedShipmentAlert[index] = value
    def get_BillableWeightCalculationMethod(self): return self.BillableWeightCalculationMethod
    def set_BillableWeightCalculationMethod(self, BillableWeightCalculationMethod): self.BillableWeightCalculationMethod = BillableWeightCalculationMethod
    def get_RatingMethod(self): return self.RatingMethod
    def set_RatingMethod(self, RatingMethod): self.RatingMethod = RatingMethod
    def get_BillingWeight(self): return self.BillingWeight
    def set_BillingWeight(self, BillingWeight): self.BillingWeight = BillingWeight
    def get_TransportationCharges(self): return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges): self.TransportationCharges = TransportationCharges
    def get_BaseServiceCharge(self): return self.BaseServiceCharge
    def set_BaseServiceCharge(self, BaseServiceCharge): self.BaseServiceCharge = BaseServiceCharge
    def get_ItemizedCharges(self): return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges): self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value): self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value): self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value): self.ItemizedCharges[index] = value
    def get_FRSShipmentData(self): return self.FRSShipmentData
    def set_FRSShipmentData(self, FRSShipmentData): self.FRSShipmentData = FRSShipmentData
    def get_ServiceOptionsCharges(self): return self.ServiceOptionsCharges
    def set_ServiceOptionsCharges(self, ServiceOptionsCharges): self.ServiceOptionsCharges = ServiceOptionsCharges
    def get_TaxCharges(self): return self.TaxCharges
    def set_TaxCharges(self, TaxCharges): self.TaxCharges = TaxCharges
    def add_TaxCharges(self, value): self.TaxCharges.append(value)
    def insert_TaxCharges_at(self, index, value): self.TaxCharges.insert(index, value)
    def replace_TaxCharges_at(self, index, value): self.TaxCharges[index] = value
    def get_TotalCharges(self): return self.TotalCharges
    def set_TotalCharges(self, TotalCharges): self.TotalCharges = TotalCharges
    def get_TotalChargesWithTaxes(self): return self.TotalChargesWithTaxes
    def set_TotalChargesWithTaxes(self, TotalChargesWithTaxes): self.TotalChargesWithTaxes = TotalChargesWithTaxes
    def get_NegotiatedRateCharges(self): return self.NegotiatedRateCharges
    def set_NegotiatedRateCharges(self, NegotiatedRateCharges): self.NegotiatedRateCharges = NegotiatedRateCharges
    def get_GuaranteedDelivery(self): return self.GuaranteedDelivery
    def set_GuaranteedDelivery(self, GuaranteedDelivery): self.GuaranteedDelivery = GuaranteedDelivery
    def get_RatedPackage(self): return self.RatedPackage
    def set_RatedPackage(self, RatedPackage): self.RatedPackage = RatedPackage
    def add_RatedPackage(self, value): self.RatedPackage.append(value)
    def insert_RatedPackage_at(self, index, value): self.RatedPackage.insert(index, value)
    def replace_RatedPackage_at(self, index, value): self.RatedPackage[index] = value
    def get_TimeInTransit(self): return self.TimeInTransit
    def set_TimeInTransit(self, TimeInTransit): self.TimeInTransit = TimeInTransit
    def hasContent_(self):
        if (
            self.Disclaimer or
            self.Service is not None or
            self.RateChart is not None or
            self.RatedShipmentAlert or
            self.BillableWeightCalculationMethod is not None or
            self.RatingMethod is not None or
            self.BillingWeight is not None or
            self.TransportationCharges is not None or
            self.BaseServiceCharge is not None or
            self.ItemizedCharges or
            self.FRSShipmentData is not None or
            self.ServiceOptionsCharges is not None or
            self.TaxCharges or
            self.TotalCharges is not None or
            self.TotalChargesWithTaxes is not None or
            self.NegotiatedRateCharges is not None or
            self.GuaranteedDelivery is not None or
            self.RatedPackage or
            self.TimeInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='RatedShipmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RatedShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatedShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='RatedShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='RatedShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='RatedShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Disclaimer_ in self.Disclaimer:
            Disclaimer_.export(outfile, level, namespace_, name_='Disclaimer', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.RateChart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RateChart>%s</rate:RateChart>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RateChart), input_name='RateChart')), eol_))
        for RatedShipmentAlert_ in self.RatedShipmentAlert:
            RatedShipmentAlert_.export(outfile, level, namespace_, name_='RatedShipmentAlert', pretty_print=pretty_print)
        if self.BillableWeightCalculationMethod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:BillableWeightCalculationMethod>%s</rate:BillableWeightCalculationMethod>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BillableWeightCalculationMethod), input_name='BillableWeightCalculationMethod')), eol_))
        if self.RatingMethod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RatingMethod>%s</rate:RatingMethod>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RatingMethod), input_name='RatingMethod')), eol_))
        if self.BillingWeight is not None:
            self.BillingWeight.export(outfile, level, namespace_, name_='BillingWeight', pretty_print=pretty_print)
        if self.TransportationCharges is not None:
            self.TransportationCharges.export(outfile, level, namespace_, name_='TransportationCharges', pretty_print=pretty_print)
        if self.BaseServiceCharge is not None:
            self.BaseServiceCharge.export(outfile, level, namespace_, name_='BaseServiceCharge', pretty_print=pretty_print)
        for ItemizedCharges_ in self.ItemizedCharges:
            ItemizedCharges_.export(outfile, level, namespace_, name_='ItemizedCharges', pretty_print=pretty_print)
        if self.FRSShipmentData is not None:
            self.FRSShipmentData.export(outfile, level, namespace_, name_='FRSShipmentData', pretty_print=pretty_print)
        if self.ServiceOptionsCharges is not None:
            self.ServiceOptionsCharges.export(outfile, level, namespace_, name_='ServiceOptionsCharges', pretty_print=pretty_print)
        for TaxCharges_ in self.TaxCharges:
            TaxCharges_.export(outfile, level, namespace_, name_='TaxCharges', pretty_print=pretty_print)
        if self.TotalCharges is not None:
            self.TotalCharges.export(outfile, level, namespace_, name_='TotalCharges', pretty_print=pretty_print)
        if self.TotalChargesWithTaxes is not None:
            self.TotalChargesWithTaxes.export(outfile, level, namespace_, name_='TotalChargesWithTaxes', pretty_print=pretty_print)
        if self.NegotiatedRateCharges is not None:
            self.NegotiatedRateCharges.export(outfile, level, namespace_, name_='NegotiatedRateCharges', pretty_print=pretty_print)
        if self.GuaranteedDelivery is not None:
            self.GuaranteedDelivery.export(outfile, level, namespace_, name_='GuaranteedDelivery', pretty_print=pretty_print)
        for RatedPackage_ in self.RatedPackage:
            RatedPackage_.export(outfile, level, namespace_, name_='RatedPackage', pretty_print=pretty_print)
        if self.TimeInTransit is not None:
            self.TimeInTransit.export(outfile, level, namespace_, name_='TimeInTransit', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Disclaimer':
            obj_ = DisclaimerType.factory()
            obj_.build(child_)
            self.Disclaimer.append(obj_)
            obj_.original_tagname_ = 'Disclaimer'
        elif nodeName_ == 'Service':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'RateChart':
            RateChart_ = child_.text
            RateChart_ = self.gds_validate_string(RateChart_, node, 'RateChart')
            self.RateChart = RateChart_
        elif nodeName_ == 'RatedShipmentAlert':
            obj_ = RatedShipmentInfoType.factory()
            obj_.build(child_)
            self.RatedShipmentAlert.append(obj_)
            obj_.original_tagname_ = 'RatedShipmentAlert'
        elif nodeName_ == 'BillableWeightCalculationMethod':
            BillableWeightCalculationMethod_ = child_.text
            BillableWeightCalculationMethod_ = self.gds_validate_string(BillableWeightCalculationMethod_, node, 'BillableWeightCalculationMethod')
            self.BillableWeightCalculationMethod = BillableWeightCalculationMethod_
        elif nodeName_ == 'RatingMethod':
            RatingMethod_ = child_.text
            RatingMethod_ = self.gds_validate_string(RatingMethod_, node, 'RatingMethod')
            self.RatingMethod = RatingMethod_
        elif nodeName_ == 'BillingWeight':
            obj_ = BillingWeightType.factory()
            obj_.build(child_)
            self.BillingWeight = obj_
            obj_.original_tagname_ = 'BillingWeight'
        elif nodeName_ == 'TransportationCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TransportationCharges = obj_
            obj_.original_tagname_ = 'TransportationCharges'
        elif nodeName_ == 'BaseServiceCharge':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.BaseServiceCharge = obj_
            obj_.original_tagname_ = 'BaseServiceCharge'
        elif nodeName_ == 'ItemizedCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
        elif nodeName_ == 'FRSShipmentData':
            obj_ = FRSShipmentType.factory()
            obj_.build(child_)
            self.FRSShipmentData = obj_
            obj_.original_tagname_ = 'FRSShipmentData'
        elif nodeName_ == 'ServiceOptionsCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.ServiceOptionsCharges = obj_
            obj_.original_tagname_ = 'ServiceOptionsCharges'
        elif nodeName_ == 'TaxCharges':
            obj_ = TaxChargeType.factory()
            obj_.build(child_)
            self.TaxCharges.append(obj_)
            obj_.original_tagname_ = 'TaxCharges'
        elif nodeName_ == 'TotalCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TotalCharges = obj_
            obj_.original_tagname_ = 'TotalCharges'
        elif nodeName_ == 'TotalChargesWithTaxes':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TotalChargesWithTaxes = obj_
            obj_.original_tagname_ = 'TotalChargesWithTaxes'
        elif nodeName_ == 'NegotiatedRateCharges':
            obj_ = TotalChargeType.factory()
            obj_.build(child_)
            self.NegotiatedRateCharges = obj_
            obj_.original_tagname_ = 'NegotiatedRateCharges'
        elif nodeName_ == 'GuaranteedDelivery':
            obj_ = GuaranteedDeliveryType.factory()
            obj_.build(child_)
            self.GuaranteedDelivery = obj_
            obj_.original_tagname_ = 'GuaranteedDelivery'
        elif nodeName_ == 'RatedPackage':
            obj_ = RatedPackageType.factory()
            obj_.build(child_)
            self.RatedPackage.append(obj_)
            obj_.original_tagname_ = 'RatedPackage'
        elif nodeName_ == 'TimeInTransit':
            obj_ = TimeInTransitResponseType.factory()
            obj_.build(child_)
            self.TimeInTransit = obj_
            obj_.original_tagname_ = 'TimeInTransit'
# end class RatedShipmentType


class TimeInTransitResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PickupDate=None, DocumentsOnlyIndicator=None, PackageBillType=None, ServiceSummary=None, AutoDutyCode=None, Disclaimer=None):
        self.original_tagname_ = None
        self.PickupDate = PickupDate
        self.DocumentsOnlyIndicator = DocumentsOnlyIndicator
        self.PackageBillType = PackageBillType
        if ServiceSummary is None:
            self.ServiceSummary = []
        else:
            self.ServiceSummary = ServiceSummary
        self.AutoDutyCode = AutoDutyCode
        self.Disclaimer = Disclaimer
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeInTransitResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeInTransitResponseType.subclass:
            return TimeInTransitResponseType.subclass(*args_, **kwargs_)
        else:
            return TimeInTransitResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickupDate(self): return self.PickupDate
    def set_PickupDate(self, PickupDate): self.PickupDate = PickupDate
    def get_DocumentsOnlyIndicator(self): return self.DocumentsOnlyIndicator
    def set_DocumentsOnlyIndicator(self, DocumentsOnlyIndicator): self.DocumentsOnlyIndicator = DocumentsOnlyIndicator
    def get_PackageBillType(self): return self.PackageBillType
    def set_PackageBillType(self, PackageBillType): self.PackageBillType = PackageBillType
    def get_ServiceSummary(self): return self.ServiceSummary
    def set_ServiceSummary(self, ServiceSummary): self.ServiceSummary = ServiceSummary
    def add_ServiceSummary(self, value): self.ServiceSummary.append(value)
    def insert_ServiceSummary_at(self, index, value): self.ServiceSummary.insert(index, value)
    def replace_ServiceSummary_at(self, index, value): self.ServiceSummary[index] = value
    def get_AutoDutyCode(self): return self.AutoDutyCode
    def set_AutoDutyCode(self, AutoDutyCode): self.AutoDutyCode = AutoDutyCode
    def get_Disclaimer(self): return self.Disclaimer
    def set_Disclaimer(self, Disclaimer): self.Disclaimer = Disclaimer
    def hasContent_(self):
        if (
            self.PickupDate is not None or
            self.DocumentsOnlyIndicator is not None or
            self.PackageBillType is not None or
            self.ServiceSummary or
            self.AutoDutyCode is not None or
            self.Disclaimer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='TimeInTransitResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeInTransitResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeInTransitResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='TimeInTransitResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='TimeInTransitResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='TimeInTransitResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PickupDate>%s</rate:PickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupDate), input_name='PickupDate')), eol_))
        if self.DocumentsOnlyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DocumentsOnlyIndicator>%s</rate:DocumentsOnlyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentsOnlyIndicator), input_name='DocumentsOnlyIndicator')), eol_))
        if self.PackageBillType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackageBillType>%s</rate:PackageBillType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageBillType), input_name='PackageBillType')), eol_))
        for ServiceSummary_ in self.ServiceSummary:
            ServiceSummary_.export(outfile, level, namespace_, name_='ServiceSummary', pretty_print=pretty_print)
        if self.AutoDutyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AutoDutyCode>%s</rate:AutoDutyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AutoDutyCode), input_name='AutoDutyCode')), eol_))
        if self.Disclaimer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Disclaimer>%s</rate:Disclaimer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Disclaimer), input_name='Disclaimer')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickupDate':
            PickupDate_ = child_.text
            PickupDate_ = self.gds_validate_string(PickupDate_, node, 'PickupDate')
            self.PickupDate = PickupDate_
        elif nodeName_ == 'DocumentsOnlyIndicator':
            DocumentsOnlyIndicator_ = child_.text
            DocumentsOnlyIndicator_ = self.gds_validate_string(DocumentsOnlyIndicator_, node, 'DocumentsOnlyIndicator')
            self.DocumentsOnlyIndicator = DocumentsOnlyIndicator_
        elif nodeName_ == 'PackageBillType':
            PackageBillType_ = child_.text
            PackageBillType_ = self.gds_validate_string(PackageBillType_, node, 'PackageBillType')
            self.PackageBillType = PackageBillType_
        elif nodeName_ == 'ServiceSummary':
            obj_ = ServiceSummaryType.factory()
            obj_.build(child_)
            self.ServiceSummary.append(obj_)
            obj_.original_tagname_ = 'ServiceSummary'
        elif nodeName_ == 'AutoDutyCode':
            AutoDutyCode_ = child_.text
            AutoDutyCode_ = self.gds_validate_string(AutoDutyCode_, node, 'AutoDutyCode')
            self.AutoDutyCode = AutoDutyCode_
        elif nodeName_ == 'Disclaimer':
            Disclaimer_ = child_.text
            Disclaimer_ = self.gds_validate_string(Disclaimer_, node, 'Disclaimer')
            self.Disclaimer = Disclaimer_
# end class TimeInTransitResponseType


class ServiceSummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Service=None, GuaranteedIndicator=None, Disclaimer=None, EstimatedArrival=None, SaturdayDelivery=None, SaturdayDeliveryDisclaimer=None):
        self.original_tagname_ = None
        self.Service = Service
        self.GuaranteedIndicator = GuaranteedIndicator
        self.Disclaimer = Disclaimer
        self.EstimatedArrival = EstimatedArrival
        self.SaturdayDelivery = SaturdayDelivery
        self.SaturdayDeliveryDisclaimer = SaturdayDeliveryDisclaimer
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceSummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceSummaryType.subclass:
            return ServiceSummaryType.subclass(*args_, **kwargs_)
        else:
            return ServiceSummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_GuaranteedIndicator(self): return self.GuaranteedIndicator
    def set_GuaranteedIndicator(self, GuaranteedIndicator): self.GuaranteedIndicator = GuaranteedIndicator
    def get_Disclaimer(self): return self.Disclaimer
    def set_Disclaimer(self, Disclaimer): self.Disclaimer = Disclaimer
    def get_EstimatedArrival(self): return self.EstimatedArrival
    def set_EstimatedArrival(self, EstimatedArrival): self.EstimatedArrival = EstimatedArrival
    def get_SaturdayDelivery(self): return self.SaturdayDelivery
    def set_SaturdayDelivery(self, SaturdayDelivery): self.SaturdayDelivery = SaturdayDelivery
    def get_SaturdayDeliveryDisclaimer(self): return self.SaturdayDeliveryDisclaimer
    def set_SaturdayDeliveryDisclaimer(self, SaturdayDeliveryDisclaimer): self.SaturdayDeliveryDisclaimer = SaturdayDeliveryDisclaimer
    def hasContent_(self):
        if (
            self.Service is not None or
            self.GuaranteedIndicator is not None or
            self.Disclaimer is not None or
            self.EstimatedArrival is not None or
            self.SaturdayDelivery is not None or
            self.SaturdayDeliveryDisclaimer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ServiceSummaryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceSummaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceSummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ServiceSummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ServiceSummaryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ServiceSummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.GuaranteedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:GuaranteedIndicator>%s</rate:GuaranteedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedIndicator), input_name='GuaranteedIndicator')), eol_))
        if self.Disclaimer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Disclaimer>%s</rate:Disclaimer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Disclaimer), input_name='Disclaimer')), eol_))
        if self.EstimatedArrival is not None:
            self.EstimatedArrival.export(outfile, level, namespace_, name_='EstimatedArrival', pretty_print=pretty_print)
        if self.SaturdayDelivery is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SaturdayDelivery>%s</rate:SaturdayDelivery>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDelivery), input_name='SaturdayDelivery')), eol_))
        if self.SaturdayDeliveryDisclaimer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SaturdayDeliveryDisclaimer>%s</rate:SaturdayDeliveryDisclaimer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDeliveryDisclaimer), input_name='SaturdayDeliveryDisclaimer')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'GuaranteedIndicator':
            GuaranteedIndicator_ = child_.text
            GuaranteedIndicator_ = self.gds_validate_string(GuaranteedIndicator_, node, 'GuaranteedIndicator')
            self.GuaranteedIndicator = GuaranteedIndicator_
        elif nodeName_ == 'Disclaimer':
            Disclaimer_ = child_.text
            Disclaimer_ = self.gds_validate_string(Disclaimer_, node, 'Disclaimer')
            self.Disclaimer = Disclaimer_
        elif nodeName_ == 'EstimatedArrival':
            obj_ = EstimatedArrivalType.factory()
            obj_.build(child_)
            self.EstimatedArrival = obj_
            obj_.original_tagname_ = 'EstimatedArrival'
        elif nodeName_ == 'SaturdayDelivery':
            SaturdayDelivery_ = child_.text
            SaturdayDelivery_ = self.gds_validate_string(SaturdayDelivery_, node, 'SaturdayDelivery')
            self.SaturdayDelivery = SaturdayDelivery_
        elif nodeName_ == 'SaturdayDeliveryDisclaimer':
            SaturdayDeliveryDisclaimer_ = child_.text
            SaturdayDeliveryDisclaimer_ = self.gds_validate_string(SaturdayDeliveryDisclaimer_, node, 'SaturdayDeliveryDisclaimer')
            self.SaturdayDeliveryDisclaimer = SaturdayDeliveryDisclaimer_
# end class ServiceSummaryType


class EstimatedArrivalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Arrival=None, BusinessDaysInTransit=None, Pickup=None, DayOfWeek=None, CustomerCenterCutoff=None, DelayCount=None, HolidayCount=None, RestDays=None, TotalTransitDays=None):
        self.original_tagname_ = None
        self.Arrival = Arrival
        self.BusinessDaysInTransit = BusinessDaysInTransit
        self.Pickup = Pickup
        self.DayOfWeek = DayOfWeek
        self.CustomerCenterCutoff = CustomerCenterCutoff
        self.DelayCount = DelayCount
        self.HolidayCount = HolidayCount
        self.RestDays = RestDays
        self.TotalTransitDays = TotalTransitDays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EstimatedArrivalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EstimatedArrivalType.subclass:
            return EstimatedArrivalType.subclass(*args_, **kwargs_)
        else:
            return EstimatedArrivalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Arrival(self): return self.Arrival
    def set_Arrival(self, Arrival): self.Arrival = Arrival
    def get_BusinessDaysInTransit(self): return self.BusinessDaysInTransit
    def set_BusinessDaysInTransit(self, BusinessDaysInTransit): self.BusinessDaysInTransit = BusinessDaysInTransit
    def get_Pickup(self): return self.Pickup
    def set_Pickup(self, Pickup): self.Pickup = Pickup
    def get_DayOfWeek(self): return self.DayOfWeek
    def set_DayOfWeek(self, DayOfWeek): self.DayOfWeek = DayOfWeek
    def get_CustomerCenterCutoff(self): return self.CustomerCenterCutoff
    def set_CustomerCenterCutoff(self, CustomerCenterCutoff): self.CustomerCenterCutoff = CustomerCenterCutoff
    def get_DelayCount(self): return self.DelayCount
    def set_DelayCount(self, DelayCount): self.DelayCount = DelayCount
    def get_HolidayCount(self): return self.HolidayCount
    def set_HolidayCount(self, HolidayCount): self.HolidayCount = HolidayCount
    def get_RestDays(self): return self.RestDays
    def set_RestDays(self, RestDays): self.RestDays = RestDays
    def get_TotalTransitDays(self): return self.TotalTransitDays
    def set_TotalTransitDays(self, TotalTransitDays): self.TotalTransitDays = TotalTransitDays
    def hasContent_(self):
        if (
            self.Arrival is not None or
            self.BusinessDaysInTransit is not None or
            self.Pickup is not None or
            self.DayOfWeek is not None or
            self.CustomerCenterCutoff is not None or
            self.DelayCount is not None or
            self.HolidayCount is not None or
            self.RestDays is not None or
            self.TotalTransitDays is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='EstimatedArrivalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EstimatedArrivalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EstimatedArrivalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='EstimatedArrivalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='EstimatedArrivalType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='EstimatedArrivalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Arrival is not None:
            self.Arrival.export(outfile, level, namespace_, name_='Arrival', pretty_print=pretty_print)
        if self.BusinessDaysInTransit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:BusinessDaysInTransit>%s</rate:BusinessDaysInTransit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BusinessDaysInTransit), input_name='BusinessDaysInTransit')), eol_))
        if self.Pickup is not None:
            self.Pickup.export(outfile, level, namespace_, name_='Pickup', pretty_print=pretty_print)
        if self.DayOfWeek is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DayOfWeek>%s</rate:DayOfWeek>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeek), input_name='DayOfWeek')), eol_))
        if self.CustomerCenterCutoff is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CustomerCenterCutoff>%s</rate:CustomerCenterCutoff>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerCenterCutoff), input_name='CustomerCenterCutoff')), eol_))
        if self.DelayCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DelayCount>%s</rate:DelayCount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DelayCount), input_name='DelayCount')), eol_))
        if self.HolidayCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:HolidayCount>%s</rate:HolidayCount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HolidayCount), input_name='HolidayCount')), eol_))
        if self.RestDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RestDays>%s</rate:RestDays>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RestDays), input_name='RestDays')), eol_))
        if self.TotalTransitDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TotalTransitDays>%s</rate:TotalTransitDays>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalTransitDays), input_name='TotalTransitDays')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Arrival':
            obj_ = PickupType.factory()
            obj_.build(child_)
            self.Arrival = obj_
            obj_.original_tagname_ = 'Arrival'
        elif nodeName_ == 'BusinessDaysInTransit':
            BusinessDaysInTransit_ = child_.text
            BusinessDaysInTransit_ = self.gds_validate_string(BusinessDaysInTransit_, node, 'BusinessDaysInTransit')
            self.BusinessDaysInTransit = BusinessDaysInTransit_
        elif nodeName_ == 'Pickup':
            obj_ = PickupType.factory()
            obj_.build(child_)
            self.Pickup = obj_
            obj_.original_tagname_ = 'Pickup'
        elif nodeName_ == 'DayOfWeek':
            DayOfWeek_ = child_.text
            DayOfWeek_ = self.gds_validate_string(DayOfWeek_, node, 'DayOfWeek')
            self.DayOfWeek = DayOfWeek_
        elif nodeName_ == 'CustomerCenterCutoff':
            CustomerCenterCutoff_ = child_.text
            CustomerCenterCutoff_ = self.gds_validate_string(CustomerCenterCutoff_, node, 'CustomerCenterCutoff')
            self.CustomerCenterCutoff = CustomerCenterCutoff_
        elif nodeName_ == 'DelayCount':
            DelayCount_ = child_.text
            DelayCount_ = self.gds_validate_string(DelayCount_, node, 'DelayCount')
            self.DelayCount = DelayCount_
        elif nodeName_ == 'HolidayCount':
            HolidayCount_ = child_.text
            HolidayCount_ = self.gds_validate_string(HolidayCount_, node, 'HolidayCount')
            self.HolidayCount = HolidayCount_
        elif nodeName_ == 'RestDays':
            RestDays_ = child_.text
            RestDays_ = self.gds_validate_string(RestDays_, node, 'RestDays')
            self.RestDays = RestDays_
        elif nodeName_ == 'TotalTransitDays':
            TotalTransitDays_ = child_.text
            TotalTransitDays_ = self.gds_validate_string(TotalTransitDays_, node, 'TotalTransitDays')
            self.TotalTransitDays = TotalTransitDays_
# end class EstimatedArrivalType


class DisclaimerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DisclaimerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DisclaimerType.subclass:
            return DisclaimerType.subclass(*args_, **kwargs_)
        else:
            return DisclaimerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='DisclaimerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DisclaimerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DisclaimerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='DisclaimerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='DisclaimerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='DisclaimerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class DisclaimerType


class TaxChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.Type = Type
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxChargeType.subclass:
            return TaxChargeType.subclass(*args_, **kwargs_)
        else:
            return TaxChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.Type is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='TaxChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='TaxChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='TaxChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='TaxChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Type>%s</rate:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class TaxChargeType


class TotalChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemizedCharges=None, TaxCharges=None, TotalCharge=None, TotalChargesWithTaxes=None):
        self.original_tagname_ = None
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        if TaxCharges is None:
            self.TaxCharges = []
        else:
            self.TaxCharges = TaxCharges
        self.TotalCharge = TotalCharge
        self.TotalChargesWithTaxes = TotalChargesWithTaxes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TotalChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TotalChargeType.subclass:
            return TotalChargeType.subclass(*args_, **kwargs_)
        else:
            return TotalChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemizedCharges(self): return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges): self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value): self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value): self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value): self.ItemizedCharges[index] = value
    def get_TaxCharges(self): return self.TaxCharges
    def set_TaxCharges(self, TaxCharges): self.TaxCharges = TaxCharges
    def add_TaxCharges(self, value): self.TaxCharges.append(value)
    def insert_TaxCharges_at(self, index, value): self.TaxCharges.insert(index, value)
    def replace_TaxCharges_at(self, index, value): self.TaxCharges[index] = value
    def get_TotalCharge(self): return self.TotalCharge
    def set_TotalCharge(self, TotalCharge): self.TotalCharge = TotalCharge
    def get_TotalChargesWithTaxes(self): return self.TotalChargesWithTaxes
    def set_TotalChargesWithTaxes(self, TotalChargesWithTaxes): self.TotalChargesWithTaxes = TotalChargesWithTaxes
    def hasContent_(self):
        if (
            self.ItemizedCharges or
            self.TaxCharges or
            self.TotalCharge is not None or
            self.TotalChargesWithTaxes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='TotalChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TotalChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TotalChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='TotalChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='TotalChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='TotalChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemizedCharges_ in self.ItemizedCharges:
            ItemizedCharges_.export(outfile, level, namespace_, name_='ItemizedCharges', pretty_print=pretty_print)
        for TaxCharges_ in self.TaxCharges:
            TaxCharges_.export(outfile, level, namespace_, name_='TaxCharges', pretty_print=pretty_print)
        if self.TotalCharge is not None:
            self.TotalCharge.export(outfile, level, namespace_, name_='TotalCharge', pretty_print=pretty_print)
        if self.TotalChargesWithTaxes is not None:
            self.TotalChargesWithTaxes.export(outfile, level, namespace_, name_='TotalChargesWithTaxes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemizedCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
        elif nodeName_ == 'TaxCharges':
            obj_ = TaxChargeType.factory()
            obj_.build(child_)
            self.TaxCharges.append(obj_)
            obj_.original_tagname_ = 'TaxCharges'
        elif nodeName_ == 'TotalCharge':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TotalCharge = obj_
            obj_.original_tagname_ = 'TotalCharge'
        elif nodeName_ == 'TotalChargesWithTaxes':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.TotalChargesWithTaxes = obj_
            obj_.original_tagname_ = 'TotalChargesWithTaxes'
# end class TotalChargeType


class RatedShipmentInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RatedShipmentInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RatedShipmentInfoType.subclass:
            return RatedShipmentInfoType.subclass(*args_, **kwargs_)
        else:
            return RatedShipmentInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='RatedShipmentInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RatedShipmentInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatedShipmentInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='RatedShipmentInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='RatedShipmentInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='RatedShipmentInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class RatedShipmentInfoType


class ChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, CurrencyCode=None, MonetaryValue=None, SubType=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
        self.SubType = SubType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesType.subclass:
            return ChargesType.subclass(*args_, **kwargs_)
        else:
            return ChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def get_SubType(self): return self.SubType
    def set_SubType(self, SubType): self.SubType = SubType
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.CurrencyCode is not None or
            self.MonetaryValue is not None or
            self.SubType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
        if self.SubType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SubType>%s</rate:SubType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubType), input_name='SubType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
        elif nodeName_ == 'SubType':
            SubType_ = child_.text
            SubType_ = self.gds_validate_string(SubType_, node, 'SubType')
            self.SubType = SubType_
# end class ChargesType


class TransportationChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GrossCharge=None, DiscountAmount=None, DiscountPercentage=None, NetCharge=None):
        self.original_tagname_ = None
        self.GrossCharge = GrossCharge
        self.DiscountAmount = DiscountAmount
        self.DiscountPercentage = DiscountPercentage
        self.NetCharge = NetCharge
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportationChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportationChargesType.subclass:
            return TransportationChargesType.subclass(*args_, **kwargs_)
        else:
            return TransportationChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GrossCharge(self): return self.GrossCharge
    def set_GrossCharge(self, GrossCharge): self.GrossCharge = GrossCharge
    def get_DiscountAmount(self): return self.DiscountAmount
    def set_DiscountAmount(self, DiscountAmount): self.DiscountAmount = DiscountAmount
    def get_DiscountPercentage(self): return self.DiscountPercentage
    def set_DiscountPercentage(self, DiscountPercentage): self.DiscountPercentage = DiscountPercentage
    def get_NetCharge(self): return self.NetCharge
    def set_NetCharge(self, NetCharge): self.NetCharge = NetCharge
    def hasContent_(self):
        if (
            self.GrossCharge is not None or
            self.DiscountAmount is not None or
            self.DiscountPercentage is not None or
            self.NetCharge is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='TransportationChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportationChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransportationChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='TransportationChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='TransportationChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='TransportationChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GrossCharge is not None:
            self.GrossCharge.export(outfile, level, namespace_, name_='GrossCharge', pretty_print=pretty_print)
        if self.DiscountAmount is not None:
            self.DiscountAmount.export(outfile, level, namespace_, name_='DiscountAmount', pretty_print=pretty_print)
        if self.DiscountPercentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DiscountPercentage>%s</rate:DiscountPercentage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DiscountPercentage), input_name='DiscountPercentage')), eol_))
        if self.NetCharge is not None:
            self.NetCharge.export(outfile, level, namespace_, name_='NetCharge', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GrossCharge':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.GrossCharge = obj_
            obj_.original_tagname_ = 'GrossCharge'
        elif nodeName_ == 'DiscountAmount':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.DiscountAmount = obj_
            obj_.original_tagname_ = 'DiscountAmount'
        elif nodeName_ == 'DiscountPercentage':
            DiscountPercentage_ = child_.text
            DiscountPercentage_ = self.gds_validate_string(DiscountPercentage_, node, 'DiscountPercentage')
            self.DiscountPercentage = DiscountPercentage_
        elif nodeName_ == 'NetCharge':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.NetCharge = obj_
            obj_.original_tagname_ = 'NetCharge'
# end class TransportationChargesType


class FRSShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TransportationCharges=None, FreightDensityRate=None, HandlingUnits=None):
        self.original_tagname_ = None
        self.TransportationCharges = TransportationCharges
        self.FreightDensityRate = FreightDensityRate
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FRSShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FRSShipmentType.subclass:
            return FRSShipmentType.subclass(*args_, **kwargs_)
        else:
            return FRSShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TransportationCharges(self): return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges): self.TransportationCharges = TransportationCharges
    def get_FreightDensityRate(self): return self.FreightDensityRate
    def set_FreightDensityRate(self, FreightDensityRate): self.FreightDensityRate = FreightDensityRate
    def get_HandlingUnits(self): return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits): self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value): self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value): self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value): self.HandlingUnits[index] = value
    def hasContent_(self):
        if (
            self.TransportationCharges is not None or
            self.FreightDensityRate is not None or
            self.HandlingUnits
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='FRSShipmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FRSShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FRSShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='FRSShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='FRSShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='FRSShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportationCharges is not None:
            self.TransportationCharges.export(outfile, level, namespace_, name_='TransportationCharges', pretty_print=pretty_print)
        if self.FreightDensityRate is not None:
            self.FreightDensityRate.export(outfile, level, namespace_, name_='FreightDensityRate', pretty_print=pretty_print)
        for HandlingUnits_ in self.HandlingUnits:
            HandlingUnits_.export(outfile, level, namespace_, name_='HandlingUnits', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TransportationCharges':
            obj_ = TransportationChargesType.factory()
            obj_.build(child_)
            self.TransportationCharges = obj_
            obj_.original_tagname_ = 'TransportationCharges'
        elif nodeName_ == 'FreightDensityRate':
            obj_ = FreightDensityRateType.factory()
            obj_.build(child_)
            self.FreightDensityRate = obj_
            obj_.original_tagname_ = 'FreightDensityRate'
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsResponseType.factory()
            obj_.build(child_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
# end class FRSShipmentType


class FreightDensityRateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Density=None, TotalCubicFeet=None):
        self.original_tagname_ = None
        self.Density = Density
        self.TotalCubicFeet = TotalCubicFeet
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityRateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityRateType.subclass:
            return FreightDensityRateType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityRateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Density(self): return self.Density
    def set_Density(self, Density): self.Density = Density
    def get_TotalCubicFeet(self): return self.TotalCubicFeet
    def set_TotalCubicFeet(self, TotalCubicFeet): self.TotalCubicFeet = TotalCubicFeet
    def hasContent_(self):
        if (
            self.Density is not None or
            self.TotalCubicFeet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='FreightDensityRateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityRateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightDensityRateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='FreightDensityRateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='FreightDensityRateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='FreightDensityRateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Density is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Density>%s</rate:Density>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Density), input_name='Density')), eol_))
        if self.TotalCubicFeet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TotalCubicFeet>%s</rate:TotalCubicFeet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalCubicFeet), input_name='TotalCubicFeet')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Density':
            Density_ = child_.text
            Density_ = self.gds_validate_string(Density_, node, 'Density')
            self.Density = Density_
        elif nodeName_ == 'TotalCubicFeet':
            TotalCubicFeet_ = child_.text
            TotalCubicFeet_ = self.gds_validate_string(TotalCubicFeet_, node, 'TotalCubicFeet')
            self.TotalCubicFeet = TotalCubicFeet_
# end class FreightDensityRateType


class HandlingUnitsResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None, AdjustedHeight=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
        self.Dimensions = Dimensions
        self.AdjustedHeight = AdjustedHeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsResponseType.subclass:
            return HandlingUnitsResponseType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_AdjustedHeight(self): return self.AdjustedHeight
    def set_AdjustedHeight(self, AdjustedHeight): self.AdjustedHeight = AdjustedHeight
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None or
            self.AdjustedHeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='HandlingUnitsResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='HandlingUnitsResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='HandlingUnitsResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='HandlingUnitsResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Quantity>%s</rate:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.AdjustedHeight is not None:
            self.AdjustedHeight.export(outfile, level, namespace_, name_='AdjustedHeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'AdjustedHeight':
            obj_ = AdjustedHeightType.factory()
            obj_.build(child_)
            self.AdjustedHeight = obj_
            obj_.original_tagname_ = 'AdjustedHeight'
# end class HandlingUnitsResponseType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, extensiontype_=None):
        self.original_tagname_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value): self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value): self.AddressLine[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='AddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='AddressType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AddressLine>%s</rate:AddressLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:City>%s</rate:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:StateProvinceCode>%s</rate:StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PostalCode>%s</rate:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CountryCode>%s</rate:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class AddressType


class ShipToAddressType(AddressType):
    subclass = None
    superclass = AddressType
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, ResidentialAddressIndicator=None):
        self.original_tagname_ = None
        super(ShipToAddressType, self).__init__(AddressLine, City, StateProvinceCode, PostalCode, CountryCode, )
        self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToAddressType.subclass:
            return ShipToAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipToAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResidentialAddressIndicator(self): return self.ResidentialAddressIndicator
    def set_ResidentialAddressIndicator(self, ResidentialAddressIndicator): self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def hasContent_(self):
        if (
            self.ResidentialAddressIndicator is not None or
            super(ShipToAddressType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipToAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipToAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipToAddressType'):
        super(ShipToAddressType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToAddressType')
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipToAddressType', fromsubclass_=False, pretty_print=True):
        super(ShipToAddressType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResidentialAddressIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ResidentialAddressIndicator>%s</rate:ResidentialAddressIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialAddressIndicator), input_name='ResidentialAddressIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipToAddressType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResidentialAddressIndicator':
            ResidentialAddressIndicator_ = child_.text
            ResidentialAddressIndicator_ = self.gds_validate_string(ResidentialAddressIndicator_, node, 'ResidentialAddressIndicator')
            self.ResidentialAddressIndicator = ResidentialAddressIndicator_
        super(ShipToAddressType, self).buildChildren(child_, node, nodeName_, True)
# end class ShipToAddressType


class ShipAddressType(AddressType):
    subclass = None
    superclass = AddressType
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        super(ShipAddressType, self).__init__(AddressLine, City, StateProvinceCode, PostalCode, CountryCode, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipAddressType.subclass:
            return ShipAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(ShipAddressType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipAddressType'):
        super(ShipAddressType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ShipAddressType')
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipAddressType', fromsubclass_=False, pretty_print=True):
        super(ShipAddressType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipAddressType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(ShipAddressType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class ShipAddressType


class CODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODFundsCode=None, CODAmount=None):
        self.original_tagname_ = None
        self.CODFundsCode = CODFundsCode
        self.CODAmount = CODAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODType.subclass:
            return CODType.subclass(*args_, **kwargs_)
        else:
            return CODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODFundsCode(self): return self.CODFundsCode
    def set_CODFundsCode(self, CODFundsCode): self.CODFundsCode = CODFundsCode
    def get_CODAmount(self): return self.CODAmount
    def set_CODAmount(self, CODAmount): self.CODAmount = CODAmount
    def hasContent_(self):
        if (
            self.CODFundsCode is not None or
            self.CODAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='CODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='CODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='CODType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='CODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODFundsCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CODFundsCode>%s</rate:CODFundsCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CODFundsCode), input_name='CODFundsCode')), eol_))
        if self.CODAmount is not None:
            self.CODAmount.export(outfile, level, namespace_, name_='CODAmount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODFundsCode':
            CODFundsCode_ = child_.text
            CODFundsCode_ = self.gds_validate_string(CODFundsCode_, node, 'CODFundsCode')
            self.CODFundsCode = CODFundsCode_
        elif nodeName_ == 'CODAmount':
            obj_ = CODAmountType.factory()
            obj_.build(child_)
            self.CODAmount = obj_
            obj_.original_tagname_ = 'CODAmount'
# end class CODType


class CODAmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODAmountType.subclass:
            return CODAmountType.subclass(*args_, **kwargs_)
        else:
            return CODAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='CODAmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODAmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='CODAmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='CODAmountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='CODAmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CODAmountType


class DeliveryConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DCISType=None):
        self.original_tagname_ = None
        self.DCISType = DCISType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryConfirmationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryConfirmationType.subclass:
            return DeliveryConfirmationType.subclass(*args_, **kwargs_)
        else:
            return DeliveryConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DCISType(self): return self.DCISType
    def set_DCISType(self, DCISType): self.DCISType = DCISType
    def hasContent_(self):
        if (
            self.DCISType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='DeliveryConfirmationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryConfirmationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='DeliveryConfirmationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='DeliveryConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='DeliveryConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DCISType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DCISType>%s</rate:DCISType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DCISType), input_name='DCISType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DCISType':
            DCISType_ = child_.text
            DCISType_ = self.gds_validate_string(DCISType_, node, 'DCISType')
            self.DCISType = DCISType_
# end class DeliveryConfirmationType


class DimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='DimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Length>%s</rate:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Width>%s</rate:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Height>%s</rate:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class DimensionsType


class InsuredValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InsuredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InsuredValueType.subclass:
            return InsuredValueType.subclass(*args_, **kwargs_)
        else:
            return InsuredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='InsuredValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InsuredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InsuredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='InsuredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='InsuredValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='InsuredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InsuredValueType


class PackageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackagingType=None, Dimensions=None, DimWeight=None, PackageWeight=None, Commodity=None, LargePackageIndicator=None, PackageServiceOptions=None, AdditionalHandlingIndicator=None):
        self.original_tagname_ = None
        self.PackagingType = PackagingType
        self.Dimensions = Dimensions
        self.DimWeight = DimWeight
        self.PackageWeight = PackageWeight
        self.Commodity = Commodity
        self.LargePackageIndicator = LargePackageIndicator
        self.PackageServiceOptions = PackageServiceOptions
        self.AdditionalHandlingIndicator = AdditionalHandlingIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageType.subclass:
            return PackageType.subclass(*args_, **kwargs_)
        else:
            return PackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_DimWeight(self): return self.DimWeight
    def set_DimWeight(self, DimWeight): self.DimWeight = DimWeight
    def get_PackageWeight(self): return self.PackageWeight
    def set_PackageWeight(self, PackageWeight): self.PackageWeight = PackageWeight
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_LargePackageIndicator(self): return self.LargePackageIndicator
    def set_LargePackageIndicator(self, LargePackageIndicator): self.LargePackageIndicator = LargePackageIndicator
    def get_PackageServiceOptions(self): return self.PackageServiceOptions
    def set_PackageServiceOptions(self, PackageServiceOptions): self.PackageServiceOptions = PackageServiceOptions
    def get_AdditionalHandlingIndicator(self): return self.AdditionalHandlingIndicator
    def set_AdditionalHandlingIndicator(self, AdditionalHandlingIndicator): self.AdditionalHandlingIndicator = AdditionalHandlingIndicator
    def hasContent_(self):
        if (
            self.PackagingType is not None or
            self.Dimensions is not None or
            self.DimWeight is not None or
            self.PackageWeight is not None or
            self.Commodity is not None or
            self.LargePackageIndicator is not None or
            self.PackageServiceOptions is not None or
            self.AdditionalHandlingIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PackageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PackageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PackageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PackageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackagingType is not None:
            self.PackagingType.export(outfile, level, namespace_, name_='PackagingType', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.DimWeight is not None:
            self.DimWeight.export(outfile, level, namespace_, name_='DimWeight', pretty_print=pretty_print)
        if self.PackageWeight is not None:
            self.PackageWeight.export(outfile, level, namespace_, name_='PackageWeight', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.LargePackageIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:LargePackageIndicator>%s</rate:LargePackageIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LargePackageIndicator), input_name='LargePackageIndicator')), eol_))
        if self.PackageServiceOptions is not None:
            self.PackageServiceOptions.export(outfile, level, namespace_, name_='PackageServiceOptions', pretty_print=pretty_print)
        if self.AdditionalHandlingIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AdditionalHandlingIndicator>%s</rate:AdditionalHandlingIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalHandlingIndicator), input_name='AdditionalHandlingIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackagingType':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'DimWeight':
            obj_ = PackageWeightType.factory()
            obj_.build(child_)
            self.DimWeight = obj_
            obj_.original_tagname_ = 'DimWeight'
        elif nodeName_ == 'PackageWeight':
            obj_ = PackageWeightType.factory()
            obj_.build(child_)
            self.PackageWeight = obj_
            obj_.original_tagname_ = 'PackageWeight'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'LargePackageIndicator':
            LargePackageIndicator_ = child_.text
            LargePackageIndicator_ = self.gds_validate_string(LargePackageIndicator_, node, 'LargePackageIndicator')
            self.LargePackageIndicator = LargePackageIndicator_
        elif nodeName_ == 'PackageServiceOptions':
            obj_ = PackageServiceOptionsType.factory()
            obj_.build(child_)
            self.PackageServiceOptions = obj_
            obj_.original_tagname_ = 'PackageServiceOptions'
        elif nodeName_ == 'AdditionalHandlingIndicator':
            AdditionalHandlingIndicator_ = child_.text
            AdditionalHandlingIndicator_ = self.gds_validate_string(AdditionalHandlingIndicator_, node, 'AdditionalHandlingIndicator')
            self.AdditionalHandlingIndicator = AdditionalHandlingIndicator_
# end class PackageType


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FreightClass=None, NMFC=None):
        self.original_tagname_ = None
        self.FreightClass = FreightClass
        self.NMFC = NMFC
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FreightClass(self): return self.FreightClass
    def set_FreightClass(self, FreightClass): self.FreightClass = FreightClass
    def get_NMFC(self): return self.NMFC
    def set_NMFC(self, NMFC): self.NMFC = NMFC
    def hasContent_(self):
        if (
            self.FreightClass is not None or
            self.NMFC is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='CommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:FreightClass>%s</rate:FreightClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), eol_))
        if self.NMFC is not None:
            self.NMFC.export(outfile, level, namespace_, name_='NMFC', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FreightClass':
            FreightClass_ = child_.text
            FreightClass_ = self.gds_validate_string(FreightClass_, node, 'FreightClass')
            self.FreightClass = FreightClass_
        elif nodeName_ == 'NMFC':
            obj_ = NMFCCommodityType.factory()
            obj_.build(child_)
            self.NMFC = obj_
            obj_.original_tagname_ = 'NMFC'
# end class CommodityType


class NMFCCommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PrimeCode=None, SubCode=None):
        self.original_tagname_ = None
        self.PrimeCode = PrimeCode
        self.SubCode = SubCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NMFCCommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NMFCCommodityType.subclass:
            return NMFCCommodityType.subclass(*args_, **kwargs_)
        else:
            return NMFCCommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PrimeCode(self): return self.PrimeCode
    def set_PrimeCode(self, PrimeCode): self.PrimeCode = PrimeCode
    def get_SubCode(self): return self.SubCode
    def set_SubCode(self, SubCode): self.SubCode = SubCode
    def hasContent_(self):
        if (
            self.PrimeCode is not None or
            self.SubCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='NMFCCommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NMFCCommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NMFCCommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='NMFCCommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='NMFCCommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='NMFCCommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrimeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PrimeCode>%s</rate:PrimeCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrimeCode), input_name='PrimeCode')), eol_))
        if self.SubCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SubCode>%s</rate:SubCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubCode), input_name='SubCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PrimeCode':
            PrimeCode_ = child_.text
            PrimeCode_ = self.gds_validate_string(PrimeCode_, node, 'PrimeCode')
            self.PrimeCode = PrimeCode_
        elif nodeName_ == 'SubCode':
            SubCode_ = child_.text
            SubCode_ = self.gds_validate_string(SubCode_, node, 'SubCode')
            self.SubCode = SubCode_
# end class NMFCCommodityType


class PackageServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DeliveryConfirmation=None, AccessPointCOD=None, COD=None, DeclaredValue=None, ShipperDeclaredValue=None, ProactiveIndicator=None, Insurance=None, VerbalConfirmationIndicator=None, UPSPremiumCareIndicator=None, HazMat=None, DryIce=None):
        self.original_tagname_ = None
        self.DeliveryConfirmation = DeliveryConfirmation
        self.AccessPointCOD = AccessPointCOD
        self.COD = COD
        self.DeclaredValue = DeclaredValue
        self.ShipperDeclaredValue = ShipperDeclaredValue
        self.ProactiveIndicator = ProactiveIndicator
        self.Insurance = Insurance
        self.VerbalConfirmationIndicator = VerbalConfirmationIndicator
        self.UPSPremiumCareIndicator = UPSPremiumCareIndicator
        self.HazMat = HazMat
        self.DryIce = DryIce
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsType.subclass:
            return PackageServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DeliveryConfirmation(self): return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation): self.DeliveryConfirmation = DeliveryConfirmation
    def get_AccessPointCOD(self): return self.AccessPointCOD
    def set_AccessPointCOD(self, AccessPointCOD): self.AccessPointCOD = AccessPointCOD
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_DeclaredValue(self): return self.DeclaredValue
    def set_DeclaredValue(self, DeclaredValue): self.DeclaredValue = DeclaredValue
    def get_ShipperDeclaredValue(self): return self.ShipperDeclaredValue
    def set_ShipperDeclaredValue(self, ShipperDeclaredValue): self.ShipperDeclaredValue = ShipperDeclaredValue
    def get_ProactiveIndicator(self): return self.ProactiveIndicator
    def set_ProactiveIndicator(self, ProactiveIndicator): self.ProactiveIndicator = ProactiveIndicator
    def get_Insurance(self): return self.Insurance
    def set_Insurance(self, Insurance): self.Insurance = Insurance
    def get_VerbalConfirmationIndicator(self): return self.VerbalConfirmationIndicator
    def set_VerbalConfirmationIndicator(self, VerbalConfirmationIndicator): self.VerbalConfirmationIndicator = VerbalConfirmationIndicator
    def get_UPSPremiumCareIndicator(self): return self.UPSPremiumCareIndicator
    def set_UPSPremiumCareIndicator(self, UPSPremiumCareIndicator): self.UPSPremiumCareIndicator = UPSPremiumCareIndicator
    def get_HazMat(self): return self.HazMat
    def set_HazMat(self, HazMat): self.HazMat = HazMat
    def get_DryIce(self): return self.DryIce
    def set_DryIce(self, DryIce): self.DryIce = DryIce
    def hasContent_(self):
        if (
            self.DeliveryConfirmation is not None or
            self.AccessPointCOD is not None or
            self.COD is not None or
            self.DeclaredValue is not None or
            self.ShipperDeclaredValue is not None or
            self.ProactiveIndicator is not None or
            self.Insurance is not None or
            self.VerbalConfirmationIndicator is not None or
            self.UPSPremiumCareIndicator is not None or
            self.HazMat is not None or
            self.DryIce is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PackageServiceOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PackageServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PackageServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PackageServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryConfirmation is not None:
            self.DeliveryConfirmation.export(outfile, level, namespace_, name_='DeliveryConfirmation', pretty_print=pretty_print)
        if self.AccessPointCOD is not None:
            self.AccessPointCOD.export(outfile, level, namespace_, name_='AccessPointCOD', pretty_print=pretty_print)
        if self.COD is not None:
            self.COD.export(outfile, level, namespace_, name_='COD', pretty_print=pretty_print)
        if self.DeclaredValue is not None:
            self.DeclaredValue.export(outfile, level, namespace_, name_='DeclaredValue', pretty_print=pretty_print)
        if self.ShipperDeclaredValue is not None:
            self.ShipperDeclaredValue.export(outfile, level, namespace_, name_='ShipperDeclaredValue', pretty_print=pretty_print)
        if self.ProactiveIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ProactiveIndicator>%s</rate:ProactiveIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProactiveIndicator), input_name='ProactiveIndicator')), eol_))
        if self.Insurance is not None:
            self.Insurance.export(outfile, level, namespace_, name_='Insurance', pretty_print=pretty_print)
        if self.VerbalConfirmationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:VerbalConfirmationIndicator>%s</rate:VerbalConfirmationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VerbalConfirmationIndicator), input_name='VerbalConfirmationIndicator')), eol_))
        if self.UPSPremiumCareIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:UPSPremiumCareIndicator>%s</rate:UPSPremiumCareIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UPSPremiumCareIndicator), input_name='UPSPremiumCareIndicator')), eol_))
        if self.HazMat is not None:
            self.HazMat.export(outfile, level, namespace_, name_='HazMat', pretty_print=pretty_print)
        if self.DryIce is not None:
            self.DryIce.export(outfile, level, namespace_, name_='DryIce', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DeliveryConfirmation':
            obj_ = DeliveryConfirmationType.factory()
            obj_.build(child_)
            self.DeliveryConfirmation = obj_
            obj_.original_tagname_ = 'DeliveryConfirmation'
        elif nodeName_ == 'AccessPointCOD':
            obj_ = PackageServiceOptionsAccessPointCODType.factory()
            obj_.build(child_)
            self.AccessPointCOD = obj_
            obj_.original_tagname_ = 'AccessPointCOD'
        elif nodeName_ == 'COD':
            obj_ = CODType.factory()
            obj_.build(child_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'DeclaredValue':
            obj_ = InsuredValueType.factory()
            obj_.build(child_)
            self.DeclaredValue = obj_
            obj_.original_tagname_ = 'DeclaredValue'
        elif nodeName_ == 'ShipperDeclaredValue':
            obj_ = ShipperDeclaredValueType.factory()
            obj_.build(child_)
            self.ShipperDeclaredValue = obj_
            obj_.original_tagname_ = 'ShipperDeclaredValue'
        elif nodeName_ == 'ProactiveIndicator':
            ProactiveIndicator_ = child_.text
            ProactiveIndicator_ = self.gds_validate_string(ProactiveIndicator_, node, 'ProactiveIndicator')
            self.ProactiveIndicator = ProactiveIndicator_
        elif nodeName_ == 'Insurance':
            obj_ = InsuranceType.factory()
            obj_.build(child_)
            self.Insurance = obj_
            obj_.original_tagname_ = 'Insurance'
        elif nodeName_ == 'VerbalConfirmationIndicator':
            VerbalConfirmationIndicator_ = child_.text
            VerbalConfirmationIndicator_ = self.gds_validate_string(VerbalConfirmationIndicator_, node, 'VerbalConfirmationIndicator')
            self.VerbalConfirmationIndicator = VerbalConfirmationIndicator_
        elif nodeName_ == 'UPSPremiumCareIndicator':
            UPSPremiumCareIndicator_ = child_.text
            UPSPremiumCareIndicator_ = self.gds_validate_string(UPSPremiumCareIndicator_, node, 'UPSPremiumCareIndicator')
            self.UPSPremiumCareIndicator = UPSPremiumCareIndicator_
        elif nodeName_ == 'HazMat':
            obj_ = HazMatType.factory()
            obj_.build(child_)
            self.HazMat = obj_
            obj_.original_tagname_ = 'HazMat'
        elif nodeName_ == 'DryIce':
            obj_ = DryIceType.factory()
            obj_.build(child_)
            self.DryIce = obj_
            obj_.original_tagname_ = 'DryIce'
# end class PackageServiceOptionsType


class HazMatType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageIdentifier=None, QValue=None, OverPackedIndicator=None, AllPackedInOneIndicator=None, HazMatChemicalRecord=None):
        self.original_tagname_ = None
        self.PackageIdentifier = PackageIdentifier
        self.QValue = QValue
        self.OverPackedIndicator = OverPackedIndicator
        self.AllPackedInOneIndicator = AllPackedInOneIndicator
        if HazMatChemicalRecord is None:
            self.HazMatChemicalRecord = []
        else:
            self.HazMatChemicalRecord = HazMatChemicalRecord
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazMatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazMatType.subclass:
            return HazMatType.subclass(*args_, **kwargs_)
        else:
            return HazMatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageIdentifier(self): return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier): self.PackageIdentifier = PackageIdentifier
    def get_QValue(self): return self.QValue
    def set_QValue(self, QValue): self.QValue = QValue
    def get_OverPackedIndicator(self): return self.OverPackedIndicator
    def set_OverPackedIndicator(self, OverPackedIndicator): self.OverPackedIndicator = OverPackedIndicator
    def get_AllPackedInOneIndicator(self): return self.AllPackedInOneIndicator
    def set_AllPackedInOneIndicator(self, AllPackedInOneIndicator): self.AllPackedInOneIndicator = AllPackedInOneIndicator
    def get_HazMatChemicalRecord(self): return self.HazMatChemicalRecord
    def set_HazMatChemicalRecord(self, HazMatChemicalRecord): self.HazMatChemicalRecord = HazMatChemicalRecord
    def add_HazMatChemicalRecord(self, value): self.HazMatChemicalRecord.append(value)
    def insert_HazMatChemicalRecord_at(self, index, value): self.HazMatChemicalRecord.insert(index, value)
    def replace_HazMatChemicalRecord_at(self, index, value): self.HazMatChemicalRecord[index] = value
    def hasContent_(self):
        if (
            self.PackageIdentifier is not None or
            self.QValue is not None or
            self.OverPackedIndicator is not None or
            self.AllPackedInOneIndicator is not None or
            self.HazMatChemicalRecord
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='HazMatType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazMatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HazMatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='HazMatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='HazMatType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='HazMatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackageIdentifier>%s</rate:PackageIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageIdentifier), input_name='PackageIdentifier')), eol_))
        if self.QValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:QValue>%s</rate:QValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.QValue), input_name='QValue')), eol_))
        if self.OverPackedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:OverPackedIndicator>%s</rate:OverPackedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OverPackedIndicator), input_name='OverPackedIndicator')), eol_))
        if self.AllPackedInOneIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AllPackedInOneIndicator>%s</rate:AllPackedInOneIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AllPackedInOneIndicator), input_name='AllPackedInOneIndicator')), eol_))
        for HazMatChemicalRecord_ in self.HazMatChemicalRecord:
            HazMatChemicalRecord_.export(outfile, level, namespace_, name_='HazMatChemicalRecord', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageIdentifier':
            PackageIdentifier_ = child_.text
            PackageIdentifier_ = self.gds_validate_string(PackageIdentifier_, node, 'PackageIdentifier')
            self.PackageIdentifier = PackageIdentifier_
        elif nodeName_ == 'QValue':
            QValue_ = child_.text
            QValue_ = self.gds_validate_string(QValue_, node, 'QValue')
            self.QValue = QValue_
        elif nodeName_ == 'OverPackedIndicator':
            OverPackedIndicator_ = child_.text
            OverPackedIndicator_ = self.gds_validate_string(OverPackedIndicator_, node, 'OverPackedIndicator')
            self.OverPackedIndicator = OverPackedIndicator_
        elif nodeName_ == 'AllPackedInOneIndicator':
            AllPackedInOneIndicator_ = child_.text
            AllPackedInOneIndicator_ = self.gds_validate_string(AllPackedInOneIndicator_, node, 'AllPackedInOneIndicator')
            self.AllPackedInOneIndicator = AllPackedInOneIndicator_
        elif nodeName_ == 'HazMatChemicalRecord':
            obj_ = HazMatChemicalRecordType.factory()
            obj_.build(child_)
            self.HazMatChemicalRecord.append(obj_)
            obj_.original_tagname_ = 'HazMatChemicalRecord'
# end class HazMatType


class HazMatChemicalRecordType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChemicalRecordIdentifier=None, ClassDivisionNumber=None, IDNumber=None, TransportationMode=None, RegulationSet=None, EmergencyPhone=None, EmergencyContact=None, ReportableQuantity=None, SubRiskClass=None, PackagingGroupType=None, Quantity=None, UOM=None, PackagingInstructionCode=None, ProperShippingName=None, TechnicalName=None, AdditionalDescription=None, PackagingType=None, HazardLabelRequired=None, PackagingTypeQuantity=None, CommodityRegulatedLevelCode=None, TransportCategory=None, TunnelRestrictionCode=None):
        self.original_tagname_ = None
        self.ChemicalRecordIdentifier = ChemicalRecordIdentifier
        self.ClassDivisionNumber = ClassDivisionNumber
        self.IDNumber = IDNumber
        self.TransportationMode = TransportationMode
        self.RegulationSet = RegulationSet
        self.EmergencyPhone = EmergencyPhone
        self.EmergencyContact = EmergencyContact
        self.ReportableQuantity = ReportableQuantity
        self.SubRiskClass = SubRiskClass
        self.PackagingGroupType = PackagingGroupType
        self.Quantity = Quantity
        self.UOM = UOM
        self.PackagingInstructionCode = PackagingInstructionCode
        self.ProperShippingName = ProperShippingName
        self.TechnicalName = TechnicalName
        self.AdditionalDescription = AdditionalDescription
        self.PackagingType = PackagingType
        self.HazardLabelRequired = HazardLabelRequired
        self.PackagingTypeQuantity = PackagingTypeQuantity
        self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode
        self.TransportCategory = TransportCategory
        self.TunnelRestrictionCode = TunnelRestrictionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazMatChemicalRecordType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazMatChemicalRecordType.subclass:
            return HazMatChemicalRecordType.subclass(*args_, **kwargs_)
        else:
            return HazMatChemicalRecordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChemicalRecordIdentifier(self): return self.ChemicalRecordIdentifier
    def set_ChemicalRecordIdentifier(self, ChemicalRecordIdentifier): self.ChemicalRecordIdentifier = ChemicalRecordIdentifier
    def get_ClassDivisionNumber(self): return self.ClassDivisionNumber
    def set_ClassDivisionNumber(self, ClassDivisionNumber): self.ClassDivisionNumber = ClassDivisionNumber
    def get_IDNumber(self): return self.IDNumber
    def set_IDNumber(self, IDNumber): self.IDNumber = IDNumber
    def get_TransportationMode(self): return self.TransportationMode
    def set_TransportationMode(self, TransportationMode): self.TransportationMode = TransportationMode
    def get_RegulationSet(self): return self.RegulationSet
    def set_RegulationSet(self, RegulationSet): self.RegulationSet = RegulationSet
    def get_EmergencyPhone(self): return self.EmergencyPhone
    def set_EmergencyPhone(self, EmergencyPhone): self.EmergencyPhone = EmergencyPhone
    def get_EmergencyContact(self): return self.EmergencyContact
    def set_EmergencyContact(self, EmergencyContact): self.EmergencyContact = EmergencyContact
    def get_ReportableQuantity(self): return self.ReportableQuantity
    def set_ReportableQuantity(self, ReportableQuantity): self.ReportableQuantity = ReportableQuantity
    def get_SubRiskClass(self): return self.SubRiskClass
    def set_SubRiskClass(self, SubRiskClass): self.SubRiskClass = SubRiskClass
    def get_PackagingGroupType(self): return self.PackagingGroupType
    def set_PackagingGroupType(self, PackagingGroupType): self.PackagingGroupType = PackagingGroupType
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UOM(self): return self.UOM
    def set_UOM(self, UOM): self.UOM = UOM
    def get_PackagingInstructionCode(self): return self.PackagingInstructionCode
    def set_PackagingInstructionCode(self, PackagingInstructionCode): self.PackagingInstructionCode = PackagingInstructionCode
    def get_ProperShippingName(self): return self.ProperShippingName
    def set_ProperShippingName(self, ProperShippingName): self.ProperShippingName = ProperShippingName
    def get_TechnicalName(self): return self.TechnicalName
    def set_TechnicalName(self, TechnicalName): self.TechnicalName = TechnicalName
    def get_AdditionalDescription(self): return self.AdditionalDescription
    def set_AdditionalDescription(self, AdditionalDescription): self.AdditionalDescription = AdditionalDescription
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_HazardLabelRequired(self): return self.HazardLabelRequired
    def set_HazardLabelRequired(self, HazardLabelRequired): self.HazardLabelRequired = HazardLabelRequired
    def get_PackagingTypeQuantity(self): return self.PackagingTypeQuantity
    def set_PackagingTypeQuantity(self, PackagingTypeQuantity): self.PackagingTypeQuantity = PackagingTypeQuantity
    def get_CommodityRegulatedLevelCode(self): return self.CommodityRegulatedLevelCode
    def set_CommodityRegulatedLevelCode(self, CommodityRegulatedLevelCode): self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode
    def get_TransportCategory(self): return self.TransportCategory
    def set_TransportCategory(self, TransportCategory): self.TransportCategory = TransportCategory
    def get_TunnelRestrictionCode(self): return self.TunnelRestrictionCode
    def set_TunnelRestrictionCode(self, TunnelRestrictionCode): self.TunnelRestrictionCode = TunnelRestrictionCode
    def hasContent_(self):
        if (
            self.ChemicalRecordIdentifier is not None or
            self.ClassDivisionNumber is not None or
            self.IDNumber is not None or
            self.TransportationMode is not None or
            self.RegulationSet is not None or
            self.EmergencyPhone is not None or
            self.EmergencyContact is not None or
            self.ReportableQuantity is not None or
            self.SubRiskClass is not None or
            self.PackagingGroupType is not None or
            self.Quantity is not None or
            self.UOM is not None or
            self.PackagingInstructionCode is not None or
            self.ProperShippingName is not None or
            self.TechnicalName is not None or
            self.AdditionalDescription is not None or
            self.PackagingType is not None or
            self.HazardLabelRequired is not None or
            self.PackagingTypeQuantity is not None or
            self.CommodityRegulatedLevelCode is not None or
            self.TransportCategory is not None or
            self.TunnelRestrictionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='HazMatChemicalRecordType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazMatChemicalRecordType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HazMatChemicalRecordType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='HazMatChemicalRecordType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='HazMatChemicalRecordType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='HazMatChemicalRecordType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChemicalRecordIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ChemicalRecordIdentifier>%s</rate:ChemicalRecordIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ChemicalRecordIdentifier), input_name='ChemicalRecordIdentifier')), eol_))
        if self.ClassDivisionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ClassDivisionNumber>%s</rate:ClassDivisionNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClassDivisionNumber), input_name='ClassDivisionNumber')), eol_))
        if self.IDNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:IDNumber>%s</rate:IDNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IDNumber), input_name='IDNumber')), eol_))
        if self.TransportationMode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TransportationMode>%s</rate:TransportationMode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransportationMode), input_name='TransportationMode')), eol_))
        if self.RegulationSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RegulationSet>%s</rate:RegulationSet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RegulationSet), input_name='RegulationSet')), eol_))
        if self.EmergencyPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:EmergencyPhone>%s</rate:EmergencyPhone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyPhone), input_name='EmergencyPhone')), eol_))
        if self.EmergencyContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:EmergencyContact>%s</rate:EmergencyContact>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyContact), input_name='EmergencyContact')), eol_))
        if self.ReportableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ReportableQuantity>%s</rate:ReportableQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReportableQuantity), input_name='ReportableQuantity')), eol_))
        if self.SubRiskClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SubRiskClass>%s</rate:SubRiskClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubRiskClass), input_name='SubRiskClass')), eol_))
        if self.PackagingGroupType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackagingGroupType>%s</rate:PackagingGroupType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingGroupType), input_name='PackagingGroupType')), eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Quantity>%s</rate:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.UOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:UOM>%s</rate:UOM>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UOM), input_name='UOM')), eol_))
        if self.PackagingInstructionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackagingInstructionCode>%s</rate:PackagingInstructionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingInstructionCode), input_name='PackagingInstructionCode')), eol_))
        if self.ProperShippingName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ProperShippingName>%s</rate:ProperShippingName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingName), input_name='ProperShippingName')), eol_))
        if self.TechnicalName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TechnicalName>%s</rate:TechnicalName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TechnicalName), input_name='TechnicalName')), eol_))
        if self.AdditionalDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AdditionalDescription>%s</rate:AdditionalDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDescription), input_name='AdditionalDescription')), eol_))
        if self.PackagingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackagingType>%s</rate:PackagingType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), eol_))
        if self.HazardLabelRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:HazardLabelRequired>%s</rate:HazardLabelRequired>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HazardLabelRequired), input_name='HazardLabelRequired')), eol_))
        if self.PackagingTypeQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackagingTypeQuantity>%s</rate:PackagingTypeQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingTypeQuantity), input_name='PackagingTypeQuantity')), eol_))
        if self.CommodityRegulatedLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CommodityRegulatedLevelCode>%s</rate:CommodityRegulatedLevelCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityRegulatedLevelCode), input_name='CommodityRegulatedLevelCode')), eol_))
        if self.TransportCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TransportCategory>%s</rate:TransportCategory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransportCategory), input_name='TransportCategory')), eol_))
        if self.TunnelRestrictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TunnelRestrictionCode>%s</rate:TunnelRestrictionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TunnelRestrictionCode), input_name='TunnelRestrictionCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChemicalRecordIdentifier':
            ChemicalRecordIdentifier_ = child_.text
            ChemicalRecordIdentifier_ = self.gds_validate_string(ChemicalRecordIdentifier_, node, 'ChemicalRecordIdentifier')
            self.ChemicalRecordIdentifier = ChemicalRecordIdentifier_
        elif nodeName_ == 'ClassDivisionNumber':
            ClassDivisionNumber_ = child_.text
            ClassDivisionNumber_ = self.gds_validate_string(ClassDivisionNumber_, node, 'ClassDivisionNumber')
            self.ClassDivisionNumber = ClassDivisionNumber_
        elif nodeName_ == 'IDNumber':
            IDNumber_ = child_.text
            IDNumber_ = self.gds_validate_string(IDNumber_, node, 'IDNumber')
            self.IDNumber = IDNumber_
        elif nodeName_ == 'TransportationMode':
            TransportationMode_ = child_.text
            TransportationMode_ = self.gds_validate_string(TransportationMode_, node, 'TransportationMode')
            self.TransportationMode = TransportationMode_
        elif nodeName_ == 'RegulationSet':
            RegulationSet_ = child_.text
            RegulationSet_ = self.gds_validate_string(RegulationSet_, node, 'RegulationSet')
            self.RegulationSet = RegulationSet_
        elif nodeName_ == 'EmergencyPhone':
            EmergencyPhone_ = child_.text
            EmergencyPhone_ = self.gds_validate_string(EmergencyPhone_, node, 'EmergencyPhone')
            self.EmergencyPhone = EmergencyPhone_
        elif nodeName_ == 'EmergencyContact':
            EmergencyContact_ = child_.text
            EmergencyContact_ = self.gds_validate_string(EmergencyContact_, node, 'EmergencyContact')
            self.EmergencyContact = EmergencyContact_
        elif nodeName_ == 'ReportableQuantity':
            ReportableQuantity_ = child_.text
            ReportableQuantity_ = self.gds_validate_string(ReportableQuantity_, node, 'ReportableQuantity')
            self.ReportableQuantity = ReportableQuantity_
        elif nodeName_ == 'SubRiskClass':
            SubRiskClass_ = child_.text
            SubRiskClass_ = self.gds_validate_string(SubRiskClass_, node, 'SubRiskClass')
            self.SubRiskClass = SubRiskClass_
        elif nodeName_ == 'PackagingGroupType':
            PackagingGroupType_ = child_.text
            PackagingGroupType_ = self.gds_validate_string(PackagingGroupType_, node, 'PackagingGroupType')
            self.PackagingGroupType = PackagingGroupType_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UOM':
            UOM_ = child_.text
            UOM_ = self.gds_validate_string(UOM_, node, 'UOM')
            self.UOM = UOM_
        elif nodeName_ == 'PackagingInstructionCode':
            PackagingInstructionCode_ = child_.text
            PackagingInstructionCode_ = self.gds_validate_string(PackagingInstructionCode_, node, 'PackagingInstructionCode')
            self.PackagingInstructionCode = PackagingInstructionCode_
        elif nodeName_ == 'ProperShippingName':
            ProperShippingName_ = child_.text
            ProperShippingName_ = self.gds_validate_string(ProperShippingName_, node, 'ProperShippingName')
            self.ProperShippingName = ProperShippingName_
        elif nodeName_ == 'TechnicalName':
            TechnicalName_ = child_.text
            TechnicalName_ = self.gds_validate_string(TechnicalName_, node, 'TechnicalName')
            self.TechnicalName = TechnicalName_
        elif nodeName_ == 'AdditionalDescription':
            AdditionalDescription_ = child_.text
            AdditionalDescription_ = self.gds_validate_string(AdditionalDescription_, node, 'AdditionalDescription')
            self.AdditionalDescription = AdditionalDescription_
        elif nodeName_ == 'PackagingType':
            PackagingType_ = child_.text
            PackagingType_ = self.gds_validate_string(PackagingType_, node, 'PackagingType')
            self.PackagingType = PackagingType_
        elif nodeName_ == 'HazardLabelRequired':
            HazardLabelRequired_ = child_.text
            HazardLabelRequired_ = self.gds_validate_string(HazardLabelRequired_, node, 'HazardLabelRequired')
            self.HazardLabelRequired = HazardLabelRequired_
        elif nodeName_ == 'PackagingTypeQuantity':
            PackagingTypeQuantity_ = child_.text
            PackagingTypeQuantity_ = self.gds_validate_string(PackagingTypeQuantity_, node, 'PackagingTypeQuantity')
            self.PackagingTypeQuantity = PackagingTypeQuantity_
        elif nodeName_ == 'CommodityRegulatedLevelCode':
            CommodityRegulatedLevelCode_ = child_.text
            CommodityRegulatedLevelCode_ = self.gds_validate_string(CommodityRegulatedLevelCode_, node, 'CommodityRegulatedLevelCode')
            self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode_
        elif nodeName_ == 'TransportCategory':
            TransportCategory_ = child_.text
            TransportCategory_ = self.gds_validate_string(TransportCategory_, node, 'TransportCategory')
            self.TransportCategory = TransportCategory_
        elif nodeName_ == 'TunnelRestrictionCode':
            TunnelRestrictionCode_ = child_.text
            TunnelRestrictionCode_ = self.gds_validate_string(TunnelRestrictionCode_, node, 'TunnelRestrictionCode')
            self.TunnelRestrictionCode = TunnelRestrictionCode_
# end class HazMatChemicalRecordType


class PackageServiceOptionsAccessPointCODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsAccessPointCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsAccessPointCODType.subclass:
            return PackageServiceOptionsAccessPointCODType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsAccessPointCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PackageServiceOptionsAccessPointCODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsAccessPointCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageServiceOptionsAccessPointCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PackageServiceOptionsAccessPointCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PackageServiceOptionsAccessPointCODType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PackageServiceOptionsAccessPointCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class PackageServiceOptionsAccessPointCODType


class DryIceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RegulationSet=None, DryIceWeight=None, MedicalUseIndicator=None, AuditRequired=None):
        self.original_tagname_ = None
        self.RegulationSet = RegulationSet
        self.DryIceWeight = DryIceWeight
        self.MedicalUseIndicator = MedicalUseIndicator
        self.AuditRequired = AuditRequired
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DryIceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DryIceType.subclass:
            return DryIceType.subclass(*args_, **kwargs_)
        else:
            return DryIceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RegulationSet(self): return self.RegulationSet
    def set_RegulationSet(self, RegulationSet): self.RegulationSet = RegulationSet
    def get_DryIceWeight(self): return self.DryIceWeight
    def set_DryIceWeight(self, DryIceWeight): self.DryIceWeight = DryIceWeight
    def get_MedicalUseIndicator(self): return self.MedicalUseIndicator
    def set_MedicalUseIndicator(self, MedicalUseIndicator): self.MedicalUseIndicator = MedicalUseIndicator
    def get_AuditRequired(self): return self.AuditRequired
    def set_AuditRequired(self, AuditRequired): self.AuditRequired = AuditRequired
    def hasContent_(self):
        if (
            self.RegulationSet is not None or
            self.DryIceWeight is not None or
            self.MedicalUseIndicator is not None or
            self.AuditRequired is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='DryIceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DryIceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DryIceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='DryIceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='DryIceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='DryIceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegulationSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RegulationSet>%s</rate:RegulationSet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RegulationSet), input_name='RegulationSet')), eol_))
        if self.DryIceWeight is not None:
            self.DryIceWeight.export(outfile, level, namespace_, name_='DryIceWeight', pretty_print=pretty_print)
        if self.MedicalUseIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MedicalUseIndicator>%s</rate:MedicalUseIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MedicalUseIndicator), input_name='MedicalUseIndicator')), eol_))
        if self.AuditRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AuditRequired>%s</rate:AuditRequired>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AuditRequired), input_name='AuditRequired')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RegulationSet':
            RegulationSet_ = child_.text
            RegulationSet_ = self.gds_validate_string(RegulationSet_, node, 'RegulationSet')
            self.RegulationSet = RegulationSet_
        elif nodeName_ == 'DryIceWeight':
            obj_ = DryIceWeightType.factory()
            obj_.build(child_)
            self.DryIceWeight = obj_
            obj_.original_tagname_ = 'DryIceWeight'
        elif nodeName_ == 'MedicalUseIndicator':
            MedicalUseIndicator_ = child_.text
            MedicalUseIndicator_ = self.gds_validate_string(MedicalUseIndicator_, node, 'MedicalUseIndicator')
            self.MedicalUseIndicator = MedicalUseIndicator_
        elif nodeName_ == 'AuditRequired':
            AuditRequired_ = child_.text
            AuditRequired_ = self.gds_validate_string(AuditRequired_, node, 'AuditRequired')
            self.AuditRequired = AuditRequired_
# end class DryIceType


class DryIceWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DryIceWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DryIceWeightType.subclass:
            return DryIceWeightType.subclass(*args_, **kwargs_)
        else:
            return DryIceWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='DryIceWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DryIceWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DryIceWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='DryIceWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='DryIceWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='DryIceWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Weight>%s</rate:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class DryIceWeightType


class ShipperDeclaredValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperDeclaredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperDeclaredValueType.subclass:
            return ShipperDeclaredValueType.subclass(*args_, **kwargs_)
        else:
            return ShipperDeclaredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipperDeclaredValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperDeclaredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipperDeclaredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipperDeclaredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipperDeclaredValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipperDeclaredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class ShipperDeclaredValueType


class InsuranceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BasicFlexibleParcelIndicator=None, ExtendedFlexibleParcelIndicator=None, TimeInTransitFlexibleParcelIndicator=None):
        self.original_tagname_ = None
        self.BasicFlexibleParcelIndicator = BasicFlexibleParcelIndicator
        self.ExtendedFlexibleParcelIndicator = ExtendedFlexibleParcelIndicator
        self.TimeInTransitFlexibleParcelIndicator = TimeInTransitFlexibleParcelIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InsuranceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InsuranceType.subclass:
            return InsuranceType.subclass(*args_, **kwargs_)
        else:
            return InsuranceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BasicFlexibleParcelIndicator(self): return self.BasicFlexibleParcelIndicator
    def set_BasicFlexibleParcelIndicator(self, BasicFlexibleParcelIndicator): self.BasicFlexibleParcelIndicator = BasicFlexibleParcelIndicator
    def get_ExtendedFlexibleParcelIndicator(self): return self.ExtendedFlexibleParcelIndicator
    def set_ExtendedFlexibleParcelIndicator(self, ExtendedFlexibleParcelIndicator): self.ExtendedFlexibleParcelIndicator = ExtendedFlexibleParcelIndicator
    def get_TimeInTransitFlexibleParcelIndicator(self): return self.TimeInTransitFlexibleParcelIndicator
    def set_TimeInTransitFlexibleParcelIndicator(self, TimeInTransitFlexibleParcelIndicator): self.TimeInTransitFlexibleParcelIndicator = TimeInTransitFlexibleParcelIndicator
    def hasContent_(self):
        if (
            self.BasicFlexibleParcelIndicator is not None or
            self.ExtendedFlexibleParcelIndicator is not None or
            self.TimeInTransitFlexibleParcelIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='InsuranceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InsuranceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InsuranceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='InsuranceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='InsuranceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='InsuranceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BasicFlexibleParcelIndicator is not None:
            self.BasicFlexibleParcelIndicator.export(outfile, level, namespace_, name_='BasicFlexibleParcelIndicator', pretty_print=pretty_print)
        if self.ExtendedFlexibleParcelIndicator is not None:
            self.ExtendedFlexibleParcelIndicator.export(outfile, level, namespace_, name_='ExtendedFlexibleParcelIndicator', pretty_print=pretty_print)
        if self.TimeInTransitFlexibleParcelIndicator is not None:
            self.TimeInTransitFlexibleParcelIndicator.export(outfile, level, namespace_, name_='TimeInTransitFlexibleParcelIndicator', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BasicFlexibleParcelIndicator':
            obj_ = InsuranceValueType.factory()
            obj_.build(child_)
            self.BasicFlexibleParcelIndicator = obj_
            obj_.original_tagname_ = 'BasicFlexibleParcelIndicator'
        elif nodeName_ == 'ExtendedFlexibleParcelIndicator':
            obj_ = InsuranceValueType.factory()
            obj_.build(child_)
            self.ExtendedFlexibleParcelIndicator = obj_
            obj_.original_tagname_ = 'ExtendedFlexibleParcelIndicator'
        elif nodeName_ == 'TimeInTransitFlexibleParcelIndicator':
            obj_ = InsuranceValueType.factory()
            obj_.build(child_)
            self.TimeInTransitFlexibleParcelIndicator = obj_
            obj_.original_tagname_ = 'TimeInTransitFlexibleParcelIndicator'
# end class InsuranceType


class InsuranceValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InsuranceValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InsuranceValueType.subclass:
            return InsuranceValueType.subclass(*args_, **kwargs_)
        else:
            return InsuranceValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='InsuranceValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InsuranceValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InsuranceValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='InsuranceValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='InsuranceValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='InsuranceValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InsuranceValueType


class PackageWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageWeightType.subclass:
            return PackageWeightType.subclass(*args_, **kwargs_)
        else:
            return PackageWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PackageWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PackageWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PackageWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PackageWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Weight>%s</rate:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class PackageWeightType


class UOMCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UOMCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UOMCodeDescriptionType.subclass:
            return UOMCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return UOMCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='UOMCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UOMCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UOMCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='UOMCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='UOMCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='UOMCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UOMCodeDescriptionType


class CodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='CodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='CodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='CodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Description>%s</common:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CodeDescriptionType


class ShipmentRatingOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NegotiatedRatesIndicator=None, FRSShipmentIndicator=None, RateChartIndicator=None, UserLevelDiscountIndicator=None):
        self.original_tagname_ = None
        self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
        self.FRSShipmentIndicator = FRSShipmentIndicator
        self.RateChartIndicator = RateChartIndicator
        self.UserLevelDiscountIndicator = UserLevelDiscountIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRatingOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRatingOptionsType.subclass:
            return ShipmentRatingOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentRatingOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NegotiatedRatesIndicator(self): return self.NegotiatedRatesIndicator
    def set_NegotiatedRatesIndicator(self, NegotiatedRatesIndicator): self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
    def get_FRSShipmentIndicator(self): return self.FRSShipmentIndicator
    def set_FRSShipmentIndicator(self, FRSShipmentIndicator): self.FRSShipmentIndicator = FRSShipmentIndicator
    def get_RateChartIndicator(self): return self.RateChartIndicator
    def set_RateChartIndicator(self, RateChartIndicator): self.RateChartIndicator = RateChartIndicator
    def get_UserLevelDiscountIndicator(self): return self.UserLevelDiscountIndicator
    def set_UserLevelDiscountIndicator(self, UserLevelDiscountIndicator): self.UserLevelDiscountIndicator = UserLevelDiscountIndicator
    def hasContent_(self):
        if (
            self.NegotiatedRatesIndicator is not None or
            self.FRSShipmentIndicator is not None or
            self.RateChartIndicator is not None or
            self.UserLevelDiscountIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipmentRatingOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRatingOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentRatingOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipmentRatingOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipmentRatingOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipmentRatingOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NegotiatedRatesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:NegotiatedRatesIndicator>%s</rate:NegotiatedRatesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NegotiatedRatesIndicator), input_name='NegotiatedRatesIndicator')), eol_))
        if self.FRSShipmentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:FRSShipmentIndicator>%s</rate:FRSShipmentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FRSShipmentIndicator), input_name='FRSShipmentIndicator')), eol_))
        if self.RateChartIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RateChartIndicator>%s</rate:RateChartIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RateChartIndicator), input_name='RateChartIndicator')), eol_))
        if self.UserLevelDiscountIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:UserLevelDiscountIndicator>%s</rate:UserLevelDiscountIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserLevelDiscountIndicator), input_name='UserLevelDiscountIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NegotiatedRatesIndicator':
            NegotiatedRatesIndicator_ = child_.text
            NegotiatedRatesIndicator_ = self.gds_validate_string(NegotiatedRatesIndicator_, node, 'NegotiatedRatesIndicator')
            self.NegotiatedRatesIndicator = NegotiatedRatesIndicator_
        elif nodeName_ == 'FRSShipmentIndicator':
            FRSShipmentIndicator_ = child_.text
            FRSShipmentIndicator_ = self.gds_validate_string(FRSShipmentIndicator_, node, 'FRSShipmentIndicator')
            self.FRSShipmentIndicator = FRSShipmentIndicator_
        elif nodeName_ == 'RateChartIndicator':
            RateChartIndicator_ = child_.text
            RateChartIndicator_ = self.gds_validate_string(RateChartIndicator_, node, 'RateChartIndicator')
            self.RateChartIndicator = RateChartIndicator_
        elif nodeName_ == 'UserLevelDiscountIndicator':
            UserLevelDiscountIndicator_ = child_.text
            UserLevelDiscountIndicator_ = self.gds_validate_string(UserLevelDiscountIndicator_, node, 'UserLevelDiscountIndicator')
            self.UserLevelDiscountIndicator = UserLevelDiscountIndicator_
# end class ShipmentRatingOptionsType


class ShipFromType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipFromType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipFromType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipFromType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipFromType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Name>%s</rate:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = ShipAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ShipFromType


class ShipToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Name>%s</rate:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = ShipToAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ShipToType


class ShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OriginRecordTransactionTimestamp=None, Shipper=None, ShipTo=None, ShipFrom=None, AlternateDeliveryAddress=None, ShipmentIndicationType=None, PaymentDetails=None, FRSPaymentInformation=None, FreightShipmentInformation=None, GoodsNotInFreeCirculationIndicator=None, Service=None, NumOfPieces=None, ShipmentTotalWeight=None, DocumentsOnlyIndicator=None, Package=None, ShipmentServiceOptions=None, ShipmentRatingOptions=None, InvoiceLineTotal=None, RatingMethodRequestedIndicator=None, TaxInformationIndicator=None, PromotionalDiscountInformation=None, DeliveryTimeInformation=None):
        self.original_tagname_ = None
        self.OriginRecordTransactionTimestamp = OriginRecordTransactionTimestamp
        self.Shipper = Shipper
        self.ShipTo = ShipTo
        self.ShipFrom = ShipFrom
        self.AlternateDeliveryAddress = AlternateDeliveryAddress
        if ShipmentIndicationType is None:
            self.ShipmentIndicationType = []
        else:
            self.ShipmentIndicationType = ShipmentIndicationType
        self.PaymentDetails = PaymentDetails
        self.FRSPaymentInformation = FRSPaymentInformation
        self.FreightShipmentInformation = FreightShipmentInformation
        self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator
        self.Service = Service
        self.NumOfPieces = NumOfPieces
        self.ShipmentTotalWeight = ShipmentTotalWeight
        self.DocumentsOnlyIndicator = DocumentsOnlyIndicator
        if Package is None:
            self.Package = []
        else:
            self.Package = Package
        self.ShipmentServiceOptions = ShipmentServiceOptions
        self.ShipmentRatingOptions = ShipmentRatingOptions
        self.InvoiceLineTotal = InvoiceLineTotal
        self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator
        self.TaxInformationIndicator = TaxInformationIndicator
        self.PromotionalDiscountInformation = PromotionalDiscountInformation
        self.DeliveryTimeInformation = DeliveryTimeInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OriginRecordTransactionTimestamp(self): return self.OriginRecordTransactionTimestamp
    def set_OriginRecordTransactionTimestamp(self, OriginRecordTransactionTimestamp): self.OriginRecordTransactionTimestamp = OriginRecordTransactionTimestamp
    def get_Shipper(self): return self.Shipper
    def set_Shipper(self, Shipper): self.Shipper = Shipper
    def get_ShipTo(self): return self.ShipTo
    def set_ShipTo(self, ShipTo): self.ShipTo = ShipTo
    def get_ShipFrom(self): return self.ShipFrom
    def set_ShipFrom(self, ShipFrom): self.ShipFrom = ShipFrom
    def get_AlternateDeliveryAddress(self): return self.AlternateDeliveryAddress
    def set_AlternateDeliveryAddress(self, AlternateDeliveryAddress): self.AlternateDeliveryAddress = AlternateDeliveryAddress
    def get_ShipmentIndicationType(self): return self.ShipmentIndicationType
    def set_ShipmentIndicationType(self, ShipmentIndicationType): self.ShipmentIndicationType = ShipmentIndicationType
    def add_ShipmentIndicationType(self, value): self.ShipmentIndicationType.append(value)
    def insert_ShipmentIndicationType_at(self, index, value): self.ShipmentIndicationType.insert(index, value)
    def replace_ShipmentIndicationType_at(self, index, value): self.ShipmentIndicationType[index] = value
    def get_PaymentDetails(self): return self.PaymentDetails
    def set_PaymentDetails(self, PaymentDetails): self.PaymentDetails = PaymentDetails
    def get_FRSPaymentInformation(self): return self.FRSPaymentInformation
    def set_FRSPaymentInformation(self, FRSPaymentInformation): self.FRSPaymentInformation = FRSPaymentInformation
    def get_FreightShipmentInformation(self): return self.FreightShipmentInformation
    def set_FreightShipmentInformation(self, FreightShipmentInformation): self.FreightShipmentInformation = FreightShipmentInformation
    def get_GoodsNotInFreeCirculationIndicator(self): return self.GoodsNotInFreeCirculationIndicator
    def set_GoodsNotInFreeCirculationIndicator(self, GoodsNotInFreeCirculationIndicator): self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_NumOfPieces(self): return self.NumOfPieces
    def set_NumOfPieces(self, NumOfPieces): self.NumOfPieces = NumOfPieces
    def get_ShipmentTotalWeight(self): return self.ShipmentTotalWeight
    def set_ShipmentTotalWeight(self, ShipmentTotalWeight): self.ShipmentTotalWeight = ShipmentTotalWeight
    def get_DocumentsOnlyIndicator(self): return self.DocumentsOnlyIndicator
    def set_DocumentsOnlyIndicator(self, DocumentsOnlyIndicator): self.DocumentsOnlyIndicator = DocumentsOnlyIndicator
    def get_Package(self): return self.Package
    def set_Package(self, Package): self.Package = Package
    def add_Package(self, value): self.Package.append(value)
    def insert_Package_at(self, index, value): self.Package.insert(index, value)
    def replace_Package_at(self, index, value): self.Package[index] = value
    def get_ShipmentServiceOptions(self): return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions): self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_ShipmentRatingOptions(self): return self.ShipmentRatingOptions
    def set_ShipmentRatingOptions(self, ShipmentRatingOptions): self.ShipmentRatingOptions = ShipmentRatingOptions
    def get_InvoiceLineTotal(self): return self.InvoiceLineTotal
    def set_InvoiceLineTotal(self, InvoiceLineTotal): self.InvoiceLineTotal = InvoiceLineTotal
    def get_RatingMethodRequestedIndicator(self): return self.RatingMethodRequestedIndicator
    def set_RatingMethodRequestedIndicator(self, RatingMethodRequestedIndicator): self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator
    def get_TaxInformationIndicator(self): return self.TaxInformationIndicator
    def set_TaxInformationIndicator(self, TaxInformationIndicator): self.TaxInformationIndicator = TaxInformationIndicator
    def get_PromotionalDiscountInformation(self): return self.PromotionalDiscountInformation
    def set_PromotionalDiscountInformation(self, PromotionalDiscountInformation): self.PromotionalDiscountInformation = PromotionalDiscountInformation
    def get_DeliveryTimeInformation(self): return self.DeliveryTimeInformation
    def set_DeliveryTimeInformation(self, DeliveryTimeInformation): self.DeliveryTimeInformation = DeliveryTimeInformation
    def hasContent_(self):
        if (
            self.OriginRecordTransactionTimestamp is not None or
            self.Shipper is not None or
            self.ShipTo is not None or
            self.ShipFrom is not None or
            self.AlternateDeliveryAddress is not None or
            self.ShipmentIndicationType or
            self.PaymentDetails is not None or
            self.FRSPaymentInformation is not None or
            self.FreightShipmentInformation is not None or
            self.GoodsNotInFreeCirculationIndicator is not None or
            self.Service is not None or
            self.NumOfPieces is not None or
            self.ShipmentTotalWeight is not None or
            self.DocumentsOnlyIndicator is not None or
            self.Package or
            self.ShipmentServiceOptions is not None or
            self.ShipmentRatingOptions is not None or
            self.InvoiceLineTotal is not None or
            self.RatingMethodRequestedIndicator is not None or
            self.TaxInformationIndicator is not None or
            self.PromotionalDiscountInformation is not None or
            self.DeliveryTimeInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OriginRecordTransactionTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:OriginRecordTransactionTimestamp>%s</rate:OriginRecordTransactionTimestamp>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginRecordTransactionTimestamp), input_name='OriginRecordTransactionTimestamp')), eol_))
        if self.Shipper is not None:
            self.Shipper.export(outfile, level, namespace_, name_='Shipper', pretty_print=pretty_print)
        if self.ShipTo is not None:
            self.ShipTo.export(outfile, level, namespace_, name_='ShipTo', pretty_print=pretty_print)
        if self.ShipFrom is not None:
            self.ShipFrom.export(outfile, level, namespace_, name_='ShipFrom', pretty_print=pretty_print)
        if self.AlternateDeliveryAddress is not None:
            self.AlternateDeliveryAddress.export(outfile, level, namespace_, name_='AlternateDeliveryAddress', pretty_print=pretty_print)
        for ShipmentIndicationType_ in self.ShipmentIndicationType:
            ShipmentIndicationType_.export(outfile, level, namespace_, name_='ShipmentIndicationType', pretty_print=pretty_print)
        if self.PaymentDetails is not None:
            self.PaymentDetails.export(outfile, level, namespace_, name_='PaymentDetails', pretty_print=pretty_print)
        if self.FRSPaymentInformation is not None:
            self.FRSPaymentInformation.export(outfile, level, namespace_, name_='FRSPaymentInformation', pretty_print=pretty_print)
        if self.FreightShipmentInformation is not None:
            self.FreightShipmentInformation.export(outfile, level, namespace_, name_='FreightShipmentInformation', pretty_print=pretty_print)
        if self.GoodsNotInFreeCirculationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:GoodsNotInFreeCirculationIndicator>%s</rate:GoodsNotInFreeCirculationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GoodsNotInFreeCirculationIndicator), input_name='GoodsNotInFreeCirculationIndicator')), eol_))
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.NumOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:NumOfPieces>%s</rate:NumOfPieces>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumOfPieces), input_name='NumOfPieces')), eol_))
        if self.ShipmentTotalWeight is not None:
            self.ShipmentTotalWeight.export(outfile, level, namespace_, name_='ShipmentTotalWeight', pretty_print=pretty_print)
        if self.DocumentsOnlyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DocumentsOnlyIndicator>%s</rate:DocumentsOnlyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentsOnlyIndicator), input_name='DocumentsOnlyIndicator')), eol_))
        for Package_ in self.Package:
            Package_.export(outfile, level, namespace_, name_='Package', pretty_print=pretty_print)
        if self.ShipmentServiceOptions is not None:
            self.ShipmentServiceOptions.export(outfile, level, namespace_, name_='ShipmentServiceOptions', pretty_print=pretty_print)
        if self.ShipmentRatingOptions is not None:
            self.ShipmentRatingOptions.export(outfile, level, namespace_, name_='ShipmentRatingOptions', pretty_print=pretty_print)
        if self.InvoiceLineTotal is not None:
            self.InvoiceLineTotal.export(outfile, level, namespace_, name_='InvoiceLineTotal', pretty_print=pretty_print)
        if self.RatingMethodRequestedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:RatingMethodRequestedIndicator>%s</rate:RatingMethodRequestedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RatingMethodRequestedIndicator), input_name='RatingMethodRequestedIndicator')), eol_))
        if self.TaxInformationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TaxInformationIndicator>%s</rate:TaxInformationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxInformationIndicator), input_name='TaxInformationIndicator')), eol_))
        if self.PromotionalDiscountInformation is not None:
            self.PromotionalDiscountInformation.export(outfile, level, namespace_, name_='PromotionalDiscountInformation', pretty_print=pretty_print)
        if self.DeliveryTimeInformation is not None:
            self.DeliveryTimeInformation.export(outfile, level, namespace_, name_='DeliveryTimeInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OriginRecordTransactionTimestamp':
            OriginRecordTransactionTimestamp_ = child_.text
            OriginRecordTransactionTimestamp_ = self.gds_validate_string(OriginRecordTransactionTimestamp_, node, 'OriginRecordTransactionTimestamp')
            self.OriginRecordTransactionTimestamp = OriginRecordTransactionTimestamp_
        elif nodeName_ == 'Shipper':
            obj_ = ShipperType.factory()
            obj_.build(child_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory()
            obj_.build(child_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory()
            obj_.build(child_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'AlternateDeliveryAddress':
            obj_ = AlternateDeliveryAddressType.factory()
            obj_.build(child_)
            self.AlternateDeliveryAddress = obj_
            obj_.original_tagname_ = 'AlternateDeliveryAddress'
        elif nodeName_ == 'ShipmentIndicationType':
            obj_ = IndicationType.factory()
            obj_.build(child_)
            self.ShipmentIndicationType.append(obj_)
            obj_.original_tagname_ = 'ShipmentIndicationType'
        elif nodeName_ == 'PaymentDetails':
            obj_ = PaymentDetailsType.factory()
            obj_.build(child_)
            self.PaymentDetails = obj_
            obj_.original_tagname_ = 'PaymentDetails'
        elif nodeName_ == 'FRSPaymentInformation':
            obj_ = FRSPaymentInfoType.factory()
            obj_.build(child_)
            self.FRSPaymentInformation = obj_
            obj_.original_tagname_ = 'FRSPaymentInformation'
        elif nodeName_ == 'FreightShipmentInformation':
            obj_ = FreightShipmentInformationType.factory()
            obj_.build(child_)
            self.FreightShipmentInformation = obj_
            obj_.original_tagname_ = 'FreightShipmentInformation'
        elif nodeName_ == 'GoodsNotInFreeCirculationIndicator':
            GoodsNotInFreeCirculationIndicator_ = child_.text
            GoodsNotInFreeCirculationIndicator_ = self.gds_validate_string(GoodsNotInFreeCirculationIndicator_, node, 'GoodsNotInFreeCirculationIndicator')
            self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator_
        elif nodeName_ == 'Service':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'NumOfPieces':
            NumOfPieces_ = child_.text
            NumOfPieces_ = self.gds_validate_string(NumOfPieces_, node, 'NumOfPieces')
            self.NumOfPieces = NumOfPieces_
        elif nodeName_ == 'ShipmentTotalWeight':
            obj_ = ShipmentWeightType.factory()
            obj_.build(child_)
            self.ShipmentTotalWeight = obj_
            obj_.original_tagname_ = 'ShipmentTotalWeight'
        elif nodeName_ == 'DocumentsOnlyIndicator':
            DocumentsOnlyIndicator_ = child_.text
            DocumentsOnlyIndicator_ = self.gds_validate_string(DocumentsOnlyIndicator_, node, 'DocumentsOnlyIndicator')
            self.DocumentsOnlyIndicator = DocumentsOnlyIndicator_
        elif nodeName_ == 'Package':
            obj_ = PackageType.factory()
            obj_.build(child_)
            self.Package.append(obj_)
            obj_.original_tagname_ = 'Package'
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType.factory()
            obj_.build(child_)
            self.ShipmentServiceOptions = obj_
            obj_.original_tagname_ = 'ShipmentServiceOptions'
        elif nodeName_ == 'ShipmentRatingOptions':
            obj_ = ShipmentRatingOptionsType.factory()
            obj_.build(child_)
            self.ShipmentRatingOptions = obj_
            obj_.original_tagname_ = 'ShipmentRatingOptions'
        elif nodeName_ == 'InvoiceLineTotal':
            obj_ = InvoiceLineTotalType.factory()
            obj_.build(child_)
            self.InvoiceLineTotal = obj_
            obj_.original_tagname_ = 'InvoiceLineTotal'
        elif nodeName_ == 'RatingMethodRequestedIndicator':
            RatingMethodRequestedIndicator_ = child_.text
            RatingMethodRequestedIndicator_ = self.gds_validate_string(RatingMethodRequestedIndicator_, node, 'RatingMethodRequestedIndicator')
            self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator_
        elif nodeName_ == 'TaxInformationIndicator':
            TaxInformationIndicator_ = child_.text
            TaxInformationIndicator_ = self.gds_validate_string(TaxInformationIndicator_, node, 'TaxInformationIndicator')
            self.TaxInformationIndicator = TaxInformationIndicator_
        elif nodeName_ == 'PromotionalDiscountInformation':
            obj_ = PromotionalDiscountInformationType.factory()
            obj_.build(child_)
            self.PromotionalDiscountInformation = obj_
            obj_.original_tagname_ = 'PromotionalDiscountInformation'
        elif nodeName_ == 'DeliveryTimeInformation':
            obj_ = TimeInTransitRequestType.factory()
            obj_.build(child_)
            self.DeliveryTimeInformation = obj_
            obj_.original_tagname_ = 'DeliveryTimeInformation'
# end class ShipmentType


class TimeInTransitRequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageBillType=None, Pickup=None):
        self.original_tagname_ = None
        self.PackageBillType = PackageBillType
        self.Pickup = Pickup
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeInTransitRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeInTransitRequestType.subclass:
            return TimeInTransitRequestType.subclass(*args_, **kwargs_)
        else:
            return TimeInTransitRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageBillType(self): return self.PackageBillType
    def set_PackageBillType(self, PackageBillType): self.PackageBillType = PackageBillType
    def get_Pickup(self): return self.Pickup
    def set_Pickup(self, Pickup): self.Pickup = Pickup
    def hasContent_(self):
        if (
            self.PackageBillType is not None or
            self.Pickup is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='TimeInTransitRequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeInTransitRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeInTransitRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='TimeInTransitRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='TimeInTransitRequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='TimeInTransitRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageBillType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PackageBillType>%s</rate:PackageBillType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageBillType), input_name='PackageBillType')), eol_))
        if self.Pickup is not None:
            self.Pickup.export(outfile, level, namespace_, name_='Pickup', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageBillType':
            PackageBillType_ = child_.text
            PackageBillType_ = self.gds_validate_string(PackageBillType_, node, 'PackageBillType')
            self.PackageBillType = PackageBillType_
        elif nodeName_ == 'Pickup':
            obj_ = PickupType.factory()
            obj_.build(child_)
            self.Pickup = obj_
            obj_.original_tagname_ = 'Pickup'
# end class TimeInTransitRequestType


class PickupType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, Time=None):
        self.original_tagname_ = None
        self.Date = Date
        self.Time = Time
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupType.subclass:
            return PickupType.subclass(*args_, **kwargs_)
        else:
            return PickupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def hasContent_(self):
        if (
            self.Date is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PickupType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PickupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PickupType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PickupType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Date>%s</rate:Date>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Time>%s</rate:Time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Time), input_name='Time')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'Time':
            Time_ = child_.text
            Time_ = self.gds_validate_string(Time_, node, 'Time')
            self.Time = Time_
# end class PickupType


class PromotionalDiscountInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PromoCode=None, PromoAliasCode=None):
        self.original_tagname_ = None
        self.PromoCode = PromoCode
        self.PromoAliasCode = PromoAliasCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PromotionalDiscountInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PromotionalDiscountInformationType.subclass:
            return PromotionalDiscountInformationType.subclass(*args_, **kwargs_)
        else:
            return PromotionalDiscountInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PromoCode(self): return self.PromoCode
    def set_PromoCode(self, PromoCode): self.PromoCode = PromoCode
    def get_PromoAliasCode(self): return self.PromoAliasCode
    def set_PromoAliasCode(self, PromoAliasCode): self.PromoAliasCode = PromoAliasCode
    def hasContent_(self):
        if (
            self.PromoCode is not None or
            self.PromoAliasCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PromotionalDiscountInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PromotionalDiscountInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PromotionalDiscountInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PromotionalDiscountInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PromotionalDiscountInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PromotionalDiscountInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PromoCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PromoCode>%s</rate:PromoCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PromoCode), input_name='PromoCode')), eol_))
        if self.PromoAliasCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PromoAliasCode>%s</rate:PromoAliasCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PromoAliasCode), input_name='PromoAliasCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PromoCode':
            PromoCode_ = child_.text
            PromoCode_ = self.gds_validate_string(PromoCode_, node, 'PromoCode')
            self.PromoCode = PromoCode_
        elif nodeName_ == 'PromoAliasCode':
            PromoAliasCode_ = child_.text
            PromoAliasCode_ = self.gds_validate_string(PromoAliasCode_, node, 'PromoAliasCode')
            self.PromoAliasCode = PromoAliasCode_
# end class PromotionalDiscountInformationType


class ShipmentWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentWeightType.subclass:
            return ShipmentWeightType.subclass(*args_, **kwargs_)
        else:
            return ShipmentWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipmentWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipmentWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipmentWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipmentWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Weight>%s</rate:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class ShipmentWeightType


class PaymentDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentCharge=None, SplitDutyVATIndicator=None):
        self.original_tagname_ = None
        if ShipmentCharge is None:
            self.ShipmentCharge = []
        else:
            self.ShipmentCharge = ShipmentCharge
        self.SplitDutyVATIndicator = SplitDutyVATIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentDetailsType.subclass:
            return PaymentDetailsType.subclass(*args_, **kwargs_)
        else:
            return PaymentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentCharge(self): return self.ShipmentCharge
    def set_ShipmentCharge(self, ShipmentCharge): self.ShipmentCharge = ShipmentCharge
    def add_ShipmentCharge(self, value): self.ShipmentCharge.append(value)
    def insert_ShipmentCharge_at(self, index, value): self.ShipmentCharge.insert(index, value)
    def replace_ShipmentCharge_at(self, index, value): self.ShipmentCharge[index] = value
    def get_SplitDutyVATIndicator(self): return self.SplitDutyVATIndicator
    def set_SplitDutyVATIndicator(self, SplitDutyVATIndicator): self.SplitDutyVATIndicator = SplitDutyVATIndicator
    def hasContent_(self):
        if (
            self.ShipmentCharge or
            self.SplitDutyVATIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PaymentDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PaymentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PaymentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PaymentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShipmentCharge_ in self.ShipmentCharge:
            ShipmentCharge_.export(outfile, level, namespace_, name_='ShipmentCharge', pretty_print=pretty_print)
        if self.SplitDutyVATIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SplitDutyVATIndicator>%s</rate:SplitDutyVATIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SplitDutyVATIndicator), input_name='SplitDutyVATIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentCharge':
            obj_ = ShipmentChargeType.factory()
            obj_.build(child_)
            self.ShipmentCharge.append(obj_)
            obj_.original_tagname_ = 'ShipmentCharge'
        elif nodeName_ == 'SplitDutyVATIndicator':
            SplitDutyVATIndicator_ = child_.text
            SplitDutyVATIndicator_ = self.gds_validate_string(SplitDutyVATIndicator_, node, 'SplitDutyVATIndicator')
            self.SplitDutyVATIndicator = SplitDutyVATIndicator_
# end class PaymentDetailsType


class ShipmentChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, BillShipper=None, BillReceiver=None, BillThirdParty=None, ConsigneeBilledIndicator=None):
        self.original_tagname_ = None
        self.Type = Type
        self.BillShipper = BillShipper
        self.BillReceiver = BillReceiver
        self.BillThirdParty = BillThirdParty
        self.ConsigneeBilledIndicator = ConsigneeBilledIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentChargeType.subclass:
            return ShipmentChargeType.subclass(*args_, **kwargs_)
        else:
            return ShipmentChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_BillShipper(self): return self.BillShipper
    def set_BillShipper(self, BillShipper): self.BillShipper = BillShipper
    def get_BillReceiver(self): return self.BillReceiver
    def set_BillReceiver(self, BillReceiver): self.BillReceiver = BillReceiver
    def get_BillThirdParty(self): return self.BillThirdParty
    def set_BillThirdParty(self, BillThirdParty): self.BillThirdParty = BillThirdParty
    def get_ConsigneeBilledIndicator(self): return self.ConsigneeBilledIndicator
    def set_ConsigneeBilledIndicator(self, ConsigneeBilledIndicator): self.ConsigneeBilledIndicator = ConsigneeBilledIndicator
    def hasContent_(self):
        if (
            self.Type is not None or
            self.BillShipper is not None or
            self.BillReceiver is not None or
            self.BillThirdParty is not None or
            self.ConsigneeBilledIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipmentChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipmentChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipmentChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipmentChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Type>%s</rate:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.BillShipper is not None:
            self.BillShipper.export(outfile, level, namespace_, name_='BillShipper', pretty_print=pretty_print)
        if self.BillReceiver is not None:
            self.BillReceiver.export(outfile, level, namespace_, name_='BillReceiver', pretty_print=pretty_print)
        if self.BillThirdParty is not None:
            self.BillThirdParty.export(outfile, level, namespace_, name_='BillThirdParty', pretty_print=pretty_print)
        if self.ConsigneeBilledIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ConsigneeBilledIndicator>%s</rate:ConsigneeBilledIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneeBilledIndicator), input_name='ConsigneeBilledIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
        elif nodeName_ == 'BillShipper':
            obj_ = BillShipperChargeType.factory()
            obj_.build(child_)
            self.BillShipper = obj_
            obj_.original_tagname_ = 'BillShipper'
        elif nodeName_ == 'BillReceiver':
            obj_ = BillReceiverChargeType.factory()
            obj_.build(child_)
            self.BillReceiver = obj_
            obj_.original_tagname_ = 'BillReceiver'
        elif nodeName_ == 'BillThirdParty':
            obj_ = BillThirdPartyChargeType.factory()
            obj_.build(child_)
            self.BillThirdParty = obj_
            obj_.original_tagname_ = 'BillThirdParty'
        elif nodeName_ == 'ConsigneeBilledIndicator':
            ConsigneeBilledIndicator_ = child_.text
            ConsigneeBilledIndicator_ = self.gds_validate_string(ConsigneeBilledIndicator_, node, 'ConsigneeBilledIndicator')
            self.ConsigneeBilledIndicator = ConsigneeBilledIndicator_
# end class ShipmentChargeType


class BillShipperChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillShipperChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillShipperChargeType.subclass:
            return BillShipperChargeType.subclass(*args_, **kwargs_)
        else:
            return BillShipperChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def hasContent_(self):
        if (
            self.AccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='BillShipperChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillShipperChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillShipperChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='BillShipperChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='BillShipperChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='BillShipperChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AccountNumber>%s</rate:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
# end class BillShipperChargeType


class BillReceiverChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Address=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillReceiverChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillReceiverChargeType.subclass:
            return BillReceiverChargeType.subclass(*args_, **kwargs_)
        else:
            return BillReceiverChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='BillReceiverChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillReceiverChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillReceiverChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='BillReceiverChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='BillReceiverChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='BillReceiverChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AccountNumber>%s</rate:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Address':
            obj_ = BillReceiverAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class BillReceiverChargeType


class BillThirdPartyChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Address=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillThirdPartyChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillThirdPartyChargeType.subclass:
            return BillThirdPartyChargeType.subclass(*args_, **kwargs_)
        else:
            return BillThirdPartyChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='BillThirdPartyChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillThirdPartyChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillThirdPartyChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='BillThirdPartyChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='BillThirdPartyChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='BillThirdPartyChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AccountNumber>%s</rate:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Address':
            class_obj_ = self.get_class_obj_(child_, AddressType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class BillThirdPartyChargeType


class BillReceiverAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None):
        self.original_tagname_ = None
        self.PostalCode = PostalCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillReceiverAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillReceiverAddressType.subclass:
            return BillReceiverAddressType.subclass(*args_, **kwargs_)
        else:
            return BillReceiverAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def hasContent_(self):
        if (
            self.PostalCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='BillReceiverAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillReceiverAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillReceiverAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='BillReceiverAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='BillReceiverAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='BillReceiverAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PostalCode>%s</rate:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
# end class BillReceiverAddressType


class AlternateDeliveryAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlternateDeliveryAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlternateDeliveryAddressType.subclass:
            return AlternateDeliveryAddressType.subclass(*args_, **kwargs_)
        else:
            return AlternateDeliveryAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='AlternateDeliveryAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlternateDeliveryAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AlternateDeliveryAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='AlternateDeliveryAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='AlternateDeliveryAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='AlternateDeliveryAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Name>%s</rate:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = ADRType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class AlternateDeliveryAddressType


class ADRType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, ResidentialAddressIndicator=None, POBoxIndicator=None):
        self.original_tagname_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
        self.ResidentialAddressIndicator = ResidentialAddressIndicator
        self.POBoxIndicator = POBoxIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ADRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ADRType.subclass:
            return ADRType.subclass(*args_, **kwargs_)
        else:
            return ADRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value): self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value): self.AddressLine[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_ResidentialAddressIndicator(self): return self.ResidentialAddressIndicator
    def set_ResidentialAddressIndicator(self, ResidentialAddressIndicator): self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def get_POBoxIndicator(self): return self.POBoxIndicator
    def set_POBoxIndicator(self, POBoxIndicator): self.POBoxIndicator = POBoxIndicator
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.ResidentialAddressIndicator is not None or
            self.POBoxIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ADRType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ADRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ADRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ADRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ADRType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ADRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AddressLine>%s</rate:AddressLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:City>%s</rate:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:StateProvinceCode>%s</rate:StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PostalCode>%s</rate:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CountryCode>%s</rate:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.ResidentialAddressIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ResidentialAddressIndicator>%s</rate:ResidentialAddressIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialAddressIndicator), input_name='ResidentialAddressIndicator')), eol_))
        if self.POBoxIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:POBoxIndicator>%s</rate:POBoxIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POBoxIndicator), input_name='POBoxIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'ResidentialAddressIndicator':
            ResidentialAddressIndicator_ = child_.text
            ResidentialAddressIndicator_ = self.gds_validate_string(ResidentialAddressIndicator_, node, 'ResidentialAddressIndicator')
            self.ResidentialAddressIndicator = ResidentialAddressIndicator_
        elif nodeName_ == 'POBoxIndicator':
            POBoxIndicator_ = child_.text
            POBoxIndicator_ = self.gds_validate_string(POBoxIndicator_, node, 'POBoxIndicator')
            self.POBoxIndicator = POBoxIndicator_
# end class ADRType


class IndicationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicationType.subclass:
            return IndicationType.subclass(*args_, **kwargs_)
        else:
            return IndicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='IndicationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='IndicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='IndicationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='IndicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class IndicationType


class ShipmentServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SaturdayPickupIndicator=None, SaturdayDeliveryIndicator=None, AccessPointCOD=None, DeliverToAddresseeOnlyIndicator=None, DirectDeliveryOnlyIndicator=None, COD=None, DeliveryConfirmation=None, ReturnOfDocumentIndicator=None, UPScarbonneutralIndicator=None, CertificateOfOriginIndicator=None, PickupOptions=None, DeliveryOptions=None, RestrictedArticles=None, ShipperExportDeclarationIndicator=None, CommercialInvoiceRemovalIndicator=None, ImportControl=None, ReturnService=None, SDLShipmentIndicator=None, EPRAIndicator=None):
        self.original_tagname_ = None
        self.SaturdayPickupIndicator = SaturdayPickupIndicator
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
        self.AccessPointCOD = AccessPointCOD
        self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator
        self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator
        self.COD = COD
        self.DeliveryConfirmation = DeliveryConfirmation
        self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
        self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
        self.CertificateOfOriginIndicator = CertificateOfOriginIndicator
        self.PickupOptions = PickupOptions
        self.DeliveryOptions = DeliveryOptions
        self.RestrictedArticles = RestrictedArticles
        self.ShipperExportDeclarationIndicator = ShipperExportDeclarationIndicator
        self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator
        self.ImportControl = ImportControl
        self.ReturnService = ReturnService
        self.SDLShipmentIndicator = SDLShipmentIndicator
        self.EPRAIndicator = EPRAIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SaturdayPickupIndicator(self): return self.SaturdayPickupIndicator
    def set_SaturdayPickupIndicator(self, SaturdayPickupIndicator): self.SaturdayPickupIndicator = SaturdayPickupIndicator
    def get_SaturdayDeliveryIndicator(self): return self.SaturdayDeliveryIndicator
    def set_SaturdayDeliveryIndicator(self, SaturdayDeliveryIndicator): self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
    def get_AccessPointCOD(self): return self.AccessPointCOD
    def set_AccessPointCOD(self, AccessPointCOD): self.AccessPointCOD = AccessPointCOD
    def get_DeliverToAddresseeOnlyIndicator(self): return self.DeliverToAddresseeOnlyIndicator
    def set_DeliverToAddresseeOnlyIndicator(self, DeliverToAddresseeOnlyIndicator): self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator
    def get_DirectDeliveryOnlyIndicator(self): return self.DirectDeliveryOnlyIndicator
    def set_DirectDeliveryOnlyIndicator(self, DirectDeliveryOnlyIndicator): self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_DeliveryConfirmation(self): return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation): self.DeliveryConfirmation = DeliveryConfirmation
    def get_ReturnOfDocumentIndicator(self): return self.ReturnOfDocumentIndicator
    def set_ReturnOfDocumentIndicator(self, ReturnOfDocumentIndicator): self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
    def get_UPScarbonneutralIndicator(self): return self.UPScarbonneutralIndicator
    def set_UPScarbonneutralIndicator(self, UPScarbonneutralIndicator): self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
    def get_CertificateOfOriginIndicator(self): return self.CertificateOfOriginIndicator
    def set_CertificateOfOriginIndicator(self, CertificateOfOriginIndicator): self.CertificateOfOriginIndicator = CertificateOfOriginIndicator
    def get_PickupOptions(self): return self.PickupOptions
    def set_PickupOptions(self, PickupOptions): self.PickupOptions = PickupOptions
    def get_DeliveryOptions(self): return self.DeliveryOptions
    def set_DeliveryOptions(self, DeliveryOptions): self.DeliveryOptions = DeliveryOptions
    def get_RestrictedArticles(self): return self.RestrictedArticles
    def set_RestrictedArticles(self, RestrictedArticles): self.RestrictedArticles = RestrictedArticles
    def get_ShipperExportDeclarationIndicator(self): return self.ShipperExportDeclarationIndicator
    def set_ShipperExportDeclarationIndicator(self, ShipperExportDeclarationIndicator): self.ShipperExportDeclarationIndicator = ShipperExportDeclarationIndicator
    def get_CommercialInvoiceRemovalIndicator(self): return self.CommercialInvoiceRemovalIndicator
    def set_CommercialInvoiceRemovalIndicator(self, CommercialInvoiceRemovalIndicator): self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator
    def get_ImportControl(self): return self.ImportControl
    def set_ImportControl(self, ImportControl): self.ImportControl = ImportControl
    def get_ReturnService(self): return self.ReturnService
    def set_ReturnService(self, ReturnService): self.ReturnService = ReturnService
    def get_SDLShipmentIndicator(self): return self.SDLShipmentIndicator
    def set_SDLShipmentIndicator(self, SDLShipmentIndicator): self.SDLShipmentIndicator = SDLShipmentIndicator
    def get_EPRAIndicator(self): return self.EPRAIndicator
    def set_EPRAIndicator(self, EPRAIndicator): self.EPRAIndicator = EPRAIndicator
    def hasContent_(self):
        if (
            self.SaturdayPickupIndicator is not None or
            self.SaturdayDeliveryIndicator is not None or
            self.AccessPointCOD is not None or
            self.DeliverToAddresseeOnlyIndicator is not None or
            self.DirectDeliveryOnlyIndicator is not None or
            self.COD is not None or
            self.DeliveryConfirmation is not None or
            self.ReturnOfDocumentIndicator is not None or
            self.UPScarbonneutralIndicator is not None or
            self.CertificateOfOriginIndicator is not None or
            self.PickupOptions is not None or
            self.DeliveryOptions is not None or
            self.RestrictedArticles is not None or
            self.ShipperExportDeclarationIndicator is not None or
            self.CommercialInvoiceRemovalIndicator is not None or
            self.ImportControl is not None or
            self.ReturnService is not None or
            self.SDLShipmentIndicator is not None or
            self.EPRAIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipmentServiceOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipmentServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipmentServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipmentServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SaturdayPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SaturdayPickupIndicator>%s</rate:SaturdayPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayPickupIndicator), input_name='SaturdayPickupIndicator')), eol_))
        if self.SaturdayDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SaturdayDeliveryIndicator>%s</rate:SaturdayDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDeliveryIndicator), input_name='SaturdayDeliveryIndicator')), eol_))
        if self.AccessPointCOD is not None:
            self.AccessPointCOD.export(outfile, level, namespace_, name_='AccessPointCOD', pretty_print=pretty_print)
        if self.DeliverToAddresseeOnlyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DeliverToAddresseeOnlyIndicator>%s</rate:DeliverToAddresseeOnlyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliverToAddresseeOnlyIndicator), input_name='DeliverToAddresseeOnlyIndicator')), eol_))
        if self.DirectDeliveryOnlyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DirectDeliveryOnlyIndicator>%s</rate:DirectDeliveryOnlyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DirectDeliveryOnlyIndicator), input_name='DirectDeliveryOnlyIndicator')), eol_))
        if self.COD is not None:
            self.COD.export(outfile, level, namespace_, name_='COD', pretty_print=pretty_print)
        if self.DeliveryConfirmation is not None:
            self.DeliveryConfirmation.export(outfile, level, namespace_, name_='DeliveryConfirmation', pretty_print=pretty_print)
        if self.ReturnOfDocumentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ReturnOfDocumentIndicator>%s</rate:ReturnOfDocumentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReturnOfDocumentIndicator), input_name='ReturnOfDocumentIndicator')), eol_))
        if self.UPScarbonneutralIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:UPScarbonneutralIndicator>%s</rate:UPScarbonneutralIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UPScarbonneutralIndicator), input_name='UPScarbonneutralIndicator')), eol_))
        if self.CertificateOfOriginIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CertificateOfOriginIndicator>%s</rate:CertificateOfOriginIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CertificateOfOriginIndicator), input_name='CertificateOfOriginIndicator')), eol_))
        if self.PickupOptions is not None:
            self.PickupOptions.export(outfile, level, namespace_, name_='PickupOptions', pretty_print=pretty_print)
        if self.DeliveryOptions is not None:
            self.DeliveryOptions.export(outfile, level, namespace_, name_='DeliveryOptions', pretty_print=pretty_print)
        if self.RestrictedArticles is not None:
            self.RestrictedArticles.export(outfile, level, namespace_, name_='RestrictedArticles', pretty_print=pretty_print)
        if self.ShipperExportDeclarationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ShipperExportDeclarationIndicator>%s</rate:ShipperExportDeclarationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperExportDeclarationIndicator), input_name='ShipperExportDeclarationIndicator')), eol_))
        if self.CommercialInvoiceRemovalIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CommercialInvoiceRemovalIndicator>%s</rate:CommercialInvoiceRemovalIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommercialInvoiceRemovalIndicator), input_name='CommercialInvoiceRemovalIndicator')), eol_))
        if self.ImportControl is not None:
            self.ImportControl.export(outfile, level, namespace_, name_='ImportControl', pretty_print=pretty_print)
        if self.ReturnService is not None:
            self.ReturnService.export(outfile, level, namespace_, name_='ReturnService', pretty_print=pretty_print)
        if self.SDLShipmentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SDLShipmentIndicator>%s</rate:SDLShipmentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SDLShipmentIndicator), input_name='SDLShipmentIndicator')), eol_))
        if self.EPRAIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:EPRAIndicator>%s</rate:EPRAIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EPRAIndicator), input_name='EPRAIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SaturdayPickupIndicator':
            SaturdayPickupIndicator_ = child_.text
            SaturdayPickupIndicator_ = self.gds_validate_string(SaturdayPickupIndicator_, node, 'SaturdayPickupIndicator')
            self.SaturdayPickupIndicator = SaturdayPickupIndicator_
        elif nodeName_ == 'SaturdayDeliveryIndicator':
            SaturdayDeliveryIndicator_ = child_.text
            SaturdayDeliveryIndicator_ = self.gds_validate_string(SaturdayDeliveryIndicator_, node, 'SaturdayDeliveryIndicator')
            self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator_
        elif nodeName_ == 'AccessPointCOD':
            obj_ = ShipmentServiceOptionsAccessPointCODType.factory()
            obj_.build(child_)
            self.AccessPointCOD = obj_
            obj_.original_tagname_ = 'AccessPointCOD'
        elif nodeName_ == 'DeliverToAddresseeOnlyIndicator':
            DeliverToAddresseeOnlyIndicator_ = child_.text
            DeliverToAddresseeOnlyIndicator_ = self.gds_validate_string(DeliverToAddresseeOnlyIndicator_, node, 'DeliverToAddresseeOnlyIndicator')
            self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator_
        elif nodeName_ == 'DirectDeliveryOnlyIndicator':
            DirectDeliveryOnlyIndicator_ = child_.text
            DirectDeliveryOnlyIndicator_ = self.gds_validate_string(DirectDeliveryOnlyIndicator_, node, 'DirectDeliveryOnlyIndicator')
            self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator_
        elif nodeName_ == 'COD':
            obj_ = CODType.factory()
            obj_.build(child_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'DeliveryConfirmation':
            obj_ = DeliveryConfirmationType.factory()
            obj_.build(child_)
            self.DeliveryConfirmation = obj_
            obj_.original_tagname_ = 'DeliveryConfirmation'
        elif nodeName_ == 'ReturnOfDocumentIndicator':
            ReturnOfDocumentIndicator_ = child_.text
            ReturnOfDocumentIndicator_ = self.gds_validate_string(ReturnOfDocumentIndicator_, node, 'ReturnOfDocumentIndicator')
            self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator_
        elif nodeName_ == 'UPScarbonneutralIndicator':
            UPScarbonneutralIndicator_ = child_.text
            UPScarbonneutralIndicator_ = self.gds_validate_string(UPScarbonneutralIndicator_, node, 'UPScarbonneutralIndicator')
            self.UPScarbonneutralIndicator = UPScarbonneutralIndicator_
        elif nodeName_ == 'CertificateOfOriginIndicator':
            CertificateOfOriginIndicator_ = child_.text
            CertificateOfOriginIndicator_ = self.gds_validate_string(CertificateOfOriginIndicator_, node, 'CertificateOfOriginIndicator')
            self.CertificateOfOriginIndicator = CertificateOfOriginIndicator_
        elif nodeName_ == 'PickupOptions':
            obj_ = PickupOptionsType.factory()
            obj_.build(child_)
            self.PickupOptions = obj_
            obj_.original_tagname_ = 'PickupOptions'
        elif nodeName_ == 'DeliveryOptions':
            obj_ = DeliveryOptionsType.factory()
            obj_.build(child_)
            self.DeliveryOptions = obj_
            obj_.original_tagname_ = 'DeliveryOptions'
        elif nodeName_ == 'RestrictedArticles':
            obj_ = RestrictedArticlesType.factory()
            obj_.build(child_)
            self.RestrictedArticles = obj_
            obj_.original_tagname_ = 'RestrictedArticles'
        elif nodeName_ == 'ShipperExportDeclarationIndicator':
            ShipperExportDeclarationIndicator_ = child_.text
            ShipperExportDeclarationIndicator_ = self.gds_validate_string(ShipperExportDeclarationIndicator_, node, 'ShipperExportDeclarationIndicator')
            self.ShipperExportDeclarationIndicator = ShipperExportDeclarationIndicator_
        elif nodeName_ == 'CommercialInvoiceRemovalIndicator':
            CommercialInvoiceRemovalIndicator_ = child_.text
            CommercialInvoiceRemovalIndicator_ = self.gds_validate_string(CommercialInvoiceRemovalIndicator_, node, 'CommercialInvoiceRemovalIndicator')
            self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator_
        elif nodeName_ == 'ImportControl':
            obj_ = ImportControlType.factory()
            obj_.build(child_)
            self.ImportControl = obj_
            obj_.original_tagname_ = 'ImportControl'
        elif nodeName_ == 'ReturnService':
            obj_ = ReturnServiceType.factory()
            obj_.build(child_)
            self.ReturnService = obj_
            obj_.original_tagname_ = 'ReturnService'
        elif nodeName_ == 'SDLShipmentIndicator':
            SDLShipmentIndicator_ = child_.text
            SDLShipmentIndicator_ = self.gds_validate_string(SDLShipmentIndicator_, node, 'SDLShipmentIndicator')
            self.SDLShipmentIndicator = SDLShipmentIndicator_
        elif nodeName_ == 'EPRAIndicator':
            EPRAIndicator_ = child_.text
            EPRAIndicator_ = self.gds_validate_string(EPRAIndicator_, node, 'EPRAIndicator')
            self.EPRAIndicator = EPRAIndicator_
# end class ShipmentServiceOptionsType


class ShipmentServiceOptionsAccessPointCODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsAccessPointCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsAccessPointCODType.subclass:
            return ShipmentServiceOptionsAccessPointCODType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsAccessPointCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipmentServiceOptionsAccessPointCODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsAccessPointCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentServiceOptionsAccessPointCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipmentServiceOptionsAccessPointCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipmentServiceOptionsAccessPointCODType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipmentServiceOptionsAccessPointCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class ShipmentServiceOptionsAccessPointCODType


class ReturnServiceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnServiceType.subclass:
            return ReturnServiceType.subclass(*args_, **kwargs_)
        else:
            return ReturnServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ReturnServiceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ReturnServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ReturnServiceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ReturnServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ReturnServiceType


class ImportControlType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImportControlType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImportControlType.subclass:
            return ImportControlType.subclass(*args_, **kwargs_)
        else:
            return ImportControlType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ImportControlType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImportControlType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImportControlType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ImportControlType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ImportControlType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ImportControlType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Code>%s</rate:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Description>%s</rate:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ImportControlType


class RestrictedArticlesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AlcoholicBeveragesIndicator=None, DiagnosticSpecimensIndicator=None, PerishablesIndicator=None, PlantsIndicator=None, SeedsIndicator=None, SpecialExceptionsIndicator=None, TobaccoIndicator=None):
        self.original_tagname_ = None
        self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator
        self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator
        self.PerishablesIndicator = PerishablesIndicator
        self.PlantsIndicator = PlantsIndicator
        self.SeedsIndicator = SeedsIndicator
        self.SpecialExceptionsIndicator = SpecialExceptionsIndicator
        self.TobaccoIndicator = TobaccoIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RestrictedArticlesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RestrictedArticlesType.subclass:
            return RestrictedArticlesType.subclass(*args_, **kwargs_)
        else:
            return RestrictedArticlesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AlcoholicBeveragesIndicator(self): return self.AlcoholicBeveragesIndicator
    def set_AlcoholicBeveragesIndicator(self, AlcoholicBeveragesIndicator): self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator
    def get_DiagnosticSpecimensIndicator(self): return self.DiagnosticSpecimensIndicator
    def set_DiagnosticSpecimensIndicator(self, DiagnosticSpecimensIndicator): self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator
    def get_PerishablesIndicator(self): return self.PerishablesIndicator
    def set_PerishablesIndicator(self, PerishablesIndicator): self.PerishablesIndicator = PerishablesIndicator
    def get_PlantsIndicator(self): return self.PlantsIndicator
    def set_PlantsIndicator(self, PlantsIndicator): self.PlantsIndicator = PlantsIndicator
    def get_SeedsIndicator(self): return self.SeedsIndicator
    def set_SeedsIndicator(self, SeedsIndicator): self.SeedsIndicator = SeedsIndicator
    def get_SpecialExceptionsIndicator(self): return self.SpecialExceptionsIndicator
    def set_SpecialExceptionsIndicator(self, SpecialExceptionsIndicator): self.SpecialExceptionsIndicator = SpecialExceptionsIndicator
    def get_TobaccoIndicator(self): return self.TobaccoIndicator
    def set_TobaccoIndicator(self, TobaccoIndicator): self.TobaccoIndicator = TobaccoIndicator
    def hasContent_(self):
        if (
            self.AlcoholicBeveragesIndicator is not None or
            self.DiagnosticSpecimensIndicator is not None or
            self.PerishablesIndicator is not None or
            self.PlantsIndicator is not None or
            self.SeedsIndicator is not None or
            self.SpecialExceptionsIndicator is not None or
            self.TobaccoIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='RestrictedArticlesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RestrictedArticlesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RestrictedArticlesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='RestrictedArticlesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='RestrictedArticlesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='RestrictedArticlesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AlcoholicBeveragesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AlcoholicBeveragesIndicator>%s</rate:AlcoholicBeveragesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AlcoholicBeveragesIndicator), input_name='AlcoholicBeveragesIndicator')), eol_))
        if self.DiagnosticSpecimensIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DiagnosticSpecimensIndicator>%s</rate:DiagnosticSpecimensIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DiagnosticSpecimensIndicator), input_name='DiagnosticSpecimensIndicator')), eol_))
        if self.PerishablesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PerishablesIndicator>%s</rate:PerishablesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PerishablesIndicator), input_name='PerishablesIndicator')), eol_))
        if self.PlantsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PlantsIndicator>%s</rate:PlantsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PlantsIndicator), input_name='PlantsIndicator')), eol_))
        if self.SeedsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SeedsIndicator>%s</rate:SeedsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SeedsIndicator), input_name='SeedsIndicator')), eol_))
        if self.SpecialExceptionsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:SpecialExceptionsIndicator>%s</rate:SpecialExceptionsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialExceptionsIndicator), input_name='SpecialExceptionsIndicator')), eol_))
        if self.TobaccoIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:TobaccoIndicator>%s</rate:TobaccoIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TobaccoIndicator), input_name='TobaccoIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AlcoholicBeveragesIndicator':
            AlcoholicBeveragesIndicator_ = child_.text
            AlcoholicBeveragesIndicator_ = self.gds_validate_string(AlcoholicBeveragesIndicator_, node, 'AlcoholicBeveragesIndicator')
            self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator_
        elif nodeName_ == 'DiagnosticSpecimensIndicator':
            DiagnosticSpecimensIndicator_ = child_.text
            DiagnosticSpecimensIndicator_ = self.gds_validate_string(DiagnosticSpecimensIndicator_, node, 'DiagnosticSpecimensIndicator')
            self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator_
        elif nodeName_ == 'PerishablesIndicator':
            PerishablesIndicator_ = child_.text
            PerishablesIndicator_ = self.gds_validate_string(PerishablesIndicator_, node, 'PerishablesIndicator')
            self.PerishablesIndicator = PerishablesIndicator_
        elif nodeName_ == 'PlantsIndicator':
            PlantsIndicator_ = child_.text
            PlantsIndicator_ = self.gds_validate_string(PlantsIndicator_, node, 'PlantsIndicator')
            self.PlantsIndicator = PlantsIndicator_
        elif nodeName_ == 'SeedsIndicator':
            SeedsIndicator_ = child_.text
            SeedsIndicator_ = self.gds_validate_string(SeedsIndicator_, node, 'SeedsIndicator')
            self.SeedsIndicator = SeedsIndicator_
        elif nodeName_ == 'SpecialExceptionsIndicator':
            SpecialExceptionsIndicator_ = child_.text
            SpecialExceptionsIndicator_ = self.gds_validate_string(SpecialExceptionsIndicator_, node, 'SpecialExceptionsIndicator')
            self.SpecialExceptionsIndicator = SpecialExceptionsIndicator_
        elif nodeName_ == 'TobaccoIndicator':
            TobaccoIndicator_ = child_.text
            TobaccoIndicator_ = self.gds_validate_string(TobaccoIndicator_, node, 'TobaccoIndicator')
            self.TobaccoIndicator = TobaccoIndicator_
# end class RestrictedArticlesType


class PickupOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LiftGateAtPickupIndicator=None, HoldForPickupIndicator=None):
        self.original_tagname_ = None
        self.LiftGateAtPickupIndicator = LiftGateAtPickupIndicator
        self.HoldForPickupIndicator = HoldForPickupIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupOptionsType.subclass:
            return PickupOptionsType.subclass(*args_, **kwargs_)
        else:
            return PickupOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LiftGateAtPickupIndicator(self): return self.LiftGateAtPickupIndicator
    def set_LiftGateAtPickupIndicator(self, LiftGateAtPickupIndicator): self.LiftGateAtPickupIndicator = LiftGateAtPickupIndicator
    def get_HoldForPickupIndicator(self): return self.HoldForPickupIndicator
    def set_HoldForPickupIndicator(self, HoldForPickupIndicator): self.HoldForPickupIndicator = HoldForPickupIndicator
    def hasContent_(self):
        if (
            self.LiftGateAtPickupIndicator is not None or
            self.HoldForPickupIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PickupOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PickupOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PickupOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PickupOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LiftGateAtPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:LiftGateAtPickupIndicator>%s</rate:LiftGateAtPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateAtPickupIndicator), input_name='LiftGateAtPickupIndicator')), eol_))
        if self.HoldForPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:HoldForPickupIndicator>%s</rate:HoldForPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldForPickupIndicator), input_name='HoldForPickupIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LiftGateAtPickupIndicator':
            LiftGateAtPickupIndicator_ = child_.text
            LiftGateAtPickupIndicator_ = self.gds_validate_string(LiftGateAtPickupIndicator_, node, 'LiftGateAtPickupIndicator')
            self.LiftGateAtPickupIndicator = LiftGateAtPickupIndicator_
        elif nodeName_ == 'HoldForPickupIndicator':
            HoldForPickupIndicator_ = child_.text
            HoldForPickupIndicator_ = self.gds_validate_string(HoldForPickupIndicator_, node, 'HoldForPickupIndicator')
            self.HoldForPickupIndicator = HoldForPickupIndicator_
# end class PickupOptionsType


class DeliveryOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LiftGateAtDeliveryIndicator=None, DropOffAtUPSFacilityIndicator=None):
        self.original_tagname_ = None
        self.LiftGateAtDeliveryIndicator = LiftGateAtDeliveryIndicator
        self.DropOffAtUPSFacilityIndicator = DropOffAtUPSFacilityIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOptionsType.subclass:
            return DeliveryOptionsType.subclass(*args_, **kwargs_)
        else:
            return DeliveryOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LiftGateAtDeliveryIndicator(self): return self.LiftGateAtDeliveryIndicator
    def set_LiftGateAtDeliveryIndicator(self, LiftGateAtDeliveryIndicator): self.LiftGateAtDeliveryIndicator = LiftGateAtDeliveryIndicator
    def get_DropOffAtUPSFacilityIndicator(self): return self.DropOffAtUPSFacilityIndicator
    def set_DropOffAtUPSFacilityIndicator(self, DropOffAtUPSFacilityIndicator): self.DropOffAtUPSFacilityIndicator = DropOffAtUPSFacilityIndicator
    def hasContent_(self):
        if (
            self.LiftGateAtDeliveryIndicator is not None or
            self.DropOffAtUPSFacilityIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='DeliveryOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='DeliveryOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='DeliveryOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='DeliveryOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LiftGateAtDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:LiftGateAtDeliveryIndicator>%s</rate:LiftGateAtDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateAtDeliveryIndicator), input_name='LiftGateAtDeliveryIndicator')), eol_))
        if self.DropOffAtUPSFacilityIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DropOffAtUPSFacilityIndicator>%s</rate:DropOffAtUPSFacilityIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropOffAtUPSFacilityIndicator), input_name='DropOffAtUPSFacilityIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LiftGateAtDeliveryIndicator':
            LiftGateAtDeliveryIndicator_ = child_.text
            LiftGateAtDeliveryIndicator_ = self.gds_validate_string(LiftGateAtDeliveryIndicator_, node, 'LiftGateAtDeliveryIndicator')
            self.LiftGateAtDeliveryIndicator = LiftGateAtDeliveryIndicator_
        elif nodeName_ == 'DropOffAtUPSFacilityIndicator':
            DropOffAtUPSFacilityIndicator_ = child_.text
            DropOffAtUPSFacilityIndicator_ = self.gds_validate_string(DropOffAtUPSFacilityIndicator_, node, 'DropOffAtUPSFacilityIndicator')
            self.DropOffAtUPSFacilityIndicator = DropOffAtUPSFacilityIndicator_
# end class DeliveryOptionsType


class ShipperType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, ShipperNumber=None, Address=None):
        self.original_tagname_ = None
        self.Name = Name
        self.ShipperNumber = ShipperNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperType.subclass:
            return ShipperType.subclass(*args_, **kwargs_)
        else:
            return ShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.ShipperNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='ShipperType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipperType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='ShipperType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='ShipperType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='ShipperType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Name>%s</rate:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.ShipperNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:ShipperNumber>%s</rate:ShipperNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'Address':
            class_obj_ = self.get_class_obj_(child_, AddressType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ShipperType


class GuaranteedDeliveryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BusinessDaysInTransit=None, DeliveryByTime=None):
        self.original_tagname_ = None
        self.BusinessDaysInTransit = BusinessDaysInTransit
        self.DeliveryByTime = DeliveryByTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GuaranteedDeliveryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GuaranteedDeliveryType.subclass:
            return GuaranteedDeliveryType.subclass(*args_, **kwargs_)
        else:
            return GuaranteedDeliveryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BusinessDaysInTransit(self): return self.BusinessDaysInTransit
    def set_BusinessDaysInTransit(self, BusinessDaysInTransit): self.BusinessDaysInTransit = BusinessDaysInTransit
    def get_DeliveryByTime(self): return self.DeliveryByTime
    def set_DeliveryByTime(self, DeliveryByTime): self.DeliveryByTime = DeliveryByTime
    def hasContent_(self):
        if (
            self.BusinessDaysInTransit is not None or
            self.DeliveryByTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='GuaranteedDeliveryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GuaranteedDeliveryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GuaranteedDeliveryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='GuaranteedDeliveryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='GuaranteedDeliveryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='GuaranteedDeliveryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BusinessDaysInTransit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:BusinessDaysInTransit>%s</rate:BusinessDaysInTransit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BusinessDaysInTransit), input_name='BusinessDaysInTransit')), eol_))
        if self.DeliveryByTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DeliveryByTime>%s</rate:DeliveryByTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryByTime), input_name='DeliveryByTime')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BusinessDaysInTransit':
            BusinessDaysInTransit_ = child_.text
            BusinessDaysInTransit_ = self.gds_validate_string(BusinessDaysInTransit_, node, 'BusinessDaysInTransit')
            self.BusinessDaysInTransit = BusinessDaysInTransit_
        elif nodeName_ == 'DeliveryByTime':
            DeliveryByTime_ = child_.text
            DeliveryByTime_ = self.gds_validate_string(DeliveryByTime_, node, 'DeliveryByTime')
            self.DeliveryByTime = DeliveryByTime_
# end class GuaranteedDeliveryType


class FRSPaymentInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, AccountNumber=None, Address=None):
        self.original_tagname_ = None
        self.Type = Type
        self.AccountNumber = AccountNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FRSPaymentInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FRSPaymentInfoType.subclass:
            return FRSPaymentInfoType.subclass(*args_, **kwargs_)
        else:
            return FRSPaymentInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Type is not None or
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='FRSPaymentInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FRSPaymentInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FRSPaymentInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='FRSPaymentInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='FRSPaymentInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='FRSPaymentInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AccountNumber>%s</rate:AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Address':
            obj_ = PayerAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class FRSPaymentInfoType


class FreightShipmentInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FreightDensityInfo=None, DensityEligibleIndicator=None):
        self.original_tagname_ = None
        self.FreightDensityInfo = FreightDensityInfo
        self.DensityEligibleIndicator = DensityEligibleIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipmentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipmentInformationType.subclass:
            return FreightShipmentInformationType.subclass(*args_, **kwargs_)
        else:
            return FreightShipmentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FreightDensityInfo(self): return self.FreightDensityInfo
    def set_FreightDensityInfo(self, FreightDensityInfo): self.FreightDensityInfo = FreightDensityInfo
    def get_DensityEligibleIndicator(self): return self.DensityEligibleIndicator
    def set_DensityEligibleIndicator(self, DensityEligibleIndicator): self.DensityEligibleIndicator = DensityEligibleIndicator
    def hasContent_(self):
        if (
            self.FreightDensityInfo is not None or
            self.DensityEligibleIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='FreightShipmentInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipmentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightShipmentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='FreightShipmentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='FreightShipmentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='FreightShipmentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightDensityInfo is not None:
            self.FreightDensityInfo.export(outfile, level, namespace_, name_='FreightDensityInfo', pretty_print=pretty_print)
        if self.DensityEligibleIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:DensityEligibleIndicator>%s</rate:DensityEligibleIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DensityEligibleIndicator), input_name='DensityEligibleIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FreightDensityInfo':
            obj_ = FreightDensityInfoType.factory()
            obj_.build(child_)
            self.FreightDensityInfo = obj_
            obj_.original_tagname_ = 'FreightDensityInfo'
        elif nodeName_ == 'DensityEligibleIndicator':
            DensityEligibleIndicator_ = child_.text
            DensityEligibleIndicator_ = self.gds_validate_string(DensityEligibleIndicator_, node, 'DensityEligibleIndicator')
            self.DensityEligibleIndicator = DensityEligibleIndicator_
# end class FreightShipmentInformationType


class PayerAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PayerAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PayerAddressType.subclass:
            return PayerAddressType.subclass(*args_, **kwargs_)
        else:
            return PayerAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PayerAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PayerAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PayerAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PayerAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PayerAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PayerAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:PostalCode>%s</rate:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CountryCode>%s</rate:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class PayerAddressType


class FreightDensityInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AdjustedHeightIndicator=None, AdjustedHeight=None, HandlingUnits=None):
        self.original_tagname_ = None
        self.AdjustedHeightIndicator = AdjustedHeightIndicator
        self.AdjustedHeight = AdjustedHeight
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityInfoType.subclass:
            return FreightDensityInfoType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AdjustedHeightIndicator(self): return self.AdjustedHeightIndicator
    def set_AdjustedHeightIndicator(self, AdjustedHeightIndicator): self.AdjustedHeightIndicator = AdjustedHeightIndicator
    def get_AdjustedHeight(self): return self.AdjustedHeight
    def set_AdjustedHeight(self, AdjustedHeight): self.AdjustedHeight = AdjustedHeight
    def get_HandlingUnits(self): return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits): self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value): self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value): self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value): self.HandlingUnits[index] = value
    def hasContent_(self):
        if (
            self.AdjustedHeightIndicator is not None or
            self.AdjustedHeight is not None or
            self.HandlingUnits
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='FreightDensityInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightDensityInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='FreightDensityInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='FreightDensityInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='FreightDensityInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AdjustedHeightIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:AdjustedHeightIndicator>%s</rate:AdjustedHeightIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdjustedHeightIndicator), input_name='AdjustedHeightIndicator')), eol_))
        if self.AdjustedHeight is not None:
            self.AdjustedHeight.export(outfile, level, namespace_, name_='AdjustedHeight', pretty_print=pretty_print)
        for HandlingUnits_ in self.HandlingUnits:
            HandlingUnits_.export(outfile, level, namespace_, name_='HandlingUnits', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AdjustedHeightIndicator':
            AdjustedHeightIndicator_ = child_.text
            AdjustedHeightIndicator_ = self.gds_validate_string(AdjustedHeightIndicator_, node, 'AdjustedHeightIndicator')
            self.AdjustedHeightIndicator = AdjustedHeightIndicator_
        elif nodeName_ == 'AdjustedHeight':
            obj_ = AdjustedHeightType.factory()
            obj_.build(child_)
            self.AdjustedHeight = obj_
            obj_.original_tagname_ = 'AdjustedHeight'
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsType.factory()
            obj_.build(child_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
# end class FreightDensityInfoType


class AdjustedHeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdjustedHeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdjustedHeightType.subclass:
            return AdjustedHeightType.subclass(*args_, **kwargs_)
        else:
            return AdjustedHeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='AdjustedHeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdjustedHeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdjustedHeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='AdjustedHeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='AdjustedHeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='AdjustedHeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Value>%s</rate:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class AdjustedHeightType


class HandlingUnitsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
        self.Dimensions = Dimensions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsType.subclass:
            return HandlingUnitsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='HandlingUnitsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='HandlingUnitsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='HandlingUnitsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='HandlingUnitsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Quantity>%s</rate:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class HandlingUnitsType


class HandlingUnitsDimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsDimensionsType.subclass:
            return HandlingUnitsDimensionsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='HandlingUnitsDimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='HandlingUnitsDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='HandlingUnitsDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='HandlingUnitsDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Length>%s</rate:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Width>%s</rate:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:Height>%s</rate:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class HandlingUnitsDimensionsType


class InvoiceLineTotalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvoiceLineTotalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvoiceLineTotalType.subclass:
            return InvoiceLineTotalType.subclass(*args_, **kwargs_)
        else:
            return InvoiceLineTotalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='InvoiceLineTotalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvoiceLineTotalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InvoiceLineTotalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='InvoiceLineTotalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='InvoiceLineTotalType'):
        pass
    def exportChildren(self, outfile, level, namespace_='rate:', name_='InvoiceLineTotalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:CurrencyCode>%s</rate:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rate:MonetaryValue>%s</rate:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InvoiceLineTotalType


class ClientInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInformationType.subclass:
            return ClientInformationType.subclass(*args_, **kwargs_)
        else:
            return ClientInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self.Property
    def set_Property(self, Property): self.Property = Property
    def add_Property(self, value): self.Property.append(value)
    def insert_Property_at(self, index, value): self.Property.insert(index, value)
    def replace_Property_at(self, index, value): self.Property[index] = value
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ClientInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ClientInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ClientInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ClientInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespace_, name_='Property', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = PropertyType.factory()
            obj_.build(child_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class ClientInformationType


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RequestOption=None, SubVersion=None, TransactionReference=None):
        self.original_tagname_ = None
        if RequestOption is None:
            self.RequestOption = []
        else:
            self.RequestOption = RequestOption
        self.SubVersion = SubVersion
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestOption(self): return self.RequestOption
    def set_RequestOption(self, RequestOption): self.RequestOption = RequestOption
    def add_RequestOption(self, value): self.RequestOption.append(value)
    def insert_RequestOption_at(self, index, value): self.RequestOption.insert(index, value)
    def replace_RequestOption_at(self, index, value): self.RequestOption[index] = value
    def get_SubVersion(self): return self.SubVersion
    def set_SubVersion(self, SubVersion): self.SubVersion = SubVersion
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.RequestOption or
            self.SubVersion is not None or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='RequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequestOption_ in self.RequestOption:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:RequestOption>%s</common:RequestOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(RequestOption_), input_name='RequestOption')), eol_))
        if self.SubVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:SubVersion>%s</common:SubVersion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubVersion), input_name='SubVersion')), eol_))
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestOption':
            RequestOption_ = child_.text
            RequestOption_ = self.gds_validate_string(RequestOption_, node, 'RequestOption')
            self.RequestOption.append(RequestOption_)
        elif nodeName_ == 'SubVersion':
            SubVersion_ = child_.text
            SubVersion_ = self.gds_validate_string(SubVersion_, node, 'SubVersion')
            self.SubVersion = SubVersion_
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, TransactionIdentifier=None):
        self.original_tagname_ = None
        self.CustomerContext = CustomerContext
        self.TransactionIdentifier = TransactionIdentifier
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def get_TransactionIdentifier(self): return self.TransactionIdentifier
    def set_TransactionIdentifier(self, TransactionIdentifier): self.TransactionIdentifier = TransactionIdentifier
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.TransactionIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='TransactionReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='TransactionReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='TransactionReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:CustomerContext>%s</common:CustomerContext>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), eol_))
        if self.TransactionIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:TransactionIdentifier>%s</common:TransactionIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransactionIdentifier), input_name='TransactionIdentifier')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
        elif nodeName_ == 'TransactionIdentifier':
            TransactionIdentifier_ = child_.text
            TransactionIdentifier_ = self.gds_validate_string(TransactionIdentifier_, node, 'TransactionIdentifier')
            self.TransactionIdentifier = TransactionIdentifier_
# end class TransactionReferenceType


class ResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseStatus=None, Alert=None, AlertDetail=None, TransactionReference=None):
        self.original_tagname_ = None
        self.ResponseStatus = ResponseStatus
        if Alert is None:
            self.Alert = []
        else:
            self.Alert = Alert
        if AlertDetail is None:
            self.AlertDetail = []
        else:
            self.AlertDetail = AlertDetail
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseStatus(self): return self.ResponseStatus
    def set_ResponseStatus(self, ResponseStatus): self.ResponseStatus = ResponseStatus
    def get_Alert(self): return self.Alert
    def set_Alert(self, Alert): self.Alert = Alert
    def add_Alert(self, value): self.Alert.append(value)
    def insert_Alert_at(self, index, value): self.Alert.insert(index, value)
    def replace_Alert_at(self, index, value): self.Alert[index] = value
    def get_AlertDetail(self): return self.AlertDetail
    def set_AlertDetail(self, AlertDetail): self.AlertDetail = AlertDetail
    def add_AlertDetail(self, value): self.AlertDetail.append(value)
    def insert_AlertDetail_at(self, index, value): self.AlertDetail.insert(index, value)
    def replace_AlertDetail_at(self, index, value): self.AlertDetail[index] = value
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.ResponseStatus is not None or
            self.Alert or
            self.AlertDetail or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseStatus is not None:
            self.ResponseStatus.export(outfile, level, namespace_, name_='ResponseStatus', pretty_print=pretty_print)
        for Alert_ in self.Alert:
            Alert_.export(outfile, level, namespace_, name_='Alert', pretty_print=pretty_print)
        for AlertDetail_ in self.AlertDetail:
            AlertDetail_.export(outfile, level, namespace_, name_='AlertDetail', pretty_print=pretty_print)
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseStatus':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.ResponseStatus = obj_
            obj_.original_tagname_ = 'ResponseStatus'
        elif nodeName_ == 'Alert':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Alert.append(obj_)
            obj_.original_tagname_ = 'Alert'
        elif nodeName_ == 'AlertDetail':
            obj_ = DetailType.factory()
            obj_.build(child_)
            self.AlertDetail.append(obj_)
            obj_.original_tagname_ = 'AlertDetail'
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class ResponseType


class DetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, ElementLevelInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.ElementLevelInformation = ElementLevelInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetailType.subclass:
            return DetailType.subclass(*args_, **kwargs_)
        else:
            return DetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ElementLevelInformation(self): return self.ElementLevelInformation
    def set_ElementLevelInformation(self, ElementLevelInformation): self.ElementLevelInformation = ElementLevelInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.ElementLevelInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='DetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='DetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='DetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='DetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Description>%s</common:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ElementLevelInformation is not None:
            self.ElementLevelInformation.export(outfile, level, namespace_, name_='ElementLevelInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ElementLevelInformation':
            obj_ = ElementLevelInformationType.factory()
            obj_.build(child_)
            self.ElementLevelInformation = obj_
            obj_.original_tagname_ = 'ElementLevelInformation'
# end class DetailType


class ElementLevelInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Level=None, ElementIdentifier=None):
        self.original_tagname_ = None
        self.Level = Level
        if ElementIdentifier is None:
            self.ElementIdentifier = []
        else:
            self.ElementIdentifier = ElementIdentifier
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementLevelInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementLevelInformationType.subclass:
            return ElementLevelInformationType.subclass(*args_, **kwargs_)
        else:
            return ElementLevelInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Level(self): return self.Level
    def set_Level(self, Level): self.Level = Level
    def get_ElementIdentifier(self): return self.ElementIdentifier
    def set_ElementIdentifier(self, ElementIdentifier): self.ElementIdentifier = ElementIdentifier
    def add_ElementIdentifier(self, value): self.ElementIdentifier.append(value)
    def insert_ElementIdentifier_at(self, index, value): self.ElementIdentifier.insert(index, value)
    def replace_ElementIdentifier_at(self, index, value): self.ElementIdentifier[index] = value
    def hasContent_(self):
        if (
            self.Level is not None or
            self.ElementIdentifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ElementLevelInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementLevelInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ElementLevelInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ElementLevelInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ElementLevelInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ElementLevelInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Level>%s</common:Level>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), eol_))
        for ElementIdentifier_ in self.ElementIdentifier:
            ElementIdentifier_.export(outfile, level, namespace_, name_='ElementIdentifier', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Level':
            Level_ = child_.text
            Level_ = self.gds_validate_string(Level_, node, 'Level')
            self.Level = Level_
        elif nodeName_ == 'ElementIdentifier':
            obj_ = ElementIdentifierType.factory()
            obj_.build(child_)
            self.ElementIdentifier.append(obj_)
            obj_.original_tagname_ = 'ElementIdentifier'
# end class ElementLevelInformationType


class ElementIdentifierType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementIdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementIdentifierType.subclass:
            return ElementIdentifierType.subclass(*args_, **kwargs_)
        else:
            return ElementIdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ElementIdentifierType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementIdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ElementIdentifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ElementIdentifierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ElementIdentifierType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ElementIdentifierType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Value>%s</common:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class ElementIdentifierType


class PropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Key=None, valueOf_=None):
        self.original_tagname_ = None
        self.Key = _cast(None, Key)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PropertyType.subclass:
            return PropertyType.subclass(*args_, **kwargs_)
        else:
            return PropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='rate:', name_='PropertyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PropertyType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='rate:', name_='PropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='rate:', name_='PropertyType'):
        if self.Key is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            outfile.write(' Key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Key), input_name='Key')), ))
    def exportChildren(self, outfile, level, namespace_='rate:', name_='PropertyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Key', node)
        if value is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            self.Key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PropertyType


GDSClassesMapping = {
    'ClientInformation': ClientInformationType,
    'Request': RequestType,
    'Response': ResponseType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateRequest'
        rootClass = RateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:rate="http://www.ups.com/XMLSchema/XOLTWS/Rate/v1.1"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateRequest'
        rootClass = RateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateRequest'
        rootClass = RateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:rate="http://www.ups.com/XMLSchema/XOLTWS/Rate/v1.1"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RateRequest'
        rootClass = RateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from package_rate import *\n\n')
        sys.stdout.write('import package_rate as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ADRType",
    "AccessorialType",
    "AddressType",
    "AdjustedHeightType",
    "AlternateDeliveryAddressType",
    "BillReceiverAddressType",
    "BillReceiverChargeType",
    "BillShipperChargeType",
    "BillThirdPartyChargeType",
    "BillingWeightType",
    "CODAmountType",
    "CODType",
    "ChargesType",
    "ClientInformationType",
    "CodeDescriptionType",
    "CommodityType",
    "DeliveryConfirmationType",
    "DeliveryOptionsType",
    "DetailType",
    "DimensionsType",
    "DisclaimerType",
    "DryIceType",
    "DryIceWeightType",
    "ElementIdentifierType",
    "ElementLevelInformationType",
    "EstimatedArrivalType",
    "FRSPaymentInfoType",
    "FRSShipmentType",
    "FreightDensityInfoType",
    "FreightDensityRateType",
    "FreightShipmentInformationType",
    "GuaranteedDeliveryType",
    "HandlingUnitsDimensionsType",
    "HandlingUnitsResponseType",
    "HandlingUnitsType",
    "HazMatChemicalRecordType",
    "HazMatType",
    "ImportControlType",
    "IndicationType",
    "InsuranceType",
    "InsuranceValueType",
    "InsuredValueType",
    "InvoiceLineTotalType",
    "NMFCCommodityType",
    "NegotiatedChargesType",
    "PackageServiceOptionsAccessPointCODType",
    "PackageServiceOptionsType",
    "PackageType",
    "PackageWeightType",
    "PayerAddressType",
    "PaymentDetailsType",
    "PickupOptionsType",
    "PickupType",
    "PromotionalDiscountInformationType",
    "PropertyType",
    "RateRequest",
    "RateResponse",
    "RatedPackageType",
    "RatedShipmentInfoType",
    "RatedShipmentType",
    "RequestType",
    "ResponseType",
    "RestrictedArticlesType",
    "ReturnServiceType",
    "ServiceSummaryType",
    "ShipAddressType",
    "ShipFromType",
    "ShipToAddressType",
    "ShipToType",
    "ShipmentChargeType",
    "ShipmentRatingOptionsType",
    "ShipmentServiceOptionsAccessPointCODType",
    "ShipmentServiceOptionsType",
    "ShipmentType",
    "ShipmentWeightType",
    "ShipperDeclaredValueType",
    "ShipperType",
    "TaxChargeType",
    "TimeInTransitRequestType",
    "TimeInTransitResponseType",
    "TotalChargeType",
    "TransactionReferenceType",
    "TransportationChargesType",
    "UOMCodeDescriptionType"
]
