#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun 12 20:15:30 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', 'pyups/freight_rate.py')
#
# Command line arguments:
#    /UPS/Rates_Pkg_Gnd/RatingGROUNDFREIGHTWebService/SCHEMA-WSDLs/FreightRateWebServiceSchema.xsd
#
# Command line:
#    generateDS --no-namespace-defs -o "pyups/freight_rate.py"  /UPS/Rates_Pkg_Gnd/RatingGROUNDFREIGHTWebService/SCHEMA-WSDLs/FreightRateWebServiceSchema.xsd
#
# Current working directory (os.getcwd()):
#   py_ups
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class FreightRateRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Request=None, ShipFrom=None, ShipTo=None, PaymentInformation=None, Service=None, HandlingUnitOne=None, HandlingUnitTwo=None, Commodity=None, ShipmentServiceOptions=None, PickupRequest=None, AlternateRateOptions=None, GFPOptions=None, AccountType=None, ShipmentTotalWeight=None, HandlingUnitWeight=None, AdjustedWeightIndicator=None, TimeInTransitIndicator=None, HandlingUnits=None, AdjustedHeightIndicator=None, DensityEligibleIndicator=None, QuoteNumberIndicator=None):
        self.original_tagname_ = None
        self.Request = Request
        self.ShipFrom = ShipFrom
        self.ShipTo = ShipTo
        self.PaymentInformation = PaymentInformation
        self.Service = Service
        self.HandlingUnitOne = HandlingUnitOne
        self.HandlingUnitTwo = HandlingUnitTwo
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        self.ShipmentServiceOptions = ShipmentServiceOptions
        self.PickupRequest = PickupRequest
        self.AlternateRateOptions = AlternateRateOptions
        self.GFPOptions = GFPOptions
        self.AccountType = AccountType
        self.ShipmentTotalWeight = ShipmentTotalWeight
        self.HandlingUnitWeight = HandlingUnitWeight
        self.AdjustedWeightIndicator = AdjustedWeightIndicator
        self.TimeInTransitIndicator = TimeInTransitIndicator
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
        self.AdjustedHeightIndicator = AdjustedHeightIndicator
        self.DensityEligibleIndicator = DensityEligibleIndicator
        self.QuoteNumberIndicator = QuoteNumberIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightRateRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightRateRequest.subclass:
            return FreightRateRequest.subclass(*args_, **kwargs_)
        else:
            return FreightRateRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Request(self): return self.Request
    def set_Request(self, Request): self.Request = Request
    def get_ShipFrom(self): return self.ShipFrom
    def set_ShipFrom(self, ShipFrom): self.ShipFrom = ShipFrom
    def get_ShipTo(self): return self.ShipTo
    def set_ShipTo(self, ShipTo): self.ShipTo = ShipTo
    def get_PaymentInformation(self): return self.PaymentInformation
    def set_PaymentInformation(self, PaymentInformation): self.PaymentInformation = PaymentInformation
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_HandlingUnitOne(self): return self.HandlingUnitOne
    def set_HandlingUnitOne(self, HandlingUnitOne): self.HandlingUnitOne = HandlingUnitOne
    def get_HandlingUnitTwo(self): return self.HandlingUnitTwo
    def set_HandlingUnitTwo(self, HandlingUnitTwo): self.HandlingUnitTwo = HandlingUnitTwo
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_ShipmentServiceOptions(self): return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions): self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_PickupRequest(self): return self.PickupRequest
    def set_PickupRequest(self, PickupRequest): self.PickupRequest = PickupRequest
    def get_AlternateRateOptions(self): return self.AlternateRateOptions
    def set_AlternateRateOptions(self, AlternateRateOptions): self.AlternateRateOptions = AlternateRateOptions
    def get_GFPOptions(self): return self.GFPOptions
    def set_GFPOptions(self, GFPOptions): self.GFPOptions = GFPOptions
    def get_AccountType(self): return self.AccountType
    def set_AccountType(self, AccountType): self.AccountType = AccountType
    def get_ShipmentTotalWeight(self): return self.ShipmentTotalWeight
    def set_ShipmentTotalWeight(self, ShipmentTotalWeight): self.ShipmentTotalWeight = ShipmentTotalWeight
    def get_HandlingUnitWeight(self): return self.HandlingUnitWeight
    def set_HandlingUnitWeight(self, HandlingUnitWeight): self.HandlingUnitWeight = HandlingUnitWeight
    def get_AdjustedWeightIndicator(self): return self.AdjustedWeightIndicator
    def set_AdjustedWeightIndicator(self, AdjustedWeightIndicator): self.AdjustedWeightIndicator = AdjustedWeightIndicator
    def get_TimeInTransitIndicator(self): return self.TimeInTransitIndicator
    def set_TimeInTransitIndicator(self, TimeInTransitIndicator): self.TimeInTransitIndicator = TimeInTransitIndicator
    def get_HandlingUnits(self): return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits): self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value): self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value): self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value): self.HandlingUnits[index] = value
    def get_AdjustedHeightIndicator(self): return self.AdjustedHeightIndicator
    def set_AdjustedHeightIndicator(self, AdjustedHeightIndicator): self.AdjustedHeightIndicator = AdjustedHeightIndicator
    def get_DensityEligibleIndicator(self): return self.DensityEligibleIndicator
    def set_DensityEligibleIndicator(self, DensityEligibleIndicator): self.DensityEligibleIndicator = DensityEligibleIndicator
    def get_QuoteNumberIndicator(self): return self.QuoteNumberIndicator
    def set_QuoteNumberIndicator(self, QuoteNumberIndicator): self.QuoteNumberIndicator = QuoteNumberIndicator
    def hasContent_(self):
        if (
            self.Request is not None or
            self.ShipFrom is not None or
            self.ShipTo is not None or
            self.PaymentInformation is not None or
            self.Service is not None or
            self.HandlingUnitOne is not None or
            self.HandlingUnitTwo is not None or
            self.Commodity or
            self.ShipmentServiceOptions is not None or
            self.PickupRequest is not None or
            self.AlternateRateOptions is not None or
            self.GFPOptions is not None or
            self.AccountType is not None or
            self.ShipmentTotalWeight is not None or
            self.HandlingUnitWeight is not None or
            self.AdjustedWeightIndicator is not None or
            self.TimeInTransitIndicator is not None or
            self.HandlingUnits or
            self.AdjustedHeightIndicator is not None or
            self.DensityEligibleIndicator is not None or
            self.QuoteNumberIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='FreightRateRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightRateRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightRateRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='FreightRateRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='FreightRateRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='FreightRateRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            self.Request.export(outfile, level, namespace_='common:', name_='Request', pretty_print=pretty_print)
        if self.ShipFrom is not None:
            self.ShipFrom.export(outfile, level, namespace_, name_='ShipFrom', pretty_print=pretty_print)
        if self.ShipTo is not None:
            self.ShipTo.export(outfile, level, namespace_, name_='ShipTo', pretty_print=pretty_print)
        if self.PaymentInformation is not None:
            self.PaymentInformation.export(outfile, level, namespace_, name_='PaymentInformation', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.HandlingUnitOne is not None:
            self.HandlingUnitOne.export(outfile, level, namespace_, name_='HandlingUnitOne', pretty_print=pretty_print)
        if self.HandlingUnitTwo is not None:
            self.HandlingUnitTwo.export(outfile, level, namespace_, name_='HandlingUnitTwo', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.ShipmentServiceOptions is not None:
            self.ShipmentServiceOptions.export(outfile, level, namespace_, name_='ShipmentServiceOptions', pretty_print=pretty_print)
        if self.PickupRequest is not None:
            self.PickupRequest.export(outfile, level, namespace_, name_='PickupRequest', pretty_print=pretty_print)
        if self.AlternateRateOptions is not None:
            self.AlternateRateOptions.export(outfile, level, namespace_, name_='AlternateRateOptions', pretty_print=pretty_print)
        if self.GFPOptions is not None:
            self.GFPOptions.export(outfile, level, namespace_, name_='GFPOptions', pretty_print=pretty_print)
        if self.AccountType is not None:
            self.AccountType.export(outfile, level, namespace_, name_='AccountType', pretty_print=pretty_print)
        if self.ShipmentTotalWeight is not None:
            self.ShipmentTotalWeight.export(outfile, level, namespace_, name_='ShipmentTotalWeight', pretty_print=pretty_print)
        if self.HandlingUnitWeight is not None:
            self.HandlingUnitWeight.export(outfile, level, namespace_, name_='HandlingUnitWeight', pretty_print=pretty_print)
        if self.AdjustedWeightIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AdjustedWeightIndicator>%s</frt:AdjustedWeightIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdjustedWeightIndicator), input_name='AdjustedWeightIndicator')), eol_))
        if self.TimeInTransitIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:TimeInTransitIndicator>%s</frt:TimeInTransitIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TimeInTransitIndicator), input_name='TimeInTransitIndicator')), eol_))
        for HandlingUnits_ in self.HandlingUnits:
            HandlingUnits_.export(outfile, level, namespace_, name_='HandlingUnits', pretty_print=pretty_print)
        if self.AdjustedHeightIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AdjustedHeightIndicator>%s</frt:AdjustedHeightIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdjustedHeightIndicator), input_name='AdjustedHeightIndicator')), eol_))
        if self.DensityEligibleIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:DensityEligibleIndicator>%s</frt:DensityEligibleIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DensityEligibleIndicator), input_name='DensityEligibleIndicator')), eol_))
        if self.QuoteNumberIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:QuoteNumberIndicator>%s</frt:QuoteNumberIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.QuoteNumberIndicator), input_name='QuoteNumberIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory()
            obj_.build(child_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory()
            obj_.build(child_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory()
            obj_.build(child_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'PaymentInformation':
            obj_ = PaymentInformationType.factory()
            obj_.build(child_)
            self.PaymentInformation = obj_
            obj_.original_tagname_ = 'PaymentInformation'
        elif nodeName_ == 'Service':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'HandlingUnitOne':
            obj_ = HandlingUnitType.factory()
            obj_.build(child_)
            self.HandlingUnitOne = obj_
            obj_.original_tagname_ = 'HandlingUnitOne'
        elif nodeName_ == 'HandlingUnitTwo':
            obj_ = HandlingUnitType.factory()
            obj_.build(child_)
            self.HandlingUnitTwo = obj_
            obj_.original_tagname_ = 'HandlingUnitTwo'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType.factory()
            obj_.build(child_)
            self.ShipmentServiceOptions = obj_
            obj_.original_tagname_ = 'ShipmentServiceOptions'
        elif nodeName_ == 'PickupRequest':
            obj_ = PickupRequestType.factory()
            obj_.build(child_)
            self.PickupRequest = obj_
            obj_.original_tagname_ = 'PickupRequest'
        elif nodeName_ == 'AlternateRateOptions':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.AlternateRateOptions = obj_
            obj_.original_tagname_ = 'AlternateRateOptions'
        elif nodeName_ == 'GFPOptions':
            obj_ = GFPOptionsType.factory()
            obj_.build(child_)
            self.GFPOptions = obj_
            obj_.original_tagname_ = 'GFPOptions'
        elif nodeName_ == 'AccountType':
            obj_ = AccountType.factory()
            obj_.build(child_)
            self.AccountType = obj_
            obj_.original_tagname_ = 'AccountType'
        elif nodeName_ == 'ShipmentTotalWeight':
            obj_ = ShipmentTotalWeightType.factory()
            obj_.build(child_)
            self.ShipmentTotalWeight = obj_
            obj_.original_tagname_ = 'ShipmentTotalWeight'
        elif nodeName_ == 'HandlingUnitWeight':
            obj_ = HandlingUnitWeightType.factory()
            obj_.build(child_)
            self.HandlingUnitWeight = obj_
            obj_.original_tagname_ = 'HandlingUnitWeight'
        elif nodeName_ == 'AdjustedWeightIndicator':
            AdjustedWeightIndicator_ = child_.text
            AdjustedWeightIndicator_ = self.gds_validate_string(AdjustedWeightIndicator_, node, 'AdjustedWeightIndicator')
            self.AdjustedWeightIndicator = AdjustedWeightIndicator_
        elif nodeName_ == 'TimeInTransitIndicator':
            TimeInTransitIndicator_ = child_.text
            TimeInTransitIndicator_ = self.gds_validate_string(TimeInTransitIndicator_, node, 'TimeInTransitIndicator')
            self.TimeInTransitIndicator = TimeInTransitIndicator_
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsType.factory()
            obj_.build(child_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
        elif nodeName_ == 'AdjustedHeightIndicator':
            AdjustedHeightIndicator_ = child_.text
            AdjustedHeightIndicator_ = self.gds_validate_string(AdjustedHeightIndicator_, node, 'AdjustedHeightIndicator')
            self.AdjustedHeightIndicator = AdjustedHeightIndicator_
        elif nodeName_ == 'DensityEligibleIndicator':
            DensityEligibleIndicator_ = child_.text
            DensityEligibleIndicator_ = self.gds_validate_string(DensityEligibleIndicator_, node, 'DensityEligibleIndicator')
            self.DensityEligibleIndicator = DensityEligibleIndicator_
        elif nodeName_ == 'QuoteNumberIndicator':
            QuoteNumberIndicator_ = child_.text
            QuoteNumberIndicator_ = self.gds_validate_string(QuoteNumberIndicator_, node, 'QuoteNumberIndicator')
            self.QuoteNumberIndicator = QuoteNumberIndicator_
# end class FreightRateRequest


class FreightRateResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Response=None, CustomerServiceCenterPhone=None, Rate=None, FreightDensityRate=None, Commodity=None, TotalShipmentCharge=None, BillableShipmentWeight=None, DimensionalWeight=None, Service=None, GuaranteedIndicator=None, MinimumChargeAppliedIndicator=None, AlternateRatesResponse=None, MinimumBillableWeightAppliedIndicator=None, RatingSchedule=None, HoldAtAirportPickupDate=None, NextAvailablePickupDate=None, TimeInTransit=None, HandlingUnits=None, QuoteNumber=None):
        self.original_tagname_ = None
        self.Response = Response
        self.CustomerServiceCenterPhone = CustomerServiceCenterPhone
        if Rate is None:
            self.Rate = []
        else:
            self.Rate = Rate
        self.FreightDensityRate = FreightDensityRate
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        self.TotalShipmentCharge = TotalShipmentCharge
        self.BillableShipmentWeight = BillableShipmentWeight
        self.DimensionalWeight = DimensionalWeight
        self.Service = Service
        self.GuaranteedIndicator = GuaranteedIndicator
        self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator
        if AlternateRatesResponse is None:
            self.AlternateRatesResponse = []
        else:
            self.AlternateRatesResponse = AlternateRatesResponse
        self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator
        self.RatingSchedule = RatingSchedule
        self.HoldAtAirportPickupDate = HoldAtAirportPickupDate
        self.NextAvailablePickupDate = NextAvailablePickupDate
        self.TimeInTransit = TimeInTransit
        self.HandlingUnits = HandlingUnits
        self.QuoteNumber = QuoteNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightRateResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightRateResponse.subclass:
            return FreightRateResponse.subclass(*args_, **kwargs_)
        else:
            return FreightRateResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Response(self): return self.Response
    def set_Response(self, Response): self.Response = Response
    def get_CustomerServiceCenterPhone(self): return self.CustomerServiceCenterPhone
    def set_CustomerServiceCenterPhone(self, CustomerServiceCenterPhone): self.CustomerServiceCenterPhone = CustomerServiceCenterPhone
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def add_Rate(self, value): self.Rate.append(value)
    def insert_Rate_at(self, index, value): self.Rate.insert(index, value)
    def replace_Rate_at(self, index, value): self.Rate[index] = value
    def get_FreightDensityRate(self): return self.FreightDensityRate
    def set_FreightDensityRate(self, FreightDensityRate): self.FreightDensityRate = FreightDensityRate
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_TotalShipmentCharge(self): return self.TotalShipmentCharge
    def set_TotalShipmentCharge(self, TotalShipmentCharge): self.TotalShipmentCharge = TotalShipmentCharge
    def get_BillableShipmentWeight(self): return self.BillableShipmentWeight
    def set_BillableShipmentWeight(self, BillableShipmentWeight): self.BillableShipmentWeight = BillableShipmentWeight
    def get_DimensionalWeight(self): return self.DimensionalWeight
    def set_DimensionalWeight(self, DimensionalWeight): self.DimensionalWeight = DimensionalWeight
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_GuaranteedIndicator(self): return self.GuaranteedIndicator
    def set_GuaranteedIndicator(self, GuaranteedIndicator): self.GuaranteedIndicator = GuaranteedIndicator
    def get_MinimumChargeAppliedIndicator(self): return self.MinimumChargeAppliedIndicator
    def set_MinimumChargeAppliedIndicator(self, MinimumChargeAppliedIndicator): self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator
    def get_AlternateRatesResponse(self): return self.AlternateRatesResponse
    def set_AlternateRatesResponse(self, AlternateRatesResponse): self.AlternateRatesResponse = AlternateRatesResponse
    def add_AlternateRatesResponse(self, value): self.AlternateRatesResponse.append(value)
    def insert_AlternateRatesResponse_at(self, index, value): self.AlternateRatesResponse.insert(index, value)
    def replace_AlternateRatesResponse_at(self, index, value): self.AlternateRatesResponse[index] = value
    def get_MinimumBillableWeightAppliedIndicator(self): return self.MinimumBillableWeightAppliedIndicator
    def set_MinimumBillableWeightAppliedIndicator(self, MinimumBillableWeightAppliedIndicator): self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator
    def get_RatingSchedule(self): return self.RatingSchedule
    def set_RatingSchedule(self, RatingSchedule): self.RatingSchedule = RatingSchedule
    def get_HoldAtAirportPickupDate(self): return self.HoldAtAirportPickupDate
    def set_HoldAtAirportPickupDate(self, HoldAtAirportPickupDate): self.HoldAtAirportPickupDate = HoldAtAirportPickupDate
    def get_NextAvailablePickupDate(self): return self.NextAvailablePickupDate
    def set_NextAvailablePickupDate(self, NextAvailablePickupDate): self.NextAvailablePickupDate = NextAvailablePickupDate
    def get_TimeInTransit(self): return self.TimeInTransit
    def set_TimeInTransit(self, TimeInTransit): self.TimeInTransit = TimeInTransit
    def get_HandlingUnits(self): return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits): self.HandlingUnits = HandlingUnits
    def get_QuoteNumber(self): return self.QuoteNumber
    def set_QuoteNumber(self, QuoteNumber): self.QuoteNumber = QuoteNumber
    def hasContent_(self):
        if (
            self.Response is not None or
            self.CustomerServiceCenterPhone is not None or
            self.Rate or
            self.FreightDensityRate is not None or
            self.Commodity or
            self.TotalShipmentCharge is not None or
            self.BillableShipmentWeight is not None or
            self.DimensionalWeight is not None or
            self.Service is not None or
            self.GuaranteedIndicator is not None or
            self.MinimumChargeAppliedIndicator is not None or
            self.AlternateRatesResponse or
            self.MinimumBillableWeightAppliedIndicator is not None or
            self.RatingSchedule is not None or
            self.HoldAtAirportPickupDate is not None or
            self.NextAvailablePickupDate is not None or
            self.TimeInTransit is not None or
            self.HandlingUnits is not None or
            self.QuoteNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='FreightRateResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightRateResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightRateResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='FreightRateResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='FreightRateResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='FreightRateResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            self.Response.export(outfile, level, namespace_='common:', name_='Response', pretty_print=pretty_print)
        if self.CustomerServiceCenterPhone is not None:
            self.CustomerServiceCenterPhone.export(outfile, level, namespace_, name_='CustomerServiceCenterPhone', pretty_print=pretty_print)
        for Rate_ in self.Rate:
            Rate_.export(outfile, level, namespace_, name_='Rate', pretty_print=pretty_print)
        if self.FreightDensityRate is not None:
            self.FreightDensityRate.export(outfile, level, namespace_, name_='FreightDensityRate', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.TotalShipmentCharge is not None:
            self.TotalShipmentCharge.export(outfile, level, namespace_, name_='TotalShipmentCharge', pretty_print=pretty_print)
        if self.BillableShipmentWeight is not None:
            self.BillableShipmentWeight.export(outfile, level, namespace_, name_='BillableShipmentWeight', pretty_print=pretty_print)
        if self.DimensionalWeight is not None:
            self.DimensionalWeight.export(outfile, level, namespace_, name_='DimensionalWeight', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.GuaranteedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:GuaranteedIndicator>%s</frt:GuaranteedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedIndicator), input_name='GuaranteedIndicator')), eol_))
        if self.MinimumChargeAppliedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MinimumChargeAppliedIndicator>%s</frt:MinimumChargeAppliedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MinimumChargeAppliedIndicator), input_name='MinimumChargeAppliedIndicator')), eol_))
        for AlternateRatesResponse_ in self.AlternateRatesResponse:
            AlternateRatesResponse_.export(outfile, level, namespace_, name_='AlternateRatesResponse', pretty_print=pretty_print)
        if self.MinimumBillableWeightAppliedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MinimumBillableWeightAppliedIndicator>%s</frt:MinimumBillableWeightAppliedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MinimumBillableWeightAppliedIndicator), input_name='MinimumBillableWeightAppliedIndicator')), eol_))
        if self.RatingSchedule is not None:
            self.RatingSchedule.export(outfile, level, namespace_, name_='RatingSchedule', pretty_print=pretty_print)
        if self.HoldAtAirportPickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:HoldAtAirportPickupDate>%s</frt:HoldAtAirportPickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldAtAirportPickupDate), input_name='HoldAtAirportPickupDate')), eol_))
        if self.NextAvailablePickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:NextAvailablePickupDate>%s</frt:NextAvailablePickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NextAvailablePickupDate), input_name='NextAvailablePickupDate')), eol_))
        if self.TimeInTransit is not None:
            self.TimeInTransit.export(outfile, level, namespace_, name_='TimeInTransit', pretty_print=pretty_print)
        if self.HandlingUnits is not None:
            self.HandlingUnits.export(outfile, level, namespace_, name_='HandlingUnits', pretty_print=pretty_print)
        if self.QuoteNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:QuoteNumber>%s</frt:QuoteNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.QuoteNumber), input_name='QuoteNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory()
            obj_.build(child_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'CustomerServiceCenterPhone':
            obj_ = PhoneType.factory()
            obj_.build(child_)
            self.CustomerServiceCenterPhone = obj_
            obj_.original_tagname_ = 'CustomerServiceCenterPhone'
        elif nodeName_ == 'Rate':
            obj_ = RateType.factory()
            obj_.build(child_)
            self.Rate.append(obj_)
            obj_.original_tagname_ = 'Rate'
        elif nodeName_ == 'FreightDensityRate':
            obj_ = FreightDensityRateType.factory()
            obj_.build(child_)
            self.FreightDensityRate = obj_
            obj_.original_tagname_ = 'FreightDensityRate'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityWeightType.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'TotalShipmentCharge':
            obj_ = TotalShipmentChargeType.factory()
            obj_.build(child_)
            self.TotalShipmentCharge = obj_
            obj_.original_tagname_ = 'TotalShipmentCharge'
        elif nodeName_ == 'BillableShipmentWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.BillableShipmentWeight = obj_
            obj_.original_tagname_ = 'BillableShipmentWeight'
        elif nodeName_ == 'DimensionalWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.DimensionalWeight = obj_
            obj_.original_tagname_ = 'DimensionalWeight'
        elif nodeName_ == 'Service':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'GuaranteedIndicator':
            GuaranteedIndicator_ = child_.text
            GuaranteedIndicator_ = self.gds_validate_string(GuaranteedIndicator_, node, 'GuaranteedIndicator')
            self.GuaranteedIndicator = GuaranteedIndicator_
        elif nodeName_ == 'MinimumChargeAppliedIndicator':
            MinimumChargeAppliedIndicator_ = child_.text
            MinimumChargeAppliedIndicator_ = self.gds_validate_string(MinimumChargeAppliedIndicator_, node, 'MinimumChargeAppliedIndicator')
            self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator_
        elif nodeName_ == 'AlternateRatesResponse':
            obj_ = AlternateRatesResponseType.factory()
            obj_.build(child_)
            self.AlternateRatesResponse.append(obj_)
            obj_.original_tagname_ = 'AlternateRatesResponse'
        elif nodeName_ == 'MinimumBillableWeightAppliedIndicator':
            MinimumBillableWeightAppliedIndicator_ = child_.text
            MinimumBillableWeightAppliedIndicator_ = self.gds_validate_string(MinimumBillableWeightAppliedIndicator_, node, 'MinimumBillableWeightAppliedIndicator')
            self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator_
        elif nodeName_ == 'RatingSchedule':
            obj_ = RatingScheduleType.factory()
            obj_.build(child_)
            self.RatingSchedule = obj_
            obj_.original_tagname_ = 'RatingSchedule'
        elif nodeName_ == 'HoldAtAirportPickupDate':
            HoldAtAirportPickupDate_ = child_.text
            HoldAtAirportPickupDate_ = self.gds_validate_string(HoldAtAirportPickupDate_, node, 'HoldAtAirportPickupDate')
            self.HoldAtAirportPickupDate = HoldAtAirportPickupDate_
        elif nodeName_ == 'NextAvailablePickupDate':
            NextAvailablePickupDate_ = child_.text
            NextAvailablePickupDate_ = self.gds_validate_string(NextAvailablePickupDate_, node, 'NextAvailablePickupDate')
            self.NextAvailablePickupDate = NextAvailablePickupDate_
        elif nodeName_ == 'TimeInTransit':
            obj_ = TimeInTransitResponseType.factory()
            obj_.build(child_)
            self.TimeInTransit = obj_
            obj_.original_tagname_ = 'TimeInTransit'
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsInfoType.factory()
            obj_.build(child_)
            self.HandlingUnits = obj_
            obj_.original_tagname_ = 'HandlingUnits'
        elif nodeName_ == 'QuoteNumber':
            QuoteNumber_ = child_.text
            QuoteNumber_ = self.gds_validate_string(QuoteNumber_, node, 'QuoteNumber')
            self.QuoteNumber = QuoteNumber_
# end class FreightRateResponse


class AccountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountType.subclass:
            return AccountType.subclass(*args_, **kwargs_)
        else:
            return AccountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='AccountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='AccountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='AccountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='AccountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Code>%s</frt:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Description>%s</frt:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class AccountType


class ShipmentTotalWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentTotalWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentTotalWeightType.subclass:
            return ShipmentTotalWeightType.subclass(*args_, **kwargs_)
        else:
            return ShipmentTotalWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='ShipmentTotalWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentTotalWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentTotalWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='ShipmentTotalWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='ShipmentTotalWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='ShipmentTotalWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Value>%s</frt:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ShipmentTotalWeightType


class HandlingUnitWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitWeightType.subclass:
            return HandlingUnitWeightType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingUnitWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingUnitWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingUnitWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingUnitWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Value>%s</frt:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class HandlingUnitWeightType


class AlternateRatesResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AlternateRateType=None, Rate=None, FreightDensityRate=None, BillableShipmentWeight=None, TimeInTransit=None):
        self.original_tagname_ = None
        self.AlternateRateType = AlternateRateType
        if Rate is None:
            self.Rate = []
        else:
            self.Rate = Rate
        self.FreightDensityRate = FreightDensityRate
        self.BillableShipmentWeight = BillableShipmentWeight
        self.TimeInTransit = TimeInTransit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlternateRatesResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlternateRatesResponseType.subclass:
            return AlternateRatesResponseType.subclass(*args_, **kwargs_)
        else:
            return AlternateRatesResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AlternateRateType(self): return self.AlternateRateType
    def set_AlternateRateType(self, AlternateRateType): self.AlternateRateType = AlternateRateType
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def add_Rate(self, value): self.Rate.append(value)
    def insert_Rate_at(self, index, value): self.Rate.insert(index, value)
    def replace_Rate_at(self, index, value): self.Rate[index] = value
    def get_FreightDensityRate(self): return self.FreightDensityRate
    def set_FreightDensityRate(self, FreightDensityRate): self.FreightDensityRate = FreightDensityRate
    def get_BillableShipmentWeight(self): return self.BillableShipmentWeight
    def set_BillableShipmentWeight(self, BillableShipmentWeight): self.BillableShipmentWeight = BillableShipmentWeight
    def get_TimeInTransit(self): return self.TimeInTransit
    def set_TimeInTransit(self, TimeInTransit): self.TimeInTransit = TimeInTransit
    def hasContent_(self):
        if (
            self.AlternateRateType is not None or
            self.Rate or
            self.FreightDensityRate is not None or
            self.BillableShipmentWeight is not None or
            self.TimeInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='AlternateRatesResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlternateRatesResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AlternateRatesResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='AlternateRatesResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='AlternateRatesResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='AlternateRatesResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AlternateRateType is not None:
            self.AlternateRateType.export(outfile, level, namespace_, name_='AlternateRateType', pretty_print=pretty_print)
        for Rate_ in self.Rate:
            Rate_.export(outfile, level, namespace_, name_='Rate', pretty_print=pretty_print)
        if self.FreightDensityRate is not None:
            self.FreightDensityRate.export(outfile, level, namespace_, name_='FreightDensityRate', pretty_print=pretty_print)
        if self.BillableShipmentWeight is not None:
            self.BillableShipmentWeight.export(outfile, level, namespace_, name_='BillableShipmentWeight', pretty_print=pretty_print)
        if self.TimeInTransit is not None:
            self.TimeInTransit.export(outfile, level, namespace_, name_='TimeInTransit', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AlternateRateType':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.AlternateRateType = obj_
            obj_.original_tagname_ = 'AlternateRateType'
        elif nodeName_ == 'Rate':
            obj_ = RateType.factory()
            obj_.build(child_)
            self.Rate.append(obj_)
            obj_.original_tagname_ = 'Rate'
        elif nodeName_ == 'FreightDensityRate':
            obj_ = FreightDensityRateType.factory()
            obj_.build(child_)
            self.FreightDensityRate = obj_
            obj_.original_tagname_ = 'FreightDensityRate'
        elif nodeName_ == 'BillableShipmentWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.BillableShipmentWeight = obj_
            obj_.original_tagname_ = 'BillableShipmentWeight'
        elif nodeName_ == 'TimeInTransit':
            obj_ = TimeInTransitResponseType.factory()
            obj_.build(child_)
            self.TimeInTransit = obj_
            obj_.original_tagname_ = 'TimeInTransit'
# end class AlternateRatesResponseType


class ShipFromType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, AttentionName=None, TariffPoint=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
        self.AttentionName = AttentionName
        self.TariffPoint = TariffPoint
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_TariffPoint(self): return self.TariffPoint
    def set_TariffPoint(self, TariffPoint): self.TariffPoint = TariffPoint
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.TariffPoint is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='ShipFromType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='ShipFromType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='ShipFromType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='ShipFromType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Name>%s</frt:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AttentionName>%s</frt:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.TariffPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:TariffPoint>%s</frt:TariffPoint>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TariffPoint), input_name='TariffPoint')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'TariffPoint':
            TariffPoint_ = child_.text
            TariffPoint_ = self.gds_validate_string(TariffPoint_, node, 'TariffPoint')
            self.TariffPoint = TariffPoint_
# end class ShipFromType


class ShipToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, AttentionName=None, TariffPoint=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
        self.AttentionName = AttentionName
        self.TariffPoint = TariffPoint
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_TariffPoint(self): return self.TariffPoint
    def set_TariffPoint(self, TariffPoint): self.TariffPoint = TariffPoint
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.TariffPoint is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='ShipToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='ShipToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='ShipToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='ShipToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Name>%s</frt:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AttentionName>%s</frt:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.TariffPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:TariffPoint>%s</frt:TariffPoint>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TariffPoint), input_name='TariffPoint')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'TariffPoint':
            TariffPoint_ = child_.text
            TariffPoint_ = self.gds_validate_string(TariffPoint_, node, 'TariffPoint')
            self.TariffPoint = TariffPoint_
# end class ShipToType


class PaymentInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Payer=None, ShipmentBillingOption=None):
        self.original_tagname_ = None
        self.Payer = Payer
        self.ShipmentBillingOption = ShipmentBillingOption
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentInformationType.subclass:
            return PaymentInformationType.subclass(*args_, **kwargs_)
        else:
            return PaymentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Payer(self): return self.Payer
    def set_Payer(self, Payer): self.Payer = Payer
    def get_ShipmentBillingOption(self): return self.ShipmentBillingOption
    def set_ShipmentBillingOption(self, ShipmentBillingOption): self.ShipmentBillingOption = ShipmentBillingOption
    def hasContent_(self):
        if (
            self.Payer is not None or
            self.ShipmentBillingOption is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='PaymentInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='PaymentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='PaymentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='PaymentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Payer is not None:
            self.Payer.export(outfile, level, namespace_, name_='Payer', pretty_print=pretty_print)
        if self.ShipmentBillingOption is not None:
            self.ShipmentBillingOption.export(outfile, level, namespace_, name_='ShipmentBillingOption', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Payer':
            obj_ = PayerType.factory()
            obj_.build(child_)
            self.Payer = obj_
            obj_.original_tagname_ = 'Payer'
        elif nodeName_ == 'ShipmentBillingOption':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.ShipmentBillingOption = obj_
            obj_.original_tagname_ = 'ShipmentBillingOption'
# end class PaymentInformationType


class PayerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, ShipperNumber=None, AttentionName=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
        self.ShipperNumber = ShipperNumber
        self.AttentionName = AttentionName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PayerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PayerType.subclass:
            return PayerType.subclass(*args_, **kwargs_)
        else:
            return PayerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.ShipperNumber is not None or
            self.AttentionName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='PayerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PayerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PayerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='PayerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='PayerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='PayerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Name>%s</frt:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:ShipperNumber>%s</frt:ShipperNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AttentionName>%s</frt:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
# end class PayerType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, Town=None, PostalCode=None, CountryCode=None, ResidentialAddressIndicator=None):
        self.original_tagname_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.Town = Town
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
        self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value): self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value): self.AddressLine[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_Town(self): return self.Town
    def set_Town(self, Town): self.Town = Town
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_ResidentialAddressIndicator(self): return self.ResidentialAddressIndicator
    def set_ResidentialAddressIndicator(self, ResidentialAddressIndicator): self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.Town is not None or
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.ResidentialAddressIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='AddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AddressLine>%s</frt:AddressLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:City>%s</frt:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:StateProvinceCode>%s</frt:StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.Town is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Town>%s</frt:Town>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:PostalCode>%s</frt:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CountryCode>%s</frt:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.ResidentialAddressIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:ResidentialAddressIndicator>%s</frt:ResidentialAddressIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialAddressIndicator), input_name='ResidentialAddressIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'Town':
            Town_ = child_.text
            Town_ = self.gds_validate_string(Town_, node, 'Town')
            self.Town = Town_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'ResidentialAddressIndicator':
            ResidentialAddressIndicator_ = child_.text
            ResidentialAddressIndicator_ = self.gds_validate_string(ResidentialAddressIndicator_, node, 'ResidentialAddressIndicator')
            self.ResidentialAddressIndicator = ResidentialAddressIndicator_
# end class AddressType


class PhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneType.subclass:
            return PhoneType.subclass(*args_, **kwargs_)
        else:
            return PhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='PhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='PhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='PhoneType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='PhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Number>%s</frt:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Extension>%s</frt:Extension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Extension':
            Extension_ = child_.text
            Extension_ = self.gds_validate_string(Extension_, node, 'Extension')
            self.Extension = Extension_
# end class PhoneType


class RateCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateCodeDescriptionType.subclass:
            return RateCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return RateCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='RateCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='RateCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='RateCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='RateCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Code>%s</frt:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Description>%s</frt:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class RateCodeDescriptionType


class HandlingUnitType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitType.subclass:
            return HandlingUnitType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingUnitType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingUnitType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingUnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Quantity>%s</frt:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
# end class HandlingUnitType


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityID=None, Description=None, Weight=None, AdjustedWeight=None, Dimensions=None, NumberOfPieces=None, PackagingType=None, DangerousGoodsIndicator=None, CommodityValue=None, FreightClass=None, NMFCCommodityCode=None, NMFCCommodity=None):
        self.original_tagname_ = None
        self.CommodityID = CommodityID
        self.Description = Description
        self.Weight = Weight
        self.AdjustedWeight = AdjustedWeight
        self.Dimensions = Dimensions
        self.NumberOfPieces = NumberOfPieces
        self.PackagingType = PackagingType
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
        self.CommodityValue = CommodityValue
        self.FreightClass = FreightClass
        self.NMFCCommodityCode = NMFCCommodityCode
        self.NMFCCommodity = NMFCCommodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityID(self): return self.CommodityID
    def set_CommodityID(self, CommodityID): self.CommodityID = CommodityID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_AdjustedWeight(self): return self.AdjustedWeight
    def set_AdjustedWeight(self, AdjustedWeight): self.AdjustedWeight = AdjustedWeight
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_NumberOfPieces(self): return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces): self.NumberOfPieces = NumberOfPieces
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_DangerousGoodsIndicator(self): return self.DangerousGoodsIndicator
    def set_DangerousGoodsIndicator(self, DangerousGoodsIndicator): self.DangerousGoodsIndicator = DangerousGoodsIndicator
    def get_CommodityValue(self): return self.CommodityValue
    def set_CommodityValue(self, CommodityValue): self.CommodityValue = CommodityValue
    def get_FreightClass(self): return self.FreightClass
    def set_FreightClass(self, FreightClass): self.FreightClass = FreightClass
    def get_NMFCCommodityCode(self): return self.NMFCCommodityCode
    def set_NMFCCommodityCode(self, NMFCCommodityCode): self.NMFCCommodityCode = NMFCCommodityCode
    def get_NMFCCommodity(self): return self.NMFCCommodity
    def set_NMFCCommodity(self, NMFCCommodity): self.NMFCCommodity = NMFCCommodity
    def hasContent_(self):
        if (
            self.CommodityID is not None or
            self.Description is not None or
            self.Weight is not None or
            self.AdjustedWeight is not None or
            self.Dimensions is not None or
            self.NumberOfPieces is not None or
            self.PackagingType is not None or
            self.DangerousGoodsIndicator is not None or
            self.CommodityValue is not None or
            self.FreightClass is not None or
            self.NMFCCommodityCode is not None or
            self.NMFCCommodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CommodityID>%s</frt:CommodityID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityID), input_name='CommodityID')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Description>%s</frt:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.AdjustedWeight is not None:
            self.AdjustedWeight.export(outfile, level, namespace_, name_='AdjustedWeight', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.NumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:NumberOfPieces>%s</frt:NumberOfPieces>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPieces), input_name='NumberOfPieces')), eol_))
        if self.PackagingType is not None:
            self.PackagingType.export(outfile, level, namespace_, name_='PackagingType', pretty_print=pretty_print)
        if self.DangerousGoodsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:DangerousGoodsIndicator>%s</frt:DangerousGoodsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DangerousGoodsIndicator), input_name='DangerousGoodsIndicator')), eol_))
        if self.CommodityValue is not None:
            self.CommodityValue.export(outfile, level, namespace_, name_='CommodityValue', pretty_print=pretty_print)
        if self.FreightClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:FreightClass>%s</frt:FreightClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), eol_))
        if self.NMFCCommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:NMFCCommodityCode>%s</frt:NMFCCommodityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NMFCCommodityCode), input_name='NMFCCommodityCode')), eol_))
        if self.NMFCCommodity is not None:
            self.NMFCCommodity.export(outfile, level, namespace_, name_='NMFCCommodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityID':
            CommodityID_ = child_.text
            CommodityID_ = self.gds_validate_string(CommodityID_, node, 'CommodityID')
            self.CommodityID = CommodityID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'AdjustedWeight':
            obj_ = AdjustedWeightType.factory()
            obj_.build(child_)
            self.AdjustedWeight = obj_
            obj_.original_tagname_ = 'AdjustedWeight'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'NumberOfPieces':
            NumberOfPieces_ = child_.text
            NumberOfPieces_ = self.gds_validate_string(NumberOfPieces_, node, 'NumberOfPieces')
            self.NumberOfPieces = NumberOfPieces_
        elif nodeName_ == 'PackagingType':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'DangerousGoodsIndicator':
            DangerousGoodsIndicator_ = child_.text
            DangerousGoodsIndicator_ = self.gds_validate_string(DangerousGoodsIndicator_, node, 'DangerousGoodsIndicator')
            self.DangerousGoodsIndicator = DangerousGoodsIndicator_
        elif nodeName_ == 'CommodityValue':
            obj_ = CommodityValueType.factory()
            obj_.build(child_)
            self.CommodityValue = obj_
            obj_.original_tagname_ = 'CommodityValue'
        elif nodeName_ == 'FreightClass':
            FreightClass_ = child_.text
            FreightClass_ = self.gds_validate_string(FreightClass_, node, 'FreightClass')
            self.FreightClass = FreightClass_
        elif nodeName_ == 'NMFCCommodityCode':
            NMFCCommodityCode_ = child_.text
            NMFCCommodityCode_ = self.gds_validate_string(NMFCCommodityCode_, node, 'NMFCCommodityCode')
            self.NMFCCommodityCode = NMFCCommodityCode_
        elif nodeName_ == 'NMFCCommodity':
            obj_ = NMFCCommodityType.factory()
            obj_.build(child_)
            self.NMFCCommodity = obj_
            obj_.original_tagname_ = 'NMFCCommodity'
# end class CommodityType


class NMFCCommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PrimeCode=None, SubCode=None):
        self.original_tagname_ = None
        self.PrimeCode = PrimeCode
        self.SubCode = SubCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NMFCCommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NMFCCommodityType.subclass:
            return NMFCCommodityType.subclass(*args_, **kwargs_)
        else:
            return NMFCCommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PrimeCode(self): return self.PrimeCode
    def set_PrimeCode(self, PrimeCode): self.PrimeCode = PrimeCode
    def get_SubCode(self): return self.SubCode
    def set_SubCode(self, SubCode): self.SubCode = SubCode
    def hasContent_(self):
        if (
            self.PrimeCode is not None or
            self.SubCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='NMFCCommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NMFCCommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NMFCCommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='NMFCCommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='NMFCCommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='NMFCCommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrimeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:PrimeCode>%s</frt:PrimeCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrimeCode), input_name='PrimeCode')), eol_))
        if self.SubCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:SubCode>%s</frt:SubCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubCode), input_name='SubCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PrimeCode':
            PrimeCode_ = child_.text
            PrimeCode_ = self.gds_validate_string(PrimeCode_, node, 'PrimeCode')
            self.PrimeCode = PrimeCode_
        elif nodeName_ == 'SubCode':
            SubCode_ = child_.text
            SubCode_ = self.gds_validate_string(SubCode_, node, 'SubCode')
            self.SubCode = SubCode_
# end class NMFCCommodityType


class WeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightType.subclass:
            return WeightType.subclass(*args_, **kwargs_)
        else:
            return WeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='WeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='WeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='WeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='WeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Value>%s</frt:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class WeightType


class AdjustedWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdjustedWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdjustedWeightType.subclass:
            return AdjustedWeightType.subclass(*args_, **kwargs_)
        else:
            return AdjustedWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='AdjustedWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdjustedWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdjustedWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='AdjustedWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='AdjustedWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='AdjustedWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Value>%s</frt:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class AdjustedWeightType


class UnitOfMeasurementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='UnitOfMeasurementType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Code>%s</frt:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Description>%s</frt:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UnitOfMeasurementType


class DimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='DimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Length>%s</frt:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Width>%s</frt:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Height>%s</frt:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class DimensionsType


class CommodityValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityValueType.subclass:
            return CommodityValueType.subclass(*args_, **kwargs_)
        else:
            return CommodityValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CommodityValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CommodityValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CommodityValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CommodityValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CommodityValueType


class ShipmentServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PickupOptions=None, DeliveryOptions=None, OverSeasLeg=None, COD=None, DangerousGoods=None, SortingAndSegregating=None, DeclaredValue=None, ExcessDeclaredValue=None, CustomsValue=None, DeliveryDutiesPaidIndicator=None, DeliveryDutiesUnpaidIndicator=None, HandlingCharge=None, CustomsClearanceIndicator=None, FreezableProtectionIndicator=None, ExtremeLengthIndicator=None, AdjustedHeight=None):
        self.original_tagname_ = None
        self.PickupOptions = PickupOptions
        self.DeliveryOptions = DeliveryOptions
        self.OverSeasLeg = OverSeasLeg
        self.COD = COD
        self.DangerousGoods = DangerousGoods
        self.SortingAndSegregating = SortingAndSegregating
        self.DeclaredValue = DeclaredValue
        self.ExcessDeclaredValue = ExcessDeclaredValue
        self.CustomsValue = CustomsValue
        self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator
        self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator
        self.HandlingCharge = HandlingCharge
        self.CustomsClearanceIndicator = CustomsClearanceIndicator
        self.FreezableProtectionIndicator = FreezableProtectionIndicator
        self.ExtremeLengthIndicator = ExtremeLengthIndicator
        self.AdjustedHeight = AdjustedHeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickupOptions(self): return self.PickupOptions
    def set_PickupOptions(self, PickupOptions): self.PickupOptions = PickupOptions
    def get_DeliveryOptions(self): return self.DeliveryOptions
    def set_DeliveryOptions(self, DeliveryOptions): self.DeliveryOptions = DeliveryOptions
    def get_OverSeasLeg(self): return self.OverSeasLeg
    def set_OverSeasLeg(self, OverSeasLeg): self.OverSeasLeg = OverSeasLeg
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_DangerousGoods(self): return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods): self.DangerousGoods = DangerousGoods
    def get_SortingAndSegregating(self): return self.SortingAndSegregating
    def set_SortingAndSegregating(self, SortingAndSegregating): self.SortingAndSegregating = SortingAndSegregating
    def get_DeclaredValue(self): return self.DeclaredValue
    def set_DeclaredValue(self, DeclaredValue): self.DeclaredValue = DeclaredValue
    def get_ExcessDeclaredValue(self): return self.ExcessDeclaredValue
    def set_ExcessDeclaredValue(self, ExcessDeclaredValue): self.ExcessDeclaredValue = ExcessDeclaredValue
    def get_CustomsValue(self): return self.CustomsValue
    def set_CustomsValue(self, CustomsValue): self.CustomsValue = CustomsValue
    def get_DeliveryDutiesPaidIndicator(self): return self.DeliveryDutiesPaidIndicator
    def set_DeliveryDutiesPaidIndicator(self, DeliveryDutiesPaidIndicator): self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator
    def get_DeliveryDutiesUnpaidIndicator(self): return self.DeliveryDutiesUnpaidIndicator
    def set_DeliveryDutiesUnpaidIndicator(self, DeliveryDutiesUnpaidIndicator): self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator
    def get_HandlingCharge(self): return self.HandlingCharge
    def set_HandlingCharge(self, HandlingCharge): self.HandlingCharge = HandlingCharge
    def get_CustomsClearanceIndicator(self): return self.CustomsClearanceIndicator
    def set_CustomsClearanceIndicator(self, CustomsClearanceIndicator): self.CustomsClearanceIndicator = CustomsClearanceIndicator
    def get_FreezableProtectionIndicator(self): return self.FreezableProtectionIndicator
    def set_FreezableProtectionIndicator(self, FreezableProtectionIndicator): self.FreezableProtectionIndicator = FreezableProtectionIndicator
    def get_ExtremeLengthIndicator(self): return self.ExtremeLengthIndicator
    def set_ExtremeLengthIndicator(self, ExtremeLengthIndicator): self.ExtremeLengthIndicator = ExtremeLengthIndicator
    def get_AdjustedHeight(self): return self.AdjustedHeight
    def set_AdjustedHeight(self, AdjustedHeight): self.AdjustedHeight = AdjustedHeight
    def hasContent_(self):
        if (
            self.PickupOptions is not None or
            self.DeliveryOptions is not None or
            self.OverSeasLeg is not None or
            self.COD is not None or
            self.DangerousGoods is not None or
            self.SortingAndSegregating is not None or
            self.DeclaredValue is not None or
            self.ExcessDeclaredValue is not None or
            self.CustomsValue is not None or
            self.DeliveryDutiesPaidIndicator is not None or
            self.DeliveryDutiesUnpaidIndicator is not None or
            self.HandlingCharge is not None or
            self.CustomsClearanceIndicator is not None or
            self.FreezableProtectionIndicator is not None or
            self.ExtremeLengthIndicator is not None or
            self.AdjustedHeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='ShipmentServiceOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='ShipmentServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='ShipmentServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='ShipmentServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickupOptions is not None:
            self.PickupOptions.export(outfile, level, namespace_, name_='PickupOptions', pretty_print=pretty_print)
        if self.DeliveryOptions is not None:
            self.DeliveryOptions.export(outfile, level, namespace_, name_='DeliveryOptions', pretty_print=pretty_print)
        if self.OverSeasLeg is not None:
            self.OverSeasLeg.export(outfile, level, namespace_, name_='OverSeasLeg', pretty_print=pretty_print)
        if self.COD is not None:
            self.COD.export(outfile, level, namespace_, name_='COD', pretty_print=pretty_print)
        if self.DangerousGoods is not None:
            self.DangerousGoods.export(outfile, level, namespace_, name_='DangerousGoods', pretty_print=pretty_print)
        if self.SortingAndSegregating is not None:
            self.SortingAndSegregating.export(outfile, level, namespace_, name_='SortingAndSegregating', pretty_print=pretty_print)
        if self.DeclaredValue is not None:
            self.DeclaredValue.export(outfile, level, namespace_, name_='DeclaredValue', pretty_print=pretty_print)
        if self.ExcessDeclaredValue is not None:
            self.ExcessDeclaredValue.export(outfile, level, namespace_, name_='ExcessDeclaredValue', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            self.CustomsValue.export(outfile, level, namespace_, name_='CustomsValue', pretty_print=pretty_print)
        if self.DeliveryDutiesPaidIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:DeliveryDutiesPaidIndicator>%s</frt:DeliveryDutiesPaidIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDutiesPaidIndicator), input_name='DeliveryDutiesPaidIndicator')), eol_))
        if self.DeliveryDutiesUnpaidIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:DeliveryDutiesUnpaidIndicator>%s</frt:DeliveryDutiesUnpaidIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDutiesUnpaidIndicator), input_name='DeliveryDutiesUnpaidIndicator')), eol_))
        if self.HandlingCharge is not None:
            self.HandlingCharge.export(outfile, level, namespace_, name_='HandlingCharge', pretty_print=pretty_print)
        if self.CustomsClearanceIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CustomsClearanceIndicator>%s</frt:CustomsClearanceIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomsClearanceIndicator), input_name='CustomsClearanceIndicator')), eol_))
        if self.FreezableProtectionIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:FreezableProtectionIndicator>%s</frt:FreezableProtectionIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FreezableProtectionIndicator), input_name='FreezableProtectionIndicator')), eol_))
        if self.ExtremeLengthIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:ExtremeLengthIndicator>%s</frt:ExtremeLengthIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExtremeLengthIndicator), input_name='ExtremeLengthIndicator')), eol_))
        if self.AdjustedHeight is not None:
            self.AdjustedHeight.export(outfile, level, namespace_, name_='AdjustedHeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickupOptions':
            obj_ = PickupOptionsType.factory()
            obj_.build(child_)
            self.PickupOptions = obj_
            obj_.original_tagname_ = 'PickupOptions'
        elif nodeName_ == 'DeliveryOptions':
            obj_ = DeliveryOptionsType.factory()
            obj_.build(child_)
            self.DeliveryOptions = obj_
            obj_.original_tagname_ = 'DeliveryOptions'
        elif nodeName_ == 'OverSeasLeg':
            obj_ = OverSeasLegType.factory()
            obj_.build(child_)
            self.OverSeasLeg = obj_
            obj_.original_tagname_ = 'OverSeasLeg'
        elif nodeName_ == 'COD':
            obj_ = CODType.factory()
            obj_.build(child_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'DangerousGoods':
            obj_ = DangerousGoodsType.factory()
            obj_.build(child_)
            self.DangerousGoods = obj_
            obj_.original_tagname_ = 'DangerousGoods'
        elif nodeName_ == 'SortingAndSegregating':
            obj_ = SortingAndSegregatingType.factory()
            obj_.build(child_)
            self.SortingAndSegregating = obj_
            obj_.original_tagname_ = 'SortingAndSegregating'
        elif nodeName_ == 'DeclaredValue':
            obj_ = DeclaredValueType.factory()
            obj_.build(child_)
            self.DeclaredValue = obj_
            obj_.original_tagname_ = 'DeclaredValue'
        elif nodeName_ == 'ExcessDeclaredValue':
            obj_ = DeclaredValueType.factory()
            obj_.build(child_)
            self.ExcessDeclaredValue = obj_
            obj_.original_tagname_ = 'ExcessDeclaredValue'
        elif nodeName_ == 'CustomsValue':
            obj_ = CustomsValueType.factory()
            obj_.build(child_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'DeliveryDutiesPaidIndicator':
            DeliveryDutiesPaidIndicator_ = child_.text
            DeliveryDutiesPaidIndicator_ = self.gds_validate_string(DeliveryDutiesPaidIndicator_, node, 'DeliveryDutiesPaidIndicator')
            self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator_
        elif nodeName_ == 'DeliveryDutiesUnpaidIndicator':
            DeliveryDutiesUnpaidIndicator_ = child_.text
            DeliveryDutiesUnpaidIndicator_ = self.gds_validate_string(DeliveryDutiesUnpaidIndicator_, node, 'DeliveryDutiesUnpaidIndicator')
            self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator_
        elif nodeName_ == 'HandlingCharge':
            obj_ = HandlingChargeType.factory()
            obj_.build(child_)
            self.HandlingCharge = obj_
            obj_.original_tagname_ = 'HandlingCharge'
        elif nodeName_ == 'CustomsClearanceIndicator':
            CustomsClearanceIndicator_ = child_.text
            CustomsClearanceIndicator_ = self.gds_validate_string(CustomsClearanceIndicator_, node, 'CustomsClearanceIndicator')
            self.CustomsClearanceIndicator = CustomsClearanceIndicator_
        elif nodeName_ == 'FreezableProtectionIndicator':
            FreezableProtectionIndicator_ = child_.text
            FreezableProtectionIndicator_ = self.gds_validate_string(FreezableProtectionIndicator_, node, 'FreezableProtectionIndicator')
            self.FreezableProtectionIndicator = FreezableProtectionIndicator_
        elif nodeName_ == 'ExtremeLengthIndicator':
            ExtremeLengthIndicator_ = child_.text
            ExtremeLengthIndicator_ = self.gds_validate_string(ExtremeLengthIndicator_, node, 'ExtremeLengthIndicator')
            self.ExtremeLengthIndicator = ExtremeLengthIndicator_
        elif nodeName_ == 'AdjustedHeight':
            obj_ = AdjustedHeightType.factory()
            obj_.build(child_)
            self.AdjustedHeight = obj_
            obj_.original_tagname_ = 'AdjustedHeight'
# end class ShipmentServiceOptionsType


class EmailInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailType=None, EMail=None):
        self.original_tagname_ = None
        self.EMailType = EMailType
        self.EMail = EMail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailInformationType.subclass:
            return EmailInformationType.subclass(*args_, **kwargs_)
        else:
            return EmailInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailType(self): return self.EMailType
    def set_EMailType(self, EMailType): self.EMailType = EMailType
    def get_EMail(self): return self.EMail
    def set_EMail(self, EMail): self.EMail = EMail
    def hasContent_(self):
        if (
            self.EMailType is not None or
            self.EMail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='EmailInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EmailInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='EmailInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='EmailInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='EmailInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailType is not None:
            self.EMailType.export(outfile, level, namespace_, name_='EMailType', pretty_print=pretty_print)
        if self.EMail is not None:
            self.EMail.export(outfile, level, namespace_, name_='EMail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailType':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.EMailType = obj_
            obj_.original_tagname_ = 'EMailType'
        elif nodeName_ == 'EMail':
            obj_ = EMailType.factory()
            obj_.build(child_)
            self.EMail = obj_
            obj_.original_tagname_ = 'EMail'
# end class EmailInformationType


class EMailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, EMailText=None, UndeliverableEMailAddress=None, Subject=None):
        self.original_tagname_ = None
        if EMailAddress is None:
            self.EMailAddress = []
        else:
            self.EMailAddress = EMailAddress
        self.EMailText = EMailText
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.Subject = Subject
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailType.subclass:
            return EMailType.subclass(*args_, **kwargs_)
        else:
            return EMailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def add_EMailAddress(self, value): self.EMailAddress.append(value)
    def insert_EMailAddress_at(self, index, value): self.EMailAddress.insert(index, value)
    def replace_EMailAddress_at(self, index, value): self.EMailAddress[index] = value
    def get_EMailText(self): return self.EMailText
    def set_EMailText(self, EMailText): self.EMailText = EMailText
    def get_UndeliverableEMailAddress(self): return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress): self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_Subject(self): return self.Subject
    def set_Subject(self, Subject): self.Subject = Subject
    def hasContent_(self):
        if (
            self.EMailAddress or
            self.EMailText is not None or
            self.UndeliverableEMailAddress is not None or
            self.Subject is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='EMailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='EMailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='EMailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='EMailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailAddress_ in self.EMailAddress:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:EMailAddress>%s</frt:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EMailAddress_), input_name='EMailAddress')), eol_))
        if self.EMailText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:EMailText>%s</frt:EMailText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailText), input_name='EMailText')), eol_))
        if self.UndeliverableEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:UndeliverableEMailAddress>%s</frt:UndeliverableEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), eol_))
        if self.Subject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Subject>%s</frt:Subject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress.append(EMailAddress_)
        elif nodeName_ == 'EMailText':
            EMailText_ = child_.text
            EMailText_ = self.gds_validate_string(EMailText_, node, 'EMailText')
            self.EMailText = EMailText_
        elif nodeName_ == 'UndeliverableEMailAddress':
            UndeliverableEMailAddress_ = child_.text
            UndeliverableEMailAddress_ = self.gds_validate_string(UndeliverableEMailAddress_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = UndeliverableEMailAddress_
        elif nodeName_ == 'Subject':
            Subject_ = child_.text
            Subject_ = self.gds_validate_string(Subject_, node, 'Subject')
            self.Subject = Subject_
# end class EMailType


class PickupOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HolidayPickupIndicator=None, InsidePickupIndicator=None, ResidentialPickupIndicator=None, WeekendPickupIndicator=None, LiftGateRequiredIndicator=None, HoldAtAirportForPickupIndicator=None, PickupFromDoorIndicator=None, LimitedAccessPickupIndicator=None):
        self.original_tagname_ = None
        self.HolidayPickupIndicator = HolidayPickupIndicator
        self.InsidePickupIndicator = InsidePickupIndicator
        self.ResidentialPickupIndicator = ResidentialPickupIndicator
        self.WeekendPickupIndicator = WeekendPickupIndicator
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
        self.HoldAtAirportForPickupIndicator = HoldAtAirportForPickupIndicator
        self.PickupFromDoorIndicator = PickupFromDoorIndicator
        self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupOptionsType.subclass:
            return PickupOptionsType.subclass(*args_, **kwargs_)
        else:
            return PickupOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HolidayPickupIndicator(self): return self.HolidayPickupIndicator
    def set_HolidayPickupIndicator(self, HolidayPickupIndicator): self.HolidayPickupIndicator = HolidayPickupIndicator
    def get_InsidePickupIndicator(self): return self.InsidePickupIndicator
    def set_InsidePickupIndicator(self, InsidePickupIndicator): self.InsidePickupIndicator = InsidePickupIndicator
    def get_ResidentialPickupIndicator(self): return self.ResidentialPickupIndicator
    def set_ResidentialPickupIndicator(self, ResidentialPickupIndicator): self.ResidentialPickupIndicator = ResidentialPickupIndicator
    def get_WeekendPickupIndicator(self): return self.WeekendPickupIndicator
    def set_WeekendPickupIndicator(self, WeekendPickupIndicator): self.WeekendPickupIndicator = WeekendPickupIndicator
    def get_LiftGateRequiredIndicator(self): return self.LiftGateRequiredIndicator
    def set_LiftGateRequiredIndicator(self, LiftGateRequiredIndicator): self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
    def get_HoldAtAirportForPickupIndicator(self): return self.HoldAtAirportForPickupIndicator
    def set_HoldAtAirportForPickupIndicator(self, HoldAtAirportForPickupIndicator): self.HoldAtAirportForPickupIndicator = HoldAtAirportForPickupIndicator
    def get_PickupFromDoorIndicator(self): return self.PickupFromDoorIndicator
    def set_PickupFromDoorIndicator(self, PickupFromDoorIndicator): self.PickupFromDoorIndicator = PickupFromDoorIndicator
    def get_LimitedAccessPickupIndicator(self): return self.LimitedAccessPickupIndicator
    def set_LimitedAccessPickupIndicator(self, LimitedAccessPickupIndicator): self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator
    def hasContent_(self):
        if (
            self.HolidayPickupIndicator is not None or
            self.InsidePickupIndicator is not None or
            self.ResidentialPickupIndicator is not None or
            self.WeekendPickupIndicator is not None or
            self.LiftGateRequiredIndicator is not None or
            self.HoldAtAirportForPickupIndicator is not None or
            self.PickupFromDoorIndicator is not None or
            self.LimitedAccessPickupIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='PickupOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='PickupOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='PickupOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='PickupOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HolidayPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:HolidayPickupIndicator>%s</frt:HolidayPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HolidayPickupIndicator), input_name='HolidayPickupIndicator')), eol_))
        if self.InsidePickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:InsidePickupIndicator>%s</frt:InsidePickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InsidePickupIndicator), input_name='InsidePickupIndicator')), eol_))
        if self.ResidentialPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:ResidentialPickupIndicator>%s</frt:ResidentialPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialPickupIndicator), input_name='ResidentialPickupIndicator')), eol_))
        if self.WeekendPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:WeekendPickupIndicator>%s</frt:WeekendPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WeekendPickupIndicator), input_name='WeekendPickupIndicator')), eol_))
        if self.LiftGateRequiredIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:LiftGateRequiredIndicator>%s</frt:LiftGateRequiredIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateRequiredIndicator), input_name='LiftGateRequiredIndicator')), eol_))
        if self.HoldAtAirportForPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:HoldAtAirportForPickupIndicator>%s</frt:HoldAtAirportForPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldAtAirportForPickupIndicator), input_name='HoldAtAirportForPickupIndicator')), eol_))
        if self.PickupFromDoorIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:PickupFromDoorIndicator>%s</frt:PickupFromDoorIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupFromDoorIndicator), input_name='PickupFromDoorIndicator')), eol_))
        if self.LimitedAccessPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:LimitedAccessPickupIndicator>%s</frt:LimitedAccessPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LimitedAccessPickupIndicator), input_name='LimitedAccessPickupIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HolidayPickupIndicator':
            HolidayPickupIndicator_ = child_.text
            HolidayPickupIndicator_ = self.gds_validate_string(HolidayPickupIndicator_, node, 'HolidayPickupIndicator')
            self.HolidayPickupIndicator = HolidayPickupIndicator_
        elif nodeName_ == 'InsidePickupIndicator':
            InsidePickupIndicator_ = child_.text
            InsidePickupIndicator_ = self.gds_validate_string(InsidePickupIndicator_, node, 'InsidePickupIndicator')
            self.InsidePickupIndicator = InsidePickupIndicator_
        elif nodeName_ == 'ResidentialPickupIndicator':
            ResidentialPickupIndicator_ = child_.text
            ResidentialPickupIndicator_ = self.gds_validate_string(ResidentialPickupIndicator_, node, 'ResidentialPickupIndicator')
            self.ResidentialPickupIndicator = ResidentialPickupIndicator_
        elif nodeName_ == 'WeekendPickupIndicator':
            WeekendPickupIndicator_ = child_.text
            WeekendPickupIndicator_ = self.gds_validate_string(WeekendPickupIndicator_, node, 'WeekendPickupIndicator')
            self.WeekendPickupIndicator = WeekendPickupIndicator_
        elif nodeName_ == 'LiftGateRequiredIndicator':
            LiftGateRequiredIndicator_ = child_.text
            LiftGateRequiredIndicator_ = self.gds_validate_string(LiftGateRequiredIndicator_, node, 'LiftGateRequiredIndicator')
            self.LiftGateRequiredIndicator = LiftGateRequiredIndicator_
        elif nodeName_ == 'HoldAtAirportForPickupIndicator':
            HoldAtAirportForPickupIndicator_ = child_.text
            HoldAtAirportForPickupIndicator_ = self.gds_validate_string(HoldAtAirportForPickupIndicator_, node, 'HoldAtAirportForPickupIndicator')
            self.HoldAtAirportForPickupIndicator = HoldAtAirportForPickupIndicator_
        elif nodeName_ == 'PickupFromDoorIndicator':
            PickupFromDoorIndicator_ = child_.text
            PickupFromDoorIndicator_ = self.gds_validate_string(PickupFromDoorIndicator_, node, 'PickupFromDoorIndicator')
            self.PickupFromDoorIndicator = PickupFromDoorIndicator_
        elif nodeName_ == 'LimitedAccessPickupIndicator':
            LimitedAccessPickupIndicator_ = child_.text
            LimitedAccessPickupIndicator_ = self.gds_validate_string(LimitedAccessPickupIndicator_, node, 'LimitedAccessPickupIndicator')
            self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator_
# end class PickupOptionsType


class DeliveryOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CallBeforeDeliveryIndicator=None, ConstructionSiteDeliveryIndicator=None, HolidayDeliveryIndicator=None, InsideDeliveryIndicator=None, ResidentialDeliveryIndicator=None, WeekendDeliveryIndicator=None, LiftGateRequiredIndicator=None, SaturdayDeliveryIndicator=None, DeliveryToDoorIndicator=None, LimitedAccessDeliveryIndicator=None):
        self.original_tagname_ = None
        self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator
        self.ConstructionSiteDeliveryIndicator = ConstructionSiteDeliveryIndicator
        self.HolidayDeliveryIndicator = HolidayDeliveryIndicator
        self.InsideDeliveryIndicator = InsideDeliveryIndicator
        self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator
        self.WeekendDeliveryIndicator = WeekendDeliveryIndicator
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
        self.DeliveryToDoorIndicator = DeliveryToDoorIndicator
        self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOptionsType.subclass:
            return DeliveryOptionsType.subclass(*args_, **kwargs_)
        else:
            return DeliveryOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CallBeforeDeliveryIndicator(self): return self.CallBeforeDeliveryIndicator
    def set_CallBeforeDeliveryIndicator(self, CallBeforeDeliveryIndicator): self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator
    def get_ConstructionSiteDeliveryIndicator(self): return self.ConstructionSiteDeliveryIndicator
    def set_ConstructionSiteDeliveryIndicator(self, ConstructionSiteDeliveryIndicator): self.ConstructionSiteDeliveryIndicator = ConstructionSiteDeliveryIndicator
    def get_HolidayDeliveryIndicator(self): return self.HolidayDeliveryIndicator
    def set_HolidayDeliveryIndicator(self, HolidayDeliveryIndicator): self.HolidayDeliveryIndicator = HolidayDeliveryIndicator
    def get_InsideDeliveryIndicator(self): return self.InsideDeliveryIndicator
    def set_InsideDeliveryIndicator(self, InsideDeliveryIndicator): self.InsideDeliveryIndicator = InsideDeliveryIndicator
    def get_ResidentialDeliveryIndicator(self): return self.ResidentialDeliveryIndicator
    def set_ResidentialDeliveryIndicator(self, ResidentialDeliveryIndicator): self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator
    def get_WeekendDeliveryIndicator(self): return self.WeekendDeliveryIndicator
    def set_WeekendDeliveryIndicator(self, WeekendDeliveryIndicator): self.WeekendDeliveryIndicator = WeekendDeliveryIndicator
    def get_LiftGateRequiredIndicator(self): return self.LiftGateRequiredIndicator
    def set_LiftGateRequiredIndicator(self, LiftGateRequiredIndicator): self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
    def get_SaturdayDeliveryIndicator(self): return self.SaturdayDeliveryIndicator
    def set_SaturdayDeliveryIndicator(self, SaturdayDeliveryIndicator): self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
    def get_DeliveryToDoorIndicator(self): return self.DeliveryToDoorIndicator
    def set_DeliveryToDoorIndicator(self, DeliveryToDoorIndicator): self.DeliveryToDoorIndicator = DeliveryToDoorIndicator
    def get_LimitedAccessDeliveryIndicator(self): return self.LimitedAccessDeliveryIndicator
    def set_LimitedAccessDeliveryIndicator(self, LimitedAccessDeliveryIndicator): self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator
    def hasContent_(self):
        if (
            self.CallBeforeDeliveryIndicator is not None or
            self.ConstructionSiteDeliveryIndicator is not None or
            self.HolidayDeliveryIndicator is not None or
            self.InsideDeliveryIndicator is not None or
            self.ResidentialDeliveryIndicator is not None or
            self.WeekendDeliveryIndicator is not None or
            self.LiftGateRequiredIndicator is not None or
            self.SaturdayDeliveryIndicator is not None or
            self.DeliveryToDoorIndicator is not None or
            self.LimitedAccessDeliveryIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='DeliveryOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='DeliveryOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='DeliveryOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='DeliveryOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CallBeforeDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CallBeforeDeliveryIndicator>%s</frt:CallBeforeDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CallBeforeDeliveryIndicator), input_name='CallBeforeDeliveryIndicator')), eol_))
        if self.ConstructionSiteDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:ConstructionSiteDeliveryIndicator>%s</frt:ConstructionSiteDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConstructionSiteDeliveryIndicator), input_name='ConstructionSiteDeliveryIndicator')), eol_))
        if self.HolidayDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:HolidayDeliveryIndicator>%s</frt:HolidayDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HolidayDeliveryIndicator), input_name='HolidayDeliveryIndicator')), eol_))
        if self.InsideDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:InsideDeliveryIndicator>%s</frt:InsideDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InsideDeliveryIndicator), input_name='InsideDeliveryIndicator')), eol_))
        if self.ResidentialDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:ResidentialDeliveryIndicator>%s</frt:ResidentialDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialDeliveryIndicator), input_name='ResidentialDeliveryIndicator')), eol_))
        if self.WeekendDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:WeekendDeliveryIndicator>%s</frt:WeekendDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WeekendDeliveryIndicator), input_name='WeekendDeliveryIndicator')), eol_))
        if self.LiftGateRequiredIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:LiftGateRequiredIndicator>%s</frt:LiftGateRequiredIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateRequiredIndicator), input_name='LiftGateRequiredIndicator')), eol_))
        if self.SaturdayDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:SaturdayDeliveryIndicator>%s</frt:SaturdayDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDeliveryIndicator), input_name='SaturdayDeliveryIndicator')), eol_))
        if self.DeliveryToDoorIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:DeliveryToDoorIndicator>%s</frt:DeliveryToDoorIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryToDoorIndicator), input_name='DeliveryToDoorIndicator')), eol_))
        if self.LimitedAccessDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:LimitedAccessDeliveryIndicator>%s</frt:LimitedAccessDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LimitedAccessDeliveryIndicator), input_name='LimitedAccessDeliveryIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CallBeforeDeliveryIndicator':
            CallBeforeDeliveryIndicator_ = child_.text
            CallBeforeDeliveryIndicator_ = self.gds_validate_string(CallBeforeDeliveryIndicator_, node, 'CallBeforeDeliveryIndicator')
            self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator_
        elif nodeName_ == 'ConstructionSiteDeliveryIndicator':
            ConstructionSiteDeliveryIndicator_ = child_.text
            ConstructionSiteDeliveryIndicator_ = self.gds_validate_string(ConstructionSiteDeliveryIndicator_, node, 'ConstructionSiteDeliveryIndicator')
            self.ConstructionSiteDeliveryIndicator = ConstructionSiteDeliveryIndicator_
        elif nodeName_ == 'HolidayDeliveryIndicator':
            HolidayDeliveryIndicator_ = child_.text
            HolidayDeliveryIndicator_ = self.gds_validate_string(HolidayDeliveryIndicator_, node, 'HolidayDeliveryIndicator')
            self.HolidayDeliveryIndicator = HolidayDeliveryIndicator_
        elif nodeName_ == 'InsideDeliveryIndicator':
            InsideDeliveryIndicator_ = child_.text
            InsideDeliveryIndicator_ = self.gds_validate_string(InsideDeliveryIndicator_, node, 'InsideDeliveryIndicator')
            self.InsideDeliveryIndicator = InsideDeliveryIndicator_
        elif nodeName_ == 'ResidentialDeliveryIndicator':
            ResidentialDeliveryIndicator_ = child_.text
            ResidentialDeliveryIndicator_ = self.gds_validate_string(ResidentialDeliveryIndicator_, node, 'ResidentialDeliveryIndicator')
            self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator_
        elif nodeName_ == 'WeekendDeliveryIndicator':
            WeekendDeliveryIndicator_ = child_.text
            WeekendDeliveryIndicator_ = self.gds_validate_string(WeekendDeliveryIndicator_, node, 'WeekendDeliveryIndicator')
            self.WeekendDeliveryIndicator = WeekendDeliveryIndicator_
        elif nodeName_ == 'LiftGateRequiredIndicator':
            LiftGateRequiredIndicator_ = child_.text
            LiftGateRequiredIndicator_ = self.gds_validate_string(LiftGateRequiredIndicator_, node, 'LiftGateRequiredIndicator')
            self.LiftGateRequiredIndicator = LiftGateRequiredIndicator_
        elif nodeName_ == 'SaturdayDeliveryIndicator':
            SaturdayDeliveryIndicator_ = child_.text
            SaturdayDeliveryIndicator_ = self.gds_validate_string(SaturdayDeliveryIndicator_, node, 'SaturdayDeliveryIndicator')
            self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator_
        elif nodeName_ == 'DeliveryToDoorIndicator':
            DeliveryToDoorIndicator_ = child_.text
            DeliveryToDoorIndicator_ = self.gds_validate_string(DeliveryToDoorIndicator_, node, 'DeliveryToDoorIndicator')
            self.DeliveryToDoorIndicator = DeliveryToDoorIndicator_
        elif nodeName_ == 'LimitedAccessDeliveryIndicator':
            LimitedAccessDeliveryIndicator_ = child_.text
            LimitedAccessDeliveryIndicator_ = self.gds_validate_string(LimitedAccessDeliveryIndicator_, node, 'LimitedAccessDeliveryIndicator')
            self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator_
# end class DeliveryOptionsType


class OverSeasLegType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Dimensions=None, Value=None):
        self.original_tagname_ = None
        self.Dimensions = Dimensions
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OverSeasLegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OverSeasLegType.subclass:
            return OverSeasLegType.subclass(*args_, **kwargs_)
        else:
            return OverSeasLegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Dimensions is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='OverSeasLegType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OverSeasLegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OverSeasLegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='OverSeasLegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='OverSeasLegType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='OverSeasLegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dimensions':
            obj_ = DimensionType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Value':
            obj_ = DimensionValueType.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
# end class OverSeasLegType


class DimensionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Volume=None, Height=None, Length=None, Width=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Volume = Volume
        self.Height = Height
        self.Length = Length
        self.Width = Width
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionType.subclass:
            return DimensionType.subclass(*args_, **kwargs_)
        else:
            return DimensionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Volume is not None or
            self.Height is not None or
            self.Length is not None or
            self.Width is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='DimensionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='DimensionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='DimensionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='DimensionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Volume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Volume>%s</frt:Volume>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Volume), input_name='Volume')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Height>%s</frt:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Length>%s</frt:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Width>%s</frt:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Volume':
            Volume_ = child_.text
            Volume_ = self.gds_validate_string(Volume_, node, 'Volume')
            self.Volume = Volume_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class DimensionType


class DimensionValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cube=None, CWT=None):
        self.original_tagname_ = None
        self.Cube = Cube
        self.CWT = CWT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionValueType.subclass:
            return DimensionValueType.subclass(*args_, **kwargs_)
        else:
            return DimensionValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cube(self): return self.Cube
    def set_Cube(self, Cube): self.Cube = Cube
    def get_CWT(self): return self.CWT
    def set_CWT(self, CWT): self.CWT = CWT
    def hasContent_(self):
        if (
            self.Cube is not None or
            self.CWT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='DimensionValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='DimensionValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='DimensionValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='DimensionValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cube is not None:
            self.Cube.export(outfile, level, namespace_, name_='Cube', pretty_print=pretty_print)
        if self.CWT is not None:
            self.CWT.export(outfile, level, namespace_, name_='CWT', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cube':
            obj_ = CubeType.factory()
            obj_.build(child_)
            self.Cube = obj_
            obj_.original_tagname_ = 'Cube'
        elif nodeName_ == 'CWT':
            obj_ = CWTType.factory()
            obj_.build(child_)
            self.CWT = obj_
            obj_.original_tagname_ = 'CWT'
# end class DimensionValueType


class CubeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CubeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CubeType.subclass:
            return CubeType.subclass(*args_, **kwargs_)
        else:
            return CubeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CubeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CubeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CubeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CubeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CubeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CubeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CubeType


class CWTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CWTType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CWTType.subclass:
            return CWTType.subclass(*args_, **kwargs_)
        else:
            return CWTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CWTType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CWTType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CWTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CWTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CWTType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CWTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CWTType


class CODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODValue=None, CODPaymentMethod=None, CODBillingOption=None, RemitTo=None):
        self.original_tagname_ = None
        self.CODValue = CODValue
        self.CODPaymentMethod = CODPaymentMethod
        self.CODBillingOption = CODBillingOption
        self.RemitTo = RemitTo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODType.subclass:
            return CODType.subclass(*args_, **kwargs_)
        else:
            return CODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODValue(self): return self.CODValue
    def set_CODValue(self, CODValue): self.CODValue = CODValue
    def get_CODPaymentMethod(self): return self.CODPaymentMethod
    def set_CODPaymentMethod(self, CODPaymentMethod): self.CODPaymentMethod = CODPaymentMethod
    def get_CODBillingOption(self): return self.CODBillingOption
    def set_CODBillingOption(self, CODBillingOption): self.CODBillingOption = CODBillingOption
    def get_RemitTo(self): return self.RemitTo
    def set_RemitTo(self, RemitTo): self.RemitTo = RemitTo
    def hasContent_(self):
        if (
            self.CODValue is not None or
            self.CODPaymentMethod is not None or
            self.CODBillingOption is not None or
            self.RemitTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CODType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODValue is not None:
            self.CODValue.export(outfile, level, namespace_, name_='CODValue', pretty_print=pretty_print)
        if self.CODPaymentMethod is not None:
            self.CODPaymentMethod.export(outfile, level, namespace_, name_='CODPaymentMethod', pretty_print=pretty_print)
        if self.CODBillingOption is not None:
            self.CODBillingOption.export(outfile, level, namespace_, name_='CODBillingOption', pretty_print=pretty_print)
        if self.RemitTo is not None:
            self.RemitTo.export(outfile, level, namespace_, name_='RemitTo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODValue':
            obj_ = CODValueType.factory()
            obj_.build(child_)
            self.CODValue = obj_
            obj_.original_tagname_ = 'CODValue'
        elif nodeName_ == 'CODPaymentMethod':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.CODPaymentMethod = obj_
            obj_.original_tagname_ = 'CODPaymentMethod'
        elif nodeName_ == 'CODBillingOption':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.CODBillingOption = obj_
            obj_.original_tagname_ = 'CODBillingOption'
        elif nodeName_ == 'RemitTo':
            obj_ = RemitToType.factory()
            obj_.build(child_)
            self.RemitTo = obj_
            obj_.original_tagname_ = 'RemitTo'
# end class CODType


class CODValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODValueType.subclass:
            return CODValueType.subclass(*args_, **kwargs_)
        else:
            return CODValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CODValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CODValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CODValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CODValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CODValueType


class RemitToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, AttentionName=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
        self.AttentionName = AttentionName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RemitToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RemitToType.subclass:
            return RemitToType.subclass(*args_, **kwargs_)
        else:
            return RemitToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.AttentionName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='RemitToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RemitToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RemitToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='RemitToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='RemitToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='RemitToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Name>%s</frt:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AttentionName>%s</frt:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
# end class RemitToType


class DangerousGoodsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Phone=None, TransportationMode=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Phone = Phone
        self.TransportationMode = TransportationMode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsType.subclass:
            return DangerousGoodsType.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_TransportationMode(self): return self.TransportationMode
    def set_TransportationMode(self, TransportationMode): self.TransportationMode = TransportationMode
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Phone is not None or
            self.TransportationMode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='DangerousGoodsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DangerousGoodsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='DangerousGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='DangerousGoodsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='DangerousGoodsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Name>%s</frt:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.TransportationMode is not None:
            self.TransportationMode.export(outfile, level, namespace_, name_='TransportationMode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'TransportationMode':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.TransportationMode = obj_
            obj_.original_tagname_ = 'TransportationMode'
# end class DangerousGoodsType


class SortingAndSegregatingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortingAndSegregatingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortingAndSegregatingType.subclass:
            return SortingAndSegregatingType.subclass(*args_, **kwargs_)
        else:
            return SortingAndSegregatingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def hasContent_(self):
        if (
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='SortingAndSegregatingType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortingAndSegregatingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SortingAndSegregatingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='SortingAndSegregatingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='SortingAndSegregatingType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='SortingAndSegregatingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Quantity>%s</frt:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
# end class SortingAndSegregatingType


class DeclaredValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeclaredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeclaredValueType.subclass:
            return DeclaredValueType.subclass(*args_, **kwargs_)
        else:
            return DeclaredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='DeclaredValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeclaredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeclaredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='DeclaredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='DeclaredValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='DeclaredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class DeclaredValueType


class CustomsValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsValueType.subclass:
            return CustomsValueType.subclass(*args_, **kwargs_)
        else:
            return CustomsValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CustomsValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomsValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CustomsValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CustomsValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CustomsValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CustomsValueType


class HandlingChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Percentage=None, Amount=None):
        self.original_tagname_ = None
        self.Percentage = Percentage
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingChargeType.subclass:
            return HandlingChargeType.subclass(*args_, **kwargs_)
        else:
            return HandlingChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Percentage(self): return self.Percentage
    def set_Percentage(self, Percentage): self.Percentage = Percentage
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def hasContent_(self):
        if (
            self.Percentage is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Percentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Percentage>%s</frt:Percentage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Percentage), input_name='Percentage')), eol_))
        if self.Amount is not None:
            self.Amount.export(outfile, level, namespace_, name_='Amount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Percentage':
            Percentage_ = child_.text
            Percentage_ = self.gds_validate_string(Percentage_, node, 'Percentage')
            self.Percentage = Percentage_
        elif nodeName_ == 'Amount':
            obj_ = HandlingChargeAmountType.factory()
            obj_.build(child_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class HandlingChargeType


class HandlingChargeAmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingChargeAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingChargeAmountType.subclass:
            return HandlingChargeAmountType.subclass(*args_, **kwargs_)
        else:
            return HandlingChargeAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingChargeAmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingChargeAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingChargeAmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingChargeAmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingChargeAmountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingChargeAmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class HandlingChargeAmountType


class PickupRequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PickupDate=None, AdditionalComments=None):
        self.original_tagname_ = None
        self.PickupDate = PickupDate
        self.AdditionalComments = AdditionalComments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupRequestType.subclass:
            return PickupRequestType.subclass(*args_, **kwargs_)
        else:
            return PickupRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickupDate(self): return self.PickupDate
    def set_PickupDate(self, PickupDate): self.PickupDate = PickupDate
    def get_AdditionalComments(self): return self.AdditionalComments
    def set_AdditionalComments(self, AdditionalComments): self.AdditionalComments = AdditionalComments
    def hasContent_(self):
        if (
            self.PickupDate is not None or
            self.AdditionalComments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='PickupRequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='PickupRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='PickupRequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='PickupRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:PickupDate>%s</frt:PickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupDate), input_name='PickupDate')), eol_))
        if self.AdditionalComments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:AdditionalComments>%s</frt:AdditionalComments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalComments), input_name='AdditionalComments')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickupDate':
            PickupDate_ = child_.text
            PickupDate_ = self.gds_validate_string(PickupDate_, node, 'PickupDate')
            self.PickupDate = PickupDate_
        elif nodeName_ == 'AdditionalComments':
            AdditionalComments_ = child_.text
            AdditionalComments_ = self.gds_validate_string(AdditionalComments_, node, 'AdditionalComments')
            self.AdditionalComments = AdditionalComments_
# end class PickupRequestType


class RateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Factor=None):
        self.original_tagname_ = None
        self.Type = Type
        self.Factor = Factor
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateType.subclass:
            return RateType.subclass(*args_, **kwargs_)
        else:
            return RateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Factor(self): return self.Factor
    def set_Factor(self, Factor): self.Factor = Factor
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Factor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='RateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='RateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='RateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='RateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Factor is not None:
            self.Factor.export(outfile, level, namespace_, name_='Factor', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Factor':
            obj_ = FactorType.factory()
            obj_.build(child_)
            self.Factor = obj_
            obj_.original_tagname_ = 'Factor'
# end class RateType


class CommodityWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityID=None, Description=None, Weight=None, AdjustedWeight=None):
        self.original_tagname_ = None
        self.CommodityID = CommodityID
        self.Description = Description
        self.Weight = Weight
        self.AdjustedWeight = AdjustedWeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityWeightType.subclass:
            return CommodityWeightType.subclass(*args_, **kwargs_)
        else:
            return CommodityWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityID(self): return self.CommodityID
    def set_CommodityID(self, CommodityID): self.CommodityID = CommodityID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_AdjustedWeight(self): return self.AdjustedWeight
    def set_AdjustedWeight(self, AdjustedWeight): self.AdjustedWeight = AdjustedWeight
    def hasContent_(self):
        if (
            self.CommodityID is not None or
            self.Description is not None or
            self.Weight is not None or
            self.AdjustedWeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='CommodityWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='CommodityWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='CommodityWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='CommodityWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CommodityID>%s</frt:CommodityID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityID), input_name='CommodityID')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Description>%s</frt:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.AdjustedWeight is not None:
            self.AdjustedWeight.export(outfile, level, namespace_, name_='AdjustedWeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityID':
            CommodityID_ = child_.text
            CommodityID_ = self.gds_validate_string(CommodityID_, node, 'CommodityID')
            self.CommodityID = CommodityID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'AdjustedWeight':
            obj_ = AdjustedWeightType.factory()
            obj_.build(child_)
            self.AdjustedWeight = obj_
            obj_.original_tagname_ = 'AdjustedWeight'
# end class CommodityWeightType


class FactorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FactorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FactorType.subclass:
            return FactorType.subclass(*args_, **kwargs_)
        else:
            return FactorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='FactorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FactorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FactorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='FactorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='FactorType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='FactorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Value>%s</frt:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class FactorType


class AmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountType.subclass:
            return AmountType.subclass(*args_, **kwargs_)
        else:
            return AmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='AmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='AmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='AmountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='AmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class AmountType


class TotalShipmentChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TotalShipmentChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TotalShipmentChargeType.subclass:
            return TotalShipmentChargeType.subclass(*args_, **kwargs_)
        else:
            return TotalShipmentChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='TotalShipmentChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TotalShipmentChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TotalShipmentChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='TotalShipmentChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='TotalShipmentChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='TotalShipmentChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:CurrencyCode>%s</frt:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:MonetaryValue>%s</frt:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class TotalShipmentChargeType


class RatingScheduleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RatingScheduleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RatingScheduleType.subclass:
            return RatingScheduleType.subclass(*args_, **kwargs_)
        else:
            return RatingScheduleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='RatingScheduleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RatingScheduleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatingScheduleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='RatingScheduleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='RatingScheduleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='RatingScheduleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Code>%s</frt:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Description>%s</frt:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class RatingScheduleType


class TimeInTransitResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DaysInTransit=None):
        self.original_tagname_ = None
        self.DaysInTransit = DaysInTransit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeInTransitResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeInTransitResponseType.subclass:
            return TimeInTransitResponseType.subclass(*args_, **kwargs_)
        else:
            return TimeInTransitResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DaysInTransit(self): return self.DaysInTransit
    def set_DaysInTransit(self, DaysInTransit): self.DaysInTransit = DaysInTransit
    def hasContent_(self):
        if (
            self.DaysInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='TimeInTransitResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeInTransitResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeInTransitResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='TimeInTransitResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='TimeInTransitResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='TimeInTransitResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DaysInTransit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:DaysInTransit>%s</frt:DaysInTransit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DaysInTransit), input_name='DaysInTransit')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DaysInTransit':
            DaysInTransit_ = child_.text
            DaysInTransit_ = self.gds_validate_string(DaysInTransit_, node, 'DaysInTransit')
            self.DaysInTransit = DaysInTransit_
# end class TimeInTransitResponseType


class GFPOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GPFAccesorialRateIndicator=None, OnCallInformation=None):
        self.original_tagname_ = None
        self.GPFAccesorialRateIndicator = GPFAccesorialRateIndicator
        self.OnCallInformation = OnCallInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GFPOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GFPOptionsType.subclass:
            return GFPOptionsType.subclass(*args_, **kwargs_)
        else:
            return GFPOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GPFAccesorialRateIndicator(self): return self.GPFAccesorialRateIndicator
    def set_GPFAccesorialRateIndicator(self, GPFAccesorialRateIndicator): self.GPFAccesorialRateIndicator = GPFAccesorialRateIndicator
    def get_OnCallInformation(self): return self.OnCallInformation
    def set_OnCallInformation(self, OnCallInformation): self.OnCallInformation = OnCallInformation
    def hasContent_(self):
        if (
            self.GPFAccesorialRateIndicator is not None or
            self.OnCallInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='GFPOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GFPOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GFPOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='GFPOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='GFPOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='GFPOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GPFAccesorialRateIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:GPFAccesorialRateIndicator>%s</frt:GPFAccesorialRateIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GPFAccesorialRateIndicator), input_name='GPFAccesorialRateIndicator')), eol_))
        if self.OnCallInformation is not None:
            self.OnCallInformation.export(outfile, level, namespace_, name_='OnCallInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GPFAccesorialRateIndicator':
            GPFAccesorialRateIndicator_ = child_.text
            GPFAccesorialRateIndicator_ = self.gds_validate_string(GPFAccesorialRateIndicator_, node, 'GPFAccesorialRateIndicator')
            self.GPFAccesorialRateIndicator = GPFAccesorialRateIndicator_
        elif nodeName_ == 'OnCallInformation':
            obj_ = OnCallInformationType.factory()
            obj_.build(child_)
            self.OnCallInformation = obj_
            obj_.original_tagname_ = 'OnCallInformation'
# end class GFPOptionsType


class OnCallInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OnCallPickupIndicator=None):
        self.original_tagname_ = None
        self.OnCallPickupIndicator = OnCallPickupIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OnCallInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OnCallInformationType.subclass:
            return OnCallInformationType.subclass(*args_, **kwargs_)
        else:
            return OnCallInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OnCallPickupIndicator(self): return self.OnCallPickupIndicator
    def set_OnCallPickupIndicator(self, OnCallPickupIndicator): self.OnCallPickupIndicator = OnCallPickupIndicator
    def hasContent_(self):
        if (
            self.OnCallPickupIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='OnCallInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OnCallInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OnCallInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='OnCallInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='OnCallInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='OnCallInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OnCallPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:OnCallPickupIndicator>%s</frt:OnCallPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OnCallPickupIndicator), input_name='OnCallPickupIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OnCallPickupIndicator':
            OnCallPickupIndicator_ = child_.text
            OnCallPickupIndicator_ = self.gds_validate_string(OnCallPickupIndicator_, node, 'OnCallPickupIndicator')
            self.OnCallPickupIndicator = OnCallPickupIndicator_
# end class OnCallInformationType


class HandlingUnitsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
        self.Dimensions = Dimensions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsType.subclass:
            return HandlingUnitsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingUnitsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingUnitsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingUnitsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingUnitsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Quantity>%s</frt:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class HandlingUnitsType


class HandlingUnitsDimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsDimensionsType.subclass:
            return HandlingUnitsDimensionsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingUnitsDimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingUnitsDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingUnitsDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingUnitsDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Length>%s</frt:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Width>%s</frt:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Height>%s</frt:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class HandlingUnitsDimensionsType


class FreightDensityRateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Density=None, TotalCubicFeet=None):
        self.original_tagname_ = None
        self.Density = Density
        self.TotalCubicFeet = TotalCubicFeet
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityRateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityRateType.subclass:
            return FreightDensityRateType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityRateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Density(self): return self.Density
    def set_Density(self, Density): self.Density = Density
    def get_TotalCubicFeet(self): return self.TotalCubicFeet
    def set_TotalCubicFeet(self, TotalCubicFeet): self.TotalCubicFeet = TotalCubicFeet
    def hasContent_(self):
        if (
            self.Density is not None or
            self.TotalCubicFeet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='FreightDensityRateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityRateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightDensityRateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='FreightDensityRateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='FreightDensityRateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='FreightDensityRateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Density is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Density>%s</frt:Density>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Density), input_name='Density')), eol_))
        if self.TotalCubicFeet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:TotalCubicFeet>%s</frt:TotalCubicFeet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalCubicFeet), input_name='TotalCubicFeet')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Density':
            Density_ = child_.text
            Density_ = self.gds_validate_string(Density_, node, 'Density')
            self.Density = Density_
        elif nodeName_ == 'TotalCubicFeet':
            TotalCubicFeet_ = child_.text
            TotalCubicFeet_ = self.gds_validate_string(TotalCubicFeet_, node, 'TotalCubicFeet')
            self.TotalCubicFeet = TotalCubicFeet_
# end class FreightDensityRateType


class AdjustedHeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdjustedHeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdjustedHeightType.subclass:
            return AdjustedHeightType.subclass(*args_, **kwargs_)
        else:
            return AdjustedHeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='AdjustedHeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdjustedHeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdjustedHeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='AdjustedHeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='AdjustedHeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='AdjustedHeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Value>%s</frt:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class AdjustedHeightType


class HandlingUnitsInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None, AdjustedHeight=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
        self.Dimensions = Dimensions
        self.AdjustedHeight = AdjustedHeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsInfoType.subclass:
            return HandlingUnitsInfoType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_AdjustedHeight(self): return self.AdjustedHeight
    def set_AdjustedHeight(self, AdjustedHeight): self.AdjustedHeight = AdjustedHeight
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None or
            self.AdjustedHeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='HandlingUnitsInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='HandlingUnitsInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='HandlingUnitsInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='frt:', name_='HandlingUnitsInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<frt:Quantity>%s</frt:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.AdjustedHeight is not None:
            self.AdjustedHeight.export(outfile, level, namespace_, name_='AdjustedHeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = RateCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'AdjustedHeight':
            obj_ = AdjustedHeightType.factory()
            obj_.build(child_)
            self.AdjustedHeight = obj_
            obj_.original_tagname_ = 'AdjustedHeight'
# end class HandlingUnitsInfoType


class ClientInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInformationType.subclass:
            return ClientInformationType.subclass(*args_, **kwargs_)
        else:
            return ClientInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self.Property
    def set_Property(self, Property): self.Property = Property
    def add_Property(self, value): self.Property.append(value)
    def insert_Property_at(self, index, value): self.Property.insert(index, value)
    def replace_Property_at(self, index, value): self.Property[index] = value
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ClientInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ClientInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ClientInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ClientInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespace_, name_='Property', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = PropertyType.factory()
            obj_.build(child_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class ClientInformationType


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RequestOption=None, SubVersion=None, TransactionReference=None):
        self.original_tagname_ = None
        if RequestOption is None:
            self.RequestOption = []
        else:
            self.RequestOption = RequestOption
        self.SubVersion = SubVersion
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestOption(self): return self.RequestOption
    def set_RequestOption(self, RequestOption): self.RequestOption = RequestOption
    def add_RequestOption(self, value): self.RequestOption.append(value)
    def insert_RequestOption_at(self, index, value): self.RequestOption.insert(index, value)
    def replace_RequestOption_at(self, index, value): self.RequestOption[index] = value
    def get_SubVersion(self): return self.SubVersion
    def set_SubVersion(self, SubVersion): self.SubVersion = SubVersion
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.RequestOption or
            self.SubVersion is not None or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='RequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequestOption_ in self.RequestOption:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:RequestOption>%s</common:RequestOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(RequestOption_), input_name='RequestOption')), eol_))
        if self.SubVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:SubVersion>%s</common:SubVersion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubVersion), input_name='SubVersion')), eol_))
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestOption':
            RequestOption_ = child_.text
            RequestOption_ = self.gds_validate_string(RequestOption_, node, 'RequestOption')
            self.RequestOption.append(RequestOption_)
        elif nodeName_ == 'SubVersion':
            SubVersion_ = child_.text
            SubVersion_ = self.gds_validate_string(SubVersion_, node, 'SubVersion')
            self.SubVersion = SubVersion_
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, TransactionIdentifier=None):
        self.original_tagname_ = None
        self.CustomerContext = CustomerContext
        self.TransactionIdentifier = TransactionIdentifier
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def get_TransactionIdentifier(self): return self.TransactionIdentifier
    def set_TransactionIdentifier(self, TransactionIdentifier): self.TransactionIdentifier = TransactionIdentifier
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.TransactionIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='TransactionReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='TransactionReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='TransactionReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:CustomerContext>%s</common:CustomerContext>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), eol_))
        if self.TransactionIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:TransactionIdentifier>%s</common:TransactionIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransactionIdentifier), input_name='TransactionIdentifier')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
        elif nodeName_ == 'TransactionIdentifier':
            TransactionIdentifier_ = child_.text
            TransactionIdentifier_ = self.gds_validate_string(TransactionIdentifier_, node, 'TransactionIdentifier')
            self.TransactionIdentifier = TransactionIdentifier_
# end class TransactionReferenceType


class ResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseStatus=None, Alert=None, AlertDetail=None, TransactionReference=None):
        self.original_tagname_ = None
        self.ResponseStatus = ResponseStatus
        if Alert is None:
            self.Alert = []
        else:
            self.Alert = Alert
        if AlertDetail is None:
            self.AlertDetail = []
        else:
            self.AlertDetail = AlertDetail
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseStatus(self): return self.ResponseStatus
    def set_ResponseStatus(self, ResponseStatus): self.ResponseStatus = ResponseStatus
    def get_Alert(self): return self.Alert
    def set_Alert(self, Alert): self.Alert = Alert
    def add_Alert(self, value): self.Alert.append(value)
    def insert_Alert_at(self, index, value): self.Alert.insert(index, value)
    def replace_Alert_at(self, index, value): self.Alert[index] = value
    def get_AlertDetail(self): return self.AlertDetail
    def set_AlertDetail(self, AlertDetail): self.AlertDetail = AlertDetail
    def add_AlertDetail(self, value): self.AlertDetail.append(value)
    def insert_AlertDetail_at(self, index, value): self.AlertDetail.insert(index, value)
    def replace_AlertDetail_at(self, index, value): self.AlertDetail[index] = value
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.ResponseStatus is not None or
            self.Alert or
            self.AlertDetail or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseStatus is not None:
            self.ResponseStatus.export(outfile, level, namespace_, name_='ResponseStatus', pretty_print=pretty_print)
        for Alert_ in self.Alert:
            Alert_.export(outfile, level, namespace_, name_='Alert', pretty_print=pretty_print)
        for AlertDetail_ in self.AlertDetail:
            AlertDetail_.export(outfile, level, namespace_, name_='AlertDetail', pretty_print=pretty_print)
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseStatus':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.ResponseStatus = obj_
            obj_.original_tagname_ = 'ResponseStatus'
        elif nodeName_ == 'Alert':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Alert.append(obj_)
            obj_.original_tagname_ = 'Alert'
        elif nodeName_ == 'AlertDetail':
            obj_ = DetailType.factory()
            obj_.build(child_)
            self.AlertDetail.append(obj_)
            obj_.original_tagname_ = 'AlertDetail'
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class ResponseType


class CodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='CodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='CodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='CodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Description>%s</common:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CodeDescriptionType


class DetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, ElementLevelInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.ElementLevelInformation = ElementLevelInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetailType.subclass:
            return DetailType.subclass(*args_, **kwargs_)
        else:
            return DetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ElementLevelInformation(self): return self.ElementLevelInformation
    def set_ElementLevelInformation(self, ElementLevelInformation): self.ElementLevelInformation = ElementLevelInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.ElementLevelInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='DetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='DetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='DetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='DetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Description>%s</common:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ElementLevelInformation is not None:
            self.ElementLevelInformation.export(outfile, level, namespace_, name_='ElementLevelInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ElementLevelInformation':
            obj_ = ElementLevelInformationType.factory()
            obj_.build(child_)
            self.ElementLevelInformation = obj_
            obj_.original_tagname_ = 'ElementLevelInformation'
# end class DetailType


class ElementLevelInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Level=None, ElementIdentifier=None):
        self.original_tagname_ = None
        self.Level = Level
        if ElementIdentifier is None:
            self.ElementIdentifier = []
        else:
            self.ElementIdentifier = ElementIdentifier
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementLevelInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementLevelInformationType.subclass:
            return ElementLevelInformationType.subclass(*args_, **kwargs_)
        else:
            return ElementLevelInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Level(self): return self.Level
    def set_Level(self, Level): self.Level = Level
    def get_ElementIdentifier(self): return self.ElementIdentifier
    def set_ElementIdentifier(self, ElementIdentifier): self.ElementIdentifier = ElementIdentifier
    def add_ElementIdentifier(self, value): self.ElementIdentifier.append(value)
    def insert_ElementIdentifier_at(self, index, value): self.ElementIdentifier.insert(index, value)
    def replace_ElementIdentifier_at(self, index, value): self.ElementIdentifier[index] = value
    def hasContent_(self):
        if (
            self.Level is not None or
            self.ElementIdentifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ElementLevelInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementLevelInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ElementLevelInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ElementLevelInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ElementLevelInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ElementLevelInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Level>%s</common:Level>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), eol_))
        for ElementIdentifier_ in self.ElementIdentifier:
            ElementIdentifier_.export(outfile, level, namespace_, name_='ElementIdentifier', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Level':
            Level_ = child_.text
            Level_ = self.gds_validate_string(Level_, node, 'Level')
            self.Level = Level_
        elif nodeName_ == 'ElementIdentifier':
            obj_ = ElementIdentifierType.factory()
            obj_.build(child_)
            self.ElementIdentifier.append(obj_)
            obj_.original_tagname_ = 'ElementIdentifier'
# end class ElementLevelInformationType


class ElementIdentifierType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementIdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementIdentifierType.subclass:
            return ElementIdentifierType.subclass(*args_, **kwargs_)
        else:
            return ElementIdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ElementIdentifierType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementIdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ElementIdentifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ElementIdentifierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ElementIdentifierType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ElementIdentifierType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Value>%s</common:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class ElementIdentifierType


class PropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Key=None, valueOf_=None):
        self.original_tagname_ = None
        self.Key = _cast(None, Key)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PropertyType.subclass:
            return PropertyType.subclass(*args_, **kwargs_)
        else:
            return PropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='frt:', name_='PropertyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PropertyType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='frt:', name_='PropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='frt:', name_='PropertyType'):
        if self.Key is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            outfile.write(' Key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Key), input_name='Key')), ))
    def exportChildren(self, outfile, level, namespace_='frt:', name_='PropertyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Key', node)
        if value is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            self.Key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PropertyType


GDSClassesMapping = {
    'ClientInformation': ClientInformationType,
    'Request': RequestType,
    'Response': ResponseType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightRateRequest'
        rootClass = FreightRateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:frt="http://www.ups.com/XMLSchema/XOLTWS/FreightRate/v1.0"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightRateRequest'
        rootClass = FreightRateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightRateRequest'
        rootClass = FreightRateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:frt="http://www.ups.com/XMLSchema/XOLTWS/FreightRate/v1.0"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightRateRequest'
        rootClass = FreightRateRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from freight_rate import *\n\n')
        sys.stdout.write('import freight_rate as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AccountType",
    "AddressType",
    "AdjustedHeightType",
    "AdjustedWeightType",
    "AlternateRatesResponseType",
    "AmountType",
    "CODType",
    "CODValueType",
    "CWTType",
    "ClientInformationType",
    "CodeDescriptionType",
    "CommodityType",
    "CommodityValueType",
    "CommodityWeightType",
    "CubeType",
    "CustomsValueType",
    "DangerousGoodsType",
    "DeclaredValueType",
    "DeliveryOptionsType",
    "DetailType",
    "DimensionType",
    "DimensionValueType",
    "DimensionsType",
    "EMailType",
    "ElementIdentifierType",
    "ElementLevelInformationType",
    "EmailInformationType",
    "FactorType",
    "FreightDensityRateType",
    "FreightRateRequest",
    "FreightRateResponse",
    "GFPOptionsType",
    "HandlingChargeAmountType",
    "HandlingChargeType",
    "HandlingUnitType",
    "HandlingUnitWeightType",
    "HandlingUnitsDimensionsType",
    "HandlingUnitsInfoType",
    "HandlingUnitsType",
    "NMFCCommodityType",
    "OnCallInformationType",
    "OverSeasLegType",
    "PayerType",
    "PaymentInformationType",
    "PhoneType",
    "PickupOptionsType",
    "PickupRequestType",
    "PropertyType",
    "RateCodeDescriptionType",
    "RateType",
    "RatingScheduleType",
    "RemitToType",
    "RequestType",
    "ResponseType",
    "ShipFromType",
    "ShipToType",
    "ShipmentServiceOptionsType",
    "ShipmentTotalWeightType",
    "SortingAndSegregatingType",
    "TimeInTransitResponseType",
    "TotalShipmentChargeType",
    "TransactionReferenceType",
    "UnitOfMeasurementType",
    "WeightType"
]
