#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun 12 20:17:16 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', 'pyups/freight_ship.py')
#
# Command line arguments:
#    /UPS/Shipping_Pkg_Gnd/ShippingGROUNDFREIGHTWebService/SCHEMA-WSDLs/FreightShipWebServiceSchema.xsd
#
# Command line:
#    generateDS --no-namespace-defs -o "pyups/freight_ship.py"  /UPS/Shipping_Pkg_Gnd/ShippingGROUNDFREIGHTWebService/SCHEMA-WSDLs/FreightShipWebServiceSchema.xsd
#
# Current working directory (os.getcwd()):
#   py_ups
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class FreightShipRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Request=None, Shipment=None):
        self.original_tagname_ = None
        self.Request = Request
        self.Shipment = Shipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipRequest.subclass:
            return FreightShipRequest.subclass(*args_, **kwargs_)
        else:
            return FreightShipRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Request(self): return self.Request
    def set_Request(self, Request): self.Request = Request
    def get_Shipment(self): return self.Shipment
    def set_Shipment(self, Shipment): self.Shipment = Shipment
    def hasContent_(self):
        if (
            self.Request is not None or
            self.Shipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FreightShipRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightShipRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FreightShipRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FreightShipRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FreightShipRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            self.Request.export(outfile, level, namespace_='common:', name_='Request', pretty_print=pretty_print)
        if self.Shipment is not None:
            self.Shipment.export(outfile, level, namespace_, name_='Shipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory()
            obj_.build(child_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory()
            obj_.build(child_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
# end class FreightShipRequest


class FreightShipResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Response=None, ShipmentResults=None):
        self.original_tagname_ = None
        self.Response = Response
        self.ShipmentResults = ShipmentResults
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipResponse.subclass:
            return FreightShipResponse.subclass(*args_, **kwargs_)
        else:
            return FreightShipResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Response(self): return self.Response
    def set_Response(self, Response): self.Response = Response
    def get_ShipmentResults(self): return self.ShipmentResults
    def set_ShipmentResults(self, ShipmentResults): self.ShipmentResults = ShipmentResults
    def hasContent_(self):
        if (
            self.Response is not None or
            self.ShipmentResults is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FreightShipResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightShipResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FreightShipResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FreightShipResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FreightShipResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            self.Response.export(outfile, level, namespace_='common:', name_='Response', pretty_print=pretty_print)
        if self.ShipmentResults is not None:
            self.ShipmentResults.export(outfile, level, namespace_, name_='ShipmentResults', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory()
            obj_.build(child_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'ShipmentResults':
            obj_ = ShipmentResultsType.factory()
            obj_.build(child_)
            self.ShipmentResults = obj_
            obj_.original_tagname_ = 'ShipmentResults'
# end class FreightShipResponse


class ShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipFrom=None, ShipperNumber=None, ShipTo=None, PaymentInformation=None, ManufactureInformation=None, Service=None, HandlingUnitOne=None, HandlingUnitTwo=None, ExistingShipmentID=None, HandlingInstructions=None, DeliveryInstructions=None, PickupInstructions=None, SpecialInstructions=None, ShipmentTotalWeight=None, Commodity=None, Reference=None, ShipmentServiceOptions=None, PickupRequest=None, Documents=None, ITNNumber=None, TaxID=None, MovementReferenceNumber=None, EICNumberAndStatement=None, TimeInTransitIndicator=None, HandlingUnits=None, DensityEligibleIndicator=None):
        self.original_tagname_ = None
        self.ShipFrom = ShipFrom
        self.ShipperNumber = ShipperNumber
        self.ShipTo = ShipTo
        self.PaymentInformation = PaymentInformation
        if ManufactureInformation is None:
            self.ManufactureInformation = []
        else:
            self.ManufactureInformation = ManufactureInformation
        self.Service = Service
        self.HandlingUnitOne = HandlingUnitOne
        self.HandlingUnitTwo = HandlingUnitTwo
        self.ExistingShipmentID = ExistingShipmentID
        self.HandlingInstructions = HandlingInstructions
        self.DeliveryInstructions = DeliveryInstructions
        self.PickupInstructions = PickupInstructions
        self.SpecialInstructions = SpecialInstructions
        self.ShipmentTotalWeight = ShipmentTotalWeight
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.ShipmentServiceOptions = ShipmentServiceOptions
        self.PickupRequest = PickupRequest
        self.Documents = Documents
        self.ITNNumber = ITNNumber
        self.TaxID = TaxID
        self.MovementReferenceNumber = MovementReferenceNumber
        self.EICNumberAndStatement = EICNumberAndStatement
        self.TimeInTransitIndicator = TimeInTransitIndicator
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
        self.DensityEligibleIndicator = DensityEligibleIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipFrom(self): return self.ShipFrom
    def set_ShipFrom(self, ShipFrom): self.ShipFrom = ShipFrom
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_ShipTo(self): return self.ShipTo
    def set_ShipTo(self, ShipTo): self.ShipTo = ShipTo
    def get_PaymentInformation(self): return self.PaymentInformation
    def set_PaymentInformation(self, PaymentInformation): self.PaymentInformation = PaymentInformation
    def get_ManufactureInformation(self): return self.ManufactureInformation
    def set_ManufactureInformation(self, ManufactureInformation): self.ManufactureInformation = ManufactureInformation
    def add_ManufactureInformation(self, value): self.ManufactureInformation.append(value)
    def insert_ManufactureInformation_at(self, index, value): self.ManufactureInformation.insert(index, value)
    def replace_ManufactureInformation_at(self, index, value): self.ManufactureInformation[index] = value
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_HandlingUnitOne(self): return self.HandlingUnitOne
    def set_HandlingUnitOne(self, HandlingUnitOne): self.HandlingUnitOne = HandlingUnitOne
    def get_HandlingUnitTwo(self): return self.HandlingUnitTwo
    def set_HandlingUnitTwo(self, HandlingUnitTwo): self.HandlingUnitTwo = HandlingUnitTwo
    def get_ExistingShipmentID(self): return self.ExistingShipmentID
    def set_ExistingShipmentID(self, ExistingShipmentID): self.ExistingShipmentID = ExistingShipmentID
    def get_HandlingInstructions(self): return self.HandlingInstructions
    def set_HandlingInstructions(self, HandlingInstructions): self.HandlingInstructions = HandlingInstructions
    def get_DeliveryInstructions(self): return self.DeliveryInstructions
    def set_DeliveryInstructions(self, DeliveryInstructions): self.DeliveryInstructions = DeliveryInstructions
    def get_PickupInstructions(self): return self.PickupInstructions
    def set_PickupInstructions(self, PickupInstructions): self.PickupInstructions = PickupInstructions
    def get_SpecialInstructions(self): return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions): self.SpecialInstructions = SpecialInstructions
    def get_ShipmentTotalWeight(self): return self.ShipmentTotalWeight
    def set_ShipmentTotalWeight(self, ShipmentTotalWeight): self.ShipmentTotalWeight = ShipmentTotalWeight
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_ShipmentServiceOptions(self): return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions): self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_PickupRequest(self): return self.PickupRequest
    def set_PickupRequest(self, PickupRequest): self.PickupRequest = PickupRequest
    def get_Documents(self): return self.Documents
    def set_Documents(self, Documents): self.Documents = Documents
    def get_ITNNumber(self): return self.ITNNumber
    def set_ITNNumber(self, ITNNumber): self.ITNNumber = ITNNumber
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_MovementReferenceNumber(self): return self.MovementReferenceNumber
    def set_MovementReferenceNumber(self, MovementReferenceNumber): self.MovementReferenceNumber = MovementReferenceNumber
    def get_EICNumberAndStatement(self): return self.EICNumberAndStatement
    def set_EICNumberAndStatement(self, EICNumberAndStatement): self.EICNumberAndStatement = EICNumberAndStatement
    def get_TimeInTransitIndicator(self): return self.TimeInTransitIndicator
    def set_TimeInTransitIndicator(self, TimeInTransitIndicator): self.TimeInTransitIndicator = TimeInTransitIndicator
    def get_HandlingUnits(self): return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits): self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value): self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value): self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value): self.HandlingUnits[index] = value
    def get_DensityEligibleIndicator(self): return self.DensityEligibleIndicator
    def set_DensityEligibleIndicator(self, DensityEligibleIndicator): self.DensityEligibleIndicator = DensityEligibleIndicator
    def hasContent_(self):
        if (
            self.ShipFrom is not None or
            self.ShipperNumber is not None or
            self.ShipTo is not None or
            self.PaymentInformation is not None or
            self.ManufactureInformation or
            self.Service is not None or
            self.HandlingUnitOne is not None or
            self.HandlingUnitTwo is not None or
            self.ExistingShipmentID is not None or
            self.HandlingInstructions is not None or
            self.DeliveryInstructions is not None or
            self.PickupInstructions is not None or
            self.SpecialInstructions is not None or
            self.ShipmentTotalWeight is not None or
            self.Commodity or
            self.Reference or
            self.ShipmentServiceOptions is not None or
            self.PickupRequest is not None or
            self.Documents is not None or
            self.ITNNumber is not None or
            self.TaxID is not None or
            self.MovementReferenceNumber is not None or
            self.EICNumberAndStatement is not None or
            self.TimeInTransitIndicator is not None or
            self.HandlingUnits or
            self.DensityEligibleIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipFrom is not None:
            self.ShipFrom.export(outfile, level, namespace_, name_='ShipFrom', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ShipperNumber>%s</fsp:ShipperNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), eol_))
        if self.ShipTo is not None:
            self.ShipTo.export(outfile, level, namespace_, name_='ShipTo', pretty_print=pretty_print)
        if self.PaymentInformation is not None:
            self.PaymentInformation.export(outfile, level, namespace_, name_='PaymentInformation', pretty_print=pretty_print)
        for ManufactureInformation_ in self.ManufactureInformation:
            ManufactureInformation_.export(outfile, level, namespace_, name_='ManufactureInformation', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.HandlingUnitOne is not None:
            self.HandlingUnitOne.export(outfile, level, namespace_, name_='HandlingUnitOne', pretty_print=pretty_print)
        if self.HandlingUnitTwo is not None:
            self.HandlingUnitTwo.export(outfile, level, namespace_, name_='HandlingUnitTwo', pretty_print=pretty_print)
        if self.ExistingShipmentID is not None:
            self.ExistingShipmentID.export(outfile, level, namespace_, name_='ExistingShipmentID', pretty_print=pretty_print)
        if self.HandlingInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:HandlingInstructions>%s</fsp:HandlingInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HandlingInstructions), input_name='HandlingInstructions')), eol_))
        if self.DeliveryInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DeliveryInstructions>%s</fsp:DeliveryInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryInstructions), input_name='DeliveryInstructions')), eol_))
        if self.PickupInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PickupInstructions>%s</fsp:PickupInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupInstructions), input_name='PickupInstructions')), eol_))
        if self.SpecialInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:SpecialInstructions>%s</fsp:SpecialInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), eol_))
        if self.ShipmentTotalWeight is not None:
            self.ShipmentTotalWeight.export(outfile, level, namespace_, name_='ShipmentTotalWeight', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.ShipmentServiceOptions is not None:
            self.ShipmentServiceOptions.export(outfile, level, namespace_, name_='ShipmentServiceOptions', pretty_print=pretty_print)
        if self.PickupRequest is not None:
            self.PickupRequest.export(outfile, level, namespace_, name_='PickupRequest', pretty_print=pretty_print)
        if self.Documents is not None:
            self.Documents.export(outfile, level, namespace_, name_='Documents', pretty_print=pretty_print)
        if self.ITNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ITNNumber>%s</fsp:ITNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ITNNumber), input_name='ITNNumber')), eol_))
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.MovementReferenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MovementReferenceNumber>%s</fsp:MovementReferenceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MovementReferenceNumber), input_name='MovementReferenceNumber')), eol_))
        if self.EICNumberAndStatement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EICNumberAndStatement>%s</fsp:EICNumberAndStatement>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EICNumberAndStatement), input_name='EICNumberAndStatement')), eol_))
        if self.TimeInTransitIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TimeInTransitIndicator>%s</fsp:TimeInTransitIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TimeInTransitIndicator), input_name='TimeInTransitIndicator')), eol_))
        for HandlingUnits_ in self.HandlingUnits:
            HandlingUnits_.export(outfile, level, namespace_, name_='HandlingUnits', pretty_print=pretty_print)
        if self.DensityEligibleIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DensityEligibleIndicator>%s</fsp:DensityEligibleIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DensityEligibleIndicator), input_name='DensityEligibleIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory()
            obj_.build(child_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory()
            obj_.build(child_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'PaymentInformation':
            obj_ = PaymentInformationType.factory()
            obj_.build(child_)
            self.PaymentInformation = obj_
            obj_.original_tagname_ = 'PaymentInformation'
        elif nodeName_ == 'ManufactureInformation':
            obj_ = CountryOfManufactureType.factory()
            obj_.build(child_)
            self.ManufactureInformation.append(obj_)
            obj_.original_tagname_ = 'ManufactureInformation'
        elif nodeName_ == 'Service':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'HandlingUnitOne':
            obj_ = HandlingUnitType.factory()
            obj_.build(child_)
            self.HandlingUnitOne = obj_
            obj_.original_tagname_ = 'HandlingUnitOne'
        elif nodeName_ == 'HandlingUnitTwo':
            obj_ = HandlingUnitType.factory()
            obj_.build(child_)
            self.HandlingUnitTwo = obj_
            obj_.original_tagname_ = 'HandlingUnitTwo'
        elif nodeName_ == 'ExistingShipmentID':
            obj_ = ExistingShipmentIDType.factory()
            obj_.build(child_)
            self.ExistingShipmentID = obj_
            obj_.original_tagname_ = 'ExistingShipmentID'
        elif nodeName_ == 'HandlingInstructions':
            HandlingInstructions_ = child_.text
            HandlingInstructions_ = self.gds_validate_string(HandlingInstructions_, node, 'HandlingInstructions')
            self.HandlingInstructions = HandlingInstructions_
        elif nodeName_ == 'DeliveryInstructions':
            DeliveryInstructions_ = child_.text
            DeliveryInstructions_ = self.gds_validate_string(DeliveryInstructions_, node, 'DeliveryInstructions')
            self.DeliveryInstructions = DeliveryInstructions_
        elif nodeName_ == 'PickupInstructions':
            PickupInstructions_ = child_.text
            PickupInstructions_ = self.gds_validate_string(PickupInstructions_, node, 'PickupInstructions')
            self.PickupInstructions = PickupInstructions_
        elif nodeName_ == 'SpecialInstructions':
            SpecialInstructions_ = child_.text
            SpecialInstructions_ = self.gds_validate_string(SpecialInstructions_, node, 'SpecialInstructions')
            self.SpecialInstructions = SpecialInstructions_
        elif nodeName_ == 'ShipmentTotalWeight':
            obj_ = ShipmentTotalWeightType.factory()
            obj_.build(child_)
            self.ShipmentTotalWeight = obj_
            obj_.original_tagname_ = 'ShipmentTotalWeight'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType.factory()
            obj_.build(child_)
            self.ShipmentServiceOptions = obj_
            obj_.original_tagname_ = 'ShipmentServiceOptions'
        elif nodeName_ == 'PickupRequest':
            obj_ = PickupRequestType.factory()
            obj_.build(child_)
            self.PickupRequest = obj_
            obj_.original_tagname_ = 'PickupRequest'
        elif nodeName_ == 'Documents':
            obj_ = DocumentsType.factory()
            obj_.build(child_)
            self.Documents = obj_
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'ITNNumber':
            ITNNumber_ = child_.text
            ITNNumber_ = self.gds_validate_string(ITNNumber_, node, 'ITNNumber')
            self.ITNNumber = ITNNumber_
        elif nodeName_ == 'TaxID':
            obj_ = TaxIDType.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'MovementReferenceNumber':
            MovementReferenceNumber_ = child_.text
            MovementReferenceNumber_ = self.gds_validate_string(MovementReferenceNumber_, node, 'MovementReferenceNumber')
            self.MovementReferenceNumber = MovementReferenceNumber_
        elif nodeName_ == 'EICNumberAndStatement':
            EICNumberAndStatement_ = child_.text
            EICNumberAndStatement_ = self.gds_validate_string(EICNumberAndStatement_, node, 'EICNumberAndStatement')
            self.EICNumberAndStatement = EICNumberAndStatement_
        elif nodeName_ == 'TimeInTransitIndicator':
            TimeInTransitIndicator_ = child_.text
            TimeInTransitIndicator_ = self.gds_validate_string(TimeInTransitIndicator_, node, 'TimeInTransitIndicator')
            self.TimeInTransitIndicator = TimeInTransitIndicator_
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsType.factory()
            obj_.build(child_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
        elif nodeName_ == 'DensityEligibleIndicator':
            DensityEligibleIndicator_ = child_.text
            DensityEligibleIndicator_ = self.gds_validate_string(DensityEligibleIndicator_, node, 'DensityEligibleIndicator')
            self.DensityEligibleIndicator = DensityEligibleIndicator_
# end class ShipmentType


class ShipFromType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, TaxIdentificationNumber=None, TaxIDType=None, TariffPoint=None, Address=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Name = Name
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIDType = TaxIDType
        self.TariffPoint = TariffPoint
        self.Address = Address
        self.AttentionName = AttentionName
        self.Phone = Phone
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_TaxIDType(self): return self.TaxIDType
    def set_TaxIDType(self, TaxIDType): self.TaxIDType = TaxIDType
    def get_TariffPoint(self): return self.TariffPoint
    def set_TariffPoint(self, TariffPoint): self.TariffPoint = TariffPoint
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.TaxIdentificationNumber is not None or
            self.TaxIDType is not None or
            self.TariffPoint is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipFromType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipFromType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipFromType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipFromType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TaxIdentificationNumber>%s</fsp:TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.TaxIDType is not None:
            self.TaxIDType.export(outfile, level, namespace_, name_='TaxIDType', pretty_print=pretty_print)
        if self.TariffPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TariffPoint>%s</fsp:TariffPoint>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TariffPoint), input_name='TariffPoint')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AttentionName>%s</fsp:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FaxNumber>%s</fsp:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'TaxIDType':
            obj_ = TaxIDCodeDescType.factory()
            obj_.build(child_)
            self.TaxIDType = obj_
            obj_.original_tagname_ = 'TaxIDType'
        elif nodeName_ == 'TariffPoint':
            TariffPoint_ = child_.text
            TariffPoint_ = self.gds_validate_string(TariffPoint_, node, 'TariffPoint')
            self.TariffPoint = TariffPoint_
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class ShipFromType


class ShipToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, TaxIdentificationNumber=None, Address=None, TariffPoint=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Name = Name
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.Address = Address
        self.TariffPoint = TariffPoint
        self.AttentionName = AttentionName
        self.Phone = Phone
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_TariffPoint(self): return self.TariffPoint
    def set_TariffPoint(self, TariffPoint): self.TariffPoint = TariffPoint
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None or
            self.TariffPoint is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TaxIdentificationNumber>%s</fsp:TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.TariffPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TariffPoint>%s</fsp:TariffPoint>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TariffPoint), input_name='TariffPoint')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AttentionName>%s</fsp:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FaxNumber>%s</fsp:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'TariffPoint':
            TariffPoint_ = child_.text
            TariffPoint_ = self.gds_validate_string(TariffPoint_, node, 'TariffPoint')
            self.TariffPoint = TariffPoint_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class ShipToType


class PaymentInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Payer=None, ShipmentBillingOption=None):
        self.original_tagname_ = None
        self.Payer = Payer
        self.ShipmentBillingOption = ShipmentBillingOption
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentInformationType.subclass:
            return PaymentInformationType.subclass(*args_, **kwargs_)
        else:
            return PaymentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Payer(self): return self.Payer
    def set_Payer(self, Payer): self.Payer = Payer
    def get_ShipmentBillingOption(self): return self.ShipmentBillingOption
    def set_ShipmentBillingOption(self, ShipmentBillingOption): self.ShipmentBillingOption = ShipmentBillingOption
    def hasContent_(self):
        if (
            self.Payer is not None or
            self.ShipmentBillingOption is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PaymentInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PaymentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PaymentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PaymentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Payer is not None:
            self.Payer.export(outfile, level, namespace_, name_='Payer', pretty_print=pretty_print)
        if self.ShipmentBillingOption is not None:
            self.ShipmentBillingOption.export(outfile, level, namespace_, name_='ShipmentBillingOption', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Payer':
            obj_ = PayerType.factory()
            obj_.build(child_)
            self.Payer = obj_
            obj_.original_tagname_ = 'Payer'
        elif nodeName_ == 'ShipmentBillingOption':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.ShipmentBillingOption = obj_
            obj_.original_tagname_ = 'ShipmentBillingOption'
# end class PaymentInformationType


class PayerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, ShipperNumber=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
        self.ShipperNumber = ShipperNumber
        self.AttentionName = AttentionName
        self.Phone = Phone
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PayerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PayerType.subclass:
            return PayerType.subclass(*args_, **kwargs_)
        else:
            return PayerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.ShipperNumber is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PayerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PayerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PayerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PayerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PayerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PayerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ShipperNumber>%s</fsp:ShipperNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AttentionName>%s</fsp:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FaxNumber>%s</fsp:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class PayerType


class FreightShipAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, Town=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.Town = Town
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipAddressType.subclass:
            return FreightShipAddressType.subclass(*args_, **kwargs_)
        else:
            return FreightShipAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value): self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value): self.AddressLine[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_Town(self): return self.Town
    def set_Town(self, Town): self.Town = Town
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.Town is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FreightShipAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightShipAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FreightShipAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FreightShipAddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FreightShipAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AddressLine>%s</fsp:AddressLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:City>%s</fsp:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:StateProvinceCode>%s</fsp:StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.Town is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Town>%s</fsp:Town>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PostalCode>%s</fsp:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CountryCode>%s</fsp:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'Town':
            Town_ = child_.text
            Town_ = self.gds_validate_string(Town_, node, 'Town')
            self.Town = Town_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class FreightShipAddressType


class FreightShipPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipPhoneType.subclass:
            return FreightShipPhoneType.subclass(*args_, **kwargs_)
        else:
            return FreightShipPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FreightShipPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightShipPhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FreightShipPhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FreightShipPhoneType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FreightShipPhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Number>%s</fsp:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Extension>%s</fsp:Extension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Extension':
            Extension_ = child_.text
            Extension_ = self.gds_validate_string(Extension_, node, 'Extension')
            self.Extension = Extension_
# end class FreightShipPhoneType


class ShipCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipCodeDescriptionType.subclass:
            return ShipCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ShipCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ShipCodeDescriptionType


class HandlingUnitType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitType.subclass:
            return HandlingUnitType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='HandlingUnitType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='HandlingUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='HandlingUnitType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='HandlingUnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Quantity>%s</fsp:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
# end class HandlingUnitType


class ExistingShipmentIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentNumber=None, ConfirmationNumber=None, CreationDate=None):
        self.original_tagname_ = None
        self.ShipmentNumber = ShipmentNumber
        self.ConfirmationNumber = ConfirmationNumber
        self.CreationDate = CreationDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExistingShipmentIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExistingShipmentIDType.subclass:
            return ExistingShipmentIDType.subclass(*args_, **kwargs_)
        else:
            return ExistingShipmentIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentNumber(self): return self.ShipmentNumber
    def set_ShipmentNumber(self, ShipmentNumber): self.ShipmentNumber = ShipmentNumber
    def get_ConfirmationNumber(self): return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber): self.ConfirmationNumber = ConfirmationNumber
    def get_CreationDate(self): return self.CreationDate
    def set_CreationDate(self, CreationDate): self.CreationDate = CreationDate
    def hasContent_(self):
        if (
            self.ShipmentNumber is not None or
            self.ConfirmationNumber is not None or
            self.CreationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ExistingShipmentIDType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExistingShipmentIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExistingShipmentIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ExistingShipmentIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ExistingShipmentIDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ExistingShipmentIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ShipmentNumber>%s</fsp:ShipmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentNumber), input_name='ShipmentNumber')), eol_))
        if self.ConfirmationNumber is not None:
            self.ConfirmationNumber.export(outfile, level, namespace_, name_='ConfirmationNumber', pretty_print=pretty_print)
        if self.CreationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CreationDate>%s</fsp:CreationDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CreationDate), input_name='CreationDate')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentNumber':
            ShipmentNumber_ = child_.text
            ShipmentNumber_ = self.gds_validate_string(ShipmentNumber_, node, 'ShipmentNumber')
            self.ShipmentNumber = ShipmentNumber_
        elif nodeName_ == 'ConfirmationNumber':
            obj_ = ConfirmationNumberType.factory()
            obj_.build(child_)
            self.ConfirmationNumber = obj_
            obj_.original_tagname_ = 'ConfirmationNumber'
        elif nodeName_ == 'CreationDate':
            CreationDate_ = child_.text
            CreationDate_ = self.gds_validate_string(CreationDate_, node, 'CreationDate')
            self.CreationDate = CreationDate_
# end class ExistingShipmentIDType


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityID=None, Description=None, Weight=None, Dimensions=None, NumberOfPieces=None, PackagingType=None, DangerousGoodsIndicator=None, CommodityValue=None, FreightClass=None, NMFCCommodityCode=None, NMFCCommodity=None):
        self.original_tagname_ = None
        self.CommodityID = CommodityID
        self.Description = Description
        self.Weight = Weight
        self.Dimensions = Dimensions
        self.NumberOfPieces = NumberOfPieces
        self.PackagingType = PackagingType
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
        self.CommodityValue = CommodityValue
        self.FreightClass = FreightClass
        self.NMFCCommodityCode = NMFCCommodityCode
        self.NMFCCommodity = NMFCCommodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityID(self): return self.CommodityID
    def set_CommodityID(self, CommodityID): self.CommodityID = CommodityID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_NumberOfPieces(self): return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces): self.NumberOfPieces = NumberOfPieces
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_DangerousGoodsIndicator(self): return self.DangerousGoodsIndicator
    def set_DangerousGoodsIndicator(self, DangerousGoodsIndicator): self.DangerousGoodsIndicator = DangerousGoodsIndicator
    def get_CommodityValue(self): return self.CommodityValue
    def set_CommodityValue(self, CommodityValue): self.CommodityValue = CommodityValue
    def get_FreightClass(self): return self.FreightClass
    def set_FreightClass(self, FreightClass): self.FreightClass = FreightClass
    def get_NMFCCommodityCode(self): return self.NMFCCommodityCode
    def set_NMFCCommodityCode(self, NMFCCommodityCode): self.NMFCCommodityCode = NMFCCommodityCode
    def get_NMFCCommodity(self): return self.NMFCCommodity
    def set_NMFCCommodity(self, NMFCCommodity): self.NMFCCommodity = NMFCCommodity
    def hasContent_(self):
        if (
            self.CommodityID is not None or
            self.Description is not None or
            self.Weight is not None or
            self.Dimensions is not None or
            self.NumberOfPieces is not None or
            self.PackagingType is not None or
            self.DangerousGoodsIndicator is not None or
            self.CommodityValue is not None or
            self.FreightClass is not None or
            self.NMFCCommodityCode is not None or
            self.NMFCCommodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CommodityID>%s</fsp:CommodityID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityID), input_name='CommodityID')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.NumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:NumberOfPieces>%s</fsp:NumberOfPieces>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPieces), input_name='NumberOfPieces')), eol_))
        if self.PackagingType is not None:
            self.PackagingType.export(outfile, level, namespace_, name_='PackagingType', pretty_print=pretty_print)
        if self.DangerousGoodsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DangerousGoodsIndicator>%s</fsp:DangerousGoodsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DangerousGoodsIndicator), input_name='DangerousGoodsIndicator')), eol_))
        if self.CommodityValue is not None:
            self.CommodityValue.export(outfile, level, namespace_, name_='CommodityValue', pretty_print=pretty_print)
        if self.FreightClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FreightClass>%s</fsp:FreightClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), eol_))
        if self.NMFCCommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:NMFCCommodityCode>%s</fsp:NMFCCommodityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NMFCCommodityCode), input_name='NMFCCommodityCode')), eol_))
        if self.NMFCCommodity is not None:
            self.NMFCCommodity.export(outfile, level, namespace_, name_='NMFCCommodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityID':
            CommodityID_ = child_.text
            CommodityID_ = self.gds_validate_string(CommodityID_, node, 'CommodityID')
            self.CommodityID = CommodityID_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'NumberOfPieces':
            NumberOfPieces_ = child_.text
            NumberOfPieces_ = self.gds_validate_string(NumberOfPieces_, node, 'NumberOfPieces')
            self.NumberOfPieces = NumberOfPieces_
        elif nodeName_ == 'PackagingType':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'DangerousGoodsIndicator':
            DangerousGoodsIndicator_ = child_.text
            DangerousGoodsIndicator_ = self.gds_validate_string(DangerousGoodsIndicator_, node, 'DangerousGoodsIndicator')
            self.DangerousGoodsIndicator = DangerousGoodsIndicator_
        elif nodeName_ == 'CommodityValue':
            obj_ = CommodityValueType.factory()
            obj_.build(child_)
            self.CommodityValue = obj_
            obj_.original_tagname_ = 'CommodityValue'
        elif nodeName_ == 'FreightClass':
            FreightClass_ = child_.text
            FreightClass_ = self.gds_validate_string(FreightClass_, node, 'FreightClass')
            self.FreightClass = FreightClass_
        elif nodeName_ == 'NMFCCommodityCode':
            NMFCCommodityCode_ = child_.text
            NMFCCommodityCode_ = self.gds_validate_string(NMFCCommodityCode_, node, 'NMFCCommodityCode')
            self.NMFCCommodityCode = NMFCCommodityCode_
        elif nodeName_ == 'NMFCCommodity':
            obj_ = NMFCCommodityType.factory()
            obj_.build(child_)
            self.NMFCCommodity = obj_
            obj_.original_tagname_ = 'NMFCCommodity'
# end class CommodityType


class NMFCCommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PrimeCode=None, SubCode=None):
        self.original_tagname_ = None
        self.PrimeCode = PrimeCode
        self.SubCode = SubCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NMFCCommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NMFCCommodityType.subclass:
            return NMFCCommodityType.subclass(*args_, **kwargs_)
        else:
            return NMFCCommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PrimeCode(self): return self.PrimeCode
    def set_PrimeCode(self, PrimeCode): self.PrimeCode = PrimeCode
    def get_SubCode(self): return self.SubCode
    def set_SubCode(self, SubCode): self.SubCode = SubCode
    def hasContent_(self):
        if (
            self.PrimeCode is not None or
            self.SubCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='NMFCCommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NMFCCommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NMFCCommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='NMFCCommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='NMFCCommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='NMFCCommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrimeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PrimeCode>%s</fsp:PrimeCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrimeCode), input_name='PrimeCode')), eol_))
        if self.SubCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:SubCode>%s</fsp:SubCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubCode), input_name='SubCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PrimeCode':
            PrimeCode_ = child_.text
            PrimeCode_ = self.gds_validate_string(PrimeCode_, node, 'PrimeCode')
            self.PrimeCode = PrimeCode_
        elif nodeName_ == 'SubCode':
            SubCode_ = child_.text
            SubCode_ = self.gds_validate_string(SubCode_, node, 'SubCode')
            self.SubCode = SubCode_
# end class NMFCCommodityType


class WeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Value=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightType.subclass:
            return WeightType.subclass(*args_, **kwargs_)
        else:
            return WeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='WeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='WeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='WeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='WeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Value>%s</fsp:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class WeightType


class FreightShipUnitOfMeasurementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipUnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipUnitOfMeasurementType.subclass:
            return FreightShipUnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return FreightShipUnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FreightShipUnitOfMeasurementType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipUnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightShipUnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FreightShipUnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FreightShipUnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FreightShipUnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class FreightShipUnitOfMeasurementType


class DimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Length>%s</fsp:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Width>%s</fsp:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Height>%s</fsp:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class DimensionsType


class CommodityValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityValueType.subclass:
            return CommodityValueType.subclass(*args_, **kwargs_)
        else:
            return CommodityValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CommodityValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CommodityValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CommodityValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CommodityValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CommodityValueType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, BarCodeIndicator=None, NumberOfCartons=None, Weight=None):
        self.original_tagname_ = None
        self.Number = Number
        self.BarCodeIndicator = BarCodeIndicator
        self.NumberOfCartons = NumberOfCartons
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_BarCodeIndicator(self): return self.BarCodeIndicator
    def set_BarCodeIndicator(self, BarCodeIndicator): self.BarCodeIndicator = BarCodeIndicator
    def get_NumberOfCartons(self): return self.NumberOfCartons
    def set_NumberOfCartons(self, NumberOfCartons): self.NumberOfCartons = NumberOfCartons
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.Number is not None or
            self.BarCodeIndicator is not None or
            self.NumberOfCartons is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            self.Number.export(outfile, level, namespace_, name_='Number', pretty_print=pretty_print)
        if self.BarCodeIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:BarCodeIndicator>%s</fsp:BarCodeIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BarCodeIndicator), input_name='BarCodeIndicator')), eol_))
        if self.NumberOfCartons is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:NumberOfCartons>%s</fsp:NumberOfCartons>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfCartons), input_name='NumberOfCartons')), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            obj_ = ReferenceNumberType.factory()
            obj_.build(child_)
            self.Number = obj_
            obj_.original_tagname_ = 'Number'
        elif nodeName_ == 'BarCodeIndicator':
            BarCodeIndicator_ = child_.text
            BarCodeIndicator_ = self.gds_validate_string(BarCodeIndicator_, node, 'BarCodeIndicator')
            self.BarCodeIndicator = BarCodeIndicator_
        elif nodeName_ == 'NumberOfCartons':
            NumberOfCartons_ = child_.text
            NumberOfCartons_ = self.gds_validate_string(NumberOfCartons_, node, 'NumberOfCartons')
            self.NumberOfCartons = NumberOfCartons_
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class ReferenceType


class ReferenceNumberType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceNumberType.subclass:
            return ReferenceNumberType.subclass(*args_, **kwargs_)
        else:
            return ReferenceNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ReferenceNumberType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceNumberType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ReferenceNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ReferenceNumberType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ReferenceNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Value>%s</fsp:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class ReferenceNumberType


class ShipmentServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailInformation=None, PickupOptions=None, DeliveryOptions=None, OverSeasLeg=None, COD=None, DangerousGoods=None, SortingAndSegregating=None, DeclaredValue=None, ExcessDeclaredValue=None, CustomsValue=None, DeliveryDutiesPaidIndicator=None, DeliveryDutiesUnpaidIndicator=None, HandlingCharge=None, CustomsClearanceIndicator=None, FreezableProtectionIndicator=None, ExtremeLengthIndicator=None):
        self.original_tagname_ = None
        if EMailInformation is None:
            self.EMailInformation = []
        else:
            self.EMailInformation = EMailInformation
        self.PickupOptions = PickupOptions
        self.DeliveryOptions = DeliveryOptions
        self.OverSeasLeg = OverSeasLeg
        self.COD = COD
        self.DangerousGoods = DangerousGoods
        self.SortingAndSegregating = SortingAndSegregating
        self.DeclaredValue = DeclaredValue
        self.ExcessDeclaredValue = ExcessDeclaredValue
        self.CustomsValue = CustomsValue
        self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator
        self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator
        self.HandlingCharge = HandlingCharge
        self.CustomsClearanceIndicator = CustomsClearanceIndicator
        self.FreezableProtectionIndicator = FreezableProtectionIndicator
        self.ExtremeLengthIndicator = ExtremeLengthIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailInformation(self): return self.EMailInformation
    def set_EMailInformation(self, EMailInformation): self.EMailInformation = EMailInformation
    def add_EMailInformation(self, value): self.EMailInformation.append(value)
    def insert_EMailInformation_at(self, index, value): self.EMailInformation.insert(index, value)
    def replace_EMailInformation_at(self, index, value): self.EMailInformation[index] = value
    def get_PickupOptions(self): return self.PickupOptions
    def set_PickupOptions(self, PickupOptions): self.PickupOptions = PickupOptions
    def get_DeliveryOptions(self): return self.DeliveryOptions
    def set_DeliveryOptions(self, DeliveryOptions): self.DeliveryOptions = DeliveryOptions
    def get_OverSeasLeg(self): return self.OverSeasLeg
    def set_OverSeasLeg(self, OverSeasLeg): self.OverSeasLeg = OverSeasLeg
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_DangerousGoods(self): return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods): self.DangerousGoods = DangerousGoods
    def get_SortingAndSegregating(self): return self.SortingAndSegregating
    def set_SortingAndSegregating(self, SortingAndSegregating): self.SortingAndSegregating = SortingAndSegregating
    def get_DeclaredValue(self): return self.DeclaredValue
    def set_DeclaredValue(self, DeclaredValue): self.DeclaredValue = DeclaredValue
    def get_ExcessDeclaredValue(self): return self.ExcessDeclaredValue
    def set_ExcessDeclaredValue(self, ExcessDeclaredValue): self.ExcessDeclaredValue = ExcessDeclaredValue
    def get_CustomsValue(self): return self.CustomsValue
    def set_CustomsValue(self, CustomsValue): self.CustomsValue = CustomsValue
    def get_DeliveryDutiesPaidIndicator(self): return self.DeliveryDutiesPaidIndicator
    def set_DeliveryDutiesPaidIndicator(self, DeliveryDutiesPaidIndicator): self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator
    def get_DeliveryDutiesUnpaidIndicator(self): return self.DeliveryDutiesUnpaidIndicator
    def set_DeliveryDutiesUnpaidIndicator(self, DeliveryDutiesUnpaidIndicator): self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator
    def get_HandlingCharge(self): return self.HandlingCharge
    def set_HandlingCharge(self, HandlingCharge): self.HandlingCharge = HandlingCharge
    def get_CustomsClearanceIndicator(self): return self.CustomsClearanceIndicator
    def set_CustomsClearanceIndicator(self, CustomsClearanceIndicator): self.CustomsClearanceIndicator = CustomsClearanceIndicator
    def get_FreezableProtectionIndicator(self): return self.FreezableProtectionIndicator
    def set_FreezableProtectionIndicator(self, FreezableProtectionIndicator): self.FreezableProtectionIndicator = FreezableProtectionIndicator
    def get_ExtremeLengthIndicator(self): return self.ExtremeLengthIndicator
    def set_ExtremeLengthIndicator(self, ExtremeLengthIndicator): self.ExtremeLengthIndicator = ExtremeLengthIndicator
    def hasContent_(self):
        if (
            self.EMailInformation or
            self.PickupOptions is not None or
            self.DeliveryOptions is not None or
            self.OverSeasLeg is not None or
            self.COD is not None or
            self.DangerousGoods is not None or
            self.SortingAndSegregating is not None or
            self.DeclaredValue is not None or
            self.ExcessDeclaredValue is not None or
            self.CustomsValue is not None or
            self.DeliveryDutiesPaidIndicator is not None or
            self.DeliveryDutiesUnpaidIndicator is not None or
            self.HandlingCharge is not None or
            self.CustomsClearanceIndicator is not None or
            self.FreezableProtectionIndicator is not None or
            self.ExtremeLengthIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipmentServiceOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipmentServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipmentServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipmentServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailInformation_ in self.EMailInformation:
            EMailInformation_.export(outfile, level, namespace_, name_='EMailInformation', pretty_print=pretty_print)
        if self.PickupOptions is not None:
            self.PickupOptions.export(outfile, level, namespace_, name_='PickupOptions', pretty_print=pretty_print)
        if self.DeliveryOptions is not None:
            self.DeliveryOptions.export(outfile, level, namespace_, name_='DeliveryOptions', pretty_print=pretty_print)
        if self.OverSeasLeg is not None:
            self.OverSeasLeg.export(outfile, level, namespace_, name_='OverSeasLeg', pretty_print=pretty_print)
        if self.COD is not None:
            self.COD.export(outfile, level, namespace_, name_='COD', pretty_print=pretty_print)
        if self.DangerousGoods is not None:
            self.DangerousGoods.export(outfile, level, namespace_, name_='DangerousGoods', pretty_print=pretty_print)
        if self.SortingAndSegregating is not None:
            self.SortingAndSegregating.export(outfile, level, namespace_, name_='SortingAndSegregating', pretty_print=pretty_print)
        if self.DeclaredValue is not None:
            self.DeclaredValue.export(outfile, level, namespace_, name_='DeclaredValue', pretty_print=pretty_print)
        if self.ExcessDeclaredValue is not None:
            self.ExcessDeclaredValue.export(outfile, level, namespace_, name_='ExcessDeclaredValue', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            self.CustomsValue.export(outfile, level, namespace_, name_='CustomsValue', pretty_print=pretty_print)
        if self.DeliveryDutiesPaidIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DeliveryDutiesPaidIndicator>%s</fsp:DeliveryDutiesPaidIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDutiesPaidIndicator), input_name='DeliveryDutiesPaidIndicator')), eol_))
        if self.DeliveryDutiesUnpaidIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DeliveryDutiesUnpaidIndicator>%s</fsp:DeliveryDutiesUnpaidIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDutiesUnpaidIndicator), input_name='DeliveryDutiesUnpaidIndicator')), eol_))
        if self.HandlingCharge is not None:
            self.HandlingCharge.export(outfile, level, namespace_, name_='HandlingCharge', pretty_print=pretty_print)
        if self.CustomsClearanceIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CustomsClearanceIndicator>%s</fsp:CustomsClearanceIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomsClearanceIndicator), input_name='CustomsClearanceIndicator')), eol_))
        if self.FreezableProtectionIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FreezableProtectionIndicator>%s</fsp:FreezableProtectionIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FreezableProtectionIndicator), input_name='FreezableProtectionIndicator')), eol_))
        if self.ExtremeLengthIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ExtremeLengthIndicator>%s</fsp:ExtremeLengthIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExtremeLengthIndicator), input_name='ExtremeLengthIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailInformation':
            obj_ = EMailInformationType.factory()
            obj_.build(child_)
            self.EMailInformation.append(obj_)
            obj_.original_tagname_ = 'EMailInformation'
        elif nodeName_ == 'PickupOptions':
            obj_ = PickupOptionsType.factory()
            obj_.build(child_)
            self.PickupOptions = obj_
            obj_.original_tagname_ = 'PickupOptions'
        elif nodeName_ == 'DeliveryOptions':
            obj_ = DeliveryOptionsType.factory()
            obj_.build(child_)
            self.DeliveryOptions = obj_
            obj_.original_tagname_ = 'DeliveryOptions'
        elif nodeName_ == 'OverSeasLeg':
            obj_ = OverSeasLegType.factory()
            obj_.build(child_)
            self.OverSeasLeg = obj_
            obj_.original_tagname_ = 'OverSeasLeg'
        elif nodeName_ == 'COD':
            obj_ = CODType.factory()
            obj_.build(child_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'DangerousGoods':
            obj_ = DangerousGoodsType.factory()
            obj_.build(child_)
            self.DangerousGoods = obj_
            obj_.original_tagname_ = 'DangerousGoods'
        elif nodeName_ == 'SortingAndSegregating':
            obj_ = SortingAndSegregatingType.factory()
            obj_.build(child_)
            self.SortingAndSegregating = obj_
            obj_.original_tagname_ = 'SortingAndSegregating'
        elif nodeName_ == 'DeclaredValue':
            obj_ = DeclaredValueType.factory()
            obj_.build(child_)
            self.DeclaredValue = obj_
            obj_.original_tagname_ = 'DeclaredValue'
        elif nodeName_ == 'ExcessDeclaredValue':
            obj_ = DeclaredValueType.factory()
            obj_.build(child_)
            self.ExcessDeclaredValue = obj_
            obj_.original_tagname_ = 'ExcessDeclaredValue'
        elif nodeName_ == 'CustomsValue':
            obj_ = CustomsValueType.factory()
            obj_.build(child_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'DeliveryDutiesPaidIndicator':
            DeliveryDutiesPaidIndicator_ = child_.text
            DeliveryDutiesPaidIndicator_ = self.gds_validate_string(DeliveryDutiesPaidIndicator_, node, 'DeliveryDutiesPaidIndicator')
            self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator_
        elif nodeName_ == 'DeliveryDutiesUnpaidIndicator':
            DeliveryDutiesUnpaidIndicator_ = child_.text
            DeliveryDutiesUnpaidIndicator_ = self.gds_validate_string(DeliveryDutiesUnpaidIndicator_, node, 'DeliveryDutiesUnpaidIndicator')
            self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator_
        elif nodeName_ == 'HandlingCharge':
            obj_ = HandlingChargeType.factory()
            obj_.build(child_)
            self.HandlingCharge = obj_
            obj_.original_tagname_ = 'HandlingCharge'
        elif nodeName_ == 'CustomsClearanceIndicator':
            CustomsClearanceIndicator_ = child_.text
            CustomsClearanceIndicator_ = self.gds_validate_string(CustomsClearanceIndicator_, node, 'CustomsClearanceIndicator')
            self.CustomsClearanceIndicator = CustomsClearanceIndicator_
        elif nodeName_ == 'FreezableProtectionIndicator':
            FreezableProtectionIndicator_ = child_.text
            FreezableProtectionIndicator_ = self.gds_validate_string(FreezableProtectionIndicator_, node, 'FreezableProtectionIndicator')
            self.FreezableProtectionIndicator = FreezableProtectionIndicator_
        elif nodeName_ == 'ExtremeLengthIndicator':
            ExtremeLengthIndicator_ = child_.text
            ExtremeLengthIndicator_ = self.gds_validate_string(ExtremeLengthIndicator_, node, 'ExtremeLengthIndicator')
            self.ExtremeLengthIndicator = ExtremeLengthIndicator_
# end class ShipmentServiceOptionsType


class EMailInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailType=None, EMail=None):
        self.original_tagname_ = None
        self.EMailType = EMailType
        self.EMail = EMail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailInformationType.subclass:
            return EMailInformationType.subclass(*args_, **kwargs_)
        else:
            return EMailInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailType(self): return self.EMailType
    def set_EMailType(self, EMailType): self.EMailType = EMailType
    def get_EMail(self): return self.EMail
    def set_EMail(self, EMail): self.EMail = EMail
    def hasContent_(self):
        if (
            self.EMailType is not None or
            self.EMail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='EMailInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='EMailInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='EMailInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='EMailInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailType is not None:
            self.EMailType.export(outfile, level, namespace_, name_='EMailType', pretty_print=pretty_print)
        if self.EMail is not None:
            self.EMail.export(outfile, level, namespace_, name_='EMail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailType':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.EMailType = obj_
            obj_.original_tagname_ = 'EMailType'
        elif nodeName_ == 'EMail':
            obj_ = EMailType.factory()
            obj_.build(child_)
            self.EMail = obj_
            obj_.original_tagname_ = 'EMail'
# end class EMailInformationType


class EMailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, EMailText=None, UndeliverableEMailAddress=None, Subject=None):
        self.original_tagname_ = None
        if EMailAddress is None:
            self.EMailAddress = []
        else:
            self.EMailAddress = EMailAddress
        self.EMailText = EMailText
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.Subject = Subject
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailType.subclass:
            return EMailType.subclass(*args_, **kwargs_)
        else:
            return EMailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def add_EMailAddress(self, value): self.EMailAddress.append(value)
    def insert_EMailAddress_at(self, index, value): self.EMailAddress.insert(index, value)
    def replace_EMailAddress_at(self, index, value): self.EMailAddress[index] = value
    def get_EMailText(self): return self.EMailText
    def set_EMailText(self, EMailText): self.EMailText = EMailText
    def get_UndeliverableEMailAddress(self): return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress): self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_Subject(self): return self.Subject
    def set_Subject(self, Subject): self.Subject = Subject
    def hasContent_(self):
        if (
            self.EMailAddress or
            self.EMailText is not None or
            self.UndeliverableEMailAddress is not None or
            self.Subject is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='EMailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='EMailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='EMailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='EMailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailAddress_ in self.EMailAddress:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EMailAddress_), input_name='EMailAddress')), eol_))
        if self.EMailText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailText>%s</fsp:EMailText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailText), input_name='EMailText')), eol_))
        if self.UndeliverableEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:UndeliverableEMailAddress>%s</fsp:UndeliverableEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), eol_))
        if self.Subject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Subject>%s</fsp:Subject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress.append(EMailAddress_)
        elif nodeName_ == 'EMailText':
            EMailText_ = child_.text
            EMailText_ = self.gds_validate_string(EMailText_, node, 'EMailText')
            self.EMailText = EMailText_
        elif nodeName_ == 'UndeliverableEMailAddress':
            UndeliverableEMailAddress_ = child_.text
            UndeliverableEMailAddress_ = self.gds_validate_string(UndeliverableEMailAddress_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = UndeliverableEMailAddress_
        elif nodeName_ == 'Subject':
            Subject_ = child_.text
            Subject_ = self.gds_validate_string(Subject_, node, 'Subject')
            self.Subject = Subject_
# end class EMailType


class PickupOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HolidayPickupIndicator=None, InsidePickupIndicator=None, ResidentialPickupIndicator=None, WeekendPickupIndicator=None, LiftGateRequiredIndicator=None, HoldAtAirportForPickup=None, PickupFromDoorIndicator=None, LimitedAccessPickupIndicator=None):
        self.original_tagname_ = None
        self.HolidayPickupIndicator = HolidayPickupIndicator
        self.InsidePickupIndicator = InsidePickupIndicator
        self.ResidentialPickupIndicator = ResidentialPickupIndicator
        self.WeekendPickupIndicator = WeekendPickupIndicator
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
        self.HoldAtAirportForPickup = HoldAtAirportForPickup
        self.PickupFromDoorIndicator = PickupFromDoorIndicator
        self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupOptionsType.subclass:
            return PickupOptionsType.subclass(*args_, **kwargs_)
        else:
            return PickupOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HolidayPickupIndicator(self): return self.HolidayPickupIndicator
    def set_HolidayPickupIndicator(self, HolidayPickupIndicator): self.HolidayPickupIndicator = HolidayPickupIndicator
    def get_InsidePickupIndicator(self): return self.InsidePickupIndicator
    def set_InsidePickupIndicator(self, InsidePickupIndicator): self.InsidePickupIndicator = InsidePickupIndicator
    def get_ResidentialPickupIndicator(self): return self.ResidentialPickupIndicator
    def set_ResidentialPickupIndicator(self, ResidentialPickupIndicator): self.ResidentialPickupIndicator = ResidentialPickupIndicator
    def get_WeekendPickupIndicator(self): return self.WeekendPickupIndicator
    def set_WeekendPickupIndicator(self, WeekendPickupIndicator): self.WeekendPickupIndicator = WeekendPickupIndicator
    def get_LiftGateRequiredIndicator(self): return self.LiftGateRequiredIndicator
    def set_LiftGateRequiredIndicator(self, LiftGateRequiredIndicator): self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
    def get_HoldAtAirportForPickup(self): return self.HoldAtAirportForPickup
    def set_HoldAtAirportForPickup(self, HoldAtAirportForPickup): self.HoldAtAirportForPickup = HoldAtAirportForPickup
    def get_PickupFromDoorIndicator(self): return self.PickupFromDoorIndicator
    def set_PickupFromDoorIndicator(self, PickupFromDoorIndicator): self.PickupFromDoorIndicator = PickupFromDoorIndicator
    def get_LimitedAccessPickupIndicator(self): return self.LimitedAccessPickupIndicator
    def set_LimitedAccessPickupIndicator(self, LimitedAccessPickupIndicator): self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator
    def hasContent_(self):
        if (
            self.HolidayPickupIndicator is not None or
            self.InsidePickupIndicator is not None or
            self.ResidentialPickupIndicator is not None or
            self.WeekendPickupIndicator is not None or
            self.LiftGateRequiredIndicator is not None or
            self.HoldAtAirportForPickup is not None or
            self.PickupFromDoorIndicator is not None or
            self.LimitedAccessPickupIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PickupOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PickupOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PickupOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PickupOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HolidayPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:HolidayPickupIndicator>%s</fsp:HolidayPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HolidayPickupIndicator), input_name='HolidayPickupIndicator')), eol_))
        if self.InsidePickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:InsidePickupIndicator>%s</fsp:InsidePickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InsidePickupIndicator), input_name='InsidePickupIndicator')), eol_))
        if self.ResidentialPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ResidentialPickupIndicator>%s</fsp:ResidentialPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialPickupIndicator), input_name='ResidentialPickupIndicator')), eol_))
        if self.WeekendPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:WeekendPickupIndicator>%s</fsp:WeekendPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WeekendPickupIndicator), input_name='WeekendPickupIndicator')), eol_))
        if self.LiftGateRequiredIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LiftGateRequiredIndicator>%s</fsp:LiftGateRequiredIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateRequiredIndicator), input_name='LiftGateRequiredIndicator')), eol_))
        if self.HoldAtAirportForPickup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:HoldAtAirportForPickup>%s</fsp:HoldAtAirportForPickup>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldAtAirportForPickup), input_name='HoldAtAirportForPickup')), eol_))
        if self.PickupFromDoorIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PickupFromDoorIndicator>%s</fsp:PickupFromDoorIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupFromDoorIndicator), input_name='PickupFromDoorIndicator')), eol_))
        if self.LimitedAccessPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LimitedAccessPickupIndicator>%s</fsp:LimitedAccessPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LimitedAccessPickupIndicator), input_name='LimitedAccessPickupIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HolidayPickupIndicator':
            HolidayPickupIndicator_ = child_.text
            HolidayPickupIndicator_ = self.gds_validate_string(HolidayPickupIndicator_, node, 'HolidayPickupIndicator')
            self.HolidayPickupIndicator = HolidayPickupIndicator_
        elif nodeName_ == 'InsidePickupIndicator':
            InsidePickupIndicator_ = child_.text
            InsidePickupIndicator_ = self.gds_validate_string(InsidePickupIndicator_, node, 'InsidePickupIndicator')
            self.InsidePickupIndicator = InsidePickupIndicator_
        elif nodeName_ == 'ResidentialPickupIndicator':
            ResidentialPickupIndicator_ = child_.text
            ResidentialPickupIndicator_ = self.gds_validate_string(ResidentialPickupIndicator_, node, 'ResidentialPickupIndicator')
            self.ResidentialPickupIndicator = ResidentialPickupIndicator_
        elif nodeName_ == 'WeekendPickupIndicator':
            WeekendPickupIndicator_ = child_.text
            WeekendPickupIndicator_ = self.gds_validate_string(WeekendPickupIndicator_, node, 'WeekendPickupIndicator')
            self.WeekendPickupIndicator = WeekendPickupIndicator_
        elif nodeName_ == 'LiftGateRequiredIndicator':
            LiftGateRequiredIndicator_ = child_.text
            LiftGateRequiredIndicator_ = self.gds_validate_string(LiftGateRequiredIndicator_, node, 'LiftGateRequiredIndicator')
            self.LiftGateRequiredIndicator = LiftGateRequiredIndicator_
        elif nodeName_ == 'HoldAtAirportForPickup':
            HoldAtAirportForPickup_ = child_.text
            HoldAtAirportForPickup_ = self.gds_validate_string(HoldAtAirportForPickup_, node, 'HoldAtAirportForPickup')
            self.HoldAtAirportForPickup = HoldAtAirportForPickup_
        elif nodeName_ == 'PickupFromDoorIndicator':
            PickupFromDoorIndicator_ = child_.text
            PickupFromDoorIndicator_ = self.gds_validate_string(PickupFromDoorIndicator_, node, 'PickupFromDoorIndicator')
            self.PickupFromDoorIndicator = PickupFromDoorIndicator_
        elif nodeName_ == 'LimitedAccessPickupIndicator':
            LimitedAccessPickupIndicator_ = child_.text
            LimitedAccessPickupIndicator_ = self.gds_validate_string(LimitedAccessPickupIndicator_, node, 'LimitedAccessPickupIndicator')
            self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator_
# end class PickupOptionsType


class DeliveryOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CallBeforeDeliveryIndicator=None, ConstructionSiteDeliveryIndicator=None, HolidayDeliveryIndicator=None, InsideDeliveryIndicator=None, ResidentialDeliveryIndicator=None, WeekendDeliveryIndicator=None, LiftGateRequiredIndicator=None, SaturdayDeliveryIndicator=None, DeliveryToDoorIndicator=None, LimitedAccessDeliveryIndicator=None):
        self.original_tagname_ = None
        self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator
        self.ConstructionSiteDeliveryIndicator = ConstructionSiteDeliveryIndicator
        self.HolidayDeliveryIndicator = HolidayDeliveryIndicator
        self.InsideDeliveryIndicator = InsideDeliveryIndicator
        self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator
        self.WeekendDeliveryIndicator = WeekendDeliveryIndicator
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
        self.DeliveryToDoorIndicator = DeliveryToDoorIndicator
        self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOptionsType.subclass:
            return DeliveryOptionsType.subclass(*args_, **kwargs_)
        else:
            return DeliveryOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CallBeforeDeliveryIndicator(self): return self.CallBeforeDeliveryIndicator
    def set_CallBeforeDeliveryIndicator(self, CallBeforeDeliveryIndicator): self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator
    def get_ConstructionSiteDeliveryIndicator(self): return self.ConstructionSiteDeliveryIndicator
    def set_ConstructionSiteDeliveryIndicator(self, ConstructionSiteDeliveryIndicator): self.ConstructionSiteDeliveryIndicator = ConstructionSiteDeliveryIndicator
    def get_HolidayDeliveryIndicator(self): return self.HolidayDeliveryIndicator
    def set_HolidayDeliveryIndicator(self, HolidayDeliveryIndicator): self.HolidayDeliveryIndicator = HolidayDeliveryIndicator
    def get_InsideDeliveryIndicator(self): return self.InsideDeliveryIndicator
    def set_InsideDeliveryIndicator(self, InsideDeliveryIndicator): self.InsideDeliveryIndicator = InsideDeliveryIndicator
    def get_ResidentialDeliveryIndicator(self): return self.ResidentialDeliveryIndicator
    def set_ResidentialDeliveryIndicator(self, ResidentialDeliveryIndicator): self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator
    def get_WeekendDeliveryIndicator(self): return self.WeekendDeliveryIndicator
    def set_WeekendDeliveryIndicator(self, WeekendDeliveryIndicator): self.WeekendDeliveryIndicator = WeekendDeliveryIndicator
    def get_LiftGateRequiredIndicator(self): return self.LiftGateRequiredIndicator
    def set_LiftGateRequiredIndicator(self, LiftGateRequiredIndicator): self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
    def get_SaturdayDeliveryIndicator(self): return self.SaturdayDeliveryIndicator
    def set_SaturdayDeliveryIndicator(self, SaturdayDeliveryIndicator): self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
    def get_DeliveryToDoorIndicator(self): return self.DeliveryToDoorIndicator
    def set_DeliveryToDoorIndicator(self, DeliveryToDoorIndicator): self.DeliveryToDoorIndicator = DeliveryToDoorIndicator
    def get_LimitedAccessDeliveryIndicator(self): return self.LimitedAccessDeliveryIndicator
    def set_LimitedAccessDeliveryIndicator(self, LimitedAccessDeliveryIndicator): self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator
    def hasContent_(self):
        if (
            self.CallBeforeDeliveryIndicator is not None or
            self.ConstructionSiteDeliveryIndicator is not None or
            self.HolidayDeliveryIndicator is not None or
            self.InsideDeliveryIndicator is not None or
            self.ResidentialDeliveryIndicator is not None or
            self.WeekendDeliveryIndicator is not None or
            self.LiftGateRequiredIndicator is not None or
            self.SaturdayDeliveryIndicator is not None or
            self.DeliveryToDoorIndicator is not None or
            self.LimitedAccessDeliveryIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DeliveryOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DeliveryOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DeliveryOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DeliveryOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CallBeforeDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CallBeforeDeliveryIndicator>%s</fsp:CallBeforeDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CallBeforeDeliveryIndicator), input_name='CallBeforeDeliveryIndicator')), eol_))
        if self.ConstructionSiteDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ConstructionSiteDeliveryIndicator>%s</fsp:ConstructionSiteDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConstructionSiteDeliveryIndicator), input_name='ConstructionSiteDeliveryIndicator')), eol_))
        if self.HolidayDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:HolidayDeliveryIndicator>%s</fsp:HolidayDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HolidayDeliveryIndicator), input_name='HolidayDeliveryIndicator')), eol_))
        if self.InsideDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:InsideDeliveryIndicator>%s</fsp:InsideDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InsideDeliveryIndicator), input_name='InsideDeliveryIndicator')), eol_))
        if self.ResidentialDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ResidentialDeliveryIndicator>%s</fsp:ResidentialDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialDeliveryIndicator), input_name='ResidentialDeliveryIndicator')), eol_))
        if self.WeekendDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:WeekendDeliveryIndicator>%s</fsp:WeekendDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.WeekendDeliveryIndicator), input_name='WeekendDeliveryIndicator')), eol_))
        if self.LiftGateRequiredIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LiftGateRequiredIndicator>%s</fsp:LiftGateRequiredIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateRequiredIndicator), input_name='LiftGateRequiredIndicator')), eol_))
        if self.SaturdayDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:SaturdayDeliveryIndicator>%s</fsp:SaturdayDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDeliveryIndicator), input_name='SaturdayDeliveryIndicator')), eol_))
        if self.DeliveryToDoorIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DeliveryToDoorIndicator>%s</fsp:DeliveryToDoorIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryToDoorIndicator), input_name='DeliveryToDoorIndicator')), eol_))
        if self.LimitedAccessDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LimitedAccessDeliveryIndicator>%s</fsp:LimitedAccessDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LimitedAccessDeliveryIndicator), input_name='LimitedAccessDeliveryIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CallBeforeDeliveryIndicator':
            CallBeforeDeliveryIndicator_ = child_.text
            CallBeforeDeliveryIndicator_ = self.gds_validate_string(CallBeforeDeliveryIndicator_, node, 'CallBeforeDeliveryIndicator')
            self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator_
        elif nodeName_ == 'ConstructionSiteDeliveryIndicator':
            ConstructionSiteDeliveryIndicator_ = child_.text
            ConstructionSiteDeliveryIndicator_ = self.gds_validate_string(ConstructionSiteDeliveryIndicator_, node, 'ConstructionSiteDeliveryIndicator')
            self.ConstructionSiteDeliveryIndicator = ConstructionSiteDeliveryIndicator_
        elif nodeName_ == 'HolidayDeliveryIndicator':
            HolidayDeliveryIndicator_ = child_.text
            HolidayDeliveryIndicator_ = self.gds_validate_string(HolidayDeliveryIndicator_, node, 'HolidayDeliveryIndicator')
            self.HolidayDeliveryIndicator = HolidayDeliveryIndicator_
        elif nodeName_ == 'InsideDeliveryIndicator':
            InsideDeliveryIndicator_ = child_.text
            InsideDeliveryIndicator_ = self.gds_validate_string(InsideDeliveryIndicator_, node, 'InsideDeliveryIndicator')
            self.InsideDeliveryIndicator = InsideDeliveryIndicator_
        elif nodeName_ == 'ResidentialDeliveryIndicator':
            ResidentialDeliveryIndicator_ = child_.text
            ResidentialDeliveryIndicator_ = self.gds_validate_string(ResidentialDeliveryIndicator_, node, 'ResidentialDeliveryIndicator')
            self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator_
        elif nodeName_ == 'WeekendDeliveryIndicator':
            WeekendDeliveryIndicator_ = child_.text
            WeekendDeliveryIndicator_ = self.gds_validate_string(WeekendDeliveryIndicator_, node, 'WeekendDeliveryIndicator')
            self.WeekendDeliveryIndicator = WeekendDeliveryIndicator_
        elif nodeName_ == 'LiftGateRequiredIndicator':
            LiftGateRequiredIndicator_ = child_.text
            LiftGateRequiredIndicator_ = self.gds_validate_string(LiftGateRequiredIndicator_, node, 'LiftGateRequiredIndicator')
            self.LiftGateRequiredIndicator = LiftGateRequiredIndicator_
        elif nodeName_ == 'SaturdayDeliveryIndicator':
            SaturdayDeliveryIndicator_ = child_.text
            SaturdayDeliveryIndicator_ = self.gds_validate_string(SaturdayDeliveryIndicator_, node, 'SaturdayDeliveryIndicator')
            self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator_
        elif nodeName_ == 'DeliveryToDoorIndicator':
            DeliveryToDoorIndicator_ = child_.text
            DeliveryToDoorIndicator_ = self.gds_validate_string(DeliveryToDoorIndicator_, node, 'DeliveryToDoorIndicator')
            self.DeliveryToDoorIndicator = DeliveryToDoorIndicator_
        elif nodeName_ == 'LimitedAccessDeliveryIndicator':
            LimitedAccessDeliveryIndicator_ = child_.text
            LimitedAccessDeliveryIndicator_ = self.gds_validate_string(LimitedAccessDeliveryIndicator_, node, 'LimitedAccessDeliveryIndicator')
            self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator_
# end class DeliveryOptionsType


class OverSeasLegType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Dimensions=None, Value=None):
        self.original_tagname_ = None
        self.Dimensions = Dimensions
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OverSeasLegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OverSeasLegType.subclass:
            return OverSeasLegType.subclass(*args_, **kwargs_)
        else:
            return OverSeasLegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Dimensions is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='OverSeasLegType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OverSeasLegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OverSeasLegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='OverSeasLegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='OverSeasLegType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='OverSeasLegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dimensions':
            obj_ = DimensionType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Value':
            obj_ = DimensionValueType.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
# end class OverSeasLegType


class DimensionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Volume=None, Height=None, Length=None, Width=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Volume = Volume
        self.Height = Height
        self.Length = Length
        self.Width = Width
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionType.subclass:
            return DimensionType.subclass(*args_, **kwargs_)
        else:
            return DimensionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Volume is not None or
            self.Height is not None or
            self.Length is not None or
            self.Width is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DimensionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DimensionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DimensionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DimensionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Volume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Volume>%s</fsp:Volume>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Volume), input_name='Volume')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Height>%s</fsp:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Length>%s</fsp:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Width>%s</fsp:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Volume':
            Volume_ = child_.text
            Volume_ = self.gds_validate_string(Volume_, node, 'Volume')
            self.Volume = Volume_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class DimensionType


class DimensionValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cube=None, CWT=None):
        self.original_tagname_ = None
        self.Cube = Cube
        self.CWT = CWT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionValueType.subclass:
            return DimensionValueType.subclass(*args_, **kwargs_)
        else:
            return DimensionValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cube(self): return self.Cube
    def set_Cube(self, Cube): self.Cube = Cube
    def get_CWT(self): return self.CWT
    def set_CWT(self, CWT): self.CWT = CWT
    def hasContent_(self):
        if (
            self.Cube is not None or
            self.CWT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DimensionValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DimensionValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DimensionValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DimensionValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cube is not None:
            self.Cube.export(outfile, level, namespace_, name_='Cube', pretty_print=pretty_print)
        if self.CWT is not None:
            self.CWT.export(outfile, level, namespace_, name_='CWT', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cube':
            obj_ = CubeType.factory()
            obj_.build(child_)
            self.Cube = obj_
            obj_.original_tagname_ = 'Cube'
        elif nodeName_ == 'CWT':
            obj_ = CWTType.factory()
            obj_.build(child_)
            self.CWT = obj_
            obj_.original_tagname_ = 'CWT'
# end class DimensionValueType


class CubeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CubeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CubeType.subclass:
            return CubeType.subclass(*args_, **kwargs_)
        else:
            return CubeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CubeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CubeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CubeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CubeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CubeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CubeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CubeType


class CWTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CWTType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CWTType.subclass:
            return CWTType.subclass(*args_, **kwargs_)
        else:
            return CWTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CWTType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CWTType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CWTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CWTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CWTType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CWTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CWTType


class CODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODValue=None, CODPaymentMethod=None, CODBillingOption=None, RemitTo=None):
        self.original_tagname_ = None
        self.CODValue = CODValue
        self.CODPaymentMethod = CODPaymentMethod
        self.CODBillingOption = CODBillingOption
        self.RemitTo = RemitTo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODType.subclass:
            return CODType.subclass(*args_, **kwargs_)
        else:
            return CODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODValue(self): return self.CODValue
    def set_CODValue(self, CODValue): self.CODValue = CODValue
    def get_CODPaymentMethod(self): return self.CODPaymentMethod
    def set_CODPaymentMethod(self, CODPaymentMethod): self.CODPaymentMethod = CODPaymentMethod
    def get_CODBillingOption(self): return self.CODBillingOption
    def set_CODBillingOption(self, CODBillingOption): self.CODBillingOption = CODBillingOption
    def get_RemitTo(self): return self.RemitTo
    def set_RemitTo(self, RemitTo): self.RemitTo = RemitTo
    def hasContent_(self):
        if (
            self.CODValue is not None or
            self.CODPaymentMethod is not None or
            self.CODBillingOption is not None or
            self.RemitTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CODType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODValue is not None:
            self.CODValue.export(outfile, level, namespace_, name_='CODValue', pretty_print=pretty_print)
        if self.CODPaymentMethod is not None:
            self.CODPaymentMethod.export(outfile, level, namespace_, name_='CODPaymentMethod', pretty_print=pretty_print)
        if self.CODBillingOption is not None:
            self.CODBillingOption.export(outfile, level, namespace_, name_='CODBillingOption', pretty_print=pretty_print)
        if self.RemitTo is not None:
            self.RemitTo.export(outfile, level, namespace_, name_='RemitTo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODValue':
            obj_ = CODValueType.factory()
            obj_.build(child_)
            self.CODValue = obj_
            obj_.original_tagname_ = 'CODValue'
        elif nodeName_ == 'CODPaymentMethod':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.CODPaymentMethod = obj_
            obj_.original_tagname_ = 'CODPaymentMethod'
        elif nodeName_ == 'CODBillingOption':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.CODBillingOption = obj_
            obj_.original_tagname_ = 'CODBillingOption'
        elif nodeName_ == 'RemitTo':
            obj_ = RemitToType.factory()
            obj_.build(child_)
            self.RemitTo = obj_
            obj_.original_tagname_ = 'RemitTo'
# end class CODType


class CODValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODValueType.subclass:
            return CODValueType.subclass(*args_, **kwargs_)
        else:
            return CODValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CODValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CODValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CODValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CODValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CODValueType


class RemitToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Address = Address
        self.AttentionName = AttentionName
        self.Phone = Phone
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RemitToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RemitToType.subclass:
            return RemitToType.subclass(*args_, **kwargs_)
        else:
            return RemitToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='RemitToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RemitToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RemitToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='RemitToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='RemitToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='RemitToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AttentionName>%s</fsp:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FaxNumber>%s</fsp:FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class RemitToType


class DangerousGoodsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Phone=None, TransportationMode=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Phone = Phone
        self.TransportationMode = TransportationMode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsType.subclass:
            return DangerousGoodsType.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_TransportationMode(self): return self.TransportationMode
    def set_TransportationMode(self, TransportationMode): self.TransportationMode = TransportationMode
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Phone is not None or
            self.TransportationMode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DangerousGoodsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DangerousGoodsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DangerousGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DangerousGoodsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DangerousGoodsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.TransportationMode is not None:
            self.TransportationMode.export(outfile, level, namespace_, name_='TransportationMode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'TransportationMode':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.TransportationMode = obj_
            obj_.original_tagname_ = 'TransportationMode'
# end class DangerousGoodsType


class SortingAndSegregatingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortingAndSegregatingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortingAndSegregatingType.subclass:
            return SortingAndSegregatingType.subclass(*args_, **kwargs_)
        else:
            return SortingAndSegregatingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def hasContent_(self):
        if (
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='SortingAndSegregatingType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortingAndSegregatingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SortingAndSegregatingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='SortingAndSegregatingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='SortingAndSegregatingType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='SortingAndSegregatingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Quantity>%s</fsp:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
# end class SortingAndSegregatingType


class DeclaredValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeclaredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeclaredValueType.subclass:
            return DeclaredValueType.subclass(*args_, **kwargs_)
        else:
            return DeclaredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DeclaredValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeclaredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeclaredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DeclaredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DeclaredValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DeclaredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class DeclaredValueType


class CustomsValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsValueType.subclass:
            return CustomsValueType.subclass(*args_, **kwargs_)
        else:
            return CustomsValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CustomsValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomsValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CustomsValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CustomsValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CustomsValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class CustomsValueType


class HandlingChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Percentage=None, Amount=None):
        self.original_tagname_ = None
        self.Percentage = Percentage
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingChargeType.subclass:
            return HandlingChargeType.subclass(*args_, **kwargs_)
        else:
            return HandlingChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Percentage(self): return self.Percentage
    def set_Percentage(self, Percentage): self.Percentage = Percentage
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def hasContent_(self):
        if (
            self.Percentage is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='HandlingChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='HandlingChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='HandlingChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='HandlingChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Percentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Percentage>%s</fsp:Percentage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Percentage), input_name='Percentage')), eol_))
        if self.Amount is not None:
            self.Amount.export(outfile, level, namespace_, name_='Amount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Percentage':
            Percentage_ = child_.text
            Percentage_ = self.gds_validate_string(Percentage_, node, 'Percentage')
            self.Percentage = Percentage_
        elif nodeName_ == 'Amount':
            obj_ = HandlingChargeAmountType.factory()
            obj_.build(child_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class HandlingChargeType


class HandlingChargeAmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingChargeAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingChargeAmountType.subclass:
            return HandlingChargeAmountType.subclass(*args_, **kwargs_)
        else:
            return HandlingChargeAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='HandlingChargeAmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingChargeAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingChargeAmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='HandlingChargeAmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='HandlingChargeAmountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='HandlingChargeAmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class HandlingChargeAmountType


class PickupRequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AdditionalComments=None, Requester=None, PickupDate=None, EarliestTimeReady=None, LatestTimeReady=None, PickupTimeReady=None, DropoffTimeReady=None, POM=None):
        self.original_tagname_ = None
        self.AdditionalComments = AdditionalComments
        self.Requester = Requester
        self.PickupDate = PickupDate
        self.EarliestTimeReady = EarliestTimeReady
        self.LatestTimeReady = LatestTimeReady
        self.PickupTimeReady = PickupTimeReady
        self.DropoffTimeReady = DropoffTimeReady
        self.POM = POM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupRequestType.subclass:
            return PickupRequestType.subclass(*args_, **kwargs_)
        else:
            return PickupRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AdditionalComments(self): return self.AdditionalComments
    def set_AdditionalComments(self, AdditionalComments): self.AdditionalComments = AdditionalComments
    def get_Requester(self): return self.Requester
    def set_Requester(self, Requester): self.Requester = Requester
    def get_PickupDate(self): return self.PickupDate
    def set_PickupDate(self, PickupDate): self.PickupDate = PickupDate
    def get_EarliestTimeReady(self): return self.EarliestTimeReady
    def set_EarliestTimeReady(self, EarliestTimeReady): self.EarliestTimeReady = EarliestTimeReady
    def get_LatestTimeReady(self): return self.LatestTimeReady
    def set_LatestTimeReady(self, LatestTimeReady): self.LatestTimeReady = LatestTimeReady
    def get_PickupTimeReady(self): return self.PickupTimeReady
    def set_PickupTimeReady(self, PickupTimeReady): self.PickupTimeReady = PickupTimeReady
    def get_DropoffTimeReady(self): return self.DropoffTimeReady
    def set_DropoffTimeReady(self, DropoffTimeReady): self.DropoffTimeReady = DropoffTimeReady
    def get_POM(self): return self.POM
    def set_POM(self, POM): self.POM = POM
    def hasContent_(self):
        if (
            self.AdditionalComments is not None or
            self.Requester is not None or
            self.PickupDate is not None or
            self.EarliestTimeReady is not None or
            self.LatestTimeReady is not None or
            self.PickupTimeReady is not None or
            self.DropoffTimeReady is not None or
            self.POM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PickupRequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PickupRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PickupRequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PickupRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AdditionalComments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AdditionalComments>%s</fsp:AdditionalComments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalComments), input_name='AdditionalComments')), eol_))
        if self.Requester is not None:
            self.Requester.export(outfile, level, namespace_, name_='Requester', pretty_print=pretty_print)
        if self.PickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PickupDate>%s</fsp:PickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupDate), input_name='PickupDate')), eol_))
        if self.EarliestTimeReady is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EarliestTimeReady>%s</fsp:EarliestTimeReady>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EarliestTimeReady), input_name='EarliestTimeReady')), eol_))
        if self.LatestTimeReady is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LatestTimeReady>%s</fsp:LatestTimeReady>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LatestTimeReady), input_name='LatestTimeReady')), eol_))
        if self.PickupTimeReady is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PickupTimeReady>%s</fsp:PickupTimeReady>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupTimeReady), input_name='PickupTimeReady')), eol_))
        if self.DropoffTimeReady is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DropoffTimeReady>%s</fsp:DropoffTimeReady>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropoffTimeReady), input_name='DropoffTimeReady')), eol_))
        if self.POM is not None:
            self.POM.export(outfile, level, namespace_, name_='POM', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AdditionalComments':
            AdditionalComments_ = child_.text
            AdditionalComments_ = self.gds_validate_string(AdditionalComments_, node, 'AdditionalComments')
            self.AdditionalComments = AdditionalComments_
        elif nodeName_ == 'Requester':
            obj_ = RequesterType.factory()
            obj_.build(child_)
            self.Requester = obj_
            obj_.original_tagname_ = 'Requester'
        elif nodeName_ == 'PickupDate':
            PickupDate_ = child_.text
            PickupDate_ = self.gds_validate_string(PickupDate_, node, 'PickupDate')
            self.PickupDate = PickupDate_
        elif nodeName_ == 'EarliestTimeReady':
            EarliestTimeReady_ = child_.text
            EarliestTimeReady_ = self.gds_validate_string(EarliestTimeReady_, node, 'EarliestTimeReady')
            self.EarliestTimeReady = EarliestTimeReady_
        elif nodeName_ == 'LatestTimeReady':
            LatestTimeReady_ = child_.text
            LatestTimeReady_ = self.gds_validate_string(LatestTimeReady_, node, 'LatestTimeReady')
            self.LatestTimeReady = LatestTimeReady_
        elif nodeName_ == 'PickupTimeReady':
            PickupTimeReady_ = child_.text
            PickupTimeReady_ = self.gds_validate_string(PickupTimeReady_, node, 'PickupTimeReady')
            self.PickupTimeReady = PickupTimeReady_
        elif nodeName_ == 'DropoffTimeReady':
            DropoffTimeReady_ = child_.text
            DropoffTimeReady_ = self.gds_validate_string(DropoffTimeReady_, node, 'DropoffTimeReady')
            self.DropoffTimeReady = DropoffTimeReady_
        elif nodeName_ == 'POM':
            obj_ = POMType.factory()
            obj_.build(child_)
            self.POM = obj_
            obj_.original_tagname_ = 'POM'
# end class PickupRequestType


class POMType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, POMNumber=None, POMNumberType=None, PickupNotifications=None):
        self.original_tagname_ = None
        self.POMNumber = POMNumber
        self.POMNumberType = POMNumberType
        self.PickupNotifications = PickupNotifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POMType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POMType.subclass:
            return POMType.subclass(*args_, **kwargs_)
        else:
            return POMType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_POMNumber(self): return self.POMNumber
    def set_POMNumber(self, POMNumber): self.POMNumber = POMNumber
    def get_POMNumberType(self): return self.POMNumberType
    def set_POMNumberType(self, POMNumberType): self.POMNumberType = POMNumberType
    def get_PickupNotifications(self): return self.PickupNotifications
    def set_PickupNotifications(self, PickupNotifications): self.PickupNotifications = PickupNotifications
    def hasContent_(self):
        if (
            self.POMNumber is not None or
            self.POMNumberType is not None or
            self.PickupNotifications is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='POMType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POMType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='POMType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='POMType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='POMType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='POMType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.POMNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:POMNumber>%s</fsp:POMNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POMNumber), input_name='POMNumber')), eol_))
        if self.POMNumberType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:POMNumberType>%s</fsp:POMNumberType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POMNumberType), input_name='POMNumberType')), eol_))
        if self.PickupNotifications is not None:
            self.PickupNotifications.export(outfile, level, namespace_, name_='PickupNotifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'POMNumber':
            POMNumber_ = child_.text
            POMNumber_ = self.gds_validate_string(POMNumber_, node, 'POMNumber')
            self.POMNumber = POMNumber_
        elif nodeName_ == 'POMNumberType':
            POMNumberType_ = child_.text
            POMNumberType_ = self.gds_validate_string(POMNumberType_, node, 'POMNumberType')
            self.POMNumberType = POMNumberType_
        elif nodeName_ == 'PickupNotifications':
            obj_ = PickupNotificationsType.factory()
            obj_.build(child_)
            self.PickupNotifications = obj_
            obj_.original_tagname_ = 'PickupNotifications'
# end class POMType


class PickupNotificationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, EMailNotification=None, FailedEMail=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        if EMailNotification is None:
            self.EMailNotification = []
        else:
            self.EMailNotification = EMailNotification
        self.FailedEMail = FailedEMail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupNotificationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupNotificationsType.subclass:
            return PickupNotificationsType.subclass(*args_, **kwargs_)
        else:
            return PickupNotificationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_EMailNotification(self): return self.EMailNotification
    def set_EMailNotification(self, EMailNotification): self.EMailNotification = EMailNotification
    def add_EMailNotification(self, value): self.EMailNotification.append(value)
    def insert_EMailNotification_at(self, index, value): self.EMailNotification.insert(index, value)
    def replace_EMailNotification_at(self, index, value): self.EMailNotification[index] = value
    def get_FailedEMail(self): return self.FailedEMail
    def set_FailedEMail(self, FailedEMail): self.FailedEMail = FailedEMail
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.EMailNotification or
            self.FailedEMail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PickupNotificationsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupNotificationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupNotificationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PickupNotificationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PickupNotificationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PickupNotificationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CompanyName>%s</fsp:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        for EMailNotification_ in self.EMailNotification:
            EMailNotification_.export(outfile, level, namespace_, name_='EMailNotification', pretty_print=pretty_print)
        if self.FailedEMail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FailedEMail>%s</fsp:FailedEMail>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FailedEMail), input_name='FailedEMail')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'EMailNotification':
            obj_ = EMailNotificationType.factory()
            obj_.build(child_)
            self.EMailNotification.append(obj_)
            obj_.original_tagname_ = 'EMailNotification'
        elif nodeName_ == 'FailedEMail':
            FailedEMail_ = child_.text
            FailedEMail_ = self.gds_validate_string(FailedEMail_, node, 'FailedEMail')
            self.FailedEMail = FailedEMail_
# end class PickupNotificationsType


class EMailNotificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, EventType=None):
        self.original_tagname_ = None
        self.EMailAddress = EMailAddress
        if EventType is None:
            self.EventType = []
        else:
            self.EventType = EventType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailNotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailNotificationType.subclass:
            return EMailNotificationType.subclass(*args_, **kwargs_)
        else:
            return EMailNotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_EventType(self): return self.EventType
    def set_EventType(self, EventType): self.EventType = EventType
    def add_EventType(self, value): self.EventType.append(value)
    def insert_EventType_at(self, index, value): self.EventType.insert(index, value)
    def replace_EventType_at(self, index, value): self.EventType[index] = value
    def hasContent_(self):
        if (
            self.EMailAddress is not None or
            self.EventType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='EMailNotificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailNotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailNotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='EMailNotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='EMailNotificationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='EMailNotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        for EventType_ in self.EventType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EventType>%s</fsp:EventType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EventType_), input_name='EventType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'EventType':
            EventType_ = child_.text
            EventType_ = self.gds_validate_string(EventType_, node, 'EventType')
            self.EventType.append(EventType_)
# end class EMailNotificationType


class SMSType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TelephoneNumber=None):
        self.original_tagname_ = None
        self.TelephoneNumber = TelephoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SMSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SMSType.subclass:
            return SMSType.subclass(*args_, **kwargs_)
        else:
            return SMSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TelephoneNumber(self): return self.TelephoneNumber
    def set_TelephoneNumber(self, TelephoneNumber): self.TelephoneNumber = TelephoneNumber
    def hasContent_(self):
        if (
            self.TelephoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='SMSType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SMSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SMSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='SMSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='SMSType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='SMSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TelephoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TelephoneNumber>%s</fsp:TelephoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TelephoneNumber), input_name='TelephoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TelephoneNumber':
            TelephoneNumber_ = child_.text
            TelephoneNumber_ = self.gds_validate_string(TelephoneNumber_, node, 'TelephoneNumber')
            self.TelephoneNumber = TelephoneNumber_
# end class SMSType


class RequesterType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ThirdPartyIndicator=None, AttentionName=None, EMailAddress=None, Name=None, Phone=None):
        self.original_tagname_ = None
        self.ThirdPartyIndicator = ThirdPartyIndicator
        self.AttentionName = AttentionName
        self.EMailAddress = EMailAddress
        self.Name = Name
        self.Phone = Phone
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequesterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequesterType.subclass:
            return RequesterType.subclass(*args_, **kwargs_)
        else:
            return RequesterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ThirdPartyIndicator(self): return self.ThirdPartyIndicator
    def set_ThirdPartyIndicator(self, ThirdPartyIndicator): self.ThirdPartyIndicator = ThirdPartyIndicator
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def hasContent_(self):
        if (
            self.ThirdPartyIndicator is not None or
            self.AttentionName is not None or
            self.EMailAddress is not None or
            self.Name is not None or
            self.Phone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='RequesterType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequesterType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequesterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='RequesterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='RequesterType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='RequesterType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ThirdPartyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ThirdPartyIndicator>%s</fsp:ThirdPartyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ThirdPartyIndicator), input_name='ThirdPartyIndicator')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AttentionName>%s</fsp:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ThirdPartyIndicator':
            ThirdPartyIndicator_ = child_.text
            ThirdPartyIndicator_ = self.gds_validate_string(ThirdPartyIndicator_, node, 'ThirdPartyIndicator')
            self.ThirdPartyIndicator = ThirdPartyIndicator_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
# end class RequesterType


class DocumentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FormGroupId=None, FormGroupIdName=None, Image=None, PackingList=None, InternationalForms=None):
        self.original_tagname_ = None
        self.FormGroupId = FormGroupId
        self.FormGroupIdName = FormGroupIdName
        if Image is None:
            self.Image = []
        else:
            self.Image = Image
        self.PackingList = PackingList
        self.InternationalForms = InternationalForms
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentsType.subclass:
            return DocumentsType.subclass(*args_, **kwargs_)
        else:
            return DocumentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FormGroupId(self): return self.FormGroupId
    def set_FormGroupId(self, FormGroupId): self.FormGroupId = FormGroupId
    def get_FormGroupIdName(self): return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName): self.FormGroupIdName = FormGroupIdName
    def get_Image(self): return self.Image
    def set_Image(self, Image): self.Image = Image
    def add_Image(self, value): self.Image.append(value)
    def insert_Image_at(self, index, value): self.Image.insert(index, value)
    def replace_Image_at(self, index, value): self.Image[index] = value
    def get_PackingList(self): return self.PackingList
    def set_PackingList(self, PackingList): self.PackingList = PackingList
    def get_InternationalForms(self): return self.InternationalForms
    def set_InternationalForms(self, InternationalForms): self.InternationalForms = InternationalForms
    def hasContent_(self):
        if (
            self.FormGroupId is not None or
            self.FormGroupIdName is not None or
            self.Image or
            self.PackingList is not None or
            self.InternationalForms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DocumentsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DocumentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DocumentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DocumentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DocumentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FormGroupId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FormGroupId>%s</fsp:FormGroupId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupId), input_name='FormGroupId')), eol_))
        if self.FormGroupIdName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FormGroupIdName>%s</fsp:FormGroupIdName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), eol_))
        for Image_ in self.Image:
            Image_.export(outfile, level, namespace_, name_='Image', pretty_print=pretty_print)
        if self.PackingList is not None:
            self.PackingList.export(outfile, level, namespace_, name_='PackingList', pretty_print=pretty_print)
        if self.InternationalForms is not None:
            self.InternationalForms.export(outfile, level, namespace_, name_='InternationalForms', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FormGroupId':
            FormGroupId_ = child_.text
            FormGroupId_ = self.gds_validate_string(FormGroupId_, node, 'FormGroupId')
            self.FormGroupId = FormGroupId_
        elif nodeName_ == 'FormGroupIdName':
            FormGroupIdName_ = child_.text
            FormGroupIdName_ = self.gds_validate_string(FormGroupIdName_, node, 'FormGroupIdName')
            self.FormGroupIdName = FormGroupIdName_
        elif nodeName_ == 'Image':
            obj_ = ImageType.factory()
            obj_.build(child_)
            self.Image.append(obj_)
            obj_.original_tagname_ = 'Image'
        elif nodeName_ == 'PackingList':
            obj_ = PackingListType.factory()
            obj_.build(child_)
            self.PackingList = obj_
            obj_.original_tagname_ = 'PackingList'
        elif nodeName_ == 'InternationalForms':
            obj_ = InternationalFormType.factory()
            obj_.build(child_)
            self.InternationalForms = obj_
            obj_.original_tagname_ = 'InternationalForms'
# end class DocumentsType


class ImageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, LabelsPerPage=None, Format=None, PrintFormat=None, PrintSize=None):
        self.original_tagname_ = None
        self.Type = Type
        self.LabelsPerPage = LabelsPerPage
        self.Format = Format
        self.PrintFormat = PrintFormat
        self.PrintSize = PrintSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageType.subclass:
            return ImageType.subclass(*args_, **kwargs_)
        else:
            return ImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_LabelsPerPage(self): return self.LabelsPerPage
    def set_LabelsPerPage(self, LabelsPerPage): self.LabelsPerPage = LabelsPerPage
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def get_PrintFormat(self): return self.PrintFormat
    def set_PrintFormat(self, PrintFormat): self.PrintFormat = PrintFormat
    def get_PrintSize(self): return self.PrintSize
    def set_PrintSize(self, PrintSize): self.PrintSize = PrintSize
    def hasContent_(self):
        if (
            self.Type is not None or
            self.LabelsPerPage is not None or
            self.Format is not None or
            self.PrintFormat is not None or
            self.PrintSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ImageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ImageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.LabelsPerPage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LabelsPerPage>%s</fsp:LabelsPerPage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelsPerPage), input_name='LabelsPerPage')), eol_))
        if self.Format is not None:
            self.Format.export(outfile, level, namespace_, name_='Format', pretty_print=pretty_print)
        if self.PrintFormat is not None:
            self.PrintFormat.export(outfile, level, namespace_, name_='PrintFormat', pretty_print=pretty_print)
        if self.PrintSize is not None:
            self.PrintSize.export(outfile, level, namespace_, name_='PrintSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'LabelsPerPage':
            LabelsPerPage_ = child_.text
            LabelsPerPage_ = self.gds_validate_string(LabelsPerPage_, node, 'LabelsPerPage')
            self.LabelsPerPage = LabelsPerPage_
        elif nodeName_ == 'Format':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'PrintFormat':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.PrintFormat = obj_
            obj_.original_tagname_ = 'PrintFormat'
        elif nodeName_ == 'PrintSize':
            obj_ = PrintSizeType.factory()
            obj_.build(child_)
            self.PrintSize = obj_
            obj_.original_tagname_ = 'PrintSize'
# end class ImageType


class PrintSizeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None):
        self.original_tagname_ = None
        self.Length = Length
        self.Width = Width
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrintSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrintSizeType.subclass:
            return PrintSizeType.subclass(*args_, **kwargs_)
        else:
            return PrintSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PrintSizeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrintSizeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrintSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PrintSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PrintSizeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PrintSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Length>%s</fsp:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Width>%s</fsp:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
# end class PrintSizeType


class PackingListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipFrom=None, ShipTo=None, Reference=None, HandlingUnit=None):
        self.original_tagname_ = None
        self.ShipFrom = ShipFrom
        self.ShipTo = ShipTo
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.HandlingUnit = HandlingUnit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListType.subclass:
            return PackingListType.subclass(*args_, **kwargs_)
        else:
            return PackingListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipFrom(self): return self.ShipFrom
    def set_ShipFrom(self, ShipFrom): self.ShipFrom = ShipFrom
    def get_ShipTo(self): return self.ShipTo
    def set_ShipTo(self, ShipTo): self.ShipTo = ShipTo
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_HandlingUnit(self): return self.HandlingUnit
    def set_HandlingUnit(self, HandlingUnit): self.HandlingUnit = HandlingUnit
    def hasContent_(self):
        if (
            self.ShipFrom is not None or
            self.ShipTo is not None or
            self.Reference or
            self.HandlingUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PackingListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PackingListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PackingListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PackingListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipFrom is not None:
            self.ShipFrom.export(outfile, level, namespace_, name_='ShipFrom', pretty_print=pretty_print)
        if self.ShipTo is not None:
            self.ShipTo.export(outfile, level, namespace_, name_='ShipTo', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.HandlingUnit is not None:
            self.HandlingUnit.export(outfile, level, namespace_, name_='HandlingUnit', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipFrom':
            obj_ = PackingListContactType.factory()
            obj_.build(child_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'ShipTo':
            obj_ = PackingListContactType.factory()
            obj_.build(child_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'Reference':
            obj_ = PackingListReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'HandlingUnit':
            obj_ = PackingListHandlingUnitType.factory()
            obj_.build(child_)
            self.HandlingUnit = obj_
            obj_.original_tagname_ = 'HandlingUnit'
# end class PackingListType


class PackingListContactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, Address=None, PhoneNumber=None, EMailAddress=None, PhoneExtension=None):
        self.original_tagname_ = None
        self.Name = Name
        self.AttentionName = AttentionName
        self.Address = Address
        self.PhoneNumber = PhoneNumber
        self.EMailAddress = EMailAddress
        self.PhoneExtension = PhoneExtension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListContactType.subclass:
            return PackingListContactType.subclass(*args_, **kwargs_)
        else:
            return PackingListContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.Address is not None or
            self.PhoneNumber is not None or
            self.EMailAddress is not None or
            self.PhoneExtension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PackingListContactType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PackingListContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PackingListContactType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PackingListContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Name>%s</fsp:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AttentionName>%s</fsp:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PhoneNumber>%s</fsp:PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:EMailAddress>%s</fsp:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PhoneExtension>%s</fsp:PhoneExtension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
# end class PackingListContactType


class PackingListReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Label=None, Value=None):
        self.original_tagname_ = None
        self.Label = Label
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListReferenceType.subclass:
            return PackingListReferenceType.subclass(*args_, **kwargs_)
        else:
            return PackingListReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Label(self): return self.Label
    def set_Label(self, Label): self.Label = Label
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Label is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PackingListReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PackingListReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PackingListReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PackingListReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Label is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Label>%s</fsp:Label>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Label), input_name='Label')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Value>%s</fsp:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Label':
            Label_ = child_.text
            Label_ = self.gds_validate_string(Label_, node, 'Label')
            self.Label = Label_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class PackingListReferenceType


class PackingListHandlingUnitType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Commodity=None, SpecialInstructions=None, TotalNumberOfPieces=None, TotalWeight=None, UnitOfMeasurement=None, CurrencyCode=None):
        self.original_tagname_ = None
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        self.SpecialInstructions = SpecialInstructions
        self.TotalNumberOfPieces = TotalNumberOfPieces
        self.TotalWeight = TotalWeight
        self.UnitOfMeasurement = UnitOfMeasurement
        self.CurrencyCode = CurrencyCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListHandlingUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListHandlingUnitType.subclass:
            return PackingListHandlingUnitType.subclass(*args_, **kwargs_)
        else:
            return PackingListHandlingUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def add_Commodity(self, value): self.Commodity.append(value)
    def insert_Commodity_at(self, index, value): self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value): self.Commodity[index] = value
    def get_SpecialInstructions(self): return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions): self.SpecialInstructions = SpecialInstructions
    def get_TotalNumberOfPieces(self): return self.TotalNumberOfPieces
    def set_TotalNumberOfPieces(self, TotalNumberOfPieces): self.TotalNumberOfPieces = TotalNumberOfPieces
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def hasContent_(self):
        if (
            self.Commodity or
            self.SpecialInstructions is not None or
            self.TotalNumberOfPieces is not None or
            self.TotalWeight is not None or
            self.UnitOfMeasurement is not None or
            self.CurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PackingListHandlingUnitType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListHandlingUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListHandlingUnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PackingListHandlingUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PackingListHandlingUnitType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PackingListHandlingUnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Commodity_ in self.Commodity:
            Commodity_.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.SpecialInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:SpecialInstructions>%s</fsp:SpecialInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), eol_))
        if self.TotalNumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TotalNumberOfPieces>%s</fsp:TotalNumberOfPieces>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalNumberOfPieces), input_name='TotalNumberOfPieces')), eol_))
        if self.TotalWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TotalWeight>%s</fsp:TotalWeight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalWeight), input_name='TotalWeight')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Commodity':
            obj_ = PackingListCommodityType.factory()
            obj_.build(child_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'SpecialInstructions':
            SpecialInstructions_ = child_.text
            SpecialInstructions_ = self.gds_validate_string(SpecialInstructions_, node, 'SpecialInstructions')
            self.SpecialInstructions = SpecialInstructions_
        elif nodeName_ == 'TotalNumberOfPieces':
            TotalNumberOfPieces_ = child_.text
            TotalNumberOfPieces_ = self.gds_validate_string(TotalNumberOfPieces_, node, 'TotalNumberOfPieces')
            self.TotalNumberOfPieces = TotalNumberOfPieces_
        elif nodeName_ == 'TotalWeight':
            TotalWeight_ = child_.text
            TotalWeight_ = self.gds_validate_string(TotalWeight_, node, 'TotalWeight')
            self.TotalWeight = TotalWeight_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
# end class PackingListHandlingUnitType


class PackingListCommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfPieces=None, PackagingType=None, DangerousGoodsIndicator=None, Description=None, NMFCCommodityCode=None, FreightClass=None, Dimensions=None, Weight=None, CommodityValue=None):
        self.original_tagname_ = None
        self.NumberOfPieces = NumberOfPieces
        self.PackagingType = PackagingType
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
        self.Description = Description
        self.NMFCCommodityCode = NMFCCommodityCode
        self.FreightClass = FreightClass
        self.Dimensions = Dimensions
        self.Weight = Weight
        self.CommodityValue = CommodityValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListCommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListCommodityType.subclass:
            return PackingListCommodityType.subclass(*args_, **kwargs_)
        else:
            return PackingListCommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfPieces(self): return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces): self.NumberOfPieces = NumberOfPieces
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_DangerousGoodsIndicator(self): return self.DangerousGoodsIndicator
    def set_DangerousGoodsIndicator(self, DangerousGoodsIndicator): self.DangerousGoodsIndicator = DangerousGoodsIndicator
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_NMFCCommodityCode(self): return self.NMFCCommodityCode
    def set_NMFCCommodityCode(self, NMFCCommodityCode): self.NMFCCommodityCode = NMFCCommodityCode
    def get_FreightClass(self): return self.FreightClass
    def set_FreightClass(self, FreightClass): self.FreightClass = FreightClass
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_CommodityValue(self): return self.CommodityValue
    def set_CommodityValue(self, CommodityValue): self.CommodityValue = CommodityValue
    def hasContent_(self):
        if (
            self.NumberOfPieces is not None or
            self.PackagingType is not None or
            self.DangerousGoodsIndicator is not None or
            self.Description is not None or
            self.NMFCCommodityCode is not None or
            self.FreightClass is not None or
            self.Dimensions is not None or
            self.Weight is not None or
            self.CommodityValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PackingListCommodityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListCommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListCommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PackingListCommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PackingListCommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PackingListCommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:NumberOfPieces>%s</fsp:NumberOfPieces>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPieces), input_name='NumberOfPieces')), eol_))
        if self.PackagingType is not None:
            self.PackagingType.export(outfile, level, namespace_, name_='PackagingType', pretty_print=pretty_print)
        if self.DangerousGoodsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DangerousGoodsIndicator>%s</fsp:DangerousGoodsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DangerousGoodsIndicator), input_name='DangerousGoodsIndicator')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.NMFCCommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:NMFCCommodityCode>%s</fsp:NMFCCommodityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NMFCCommodityCode), input_name='NMFCCommodityCode')), eol_))
        if self.FreightClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:FreightClass>%s</fsp:FreightClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), eol_))
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Weight>%s</fsp:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
        if self.CommodityValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CommodityValue>%s</fsp:CommodityValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityValue), input_name='CommodityValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfPieces':
            NumberOfPieces_ = child_.text
            NumberOfPieces_ = self.gds_validate_string(NumberOfPieces_, node, 'NumberOfPieces')
            self.NumberOfPieces = NumberOfPieces_
        elif nodeName_ == 'PackagingType':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'DangerousGoodsIndicator':
            DangerousGoodsIndicator_ = child_.text
            DangerousGoodsIndicator_ = self.gds_validate_string(DangerousGoodsIndicator_, node, 'DangerousGoodsIndicator')
            self.DangerousGoodsIndicator = DangerousGoodsIndicator_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'NMFCCommodityCode':
            NMFCCommodityCode_ = child_.text
            NMFCCommodityCode_ = self.gds_validate_string(NMFCCommodityCode_, node, 'NMFCCommodityCode')
            self.NMFCCommodityCode = NMFCCommodityCode_
        elif nodeName_ == 'FreightClass':
            FreightClass_ = child_.text
            FreightClass_ = self.gds_validate_string(FreightClass_, node, 'FreightClass')
            self.FreightClass = FreightClass_
        elif nodeName_ == 'Dimensions':
            obj_ = PackingListDimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
        elif nodeName_ == 'CommodityValue':
            CommodityValue_ = child_.text
            CommodityValue_ = self.gds_validate_string(CommodityValue_, node, 'CommodityValue')
            self.CommodityValue = CommodityValue_
# end class PackingListCommodityType


class PackingListDimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListDimensionsType.subclass:
            return PackingListDimensionsType.subclass(*args_, **kwargs_)
        else:
            return PackingListDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PackingListDimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PackingListDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PackingListDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PackingListDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Length>%s</fsp:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Width>%s</fsp:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Height>%s</fsp:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class PackingListDimensionsType


class ShipmentResultsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AirFreightPickupRequest=None, ShipperNumber=None, CreationDate=None, CustomerServiceInformation=None, OriginServiceCenterCode=None, DestinationServiceCenterCode=None, LabelServiceCode=None, AirFreightModularID=None, PickupRequestConfirmationNumber=None, DeliveryDate=None, ShipmentNumber=None, BOLID=None, GuaranteedIndicator=None, MinimumChargeAppliedIndicator=None, Rate=None, FreightDensityRate=None, TotalShipmentCharge=None, MinimumBillableWeightAppliedIndicator=None, BillableShipmentWeight=None, RatingSchedule=None, DimensionalWeight=None, Service=None, Documents=None, HoldAtAirportPickupDate=None, NextAvailablePickupDate=None, TimeInTransit=None):
        self.original_tagname_ = None
        self.AirFreightPickupRequest = AirFreightPickupRequest
        self.ShipperNumber = ShipperNumber
        self.CreationDate = CreationDate
        self.CustomerServiceInformation = CustomerServiceInformation
        self.OriginServiceCenterCode = OriginServiceCenterCode
        self.DestinationServiceCenterCode = DestinationServiceCenterCode
        self.LabelServiceCode = LabelServiceCode
        self.AirFreightModularID = AirFreightModularID
        self.PickupRequestConfirmationNumber = PickupRequestConfirmationNumber
        self.DeliveryDate = DeliveryDate
        self.ShipmentNumber = ShipmentNumber
        self.BOLID = BOLID
        self.GuaranteedIndicator = GuaranteedIndicator
        self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator
        if Rate is None:
            self.Rate = []
        else:
            self.Rate = Rate
        self.FreightDensityRate = FreightDensityRate
        self.TotalShipmentCharge = TotalShipmentCharge
        self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator
        self.BillableShipmentWeight = BillableShipmentWeight
        self.RatingSchedule = RatingSchedule
        self.DimensionalWeight = DimensionalWeight
        self.Service = Service
        self.Documents = Documents
        self.HoldAtAirportPickupDate = HoldAtAirportPickupDate
        self.NextAvailablePickupDate = NextAvailablePickupDate
        self.TimeInTransit = TimeInTransit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentResultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentResultsType.subclass:
            return ShipmentResultsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentResultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AirFreightPickupRequest(self): return self.AirFreightPickupRequest
    def set_AirFreightPickupRequest(self, AirFreightPickupRequest): self.AirFreightPickupRequest = AirFreightPickupRequest
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_CreationDate(self): return self.CreationDate
    def set_CreationDate(self, CreationDate): self.CreationDate = CreationDate
    def get_CustomerServiceInformation(self): return self.CustomerServiceInformation
    def set_CustomerServiceInformation(self, CustomerServiceInformation): self.CustomerServiceInformation = CustomerServiceInformation
    def get_OriginServiceCenterCode(self): return self.OriginServiceCenterCode
    def set_OriginServiceCenterCode(self, OriginServiceCenterCode): self.OriginServiceCenterCode = OriginServiceCenterCode
    def get_DestinationServiceCenterCode(self): return self.DestinationServiceCenterCode
    def set_DestinationServiceCenterCode(self, DestinationServiceCenterCode): self.DestinationServiceCenterCode = DestinationServiceCenterCode
    def get_LabelServiceCode(self): return self.LabelServiceCode
    def set_LabelServiceCode(self, LabelServiceCode): self.LabelServiceCode = LabelServiceCode
    def get_AirFreightModularID(self): return self.AirFreightModularID
    def set_AirFreightModularID(self, AirFreightModularID): self.AirFreightModularID = AirFreightModularID
    def get_PickupRequestConfirmationNumber(self): return self.PickupRequestConfirmationNumber
    def set_PickupRequestConfirmationNumber(self, PickupRequestConfirmationNumber): self.PickupRequestConfirmationNumber = PickupRequestConfirmationNumber
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_ShipmentNumber(self): return self.ShipmentNumber
    def set_ShipmentNumber(self, ShipmentNumber): self.ShipmentNumber = ShipmentNumber
    def get_BOLID(self): return self.BOLID
    def set_BOLID(self, BOLID): self.BOLID = BOLID
    def get_GuaranteedIndicator(self): return self.GuaranteedIndicator
    def set_GuaranteedIndicator(self, GuaranteedIndicator): self.GuaranteedIndicator = GuaranteedIndicator
    def get_MinimumChargeAppliedIndicator(self): return self.MinimumChargeAppliedIndicator
    def set_MinimumChargeAppliedIndicator(self, MinimumChargeAppliedIndicator): self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def add_Rate(self, value): self.Rate.append(value)
    def insert_Rate_at(self, index, value): self.Rate.insert(index, value)
    def replace_Rate_at(self, index, value): self.Rate[index] = value
    def get_FreightDensityRate(self): return self.FreightDensityRate
    def set_FreightDensityRate(self, FreightDensityRate): self.FreightDensityRate = FreightDensityRate
    def get_TotalShipmentCharge(self): return self.TotalShipmentCharge
    def set_TotalShipmentCharge(self, TotalShipmentCharge): self.TotalShipmentCharge = TotalShipmentCharge
    def get_MinimumBillableWeightAppliedIndicator(self): return self.MinimumBillableWeightAppliedIndicator
    def set_MinimumBillableWeightAppliedIndicator(self, MinimumBillableWeightAppliedIndicator): self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator
    def get_BillableShipmentWeight(self): return self.BillableShipmentWeight
    def set_BillableShipmentWeight(self, BillableShipmentWeight): self.BillableShipmentWeight = BillableShipmentWeight
    def get_RatingSchedule(self): return self.RatingSchedule
    def set_RatingSchedule(self, RatingSchedule): self.RatingSchedule = RatingSchedule
    def get_DimensionalWeight(self): return self.DimensionalWeight
    def set_DimensionalWeight(self, DimensionalWeight): self.DimensionalWeight = DimensionalWeight
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_Documents(self): return self.Documents
    def set_Documents(self, Documents): self.Documents = Documents
    def get_HoldAtAirportPickupDate(self): return self.HoldAtAirportPickupDate
    def set_HoldAtAirportPickupDate(self, HoldAtAirportPickupDate): self.HoldAtAirportPickupDate = HoldAtAirportPickupDate
    def get_NextAvailablePickupDate(self): return self.NextAvailablePickupDate
    def set_NextAvailablePickupDate(self, NextAvailablePickupDate): self.NextAvailablePickupDate = NextAvailablePickupDate
    def get_TimeInTransit(self): return self.TimeInTransit
    def set_TimeInTransit(self, TimeInTransit): self.TimeInTransit = TimeInTransit
    def hasContent_(self):
        if (
            self.AirFreightPickupRequest is not None or
            self.ShipperNumber is not None or
            self.CreationDate is not None or
            self.CustomerServiceInformation is not None or
            self.OriginServiceCenterCode is not None or
            self.DestinationServiceCenterCode is not None or
            self.LabelServiceCode is not None or
            self.AirFreightModularID is not None or
            self.PickupRequestConfirmationNumber is not None or
            self.DeliveryDate is not None or
            self.ShipmentNumber is not None or
            self.BOLID is not None or
            self.GuaranteedIndicator is not None or
            self.MinimumChargeAppliedIndicator is not None or
            self.Rate or
            self.FreightDensityRate is not None or
            self.TotalShipmentCharge is not None or
            self.MinimumBillableWeightAppliedIndicator is not None or
            self.BillableShipmentWeight is not None or
            self.RatingSchedule is not None or
            self.DimensionalWeight is not None or
            self.Service is not None or
            self.Documents is not None or
            self.HoldAtAirportPickupDate is not None or
            self.NextAvailablePickupDate is not None or
            self.TimeInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipmentResultsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentResultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentResultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipmentResultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipmentResultsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipmentResultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AirFreightPickupRequest is not None:
            self.AirFreightPickupRequest.export(outfile, level, namespace_, name_='AirFreightPickupRequest', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ShipperNumber>%s</fsp:ShipperNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), eol_))
        if self.CreationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CreationDate>%s</fsp:CreationDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CreationDate), input_name='CreationDate')), eol_))
        if self.CustomerServiceInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CustomerServiceInformation>%s</fsp:CustomerServiceInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerServiceInformation), input_name='CustomerServiceInformation')), eol_))
        if self.OriginServiceCenterCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:OriginServiceCenterCode>%s</fsp:OriginServiceCenterCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginServiceCenterCode), input_name='OriginServiceCenterCode')), eol_))
        if self.DestinationServiceCenterCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DestinationServiceCenterCode>%s</fsp:DestinationServiceCenterCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceCenterCode), input_name='DestinationServiceCenterCode')), eol_))
        if self.LabelServiceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:LabelServiceCode>%s</fsp:LabelServiceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelServiceCode), input_name='LabelServiceCode')), eol_))
        if self.AirFreightModularID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:AirFreightModularID>%s</fsp:AirFreightModularID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AirFreightModularID), input_name='AirFreightModularID')), eol_))
        if self.PickupRequestConfirmationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:PickupRequestConfirmationNumber>%s</fsp:PickupRequestConfirmationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PickupRequestConfirmationNumber), input_name='PickupRequestConfirmationNumber')), eol_))
        if self.DeliveryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DeliveryDate>%s</fsp:DeliveryDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDate), input_name='DeliveryDate')), eol_))
        if self.ShipmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:ShipmentNumber>%s</fsp:ShipmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentNumber), input_name='ShipmentNumber')), eol_))
        if self.BOLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:BOLID>%s</fsp:BOLID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BOLID), input_name='BOLID')), eol_))
        if self.GuaranteedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:GuaranteedIndicator>%s</fsp:GuaranteedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedIndicator), input_name='GuaranteedIndicator')), eol_))
        if self.MinimumChargeAppliedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MinimumChargeAppliedIndicator>%s</fsp:MinimumChargeAppliedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MinimumChargeAppliedIndicator), input_name='MinimumChargeAppliedIndicator')), eol_))
        for Rate_ in self.Rate:
            Rate_.export(outfile, level, namespace_, name_='Rate', pretty_print=pretty_print)
        if self.FreightDensityRate is not None:
            self.FreightDensityRate.export(outfile, level, namespace_, name_='FreightDensityRate', pretty_print=pretty_print)
        if self.TotalShipmentCharge is not None:
            self.TotalShipmentCharge.export(outfile, level, namespace_, name_='TotalShipmentCharge', pretty_print=pretty_print)
        if self.MinimumBillableWeightAppliedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MinimumBillableWeightAppliedIndicator>%s</fsp:MinimumBillableWeightAppliedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MinimumBillableWeightAppliedIndicator), input_name='MinimumBillableWeightAppliedIndicator')), eol_))
        if self.BillableShipmentWeight is not None:
            self.BillableShipmentWeight.export(outfile, level, namespace_, name_='BillableShipmentWeight', pretty_print=pretty_print)
        if self.RatingSchedule is not None:
            self.RatingSchedule.export(outfile, level, namespace_, name_='RatingSchedule', pretty_print=pretty_print)
        if self.DimensionalWeight is not None:
            self.DimensionalWeight.export(outfile, level, namespace_, name_='DimensionalWeight', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
        if self.Documents is not None:
            self.Documents.export(outfile, level, namespace_, name_='Documents', pretty_print=pretty_print)
        if self.HoldAtAirportPickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:HoldAtAirportPickupDate>%s</fsp:HoldAtAirportPickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldAtAirportPickupDate), input_name='HoldAtAirportPickupDate')), eol_))
        if self.NextAvailablePickupDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:NextAvailablePickupDate>%s</fsp:NextAvailablePickupDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NextAvailablePickupDate), input_name='NextAvailablePickupDate')), eol_))
        if self.TimeInTransit is not None:
            self.TimeInTransit.export(outfile, level, namespace_, name_='TimeInTransit', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AirFreightPickupRequest':
            obj_ = AirFreightStatusType.factory()
            obj_.build(child_)
            self.AirFreightPickupRequest = obj_
            obj_.original_tagname_ = 'AirFreightPickupRequest'
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'CreationDate':
            CreationDate_ = child_.text
            CreationDate_ = self.gds_validate_string(CreationDate_, node, 'CreationDate')
            self.CreationDate = CreationDate_
        elif nodeName_ == 'CustomerServiceInformation':
            CustomerServiceInformation_ = child_.text
            CustomerServiceInformation_ = self.gds_validate_string(CustomerServiceInformation_, node, 'CustomerServiceInformation')
            self.CustomerServiceInformation = CustomerServiceInformation_
        elif nodeName_ == 'OriginServiceCenterCode':
            OriginServiceCenterCode_ = child_.text
            OriginServiceCenterCode_ = self.gds_validate_string(OriginServiceCenterCode_, node, 'OriginServiceCenterCode')
            self.OriginServiceCenterCode = OriginServiceCenterCode_
        elif nodeName_ == 'DestinationServiceCenterCode':
            DestinationServiceCenterCode_ = child_.text
            DestinationServiceCenterCode_ = self.gds_validate_string(DestinationServiceCenterCode_, node, 'DestinationServiceCenterCode')
            self.DestinationServiceCenterCode = DestinationServiceCenterCode_
        elif nodeName_ == 'LabelServiceCode':
            LabelServiceCode_ = child_.text
            LabelServiceCode_ = self.gds_validate_string(LabelServiceCode_, node, 'LabelServiceCode')
            self.LabelServiceCode = LabelServiceCode_
        elif nodeName_ == 'AirFreightModularID':
            AirFreightModularID_ = child_.text
            AirFreightModularID_ = self.gds_validate_string(AirFreightModularID_, node, 'AirFreightModularID')
            self.AirFreightModularID = AirFreightModularID_
        elif nodeName_ == 'PickupRequestConfirmationNumber':
            PickupRequestConfirmationNumber_ = child_.text
            PickupRequestConfirmationNumber_ = self.gds_validate_string(PickupRequestConfirmationNumber_, node, 'PickupRequestConfirmationNumber')
            self.PickupRequestConfirmationNumber = PickupRequestConfirmationNumber_
        elif nodeName_ == 'DeliveryDate':
            DeliveryDate_ = child_.text
            DeliveryDate_ = self.gds_validate_string(DeliveryDate_, node, 'DeliveryDate')
            self.DeliveryDate = DeliveryDate_
        elif nodeName_ == 'ShipmentNumber':
            ShipmentNumber_ = child_.text
            ShipmentNumber_ = self.gds_validate_string(ShipmentNumber_, node, 'ShipmentNumber')
            self.ShipmentNumber = ShipmentNumber_
        elif nodeName_ == 'BOLID':
            BOLID_ = child_.text
            BOLID_ = self.gds_validate_string(BOLID_, node, 'BOLID')
            self.BOLID = BOLID_
        elif nodeName_ == 'GuaranteedIndicator':
            GuaranteedIndicator_ = child_.text
            GuaranteedIndicator_ = self.gds_validate_string(GuaranteedIndicator_, node, 'GuaranteedIndicator')
            self.GuaranteedIndicator = GuaranteedIndicator_
        elif nodeName_ == 'MinimumChargeAppliedIndicator':
            MinimumChargeAppliedIndicator_ = child_.text
            MinimumChargeAppliedIndicator_ = self.gds_validate_string(MinimumChargeAppliedIndicator_, node, 'MinimumChargeAppliedIndicator')
            self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator_
        elif nodeName_ == 'Rate':
            obj_ = RateType.factory()
            obj_.build(child_)
            self.Rate.append(obj_)
            obj_.original_tagname_ = 'Rate'
        elif nodeName_ == 'FreightDensityRate':
            obj_ = FreightDensityRateType.factory()
            obj_.build(child_)
            self.FreightDensityRate = obj_
            obj_.original_tagname_ = 'FreightDensityRate'
        elif nodeName_ == 'TotalShipmentCharge':
            obj_ = TotalShipmentChargeType.factory()
            obj_.build(child_)
            self.TotalShipmentCharge = obj_
            obj_.original_tagname_ = 'TotalShipmentCharge'
        elif nodeName_ == 'MinimumBillableWeightAppliedIndicator':
            MinimumBillableWeightAppliedIndicator_ = child_.text
            MinimumBillableWeightAppliedIndicator_ = self.gds_validate_string(MinimumBillableWeightAppliedIndicator_, node, 'MinimumBillableWeightAppliedIndicator')
            self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator_
        elif nodeName_ == 'BillableShipmentWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.BillableShipmentWeight = obj_
            obj_.original_tagname_ = 'BillableShipmentWeight'
        elif nodeName_ == 'RatingSchedule':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.RatingSchedule = obj_
            obj_.original_tagname_ = 'RatingSchedule'
        elif nodeName_ == 'DimensionalWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.DimensionalWeight = obj_
            obj_.original_tagname_ = 'DimensionalWeight'
        elif nodeName_ == 'Service':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'Documents':
            obj_ = DocumentType.factory()
            obj_.build(child_)
            self.Documents = obj_
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'HoldAtAirportPickupDate':
            HoldAtAirportPickupDate_ = child_.text
            HoldAtAirportPickupDate_ = self.gds_validate_string(HoldAtAirportPickupDate_, node, 'HoldAtAirportPickupDate')
            self.HoldAtAirportPickupDate = HoldAtAirportPickupDate_
        elif nodeName_ == 'NextAvailablePickupDate':
            NextAvailablePickupDate_ = child_.text
            NextAvailablePickupDate_ = self.gds_validate_string(NextAvailablePickupDate_, node, 'NextAvailablePickupDate')
            self.NextAvailablePickupDate = NextAvailablePickupDate_
        elif nodeName_ == 'TimeInTransit':
            obj_ = TimeInTransitResponseType.factory()
            obj_.build(child_)
            self.TimeInTransit = obj_
            obj_.original_tagname_ = 'TimeInTransit'
# end class ShipmentResultsType


class RateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Factor=None):
        self.original_tagname_ = None
        self.Type = Type
        self.Factor = Factor
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateType.subclass:
            return RateType.subclass(*args_, **kwargs_)
        else:
            return RateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Factor(self): return self.Factor
    def set_Factor(self, Factor): self.Factor = Factor
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Factor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='RateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='RateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='RateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='RateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Factor is not None:
            self.Factor.export(outfile, level, namespace_, name_='Factor', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Factor':
            obj_ = FactorType.factory()
            obj_.build(child_)
            self.Factor = obj_
            obj_.original_tagname_ = 'Factor'
# end class RateType


class AirFreightStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Status=None, PreAuthorizationReason=None):
        self.original_tagname_ = None
        self.Status = Status
        if PreAuthorizationReason is None:
            self.PreAuthorizationReason = []
        else:
            self.PreAuthorizationReason = PreAuthorizationReason
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AirFreightStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AirFreightStatusType.subclass:
            return AirFreightStatusType.subclass(*args_, **kwargs_)
        else:
            return AirFreightStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_PreAuthorizationReason(self): return self.PreAuthorizationReason
    def set_PreAuthorizationReason(self, PreAuthorizationReason): self.PreAuthorizationReason = PreAuthorizationReason
    def add_PreAuthorizationReason(self, value): self.PreAuthorizationReason.append(value)
    def insert_PreAuthorizationReason_at(self, index, value): self.PreAuthorizationReason.insert(index, value)
    def replace_PreAuthorizationReason_at(self, index, value): self.PreAuthorizationReason[index] = value
    def hasContent_(self):
        if (
            self.Status is not None or
            self.PreAuthorizationReason
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='AirFreightStatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AirFreightStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AirFreightStatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='AirFreightStatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='AirFreightStatusType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='AirFreightStatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            self.Status.export(outfile, level, namespace_, name_='Status', pretty_print=pretty_print)
        for PreAuthorizationReason_ in self.PreAuthorizationReason:
            PreAuthorizationReason_.export(outfile, level, namespace_, name_='PreAuthorizationReason', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Status':
            obj_ = StatusType.factory()
            obj_.build(child_)
            self.Status = obj_
            obj_.original_tagname_ = 'Status'
        elif nodeName_ == 'PreAuthorizationReason':
            obj_ = PreAuthReasonType.factory()
            obj_.build(child_)
            self.PreAuthorizationReason.append(obj_)
            obj_.original_tagname_ = 'PreAuthorizationReason'
# end class AirFreightStatusType


class ValidServiceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Service=None):
        self.original_tagname_ = None
        self.Service = Service
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidServiceType.subclass:
            return ValidServiceType.subclass(*args_, **kwargs_)
        else:
            return ValidServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def hasContent_(self):
        if (
            self.Service is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ValidServiceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValidServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ValidServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ValidServiceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ValidServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
# end class ValidServiceType


class StatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusType.subclass:
            return StatusType.subclass(*args_, **kwargs_)
        else:
            return StatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='StatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='StatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='StatusType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='StatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class StatusType


class ValidAccessorialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Accessorial=None):
        self.original_tagname_ = None
        self.Accessorial = Accessorial
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidAccessorialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidAccessorialType.subclass:
            return ValidAccessorialType.subclass(*args_, **kwargs_)
        else:
            return ValidAccessorialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Accessorial(self): return self.Accessorial
    def set_Accessorial(self, Accessorial): self.Accessorial = Accessorial
    def hasContent_(self):
        if (
            self.Accessorial is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ValidAccessorialType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidAccessorialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValidAccessorialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ValidAccessorialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ValidAccessorialType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ValidAccessorialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Accessorial is not None:
            self.Accessorial.export(outfile, level, namespace_, name_='Accessorial', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Accessorial':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Accessorial = obj_
            obj_.original_tagname_ = 'Accessorial'
# end class ValidAccessorialType


class PreAuthReasonType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAuthReasonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAuthReasonType.subclass:
            return PreAuthReasonType.subclass(*args_, **kwargs_)
        else:
            return PreAuthReasonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PreAuthReasonType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAuthReasonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PreAuthReasonType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PreAuthReasonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PreAuthReasonType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PreAuthReasonType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class PreAuthReasonType


class ConfirmationNumberType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None):
        self.original_tagname_ = None
        self.Type = Type
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfirmationNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfirmationNumberType.subclass:
            return ConfirmationNumberType.subclass(*args_, **kwargs_)
        else:
            return ConfirmationNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ConfirmationNumberType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfirmationNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConfirmationNumberType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ConfirmationNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ConfirmationNumberType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ConfirmationNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Value>%s</fsp:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class ConfirmationNumberType


class FactorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FactorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FactorType.subclass:
            return FactorType.subclass(*args_, **kwargs_)
        else:
            return FactorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FactorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FactorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FactorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FactorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FactorType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FactorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Value>%s</fsp:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class FactorType


class AmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountType.subclass:
            return AmountType.subclass(*args_, **kwargs_)
        else:
            return AmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='AmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='AmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='AmountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='AmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class AmountType


class TotalShipmentChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TotalShipmentChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TotalShipmentChargeType.subclass:
            return TotalShipmentChargeType.subclass(*args_, **kwargs_)
        else:
            return TotalShipmentChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='TotalShipmentChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TotalShipmentChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TotalShipmentChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='TotalShipmentChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='TotalShipmentChargeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='TotalShipmentChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CurrencyCode>%s</fsp:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:MonetaryValue>%s</fsp:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class TotalShipmentChargeType


class DocumentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Image=None, Forms=None):
        self.original_tagname_ = None
        if Image is None:
            self.Image = []
        else:
            self.Image = Image
        if Forms is None:
            self.Forms = []
        else:
            self.Forms = Forms
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentType.subclass:
            return DocumentType.subclass(*args_, **kwargs_)
        else:
            return DocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Image(self): return self.Image
    def set_Image(self, Image): self.Image = Image
    def add_Image(self, value): self.Image.append(value)
    def insert_Image_at(self, index, value): self.Image.insert(index, value)
    def replace_Image_at(self, index, value): self.Image[index] = value
    def get_Forms(self): return self.Forms
    def set_Forms(self, Forms): self.Forms = Forms
    def add_Forms(self, value): self.Forms.append(value)
    def insert_Forms_at(self, index, value): self.Forms.insert(index, value)
    def replace_Forms_at(self, index, value): self.Forms[index] = value
    def hasContent_(self):
        if (
            self.Image or
            self.Forms
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='DocumentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DocumentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='DocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='DocumentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='DocumentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Image_ in self.Image:
            Image_.export(outfile, level, namespace_, name_='Image', pretty_print=pretty_print)
        for Forms_ in self.Forms:
            Forms_.export(outfile, level, namespace_, name_='Forms', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Image':
            obj_ = ImageFormsType.factory()
            obj_.build(child_)
            self.Image.append(obj_)
            obj_.original_tagname_ = 'Image'
        elif nodeName_ == 'Forms':
            obj_ = ImageFormsType.factory()
            obj_.build(child_)
            self.Forms.append(obj_)
            obj_.original_tagname_ = 'Forms'
# end class DocumentType


class ImageFormsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, GraphicImage=None, Format=None):
        self.original_tagname_ = None
        self.Type = Type
        self.GraphicImage = GraphicImage
        self.Format = Format
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageFormsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageFormsType.subclass:
            return ImageFormsType.subclass(*args_, **kwargs_)
        else:
            return ImageFormsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_GraphicImage(self): return self.GraphicImage
    def set_GraphicImage(self, GraphicImage): self.GraphicImage = GraphicImage
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def hasContent_(self):
        if (
            self.Type is not None or
            self.GraphicImage is not None or
            self.Format is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ImageFormsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageFormsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImageFormsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ImageFormsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ImageFormsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ImageFormsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.GraphicImage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:GraphicImage>%s</fsp:GraphicImage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GraphicImage), input_name='GraphicImage')), eol_))
        if self.Format is not None:
            self.Format.export(outfile, level, namespace_, name_='Format', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = ImageCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'GraphicImage':
            GraphicImage_ = child_.text
            GraphicImage_ = self.gds_validate_string(GraphicImage_, node, 'GraphicImage')
            self.GraphicImage = GraphicImage_
        elif nodeName_ == 'Format':
            obj_ = ImageCodeDescriptionType.factory()
            obj_.build(child_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
# end class ImageFormsType


class ImageCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageCodeDescriptionType.subclass:
            return ImageCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ImageCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ImageCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImageCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ImageCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ImageCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ImageCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ImageCodeDescriptionType


class CountryOfManufactureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None):
        self.original_tagname_ = None
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryOfManufactureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryOfManufactureType.subclass:
            return CountryOfManufactureType.subclass(*args_, **kwargs_)
        else:
            return CountryOfManufactureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='CountryOfManufactureType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryOfManufactureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountryOfManufactureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='CountryOfManufactureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='CountryOfManufactureType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='CountryOfManufactureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:CountryCode>%s</fsp:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class CountryOfManufactureType


class ShipmentTotalWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentTotalWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentTotalWeightType.subclass:
            return ShipmentTotalWeightType.subclass(*args_, **kwargs_)
        else:
            return ShipmentTotalWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='ShipmentTotalWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentTotalWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentTotalWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='ShipmentTotalWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='ShipmentTotalWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='ShipmentTotalWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Value>%s</fsp:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ShipmentTotalWeightType


class TaxIDCodeDescType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxIDCodeDescType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDCodeDescType.subclass:
            return TaxIDCodeDescType.subclass(*args_, **kwargs_)
        else:
            return TaxIDCodeDescType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='TaxIDCodeDescType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxIDCodeDescType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxIDCodeDescType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='TaxIDCodeDescType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='TaxIDCodeDescType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='TaxIDCodeDescType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Code>%s</fsp:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Description>%s</fsp:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxIDCodeDescType


class TaxIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Number=None):
        self.original_tagname_ = None
        self.Type = Type
        self.Number = Number
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDType.subclass:
            return TaxIDType.subclass(*args_, **kwargs_)
        else:
            return TaxIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='TaxIDType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='TaxIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='TaxIDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='TaxIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Number>%s</fsp:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = TaxIDCodeDescType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
# end class TaxIDType


class TimeInTransitResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DaysInTransit=None):
        self.original_tagname_ = None
        self.DaysInTransit = DaysInTransit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeInTransitResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeInTransitResponseType.subclass:
            return TimeInTransitResponseType.subclass(*args_, **kwargs_)
        else:
            return TimeInTransitResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DaysInTransit(self): return self.DaysInTransit
    def set_DaysInTransit(self, DaysInTransit): self.DaysInTransit = DaysInTransit
    def hasContent_(self):
        if (
            self.DaysInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='TimeInTransitResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeInTransitResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeInTransitResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='TimeInTransitResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='TimeInTransitResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='TimeInTransitResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DaysInTransit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:DaysInTransit>%s</fsp:DaysInTransit>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DaysInTransit), input_name='DaysInTransit')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DaysInTransit':
            DaysInTransit_ = child_.text
            DaysInTransit_ = self.gds_validate_string(DaysInTransit_, node, 'DaysInTransit')
            self.DaysInTransit = DaysInTransit_
# end class TimeInTransitResponseType


class HandlingUnitsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.Type = Type
        self.Dimensions = Dimensions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsType.subclass:
            return HandlingUnitsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='HandlingUnitsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='HandlingUnitsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='HandlingUnitsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='HandlingUnitsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Quantity>%s</fsp:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.Type is not None:
            self.Type.export(outfile, level, namespace_, name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class HandlingUnitsType


class FreightDensityRateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Density=None, TotalCubicFeet=None):
        self.original_tagname_ = None
        self.Density = Density
        self.TotalCubicFeet = TotalCubicFeet
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityRateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityRateType.subclass:
            return FreightDensityRateType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityRateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Density(self): return self.Density
    def set_Density(self, Density): self.Density = Density
    def get_TotalCubicFeet(self): return self.TotalCubicFeet
    def set_TotalCubicFeet(self, TotalCubicFeet): self.TotalCubicFeet = TotalCubicFeet
    def hasContent_(self):
        if (
            self.Density is not None or
            self.TotalCubicFeet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='FreightDensityRateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityRateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightDensityRateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='FreightDensityRateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='FreightDensityRateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='FreightDensityRateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Density is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Density>%s</fsp:Density>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Density), input_name='Density')), eol_))
        if self.TotalCubicFeet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:TotalCubicFeet>%s</fsp:TotalCubicFeet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TotalCubicFeet), input_name='TotalCubicFeet')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Density':
            Density_ = child_.text
            Density_ = self.gds_validate_string(Density_, node, 'Density')
            self.Density = Density_
        elif nodeName_ == 'TotalCubicFeet':
            TotalCubicFeet_ = child_.text
            TotalCubicFeet_ = self.gds_validate_string(TotalCubicFeet_, node, 'TotalCubicFeet')
            self.TotalCubicFeet = TotalCubicFeet_
# end class FreightDensityRateType


class HandlingUnitsDimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsDimensionsType.subclass:
            return HandlingUnitsDimensionsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='HandlingUnitsDimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HandlingUnitsDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='HandlingUnitsDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='HandlingUnitsDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='HandlingUnitsDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Length>%s</fsp:Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Width>%s</fsp:Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fsp:Height>%s</fsp:Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class HandlingUnitsDimensionsType


class ClientInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInformationType.subclass:
            return ClientInformationType.subclass(*args_, **kwargs_)
        else:
            return ClientInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self.Property
    def set_Property(self, Property): self.Property = Property
    def add_Property(self, value): self.Property.append(value)
    def insert_Property_at(self, index, value): self.Property.insert(index, value)
    def replace_Property_at(self, index, value): self.Property[index] = value
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ClientInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ClientInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ClientInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ClientInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespace_, name_='Property', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = PropertyType.factory()
            obj_.build(child_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class ClientInformationType


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RequestOption=None, SubVersion=None, TransactionReference=None):
        self.original_tagname_ = None
        if RequestOption is None:
            self.RequestOption = []
        else:
            self.RequestOption = RequestOption
        self.SubVersion = SubVersion
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestOption(self): return self.RequestOption
    def set_RequestOption(self, RequestOption): self.RequestOption = RequestOption
    def add_RequestOption(self, value): self.RequestOption.append(value)
    def insert_RequestOption_at(self, index, value): self.RequestOption.insert(index, value)
    def replace_RequestOption_at(self, index, value): self.RequestOption[index] = value
    def get_SubVersion(self): return self.SubVersion
    def set_SubVersion(self, SubVersion): self.SubVersion = SubVersion
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.RequestOption or
            self.SubVersion is not None or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='RequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequestOption_ in self.RequestOption:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:RequestOption>%s</common:RequestOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(RequestOption_), input_name='RequestOption')), eol_))
        if self.SubVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:SubVersion>%s</common:SubVersion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubVersion), input_name='SubVersion')), eol_))
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestOption':
            RequestOption_ = child_.text
            RequestOption_ = self.gds_validate_string(RequestOption_, node, 'RequestOption')
            self.RequestOption.append(RequestOption_)
        elif nodeName_ == 'SubVersion':
            SubVersion_ = child_.text
            SubVersion_ = self.gds_validate_string(SubVersion_, node, 'SubVersion')
            self.SubVersion = SubVersion_
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, TransactionIdentifier=None):
        self.original_tagname_ = None
        self.CustomerContext = CustomerContext
        self.TransactionIdentifier = TransactionIdentifier
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def get_TransactionIdentifier(self): return self.TransactionIdentifier
    def set_TransactionIdentifier(self, TransactionIdentifier): self.TransactionIdentifier = TransactionIdentifier
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.TransactionIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='TransactionReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='TransactionReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='TransactionReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:CustomerContext>%s</common:CustomerContext>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), eol_))
        if self.TransactionIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:TransactionIdentifier>%s</common:TransactionIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransactionIdentifier), input_name='TransactionIdentifier')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
        elif nodeName_ == 'TransactionIdentifier':
            TransactionIdentifier_ = child_.text
            TransactionIdentifier_ = self.gds_validate_string(TransactionIdentifier_, node, 'TransactionIdentifier')
            self.TransactionIdentifier = TransactionIdentifier_
# end class TransactionReferenceType


class ResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResponseStatus=None, Alert=None, AlertDetail=None, TransactionReference=None):
        self.original_tagname_ = None
        self.ResponseStatus = ResponseStatus
        if Alert is None:
            self.Alert = []
        else:
            self.Alert = Alert
        if AlertDetail is None:
            self.AlertDetail = []
        else:
            self.AlertDetail = AlertDetail
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResponseStatus(self): return self.ResponseStatus
    def set_ResponseStatus(self, ResponseStatus): self.ResponseStatus = ResponseStatus
    def get_Alert(self): return self.Alert
    def set_Alert(self, Alert): self.Alert = Alert
    def add_Alert(self, value): self.Alert.append(value)
    def insert_Alert_at(self, index, value): self.Alert.insert(index, value)
    def replace_Alert_at(self, index, value): self.Alert[index] = value
    def get_AlertDetail(self): return self.AlertDetail
    def set_AlertDetail(self, AlertDetail): self.AlertDetail = AlertDetail
    def add_AlertDetail(self, value): self.AlertDetail.append(value)
    def insert_AlertDetail_at(self, index, value): self.AlertDetail.insert(index, value)
    def replace_AlertDetail_at(self, index, value): self.AlertDetail[index] = value
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.ResponseStatus is not None or
            self.Alert or
            self.AlertDetail or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseStatus is not None:
            self.ResponseStatus.export(outfile, level, namespace_, name_='ResponseStatus', pretty_print=pretty_print)
        for Alert_ in self.Alert:
            Alert_.export(outfile, level, namespace_, name_='Alert', pretty_print=pretty_print)
        for AlertDetail_ in self.AlertDetail:
            AlertDetail_.export(outfile, level, namespace_, name_='AlertDetail', pretty_print=pretty_print)
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResponseStatus':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.ResponseStatus = obj_
            obj_.original_tagname_ = 'ResponseStatus'
        elif nodeName_ == 'Alert':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.Alert.append(obj_)
            obj_.original_tagname_ = 'Alert'
        elif nodeName_ == 'AlertDetail':
            obj_ = DetailType.factory()
            obj_.build(child_)
            self.AlertDetail.append(obj_)
            obj_.original_tagname_ = 'AlertDetail'
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class ResponseType


class CodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='CodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='CodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='CodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Description>%s</common:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CodeDescriptionType


class DetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, ElementLevelInformation=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.ElementLevelInformation = ElementLevelInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetailType.subclass:
            return DetailType.subclass(*args_, **kwargs_)
        else:
            return DetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ElementLevelInformation(self): return self.ElementLevelInformation
    def set_ElementLevelInformation(self, ElementLevelInformation): self.ElementLevelInformation = ElementLevelInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.ElementLevelInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='DetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='DetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='DetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='DetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Description>%s</common:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ElementLevelInformation is not None:
            self.ElementLevelInformation.export(outfile, level, namespace_, name_='ElementLevelInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ElementLevelInformation':
            obj_ = ElementLevelInformationType.factory()
            obj_.build(child_)
            self.ElementLevelInformation = obj_
            obj_.original_tagname_ = 'ElementLevelInformation'
# end class DetailType


class ElementLevelInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Level=None, ElementIdentifier=None):
        self.original_tagname_ = None
        self.Level = Level
        if ElementIdentifier is None:
            self.ElementIdentifier = []
        else:
            self.ElementIdentifier = ElementIdentifier
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementLevelInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementLevelInformationType.subclass:
            return ElementLevelInformationType.subclass(*args_, **kwargs_)
        else:
            return ElementLevelInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Level(self): return self.Level
    def set_Level(self, Level): self.Level = Level
    def get_ElementIdentifier(self): return self.ElementIdentifier
    def set_ElementIdentifier(self, ElementIdentifier): self.ElementIdentifier = ElementIdentifier
    def add_ElementIdentifier(self, value): self.ElementIdentifier.append(value)
    def insert_ElementIdentifier_at(self, index, value): self.ElementIdentifier.insert(index, value)
    def replace_ElementIdentifier_at(self, index, value): self.ElementIdentifier[index] = value
    def hasContent_(self):
        if (
            self.Level is not None or
            self.ElementIdentifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ElementLevelInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementLevelInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ElementLevelInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ElementLevelInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ElementLevelInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ElementLevelInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Level>%s</common:Level>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), eol_))
        for ElementIdentifier_ in self.ElementIdentifier:
            ElementIdentifier_.export(outfile, level, namespace_, name_='ElementIdentifier', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Level':
            Level_ = child_.text
            Level_ = self.gds_validate_string(Level_, node, 'Level')
            self.Level = Level_
        elif nodeName_ == 'ElementIdentifier':
            obj_ = ElementIdentifierType.factory()
            obj_.build(child_)
            self.ElementIdentifier.append(obj_)
            obj_.original_tagname_ = 'ElementIdentifier'
# end class ElementLevelInformationType


class ElementIdentifierType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementIdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementIdentifierType.subclass:
            return ElementIdentifierType.subclass(*args_, **kwargs_)
        else:
            return ElementIdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='common:', name_='ElementIdentifierType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementIdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ElementIdentifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='common:', name_='ElementIdentifierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='common:', name_='ElementIdentifierType'):
        pass
    def exportChildren(self, outfile, level, namespace_='common:', name_='ElementIdentifierType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Code>%s</common:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<common:Value>%s</common:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class ElementIdentifierType


class InternationalFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FormType=None, UserCreatedForm=None, CN22Form=None, UPSPremiumCareForm=None, AdditionalDocumentIndicator=None, FormGroupIdName=None, SEDFilingOption=None, EEIFilingOption=None, Contacts=None, Product=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, TermsOfShipment=None, ReasonForExport=None, Comments=None, DeclarationStatement=None, Discount=None, FreightCharges=None, InsuranceCharges=None, OtherCharges=None, CurrencyCode=None, BlanketPeriod=None, ExportDate=None, ExportingCarrier=None, CarrierID=None, InBondCode=None, EntryNumber=None, PointOfOrigin=None, PointOfOriginType=None, ModeOfTransport=None, PortOfExport=None, PortOfUnloading=None, LoadingPier=None, PartiesToTransaction=None, RoutedExportTransactionIndicator=None, ContainerizedIndicator=None, License=None, ECCNNumber=None, OverridePaperlessIndicator=None, ShipperMemo=None, MultiCurrencyInvoiceLineTotal=None, HazardousMaterialsIndicator=None):
        self.original_tagname_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
        self.UserCreatedForm = UserCreatedForm
        self.CN22Form = CN22Form
        self.UPSPremiumCareForm = UPSPremiumCareForm
        self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
        self.FormGroupIdName = FormGroupIdName
        self.SEDFilingOption = SEDFilingOption
        self.EEIFilingOption = EEIFilingOption
        self.Contacts = Contacts
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceDate = InvoiceDate
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.TermsOfShipment = TermsOfShipment
        self.ReasonForExport = ReasonForExport
        self.Comments = Comments
        self.DeclarationStatement = DeclarationStatement
        self.Discount = Discount
        self.FreightCharges = FreightCharges
        self.InsuranceCharges = InsuranceCharges
        self.OtherCharges = OtherCharges
        self.CurrencyCode = CurrencyCode
        self.BlanketPeriod = BlanketPeriod
        self.ExportDate = ExportDate
        self.ExportingCarrier = ExportingCarrier
        self.CarrierID = CarrierID
        self.InBondCode = InBondCode
        self.EntryNumber = EntryNumber
        self.PointOfOrigin = PointOfOrigin
        self.PointOfOriginType = PointOfOriginType
        self.ModeOfTransport = ModeOfTransport
        self.PortOfExport = PortOfExport
        self.PortOfUnloading = PortOfUnloading
        self.LoadingPier = LoadingPier
        self.PartiesToTransaction = PartiesToTransaction
        self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
        self.ContainerizedIndicator = ContainerizedIndicator
        self.License = License
        self.ECCNNumber = ECCNNumber
        self.OverridePaperlessIndicator = OverridePaperlessIndicator
        self.ShipperMemo = ShipperMemo
        self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
        self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalFormType.subclass:
            return InternationalFormType.subclass(*args_, **kwargs_)
        else:
            return InternationalFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FormType(self): return self.FormType
    def set_FormType(self, FormType): self.FormType = FormType
    def add_FormType(self, value): self.FormType.append(value)
    def insert_FormType_at(self, index, value): self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value): self.FormType[index] = value
    def get_UserCreatedForm(self): return self.UserCreatedForm
    def set_UserCreatedForm(self, UserCreatedForm): self.UserCreatedForm = UserCreatedForm
    def get_CN22Form(self): return self.CN22Form
    def set_CN22Form(self, CN22Form): self.CN22Form = CN22Form
    def get_UPSPremiumCareForm(self): return self.UPSPremiumCareForm
    def set_UPSPremiumCareForm(self, UPSPremiumCareForm): self.UPSPremiumCareForm = UPSPremiumCareForm
    def get_AdditionalDocumentIndicator(self): return self.AdditionalDocumentIndicator
    def set_AdditionalDocumentIndicator(self, AdditionalDocumentIndicator): self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
    def get_FormGroupIdName(self): return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName): self.FormGroupIdName = FormGroupIdName
    def get_SEDFilingOption(self): return self.SEDFilingOption
    def set_SEDFilingOption(self, SEDFilingOption): self.SEDFilingOption = SEDFilingOption
    def get_EEIFilingOption(self): return self.EEIFilingOption
    def set_EEIFilingOption(self, EEIFilingOption): self.EEIFilingOption = EEIFilingOption
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def get_Product(self): return self.Product
    def set_Product(self, Product): self.Product = Product
    def add_Product(self, value): self.Product.append(value)
    def insert_Product_at(self, index, value): self.Product.insert(index, value)
    def replace_Product_at(self, index, value): self.Product[index] = value
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self): return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate): self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_TermsOfShipment(self): return self.TermsOfShipment
    def set_TermsOfShipment(self, TermsOfShipment): self.TermsOfShipment = TermsOfShipment
    def get_ReasonForExport(self): return self.ReasonForExport
    def set_ReasonForExport(self, ReasonForExport): self.ReasonForExport = ReasonForExport
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_DeclarationStatement(self): return self.DeclarationStatement
    def set_DeclarationStatement(self, DeclarationStatement): self.DeclarationStatement = DeclarationStatement
    def get_Discount(self): return self.Discount
    def set_Discount(self, Discount): self.Discount = Discount
    def get_FreightCharges(self): return self.FreightCharges
    def set_FreightCharges(self, FreightCharges): self.FreightCharges = FreightCharges
    def get_InsuranceCharges(self): return self.InsuranceCharges
    def set_InsuranceCharges(self, InsuranceCharges): self.InsuranceCharges = InsuranceCharges
    def get_OtherCharges(self): return self.OtherCharges
    def set_OtherCharges(self, OtherCharges): self.OtherCharges = OtherCharges
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_BlanketPeriod(self): return self.BlanketPeriod
    def set_BlanketPeriod(self, BlanketPeriod): self.BlanketPeriod = BlanketPeriod
    def get_ExportDate(self): return self.ExportDate
    def set_ExportDate(self, ExportDate): self.ExportDate = ExportDate
    def get_ExportingCarrier(self): return self.ExportingCarrier
    def set_ExportingCarrier(self, ExportingCarrier): self.ExportingCarrier = ExportingCarrier
    def get_CarrierID(self): return self.CarrierID
    def set_CarrierID(self, CarrierID): self.CarrierID = CarrierID
    def get_InBondCode(self): return self.InBondCode
    def set_InBondCode(self, InBondCode): self.InBondCode = InBondCode
    def get_EntryNumber(self): return self.EntryNumber
    def set_EntryNumber(self, EntryNumber): self.EntryNumber = EntryNumber
    def get_PointOfOrigin(self): return self.PointOfOrigin
    def set_PointOfOrigin(self, PointOfOrigin): self.PointOfOrigin = PointOfOrigin
    def get_PointOfOriginType(self): return self.PointOfOriginType
    def set_PointOfOriginType(self, PointOfOriginType): self.PointOfOriginType = PointOfOriginType
    def get_ModeOfTransport(self): return self.ModeOfTransport
    def set_ModeOfTransport(self, ModeOfTransport): self.ModeOfTransport = ModeOfTransport
    def get_PortOfExport(self): return self.PortOfExport
    def set_PortOfExport(self, PortOfExport): self.PortOfExport = PortOfExport
    def get_PortOfUnloading(self): return self.PortOfUnloading
    def set_PortOfUnloading(self, PortOfUnloading): self.PortOfUnloading = PortOfUnloading
    def get_LoadingPier(self): return self.LoadingPier
    def set_LoadingPier(self, LoadingPier): self.LoadingPier = LoadingPier
    def get_PartiesToTransaction(self): return self.PartiesToTransaction
    def set_PartiesToTransaction(self, PartiesToTransaction): self.PartiesToTransaction = PartiesToTransaction
    def get_RoutedExportTransactionIndicator(self): return self.RoutedExportTransactionIndicator
    def set_RoutedExportTransactionIndicator(self, RoutedExportTransactionIndicator): self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
    def get_ContainerizedIndicator(self): return self.ContainerizedIndicator
    def set_ContainerizedIndicator(self, ContainerizedIndicator): self.ContainerizedIndicator = ContainerizedIndicator
    def get_License(self): return self.License
    def set_License(self, License): self.License = License
    def get_ECCNNumber(self): return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber): self.ECCNNumber = ECCNNumber
    def get_OverridePaperlessIndicator(self): return self.OverridePaperlessIndicator
    def set_OverridePaperlessIndicator(self, OverridePaperlessIndicator): self.OverridePaperlessIndicator = OverridePaperlessIndicator
    def get_ShipperMemo(self): return self.ShipperMemo
    def set_ShipperMemo(self, ShipperMemo): self.ShipperMemo = ShipperMemo
    def get_MultiCurrencyInvoiceLineTotal(self): return self.MultiCurrencyInvoiceLineTotal
    def set_MultiCurrencyInvoiceLineTotal(self, MultiCurrencyInvoiceLineTotal): self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
    def get_HazardousMaterialsIndicator(self): return self.HazardousMaterialsIndicator
    def set_HazardousMaterialsIndicator(self, HazardousMaterialsIndicator): self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
    def hasContent_(self):
        if (
            self.FormType or
            self.UserCreatedForm is not None or
            self.CN22Form is not None or
            self.UPSPremiumCareForm is not None or
            self.AdditionalDocumentIndicator is not None or
            self.FormGroupIdName is not None or
            self.SEDFilingOption is not None or
            self.EEIFilingOption is not None or
            self.Contacts is not None or
            self.Product or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.TermsOfShipment is not None or
            self.ReasonForExport is not None or
            self.Comments is not None or
            self.DeclarationStatement is not None or
            self.Discount is not None or
            self.FreightCharges is not None or
            self.InsuranceCharges is not None or
            self.OtherCharges is not None or
            self.CurrencyCode is not None or
            self.BlanketPeriod is not None or
            self.ExportDate is not None or
            self.ExportingCarrier is not None or
            self.CarrierID is not None or
            self.InBondCode is not None or
            self.EntryNumber is not None or
            self.PointOfOrigin is not None or
            self.PointOfOriginType is not None or
            self.ModeOfTransport is not None or
            self.PortOfExport is not None or
            self.PortOfUnloading is not None or
            self.LoadingPier is not None or
            self.PartiesToTransaction is not None or
            self.RoutedExportTransactionIndicator is not None or
            self.ContainerizedIndicator is not None or
            self.License is not None or
            self.ECCNNumber is not None or
            self.OverridePaperlessIndicator is not None or
            self.ShipperMemo is not None or
            self.MultiCurrencyInvoiceLineTotal is not None or
            self.HazardousMaterialsIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='InternationalFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InternationalFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='InternationalFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='InternationalFormType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='InternationalFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:FormType>%s</IF:FormType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), eol_))
        if self.UserCreatedForm is not None:
            self.UserCreatedForm.export(outfile, level, namespace_, name_='UserCreatedForm', pretty_print=pretty_print)
        if self.CN22Form is not None:
            self.CN22Form.export(outfile, level, namespace_, name_='CN22Form', pretty_print=pretty_print)
        if self.UPSPremiumCareForm is not None:
            self.UPSPremiumCareForm.export(outfile, level, namespace_, name_='UPSPremiumCareForm', pretty_print=pretty_print)
        if self.AdditionalDocumentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:AdditionalDocumentIndicator>%s</IF:AdditionalDocumentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDocumentIndicator), input_name='AdditionalDocumentIndicator')), eol_))
        if self.FormGroupIdName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:FormGroupIdName>%s</IF:FormGroupIdName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), eol_))
        if self.SEDFilingOption is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:SEDFilingOption>%s</IF:SEDFilingOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SEDFilingOption), input_name='SEDFilingOption')), eol_))
        if self.EEIFilingOption is not None:
            self.EEIFilingOption.export(outfile, level, namespace_, name_='EEIFilingOption', pretty_print=pretty_print)
        if self.Contacts is not None:
            self.Contacts.export(outfile, level, namespace_, name_='Contacts', pretty_print=pretty_print)
        for Product_ in self.Product:
            Product_.export(outfile, level, namespace_, name_='Product', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:InvoiceNumber>%s</IF:InvoiceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceNumber), input_name='InvoiceNumber')), eol_))
        if self.InvoiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:InvoiceDate>%s</IF:InvoiceDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceDate), input_name='InvoiceDate')), eol_))
        if self.PurchaseOrderNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PurchaseOrderNumber>%s</IF:PurchaseOrderNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), eol_))
        if self.TermsOfShipment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:TermsOfShipment>%s</IF:TermsOfShipment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfShipment), input_name='TermsOfShipment')), eol_))
        if self.ReasonForExport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ReasonForExport>%s</IF:ReasonForExport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReasonForExport), input_name='ReasonForExport')), eol_))
        if self.Comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Comments>%s</IF:Comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), eol_))
        if self.DeclarationStatement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:DeclarationStatement>%s</IF:DeclarationStatement>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationStatement), input_name='DeclarationStatement')), eol_))
        if self.Discount is not None:
            self.Discount.export(outfile, level, namespace_, name_='Discount', pretty_print=pretty_print)
        if self.FreightCharges is not None:
            self.FreightCharges.export(outfile, level, namespace_, name_='FreightCharges', pretty_print=pretty_print)
        if self.InsuranceCharges is not None:
            self.InsuranceCharges.export(outfile, level, namespace_, name_='InsuranceCharges', pretty_print=pretty_print)
        if self.OtherCharges is not None:
            self.OtherCharges.export(outfile, level, namespace_, name_='OtherCharges', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CurrencyCode>%s</IF:CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.BlanketPeriod is not None:
            self.BlanketPeriod.export(outfile, level, namespace_, name_='BlanketPeriod', pretty_print=pretty_print)
        if self.ExportDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ExportDate>%s</IF:ExportDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportDate), input_name='ExportDate')), eol_))
        if self.ExportingCarrier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ExportingCarrier>%s</IF:ExportingCarrier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportingCarrier), input_name='ExportingCarrier')), eol_))
        if self.CarrierID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CarrierID>%s</IF:CarrierID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierID), input_name='CarrierID')), eol_))
        if self.InBondCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:InBondCode>%s</IF:InBondCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InBondCode), input_name='InBondCode')), eol_))
        if self.EntryNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EntryNumber>%s</IF:EntryNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), eol_))
        if self.PointOfOrigin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PointOfOrigin>%s</IF:PointOfOrigin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOrigin), input_name='PointOfOrigin')), eol_))
        if self.PointOfOriginType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PointOfOriginType>%s</IF:PointOfOriginType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOriginType), input_name='PointOfOriginType')), eol_))
        if self.ModeOfTransport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ModeOfTransport>%s</IF:ModeOfTransport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ModeOfTransport), input_name='ModeOfTransport')), eol_))
        if self.PortOfExport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PortOfExport>%s</IF:PortOfExport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PortOfExport), input_name='PortOfExport')), eol_))
        if self.PortOfUnloading is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PortOfUnloading>%s</IF:PortOfUnloading>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PortOfUnloading), input_name='PortOfUnloading')), eol_))
        if self.LoadingPier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:LoadingPier>%s</IF:LoadingPier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LoadingPier), input_name='LoadingPier')), eol_))
        if self.PartiesToTransaction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PartiesToTransaction>%s</IF:PartiesToTransaction>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartiesToTransaction), input_name='PartiesToTransaction')), eol_))
        if self.RoutedExportTransactionIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:RoutedExportTransactionIndicator>%s</IF:RoutedExportTransactionIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RoutedExportTransactionIndicator), input_name='RoutedExportTransactionIndicator')), eol_))
        if self.ContainerizedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ContainerizedIndicator>%s</IF:ContainerizedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContainerizedIndicator), input_name='ContainerizedIndicator')), eol_))
        if self.License is not None:
            self.License.export(outfile, level, namespace_, name_='License', pretty_print=pretty_print)
        if self.ECCNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ECCNNumber>%s</IF:ECCNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), eol_))
        if self.OverridePaperlessIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:OverridePaperlessIndicator>%s</IF:OverridePaperlessIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OverridePaperlessIndicator), input_name='OverridePaperlessIndicator')), eol_))
        if self.ShipperMemo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ShipperMemo>%s</IF:ShipperMemo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperMemo), input_name='ShipperMemo')), eol_))
        if self.MultiCurrencyInvoiceLineTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:MultiCurrencyInvoiceLineTotal>%s</IF:MultiCurrencyInvoiceLineTotal>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MultiCurrencyInvoiceLineTotal), input_name='MultiCurrencyInvoiceLineTotal')), eol_))
        if self.HazardousMaterialsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:HazardousMaterialsIndicator>%s</IF:HazardousMaterialsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsIndicator), input_name='HazardousMaterialsIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FormType':
            FormType_ = child_.text
            FormType_ = self.gds_validate_string(FormType_, node, 'FormType')
            self.FormType.append(FormType_)
        elif nodeName_ == 'UserCreatedForm':
            obj_ = UserCreatedFormType.factory()
            obj_.build(child_)
            self.UserCreatedForm = obj_
            obj_.original_tagname_ = 'UserCreatedForm'
        elif nodeName_ == 'CN22Form':
            obj_ = CN22FormType.factory()
            obj_.build(child_)
            self.CN22Form = obj_
            obj_.original_tagname_ = 'CN22Form'
        elif nodeName_ == 'UPSPremiumCareForm':
            obj_ = UPSPremiumCareFormType.factory()
            obj_.build(child_)
            self.UPSPremiumCareForm = obj_
            obj_.original_tagname_ = 'UPSPremiumCareForm'
        elif nodeName_ == 'AdditionalDocumentIndicator':
            AdditionalDocumentIndicator_ = child_.text
            AdditionalDocumentIndicator_ = self.gds_validate_string(AdditionalDocumentIndicator_, node, 'AdditionalDocumentIndicator')
            self.AdditionalDocumentIndicator = AdditionalDocumentIndicator_
        elif nodeName_ == 'FormGroupIdName':
            FormGroupIdName_ = child_.text
            FormGroupIdName_ = self.gds_validate_string(FormGroupIdName_, node, 'FormGroupIdName')
            self.FormGroupIdName = FormGroupIdName_
        elif nodeName_ == 'SEDFilingOption':
            SEDFilingOption_ = child_.text
            SEDFilingOption_ = self.gds_validate_string(SEDFilingOption_, node, 'SEDFilingOption')
            self.SEDFilingOption = SEDFilingOption_
        elif nodeName_ == 'EEIFilingOption':
            obj_ = EEIFilingOptionType.factory()
            obj_.build(child_)
            self.EEIFilingOption = obj_
            obj_.original_tagname_ = 'EEIFilingOption'
        elif nodeName_ == 'Contacts':
            obj_ = ContactType.factory()
            obj_.build(child_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Product':
            obj_ = ProductType.factory()
            obj_.build(child_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'InvoiceNumber':
            InvoiceNumber_ = child_.text
            InvoiceNumber_ = self.gds_validate_string(InvoiceNumber_, node, 'InvoiceNumber')
            self.InvoiceNumber = InvoiceNumber_
        elif nodeName_ == 'InvoiceDate':
            InvoiceDate_ = child_.text
            InvoiceDate_ = self.gds_validate_string(InvoiceDate_, node, 'InvoiceDate')
            self.InvoiceDate = InvoiceDate_
        elif nodeName_ == 'PurchaseOrderNumber':
            PurchaseOrderNumber_ = child_.text
            PurchaseOrderNumber_ = self.gds_validate_string(PurchaseOrderNumber_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = PurchaseOrderNumber_
        elif nodeName_ == 'TermsOfShipment':
            TermsOfShipment_ = child_.text
            TermsOfShipment_ = self.gds_validate_string(TermsOfShipment_, node, 'TermsOfShipment')
            self.TermsOfShipment = TermsOfShipment_
        elif nodeName_ == 'ReasonForExport':
            ReasonForExport_ = child_.text
            ReasonForExport_ = self.gds_validate_string(ReasonForExport_, node, 'ReasonForExport')
            self.ReasonForExport = ReasonForExport_
        elif nodeName_ == 'Comments':
            Comments_ = child_.text
            Comments_ = self.gds_validate_string(Comments_, node, 'Comments')
            self.Comments = Comments_
        elif nodeName_ == 'DeclarationStatement':
            DeclarationStatement_ = child_.text
            DeclarationStatement_ = self.gds_validate_string(DeclarationStatement_, node, 'DeclarationStatement')
            self.DeclarationStatement = DeclarationStatement_
        elif nodeName_ == 'Discount':
            obj_ = IFChargesType.factory()
            obj_.build(child_)
            self.Discount = obj_
            obj_.original_tagname_ = 'Discount'
        elif nodeName_ == 'FreightCharges':
            obj_ = IFChargesType.factory()
            obj_.build(child_)
            self.FreightCharges = obj_
            obj_.original_tagname_ = 'FreightCharges'
        elif nodeName_ == 'InsuranceCharges':
            obj_ = IFChargesType.factory()
            obj_.build(child_)
            self.InsuranceCharges = obj_
            obj_.original_tagname_ = 'InsuranceCharges'
        elif nodeName_ == 'OtherCharges':
            obj_ = OtherChargesType.factory()
            obj_.build(child_)
            self.OtherCharges = obj_
            obj_.original_tagname_ = 'OtherCharges'
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'BlanketPeriod':
            obj_ = BlanketPeriodType.factory()
            obj_.build(child_)
            self.BlanketPeriod = obj_
            obj_.original_tagname_ = 'BlanketPeriod'
        elif nodeName_ == 'ExportDate':
            ExportDate_ = child_.text
            ExportDate_ = self.gds_validate_string(ExportDate_, node, 'ExportDate')
            self.ExportDate = ExportDate_
        elif nodeName_ == 'ExportingCarrier':
            ExportingCarrier_ = child_.text
            ExportingCarrier_ = self.gds_validate_string(ExportingCarrier_, node, 'ExportingCarrier')
            self.ExportingCarrier = ExportingCarrier_
        elif nodeName_ == 'CarrierID':
            CarrierID_ = child_.text
            CarrierID_ = self.gds_validate_string(CarrierID_, node, 'CarrierID')
            self.CarrierID = CarrierID_
        elif nodeName_ == 'InBondCode':
            InBondCode_ = child_.text
            InBondCode_ = self.gds_validate_string(InBondCode_, node, 'InBondCode')
            self.InBondCode = InBondCode_
        elif nodeName_ == 'EntryNumber':
            EntryNumber_ = child_.text
            EntryNumber_ = self.gds_validate_string(EntryNumber_, node, 'EntryNumber')
            self.EntryNumber = EntryNumber_
        elif nodeName_ == 'PointOfOrigin':
            PointOfOrigin_ = child_.text
            PointOfOrigin_ = self.gds_validate_string(PointOfOrigin_, node, 'PointOfOrigin')
            self.PointOfOrigin = PointOfOrigin_
        elif nodeName_ == 'PointOfOriginType':
            PointOfOriginType_ = child_.text
            PointOfOriginType_ = self.gds_validate_string(PointOfOriginType_, node, 'PointOfOriginType')
            self.PointOfOriginType = PointOfOriginType_
        elif nodeName_ == 'ModeOfTransport':
            ModeOfTransport_ = child_.text
            ModeOfTransport_ = self.gds_validate_string(ModeOfTransport_, node, 'ModeOfTransport')
            self.ModeOfTransport = ModeOfTransport_
        elif nodeName_ == 'PortOfExport':
            PortOfExport_ = child_.text
            PortOfExport_ = self.gds_validate_string(PortOfExport_, node, 'PortOfExport')
            self.PortOfExport = PortOfExport_
        elif nodeName_ == 'PortOfUnloading':
            PortOfUnloading_ = child_.text
            PortOfUnloading_ = self.gds_validate_string(PortOfUnloading_, node, 'PortOfUnloading')
            self.PortOfUnloading = PortOfUnloading_
        elif nodeName_ == 'LoadingPier':
            LoadingPier_ = child_.text
            LoadingPier_ = self.gds_validate_string(LoadingPier_, node, 'LoadingPier')
            self.LoadingPier = LoadingPier_
        elif nodeName_ == 'PartiesToTransaction':
            PartiesToTransaction_ = child_.text
            PartiesToTransaction_ = self.gds_validate_string(PartiesToTransaction_, node, 'PartiesToTransaction')
            self.PartiesToTransaction = PartiesToTransaction_
        elif nodeName_ == 'RoutedExportTransactionIndicator':
            RoutedExportTransactionIndicator_ = child_.text
            RoutedExportTransactionIndicator_ = self.gds_validate_string(RoutedExportTransactionIndicator_, node, 'RoutedExportTransactionIndicator')
            self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator_
        elif nodeName_ == 'ContainerizedIndicator':
            ContainerizedIndicator_ = child_.text
            ContainerizedIndicator_ = self.gds_validate_string(ContainerizedIndicator_, node, 'ContainerizedIndicator')
            self.ContainerizedIndicator = ContainerizedIndicator_
        elif nodeName_ == 'License':
            obj_ = LicenseType.factory()
            obj_.build(child_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'ECCNNumber':
            ECCNNumber_ = child_.text
            ECCNNumber_ = self.gds_validate_string(ECCNNumber_, node, 'ECCNNumber')
            self.ECCNNumber = ECCNNumber_
        elif nodeName_ == 'OverridePaperlessIndicator':
            OverridePaperlessIndicator_ = child_.text
            OverridePaperlessIndicator_ = self.gds_validate_string(OverridePaperlessIndicator_, node, 'OverridePaperlessIndicator')
            self.OverridePaperlessIndicator = OverridePaperlessIndicator_
        elif nodeName_ == 'ShipperMemo':
            ShipperMemo_ = child_.text
            ShipperMemo_ = self.gds_validate_string(ShipperMemo_, node, 'ShipperMemo')
            self.ShipperMemo = ShipperMemo_
        elif nodeName_ == 'MultiCurrencyInvoiceLineTotal':
            MultiCurrencyInvoiceLineTotal_ = child_.text
            MultiCurrencyInvoiceLineTotal_ = self.gds_validate_string(MultiCurrencyInvoiceLineTotal_, node, 'MultiCurrencyInvoiceLineTotal')
            self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal_
        elif nodeName_ == 'HazardousMaterialsIndicator':
            HazardousMaterialsIndicator_ = child_.text
            HazardousMaterialsIndicator_ = self.gds_validate_string(HazardousMaterialsIndicator_, node, 'HazardousMaterialsIndicator')
            self.HazardousMaterialsIndicator = HazardousMaterialsIndicator_
# end class InternationalFormType


class UPSPremiumCareFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentDate=None, PageSize=None, PrintType=None, NumOfCopies=None, LanguageForUPSPremiumCare=None):
        self.original_tagname_ = None
        self.ShipmentDate = ShipmentDate
        self.PageSize = PageSize
        self.PrintType = PrintType
        self.NumOfCopies = NumOfCopies
        self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSPremiumCareFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSPremiumCareFormType.subclass:
            return UPSPremiumCareFormType.subclass(*args_, **kwargs_)
        else:
            return UPSPremiumCareFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentDate(self): return self.ShipmentDate
    def set_ShipmentDate(self, ShipmentDate): self.ShipmentDate = ShipmentDate
    def get_PageSize(self): return self.PageSize
    def set_PageSize(self, PageSize): self.PageSize = PageSize
    def get_PrintType(self): return self.PrintType
    def set_PrintType(self, PrintType): self.PrintType = PrintType
    def get_NumOfCopies(self): return self.NumOfCopies
    def set_NumOfCopies(self, NumOfCopies): self.NumOfCopies = NumOfCopies
    def get_LanguageForUPSPremiumCare(self): return self.LanguageForUPSPremiumCare
    def set_LanguageForUPSPremiumCare(self, LanguageForUPSPremiumCare): self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
    def hasContent_(self):
        if (
            self.ShipmentDate is not None or
            self.PageSize is not None or
            self.PrintType is not None or
            self.NumOfCopies is not None or
            self.LanguageForUPSPremiumCare is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UPSPremiumCareFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSPremiumCareFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UPSPremiumCareFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UPSPremiumCareFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UPSPremiumCareFormType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UPSPremiumCareFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ShipmentDate>%s</IF:ShipmentDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDate), input_name='ShipmentDate')), eol_))
        if self.PageSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PageSize>%s</IF:PageSize>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PageSize), input_name='PageSize')), eol_))
        if self.PrintType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PrintType>%s</IF:PrintType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrintType), input_name='PrintType')), eol_))
        if self.NumOfCopies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:NumOfCopies>%s</IF:NumOfCopies>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumOfCopies), input_name='NumOfCopies')), eol_))
        if self.LanguageForUPSPremiumCare is not None:
            self.LanguageForUPSPremiumCare.export(outfile, level, namespace_, name_='LanguageForUPSPremiumCare', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentDate':
            ShipmentDate_ = child_.text
            ShipmentDate_ = self.gds_validate_string(ShipmentDate_, node, 'ShipmentDate')
            self.ShipmentDate = ShipmentDate_
        elif nodeName_ == 'PageSize':
            PageSize_ = child_.text
            PageSize_ = self.gds_validate_string(PageSize_, node, 'PageSize')
            self.PageSize = PageSize_
        elif nodeName_ == 'PrintType':
            PrintType_ = child_.text
            PrintType_ = self.gds_validate_string(PrintType_, node, 'PrintType')
            self.PrintType = PrintType_
        elif nodeName_ == 'NumOfCopies':
            NumOfCopies_ = child_.text
            NumOfCopies_ = self.gds_validate_string(NumOfCopies_, node, 'NumOfCopies')
            self.NumOfCopies = NumOfCopies_
        elif nodeName_ == 'LanguageForUPSPremiumCare':
            obj_ = LanguageForUPSPremiumCareType.factory()
            obj_.build(child_)
            self.LanguageForUPSPremiumCare = obj_
            obj_.original_tagname_ = 'LanguageForUPSPremiumCare'
# end class UPSPremiumCareFormType


class LanguageForUPSPremiumCareType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Language=None):
        self.original_tagname_ = None
        if Language is None:
            self.Language = []
        else:
            self.Language = Language
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LanguageForUPSPremiumCareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LanguageForUPSPremiumCareType.subclass:
            return LanguageForUPSPremiumCareType.subclass(*args_, **kwargs_)
        else:
            return LanguageForUPSPremiumCareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def add_Language(self, value): self.Language.append(value)
    def insert_Language_at(self, index, value): self.Language.insert(index, value)
    def replace_Language_at(self, index, value): self.Language[index] = value
    def hasContent_(self):
        if (
            self.Language
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='LanguageForUPSPremiumCareType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LanguageForUPSPremiumCareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LanguageForUPSPremiumCareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='LanguageForUPSPremiumCareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='LanguageForUPSPremiumCareType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='LanguageForUPSPremiumCareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Language_ in self.Language:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Language>%s</IF:Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Language_), input_name='Language')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language.append(Language_)
# end class LanguageForUPSPremiumCareType


class UserCreatedFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DocumentID=None):
        self.original_tagname_ = None
        if DocumentID is None:
            self.DocumentID = []
        else:
            self.DocumentID = DocumentID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UserCreatedFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UserCreatedFormType.subclass:
            return UserCreatedFormType.subclass(*args_, **kwargs_)
        else:
            return UserCreatedFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentID(self): return self.DocumentID
    def set_DocumentID(self, DocumentID): self.DocumentID = DocumentID
    def add_DocumentID(self, value): self.DocumentID.append(value)
    def insert_DocumentID_at(self, index, value): self.DocumentID.insert(index, value)
    def replace_DocumentID_at(self, index, value): self.DocumentID[index] = value
    def hasContent_(self):
        if (
            self.DocumentID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UserCreatedFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UserCreatedFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UserCreatedFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UserCreatedFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UserCreatedFormType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UserCreatedFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentID_ in self.DocumentID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:DocumentID>%s</IF:DocumentID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(DocumentID_), input_name='DocumentID')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentID':
            DocumentID_ = child_.text
            DocumentID_ = self.gds_validate_string(DocumentID_, node, 'DocumentID')
            self.DocumentID.append(DocumentID_)
# end class UserCreatedFormType


class CN22FormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LabelSize=None, PrintsPerPage=None, LabelPrintType=None, CN22Type=None, CN22OtherDescription=None, FoldHereText=None, CN22Content=None):
        self.original_tagname_ = None
        self.LabelSize = LabelSize
        self.PrintsPerPage = PrintsPerPage
        self.LabelPrintType = LabelPrintType
        self.CN22Type = CN22Type
        self.CN22OtherDescription = CN22OtherDescription
        self.FoldHereText = FoldHereText
        if CN22Content is None:
            self.CN22Content = []
        else:
            self.CN22Content = CN22Content
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22FormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22FormType.subclass:
            return CN22FormType.subclass(*args_, **kwargs_)
        else:
            return CN22FormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LabelSize(self): return self.LabelSize
    def set_LabelSize(self, LabelSize): self.LabelSize = LabelSize
    def get_PrintsPerPage(self): return self.PrintsPerPage
    def set_PrintsPerPage(self, PrintsPerPage): self.PrintsPerPage = PrintsPerPage
    def get_LabelPrintType(self): return self.LabelPrintType
    def set_LabelPrintType(self, LabelPrintType): self.LabelPrintType = LabelPrintType
    def get_CN22Type(self): return self.CN22Type
    def set_CN22Type(self, CN22Type): self.CN22Type = CN22Type
    def get_CN22OtherDescription(self): return self.CN22OtherDescription
    def set_CN22OtherDescription(self, CN22OtherDescription): self.CN22OtherDescription = CN22OtherDescription
    def get_FoldHereText(self): return self.FoldHereText
    def set_FoldHereText(self, FoldHereText): self.FoldHereText = FoldHereText
    def get_CN22Content(self): return self.CN22Content
    def set_CN22Content(self, CN22Content): self.CN22Content = CN22Content
    def add_CN22Content(self, value): self.CN22Content.append(value)
    def insert_CN22Content_at(self, index, value): self.CN22Content.insert(index, value)
    def replace_CN22Content_at(self, index, value): self.CN22Content[index] = value
    def hasContent_(self):
        if (
            self.LabelSize is not None or
            self.PrintsPerPage is not None or
            self.LabelPrintType is not None or
            self.CN22Type is not None or
            self.CN22OtherDescription is not None or
            self.FoldHereText is not None or
            self.CN22Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='CN22FormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22FormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CN22FormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='CN22FormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='CN22FormType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='CN22FormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:LabelSize>%s</IF:LabelSize>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelSize), input_name='LabelSize')), eol_))
        if self.PrintsPerPage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PrintsPerPage>%s</IF:PrintsPerPage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrintsPerPage), input_name='PrintsPerPage')), eol_))
        if self.LabelPrintType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:LabelPrintType>%s</IF:LabelPrintType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintType), input_name='LabelPrintType')), eol_))
        if self.CN22Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22Type>%s</IF:CN22Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22Type), input_name='CN22Type')), eol_))
        if self.CN22OtherDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22OtherDescription>%s</IF:CN22OtherDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22OtherDescription), input_name='CN22OtherDescription')), eol_))
        if self.FoldHereText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:FoldHereText>%s</IF:FoldHereText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FoldHereText), input_name='FoldHereText')), eol_))
        for CN22Content_ in self.CN22Content:
            CN22Content_.export(outfile, level, namespace_, name_='CN22Content', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LabelSize':
            LabelSize_ = child_.text
            LabelSize_ = self.gds_validate_string(LabelSize_, node, 'LabelSize')
            self.LabelSize = LabelSize_
        elif nodeName_ == 'PrintsPerPage':
            PrintsPerPage_ = child_.text
            PrintsPerPage_ = self.gds_validate_string(PrintsPerPage_, node, 'PrintsPerPage')
            self.PrintsPerPage = PrintsPerPage_
        elif nodeName_ == 'LabelPrintType':
            LabelPrintType_ = child_.text
            LabelPrintType_ = self.gds_validate_string(LabelPrintType_, node, 'LabelPrintType')
            self.LabelPrintType = LabelPrintType_
        elif nodeName_ == 'CN22Type':
            CN22Type_ = child_.text
            CN22Type_ = self.gds_validate_string(CN22Type_, node, 'CN22Type')
            self.CN22Type = CN22Type_
        elif nodeName_ == 'CN22OtherDescription':
            CN22OtherDescription_ = child_.text
            CN22OtherDescription_ = self.gds_validate_string(CN22OtherDescription_, node, 'CN22OtherDescription')
            self.CN22OtherDescription = CN22OtherDescription_
        elif nodeName_ == 'FoldHereText':
            FoldHereText_ = child_.text
            FoldHereText_ = self.gds_validate_string(FoldHereText_, node, 'FoldHereText')
            self.FoldHereText = FoldHereText_
        elif nodeName_ == 'CN22Content':
            obj_ = CN22ContentType.factory()
            obj_.build(child_)
            self.CN22Content.append(obj_)
            obj_.original_tagname_ = 'CN22Content'
# end class CN22FormType


class CN22ContentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CN22ContentQuantity=None, CN22ContentDescription=None, CN22ContentWeight=None, CN22ContentTotalValue=None, CN22ContentCurrencyCode=None, CN22ContentCountryOfOrigin=None, CN22ContentTariffNumber=None):
        self.original_tagname_ = None
        self.CN22ContentQuantity = CN22ContentQuantity
        self.CN22ContentDescription = CN22ContentDescription
        self.CN22ContentWeight = CN22ContentWeight
        self.CN22ContentTotalValue = CN22ContentTotalValue
        self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
        self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
        self.CN22ContentTariffNumber = CN22ContentTariffNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22ContentType.subclass:
            return CN22ContentType.subclass(*args_, **kwargs_)
        else:
            return CN22ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CN22ContentQuantity(self): return self.CN22ContentQuantity
    def set_CN22ContentQuantity(self, CN22ContentQuantity): self.CN22ContentQuantity = CN22ContentQuantity
    def get_CN22ContentDescription(self): return self.CN22ContentDescription
    def set_CN22ContentDescription(self, CN22ContentDescription): self.CN22ContentDescription = CN22ContentDescription
    def get_CN22ContentWeight(self): return self.CN22ContentWeight
    def set_CN22ContentWeight(self, CN22ContentWeight): self.CN22ContentWeight = CN22ContentWeight
    def get_CN22ContentTotalValue(self): return self.CN22ContentTotalValue
    def set_CN22ContentTotalValue(self, CN22ContentTotalValue): self.CN22ContentTotalValue = CN22ContentTotalValue
    def get_CN22ContentCurrencyCode(self): return self.CN22ContentCurrencyCode
    def set_CN22ContentCurrencyCode(self, CN22ContentCurrencyCode): self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
    def get_CN22ContentCountryOfOrigin(self): return self.CN22ContentCountryOfOrigin
    def set_CN22ContentCountryOfOrigin(self, CN22ContentCountryOfOrigin): self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
    def get_CN22ContentTariffNumber(self): return self.CN22ContentTariffNumber
    def set_CN22ContentTariffNumber(self, CN22ContentTariffNumber): self.CN22ContentTariffNumber = CN22ContentTariffNumber
    def hasContent_(self):
        if (
            self.CN22ContentQuantity is not None or
            self.CN22ContentDescription is not None or
            self.CN22ContentWeight is not None or
            self.CN22ContentTotalValue is not None or
            self.CN22ContentCurrencyCode is not None or
            self.CN22ContentCountryOfOrigin is not None or
            self.CN22ContentTariffNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='CN22ContentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CN22ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='CN22ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='CN22ContentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='CN22ContentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CN22ContentQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22ContentQuantity>%s</IF:CN22ContentQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentQuantity), input_name='CN22ContentQuantity')), eol_))
        if self.CN22ContentDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22ContentDescription>%s</IF:CN22ContentDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentDescription), input_name='CN22ContentDescription')), eol_))
        if self.CN22ContentWeight is not None:
            self.CN22ContentWeight.export(outfile, level, namespace_, name_='CN22ContentWeight', pretty_print=pretty_print)
        if self.CN22ContentTotalValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22ContentTotalValue>%s</IF:CN22ContentTotalValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTotalValue), input_name='CN22ContentTotalValue')), eol_))
        if self.CN22ContentCurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22ContentCurrencyCode>%s</IF:CN22ContentCurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCurrencyCode), input_name='CN22ContentCurrencyCode')), eol_))
        if self.CN22ContentCountryOfOrigin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22ContentCountryOfOrigin>%s</IF:CN22ContentCountryOfOrigin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCountryOfOrigin), input_name='CN22ContentCountryOfOrigin')), eol_))
        if self.CN22ContentTariffNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CN22ContentTariffNumber>%s</IF:CN22ContentTariffNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTariffNumber), input_name='CN22ContentTariffNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CN22ContentQuantity':
            CN22ContentQuantity_ = child_.text
            CN22ContentQuantity_ = self.gds_validate_string(CN22ContentQuantity_, node, 'CN22ContentQuantity')
            self.CN22ContentQuantity = CN22ContentQuantity_
        elif nodeName_ == 'CN22ContentDescription':
            CN22ContentDescription_ = child_.text
            CN22ContentDescription_ = self.gds_validate_string(CN22ContentDescription_, node, 'CN22ContentDescription')
            self.CN22ContentDescription = CN22ContentDescription_
        elif nodeName_ == 'CN22ContentWeight':
            obj_ = ProductWeightType.factory()
            obj_.build(child_)
            self.CN22ContentWeight = obj_
            obj_.original_tagname_ = 'CN22ContentWeight'
        elif nodeName_ == 'CN22ContentTotalValue':
            CN22ContentTotalValue_ = child_.text
            CN22ContentTotalValue_ = self.gds_validate_string(CN22ContentTotalValue_, node, 'CN22ContentTotalValue')
            self.CN22ContentTotalValue = CN22ContentTotalValue_
        elif nodeName_ == 'CN22ContentCurrencyCode':
            CN22ContentCurrencyCode_ = child_.text
            CN22ContentCurrencyCode_ = self.gds_validate_string(CN22ContentCurrencyCode_, node, 'CN22ContentCurrencyCode')
            self.CN22ContentCurrencyCode = CN22ContentCurrencyCode_
        elif nodeName_ == 'CN22ContentCountryOfOrigin':
            CN22ContentCountryOfOrigin_ = child_.text
            CN22ContentCountryOfOrigin_ = self.gds_validate_string(CN22ContentCountryOfOrigin_, node, 'CN22ContentCountryOfOrigin')
            self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin_
        elif nodeName_ == 'CN22ContentTariffNumber':
            CN22ContentTariffNumber_ = child_.text
            CN22ContentTariffNumber_ = self.gds_validate_string(CN22ContentTariffNumber_, node, 'CN22ContentTariffNumber')
            self.CN22ContentTariffNumber = CN22ContentTariffNumber_
# end class CN22ContentType


class ContactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ForwardAgent=None, UltimateConsignee=None, IntermediateConsignee=None, Producer=None, SoldTo=None):
        self.original_tagname_ = None
        self.ForwardAgent = ForwardAgent
        self.UltimateConsignee = UltimateConsignee
        self.IntermediateConsignee = IntermediateConsignee
        self.Producer = Producer
        self.SoldTo = SoldTo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ForwardAgent(self): return self.ForwardAgent
    def set_ForwardAgent(self, ForwardAgent): self.ForwardAgent = ForwardAgent
    def get_UltimateConsignee(self): return self.UltimateConsignee
    def set_UltimateConsignee(self, UltimateConsignee): self.UltimateConsignee = UltimateConsignee
    def get_IntermediateConsignee(self): return self.IntermediateConsignee
    def set_IntermediateConsignee(self, IntermediateConsignee): self.IntermediateConsignee = IntermediateConsignee
    def get_Producer(self): return self.Producer
    def set_Producer(self, Producer): self.Producer = Producer
    def get_SoldTo(self): return self.SoldTo
    def set_SoldTo(self, SoldTo): self.SoldTo = SoldTo
    def hasContent_(self):
        if (
            self.ForwardAgent is not None or
            self.UltimateConsignee is not None or
            self.IntermediateConsignee is not None or
            self.Producer is not None or
            self.SoldTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ContactType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ContactType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ForwardAgent is not None:
            self.ForwardAgent.export(outfile, level, namespace_, name_='ForwardAgent', pretty_print=pretty_print)
        if self.UltimateConsignee is not None:
            self.UltimateConsignee.export(outfile, level, namespace_, name_='UltimateConsignee', pretty_print=pretty_print)
        if self.IntermediateConsignee is not None:
            self.IntermediateConsignee.export(outfile, level, namespace_, name_='IntermediateConsignee', pretty_print=pretty_print)
        if self.Producer is not None:
            self.Producer.export(outfile, level, namespace_, name_='Producer', pretty_print=pretty_print)
        if self.SoldTo is not None:
            self.SoldTo.export(outfile, level, namespace_, name_='SoldTo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ForwardAgent':
            obj_ = ForwardAgentType.factory()
            obj_.build(child_)
            self.ForwardAgent = obj_
            obj_.original_tagname_ = 'ForwardAgent'
        elif nodeName_ == 'UltimateConsignee':
            obj_ = UltimateConsigneeType.factory()
            obj_.build(child_)
            self.UltimateConsignee = obj_
            obj_.original_tagname_ = 'UltimateConsignee'
        elif nodeName_ == 'IntermediateConsignee':
            obj_ = IntermediateConsigneeType.factory()
            obj_.build(child_)
            self.IntermediateConsignee = obj_
            obj_.original_tagname_ = 'IntermediateConsignee'
        elif nodeName_ == 'Producer':
            obj_ = ProducerType.factory()
            obj_.build(child_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'SoldTo':
            obj_ = SoldToType.factory()
            obj_.build(child_)
            self.SoldTo = obj_
            obj_.original_tagname_ = 'SoldTo'
# end class ContactType


class ForwardAgentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, TaxIdentificationNumber=None, Address=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ForwardAgentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ForwardAgentType.subclass:
            return ForwardAgentType.subclass(*args_, **kwargs_)
        else:
            return ForwardAgentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ForwardAgentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ForwardAgentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ForwardAgentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ForwardAgentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ForwardAgentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ForwardAgentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CompanyName>%s</IF:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:TaxIdentificationNumber>%s</IF:TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ForwardAgentType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, Town=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.Town = Town
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value): self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value): self.AddressLine[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_Town(self): return self.Town
    def set_Town(self, Town): self.Town = Town
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.Town is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='AddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:AddressLine>%s</IF:AddressLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:City>%s</IF:City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:StateProvinceCode>%s</IF:StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.Town is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Town>%s</IF:Town>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PostalCode>%s</IF:PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CountryCode>%s</IF:CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'Town':
            Town_ = child_.text
            Town_ = self.gds_validate_string(Town_, node, 'Town')
            self.Town = Town_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class AddressType


class UltimateConsigneeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None, UltimateConsigneeType_member=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.Address = Address
        self.UltimateConsigneeType = UltimateConsigneeType_member
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeType.subclass:
            return UltimateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_UltimateConsigneeType(self): return self.UltimateConsigneeType
    def set_UltimateConsigneeType(self, UltimateConsigneeType): self.UltimateConsigneeType = UltimateConsigneeType
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None or
            self.UltimateConsigneeType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UltimateConsigneeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UltimateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UltimateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UltimateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UltimateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CompanyName>%s</IF:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.UltimateConsigneeType is not None:
            self.UltimateConsigneeType.export(outfile, level, namespace_, name_='UltimateConsigneeType', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'UltimateConsigneeType':
            obj_ = UltimateConsigneeTypeType.factory()
            obj_.build(child_)
            self.UltimateConsigneeType = obj_
            obj_.original_tagname_ = 'UltimateConsigneeType'
# end class UltimateConsigneeType


class IntermediateConsigneeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntermediateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntermediateConsigneeType.subclass:
            return IntermediateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return IntermediateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='IntermediateConsigneeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntermediateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IntermediateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='IntermediateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='IntermediateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='IntermediateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CompanyName>%s</IF:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class IntermediateConsigneeType


class ProducerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Option=None, CompanyName=None, TaxIdentificationNumber=None, Address=None, AttentionName=None, Phone=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Option = Option
        self.CompanyName = CompanyName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.Address = Address
        self.AttentionName = AttentionName
        self.Phone = Phone
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProducerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProducerType.subclass:
            return ProducerType.subclass(*args_, **kwargs_)
        else:
            return ProducerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Option is not None or
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ProducerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProducerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProducerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ProducerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ProducerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ProducerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Option>%s</IF:Option>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CompanyName>%s</IF:CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:TaxIdentificationNumber>%s</IF:TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:AttentionName>%s</IF:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EMailAddress>%s</IF:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            Option_ = child_.text
            Option_ = self.gds_validate_string(Option_, node, 'Option')
            self.Option = Option_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class ProducerType


class ProductType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, Unit=None, CommodityCode=None, PartNumber=None, OriginCountryCode=None, JointProductionIndicator=None, NetCostCode=None, NetCostDateRange=None, PreferenceCriteria=None, ProducerInfo=None, MarksAndNumbers=None, NumberOfPackagesPerCommodity=None, ProductWeight=None, VehicleID=None, ScheduleB=None, ExportType=None, SEDTotalValue=None, ExcludeFromForm=None, ProductCurrencyCode=None, PackingListInfo=None, EEIInformation=None):
        self.original_tagname_ = None
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        self.Unit = Unit
        self.CommodityCode = CommodityCode
        self.PartNumber = PartNumber
        self.OriginCountryCode = OriginCountryCode
        self.JointProductionIndicator = JointProductionIndicator
        self.NetCostCode = NetCostCode
        self.NetCostDateRange = NetCostDateRange
        self.PreferenceCriteria = PreferenceCriteria
        self.ProducerInfo = ProducerInfo
        self.MarksAndNumbers = MarksAndNumbers
        self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
        self.ProductWeight = ProductWeight
        self.VehicleID = VehicleID
        self.ScheduleB = ScheduleB
        self.ExportType = ExportType
        self.SEDTotalValue = SEDTotalValue
        self.ExcludeFromForm = ExcludeFromForm
        self.ProductCurrencyCode = ProductCurrencyCode
        self.PackingListInfo = PackingListInfo
        self.EEIInformation = EEIInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductType.subclass:
            return ProductType.subclass(*args_, **kwargs_)
        else:
            return ProductType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_Unit(self): return self.Unit
    def set_Unit(self, Unit): self.Unit = Unit
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def get_OriginCountryCode(self): return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode): self.OriginCountryCode = OriginCountryCode
    def get_JointProductionIndicator(self): return self.JointProductionIndicator
    def set_JointProductionIndicator(self, JointProductionIndicator): self.JointProductionIndicator = JointProductionIndicator
    def get_NetCostCode(self): return self.NetCostCode
    def set_NetCostCode(self, NetCostCode): self.NetCostCode = NetCostCode
    def get_NetCostDateRange(self): return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange): self.NetCostDateRange = NetCostDateRange
    def get_PreferenceCriteria(self): return self.PreferenceCriteria
    def set_PreferenceCriteria(self, PreferenceCriteria): self.PreferenceCriteria = PreferenceCriteria
    def get_ProducerInfo(self): return self.ProducerInfo
    def set_ProducerInfo(self, ProducerInfo): self.ProducerInfo = ProducerInfo
    def get_MarksAndNumbers(self): return self.MarksAndNumbers
    def set_MarksAndNumbers(self, MarksAndNumbers): self.MarksAndNumbers = MarksAndNumbers
    def get_NumberOfPackagesPerCommodity(self): return self.NumberOfPackagesPerCommodity
    def set_NumberOfPackagesPerCommodity(self, NumberOfPackagesPerCommodity): self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
    def get_ProductWeight(self): return self.ProductWeight
    def set_ProductWeight(self, ProductWeight): self.ProductWeight = ProductWeight
    def get_VehicleID(self): return self.VehicleID
    def set_VehicleID(self, VehicleID): self.VehicleID = VehicleID
    def get_ScheduleB(self): return self.ScheduleB
    def set_ScheduleB(self, ScheduleB): self.ScheduleB = ScheduleB
    def get_ExportType(self): return self.ExportType
    def set_ExportType(self, ExportType): self.ExportType = ExportType
    def get_SEDTotalValue(self): return self.SEDTotalValue
    def set_SEDTotalValue(self, SEDTotalValue): self.SEDTotalValue = SEDTotalValue
    def get_ExcludeFromForm(self): return self.ExcludeFromForm
    def set_ExcludeFromForm(self, ExcludeFromForm): self.ExcludeFromForm = ExcludeFromForm
    def get_ProductCurrencyCode(self): return self.ProductCurrencyCode
    def set_ProductCurrencyCode(self, ProductCurrencyCode): self.ProductCurrencyCode = ProductCurrencyCode
    def get_PackingListInfo(self): return self.PackingListInfo
    def set_PackingListInfo(self, PackingListInfo): self.PackingListInfo = PackingListInfo
    def get_EEIInformation(self): return self.EEIInformation
    def set_EEIInformation(self, EEIInformation): self.EEIInformation = EEIInformation
    def hasContent_(self):
        if (
            self.Description or
            self.Unit is not None or
            self.CommodityCode is not None or
            self.PartNumber is not None or
            self.OriginCountryCode is not None or
            self.JointProductionIndicator is not None or
            self.NetCostCode is not None or
            self.NetCostDateRange is not None or
            self.PreferenceCriteria is not None or
            self.ProducerInfo is not None or
            self.MarksAndNumbers is not None or
            self.NumberOfPackagesPerCommodity is not None or
            self.ProductWeight is not None or
            self.VehicleID is not None or
            self.ScheduleB is not None or
            self.ExportType is not None or
            self.SEDTotalValue is not None or
            self.ExcludeFromForm is not None or
            self.ProductCurrencyCode is not None or
            self.PackingListInfo is not None or
            self.EEIInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ProductType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ProductType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ProductType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ProductType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Description_), input_name='Description')), eol_))
        if self.Unit is not None:
            self.Unit.export(outfile, level, namespace_, name_='Unit', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:CommodityCode>%s</IF:CommodityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), eol_))
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PartNumber>%s</IF:PartNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), eol_))
        if self.OriginCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:OriginCountryCode>%s</IF:OriginCountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), eol_))
        if self.JointProductionIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:JointProductionIndicator>%s</IF:JointProductionIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.JointProductionIndicator), input_name='JointProductionIndicator')), eol_))
        if self.NetCostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:NetCostCode>%s</IF:NetCostCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NetCostCode), input_name='NetCostCode')), eol_))
        if self.NetCostDateRange is not None:
            self.NetCostDateRange.export(outfile, level, namespace_, name_='NetCostDateRange', pretty_print=pretty_print)
        if self.PreferenceCriteria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PreferenceCriteria>%s</IF:PreferenceCriteria>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriteria), input_name='PreferenceCriteria')), eol_))
        if self.ProducerInfo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ProducerInfo>%s</IF:ProducerInfo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProducerInfo), input_name='ProducerInfo')), eol_))
        if self.MarksAndNumbers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:MarksAndNumbers>%s</IF:MarksAndNumbers>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbers), input_name='MarksAndNumbers')), eol_))
        if self.NumberOfPackagesPerCommodity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:NumberOfPackagesPerCommodity>%s</IF:NumberOfPackagesPerCommodity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPackagesPerCommodity), input_name='NumberOfPackagesPerCommodity')), eol_))
        if self.ProductWeight is not None:
            self.ProductWeight.export(outfile, level, namespace_, name_='ProductWeight', pretty_print=pretty_print)
        if self.VehicleID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:VehicleID>%s</IF:VehicleID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VehicleID), input_name='VehicleID')), eol_))
        if self.ScheduleB is not None:
            self.ScheduleB.export(outfile, level, namespace_, name_='ScheduleB', pretty_print=pretty_print)
        if self.ExportType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ExportType>%s</IF:ExportType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportType), input_name='ExportType')), eol_))
        if self.SEDTotalValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:SEDTotalValue>%s</IF:SEDTotalValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SEDTotalValue), input_name='SEDTotalValue')), eol_))
        if self.ExcludeFromForm is not None:
            self.ExcludeFromForm.export(outfile, level, namespace_, name_='ExcludeFromForm', pretty_print=pretty_print)
        if self.ProductCurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ProductCurrencyCode>%s</IF:ProductCurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProductCurrencyCode), input_name='ProductCurrencyCode')), eol_))
        if self.PackingListInfo is not None:
            self.PackingListInfo.export(outfile, level, namespace_, name_='PackingListInfo', pretty_print=pretty_print)
        if self.EEIInformation is not None:
            self.EEIInformation.export(outfile, level, namespace_, name_='EEIInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description.append(Description_)
        elif nodeName_ == 'Unit':
            obj_ = UnitType.factory()
            obj_.build(child_)
            self.Unit = obj_
            obj_.original_tagname_ = 'Unit'
        elif nodeName_ == 'CommodityCode':
            CommodityCode_ = child_.text
            CommodityCode_ = self.gds_validate_string(CommodityCode_, node, 'CommodityCode')
            self.CommodityCode = CommodityCode_
        elif nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
        elif nodeName_ == 'OriginCountryCode':
            OriginCountryCode_ = child_.text
            OriginCountryCode_ = self.gds_validate_string(OriginCountryCode_, node, 'OriginCountryCode')
            self.OriginCountryCode = OriginCountryCode_
        elif nodeName_ == 'JointProductionIndicator':
            JointProductionIndicator_ = child_.text
            JointProductionIndicator_ = self.gds_validate_string(JointProductionIndicator_, node, 'JointProductionIndicator')
            self.JointProductionIndicator = JointProductionIndicator_
        elif nodeName_ == 'NetCostCode':
            NetCostCode_ = child_.text
            NetCostCode_ = self.gds_validate_string(NetCostCode_, node, 'NetCostCode')
            self.NetCostCode = NetCostCode_
        elif nodeName_ == 'NetCostDateRange':
            obj_ = NetCostDateType.factory()
            obj_.build(child_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
        elif nodeName_ == 'PreferenceCriteria':
            PreferenceCriteria_ = child_.text
            PreferenceCriteria_ = self.gds_validate_string(PreferenceCriteria_, node, 'PreferenceCriteria')
            self.PreferenceCriteria = PreferenceCriteria_
        elif nodeName_ == 'ProducerInfo':
            ProducerInfo_ = child_.text
            ProducerInfo_ = self.gds_validate_string(ProducerInfo_, node, 'ProducerInfo')
            self.ProducerInfo = ProducerInfo_
        elif nodeName_ == 'MarksAndNumbers':
            MarksAndNumbers_ = child_.text
            MarksAndNumbers_ = self.gds_validate_string(MarksAndNumbers_, node, 'MarksAndNumbers')
            self.MarksAndNumbers = MarksAndNumbers_
        elif nodeName_ == 'NumberOfPackagesPerCommodity':
            NumberOfPackagesPerCommodity_ = child_.text
            NumberOfPackagesPerCommodity_ = self.gds_validate_string(NumberOfPackagesPerCommodity_, node, 'NumberOfPackagesPerCommodity')
            self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity_
        elif nodeName_ == 'ProductWeight':
            obj_ = ProductWeightType.factory()
            obj_.build(child_)
            self.ProductWeight = obj_
            obj_.original_tagname_ = 'ProductWeight'
        elif nodeName_ == 'VehicleID':
            VehicleID_ = child_.text
            VehicleID_ = self.gds_validate_string(VehicleID_, node, 'VehicleID')
            self.VehicleID = VehicleID_
        elif nodeName_ == 'ScheduleB':
            obj_ = ScheduleBType.factory()
            obj_.build(child_)
            self.ScheduleB = obj_
            obj_.original_tagname_ = 'ScheduleB'
        elif nodeName_ == 'ExportType':
            ExportType_ = child_.text
            ExportType_ = self.gds_validate_string(ExportType_, node, 'ExportType')
            self.ExportType = ExportType_
        elif nodeName_ == 'SEDTotalValue':
            SEDTotalValue_ = child_.text
            SEDTotalValue_ = self.gds_validate_string(SEDTotalValue_, node, 'SEDTotalValue')
            self.SEDTotalValue = SEDTotalValue_
        elif nodeName_ == 'ExcludeFromForm':
            obj_ = ExcludeFromFormType.factory()
            obj_.build(child_)
            self.ExcludeFromForm = obj_
            obj_.original_tagname_ = 'ExcludeFromForm'
        elif nodeName_ == 'ProductCurrencyCode':
            ProductCurrencyCode_ = child_.text
            ProductCurrencyCode_ = self.gds_validate_string(ProductCurrencyCode_, node, 'ProductCurrencyCode')
            self.ProductCurrencyCode = ProductCurrencyCode_
        elif nodeName_ == 'PackingListInfo':
            obj_ = PackingListInfoType.factory()
            obj_.build(child_)
            self.PackingListInfo = obj_
            obj_.original_tagname_ = 'PackingListInfo'
        elif nodeName_ == 'EEIInformation':
            obj_ = EEIInformationType.factory()
            obj_.build(child_)
            self.EEIInformation = obj_
            obj_.original_tagname_ = 'EEIInformation'
# end class ProductType


class ExcludeFromFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FormType=None):
        self.original_tagname_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExcludeFromFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExcludeFromFormType.subclass:
            return ExcludeFromFormType.subclass(*args_, **kwargs_)
        else:
            return ExcludeFromFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FormType(self): return self.FormType
    def set_FormType(self, FormType): self.FormType = FormType
    def add_FormType(self, value): self.FormType.append(value)
    def insert_FormType_at(self, index, value): self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value): self.FormType[index] = value
    def hasContent_(self):
        if (
            self.FormType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ExcludeFromFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExcludeFromFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExcludeFromFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ExcludeFromFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ExcludeFromFormType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ExcludeFromFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:FormType>%s</IF:FormType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FormType':
            FormType_ = child_.text
            FormType_ = self.gds_validate_string(FormType_, node, 'FormType')
            self.FormType.append(FormType_)
# end class ExcludeFromFormType


class UnitType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, UnitOfMeasurement=None, Value=None):
        self.original_tagname_ = None
        self.Number = Number
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitType.subclass:
            return UnitType.subclass(*args_, **kwargs_)
        else:
            return UnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.UnitOfMeasurement is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UnitType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UnitType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Number>%s</IF:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Value>%s</IF:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class UnitType


class PackingListInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageAssociated=None):
        self.original_tagname_ = None
        if PackageAssociated is None:
            self.PackageAssociated = []
        else:
            self.PackageAssociated = PackageAssociated
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListInfoType.subclass:
            return PackingListInfoType.subclass(*args_, **kwargs_)
        else:
            return PackingListInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageAssociated(self): return self.PackageAssociated
    def set_PackageAssociated(self, PackageAssociated): self.PackageAssociated = PackageAssociated
    def add_PackageAssociated(self, value): self.PackageAssociated.append(value)
    def insert_PackageAssociated_at(self, index, value): self.PackageAssociated.insert(index, value)
    def replace_PackageAssociated_at(self, index, value): self.PackageAssociated[index] = value
    def hasContent_(self):
        if (
            self.PackageAssociated
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='PackingListInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackingListInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='PackingListInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='PackingListInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='PackingListInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PackageAssociated_ in self.PackageAssociated:
            PackageAssociated_.export(outfile, level, namespace_, name_='PackageAssociated', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageAssociated':
            obj_ = PackageAssociatedType.factory()
            obj_.build(child_)
            self.PackageAssociated.append(obj_)
            obj_.original_tagname_ = 'PackageAssociated'
# end class PackingListInfoType


class PackageAssociatedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageNumber=None, ProductAmount=None):
        self.original_tagname_ = None
        self.PackageNumber = PackageNumber
        self.ProductAmount = ProductAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageAssociatedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageAssociatedType.subclass:
            return PackageAssociatedType.subclass(*args_, **kwargs_)
        else:
            return PackageAssociatedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageNumber(self): return self.PackageNumber
    def set_PackageNumber(self, PackageNumber): self.PackageNumber = PackageNumber
    def get_ProductAmount(self): return self.ProductAmount
    def set_ProductAmount(self, ProductAmount): self.ProductAmount = ProductAmount
    def hasContent_(self):
        if (
            self.PackageNumber is not None or
            self.ProductAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='PackageAssociatedType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageAssociatedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageAssociatedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='PackageAssociatedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='PackageAssociatedType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='PackageAssociatedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PackageNumber>%s</IF:PackageNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageNumber), input_name='PackageNumber')), eol_))
        if self.ProductAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ProductAmount>%s</IF:ProductAmount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProductAmount), input_name='ProductAmount')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageNumber':
            PackageNumber_ = child_.text
            PackageNumber_ = self.gds_validate_string(PackageNumber_, node, 'PackageNumber')
            self.PackageNumber = PackageNumber_
        elif nodeName_ == 'ProductAmount':
            ProductAmount_ = child_.text
            ProductAmount_ = self.gds_validate_string(ProductAmount_, node, 'ProductAmount')
            self.ProductAmount = ProductAmount_
# end class PackageAssociatedType


class UnitOfMeasurementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UnitOfMeasurementType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Code>%s</IF:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UnitOfMeasurementType


class NetCostDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None):
        self.original_tagname_ = None
        self.BeginDate = BeginDate
        self.EndDate = EndDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NetCostDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NetCostDateType.subclass:
            return NetCostDateType.subclass(*args_, **kwargs_)
        else:
            return NetCostDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BeginDate(self): return self.BeginDate
    def set_BeginDate(self, BeginDate): self.BeginDate = BeginDate
    def get_EndDate(self): return self.EndDate
    def set_EndDate(self, EndDate): self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='NetCostDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NetCostDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NetCostDateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='NetCostDateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='NetCostDateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='NetCostDateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:BeginDate>%s</IF:BeginDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EndDate>%s</IF:EndDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BeginDate':
            BeginDate_ = child_.text
            BeginDate_ = self.gds_validate_string(BeginDate_, node, 'BeginDate')
            self.BeginDate = BeginDate_
        elif nodeName_ == 'EndDate':
            EndDate_ = child_.text
            EndDate_ = self.gds_validate_string(EndDate_, node, 'EndDate')
            self.EndDate = EndDate_
# end class NetCostDateType


class ProductWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductWeightType.subclass:
            return ProductWeightType.subclass(*args_, **kwargs_)
        else:
            return ProductWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ProductWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ProductWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ProductWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ProductWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Weight>%s</IF:Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class ProductWeightType


class ScheduleBType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Quantity=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Number = Number
        if Quantity is None:
            self.Quantity = []
        else:
            self.Quantity = Quantity
        if UnitOfMeasurement is None:
            self.UnitOfMeasurement = []
        else:
            self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScheduleBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScheduleBType.subclass:
            return ScheduleBType.subclass(*args_, **kwargs_)
        else:
            return ScheduleBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def add_Quantity(self, value): self.Quantity.append(value)
    def insert_Quantity_at(self, index, value): self.Quantity.insert(index, value)
    def replace_Quantity_at(self, index, value): self.Quantity[index] = value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def add_UnitOfMeasurement(self, value): self.UnitOfMeasurement.append(value)
    def insert_UnitOfMeasurement_at(self, index, value): self.UnitOfMeasurement.insert(index, value)
    def replace_UnitOfMeasurement_at(self, index, value): self.UnitOfMeasurement[index] = value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Quantity or
            self.UnitOfMeasurement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ScheduleBType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScheduleBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ScheduleBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ScheduleBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ScheduleBType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ScheduleBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Number>%s</IF:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        for Quantity_ in self.Quantity:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Quantity>%s</IF:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Quantity_), input_name='Quantity')), eol_))
        for UnitOfMeasurement_ in self.UnitOfMeasurement:
            UnitOfMeasurement_.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity.append(Quantity_)
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement.append(obj_)
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ScheduleBType


class IFChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None):
        self.original_tagname_ = None
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IFChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IFChargesType.subclass:
            return IFChargesType.subclass(*args_, **kwargs_)
        else:
            return IFChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='IFChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IFChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IFChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='IFChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='IFChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='IFChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:MonetaryValue>%s</IF:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class IFChargesType


class OtherChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None, Description=None):
        self.original_tagname_ = None
        self.MonetaryValue = MonetaryValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OtherChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OtherChargesType.subclass:
            return OtherChargesType.subclass(*args_, **kwargs_)
        else:
            return OtherChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.MonetaryValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='OtherChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OtherChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OtherChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='OtherChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='OtherChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='OtherChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:MonetaryValue>%s</IF:MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class OtherChargesType


class BlanketPeriodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None):
        self.original_tagname_ = None
        self.BeginDate = BeginDate
        self.EndDate = EndDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BlanketPeriodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BlanketPeriodType.subclass:
            return BlanketPeriodType.subclass(*args_, **kwargs_)
        else:
            return BlanketPeriodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BeginDate(self): return self.BeginDate
    def set_BeginDate(self, BeginDate): self.BeginDate = BeginDate
    def get_EndDate(self): return self.EndDate
    def set_EndDate(self, EndDate): self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='BlanketPeriodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BlanketPeriodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BlanketPeriodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='BlanketPeriodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='BlanketPeriodType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='BlanketPeriodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:BeginDate>%s</IF:BeginDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EndDate>%s</IF:EndDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BeginDate':
            BeginDate_ = child_.text
            BeginDate_ = self.gds_validate_string(BeginDate_, node, 'BeginDate')
            self.BeginDate = BeginDate_
        elif nodeName_ == 'EndDate':
            EndDate_ = child_.text
            EndDate_ = self.gds_validate_string(EndDate_, node, 'EndDate')
            self.EndDate = EndDate_
# end class BlanketPeriodType


class LicenseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Date=None, ExceptionCode=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Date = Date
        self.ExceptionCode = ExceptionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseType.subclass:
            return LicenseType.subclass(*args_, **kwargs_)
        else:
            return LicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_ExceptionCode(self): return self.ExceptionCode
    def set_ExceptionCode(self, ExceptionCode): self.ExceptionCode = ExceptionCode
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Date is not None or
            self.ExceptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='LicenseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='LicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='LicenseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='LicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Number>%s</IF:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Date>%s</IF:Date>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), eol_))
        if self.ExceptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ExceptionCode>%s</IF:ExceptionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionCode), input_name='ExceptionCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'ExceptionCode':
            ExceptionCode_ = child_.text
            ExceptionCode_ = self.gds_validate_string(ExceptionCode_, node, 'ExceptionCode')
            self.ExceptionCode = ExceptionCode_
# end class LicenseType


class SoldToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, TaxIdentificationNumber=None, Phone=None, Option=None, Address=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Name = Name
        self.AttentionName = AttentionName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.Phone = Phone
        self.Option = Option
        self.Address = Address
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoldToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoldToType.subclass:
            return SoldToType.subclass(*args_, **kwargs_)
        else:
            return SoldToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.TaxIdentificationNumber is not None or
            self.Phone is not None or
            self.Option is not None or
            self.Address is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='SoldToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoldToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SoldToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='SoldToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='SoldToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='SoldToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Name>%s</IF:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:AttentionName>%s</IF:AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:TaxIdentificationNumber>%s</IF:TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespace_, name_='Phone', pretty_print=pretty_print)
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Option>%s</IF:Option>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EMailAddress>%s</IF:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'Option':
            Option_ = child_.text
            Option_ = self.gds_validate_string(Option_, node, 'Option')
            self.Option = Option_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class SoldToType


class PhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneType.subclass:
            return PhoneType.subclass(*args_, **kwargs_)
        else:
            return PhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='PhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='PhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='PhoneType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='PhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Number>%s</IF:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Extension>%s</IF:Extension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Extension':
            Extension_ = child_.text
            Extension_ = self.gds_validate_string(Extension_, node, 'Extension')
            self.Extension = Extension_
# end class PhoneType


class DDTCInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ITARExemptionNumber=None, USMLCategoryCode=None, EligiblePartyIndicator=None, RegistrationNumber=None, Quantity=None, UnitOfMeasurement=None, SignificantMilitaryEquipmentIndicator=None, ACMNumber=None):
        self.original_tagname_ = None
        self.ITARExemptionNumber = ITARExemptionNumber
        self.USMLCategoryCode = USMLCategoryCode
        self.EligiblePartyIndicator = EligiblePartyIndicator
        self.RegistrationNumber = RegistrationNumber
        self.Quantity = Quantity
        self.UnitOfMeasurement = UnitOfMeasurement
        self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
        self.ACMNumber = ACMNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DDTCInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DDTCInformationType.subclass:
            return DDTCInformationType.subclass(*args_, **kwargs_)
        else:
            return DDTCInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ITARExemptionNumber(self): return self.ITARExemptionNumber
    def set_ITARExemptionNumber(self, ITARExemptionNumber): self.ITARExemptionNumber = ITARExemptionNumber
    def get_USMLCategoryCode(self): return self.USMLCategoryCode
    def set_USMLCategoryCode(self, USMLCategoryCode): self.USMLCategoryCode = USMLCategoryCode
    def get_EligiblePartyIndicator(self): return self.EligiblePartyIndicator
    def set_EligiblePartyIndicator(self, EligiblePartyIndicator): self.EligiblePartyIndicator = EligiblePartyIndicator
    def get_RegistrationNumber(self): return self.RegistrationNumber
    def set_RegistrationNumber(self, RegistrationNumber): self.RegistrationNumber = RegistrationNumber
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_SignificantMilitaryEquipmentIndicator(self): return self.SignificantMilitaryEquipmentIndicator
    def set_SignificantMilitaryEquipmentIndicator(self, SignificantMilitaryEquipmentIndicator): self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
    def get_ACMNumber(self): return self.ACMNumber
    def set_ACMNumber(self, ACMNumber): self.ACMNumber = ACMNumber
    def hasContent_(self):
        if (
            self.ITARExemptionNumber is not None or
            self.USMLCategoryCode is not None or
            self.EligiblePartyIndicator is not None or
            self.RegistrationNumber is not None or
            self.Quantity is not None or
            self.UnitOfMeasurement is not None or
            self.SignificantMilitaryEquipmentIndicator is not None or
            self.ACMNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='DDTCInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DDTCInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DDTCInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='DDTCInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='DDTCInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='DDTCInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ITARExemptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ITARExemptionNumber>%s</IF:ITARExemptionNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ITARExemptionNumber), input_name='ITARExemptionNumber')), eol_))
        if self.USMLCategoryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:USMLCategoryCode>%s</IF:USMLCategoryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.USMLCategoryCode), input_name='USMLCategoryCode')), eol_))
        if self.EligiblePartyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EligiblePartyIndicator>%s</IF:EligiblePartyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EligiblePartyIndicator), input_name='EligiblePartyIndicator')), eol_))
        if self.RegistrationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:RegistrationNumber>%s</IF:RegistrationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumber), input_name='RegistrationNumber')), eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Quantity>%s</IF:Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.SignificantMilitaryEquipmentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:SignificantMilitaryEquipmentIndicator>%s</IF:SignificantMilitaryEquipmentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SignificantMilitaryEquipmentIndicator), input_name='SignificantMilitaryEquipmentIndicator')), eol_))
        if self.ACMNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ACMNumber>%s</IF:ACMNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ACMNumber), input_name='ACMNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ITARExemptionNumber':
            ITARExemptionNumber_ = child_.text
            ITARExemptionNumber_ = self.gds_validate_string(ITARExemptionNumber_, node, 'ITARExemptionNumber')
            self.ITARExemptionNumber = ITARExemptionNumber_
        elif nodeName_ == 'USMLCategoryCode':
            USMLCategoryCode_ = child_.text
            USMLCategoryCode_ = self.gds_validate_string(USMLCategoryCode_, node, 'USMLCategoryCode')
            self.USMLCategoryCode = USMLCategoryCode_
        elif nodeName_ == 'EligiblePartyIndicator':
            EligiblePartyIndicator_ = child_.text
            EligiblePartyIndicator_ = self.gds_validate_string(EligiblePartyIndicator_, node, 'EligiblePartyIndicator')
            self.EligiblePartyIndicator = EligiblePartyIndicator_
        elif nodeName_ == 'RegistrationNumber':
            RegistrationNumber_ = child_.text
            RegistrationNumber_ = self.gds_validate_string(RegistrationNumber_, node, 'RegistrationNumber')
            self.RegistrationNumber = RegistrationNumber_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'SignificantMilitaryEquipmentIndicator':
            SignificantMilitaryEquipmentIndicator_ = child_.text
            SignificantMilitaryEquipmentIndicator_ = self.gds_validate_string(SignificantMilitaryEquipmentIndicator_, node, 'SignificantMilitaryEquipmentIndicator')
            self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator_
        elif nodeName_ == 'ACMNumber':
            ACMNumber_ = child_.text
            ACMNumber_ = self.gds_validate_string(ACMNumber_, node, 'ACMNumber')
            self.ACMNumber = ACMNumber_
# end class DDTCInformationType


class EEILicenseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Code=None, LicenseLineValue=None, ECCNNumber=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Code = Code
        self.LicenseLineValue = LicenseLineValue
        self.ECCNNumber = ECCNNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEILicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEILicenseType.subclass:
            return EEILicenseType.subclass(*args_, **kwargs_)
        else:
            return EEILicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_LicenseLineValue(self): return self.LicenseLineValue
    def set_LicenseLineValue(self, LicenseLineValue): self.LicenseLineValue = LicenseLineValue
    def get_ECCNNumber(self): return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber): self.ECCNNumber = ECCNNumber
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Code is not None or
            self.LicenseLineValue is not None or
            self.ECCNNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='EEILicenseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEILicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EEILicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='EEILicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='EEILicenseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='EEILicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Number>%s</IF:Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Code>%s</IF:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.LicenseLineValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:LicenseLineValue>%s</IF:LicenseLineValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LicenseLineValue), input_name='LicenseLineValue')), eol_))
        if self.ECCNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ECCNNumber>%s</IF:ECCNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'LicenseLineValue':
            LicenseLineValue_ = child_.text
            LicenseLineValue_ = self.gds_validate_string(LicenseLineValue_, node, 'LicenseLineValue')
            self.LicenseLineValue = LicenseLineValue_
        elif nodeName_ == 'ECCNNumber':
            ECCNNumber_ = child_.text
            ECCNNumber_ = self.gds_validate_string(ECCNNumber_, node, 'ECCNNumber')
            self.ECCNNumber = ECCNNumber_
# end class EEILicenseType


class EEIFilingOptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, EMailAddress=None, Description=None, UPSFiled=None, ShipperFiled=None):
        self.original_tagname_ = None
        self.Code = Code
        self.EMailAddress = EMailAddress
        self.Description = Description
        self.UPSFiled = UPSFiled
        self.ShipperFiled = ShipperFiled
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIFilingOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIFilingOptionType.subclass:
            return EEIFilingOptionType.subclass(*args_, **kwargs_)
        else:
            return EEIFilingOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_UPSFiled(self): return self.UPSFiled
    def set_UPSFiled(self, UPSFiled): self.UPSFiled = UPSFiled
    def get_ShipperFiled(self): return self.ShipperFiled
    def set_ShipperFiled(self, ShipperFiled): self.ShipperFiled = ShipperFiled
    def hasContent_(self):
        if (
            self.Code is not None or
            self.EMailAddress is not None or
            self.Description is not None or
            self.UPSFiled is not None or
            self.ShipperFiled is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='EEIFilingOptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIFilingOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EEIFilingOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='EEIFilingOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='EEIFilingOptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='EEIFilingOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Code>%s</IF:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EMailAddress>%s</IF:EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.UPSFiled is not None:
            self.UPSFiled.export(outfile, level, namespace_, name_='UPSFiled', pretty_print=pretty_print)
        if self.ShipperFiled is not None:
            self.ShipperFiled.export(outfile, level, namespace_, name_='ShipperFiled', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'UPSFiled':
            obj_ = UPSFiledType.factory()
            obj_.build(child_)
            self.UPSFiled = obj_
            obj_.original_tagname_ = 'UPSFiled'
        elif nodeName_ == 'ShipperFiled':
            obj_ = ShipperFiledType.factory()
            obj_.build(child_)
            self.ShipperFiled = obj_
            obj_.original_tagname_ = 'ShipperFiled'
# end class EEIFilingOptionType


class UPSFiledType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, POA=None):
        self.original_tagname_ = None
        self.POA = POA
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSFiledType.subclass:
            return UPSFiledType.subclass(*args_, **kwargs_)
        else:
            return UPSFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_POA(self): return self.POA
    def set_POA(self, POA): self.POA = POA
    def hasContent_(self):
        if (
            self.POA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UPSFiledType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UPSFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UPSFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UPSFiledType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UPSFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.POA is not None:
            self.POA.export(outfile, level, namespace_, name_='POA', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'POA':
            obj_ = POAType.factory()
            obj_.build(child_)
            self.POA = obj_
            obj_.original_tagname_ = 'POA'
# end class UPSFiledType


class ShipperFiledType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, PreDepartureITNNumber=None, ExemptionLegend=None, EEIShipmentReferenceNumber=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.PreDepartureITNNumber = PreDepartureITNNumber
        self.ExemptionLegend = ExemptionLegend
        self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperFiledType.subclass:
            return ShipperFiledType.subclass(*args_, **kwargs_)
        else:
            return ShipperFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PreDepartureITNNumber(self): return self.PreDepartureITNNumber
    def set_PreDepartureITNNumber(self, PreDepartureITNNumber): self.PreDepartureITNNumber = PreDepartureITNNumber
    def get_ExemptionLegend(self): return self.ExemptionLegend
    def set_ExemptionLegend(self, ExemptionLegend): self.ExemptionLegend = ExemptionLegend
    def get_EEIShipmentReferenceNumber(self): return self.EEIShipmentReferenceNumber
    def set_EEIShipmentReferenceNumber(self, EEIShipmentReferenceNumber): self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.PreDepartureITNNumber is not None or
            self.ExemptionLegend is not None or
            self.EEIShipmentReferenceNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='ShipperFiledType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipperFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='ShipperFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='ShipperFiledType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='ShipperFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Code>%s</IF:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PreDepartureITNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:PreDepartureITNNumber>%s</IF:PreDepartureITNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PreDepartureITNNumber), input_name='PreDepartureITNNumber')), eol_))
        if self.ExemptionLegend is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ExemptionLegend>%s</IF:ExemptionLegend>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExemptionLegend), input_name='ExemptionLegend')), eol_))
        if self.EEIShipmentReferenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:EEIShipmentReferenceNumber>%s</IF:EEIShipmentReferenceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EEIShipmentReferenceNumber), input_name='EEIShipmentReferenceNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PreDepartureITNNumber':
            PreDepartureITNNumber_ = child_.text
            PreDepartureITNNumber_ = self.gds_validate_string(PreDepartureITNNumber_, node, 'PreDepartureITNNumber')
            self.PreDepartureITNNumber = PreDepartureITNNumber_
        elif nodeName_ == 'ExemptionLegend':
            ExemptionLegend_ = child_.text
            ExemptionLegend_ = self.gds_validate_string(ExemptionLegend_, node, 'ExemptionLegend')
            self.ExemptionLegend = ExemptionLegend_
        elif nodeName_ == 'EEIShipmentReferenceNumber':
            EEIShipmentReferenceNumber_ = child_.text
            EEIShipmentReferenceNumber_ = self.gds_validate_string(EEIShipmentReferenceNumber_, node, 'EEIShipmentReferenceNumber')
            self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber_
# end class ShipperFiledType


class EEIInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExportInformation=None, License=None, DDTCInformation=None):
        self.original_tagname_ = None
        self.ExportInformation = ExportInformation
        self.License = License
        self.DDTCInformation = DDTCInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIInformationType.subclass:
            return EEIInformationType.subclass(*args_, **kwargs_)
        else:
            return EEIInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExportInformation(self): return self.ExportInformation
    def set_ExportInformation(self, ExportInformation): self.ExportInformation = ExportInformation
    def get_License(self): return self.License
    def set_License(self, License): self.License = License
    def get_DDTCInformation(self): return self.DDTCInformation
    def set_DDTCInformation(self, DDTCInformation): self.DDTCInformation = DDTCInformation
    def hasContent_(self):
        if (
            self.ExportInformation is not None or
            self.License is not None or
            self.DDTCInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='EEIInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EEIInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='EEIInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='EEIInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='EEIInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExportInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:ExportInformation>%s</IF:ExportInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportInformation), input_name='ExportInformation')), eol_))
        if self.License is not None:
            self.License.export(outfile, level, namespace_, name_='License', pretty_print=pretty_print)
        if self.DDTCInformation is not None:
            self.DDTCInformation.export(outfile, level, namespace_, name_='DDTCInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExportInformation':
            ExportInformation_ = child_.text
            ExportInformation_ = self.gds_validate_string(ExportInformation_, node, 'ExportInformation')
            self.ExportInformation = ExportInformation_
        elif nodeName_ == 'License':
            obj_ = EEILicenseType.factory()
            obj_.build(child_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'DDTCInformation':
            obj_ = DDTCInformationType.factory()
            obj_.build(child_)
            self.DDTCInformation = obj_
            obj_.original_tagname_ = 'DDTCInformation'
# end class EEIInformationType


class POAType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POAType.subclass:
            return POAType.subclass(*args_, **kwargs_)
        else:
            return POAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='POAType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='POAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='POAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='POAType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='POAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Code>%s</IF:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class POAType


class UltimateConsigneeTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeTypeType.subclass:
            return UltimateConsigneeTypeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='IF:', name_='UltimateConsigneeTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UltimateConsigneeTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='IF:', name_='UltimateConsigneeTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='IF:', name_='UltimateConsigneeTypeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='IF:', name_='UltimateConsigneeTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Code>%s</IF:Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IF:Description>%s</IF:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UltimateConsigneeTypeType


class PropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Key=None, valueOf_=None):
        self.original_tagname_ = None
        self.Key = _cast(None, Key)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PropertyType.subclass:
            return PropertyType.subclass(*args_, **kwargs_)
        else:
            return PropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='fsp:', name_='PropertyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PropertyType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='fsp:', name_='PropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='fsp:', name_='PropertyType'):
        if self.Key is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            outfile.write(' Key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Key), input_name='Key')), ))
    def exportChildren(self, outfile, level, namespace_='fsp:', name_='PropertyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Key', node)
        if value is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            self.Key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PropertyType


GDSClassesMapping = {
    'ClientInformation': ClientInformationType,
    'Request': RequestType,
    'Response': ResponseType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:fsp="http://www.ups.com/XMLSchema/XOLTWS/FreightShip/v1.0"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:fsp="http://www.ups.com/XMLSchema/XOLTWS/FreightShip/v1.0"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from freight_ship import *\n\n')
        sys.stdout.write('import freight_ship as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AddressType",
    "AirFreightStatusType",
    "AmountType",
    "BlanketPeriodType",
    "CN22ContentType",
    "CN22FormType",
    "CODType",
    "CODValueType",
    "CWTType",
    "ClientInformationType",
    "CodeDescriptionType",
    "CommodityType",
    "CommodityValueType",
    "ConfirmationNumberType",
    "ContactType",
    "CountryOfManufactureType",
    "CubeType",
    "CustomsValueType",
    "DDTCInformationType",
    "DangerousGoodsType",
    "DeclaredValueType",
    "DeliveryOptionsType",
    "DetailType",
    "DimensionType",
    "DimensionValueType",
    "DimensionsType",
    "DocumentType",
    "DocumentsType",
    "EEIFilingOptionType",
    "EEIInformationType",
    "EEILicenseType",
    "EMailInformationType",
    "EMailNotificationType",
    "EMailType",
    "ElementIdentifierType",
    "ElementLevelInformationType",
    "ExcludeFromFormType",
    "ExistingShipmentIDType",
    "FactorType",
    "ForwardAgentType",
    "FreightDensityRateType",
    "FreightShipAddressType",
    "FreightShipPhoneType",
    "FreightShipRequest",
    "FreightShipResponse",
    "FreightShipUnitOfMeasurementType",
    "HandlingChargeAmountType",
    "HandlingChargeType",
    "HandlingUnitType",
    "HandlingUnitsDimensionsType",
    "HandlingUnitsType",
    "IFChargesType",
    "ImageCodeDescriptionType",
    "ImageFormsType",
    "ImageType",
    "IntermediateConsigneeType",
    "InternationalFormType",
    "LanguageForUPSPremiumCareType",
    "LicenseType",
    "NMFCCommodityType",
    "NetCostDateType",
    "OtherChargesType",
    "OverSeasLegType",
    "POAType",
    "POMType",
    "PackageAssociatedType",
    "PackingListCommodityType",
    "PackingListContactType",
    "PackingListDimensionsType",
    "PackingListHandlingUnitType",
    "PackingListInfoType",
    "PackingListReferenceType",
    "PackingListType",
    "PayerType",
    "PaymentInformationType",
    "PhoneType",
    "PickupNotificationsType",
    "PickupOptionsType",
    "PickupRequestType",
    "PreAuthReasonType",
    "PrintSizeType",
    "ProducerType",
    "ProductType",
    "ProductWeightType",
    "PropertyType",
    "RateType",
    "ReferenceNumberType",
    "ReferenceType",
    "RemitToType",
    "RequestType",
    "RequesterType",
    "ResponseType",
    "SMSType",
    "ScheduleBType",
    "ShipCodeDescriptionType",
    "ShipFromType",
    "ShipToType",
    "ShipmentResultsType",
    "ShipmentServiceOptionsType",
    "ShipmentTotalWeightType",
    "ShipmentType",
    "ShipperFiledType",
    "SoldToType",
    "SortingAndSegregatingType",
    "StatusType",
    "TaxIDCodeDescType",
    "TaxIDType",
    "TimeInTransitResponseType",
    "TotalShipmentChargeType",
    "TransactionReferenceType",
    "UPSFiledType",
    "UPSPremiumCareFormType",
    "UltimateConsigneeType",
    "UltimateConsigneeTypeType",
    "UnitOfMeasurementType",
    "UnitType",
    "UserCreatedFormType",
    "ValidAccessorialType",
    "ValidServiceType",
    "WeightType"
]
