#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:41 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/shipmentrequestin.py')
#
# Command line arguments:
#   ././shipmentrequestin.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/shipmentrequestin.py" ././shipmentrequestin.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ACTIVITY(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CREATE=None, RATE=None, BOOK=None, SHIP=None, PRINT=None, SHOW_GROUPCODE=None):
        self.original_tagname_ = None
        self.CREATE = CREATE
        self.RATE = RATE
        self.BOOK = BOOK
        self.SHIP = SHIP
        self.PRINT = PRINT
        self.SHOW_GROUPCODE = SHOW_GROUPCODE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ACTIVITY)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ACTIVITY.subclass:
            return ACTIVITY.subclass(*args_, **kwargs_)
        else:
            return ACTIVITY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CREATE(self): return self.CREATE
    def set_CREATE(self, CREATE): self.CREATE = CREATE
    def get_RATE(self): return self.RATE
    def set_RATE(self, RATE): self.RATE = RATE
    def get_BOOK(self): return self.BOOK
    def set_BOOK(self, BOOK): self.BOOK = BOOK
    def get_SHIP(self): return self.SHIP
    def set_SHIP(self, SHIP): self.SHIP = SHIP
    def get_PRINT(self): return self.PRINT
    def set_PRINT(self, PRINT): self.PRINT = PRINT
    def get_SHOW_GROUPCODE(self): return self.SHOW_GROUPCODE
    def set_SHOW_GROUPCODE(self, SHOW_GROUPCODE): self.SHOW_GROUPCODE = SHOW_GROUPCODE
    def hasContent_(self):
        if (
            self.CREATE is not None or
            self.RATE is not None or
            self.BOOK is not None or
            self.SHIP is not None or
            self.PRINT is not None or
            self.SHOW_GROUPCODE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ACTIVITY', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ACTIVITY')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ACTIVITY')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ACTIVITY', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ACTIVITY'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ACTIVITY', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CREATE is not None:
            self.CREATE.export(outfile, level, namespace_, name_='CREATE', pretty_print=pretty_print)
        if self.RATE is not None:
            self.RATE.export(outfile, level, namespace_, name_='RATE', pretty_print=pretty_print)
        if self.BOOK is not None:
            self.BOOK.export(outfile, level, namespace_, name_='BOOK', pretty_print=pretty_print)
        if self.SHIP is not None:
            self.SHIP.export(outfile, level, namespace_, name_='SHIP', pretty_print=pretty_print)
        if self.PRINT is not None:
            self.PRINT.export(outfile, level, namespace_, name_='PRINT', pretty_print=pretty_print)
        if self.SHOW_GROUPCODE is not None:
            self.SHOW_GROUPCODE.export(outfile, level, namespace_, name_='SHOW_GROUPCODE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CREATE':
            obj_ = CREATE.factory()
            obj_.build(child_)
            self.CREATE = obj_
            obj_.original_tagname_ = 'CREATE'
        elif nodeName_ == 'RATE':
            obj_ = RATE.factory()
            obj_.build(child_)
            self.RATE = obj_
            obj_.original_tagname_ = 'RATE'
        elif nodeName_ == 'BOOK':
            obj_ = BOOK.factory()
            obj_.build(child_)
            self.BOOK = obj_
            obj_.original_tagname_ = 'BOOK'
        elif nodeName_ == 'SHIP':
            obj_ = SHIP.factory()
            obj_.build(child_)
            self.SHIP = obj_
            obj_.original_tagname_ = 'SHIP'
        elif nodeName_ == 'PRINT':
            obj_ = PRINT.factory()
            obj_.build(child_)
            self.PRINT = obj_
            obj_.original_tagname_ = 'PRINT'
        elif nodeName_ == 'SHOW_GROUPCODE':
            obj_ = SHOW_GROUPCODE.factory()
            obj_.build(child_)
            self.SHOW_GROUPCODE = obj_
            obj_.original_tagname_ = 'SHOW_GROUPCODE'
# end class ACTIVITY


class ALTCOLLECTTIME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FROM=None, TO=None):
        self.original_tagname_ = None
        self.FROM = FROM
        self.TO = TO
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ALTCOLLECTTIME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ALTCOLLECTTIME.subclass:
            return ALTCOLLECTTIME.subclass(*args_, **kwargs_)
        else:
            return ALTCOLLECTTIME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FROM(self): return self.FROM
    def set_FROM(self, FROM): self.FROM = FROM
    def get_TO(self): return self.TO
    def set_TO(self, TO): self.TO = TO
    def hasContent_(self):
        if (
            self.FROM is not None or
            self.TO is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ALTCOLLECTTIME', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ALTCOLLECTTIME')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ALTCOLLECTTIME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ALTCOLLECTTIME', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ALTCOLLECTTIME'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ALTCOLLECTTIME', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FROM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FROM>%s</FROM>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FROM), input_name='FROM')), eol_))
        if self.TO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TO>%s</TO>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TO), input_name='TO')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FROM':
            FROM_ = child_.text
            FROM_ = self.gds_validate_string(FROM_, node, 'FROM')
            self.FROM = FROM_
        elif nodeName_ == 'TO':
            TO_ = child_.text
            TO_ = self.gds_validate_string(TO_, node, 'TO')
            self.TO = TO_
# end class ALTCOLLECTTIME


class ARTICLE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ITEMS=None, DESCRIPTION=None, WEIGHT=None, INVOICEVALUE=None, INVOICEDESC=None, HTS=None, COUNTRY=None, EMRN=None):
        self.original_tagname_ = None
        self.ITEMS = ITEMS
        self.DESCRIPTION = DESCRIPTION
        self.WEIGHT = WEIGHT
        self.INVOICEVALUE = INVOICEVALUE
        self.INVOICEDESC = INVOICEDESC
        self.HTS = HTS
        self.COUNTRY = COUNTRY
        self.EMRN = EMRN
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ARTICLE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ARTICLE.subclass:
            return ARTICLE.subclass(*args_, **kwargs_)
        else:
            return ARTICLE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ITEMS(self): return self.ITEMS
    def set_ITEMS(self, ITEMS): self.ITEMS = ITEMS
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_WEIGHT(self): return self.WEIGHT
    def set_WEIGHT(self, WEIGHT): self.WEIGHT = WEIGHT
    def get_INVOICEVALUE(self): return self.INVOICEVALUE
    def set_INVOICEVALUE(self, INVOICEVALUE): self.INVOICEVALUE = INVOICEVALUE
    def get_INVOICEDESC(self): return self.INVOICEDESC
    def set_INVOICEDESC(self, INVOICEDESC): self.INVOICEDESC = INVOICEDESC
    def get_HTS(self): return self.HTS
    def set_HTS(self, HTS): self.HTS = HTS
    def get_COUNTRY(self): return self.COUNTRY
    def set_COUNTRY(self, COUNTRY): self.COUNTRY = COUNTRY
    def get_EMRN(self): return self.EMRN
    def set_EMRN(self, EMRN): self.EMRN = EMRN
    def hasContent_(self):
        if (
            self.ITEMS is not None or
            self.DESCRIPTION is not None or
            self.WEIGHT is not None or
            self.INVOICEVALUE is not None or
            self.INVOICEDESC is not None or
            self.HTS is not None or
            self.COUNTRY is not None or
            self.EMRN is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ARTICLE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ARTICLE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ARTICLE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ARTICLE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ARTICLE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ARTICLE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ITEMS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ITEMS>%s</ITEMS>%s' % (self.gds_format_integer(self.ITEMS, input_name='ITEMS'), eol_))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DESCRIPTION>%s</DESCRIPTION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DESCRIPTION), input_name='DESCRIPTION')), eol_))
        if self.WEIGHT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WEIGHT>%s</WEIGHT>%s' % (self.gds_format_float(self.WEIGHT, input_name='WEIGHT'), eol_))
        if self.INVOICEVALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<INVOICEVALUE>%s</INVOICEVALUE>%s' % (self.gds_format_float(self.INVOICEVALUE, input_name='INVOICEVALUE'), eol_))
        if self.INVOICEDESC is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<INVOICEDESC>%s</INVOICEDESC>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.INVOICEDESC), input_name='INVOICEDESC')), eol_))
        if self.HTS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HTS>%s</HTS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HTS), input_name='HTS')), eol_))
        if self.COUNTRY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COUNTRY>%s</COUNTRY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COUNTRY), input_name='COUNTRY')), eol_))
        if self.EMRN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMRN>%s</EMRN>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMRN), input_name='EMRN')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ITEMS':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ITEMS')
            self.ITEMS = ival_
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
        elif nodeName_ == 'WEIGHT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'WEIGHT')
            self.WEIGHT = fval_
        elif nodeName_ == 'INVOICEVALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'INVOICEVALUE')
            self.INVOICEVALUE = fval_
        elif nodeName_ == 'INVOICEDESC':
            INVOICEDESC_ = child_.text
            INVOICEDESC_ = self.gds_validate_string(INVOICEDESC_, node, 'INVOICEDESC')
            self.INVOICEDESC = INVOICEDESC_
        elif nodeName_ == 'HTS':
            HTS_ = child_.text
            HTS_ = self.gds_validate_string(HTS_, node, 'HTS')
            self.HTS = HTS_
        elif nodeName_ == 'COUNTRY':
            COUNTRY_ = child_.text
            COUNTRY_ = self.gds_validate_string(COUNTRY_, node, 'COUNTRY')
            self.COUNTRY = COUNTRY_
        elif nodeName_ == 'EMRN':
            EMRN_ = child_.text
            EMRN_ = self.gds_validate_string(EMRN_, node, 'EMRN')
            self.EMRN = EMRN_
# end class ARTICLE


class BOOK(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMAILREQD=None, ShowBookingRef=None):
        self.original_tagname_ = None
        self.EMAILREQD = _cast(None, EMAILREQD)
        self.ShowBookingRef = _cast(None, ShowBookingRef)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BOOK)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BOOK.subclass:
            return BOOK.subclass(*args_, **kwargs_)
        else:
            return BOOK(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMAILREQD(self): return self.EMAILREQD
    def set_EMAILREQD(self, EMAILREQD): self.EMAILREQD = EMAILREQD
    def get_ShowBookingRef(self): return self.ShowBookingRef
    def set_ShowBookingRef(self, ShowBookingRef): self.ShowBookingRef = ShowBookingRef
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BOOK', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BOOK')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BOOK')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BOOK', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BOOK'):
        if self.EMAILREQD is not None and 'EMAILREQD' not in already_processed:
            already_processed.add('EMAILREQD')
            outfile.write(' EMAILREQD=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.EMAILREQD), input_name='EMAILREQD')), ))
        if self.ShowBookingRef is not None and 'ShowBookingRef' not in already_processed:
            already_processed.add('ShowBookingRef')
            outfile.write(' ShowBookingRef=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ShowBookingRef), input_name='ShowBookingRef')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='BOOK', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('EMAILREQD', node)
        if value is not None and 'EMAILREQD' not in already_processed:
            already_processed.add('EMAILREQD')
            self.EMAILREQD = value
        value = find_attr_value_('ShowBookingRef', node)
        if value is not None and 'ShowBookingRef' not in already_processed:
            already_processed.add('ShowBookingRef')
            self.ShowBookingRef = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class BOOK


class COLLECTION(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, COLLECTIONADDRESS=None, SHIPDATE=None, PREFCOLLECTTIME=None, ALTCOLLECTTIME=None, COLLINSTRUCTIONS=None, CONFIRMATIONEMAILADDRESS=None):
        self.original_tagname_ = None
        self.COLLECTIONADDRESS = COLLECTIONADDRESS
        self.SHIPDATE = SHIPDATE
        self.PREFCOLLECTTIME = PREFCOLLECTTIME
        self.ALTCOLLECTTIME = ALTCOLLECTTIME
        self.COLLINSTRUCTIONS = COLLINSTRUCTIONS
        self.CONFIRMATIONEMAILADDRESS = CONFIRMATIONEMAILADDRESS
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, COLLECTION)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if COLLECTION.subclass:
            return COLLECTION.subclass(*args_, **kwargs_)
        else:
            return COLLECTION(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_COLLECTIONADDRESS(self): return self.COLLECTIONADDRESS
    def set_COLLECTIONADDRESS(self, COLLECTIONADDRESS): self.COLLECTIONADDRESS = COLLECTIONADDRESS
    def get_SHIPDATE(self): return self.SHIPDATE
    def set_SHIPDATE(self, SHIPDATE): self.SHIPDATE = SHIPDATE
    def get_PREFCOLLECTTIME(self): return self.PREFCOLLECTTIME
    def set_PREFCOLLECTTIME(self, PREFCOLLECTTIME): self.PREFCOLLECTTIME = PREFCOLLECTTIME
    def get_ALTCOLLECTTIME(self): return self.ALTCOLLECTTIME
    def set_ALTCOLLECTTIME(self, ALTCOLLECTTIME): self.ALTCOLLECTTIME = ALTCOLLECTTIME
    def get_COLLINSTRUCTIONS(self): return self.COLLINSTRUCTIONS
    def set_COLLINSTRUCTIONS(self, COLLINSTRUCTIONS): self.COLLINSTRUCTIONS = COLLINSTRUCTIONS
    def get_CONFIRMATIONEMAILADDRESS(self): return self.CONFIRMATIONEMAILADDRESS
    def set_CONFIRMATIONEMAILADDRESS(self, CONFIRMATIONEMAILADDRESS): self.CONFIRMATIONEMAILADDRESS = CONFIRMATIONEMAILADDRESS
    def hasContent_(self):
        if (
            self.COLLECTIONADDRESS is not None or
            self.SHIPDATE is not None or
            self.PREFCOLLECTTIME is not None or
            self.ALTCOLLECTTIME is not None or
            self.COLLINSTRUCTIONS is not None or
            self.CONFIRMATIONEMAILADDRESS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='COLLECTION', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('COLLECTION')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='COLLECTION')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='COLLECTION', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='COLLECTION'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='COLLECTION', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.COLLECTIONADDRESS is not None:
            self.COLLECTIONADDRESS.export(outfile, level, namespace_, name_='COLLECTIONADDRESS', pretty_print=pretty_print)
        if self.SHIPDATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SHIPDATE>%s</SHIPDATE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SHIPDATE), input_name='SHIPDATE')), eol_))
        if self.PREFCOLLECTTIME is not None:
            self.PREFCOLLECTTIME.export(outfile, level, namespace_, name_='PREFCOLLECTTIME', pretty_print=pretty_print)
        if self.ALTCOLLECTTIME is not None:
            self.ALTCOLLECTTIME.export(outfile, level, namespace_, name_='ALTCOLLECTTIME', pretty_print=pretty_print)
        if self.COLLINSTRUCTIONS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COLLINSTRUCTIONS>%s</COLLINSTRUCTIONS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COLLINSTRUCTIONS), input_name='COLLINSTRUCTIONS')), eol_))
        if self.CONFIRMATIONEMAILADDRESS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONFIRMATIONEMAILADDRESS>%s</CONFIRMATIONEMAILADDRESS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONFIRMATIONEMAILADDRESS), input_name='CONFIRMATIONEMAILADDRESS')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'COLLECTIONADDRESS':
            obj_ = COLLECTIONADDRESS.factory()
            obj_.build(child_)
            self.COLLECTIONADDRESS = obj_
            obj_.original_tagname_ = 'COLLECTIONADDRESS'
        elif nodeName_ == 'SHIPDATE':
            SHIPDATE_ = child_.text
            SHIPDATE_ = self.gds_validate_string(SHIPDATE_, node, 'SHIPDATE')
            self.SHIPDATE = SHIPDATE_
        elif nodeName_ == 'PREFCOLLECTTIME':
            obj_ = PREFCOLLECTTIME.factory()
            obj_.build(child_)
            self.PREFCOLLECTTIME = obj_
            obj_.original_tagname_ = 'PREFCOLLECTTIME'
        elif nodeName_ == 'ALTCOLLECTTIME':
            obj_ = ALTCOLLECTTIME.factory()
            obj_.build(child_)
            self.ALTCOLLECTTIME = obj_
            obj_.original_tagname_ = 'ALTCOLLECTTIME'
        elif nodeName_ == 'COLLINSTRUCTIONS':
            COLLINSTRUCTIONS_ = child_.text
            COLLINSTRUCTIONS_ = self.gds_validate_string(COLLINSTRUCTIONS_, node, 'COLLINSTRUCTIONS')
            self.COLLINSTRUCTIONS = COLLINSTRUCTIONS_
        elif nodeName_ == 'CONFIRMATIONEMAILADDRESS':
            CONFIRMATIONEMAILADDRESS_ = child_.text
            CONFIRMATIONEMAILADDRESS_ = self.gds_validate_string(CONFIRMATIONEMAILADDRESS_, node, 'CONFIRMATIONEMAILADDRESS')
            self.CONFIRMATIONEMAILADDRESS = CONFIRMATIONEMAILADDRESS_
# end class COLLECTION


class COLLECTIONADDRESS(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, COMPANYNAME=None, STREETADDRESS1=None, STREETADDRESS2=None, STREETADDRESS3=None, CITY=None, PROVINCE=None, POSTCODE=None, COUNTRY=None, VAT=None, CONTACTNAME=None, CONTACTDIALCODE=None, CONTACTTELEPHONE=None, CONTACTEMAIL=None):
        self.original_tagname_ = None
        self.COMPANYNAME = COMPANYNAME
        self.STREETADDRESS1 = STREETADDRESS1
        self.STREETADDRESS2 = STREETADDRESS2
        self.STREETADDRESS3 = STREETADDRESS3
        self.CITY = CITY
        self.PROVINCE = PROVINCE
        self.POSTCODE = POSTCODE
        self.COUNTRY = COUNTRY
        self.VAT = VAT
        self.CONTACTNAME = CONTACTNAME
        self.CONTACTDIALCODE = CONTACTDIALCODE
        self.CONTACTTELEPHONE = CONTACTTELEPHONE
        self.CONTACTEMAIL = CONTACTEMAIL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, COLLECTIONADDRESS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if COLLECTIONADDRESS.subclass:
            return COLLECTIONADDRESS.subclass(*args_, **kwargs_)
        else:
            return COLLECTIONADDRESS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_COMPANYNAME(self): return self.COMPANYNAME
    def set_COMPANYNAME(self, COMPANYNAME): self.COMPANYNAME = COMPANYNAME
    def get_STREETADDRESS1(self): return self.STREETADDRESS1
    def set_STREETADDRESS1(self, STREETADDRESS1): self.STREETADDRESS1 = STREETADDRESS1
    def get_STREETADDRESS2(self): return self.STREETADDRESS2
    def set_STREETADDRESS2(self, STREETADDRESS2): self.STREETADDRESS2 = STREETADDRESS2
    def get_STREETADDRESS3(self): return self.STREETADDRESS3
    def set_STREETADDRESS3(self, STREETADDRESS3): self.STREETADDRESS3 = STREETADDRESS3
    def get_CITY(self): return self.CITY
    def set_CITY(self, CITY): self.CITY = CITY
    def get_PROVINCE(self): return self.PROVINCE
    def set_PROVINCE(self, PROVINCE): self.PROVINCE = PROVINCE
    def get_POSTCODE(self): return self.POSTCODE
    def set_POSTCODE(self, POSTCODE): self.POSTCODE = POSTCODE
    def get_COUNTRY(self): return self.COUNTRY
    def set_COUNTRY(self, COUNTRY): self.COUNTRY = COUNTRY
    def get_VAT(self): return self.VAT
    def set_VAT(self, VAT): self.VAT = VAT
    def get_CONTACTNAME(self): return self.CONTACTNAME
    def set_CONTACTNAME(self, CONTACTNAME): self.CONTACTNAME = CONTACTNAME
    def get_CONTACTDIALCODE(self): return self.CONTACTDIALCODE
    def set_CONTACTDIALCODE(self, CONTACTDIALCODE): self.CONTACTDIALCODE = CONTACTDIALCODE
    def get_CONTACTTELEPHONE(self): return self.CONTACTTELEPHONE
    def set_CONTACTTELEPHONE(self, CONTACTTELEPHONE): self.CONTACTTELEPHONE = CONTACTTELEPHONE
    def get_CONTACTEMAIL(self): return self.CONTACTEMAIL
    def set_CONTACTEMAIL(self, CONTACTEMAIL): self.CONTACTEMAIL = CONTACTEMAIL
    def hasContent_(self):
        if (
            self.COMPANYNAME is not None or
            self.STREETADDRESS1 is not None or
            self.STREETADDRESS2 is not None or
            self.STREETADDRESS3 is not None or
            self.CITY is not None or
            self.PROVINCE is not None or
            self.POSTCODE is not None or
            self.COUNTRY is not None or
            self.VAT is not None or
            self.CONTACTNAME is not None or
            self.CONTACTDIALCODE is not None or
            self.CONTACTTELEPHONE is not None or
            self.CONTACTEMAIL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='COLLECTIONADDRESS', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('COLLECTIONADDRESS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='COLLECTIONADDRESS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='COLLECTIONADDRESS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='COLLECTIONADDRESS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='COLLECTIONADDRESS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.COMPANYNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COMPANYNAME>%s</COMPANYNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COMPANYNAME), input_name='COMPANYNAME')), eol_))
        if self.STREETADDRESS1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS1>%s</STREETADDRESS1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS1), input_name='STREETADDRESS1')), eol_))
        if self.STREETADDRESS2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS2>%s</STREETADDRESS2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS2), input_name='STREETADDRESS2')), eol_))
        if self.STREETADDRESS3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS3>%s</STREETADDRESS3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS3), input_name='STREETADDRESS3')), eol_))
        if self.CITY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CITY>%s</CITY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CITY), input_name='CITY')), eol_))
        if self.PROVINCE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PROVINCE>%s</PROVINCE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PROVINCE), input_name='PROVINCE')), eol_))
        if self.POSTCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POSTCODE>%s</POSTCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POSTCODE), input_name='POSTCODE')), eol_))
        if self.COUNTRY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COUNTRY>%s</COUNTRY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COUNTRY), input_name='COUNTRY')), eol_))
        if self.VAT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<VAT>%s</VAT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VAT), input_name='VAT')), eol_))
        if self.CONTACTNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTNAME>%s</CONTACTNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTNAME), input_name='CONTACTNAME')), eol_))
        if self.CONTACTDIALCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTDIALCODE>%s</CONTACTDIALCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTDIALCODE), input_name='CONTACTDIALCODE')), eol_))
        if self.CONTACTTELEPHONE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTTELEPHONE>%s</CONTACTTELEPHONE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTTELEPHONE), input_name='CONTACTTELEPHONE')), eol_))
        if self.CONTACTEMAIL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTEMAIL>%s</CONTACTEMAIL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTEMAIL), input_name='CONTACTEMAIL')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'COMPANYNAME':
            COMPANYNAME_ = child_.text
            COMPANYNAME_ = self.gds_validate_string(COMPANYNAME_, node, 'COMPANYNAME')
            self.COMPANYNAME = COMPANYNAME_
        elif nodeName_ == 'STREETADDRESS1':
            STREETADDRESS1_ = child_.text
            STREETADDRESS1_ = self.gds_validate_string(STREETADDRESS1_, node, 'STREETADDRESS1')
            self.STREETADDRESS1 = STREETADDRESS1_
        elif nodeName_ == 'STREETADDRESS2':
            STREETADDRESS2_ = child_.text
            STREETADDRESS2_ = self.gds_validate_string(STREETADDRESS2_, node, 'STREETADDRESS2')
            self.STREETADDRESS2 = STREETADDRESS2_
        elif nodeName_ == 'STREETADDRESS3':
            STREETADDRESS3_ = child_.text
            STREETADDRESS3_ = self.gds_validate_string(STREETADDRESS3_, node, 'STREETADDRESS3')
            self.STREETADDRESS3 = STREETADDRESS3_
        elif nodeName_ == 'CITY':
            CITY_ = child_.text
            CITY_ = self.gds_validate_string(CITY_, node, 'CITY')
            self.CITY = CITY_
        elif nodeName_ == 'PROVINCE':
            PROVINCE_ = child_.text
            PROVINCE_ = self.gds_validate_string(PROVINCE_, node, 'PROVINCE')
            self.PROVINCE = PROVINCE_
        elif nodeName_ == 'POSTCODE':
            POSTCODE_ = child_.text
            POSTCODE_ = self.gds_validate_string(POSTCODE_, node, 'POSTCODE')
            self.POSTCODE = POSTCODE_
        elif nodeName_ == 'COUNTRY':
            COUNTRY_ = child_.text
            COUNTRY_ = self.gds_validate_string(COUNTRY_, node, 'COUNTRY')
            self.COUNTRY = COUNTRY_
        elif nodeName_ == 'VAT':
            VAT_ = child_.text
            VAT_ = self.gds_validate_string(VAT_, node, 'VAT')
            self.VAT = VAT_
        elif nodeName_ == 'CONTACTNAME':
            CONTACTNAME_ = child_.text
            CONTACTNAME_ = self.gds_validate_string(CONTACTNAME_, node, 'CONTACTNAME')
            self.CONTACTNAME = CONTACTNAME_
        elif nodeName_ == 'CONTACTDIALCODE':
            CONTACTDIALCODE_ = child_.text
            CONTACTDIALCODE_ = self.gds_validate_string(CONTACTDIALCODE_, node, 'CONTACTDIALCODE')
            self.CONTACTDIALCODE = CONTACTDIALCODE_
        elif nodeName_ == 'CONTACTTELEPHONE':
            CONTACTTELEPHONE_ = child_.text
            CONTACTTELEPHONE_ = self.gds_validate_string(CONTACTTELEPHONE_, node, 'CONTACTTELEPHONE')
            self.CONTACTTELEPHONE = CONTACTTELEPHONE_
        elif nodeName_ == 'CONTACTEMAIL':
            CONTACTEMAIL_ = child_.text
            CONTACTEMAIL_ = self.gds_validate_string(CONTACTEMAIL_, node, 'CONTACTEMAIL')
            self.CONTACTEMAIL = CONTACTEMAIL_
# end class COLLECTIONADDRESS


class CONNOTE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CONNOTE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CONNOTE.subclass:
            return CONNOTE.subclass(*args_, **kwargs_)
        else:
            return CONNOTE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CONNOTE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CONNOTE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CONNOTE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CONNOTE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CONNOTE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CONNOTE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CONNOTE


class CONSIGNMENT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DETAILS=None):
        self.original_tagname_ = None
        self.DETAILS = DETAILS
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CONSIGNMENT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CONSIGNMENT.subclass:
            return CONSIGNMENT.subclass(*args_, **kwargs_)
        else:
            return CONSIGNMENT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DETAILS(self): return self.DETAILS
    def set_DETAILS(self, DETAILS): self.DETAILS = DETAILS
    def hasContent_(self):
        if (
            self.DETAILS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CONSIGNMENT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CONSIGNMENT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CONSIGNMENT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CONSIGNMENT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CONSIGNMENT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CONSIGNMENT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DETAILS is not None:
            self.DETAILS.export(outfile, level, namespace_, name_='DETAILS', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DETAILS':
            obj_ = DETAILS.factory()
            obj_.build(child_)
            self.DETAILS = obj_
            obj_.original_tagname_ = 'DETAILS'
# end class CONSIGNMENT


class CONSIGNMENTBATCH(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SENDER=None, CONSIGNMENT=None):
        self.original_tagname_ = None
        self.SENDER = SENDER
        if CONSIGNMENT is None:
            self.CONSIGNMENT = []
        else:
            self.CONSIGNMENT = CONSIGNMENT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CONSIGNMENTBATCH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CONSIGNMENTBATCH.subclass:
            return CONSIGNMENTBATCH.subclass(*args_, **kwargs_)
        else:
            return CONSIGNMENTBATCH(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SENDER(self): return self.SENDER
    def set_SENDER(self, SENDER): self.SENDER = SENDER
    def get_CONSIGNMENT(self): return self.CONSIGNMENT
    def set_CONSIGNMENT(self, CONSIGNMENT): self.CONSIGNMENT = CONSIGNMENT
    def add_CONSIGNMENT(self, value): self.CONSIGNMENT.append(value)
    def insert_CONSIGNMENT_at(self, index, value): self.CONSIGNMENT.insert(index, value)
    def replace_CONSIGNMENT_at(self, index, value): self.CONSIGNMENT[index] = value
    def hasContent_(self):
        if (
            self.SENDER is not None or
            self.CONSIGNMENT
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CONSIGNMENTBATCH', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CONSIGNMENTBATCH')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CONSIGNMENTBATCH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CONSIGNMENTBATCH', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CONSIGNMENTBATCH'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CONSIGNMENTBATCH', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SENDER is not None:
            self.SENDER.export(outfile, level, namespace_, name_='SENDER', pretty_print=pretty_print)
        for CONSIGNMENT_ in self.CONSIGNMENT:
            CONSIGNMENT_.export(outfile, level, namespace_, name_='CONSIGNMENT', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SENDER':
            obj_ = SENDER.factory()
            obj_.build(child_)
            self.SENDER = obj_
            obj_.original_tagname_ = 'SENDER'
        elif nodeName_ == 'CONSIGNMENT':
            obj_ = CONSIGNMENT.factory()
            obj_.build(child_)
            self.CONSIGNMENT.append(obj_)
            obj_.original_tagname_ = 'CONSIGNMENT'
# end class CONSIGNMENTBATCH


class CREATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CREATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CREATE.subclass:
            return CREATE.subclass(*args_, **kwargs_)
        else:
            return CREATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CREATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CREATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CREATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CREATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CREATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CREATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CREATE


class DELIVERY(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, COMPANYNAME=None, STREETADDRESS1=None, STREETADDRESS2=None, STREETADDRESS3=None, CITY=None, PROVINCE=None, POSTCODE=None, COUNTRY=None, VAT=None, CONTACTNAME=None, CONTACTDIALCODE=None, CONTACTTELEPHONE=None, CONTACTEMAIL=None):
        self.original_tagname_ = None
        self.COMPANYNAME = COMPANYNAME
        self.STREETADDRESS1 = STREETADDRESS1
        self.STREETADDRESS2 = STREETADDRESS2
        self.STREETADDRESS3 = STREETADDRESS3
        self.CITY = CITY
        self.PROVINCE = PROVINCE
        self.POSTCODE = POSTCODE
        self.COUNTRY = COUNTRY
        self.VAT = VAT
        self.CONTACTNAME = CONTACTNAME
        self.CONTACTDIALCODE = CONTACTDIALCODE
        self.CONTACTTELEPHONE = CONTACTTELEPHONE
        self.CONTACTEMAIL = CONTACTEMAIL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DELIVERY)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DELIVERY.subclass:
            return DELIVERY.subclass(*args_, **kwargs_)
        else:
            return DELIVERY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_COMPANYNAME(self): return self.COMPANYNAME
    def set_COMPANYNAME(self, COMPANYNAME): self.COMPANYNAME = COMPANYNAME
    def get_STREETADDRESS1(self): return self.STREETADDRESS1
    def set_STREETADDRESS1(self, STREETADDRESS1): self.STREETADDRESS1 = STREETADDRESS1
    def get_STREETADDRESS2(self): return self.STREETADDRESS2
    def set_STREETADDRESS2(self, STREETADDRESS2): self.STREETADDRESS2 = STREETADDRESS2
    def get_STREETADDRESS3(self): return self.STREETADDRESS3
    def set_STREETADDRESS3(self, STREETADDRESS3): self.STREETADDRESS3 = STREETADDRESS3
    def get_CITY(self): return self.CITY
    def set_CITY(self, CITY): self.CITY = CITY
    def get_PROVINCE(self): return self.PROVINCE
    def set_PROVINCE(self, PROVINCE): self.PROVINCE = PROVINCE
    def get_POSTCODE(self): return self.POSTCODE
    def set_POSTCODE(self, POSTCODE): self.POSTCODE = POSTCODE
    def get_COUNTRY(self): return self.COUNTRY
    def set_COUNTRY(self, COUNTRY): self.COUNTRY = COUNTRY
    def get_VAT(self): return self.VAT
    def set_VAT(self, VAT): self.VAT = VAT
    def get_CONTACTNAME(self): return self.CONTACTNAME
    def set_CONTACTNAME(self, CONTACTNAME): self.CONTACTNAME = CONTACTNAME
    def get_CONTACTDIALCODE(self): return self.CONTACTDIALCODE
    def set_CONTACTDIALCODE(self, CONTACTDIALCODE): self.CONTACTDIALCODE = CONTACTDIALCODE
    def get_CONTACTTELEPHONE(self): return self.CONTACTTELEPHONE
    def set_CONTACTTELEPHONE(self, CONTACTTELEPHONE): self.CONTACTTELEPHONE = CONTACTTELEPHONE
    def get_CONTACTEMAIL(self): return self.CONTACTEMAIL
    def set_CONTACTEMAIL(self, CONTACTEMAIL): self.CONTACTEMAIL = CONTACTEMAIL
    def hasContent_(self):
        if (
            self.COMPANYNAME is not None or
            self.STREETADDRESS1 is not None or
            self.STREETADDRESS2 is not None or
            self.STREETADDRESS3 is not None or
            self.CITY is not None or
            self.PROVINCE is not None or
            self.POSTCODE is not None or
            self.COUNTRY is not None or
            self.VAT is not None or
            self.CONTACTNAME is not None or
            self.CONTACTDIALCODE is not None or
            self.CONTACTTELEPHONE is not None or
            self.CONTACTEMAIL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DELIVERY', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DELIVERY')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DELIVERY')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DELIVERY', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DELIVERY'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DELIVERY', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.COMPANYNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COMPANYNAME>%s</COMPANYNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COMPANYNAME), input_name='COMPANYNAME')), eol_))
        if self.STREETADDRESS1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS1>%s</STREETADDRESS1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS1), input_name='STREETADDRESS1')), eol_))
        if self.STREETADDRESS2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS2>%s</STREETADDRESS2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS2), input_name='STREETADDRESS2')), eol_))
        if self.STREETADDRESS3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS3>%s</STREETADDRESS3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS3), input_name='STREETADDRESS3')), eol_))
        if self.CITY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CITY>%s</CITY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CITY), input_name='CITY')), eol_))
        if self.PROVINCE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PROVINCE>%s</PROVINCE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PROVINCE), input_name='PROVINCE')), eol_))
        if self.POSTCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POSTCODE>%s</POSTCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POSTCODE), input_name='POSTCODE')), eol_))
        if self.COUNTRY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COUNTRY>%s</COUNTRY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COUNTRY), input_name='COUNTRY')), eol_))
        if self.VAT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<VAT>%s</VAT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VAT), input_name='VAT')), eol_))
        if self.CONTACTNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTNAME>%s</CONTACTNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTNAME), input_name='CONTACTNAME')), eol_))
        if self.CONTACTDIALCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTDIALCODE>%s</CONTACTDIALCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTDIALCODE), input_name='CONTACTDIALCODE')), eol_))
        if self.CONTACTTELEPHONE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTTELEPHONE>%s</CONTACTTELEPHONE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTTELEPHONE), input_name='CONTACTTELEPHONE')), eol_))
        if self.CONTACTEMAIL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTEMAIL>%s</CONTACTEMAIL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTEMAIL), input_name='CONTACTEMAIL')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'COMPANYNAME':
            COMPANYNAME_ = child_.text
            COMPANYNAME_ = self.gds_validate_string(COMPANYNAME_, node, 'COMPANYNAME')
            self.COMPANYNAME = COMPANYNAME_
        elif nodeName_ == 'STREETADDRESS1':
            STREETADDRESS1_ = child_.text
            STREETADDRESS1_ = self.gds_validate_string(STREETADDRESS1_, node, 'STREETADDRESS1')
            self.STREETADDRESS1 = STREETADDRESS1_
        elif nodeName_ == 'STREETADDRESS2':
            STREETADDRESS2_ = child_.text
            STREETADDRESS2_ = self.gds_validate_string(STREETADDRESS2_, node, 'STREETADDRESS2')
            self.STREETADDRESS2 = STREETADDRESS2_
        elif nodeName_ == 'STREETADDRESS3':
            STREETADDRESS3_ = child_.text
            STREETADDRESS3_ = self.gds_validate_string(STREETADDRESS3_, node, 'STREETADDRESS3')
            self.STREETADDRESS3 = STREETADDRESS3_
        elif nodeName_ == 'CITY':
            CITY_ = child_.text
            CITY_ = self.gds_validate_string(CITY_, node, 'CITY')
            self.CITY = CITY_
        elif nodeName_ == 'PROVINCE':
            PROVINCE_ = child_.text
            PROVINCE_ = self.gds_validate_string(PROVINCE_, node, 'PROVINCE')
            self.PROVINCE = PROVINCE_
        elif nodeName_ == 'POSTCODE':
            POSTCODE_ = child_.text
            POSTCODE_ = self.gds_validate_string(POSTCODE_, node, 'POSTCODE')
            self.POSTCODE = POSTCODE_
        elif nodeName_ == 'COUNTRY':
            COUNTRY_ = child_.text
            COUNTRY_ = self.gds_validate_string(COUNTRY_, node, 'COUNTRY')
            self.COUNTRY = COUNTRY_
        elif nodeName_ == 'VAT':
            VAT_ = child_.text
            VAT_ = self.gds_validate_string(VAT_, node, 'VAT')
            self.VAT = VAT_
        elif nodeName_ == 'CONTACTNAME':
            CONTACTNAME_ = child_.text
            CONTACTNAME_ = self.gds_validate_string(CONTACTNAME_, node, 'CONTACTNAME')
            self.CONTACTNAME = CONTACTNAME_
        elif nodeName_ == 'CONTACTDIALCODE':
            CONTACTDIALCODE_ = child_.text
            CONTACTDIALCODE_ = self.gds_validate_string(CONTACTDIALCODE_, node, 'CONTACTDIALCODE')
            self.CONTACTDIALCODE = CONTACTDIALCODE_
        elif nodeName_ == 'CONTACTTELEPHONE':
            CONTACTTELEPHONE_ = child_.text
            CONTACTTELEPHONE_ = self.gds_validate_string(CONTACTTELEPHONE_, node, 'CONTACTTELEPHONE')
            self.CONTACTTELEPHONE = CONTACTTELEPHONE_
        elif nodeName_ == 'CONTACTEMAIL':
            CONTACTEMAIL_ = child_.text
            CONTACTEMAIL_ = self.gds_validate_string(CONTACTEMAIL_, node, 'CONTACTEMAIL')
            self.CONTACTEMAIL = CONTACTEMAIL_
# end class DELIVERY


class DETAILS(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RECEIVER=None, DELIVERY=None, CUSTOMERREF=None, CONTYPE=None, PAYMENTIND=None, ITEMS=None, TOTALWEIGHT=None, TOTALVOLUME=None, CURRENCY=None, GOODSVALUE=None, INSURANCEVALUE=None, INSURANCECURRENCY=None, DIVISION=None, SERVICE=None, OPTION=None, DESCRIPTION=None, DELIVERYINST=None, CUSTOMCONTROLIN=None, HAZARDOUS=None, UNNUMBER=None, PACKINGGROUP=None, PACKAGE=None):
        self.original_tagname_ = None
        self.RECEIVER = RECEIVER
        self.DELIVERY = DELIVERY
        self.CUSTOMERREF = CUSTOMERREF
        self.CONTYPE = CONTYPE
        self.PAYMENTIND = PAYMENTIND
        self.ITEMS = ITEMS
        self.TOTALWEIGHT = TOTALWEIGHT
        self.TOTALVOLUME = TOTALVOLUME
        self.CURRENCY = CURRENCY
        self.GOODSVALUE = GOODSVALUE
        self.INSURANCEVALUE = INSURANCEVALUE
        self.INSURANCECURRENCY = INSURANCECURRENCY
        self.DIVISION = DIVISION
        self.SERVICE = SERVICE
        if OPTION is None:
            self.OPTION = []
        else:
            self.OPTION = OPTION
        self.DESCRIPTION = DESCRIPTION
        self.DELIVERYINST = DELIVERYINST
        self.CUSTOMCONTROLIN = CUSTOMCONTROLIN
        self.HAZARDOUS = HAZARDOUS
        self.UNNUMBER = UNNUMBER
        if PACKINGGROUP is None:
            self.PACKINGGROUP = []
        else:
            self.PACKINGGROUP = PACKINGGROUP
        if PACKAGE is None:
            self.PACKAGE = []
        else:
            self.PACKAGE = PACKAGE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DETAILS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DETAILS.subclass:
            return DETAILS.subclass(*args_, **kwargs_)
        else:
            return DETAILS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RECEIVER(self): return self.RECEIVER
    def set_RECEIVER(self, RECEIVER): self.RECEIVER = RECEIVER
    def get_DELIVERY(self): return self.DELIVERY
    def set_DELIVERY(self, DELIVERY): self.DELIVERY = DELIVERY
    def get_CUSTOMERREF(self): return self.CUSTOMERREF
    def set_CUSTOMERREF(self, CUSTOMERREF): self.CUSTOMERREF = CUSTOMERREF
    def get_CONTYPE(self): return self.CONTYPE
    def set_CONTYPE(self, CONTYPE): self.CONTYPE = CONTYPE
    def get_PAYMENTIND(self): return self.PAYMENTIND
    def set_PAYMENTIND(self, PAYMENTIND): self.PAYMENTIND = PAYMENTIND
    def get_ITEMS(self): return self.ITEMS
    def set_ITEMS(self, ITEMS): self.ITEMS = ITEMS
    def get_TOTALWEIGHT(self): return self.TOTALWEIGHT
    def set_TOTALWEIGHT(self, TOTALWEIGHT): self.TOTALWEIGHT = TOTALWEIGHT
    def get_TOTALVOLUME(self): return self.TOTALVOLUME
    def set_TOTALVOLUME(self, TOTALVOLUME): self.TOTALVOLUME = TOTALVOLUME
    def get_CURRENCY(self): return self.CURRENCY
    def set_CURRENCY(self, CURRENCY): self.CURRENCY = CURRENCY
    def get_GOODSVALUE(self): return self.GOODSVALUE
    def set_GOODSVALUE(self, GOODSVALUE): self.GOODSVALUE = GOODSVALUE
    def get_INSURANCEVALUE(self): return self.INSURANCEVALUE
    def set_INSURANCEVALUE(self, INSURANCEVALUE): self.INSURANCEVALUE = INSURANCEVALUE
    def get_INSURANCECURRENCY(self): return self.INSURANCECURRENCY
    def set_INSURANCECURRENCY(self, INSURANCECURRENCY): self.INSURANCECURRENCY = INSURANCECURRENCY
    def get_DIVISION(self): return self.DIVISION
    def set_DIVISION(self, DIVISION): self.DIVISION = DIVISION
    def get_SERVICE(self): return self.SERVICE
    def set_SERVICE(self, SERVICE): self.SERVICE = SERVICE
    def get_OPTION(self): return self.OPTION
    def set_OPTION(self, OPTION): self.OPTION = OPTION
    def add_OPTION(self, value): self.OPTION.append(value)
    def insert_OPTION_at(self, index, value): self.OPTION.insert(index, value)
    def replace_OPTION_at(self, index, value): self.OPTION[index] = value
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_DELIVERYINST(self): return self.DELIVERYINST
    def set_DELIVERYINST(self, DELIVERYINST): self.DELIVERYINST = DELIVERYINST
    def get_CUSTOMCONTROLIN(self): return self.CUSTOMCONTROLIN
    def set_CUSTOMCONTROLIN(self, CUSTOMCONTROLIN): self.CUSTOMCONTROLIN = CUSTOMCONTROLIN
    def get_HAZARDOUS(self): return self.HAZARDOUS
    def set_HAZARDOUS(self, HAZARDOUS): self.HAZARDOUS = HAZARDOUS
    def get_UNNUMBER(self): return self.UNNUMBER
    def set_UNNUMBER(self, UNNUMBER): self.UNNUMBER = UNNUMBER
    def get_PACKINGGROUP(self): return self.PACKINGGROUP
    def set_PACKINGGROUP(self, PACKINGGROUP): self.PACKINGGROUP = PACKINGGROUP
    def add_PACKINGGROUP(self, value): self.PACKINGGROUP.append(value)
    def insert_PACKINGGROUP_at(self, index, value): self.PACKINGGROUP.insert(index, value)
    def replace_PACKINGGROUP_at(self, index, value): self.PACKINGGROUP[index] = value
    def get_PACKAGE(self): return self.PACKAGE
    def set_PACKAGE(self, PACKAGE): self.PACKAGE = PACKAGE
    def add_PACKAGE(self, value): self.PACKAGE.append(value)
    def insert_PACKAGE_at(self, index, value): self.PACKAGE.insert(index, value)
    def replace_PACKAGE_at(self, index, value): self.PACKAGE[index] = value
    def hasContent_(self):
        if (
            self.RECEIVER is not None or
            self.DELIVERY is not None or
            self.CUSTOMERREF is not None or
            self.CONTYPE is not None or
            self.PAYMENTIND is not None or
            self.ITEMS is not None or
            self.TOTALWEIGHT is not None or
            self.TOTALVOLUME is not None or
            self.CURRENCY is not None or
            self.GOODSVALUE is not None or
            self.INSURANCEVALUE is not None or
            self.INSURANCECURRENCY is not None or
            self.DIVISION is not None or
            self.SERVICE is not None or
            self.OPTION or
            self.DESCRIPTION is not None or
            self.DELIVERYINST is not None or
            self.CUSTOMCONTROLIN is not None or
            self.HAZARDOUS is not None or
            self.UNNUMBER is not None or
            self.PACKINGGROUP or
            self.PACKAGE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DETAILS', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DETAILS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DETAILS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DETAILS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DETAILS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DETAILS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RECEIVER is not None:
            self.RECEIVER.export(outfile, level, namespace_, name_='RECEIVER', pretty_print=pretty_print)
        if self.DELIVERY is not None:
            self.DELIVERY.export(outfile, level, namespace_, name_='DELIVERY', pretty_print=pretty_print)
        if self.CUSTOMERREF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CUSTOMERREF>%s</CUSTOMERREF>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CUSTOMERREF), input_name='CUSTOMERREF')), eol_))
        if self.CONTYPE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTYPE>%s</CONTYPE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTYPE), input_name='CONTYPE')), eol_))
        if self.PAYMENTIND is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PAYMENTIND>%s</PAYMENTIND>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PAYMENTIND), input_name='PAYMENTIND')), eol_))
        if self.ITEMS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ITEMS>%s</ITEMS>%s' % (self.gds_format_integer(self.ITEMS, input_name='ITEMS'), eol_))
        if self.TOTALWEIGHT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TOTALWEIGHT>%s</TOTALWEIGHT>%s' % (self.gds_format_float(self.TOTALWEIGHT, input_name='TOTALWEIGHT'), eol_))
        if self.TOTALVOLUME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TOTALVOLUME>%s</TOTALVOLUME>%s' % (self.gds_format_float(self.TOTALVOLUME, input_name='TOTALVOLUME'), eol_))
        if self.CURRENCY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CURRENCY>%s</CURRENCY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CURRENCY), input_name='CURRENCY')), eol_))
        if self.GOODSVALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GOODSVALUE>%s</GOODSVALUE>%s' % (self.gds_format_float(self.GOODSVALUE, input_name='GOODSVALUE'), eol_))
        if self.INSURANCEVALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<INSURANCEVALUE>%s</INSURANCEVALUE>%s' % (self.gds_format_float(self.INSURANCEVALUE, input_name='INSURANCEVALUE'), eol_))
        if self.INSURANCECURRENCY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<INSURANCECURRENCY>%s</INSURANCECURRENCY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.INSURANCECURRENCY), input_name='INSURANCECURRENCY')), eol_))
        if self.DIVISION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DIVISION>%s</DIVISION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DIVISION), input_name='DIVISION')), eol_))
        if self.SERVICE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SERVICE>%s</SERVICE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE), input_name='SERVICE')), eol_))
        for OPTION_ in self.OPTION:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OPTION>%s</OPTION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(OPTION_), input_name='OPTION')), eol_))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DESCRIPTION>%s</DESCRIPTION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DESCRIPTION), input_name='DESCRIPTION')), eol_))
        if self.DELIVERYINST is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DELIVERYINST>%s</DELIVERYINST>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DELIVERYINST), input_name='DELIVERYINST')), eol_))
        if self.CUSTOMCONTROLIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CUSTOMCONTROLIN>%s</CUSTOMCONTROLIN>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CUSTOMCONTROLIN), input_name='CUSTOMCONTROLIN')), eol_))
        if self.HAZARDOUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HAZARDOUS>%s</HAZARDOUS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HAZARDOUS), input_name='HAZARDOUS')), eol_))
        if self.UNNUMBER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UNNUMBER>%s</UNNUMBER>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UNNUMBER), input_name='UNNUMBER')), eol_))
        for PACKINGGROUP_ in self.PACKINGGROUP:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PACKINGGROUP>%s</PACKINGGROUP>%s' % (self.gds_encode(self.gds_format_string(quote_xml(PACKINGGROUP_), input_name='PACKINGGROUP')), eol_))
        for PACKAGE_ in self.PACKAGE:
            PACKAGE_.export(outfile, level, namespace_, name_='PACKAGE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RECEIVER':
            obj_ = RECEIVER.factory()
            obj_.build(child_)
            self.RECEIVER = obj_
            obj_.original_tagname_ = 'RECEIVER'
        elif nodeName_ == 'DELIVERY':
            obj_ = DELIVERY.factory()
            obj_.build(child_)
            self.DELIVERY = obj_
            obj_.original_tagname_ = 'DELIVERY'
        elif nodeName_ == 'CUSTOMERREF':
            CUSTOMERREF_ = child_.text
            CUSTOMERREF_ = self.gds_validate_string(CUSTOMERREF_, node, 'CUSTOMERREF')
            self.CUSTOMERREF = CUSTOMERREF_
        elif nodeName_ == 'CONTYPE':
            CONTYPE_ = child_.text
            CONTYPE_ = self.gds_validate_string(CONTYPE_, node, 'CONTYPE')
            self.CONTYPE = CONTYPE_
        elif nodeName_ == 'PAYMENTIND':
            PAYMENTIND_ = child_.text
            PAYMENTIND_ = self.gds_validate_string(PAYMENTIND_, node, 'PAYMENTIND')
            self.PAYMENTIND = PAYMENTIND_
        elif nodeName_ == 'ITEMS':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ITEMS')
            self.ITEMS = ival_
        elif nodeName_ == 'TOTALWEIGHT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTALWEIGHT')
            self.TOTALWEIGHT = fval_
        elif nodeName_ == 'TOTALVOLUME':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTALVOLUME')
            self.TOTALVOLUME = fval_
        elif nodeName_ == 'CURRENCY':
            CURRENCY_ = child_.text
            CURRENCY_ = self.gds_validate_string(CURRENCY_, node, 'CURRENCY')
            self.CURRENCY = CURRENCY_
        elif nodeName_ == 'GOODSVALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'GOODSVALUE')
            self.GOODSVALUE = fval_
        elif nodeName_ == 'INSURANCEVALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'INSURANCEVALUE')
            self.INSURANCEVALUE = fval_
        elif nodeName_ == 'INSURANCECURRENCY':
            INSURANCECURRENCY_ = child_.text
            INSURANCECURRENCY_ = self.gds_validate_string(INSURANCECURRENCY_, node, 'INSURANCECURRENCY')
            self.INSURANCECURRENCY = INSURANCECURRENCY_
        elif nodeName_ == 'DIVISION':
            DIVISION_ = child_.text
            DIVISION_ = self.gds_validate_string(DIVISION_, node, 'DIVISION')
            self.DIVISION = DIVISION_
        elif nodeName_ == 'SERVICE':
            SERVICE_ = child_.text
            SERVICE_ = self.gds_validate_string(SERVICE_, node, 'SERVICE')
            self.SERVICE = SERVICE_
        elif nodeName_ == 'OPTION':
            OPTION_ = child_.text
            OPTION_ = self.gds_validate_string(OPTION_, node, 'OPTION')
            self.OPTION.append(OPTION_)
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
        elif nodeName_ == 'DELIVERYINST':
            DELIVERYINST_ = child_.text
            DELIVERYINST_ = self.gds_validate_string(DELIVERYINST_, node, 'DELIVERYINST')
            self.DELIVERYINST = DELIVERYINST_
        elif nodeName_ == 'CUSTOMCONTROLIN':
            CUSTOMCONTROLIN_ = child_.text
            CUSTOMCONTROLIN_ = self.gds_validate_string(CUSTOMCONTROLIN_, node, 'CUSTOMCONTROLIN')
            self.CUSTOMCONTROLIN = CUSTOMCONTROLIN_
        elif nodeName_ == 'HAZARDOUS':
            HAZARDOUS_ = child_.text
            HAZARDOUS_ = self.gds_validate_string(HAZARDOUS_, node, 'HAZARDOUS')
            self.HAZARDOUS = HAZARDOUS_
        elif nodeName_ == 'UNNUMBER':
            UNNUMBER_ = child_.text
            UNNUMBER_ = self.gds_validate_string(UNNUMBER_, node, 'UNNUMBER')
            self.UNNUMBER = UNNUMBER_
        elif nodeName_ == 'PACKINGGROUP':
            PACKINGGROUP_ = child_.text
            PACKINGGROUP_ = self.gds_validate_string(PACKINGGROUP_, node, 'PACKINGGROUP')
            self.PACKINGGROUP.append(PACKINGGROUP_)
        elif nodeName_ == 'PACKAGE':
            obj_ = PACKAGE.factory()
            obj_.build(child_)
            self.PACKAGE.append(obj_)
            obj_.original_tagname_ = 'PACKAGE'
# end class DETAILS


class EMAILTO(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, valueOf_=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMAILTO)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMAILTO.subclass:
            return EMAILTO.subclass(*args_, **kwargs_)
        else:
            return EMAILTO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EMAILTO', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMAILTO')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMAILTO')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EMAILTO', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EMAILTO'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='EMAILTO', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EMAILTO


class ESHIPPER(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LOGIN=None, CONSIGNMENTBATCH=None, ACTIVITY=None):
        self.original_tagname_ = None
        self.LOGIN = LOGIN
        self.CONSIGNMENTBATCH = CONSIGNMENTBATCH
        self.ACTIVITY = ACTIVITY
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESHIPPER)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESHIPPER.subclass:
            return ESHIPPER.subclass(*args_, **kwargs_)
        else:
            return ESHIPPER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LOGIN(self): return self.LOGIN
    def set_LOGIN(self, LOGIN): self.LOGIN = LOGIN
    def get_CONSIGNMENTBATCH(self): return self.CONSIGNMENTBATCH
    def set_CONSIGNMENTBATCH(self, CONSIGNMENTBATCH): self.CONSIGNMENTBATCH = CONSIGNMENTBATCH
    def get_ACTIVITY(self): return self.ACTIVITY
    def set_ACTIVITY(self, ACTIVITY): self.ACTIVITY = ACTIVITY
    def hasContent_(self):
        if (
            self.LOGIN is not None or
            self.CONSIGNMENTBATCH is not None or
            self.ACTIVITY is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ESHIPPER', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESHIPPER')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ESHIPPER')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ESHIPPER', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ESHIPPER'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ESHIPPER', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LOGIN is not None:
            self.LOGIN.export(outfile, level, namespace_, name_='LOGIN', pretty_print=pretty_print)
        if self.CONSIGNMENTBATCH is not None:
            self.CONSIGNMENTBATCH.export(outfile, level, namespace_, name_='CONSIGNMENTBATCH', pretty_print=pretty_print)
        if self.ACTIVITY is not None:
            self.ACTIVITY.export(outfile, level, namespace_, name_='ACTIVITY', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LOGIN':
            obj_ = LOGIN.factory()
            obj_.build(child_)
            self.LOGIN = obj_
            obj_.original_tagname_ = 'LOGIN'
        elif nodeName_ == 'CONSIGNMENTBATCH':
            obj_ = CONSIGNMENTBATCH.factory()
            obj_.build(child_)
            self.CONSIGNMENTBATCH = obj_
            obj_.original_tagname_ = 'CONSIGNMENTBATCH'
        elif nodeName_ == 'ACTIVITY':
            obj_ = ACTIVITY.factory()
            obj_.build(child_)
            self.ACTIVITY = obj_
            obj_.original_tagname_ = 'ACTIVITY'
# end class ESHIPPER


class INVOICE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, INVOICE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if INVOICE.subclass:
            return INVOICE.subclass(*args_, **kwargs_)
        else:
            return INVOICE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='INVOICE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('INVOICE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='INVOICE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='INVOICE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='INVOICE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='INVOICE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class INVOICE


class LABEL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LABEL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LABEL.subclass:
            return LABEL.subclass(*args_, **kwargs_)
        else:
            return LABEL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LABEL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LABEL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LABEL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LABEL', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LABEL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LABEL', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LABEL


class LOGIN(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, COMPANY=None, PASSWORD=None, APPID=None, APPVERSION=None):
        self.original_tagname_ = None
        self.COMPANY = COMPANY
        self.PASSWORD = PASSWORD
        self.APPID = APPID
        self.APPVERSION = APPVERSION
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LOGIN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LOGIN.subclass:
            return LOGIN.subclass(*args_, **kwargs_)
        else:
            return LOGIN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_COMPANY(self): return self.COMPANY
    def set_COMPANY(self, COMPANY): self.COMPANY = COMPANY
    def get_PASSWORD(self): return self.PASSWORD
    def set_PASSWORD(self, PASSWORD): self.PASSWORD = PASSWORD
    def get_APPID(self): return self.APPID
    def set_APPID(self, APPID): self.APPID = APPID
    def get_APPVERSION(self): return self.APPVERSION
    def set_APPVERSION(self, APPVERSION): self.APPVERSION = APPVERSION
    def hasContent_(self):
        if (
            self.COMPANY is not None or
            self.PASSWORD is not None or
            self.APPID is not None or
            self.APPVERSION is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LOGIN', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LOGIN')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LOGIN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LOGIN', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LOGIN'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LOGIN', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.COMPANY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COMPANY>%s</COMPANY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COMPANY), input_name='COMPANY')), eol_))
        if self.PASSWORD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PASSWORD>%s</PASSWORD>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PASSWORD), input_name='PASSWORD')), eol_))
        if self.APPID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<APPID>%s</APPID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.APPID), input_name='APPID')), eol_))
        if self.APPVERSION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<APPVERSION>%s</APPVERSION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.APPVERSION), input_name='APPVERSION')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'COMPANY':
            COMPANY_ = child_.text
            COMPANY_ = self.gds_validate_string(COMPANY_, node, 'COMPANY')
            self.COMPANY = COMPANY_
        elif nodeName_ == 'PASSWORD':
            PASSWORD_ = child_.text
            PASSWORD_ = self.gds_validate_string(PASSWORD_, node, 'PASSWORD')
            self.PASSWORD = PASSWORD_
        elif nodeName_ == 'APPID':
            APPID_ = child_.text
            APPID_ = self.gds_validate_string(APPID_, node, 'APPID')
            self.APPID = APPID_
        elif nodeName_ == 'APPVERSION':
            APPVERSION_ = child_.text
            APPVERSION_ = self.gds_validate_string(APPVERSION_, node, 'APPVERSION')
            self.APPVERSION = APPVERSION_
# end class LOGIN


class MANIFEST(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MANIFEST)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MANIFEST.subclass:
            return MANIFEST.subclass(*args_, **kwargs_)
        else:
            return MANIFEST(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MANIFEST', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MANIFEST')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MANIFEST')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MANIFEST', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MANIFEST'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MANIFEST', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MANIFEST


class PACKAGE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ITEMS=None, DESCRIPTION=None, LENGTH=None, HEIGHT=None, WIDTH=None, WEIGHT=None, ARTICLE=None):
        self.original_tagname_ = None
        self.ITEMS = ITEMS
        self.DESCRIPTION = DESCRIPTION
        self.LENGTH = LENGTH
        self.HEIGHT = HEIGHT
        self.WIDTH = WIDTH
        self.WEIGHT = WEIGHT
        if ARTICLE is None:
            self.ARTICLE = []
        else:
            self.ARTICLE = ARTICLE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PACKAGE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PACKAGE.subclass:
            return PACKAGE.subclass(*args_, **kwargs_)
        else:
            return PACKAGE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ITEMS(self): return self.ITEMS
    def set_ITEMS(self, ITEMS): self.ITEMS = ITEMS
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_LENGTH(self): return self.LENGTH
    def set_LENGTH(self, LENGTH): self.LENGTH = LENGTH
    def get_HEIGHT(self): return self.HEIGHT
    def set_HEIGHT(self, HEIGHT): self.HEIGHT = HEIGHT
    def get_WIDTH(self): return self.WIDTH
    def set_WIDTH(self, WIDTH): self.WIDTH = WIDTH
    def get_WEIGHT(self): return self.WEIGHT
    def set_WEIGHT(self, WEIGHT): self.WEIGHT = WEIGHT
    def get_ARTICLE(self): return self.ARTICLE
    def set_ARTICLE(self, ARTICLE): self.ARTICLE = ARTICLE
    def add_ARTICLE(self, value): self.ARTICLE.append(value)
    def insert_ARTICLE_at(self, index, value): self.ARTICLE.insert(index, value)
    def replace_ARTICLE_at(self, index, value): self.ARTICLE[index] = value
    def hasContent_(self):
        if (
            self.ITEMS is not None or
            self.DESCRIPTION is not None or
            self.LENGTH is not None or
            self.HEIGHT is not None or
            self.WIDTH is not None or
            self.WEIGHT is not None or
            self.ARTICLE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PACKAGE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PACKAGE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PACKAGE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PACKAGE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PACKAGE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PACKAGE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ITEMS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ITEMS>%s</ITEMS>%s' % (self.gds_format_integer(self.ITEMS, input_name='ITEMS'), eol_))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DESCRIPTION>%s</DESCRIPTION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DESCRIPTION), input_name='DESCRIPTION')), eol_))
        if self.LENGTH is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LENGTH>%s</LENGTH>%s' % (self.gds_format_float(self.LENGTH, input_name='LENGTH'), eol_))
        if self.HEIGHT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HEIGHT>%s</HEIGHT>%s' % (self.gds_format_float(self.HEIGHT, input_name='HEIGHT'), eol_))
        if self.WIDTH is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WIDTH>%s</WIDTH>%s' % (self.gds_format_float(self.WIDTH, input_name='WIDTH'), eol_))
        if self.WEIGHT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<WEIGHT>%s</WEIGHT>%s' % (self.gds_format_float(self.WEIGHT, input_name='WEIGHT'), eol_))
        for ARTICLE_ in self.ARTICLE:
            ARTICLE_.export(outfile, level, namespace_, name_='ARTICLE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ITEMS':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ITEMS')
            self.ITEMS = ival_
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
        elif nodeName_ == 'LENGTH':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LENGTH')
            self.LENGTH = fval_
        elif nodeName_ == 'HEIGHT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'HEIGHT')
            self.HEIGHT = fval_
        elif nodeName_ == 'WIDTH':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'WIDTH')
            self.WIDTH = fval_
        elif nodeName_ == 'WEIGHT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'WEIGHT')
            self.WEIGHT = fval_
        elif nodeName_ == 'ARTICLE':
            obj_ = ARTICLE.factory()
            obj_.build(child_)
            self.ARTICLE.append(obj_)
            obj_.original_tagname_ = 'ARTICLE'
# end class PACKAGE


class PREFCOLLECTTIME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FROM=None, TO=None):
        self.original_tagname_ = None
        self.FROM = FROM
        self.TO = TO
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PREFCOLLECTTIME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PREFCOLLECTTIME.subclass:
            return PREFCOLLECTTIME.subclass(*args_, **kwargs_)
        else:
            return PREFCOLLECTTIME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FROM(self): return self.FROM
    def set_FROM(self, FROM): self.FROM = FROM
    def get_TO(self): return self.TO
    def set_TO(self, TO): self.TO = TO
    def hasContent_(self):
        if (
            self.FROM is not None or
            self.TO is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PREFCOLLECTTIME', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PREFCOLLECTTIME')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PREFCOLLECTTIME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PREFCOLLECTTIME', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PREFCOLLECTTIME'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PREFCOLLECTTIME', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FROM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FROM>%s</FROM>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FROM), input_name='FROM')), eol_))
        if self.TO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TO>%s</TO>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TO), input_name='TO')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FROM':
            FROM_ = child_.text
            FROM_ = self.gds_validate_string(FROM_, node, 'FROM')
            self.FROM = FROM_
        elif nodeName_ == 'TO':
            TO_ = child_.text
            TO_ = self.gds_validate_string(TO_, node, 'TO')
            self.TO = TO_
# end class PREFCOLLECTTIME


class PRINT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, REQUIRED=None, CONNOTE=None, LABEL=None, MANIFEST=None, INVOICE=None, EMAILTO=None, EMAILFROM=None):
        self.original_tagname_ = None
        self.REQUIRED = REQUIRED
        self.CONNOTE = CONNOTE
        self.LABEL = LABEL
        self.MANIFEST = MANIFEST
        self.INVOICE = INVOICE
        self.EMAILTO = EMAILTO
        self.EMAILFROM = EMAILFROM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PRINT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PRINT.subclass:
            return PRINT.subclass(*args_, **kwargs_)
        else:
            return PRINT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_REQUIRED(self): return self.REQUIRED
    def set_REQUIRED(self, REQUIRED): self.REQUIRED = REQUIRED
    def get_CONNOTE(self): return self.CONNOTE
    def set_CONNOTE(self, CONNOTE): self.CONNOTE = CONNOTE
    def get_LABEL(self): return self.LABEL
    def set_LABEL(self, LABEL): self.LABEL = LABEL
    def get_MANIFEST(self): return self.MANIFEST
    def set_MANIFEST(self, MANIFEST): self.MANIFEST = MANIFEST
    def get_INVOICE(self): return self.INVOICE
    def set_INVOICE(self, INVOICE): self.INVOICE = INVOICE
    def get_EMAILTO(self): return self.EMAILTO
    def set_EMAILTO(self, EMAILTO): self.EMAILTO = EMAILTO
    def get_EMAILFROM(self): return self.EMAILFROM
    def set_EMAILFROM(self, EMAILFROM): self.EMAILFROM = EMAILFROM
    def hasContent_(self):
        if (
            self.REQUIRED is not None or
            self.CONNOTE is not None or
            self.LABEL is not None or
            self.MANIFEST is not None or
            self.INVOICE is not None or
            self.EMAILTO is not None or
            self.EMAILFROM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PRINT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PRINT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PRINT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PRINT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PRINT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PRINT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.REQUIRED is not None:
            self.REQUIRED.export(outfile, level, namespace_, name_='REQUIRED', pretty_print=pretty_print)
        if self.CONNOTE is not None:
            self.CONNOTE.export(outfile, level, namespace_, name_='CONNOTE', pretty_print=pretty_print)
        if self.LABEL is not None:
            self.LABEL.export(outfile, level, namespace_, name_='LABEL', pretty_print=pretty_print)
        if self.MANIFEST is not None:
            self.MANIFEST.export(outfile, level, namespace_, name_='MANIFEST', pretty_print=pretty_print)
        if self.INVOICE is not None:
            self.INVOICE.export(outfile, level, namespace_, name_='INVOICE', pretty_print=pretty_print)
        if self.EMAILTO is not None:
            self.EMAILTO.export(outfile, level, namespace_, name_='EMAILTO', pretty_print=pretty_print)
        if self.EMAILFROM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMAILFROM>%s</EMAILFROM>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMAILFROM), input_name='EMAILFROM')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'REQUIRED':
            obj_ = REQUIRED.factory()
            obj_.build(child_)
            self.REQUIRED = obj_
            obj_.original_tagname_ = 'REQUIRED'
        elif nodeName_ == 'CONNOTE':
            obj_ = CONNOTE.factory()
            obj_.build(child_)
            self.CONNOTE = obj_
            obj_.original_tagname_ = 'CONNOTE'
        elif nodeName_ == 'LABEL':
            obj_ = LABEL.factory()
            obj_.build(child_)
            self.LABEL = obj_
            obj_.original_tagname_ = 'LABEL'
        elif nodeName_ == 'MANIFEST':
            obj_ = MANIFEST.factory()
            obj_.build(child_)
            self.MANIFEST = obj_
            obj_.original_tagname_ = 'MANIFEST'
        elif nodeName_ == 'INVOICE':
            obj_ = INVOICE.factory()
            obj_.build(child_)
            self.INVOICE = obj_
            obj_.original_tagname_ = 'INVOICE'
        elif nodeName_ == 'EMAILTO':
            obj_ = EMAILTO.factory()
            obj_.build(child_)
            self.EMAILTO = obj_
            obj_.original_tagname_ = 'EMAILTO'
        elif nodeName_ == 'EMAILFROM':
            EMAILFROM_ = child_.text
            EMAILFROM_ = self.gds_validate_string(EMAILFROM_, node, 'EMAILFROM')
            self.EMAILFROM = EMAILFROM_
# end class PRINT


class RATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RATE.subclass:
            return RATE.subclass(*args_, **kwargs_)
        else:
            return RATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RATE


class RECEIVER(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, COMPANYNAME=None, STREETADDRESS1=None, STREETADDRESS2=None, STREETADDRESS3=None, CITY=None, PROVINCE=None, POSTCODE=None, COUNTRY=None, VAT=None, CONTACTNAME=None, CONTACTDIALCODE=None, CONTACTTELEPHONE=None, CONTACTEMAIL=None, ACCOUNT=None, ACCOUNTCOUNTRY=None):
        self.original_tagname_ = None
        self.COMPANYNAME = COMPANYNAME
        self.STREETADDRESS1 = STREETADDRESS1
        self.STREETADDRESS2 = STREETADDRESS2
        self.STREETADDRESS3 = STREETADDRESS3
        self.CITY = CITY
        self.PROVINCE = PROVINCE
        self.POSTCODE = POSTCODE
        self.COUNTRY = COUNTRY
        self.VAT = VAT
        self.CONTACTNAME = CONTACTNAME
        self.CONTACTDIALCODE = CONTACTDIALCODE
        self.CONTACTTELEPHONE = CONTACTTELEPHONE
        self.CONTACTEMAIL = CONTACTEMAIL
        self.ACCOUNT = ACCOUNT
        self.ACCOUNTCOUNTRY = ACCOUNTCOUNTRY
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RECEIVER)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RECEIVER.subclass:
            return RECEIVER.subclass(*args_, **kwargs_)
        else:
            return RECEIVER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_COMPANYNAME(self): return self.COMPANYNAME
    def set_COMPANYNAME(self, COMPANYNAME): self.COMPANYNAME = COMPANYNAME
    def get_STREETADDRESS1(self): return self.STREETADDRESS1
    def set_STREETADDRESS1(self, STREETADDRESS1): self.STREETADDRESS1 = STREETADDRESS1
    def get_STREETADDRESS2(self): return self.STREETADDRESS2
    def set_STREETADDRESS2(self, STREETADDRESS2): self.STREETADDRESS2 = STREETADDRESS2
    def get_STREETADDRESS3(self): return self.STREETADDRESS3
    def set_STREETADDRESS3(self, STREETADDRESS3): self.STREETADDRESS3 = STREETADDRESS3
    def get_CITY(self): return self.CITY
    def set_CITY(self, CITY): self.CITY = CITY
    def get_PROVINCE(self): return self.PROVINCE
    def set_PROVINCE(self, PROVINCE): self.PROVINCE = PROVINCE
    def get_POSTCODE(self): return self.POSTCODE
    def set_POSTCODE(self, POSTCODE): self.POSTCODE = POSTCODE
    def get_COUNTRY(self): return self.COUNTRY
    def set_COUNTRY(self, COUNTRY): self.COUNTRY = COUNTRY
    def get_VAT(self): return self.VAT
    def set_VAT(self, VAT): self.VAT = VAT
    def get_CONTACTNAME(self): return self.CONTACTNAME
    def set_CONTACTNAME(self, CONTACTNAME): self.CONTACTNAME = CONTACTNAME
    def get_CONTACTDIALCODE(self): return self.CONTACTDIALCODE
    def set_CONTACTDIALCODE(self, CONTACTDIALCODE): self.CONTACTDIALCODE = CONTACTDIALCODE
    def get_CONTACTTELEPHONE(self): return self.CONTACTTELEPHONE
    def set_CONTACTTELEPHONE(self, CONTACTTELEPHONE): self.CONTACTTELEPHONE = CONTACTTELEPHONE
    def get_CONTACTEMAIL(self): return self.CONTACTEMAIL
    def set_CONTACTEMAIL(self, CONTACTEMAIL): self.CONTACTEMAIL = CONTACTEMAIL
    def get_ACCOUNT(self): return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT): self.ACCOUNT = ACCOUNT
    def get_ACCOUNTCOUNTRY(self): return self.ACCOUNTCOUNTRY
    def set_ACCOUNTCOUNTRY(self, ACCOUNTCOUNTRY): self.ACCOUNTCOUNTRY = ACCOUNTCOUNTRY
    def hasContent_(self):
        if (
            self.COMPANYNAME is not None or
            self.STREETADDRESS1 is not None or
            self.STREETADDRESS2 is not None or
            self.STREETADDRESS3 is not None or
            self.CITY is not None or
            self.PROVINCE is not None or
            self.POSTCODE is not None or
            self.COUNTRY is not None or
            self.VAT is not None or
            self.CONTACTNAME is not None or
            self.CONTACTDIALCODE is not None or
            self.CONTACTTELEPHONE is not None or
            self.CONTACTEMAIL is not None or
            self.ACCOUNT is not None or
            self.ACCOUNTCOUNTRY is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RECEIVER', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RECEIVER')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RECEIVER')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RECEIVER', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RECEIVER'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RECEIVER', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.COMPANYNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COMPANYNAME>%s</COMPANYNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COMPANYNAME), input_name='COMPANYNAME')), eol_))
        if self.STREETADDRESS1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS1>%s</STREETADDRESS1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS1), input_name='STREETADDRESS1')), eol_))
        if self.STREETADDRESS2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS2>%s</STREETADDRESS2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS2), input_name='STREETADDRESS2')), eol_))
        if self.STREETADDRESS3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS3>%s</STREETADDRESS3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS3), input_name='STREETADDRESS3')), eol_))
        if self.CITY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CITY>%s</CITY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CITY), input_name='CITY')), eol_))
        if self.PROVINCE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PROVINCE>%s</PROVINCE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PROVINCE), input_name='PROVINCE')), eol_))
        if self.POSTCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POSTCODE>%s</POSTCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POSTCODE), input_name='POSTCODE')), eol_))
        if self.COUNTRY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COUNTRY>%s</COUNTRY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COUNTRY), input_name='COUNTRY')), eol_))
        if self.VAT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<VAT>%s</VAT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VAT), input_name='VAT')), eol_))
        if self.CONTACTNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTNAME>%s</CONTACTNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTNAME), input_name='CONTACTNAME')), eol_))
        if self.CONTACTDIALCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTDIALCODE>%s</CONTACTDIALCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTDIALCODE), input_name='CONTACTDIALCODE')), eol_))
        if self.CONTACTTELEPHONE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTTELEPHONE>%s</CONTACTTELEPHONE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTTELEPHONE), input_name='CONTACTTELEPHONE')), eol_))
        if self.CONTACTEMAIL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTEMAIL>%s</CONTACTEMAIL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTEMAIL), input_name='CONTACTEMAIL')), eol_))
        if self.ACCOUNT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ACCOUNT>%s</ACCOUNT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ACCOUNT), input_name='ACCOUNT')), eol_))
        if self.ACCOUNTCOUNTRY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ACCOUNTCOUNTRY>%s</ACCOUNTCOUNTRY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ACCOUNTCOUNTRY), input_name='ACCOUNTCOUNTRY')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'COMPANYNAME':
            COMPANYNAME_ = child_.text
            COMPANYNAME_ = self.gds_validate_string(COMPANYNAME_, node, 'COMPANYNAME')
            self.COMPANYNAME = COMPANYNAME_
        elif nodeName_ == 'STREETADDRESS1':
            STREETADDRESS1_ = child_.text
            STREETADDRESS1_ = self.gds_validate_string(STREETADDRESS1_, node, 'STREETADDRESS1')
            self.STREETADDRESS1 = STREETADDRESS1_
        elif nodeName_ == 'STREETADDRESS2':
            STREETADDRESS2_ = child_.text
            STREETADDRESS2_ = self.gds_validate_string(STREETADDRESS2_, node, 'STREETADDRESS2')
            self.STREETADDRESS2 = STREETADDRESS2_
        elif nodeName_ == 'STREETADDRESS3':
            STREETADDRESS3_ = child_.text
            STREETADDRESS3_ = self.gds_validate_string(STREETADDRESS3_, node, 'STREETADDRESS3')
            self.STREETADDRESS3 = STREETADDRESS3_
        elif nodeName_ == 'CITY':
            CITY_ = child_.text
            CITY_ = self.gds_validate_string(CITY_, node, 'CITY')
            self.CITY = CITY_
        elif nodeName_ == 'PROVINCE':
            PROVINCE_ = child_.text
            PROVINCE_ = self.gds_validate_string(PROVINCE_, node, 'PROVINCE')
            self.PROVINCE = PROVINCE_
        elif nodeName_ == 'POSTCODE':
            POSTCODE_ = child_.text
            POSTCODE_ = self.gds_validate_string(POSTCODE_, node, 'POSTCODE')
            self.POSTCODE = POSTCODE_
        elif nodeName_ == 'COUNTRY':
            COUNTRY_ = child_.text
            COUNTRY_ = self.gds_validate_string(COUNTRY_, node, 'COUNTRY')
            self.COUNTRY = COUNTRY_
        elif nodeName_ == 'VAT':
            VAT_ = child_.text
            VAT_ = self.gds_validate_string(VAT_, node, 'VAT')
            self.VAT = VAT_
        elif nodeName_ == 'CONTACTNAME':
            CONTACTNAME_ = child_.text
            CONTACTNAME_ = self.gds_validate_string(CONTACTNAME_, node, 'CONTACTNAME')
            self.CONTACTNAME = CONTACTNAME_
        elif nodeName_ == 'CONTACTDIALCODE':
            CONTACTDIALCODE_ = child_.text
            CONTACTDIALCODE_ = self.gds_validate_string(CONTACTDIALCODE_, node, 'CONTACTDIALCODE')
            self.CONTACTDIALCODE = CONTACTDIALCODE_
        elif nodeName_ == 'CONTACTTELEPHONE':
            CONTACTTELEPHONE_ = child_.text
            CONTACTTELEPHONE_ = self.gds_validate_string(CONTACTTELEPHONE_, node, 'CONTACTTELEPHONE')
            self.CONTACTTELEPHONE = CONTACTTELEPHONE_
        elif nodeName_ == 'CONTACTEMAIL':
            CONTACTEMAIL_ = child_.text
            CONTACTEMAIL_ = self.gds_validate_string(CONTACTEMAIL_, node, 'CONTACTEMAIL')
            self.CONTACTEMAIL = CONTACTEMAIL_
        elif nodeName_ == 'ACCOUNT':
            ACCOUNT_ = child_.text
            ACCOUNT_ = self.gds_validate_string(ACCOUNT_, node, 'ACCOUNT')
            self.ACCOUNT = ACCOUNT_
        elif nodeName_ == 'ACCOUNTCOUNTRY':
            ACCOUNTCOUNTRY_ = child_.text
            ACCOUNTCOUNTRY_ = self.gds_validate_string(ACCOUNTCOUNTRY_, node, 'ACCOUNTCOUNTRY')
            self.ACCOUNTCOUNTRY = ACCOUNTCOUNTRY_
# end class RECEIVER


class REQUIRED(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, REQUIRED)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if REQUIRED.subclass:
            return REQUIRED.subclass(*args_, **kwargs_)
        else:
            return REQUIRED(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='REQUIRED', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('REQUIRED')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='REQUIRED')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='REQUIRED', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='REQUIRED'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='REQUIRED', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class REQUIRED


class SENDER(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, COMPANYNAME=None, STREETADDRESS1=None, STREETADDRESS2=None, STREETADDRESS3=None, CITY=None, PROVINCE=None, POSTCODE=None, COUNTRY=None, ACCOUNT=None, VAT=None, CONTACTNAME=None, CONTACTDIALCODE=None, CONTACTTELEPHONE=None, CONTACTEMAIL=None, COLLECTION=None):
        self.original_tagname_ = None
        self.COMPANYNAME = COMPANYNAME
        self.STREETADDRESS1 = STREETADDRESS1
        self.STREETADDRESS2 = STREETADDRESS2
        self.STREETADDRESS3 = STREETADDRESS3
        self.CITY = CITY
        self.PROVINCE = PROVINCE
        self.POSTCODE = POSTCODE
        self.COUNTRY = COUNTRY
        self.ACCOUNT = ACCOUNT
        self.VAT = VAT
        self.CONTACTNAME = CONTACTNAME
        self.CONTACTDIALCODE = CONTACTDIALCODE
        self.CONTACTTELEPHONE = CONTACTTELEPHONE
        self.CONTACTEMAIL = CONTACTEMAIL
        self.COLLECTION = COLLECTION
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SENDER)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SENDER.subclass:
            return SENDER.subclass(*args_, **kwargs_)
        else:
            return SENDER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_COMPANYNAME(self): return self.COMPANYNAME
    def set_COMPANYNAME(self, COMPANYNAME): self.COMPANYNAME = COMPANYNAME
    def get_STREETADDRESS1(self): return self.STREETADDRESS1
    def set_STREETADDRESS1(self, STREETADDRESS1): self.STREETADDRESS1 = STREETADDRESS1
    def get_STREETADDRESS2(self): return self.STREETADDRESS2
    def set_STREETADDRESS2(self, STREETADDRESS2): self.STREETADDRESS2 = STREETADDRESS2
    def get_STREETADDRESS3(self): return self.STREETADDRESS3
    def set_STREETADDRESS3(self, STREETADDRESS3): self.STREETADDRESS3 = STREETADDRESS3
    def get_CITY(self): return self.CITY
    def set_CITY(self, CITY): self.CITY = CITY
    def get_PROVINCE(self): return self.PROVINCE
    def set_PROVINCE(self, PROVINCE): self.PROVINCE = PROVINCE
    def get_POSTCODE(self): return self.POSTCODE
    def set_POSTCODE(self, POSTCODE): self.POSTCODE = POSTCODE
    def get_COUNTRY(self): return self.COUNTRY
    def set_COUNTRY(self, COUNTRY): self.COUNTRY = COUNTRY
    def get_ACCOUNT(self): return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT): self.ACCOUNT = ACCOUNT
    def get_VAT(self): return self.VAT
    def set_VAT(self, VAT): self.VAT = VAT
    def get_CONTACTNAME(self): return self.CONTACTNAME
    def set_CONTACTNAME(self, CONTACTNAME): self.CONTACTNAME = CONTACTNAME
    def get_CONTACTDIALCODE(self): return self.CONTACTDIALCODE
    def set_CONTACTDIALCODE(self, CONTACTDIALCODE): self.CONTACTDIALCODE = CONTACTDIALCODE
    def get_CONTACTTELEPHONE(self): return self.CONTACTTELEPHONE
    def set_CONTACTTELEPHONE(self, CONTACTTELEPHONE): self.CONTACTTELEPHONE = CONTACTTELEPHONE
    def get_CONTACTEMAIL(self): return self.CONTACTEMAIL
    def set_CONTACTEMAIL(self, CONTACTEMAIL): self.CONTACTEMAIL = CONTACTEMAIL
    def get_COLLECTION(self): return self.COLLECTION
    def set_COLLECTION(self, COLLECTION): self.COLLECTION = COLLECTION
    def hasContent_(self):
        if (
            self.COMPANYNAME is not None or
            self.STREETADDRESS1 is not None or
            self.STREETADDRESS2 is not None or
            self.STREETADDRESS3 is not None or
            self.CITY is not None or
            self.PROVINCE is not None or
            self.POSTCODE is not None or
            self.COUNTRY is not None or
            self.ACCOUNT is not None or
            self.VAT is not None or
            self.CONTACTNAME is not None or
            self.CONTACTDIALCODE is not None or
            self.CONTACTTELEPHONE is not None or
            self.CONTACTEMAIL is not None or
            self.COLLECTION is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SENDER', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SENDER')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SENDER')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SENDER', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SENDER'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SENDER', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.COMPANYNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COMPANYNAME>%s</COMPANYNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COMPANYNAME), input_name='COMPANYNAME')), eol_))
        if self.STREETADDRESS1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS1>%s</STREETADDRESS1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS1), input_name='STREETADDRESS1')), eol_))
        if self.STREETADDRESS2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS2>%s</STREETADDRESS2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS2), input_name='STREETADDRESS2')), eol_))
        if self.STREETADDRESS3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<STREETADDRESS3>%s</STREETADDRESS3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.STREETADDRESS3), input_name='STREETADDRESS3')), eol_))
        if self.CITY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CITY>%s</CITY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CITY), input_name='CITY')), eol_))
        if self.PROVINCE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PROVINCE>%s</PROVINCE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PROVINCE), input_name='PROVINCE')), eol_))
        if self.POSTCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POSTCODE>%s</POSTCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POSTCODE), input_name='POSTCODE')), eol_))
        if self.COUNTRY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<COUNTRY>%s</COUNTRY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.COUNTRY), input_name='COUNTRY')), eol_))
        if self.ACCOUNT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ACCOUNT>%s</ACCOUNT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ACCOUNT), input_name='ACCOUNT')), eol_))
        if self.VAT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<VAT>%s</VAT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VAT), input_name='VAT')), eol_))
        if self.CONTACTNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTNAME>%s</CONTACTNAME>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTNAME), input_name='CONTACTNAME')), eol_))
        if self.CONTACTDIALCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTDIALCODE>%s</CONTACTDIALCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTDIALCODE), input_name='CONTACTDIALCODE')), eol_))
        if self.CONTACTTELEPHONE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTTELEPHONE>%s</CONTACTTELEPHONE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTTELEPHONE), input_name='CONTACTTELEPHONE')), eol_))
        if self.CONTACTEMAIL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONTACTEMAIL>%s</CONTACTEMAIL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONTACTEMAIL), input_name='CONTACTEMAIL')), eol_))
        if self.COLLECTION is not None:
            self.COLLECTION.export(outfile, level, namespace_, name_='COLLECTION', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'COMPANYNAME':
            COMPANYNAME_ = child_.text
            COMPANYNAME_ = self.gds_validate_string(COMPANYNAME_, node, 'COMPANYNAME')
            self.COMPANYNAME = COMPANYNAME_
        elif nodeName_ == 'STREETADDRESS1':
            STREETADDRESS1_ = child_.text
            STREETADDRESS1_ = self.gds_validate_string(STREETADDRESS1_, node, 'STREETADDRESS1')
            self.STREETADDRESS1 = STREETADDRESS1_
        elif nodeName_ == 'STREETADDRESS2':
            STREETADDRESS2_ = child_.text
            STREETADDRESS2_ = self.gds_validate_string(STREETADDRESS2_, node, 'STREETADDRESS2')
            self.STREETADDRESS2 = STREETADDRESS2_
        elif nodeName_ == 'STREETADDRESS3':
            STREETADDRESS3_ = child_.text
            STREETADDRESS3_ = self.gds_validate_string(STREETADDRESS3_, node, 'STREETADDRESS3')
            self.STREETADDRESS3 = STREETADDRESS3_
        elif nodeName_ == 'CITY':
            CITY_ = child_.text
            CITY_ = self.gds_validate_string(CITY_, node, 'CITY')
            self.CITY = CITY_
        elif nodeName_ == 'PROVINCE':
            PROVINCE_ = child_.text
            PROVINCE_ = self.gds_validate_string(PROVINCE_, node, 'PROVINCE')
            self.PROVINCE = PROVINCE_
        elif nodeName_ == 'POSTCODE':
            POSTCODE_ = child_.text
            POSTCODE_ = self.gds_validate_string(POSTCODE_, node, 'POSTCODE')
            self.POSTCODE = POSTCODE_
        elif nodeName_ == 'COUNTRY':
            COUNTRY_ = child_.text
            COUNTRY_ = self.gds_validate_string(COUNTRY_, node, 'COUNTRY')
            self.COUNTRY = COUNTRY_
        elif nodeName_ == 'ACCOUNT':
            ACCOUNT_ = child_.text
            ACCOUNT_ = self.gds_validate_string(ACCOUNT_, node, 'ACCOUNT')
            self.ACCOUNT = ACCOUNT_
        elif nodeName_ == 'VAT':
            VAT_ = child_.text
            VAT_ = self.gds_validate_string(VAT_, node, 'VAT')
            self.VAT = VAT_
        elif nodeName_ == 'CONTACTNAME':
            CONTACTNAME_ = child_.text
            CONTACTNAME_ = self.gds_validate_string(CONTACTNAME_, node, 'CONTACTNAME')
            self.CONTACTNAME = CONTACTNAME_
        elif nodeName_ == 'CONTACTDIALCODE':
            CONTACTDIALCODE_ = child_.text
            CONTACTDIALCODE_ = self.gds_validate_string(CONTACTDIALCODE_, node, 'CONTACTDIALCODE')
            self.CONTACTDIALCODE = CONTACTDIALCODE_
        elif nodeName_ == 'CONTACTTELEPHONE':
            CONTACTTELEPHONE_ = child_.text
            CONTACTTELEPHONE_ = self.gds_validate_string(CONTACTTELEPHONE_, node, 'CONTACTTELEPHONE')
            self.CONTACTTELEPHONE = CONTACTTELEPHONE_
        elif nodeName_ == 'CONTACTEMAIL':
            CONTACTEMAIL_ = child_.text
            CONTACTEMAIL_ = self.gds_validate_string(CONTACTEMAIL_, node, 'CONTACTEMAIL')
            self.CONTACTEMAIL = CONTACTEMAIL_
        elif nodeName_ == 'COLLECTION':
            obj_ = COLLECTION.factory()
            obj_.build(child_)
            self.COLLECTION = obj_
            obj_.original_tagname_ = 'COLLECTION'
# end class SENDER


class SHIP(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SHIP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SHIP.subclass:
            return SHIP.subclass(*args_, **kwargs_)
        else:
            return SHIP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SHIP', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SHIP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SHIP')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SHIP', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SHIP'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SHIP', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SHIP


class SHOW_GROUPCODE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SHOW_GROUPCODE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SHOW_GROUPCODE.subclass:
            return SHOW_GROUPCODE.subclass(*args_, **kwargs_)
        else:
            return SHOW_GROUPCODE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SHOW_GROUPCODE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SHOW_GROUPCODE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SHOW_GROUPCODE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SHOW_GROUPCODE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SHOW_GROUPCODE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SHOW_GROUPCODE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SHOW_GROUPCODE


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from shipmentrequestin import *\n\n')
        sys.stdout.write('import shipmentrequestin as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ACTIVITY",
    "ALTCOLLECTTIME",
    "ARTICLE",
    "BOOK",
    "COLLECTION",
    "COLLECTIONADDRESS",
    "CONNOTE",
    "CONSIGNMENT",
    "CONSIGNMENTBATCH",
    "CREATE",
    "DELIVERY",
    "DETAILS",
    "EMAILTO",
    "ESHIPPER",
    "INVOICE",
    "LABEL",
    "LOGIN",
    "MANIFEST",
    "PACKAGE",
    "PREFCOLLECTTIME",
    "PRINT",
    "RATE",
    "RECEIVER",
    "REQUIRED",
    "SENDER",
    "SHIP",
    "SHOW_GROUPCODE"
]
