#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:43 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/shipmentresponseout.py')
#
# Command line arguments:
#   ././shipmentresponseout.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/shipmentresponseout.py" ././shipmentresponseout.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class BOOK(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CONSIGNMENT=None):
        self.original_tagname_ = None
        if CONSIGNMENT is None:
            self.CONSIGNMENT = []
        else:
            self.CONSIGNMENT = CONSIGNMENT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BOOK)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BOOK.subclass:
            return BOOK.subclass(*args_, **kwargs_)
        else:
            return BOOK(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CONSIGNMENT(self): return self.CONSIGNMENT
    def set_CONSIGNMENT(self, CONSIGNMENT): self.CONSIGNMENT = CONSIGNMENT
    def add_CONSIGNMENT(self, value): self.CONSIGNMENT.append(value)
    def insert_CONSIGNMENT_at(self, index, value): self.CONSIGNMENT.insert(index, value)
    def replace_CONSIGNMENT_at(self, index, value): self.CONSIGNMENT[index] = value
    def hasContent_(self):
        if (
            self.CONSIGNMENT
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BOOK', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BOOK')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BOOK')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BOOK', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BOOK'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BOOK', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CONSIGNMENT_ in self.CONSIGNMENT:
            CONSIGNMENT_.export(outfile, level, namespace_, name_='CONSIGNMENT', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CONSIGNMENT':
            obj_ = CONSIGNMENT.factory()
            obj_.build(child_)
            self.CONSIGNMENT.append(obj_)
            obj_.original_tagname_ = 'CONSIGNMENT'
# end class BOOK


class CONNOTE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CONNOTE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CONNOTE.subclass:
            return CONNOTE.subclass(*args_, **kwargs_)
        else:
            return CONNOTE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ERROR or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CONNOTE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CONNOTE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CONNOTE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CONNOTE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CONNOTE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CONNOTE', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ERROR', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ERROR'):
              self.add_ERROR(obj_.value)
            elif hasattr(self, 'set_ERROR'):
              self.set_ERROR(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CONNOTE


class CONSIGNMENT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CONREF=None, CONNUMBER=None, SUCCESS=None, FIRSTTIMETRADER=None, BOOKINGREF=None):
        self.original_tagname_ = None
        self.CONREF = CONREF
        self.CONNUMBER = CONNUMBER
        self.SUCCESS = SUCCESS
        self.FIRSTTIMETRADER = FIRSTTIMETRADER
        self.BOOKINGREF = BOOKINGREF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CONSIGNMENT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CONSIGNMENT.subclass:
            return CONSIGNMENT.subclass(*args_, **kwargs_)
        else:
            return CONSIGNMENT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CONREF(self): return self.CONREF
    def set_CONREF(self, CONREF): self.CONREF = CONREF
    def get_CONNUMBER(self): return self.CONNUMBER
    def set_CONNUMBER(self, CONNUMBER): self.CONNUMBER = CONNUMBER
    def get_SUCCESS(self): return self.SUCCESS
    def set_SUCCESS(self, SUCCESS): self.SUCCESS = SUCCESS
    def get_FIRSTTIMETRADER(self): return self.FIRSTTIMETRADER
    def set_FIRSTTIMETRADER(self, FIRSTTIMETRADER): self.FIRSTTIMETRADER = FIRSTTIMETRADER
    def get_BOOKINGREF(self): return self.BOOKINGREF
    def set_BOOKINGREF(self, BOOKINGREF): self.BOOKINGREF = BOOKINGREF
    def hasContent_(self):
        if (
            self.CONREF is not None or
            self.CONNUMBER is not None or
            self.SUCCESS is not None or
            self.FIRSTTIMETRADER is not None or
            self.BOOKINGREF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CONSIGNMENT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CONSIGNMENT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CONSIGNMENT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CONSIGNMENT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CONSIGNMENT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CONSIGNMENT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CONREF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONREF>%s</CONREF>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONREF), input_name='CONREF')), eol_))
        if self.CONNUMBER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONNUMBER>%s</CONNUMBER>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONNUMBER), input_name='CONNUMBER')), eol_))
        if self.SUCCESS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SUCCESS>%s</SUCCESS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SUCCESS), input_name='SUCCESS')), eol_))
        if self.FIRSTTIMETRADER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FIRSTTIMETRADER>%s</FIRSTTIMETRADER>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FIRSTTIMETRADER), input_name='FIRSTTIMETRADER')), eol_))
        if self.BOOKINGREF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<BOOKINGREF>%s</BOOKINGREF>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BOOKINGREF), input_name='BOOKINGREF')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CONREF':
            CONREF_ = child_.text
            CONREF_ = self.gds_validate_string(CONREF_, node, 'CONREF')
            self.CONREF = CONREF_
        elif nodeName_ == 'CONNUMBER':
            CONNUMBER_ = child_.text
            CONNUMBER_ = self.gds_validate_string(CONNUMBER_, node, 'CONNUMBER')
            self.CONNUMBER = CONNUMBER_
        elif nodeName_ == 'SUCCESS':
            SUCCESS_ = child_.text
            SUCCESS_ = self.gds_validate_string(SUCCESS_, node, 'SUCCESS')
            self.SUCCESS = SUCCESS_
        elif nodeName_ == 'FIRSTTIMETRADER':
            FIRSTTIMETRADER_ = child_.text
            FIRSTTIMETRADER_ = self.gds_validate_string(FIRSTTIMETRADER_, node, 'FIRSTTIMETRADER')
            self.FIRSTTIMETRADER = FIRSTTIMETRADER_
        elif nodeName_ == 'BOOKINGREF':
            BOOKINGREF_ = child_.text
            BOOKINGREF_ = self.gds_validate_string(BOOKINGREF_, node, 'BOOKINGREF')
            self.BOOKINGREF = BOOKINGREF_
# end class CONSIGNMENT


class CREATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CONREF=None, CONNUMBER=None, SUCCESS=None):
        self.original_tagname_ = None
        self.CONREF = CONREF
        self.CONNUMBER = CONNUMBER
        self.SUCCESS = SUCCESS
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CREATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CREATE.subclass:
            return CREATE.subclass(*args_, **kwargs_)
        else:
            return CREATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CONREF(self): return self.CONREF
    def set_CONREF(self, CONREF): self.CONREF = CONREF
    def get_CONNUMBER(self): return self.CONNUMBER
    def set_CONNUMBER(self, CONNUMBER): self.CONNUMBER = CONNUMBER
    def get_SUCCESS(self): return self.SUCCESS
    def set_SUCCESS(self, SUCCESS): self.SUCCESS = SUCCESS
    def hasContent_(self):
        if (
            self.CONREF is not None or
            self.CONNUMBER is not None or
            self.SUCCESS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CREATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CREATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CREATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CREATE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CREATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CREATE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CONREF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONREF>%s</CONREF>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONREF), input_name='CONREF')), eol_))
        if self.CONNUMBER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CONNUMBER>%s</CONNUMBER>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CONNUMBER), input_name='CONNUMBER')), eol_))
        if self.SUCCESS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SUCCESS>%s</SUCCESS>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SUCCESS), input_name='SUCCESS')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CONREF':
            CONREF_ = child_.text
            CONREF_ = self.gds_validate_string(CONREF_, node, 'CONREF')
            self.CONREF = CONREF_
        elif nodeName_ == 'CONNUMBER':
            CONNUMBER_ = child_.text
            CONNUMBER_ = self.gds_validate_string(CONNUMBER_, node, 'CONNUMBER')
            self.CONNUMBER = CONNUMBER_
        elif nodeName_ == 'SUCCESS':
            SUCCESS_ = child_.text
            SUCCESS_ = self.gds_validate_string(SUCCESS_, node, 'SUCCESS')
            self.SUCCESS = SUCCESS_
# end class CREATE


class document(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GROUPCODE=None, CREATE=None, RATE=None, BOOK=None, SHIP=None, PRINT=None, ERROR=None):
        self.original_tagname_ = None
        self.GROUPCODE = GROUPCODE
        if CREATE is None:
            self.CREATE = []
        else:
            self.CREATE = CREATE
        self.RATE = RATE
        self.BOOK = BOOK
        self.SHIP = SHIP
        self.PRINT = PRINT
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, document)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if document.subclass:
            return document.subclass(*args_, **kwargs_)
        else:
            return document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GROUPCODE(self): return self.GROUPCODE
    def set_GROUPCODE(self, GROUPCODE): self.GROUPCODE = GROUPCODE
    def get_CREATE(self): return self.CREATE
    def set_CREATE(self, CREATE): self.CREATE = CREATE
    def add_CREATE(self, value): self.CREATE.append(value)
    def insert_CREATE_at(self, index, value): self.CREATE.insert(index, value)
    def replace_CREATE_at(self, index, value): self.CREATE[index] = value
    def get_RATE(self): return self.RATE
    def set_RATE(self, RATE): self.RATE = RATE
    def get_BOOK(self): return self.BOOK
    def set_BOOK(self, BOOK): self.BOOK = BOOK
    def get_SHIP(self): return self.SHIP
    def set_SHIP(self, SHIP): self.SHIP = SHIP
    def get_PRINT(self): return self.PRINT
    def set_PRINT(self, PRINT): self.PRINT = PRINT
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def hasContent_(self):
        if (
            self.GROUPCODE is not None or
            self.CREATE or
            self.RATE is not None or
            self.BOOK is not None or
            self.SHIP is not None or
            self.PRINT is not None or
            self.ERROR
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='document', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('document')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='document')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='document', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='document'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='document', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GROUPCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GROUPCODE>%s</GROUPCODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GROUPCODE), input_name='GROUPCODE')), eol_))
        for CREATE_ in self.CREATE:
            CREATE_.export(outfile, level, namespace_, name_='CREATE', pretty_print=pretty_print)
        if self.RATE is not None:
            self.RATE.export(outfile, level, namespace_, name_='RATE', pretty_print=pretty_print)
        if self.BOOK is not None:
            self.BOOK.export(outfile, level, namespace_, name_='BOOK', pretty_print=pretty_print)
        if self.SHIP is not None:
            self.SHIP.export(outfile, level, namespace_, name_='SHIP', pretty_print=pretty_print)
        if self.PRINT is not None:
            self.PRINT.export(outfile, level, namespace_, name_='PRINT', pretty_print=pretty_print)
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GROUPCODE':
            GROUPCODE_ = child_.text
            GROUPCODE_ = self.gds_validate_string(GROUPCODE_, node, 'GROUPCODE')
            self.GROUPCODE = GROUPCODE_
        elif nodeName_ == 'CREATE':
            obj_ = CREATE.factory()
            obj_.build(child_)
            self.CREATE.append(obj_)
            obj_.original_tagname_ = 'CREATE'
        elif nodeName_ == 'RATE':
            obj_ = RATE.factory()
            obj_.build(child_)
            self.RATE = obj_
            obj_.original_tagname_ = 'RATE'
        elif nodeName_ == 'BOOK':
            obj_ = BOOK.factory()
            obj_.build(child_)
            self.BOOK = obj_
            obj_.original_tagname_ = 'BOOK'
        elif nodeName_ == 'SHIP':
            obj_ = SHIP.factory()
            obj_.build(child_)
            self.SHIP = obj_
            obj_.original_tagname_ = 'SHIP'
        elif nodeName_ == 'PRINT':
            obj_ = PRINT.factory()
            obj_.build(child_)
            self.PRINT = obj_
            obj_.original_tagname_ = 'PRINT'
        elif nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            self.ERROR.append(obj_)
            obj_.original_tagname_ = 'ERROR'
# end class document


class ERROR(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODE=None, DESCRIPTION=None, SOURCE=None):
        self.original_tagname_ = None
        self.CODE = CODE
        self.DESCRIPTION = DESCRIPTION
        self.SOURCE = SOURCE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ERROR)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ERROR.subclass:
            return ERROR.subclass(*args_, **kwargs_)
        else:
            return ERROR(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODE(self): return self.CODE
    def set_CODE(self, CODE): self.CODE = CODE
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_SOURCE(self): return self.SOURCE
    def set_SOURCE(self, SOURCE): self.SOURCE = SOURCE
    def hasContent_(self):
        if (
            self.CODE is not None or
            self.DESCRIPTION is not None or
            self.SOURCE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ERROR', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ERROR')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ERROR')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ERROR', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ERROR'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ERROR', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CODE>%s</CODE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CODE), input_name='CODE')), eol_))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DESCRIPTION>%s</DESCRIPTION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DESCRIPTION), input_name='DESCRIPTION')), eol_))
        if self.SOURCE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SOURCE>%s</SOURCE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SOURCE), input_name='SOURCE')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODE':
            CODE_ = child_.text
            CODE_ = self.gds_validate_string(CODE_, node, 'CODE')
            self.CODE = CODE_
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
        elif nodeName_ == 'SOURCE':
            SOURCE_ = child_.text
            SOURCE_ = self.gds_validate_string(SOURCE_, node, 'SOURCE')
            self.SOURCE = SOURCE_
# end class ERROR


class INVOICE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, INVOICE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if INVOICE.subclass:
            return INVOICE.subclass(*args_, **kwargs_)
        else:
            return INVOICE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ERROR or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='INVOICE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('INVOICE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='INVOICE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='INVOICE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='INVOICE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='INVOICE', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ERROR', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ERROR'):
              self.add_ERROR(obj_.value)
            elif hasattr(self, 'set_ERROR'):
              self.set_ERROR(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class INVOICE


class LABEL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LABEL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LABEL.subclass:
            return LABEL.subclass(*args_, **kwargs_)
        else:
            return LABEL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ERROR or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LABEL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LABEL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LABEL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LABEL', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LABEL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LABEL', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ERROR', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ERROR'):
              self.add_ERROR(obj_.value)
            elif hasattr(self, 'set_ERROR'):
              self.set_ERROR(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class LABEL


class MANIFEST(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MANIFEST)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MANIFEST.subclass:
            return MANIFEST.subclass(*args_, **kwargs_)
        else:
            return MANIFEST(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ERROR or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MANIFEST', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MANIFEST')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MANIFEST')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MANIFEST', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MANIFEST'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MANIFEST', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ERROR', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ERROR'):
              self.add_ERROR(obj_.value)
            elif hasattr(self, 'set_ERROR'):
              self.set_ERROR(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class MANIFEST


class parse_error(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, error_reason=None, error_line=None, error_linepos=None, error_srcText=None):
        self.original_tagname_ = None
        self.error_reason = error_reason
        self.error_line = error_line
        self.error_linepos = error_linepos
        self.error_srcText = error_srcText
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parse_error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parse_error.subclass:
            return parse_error.subclass(*args_, **kwargs_)
        else:
            return parse_error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_error_reason(self): return self.error_reason
    def set_error_reason(self, error_reason): self.error_reason = error_reason
    def get_error_line(self): return self.error_line
    def set_error_line(self, error_line): self.error_line = error_line
    def get_error_linepos(self): return self.error_linepos
    def set_error_linepos(self, error_linepos): self.error_linepos = error_linepos
    def get_error_srcText(self): return self.error_srcText
    def set_error_srcText(self, error_srcText): self.error_srcText = error_srcText
    def hasContent_(self):
        if (
            self.error_reason is not None or
            self.error_line is not None or
            self.error_linepos is not None or
            self.error_srcText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='parse_error', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parse_error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='parse_error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='parse_error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='parse_error'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='parse_error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.error_reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<error_reason>%s</error_reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.error_reason), input_name='error_reason')), eol_))
        if self.error_line is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<error_line>%s</error_line>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.error_line), input_name='error_line')), eol_))
        if self.error_linepos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<error_linepos>%s</error_linepos>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.error_linepos), input_name='error_linepos')), eol_))
        if self.error_srcText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<error_srcText>%s</error_srcText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.error_srcText), input_name='error_srcText')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'error_reason':
            error_reason_ = child_.text
            error_reason_ = self.gds_validate_string(error_reason_, node, 'error_reason')
            self.error_reason = error_reason_
        elif nodeName_ == 'error_line':
            error_line_ = child_.text
            error_line_ = self.gds_validate_string(error_line_, node, 'error_line')
            self.error_line = error_line_
        elif nodeName_ == 'error_linepos':
            error_linepos_ = child_.text
            error_linepos_ = self.gds_validate_string(error_linepos_, node, 'error_linepos')
            self.error_linepos = error_linepos_
        elif nodeName_ == 'error_srcText':
            error_srcText_ = child_.text
            error_srcText_ = self.gds_validate_string(error_srcText_, node, 'error_srcText')
            self.error_srcText = error_srcText_
# end class parse_error


class PRICE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RATEID=None, SERVICE=None, SERVICEDESC=None, OPTION=None, OPTIONDESC=None, CURRENCY=None, RATE=None, RESULT=None):
        self.original_tagname_ = None
        self.RATEID = RATEID
        self.SERVICE = SERVICE
        self.SERVICEDESC = SERVICEDESC
        self.OPTION = OPTION
        self.OPTIONDESC = OPTIONDESC
        self.CURRENCY = CURRENCY
        self.RATE = RATE
        self.RESULT = RESULT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PRICE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PRICE.subclass:
            return PRICE.subclass(*args_, **kwargs_)
        else:
            return PRICE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RATEID(self): return self.RATEID
    def set_RATEID(self, RATEID): self.RATEID = RATEID
    def get_SERVICE(self): return self.SERVICE
    def set_SERVICE(self, SERVICE): self.SERVICE = SERVICE
    def get_SERVICEDESC(self): return self.SERVICEDESC
    def set_SERVICEDESC(self, SERVICEDESC): self.SERVICEDESC = SERVICEDESC
    def get_OPTION(self): return self.OPTION
    def set_OPTION(self, OPTION): self.OPTION = OPTION
    def get_OPTIONDESC(self): return self.OPTIONDESC
    def set_OPTIONDESC(self, OPTIONDESC): self.OPTIONDESC = OPTIONDESC
    def get_CURRENCY(self): return self.CURRENCY
    def set_CURRENCY(self, CURRENCY): self.CURRENCY = CURRENCY
    def get_RATE(self): return self.RATE
    def set_RATE(self, RATE): self.RATE = RATE
    def get_RESULT(self): return self.RESULT
    def set_RESULT(self, RESULT): self.RESULT = RESULT
    def hasContent_(self):
        if (
            self.RATEID is not None or
            self.SERVICE is not None or
            self.SERVICEDESC is not None or
            self.OPTION is not None or
            self.OPTIONDESC is not None or
            self.CURRENCY is not None or
            self.RATE is not None or
            self.RESULT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PRICE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PRICE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PRICE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PRICE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PRICE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PRICE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RATEID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RATEID>%s</RATEID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RATEID), input_name='RATEID')), eol_))
        if self.SERVICE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SERVICE>%s</SERVICE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE), input_name='SERVICE')), eol_))
        if self.SERVICEDESC is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SERVICEDESC>%s</SERVICEDESC>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SERVICEDESC), input_name='SERVICEDESC')), eol_))
        if self.OPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OPTION>%s</OPTION>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OPTION), input_name='OPTION')), eol_))
        if self.OPTIONDESC is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OPTIONDESC>%s</OPTIONDESC>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OPTIONDESC), input_name='OPTIONDESC')), eol_))
        if self.CURRENCY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CURRENCY>%s</CURRENCY>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CURRENCY), input_name='CURRENCY')), eol_))
        if self.RATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RATE>%s</RATE>%s' % (self.gds_format_float(self.RATE, input_name='RATE'), eol_))
        if self.RESULT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RESULT>%s</RESULT>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RESULT), input_name='RESULT')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RATEID':
            RATEID_ = child_.text
            RATEID_ = self.gds_validate_string(RATEID_, node, 'RATEID')
            self.RATEID = RATEID_
        elif nodeName_ == 'SERVICE':
            SERVICE_ = child_.text
            SERVICE_ = self.gds_validate_string(SERVICE_, node, 'SERVICE')
            self.SERVICE = SERVICE_
        elif nodeName_ == 'SERVICEDESC':
            SERVICEDESC_ = child_.text
            SERVICEDESC_ = self.gds_validate_string(SERVICEDESC_, node, 'SERVICEDESC')
            self.SERVICEDESC = SERVICEDESC_
        elif nodeName_ == 'OPTION':
            OPTION_ = child_.text
            OPTION_ = self.gds_validate_string(OPTION_, node, 'OPTION')
            self.OPTION = OPTION_
        elif nodeName_ == 'OPTIONDESC':
            OPTIONDESC_ = child_.text
            OPTIONDESC_ = self.gds_validate_string(OPTIONDESC_, node, 'OPTIONDESC')
            self.OPTIONDESC = OPTIONDESC_
        elif nodeName_ == 'CURRENCY':
            CURRENCY_ = child_.text
            CURRENCY_ = self.gds_validate_string(CURRENCY_, node, 'CURRENCY')
            self.CURRENCY = CURRENCY_
        elif nodeName_ == 'RATE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RATE')
            self.RATE = fval_
        elif nodeName_ == 'RESULT':
            RESULT_ = child_.text
            RESULT_ = self.gds_validate_string(RESULT_, node, 'RESULT')
            self.RESULT = RESULT_
# end class PRICE


class PRINT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, CONNOTE=None, LABEL=None, MANIFEST=None, INVOICE=None, EMAILTO=None, EMAILFROM=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        self.CONNOTE = CONNOTE
        self.LABEL = LABEL
        self.MANIFEST = MANIFEST
        self.INVOICE = INVOICE
        self.EMAILTO = EMAILTO
        self.EMAILFROM = EMAILFROM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PRINT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PRINT.subclass:
            return PRINT.subclass(*args_, **kwargs_)
        else:
            return PRINT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_CONNOTE(self): return self.CONNOTE
    def set_CONNOTE(self, CONNOTE): self.CONNOTE = CONNOTE
    def get_LABEL(self): return self.LABEL
    def set_LABEL(self, LABEL): self.LABEL = LABEL
    def get_MANIFEST(self): return self.MANIFEST
    def set_MANIFEST(self, MANIFEST): self.MANIFEST = MANIFEST
    def get_INVOICE(self): return self.INVOICE
    def set_INVOICE(self, INVOICE): self.INVOICE = INVOICE
    def get_EMAILTO(self): return self.EMAILTO
    def set_EMAILTO(self, EMAILTO): self.EMAILTO = EMAILTO
    def get_EMAILFROM(self): return self.EMAILFROM
    def set_EMAILFROM(self, EMAILFROM): self.EMAILFROM = EMAILFROM
    def hasContent_(self):
        if (
            self.ERROR or
            self.CONNOTE is not None or
            self.LABEL is not None or
            self.MANIFEST is not None or
            self.INVOICE is not None or
            self.EMAILTO is not None or
            self.EMAILFROM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PRINT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PRINT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PRINT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PRINT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PRINT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PRINT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
        if self.CONNOTE is not None:
            self.CONNOTE.export(outfile, level, namespace_, name_='CONNOTE', pretty_print=pretty_print)
        if self.LABEL is not None:
            self.LABEL.export(outfile, level, namespace_, name_='LABEL', pretty_print=pretty_print)
        if self.MANIFEST is not None:
            self.MANIFEST.export(outfile, level, namespace_, name_='MANIFEST', pretty_print=pretty_print)
        if self.INVOICE is not None:
            self.INVOICE.export(outfile, level, namespace_, name_='INVOICE', pretty_print=pretty_print)
        if self.EMAILTO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMAILTO>%s</EMAILTO>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMAILTO), input_name='EMAILTO')), eol_))
        if self.EMAILFROM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMAILFROM>%s</EMAILFROM>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMAILFROM), input_name='EMAILFROM')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            self.ERROR.append(obj_)
            obj_.original_tagname_ = 'ERROR'
        elif nodeName_ == 'CONNOTE':
            obj_ = CONNOTE.factory()
            obj_.build(child_)
            self.CONNOTE = obj_
            obj_.original_tagname_ = 'CONNOTE'
        elif nodeName_ == 'LABEL':
            obj_ = LABEL.factory()
            obj_.build(child_)
            self.LABEL = obj_
            obj_.original_tagname_ = 'LABEL'
        elif nodeName_ == 'MANIFEST':
            obj_ = MANIFEST.factory()
            obj_.build(child_)
            self.MANIFEST = obj_
            obj_.original_tagname_ = 'MANIFEST'
        elif nodeName_ == 'INVOICE':
            obj_ = INVOICE.factory()
            obj_.build(child_)
            self.INVOICE = obj_
            obj_.original_tagname_ = 'INVOICE'
        elif nodeName_ == 'EMAILTO':
            EMAILTO_ = child_.text
            EMAILTO_ = self.gds_validate_string(EMAILTO_, node, 'EMAILTO')
            self.EMAILTO = EMAILTO_
        elif nodeName_ == 'EMAILFROM':
            EMAILFROM_ = child_.text
            EMAILFROM_ = self.gds_validate_string(EMAILFROM_, node, 'EMAILFROM')
            self.EMAILFROM = EMAILFROM_
# end class PRINT


class RATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, PRICE=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        if PRICE is None:
            self.PRICE = []
        else:
            self.PRICE = PRICE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RATE.subclass:
            return RATE.subclass(*args_, **kwargs_)
        else:
            return RATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_PRICE(self): return self.PRICE
    def set_PRICE(self, PRICE): self.PRICE = PRICE
    def add_PRICE(self, value): self.PRICE.append(value)
    def insert_PRICE_at(self, index, value): self.PRICE.insert(index, value)
    def replace_PRICE_at(self, index, value): self.PRICE[index] = value
    def hasContent_(self):
        if (
            self.ERROR or
            self.PRICE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RATE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RATE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
        for PRICE_ in self.PRICE:
            PRICE_.export(outfile, level, namespace_, name_='PRICE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            self.ERROR.append(obj_)
            obj_.original_tagname_ = 'ERROR'
        elif nodeName_ == 'PRICE':
            obj_ = PRICE.factory()
            obj_.build(child_)
            self.PRICE.append(obj_)
            obj_.original_tagname_ = 'PRICE'
# end class RATE


class runtime_error(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, error_reason=None, error_srcText=None):
        self.original_tagname_ = None
        self.error_reason = error_reason
        self.error_srcText = error_srcText
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, runtime_error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if runtime_error.subclass:
            return runtime_error.subclass(*args_, **kwargs_)
        else:
            return runtime_error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_error_reason(self): return self.error_reason
    def set_error_reason(self, error_reason): self.error_reason = error_reason
    def get_error_srcText(self): return self.error_srcText
    def set_error_srcText(self, error_srcText): self.error_srcText = error_srcText
    def hasContent_(self):
        if (
            self.error_reason is not None or
            self.error_srcText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='runtime_error', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('runtime_error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='runtime_error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='runtime_error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='runtime_error'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='runtime_error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.error_reason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<error_reason>%s</error_reason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.error_reason), input_name='error_reason')), eol_))
        if self.error_srcText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<error_srcText>%s</error_srcText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.error_srcText), input_name='error_srcText')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'error_reason':
            error_reason_ = child_.text
            error_reason_ = self.gds_validate_string(error_reason_, node, 'error_reason')
            self.error_reason = error_reason_
        elif nodeName_ == 'error_srcText':
            error_srcText_ = child_.text
            error_srcText_ = self.gds_validate_string(error_srcText_, node, 'error_srcText')
            self.error_srcText = error_srcText_
# end class runtime_error


class SHIP(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ERROR=None, CONSIGNMENT=None):
        self.original_tagname_ = None
        if ERROR is None:
            self.ERROR = []
        else:
            self.ERROR = ERROR
        if CONSIGNMENT is None:
            self.CONSIGNMENT = []
        else:
            self.CONSIGNMENT = CONSIGNMENT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SHIP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SHIP.subclass:
            return SHIP.subclass(*args_, **kwargs_)
        else:
            return SHIP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ERROR(self): return self.ERROR
    def set_ERROR(self, ERROR): self.ERROR = ERROR
    def add_ERROR(self, value): self.ERROR.append(value)
    def insert_ERROR_at(self, index, value): self.ERROR.insert(index, value)
    def replace_ERROR_at(self, index, value): self.ERROR[index] = value
    def get_CONSIGNMENT(self): return self.CONSIGNMENT
    def set_CONSIGNMENT(self, CONSIGNMENT): self.CONSIGNMENT = CONSIGNMENT
    def add_CONSIGNMENT(self, value): self.CONSIGNMENT.append(value)
    def insert_CONSIGNMENT_at(self, index, value): self.CONSIGNMENT.insert(index, value)
    def replace_CONSIGNMENT_at(self, index, value): self.CONSIGNMENT[index] = value
    def hasContent_(self):
        if (
            self.ERROR or
            self.CONSIGNMENT
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SHIP', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SHIP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SHIP')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SHIP', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SHIP'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SHIP', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ERROR_ in self.ERROR:
            ERROR_.export(outfile, level, namespace_, name_='ERROR', pretty_print=pretty_print)
        for CONSIGNMENT_ in self.CONSIGNMENT:
            CONSIGNMENT_.export(outfile, level, namespace_, name_='CONSIGNMENT', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ERROR':
            obj_ = ERROR.factory()
            obj_.build(child_)
            self.ERROR.append(obj_)
            obj_.original_tagname_ = 'ERROR'
        elif nodeName_ == 'CONSIGNMENT':
            obj_ = CONSIGNMENT.factory()
            obj_.build(child_)
            self.CONSIGNMENT.append(obj_)
            obj_.original_tagname_ = 'CONSIGNMENT'
# end class SHIP


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BOOK'
        rootClass = BOOK
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BOOK'
        rootClass = BOOK
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BOOK'
        rootClass = BOOK
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BOOK'
        rootClass = BOOK
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from shipmentresponseout import *\n\n')
        sys.stdout.write('import shipmentresponseout as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "BOOK",
    "CONNOTE",
    "CONSIGNMENT",
    "CREATE",
    "ERROR",
    "INVOICE",
    "LABEL",
    "MANIFEST",
    "PRICE",
    "PRINT",
    "RATE",
    "SHIP",
    "document",
    "parse_error",
    "runtime_error"
]
