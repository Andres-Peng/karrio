#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:44 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/trackrequest_v3.1.py')
#
# Command line arguments:
#   ././trackrequest_v3.1.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/trackrequest_v3.1.py" ././trackrequest_v3.1.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class NumberOfDays(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.original_tagname_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NumberOfDays)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NumberOfDays.subclass:
            return NumberOfDays.subclass(*args_, **kwargs_)
        else:
            return NumberOfDays(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NumberOfDays', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NumberOfDays')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NumberOfDays')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NumberOfDays', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NumberOfDays'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NumberOfDays', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NumberOfDays


class TrackRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, locale=None, version='3.0', SearchCriteria=None, LevelOfDetail=None):
        self.original_tagname_ = None
        self.locale = _cast(None, locale)
        self.version = _cast(float, version)
        self.SearchCriteria = SearchCriteria
        self.LevelOfDetail = LevelOfDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackRequest.subclass:
            return TrackRequest.subclass(*args_, **kwargs_)
        else:
            return TrackRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SearchCriteria(self): return self.SearchCriteria
    def set_SearchCriteria(self, SearchCriteria): self.SearchCriteria = SearchCriteria
    def get_LevelOfDetail(self): return self.LevelOfDetail
    def set_LevelOfDetail(self, LevelOfDetail): self.LevelOfDetail = LevelOfDetail
    def get_locale(self): return self.locale
    def set_locale(self, locale): self.locale = locale
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def validate_LocaleType(self, value):
        # Validate type LocaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_LocaleType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_LocaleType_patterns_, ))
    validate_LocaleType_patterns_ = [['^[a-z][a-z]_[A-Z][A-Z]$']]
    def validate_VersionType(self, value):
        # Validate type VersionType, a restriction on xs:float.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.SearchCriteria is not None or
            self.LevelOfDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TrackRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TrackRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TrackRequest'):
        if self.locale is not None and 'locale' not in already_processed:
            already_processed.add('locale')
            outfile.write(' locale=%s' % (quote_attrib(self.locale), ))
        if self.version != 3.0 and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (quote_attrib(self.version), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TrackRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SearchCriteria is not None:
            self.SearchCriteria.export(outfile, level, namespace_, name_='SearchCriteria', pretty_print=pretty_print)
        if self.LevelOfDetail is not None:
            self.LevelOfDetail.export(outfile, level, namespace_, name_='LevelOfDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('locale', node)
        if value is not None and 'locale' not in already_processed:
            already_processed.add('locale')
            self.locale = value
            self.validate_LocaleType(self.locale)    # validate type LocaleType
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            try:
                self.version = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (version): %s' % exp)
            self.validate_VersionType(self.version)    # validate type VersionType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SearchCriteria':
            obj_ = SearchCriteriaType.factory()
            obj_.build(child_)
            self.SearchCriteria = obj_
            obj_.original_tagname_ = 'SearchCriteria'
        elif nodeName_ == 'LevelOfDetail':
            obj_ = LevelOfDetailType.factory()
            obj_.build(child_)
            self.LevelOfDetail = obj_
            obj_.original_tagname_ = 'LevelOfDetail'
# end class TrackRequest


class AccountStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, CountryCode=None):
        self.original_tagname_ = None
        self.Number = Number
        self.validate_NumberType(self.Number)
        self.CountryCode = CountryCode
        self.validate_CountryCodeType(self.CountryCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountStructure.subclass:
            return AccountStructure.subclass(*args_, **kwargs_)
        else:
            return AccountStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def validate_NumberType(self, value):
        # Validate type NumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NumberType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NumberType_patterns_, ))
    validate_NumberType_patterns_ = [['^[A-Za-z0-9]+$']]
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CountryCodeType_patterns_, ))
    validate_CountryCodeType_patterns_ = [['^[A-Z][A-Z][A-Z0-9]?$']]
    def hasContent_(self):
        if (
            self.Number is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AccountStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AccountStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
            # validate type NumberType
            self.validate_NumberType(self.Number)
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
            # validate type CountryCodeType
            self.validate_CountryCodeType(self.CountryCode)
# end class AccountStructure


class DateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, format='YYYYMMDD', valueOf_=None):
        self.original_tagname_ = None
        self.format = _cast(None, format)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType.subclass:
            return DateType.subclass(*args_, **kwargs_)
        else:
            return DateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType'):
        if self.format != "YYYYMMDD" and 'format' not in already_processed:
            already_processed.add('format')
            outfile.write(' format=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.format), input_name='format')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('format', node)
        if value is not None and 'format' not in already_processed:
            already_processed.add('format')
            self.format = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DateType


class TimeFrameStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateFrom=None, DateTo=None, NumberOfDays=None):
        self.original_tagname_ = None
        self.DateFrom = DateFrom
        self.DateTo = DateTo
        self.NumberOfDays = NumberOfDays
        self.validate_NumberOfDays(self.NumberOfDays)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeFrameStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeFrameStructure.subclass:
            return TimeFrameStructure.subclass(*args_, **kwargs_)
        else:
            return TimeFrameStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateFrom(self): return self.DateFrom
    def set_DateFrom(self, DateFrom): self.DateFrom = DateFrom
    def get_DateTo(self): return self.DateTo
    def set_DateTo(self, DateTo): self.DateTo = DateTo
    def get_NumberOfDays(self): return self.NumberOfDays
    def set_NumberOfDays(self, NumberOfDays): self.NumberOfDays = NumberOfDays
    def validate_NumberOfDays(self, value):
        # Validate type NumberOfDays, a restriction on NonNegativeInteger.
        pass
    def hasContent_(self):
        if (
            self.DateFrom is not None or
            self.DateTo is not None or
            self.NumberOfDays is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TimeFrameStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeFrameStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeFrameStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TimeFrameStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TimeFrameStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TimeFrameStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateFrom is not None:
            self.DateFrom.export(outfile, level, namespace_, name_='DateFrom', pretty_print=pretty_print)
        if self.DateTo is not None:
            self.DateTo.export(outfile, level, namespace_, name_='DateTo', pretty_print=pretty_print)
        if self.NumberOfDays is not None:
            self.NumberOfDays.export(outfile, level, namespace_, name_='NumberOfDays', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateFrom':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.DateFrom = obj_
            obj_.original_tagname_ = 'DateFrom'
        elif nodeName_ == 'DateTo':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.DateTo = obj_
            obj_.original_tagname_ = 'DateTo'
        elif nodeName_ == 'NumberOfDays':
            obj_ = None
            self.NumberOfDays = obj_
            obj_.original_tagname_ = 'NumberOfDays'
            # validate type NumberOfDays
            self.validate_NumberOfDays(self.NumberOfDays)
# end class TimeFrameStructure


class UsernameTokenStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Username=None, Password=None):
        self.original_tagname_ = None
        self.Username = Username
        self.validate_NonZeroLengthString(self.Username)
        self.Password = Password
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UsernameTokenStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UsernameTokenStructure.subclass:
            return UsernameTokenStructure.subclass(*args_, **kwargs_)
        else:
            return UsernameTokenStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Username(self): return self.Username
    def set_Username(self, Username): self.Username = Username
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def validate_NonZeroLengthString(self, value):
        # Validate type NonZeroLengthString, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on NonZeroLengthString' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Username is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='UsernameTokenStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UsernameTokenStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UsernameTokenStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='UsernameTokenStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UsernameTokenStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UsernameTokenStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Username is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Username>%s</Username>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Username), input_name='Username')), eol_))
        if self.Password is not None:
            self.Password.export(outfile, level, namespace_, name_='Password', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Username':
            Username_ = child_.text
            Username_ = self.gds_validate_string(Username_, node, 'Username')
            self.Username = Username_
            # validate type NonZeroLengthString
            self.validate_NonZeroLengthString(self.Username)
        elif nodeName_ == 'Password':
            obj_ = PasswordType.factory()
            obj_.build(child_)
            self.Password = obj_
            obj_.original_tagname_ = 'Password'
# end class UsernameTokenStructure


class SearchCriteriaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, marketType=None, originCountry=None, AlternativeConsignmentNumber=None, ConsignmentNumber=None, CustomerReference=None, PieceReference=None, Account=None, Period=None):
        self.original_tagname_ = None
        self.marketType = _cast(None, marketType)
        self.originCountry = _cast(None, originCountry)
        if AlternativeConsignmentNumber is None:
            self.AlternativeConsignmentNumber = []
        else:
            self.AlternativeConsignmentNumber = AlternativeConsignmentNumber
        if ConsignmentNumber is None:
            self.ConsignmentNumber = []
        else:
            self.ConsignmentNumber = ConsignmentNumber
        if CustomerReference is None:
            self.CustomerReference = []
        else:
            self.CustomerReference = CustomerReference
        if PieceReference is None:
            self.PieceReference = []
        else:
            self.PieceReference = PieceReference
        if Account is None:
            self.Account = []
        else:
            self.Account = Account
        self.Period = Period
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchCriteriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchCriteriaType.subclass:
            return SearchCriteriaType.subclass(*args_, **kwargs_)
        else:
            return SearchCriteriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AlternativeConsignmentNumber(self): return self.AlternativeConsignmentNumber
    def set_AlternativeConsignmentNumber(self, AlternativeConsignmentNumber): self.AlternativeConsignmentNumber = AlternativeConsignmentNumber
    def add_AlternativeConsignmentNumber(self, value): self.AlternativeConsignmentNumber.append(value)
    def insert_AlternativeConsignmentNumber_at(self, index, value): self.AlternativeConsignmentNumber.insert(index, value)
    def replace_AlternativeConsignmentNumber_at(self, index, value): self.AlternativeConsignmentNumber[index] = value
    def get_ConsignmentNumber(self): return self.ConsignmentNumber
    def set_ConsignmentNumber(self, ConsignmentNumber): self.ConsignmentNumber = ConsignmentNumber
    def add_ConsignmentNumber(self, value): self.ConsignmentNumber.append(value)
    def insert_ConsignmentNumber_at(self, index, value): self.ConsignmentNumber.insert(index, value)
    def replace_ConsignmentNumber_at(self, index, value): self.ConsignmentNumber[index] = value
    def get_CustomerReference(self): return self.CustomerReference
    def set_CustomerReference(self, CustomerReference): self.CustomerReference = CustomerReference
    def add_CustomerReference(self, value): self.CustomerReference.append(value)
    def insert_CustomerReference_at(self, index, value): self.CustomerReference.insert(index, value)
    def replace_CustomerReference_at(self, index, value): self.CustomerReference[index] = value
    def get_PieceReference(self): return self.PieceReference
    def set_PieceReference(self, PieceReference): self.PieceReference = PieceReference
    def add_PieceReference(self, value): self.PieceReference.append(value)
    def insert_PieceReference_at(self, index, value): self.PieceReference.insert(index, value)
    def replace_PieceReference_at(self, index, value): self.PieceReference[index] = value
    def get_Account(self): return self.Account
    def set_Account(self, Account): self.Account = Account
    def add_Account(self, value): self.Account.append(value)
    def insert_Account_at(self, index, value): self.Account.insert(index, value)
    def replace_Account_at(self, index, value): self.Account[index] = value
    def get_Period(self): return self.Period
    def set_Period(self, Period): self.Period = Period
    def get_marketType(self): return self.marketType
    def set_marketType(self, marketType): self.marketType = marketType
    def get_originCountry(self): return self.originCountry
    def set_originCountry(self, originCountry): self.originCountry = originCountry
    def validate_NonZeroLengthString(self, value):
        # Validate type NonZeroLengthString, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on NonZeroLengthString' % {"value" : value.encode("utf-8")} )
    def validate_MarketTypeType(self, value):
        # Validate type MarketTypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Domestic', 'International']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MarketTypeType' % {"value" : value.encode("utf-8")} )
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CountryCodeType_patterns_, ))
    validate_CountryCodeType_patterns_ = [['^[A-Z][A-Z][A-Z0-9]?$']]
    def hasContent_(self):
        if (
            self.AlternativeConsignmentNumber or
            self.ConsignmentNumber or
            self.CustomerReference or
            self.PieceReference or
            self.Account or
            self.Period is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SearchCriteriaType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchCriteriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SearchCriteriaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SearchCriteriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SearchCriteriaType'):
        if self.marketType is not None and 'marketType' not in already_processed:
            already_processed.add('marketType')
            outfile.write(' marketType=%s' % (quote_attrib(self.marketType), ))
        if self.originCountry is not None and 'originCountry' not in already_processed:
            already_processed.add('originCountry')
            outfile.write(' originCountry=%s' % (quote_attrib(self.originCountry), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SearchCriteriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AlternativeConsignmentNumber_ in self.AlternativeConsignmentNumber:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AlternativeConsignmentNumber>%s</AlternativeConsignmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AlternativeConsignmentNumber_), input_name='AlternativeConsignmentNumber')), eol_))
        for ConsignmentNumber_ in self.ConsignmentNumber:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ConsignmentNumber>%s</ConsignmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(ConsignmentNumber_), input_name='ConsignmentNumber')), eol_))
        for CustomerReference_ in self.CustomerReference:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CustomerReference>%s</CustomerReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(CustomerReference_), input_name='CustomerReference')), eol_))
        for PieceReference_ in self.PieceReference:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PieceReference>%s</PieceReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(PieceReference_), input_name='PieceReference')), eol_))
        for Account_ in self.Account:
            Account_.export(outfile, level, namespace_, name_='Account', pretty_print=pretty_print)
        if self.Period is not None:
            self.Period.export(outfile, level, namespace_, name_='Period', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('marketType', node)
        if value is not None and 'marketType' not in already_processed:
            already_processed.add('marketType')
            self.marketType = value
            self.validate_MarketTypeType(self.marketType)    # validate type MarketTypeType
        value = find_attr_value_('originCountry', node)
        if value is not None and 'originCountry' not in already_processed:
            already_processed.add('originCountry')
            self.originCountry = value
            self.validate_CountryCodeType(self.originCountry)    # validate type CountryCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AlternativeConsignmentNumber':
            AlternativeConsignmentNumber_ = child_.text
            AlternativeConsignmentNumber_ = self.gds_validate_string(AlternativeConsignmentNumber_, node, 'AlternativeConsignmentNumber')
            self.AlternativeConsignmentNumber.append(AlternativeConsignmentNumber_)
            # validate type NonZeroLengthString
            self.validate_NonZeroLengthString(self.AlternativeConsignmentNumber[-1])
        elif nodeName_ == 'ConsignmentNumber':
            ConsignmentNumber_ = child_.text
            ConsignmentNumber_ = self.gds_validate_string(ConsignmentNumber_, node, 'ConsignmentNumber')
            self.ConsignmentNumber.append(ConsignmentNumber_)
            # validate type NonZeroLengthString
            self.validate_NonZeroLengthString(self.ConsignmentNumber[-1])
        elif nodeName_ == 'CustomerReference':
            CustomerReference_ = child_.text
            CustomerReference_ = self.gds_validate_string(CustomerReference_, node, 'CustomerReference')
            self.CustomerReference.append(CustomerReference_)
            # validate type NonZeroLengthString
            self.validate_NonZeroLengthString(self.CustomerReference[-1])
        elif nodeName_ == 'PieceReference':
            PieceReference_ = child_.text
            PieceReference_ = self.gds_validate_string(PieceReference_, node, 'PieceReference')
            self.PieceReference.append(PieceReference_)
            # validate type NonZeroLengthString
            self.validate_NonZeroLengthString(self.PieceReference[-1])
        elif nodeName_ == 'Account':
            obj_ = AccountStructure.factory()
            obj_.build(child_)
            self.Account.append(obj_)
            obj_.original_tagname_ = 'Account'
        elif nodeName_ == 'Period':
            obj_ = TimeFrameStructure.factory()
            obj_.build(child_)
            self.Period = obj_
            obj_.original_tagname_ = 'Period'
# end class SearchCriteriaType


class LevelOfDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Complete=None, Summary=None):
        self.original_tagname_ = None
        self.Complete = Complete
        self.Summary = Summary
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LevelOfDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LevelOfDetailType.subclass:
            return LevelOfDetailType.subclass(*args_, **kwargs_)
        else:
            return LevelOfDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Complete(self): return self.Complete
    def set_Complete(self, Complete): self.Complete = Complete
    def get_Summary(self): return self.Summary
    def set_Summary(self, Summary): self.Summary = Summary
    def hasContent_(self):
        if (
            self.Complete is not None or
            self.Summary is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LevelOfDetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LevelOfDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LevelOfDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LevelOfDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LevelOfDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LevelOfDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Complete is not None:
            self.Complete.export(outfile, level, namespace_, name_='Complete', pretty_print=pretty_print)
        if self.Summary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Summary>%s</Summary>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Summary), input_name='Summary')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Complete':
            obj_ = CompleteType.factory()
            obj_.build(child_)
            self.Complete = obj_
            obj_.original_tagname_ = 'Complete'
        elif nodeName_ == 'Summary':
            Summary_ = child_.text
            Summary_ = self.gds_validate_string(Summary_, node, 'Summary')
            self.Summary = Summary_
# end class LevelOfDetailType


class Summary(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Summary)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Summary.subclass:
            return Summary.subclass(*args_, **kwargs_)
        else:
            return Summary(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Summary', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Summary')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Summary')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Summary', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Summary'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Summary', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Summary


class CompleteType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, originAddress=False, destinationAddress=False, shipment=False, package=False, podImage=False):
        self.original_tagname_ = None
        self.originAddress = _cast(bool, originAddress)
        self.destinationAddress = _cast(bool, destinationAddress)
        self.shipment = _cast(bool, shipment)
        self.package = _cast(bool, package)
        self.podImage = _cast(bool, podImage)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompleteType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompleteType.subclass:
            return CompleteType.subclass(*args_, **kwargs_)
        else:
            return CompleteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_originAddress(self): return self.originAddress
    def set_originAddress(self, originAddress): self.originAddress = originAddress
    def get_destinationAddress(self): return self.destinationAddress
    def set_destinationAddress(self, destinationAddress): self.destinationAddress = destinationAddress
    def get_shipment(self): return self.shipment
    def set_shipment(self, shipment): self.shipment = shipment
    def get_package(self): return self.package
    def set_package(self, package): self.package = package
    def get_podImage(self): return self.podImage
    def set_podImage(self, podImage): self.podImage = podImage
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CompleteType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompleteType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompleteType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CompleteType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompleteType'):
        if self.originAddress and 'originAddress' not in already_processed:
            already_processed.add('originAddress')
            outfile.write(' originAddress="%s"' % self.gds_format_boolean(self.originAddress, input_name='originAddress'))
        if self.destinationAddress and 'destinationAddress' not in already_processed:
            already_processed.add('destinationAddress')
            outfile.write(' destinationAddress="%s"' % self.gds_format_boolean(self.destinationAddress, input_name='destinationAddress'))
        if self.shipment and 'shipment' not in already_processed:
            already_processed.add('shipment')
            outfile.write(' shipment="%s"' % self.gds_format_boolean(self.shipment, input_name='shipment'))
        if self.package and 'package' not in already_processed:
            already_processed.add('package')
            outfile.write(' package="%s"' % self.gds_format_boolean(self.package, input_name='package'))
        if self.podImage and 'podImage' not in already_processed:
            already_processed.add('podImage')
            outfile.write(' podImage="%s"' % self.gds_format_boolean(self.podImage, input_name='podImage'))
    def exportChildren(self, outfile, level, namespace_='', name_='CompleteType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('originAddress', node)
        if value is not None and 'originAddress' not in already_processed:
            already_processed.add('originAddress')
            if value in ('true', '1'):
                self.originAddress = True
            elif value in ('false', '0'):
                self.originAddress = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('destinationAddress', node)
        if value is not None and 'destinationAddress' not in already_processed:
            already_processed.add('destinationAddress')
            if value in ('true', '1'):
                self.destinationAddress = True
            elif value in ('false', '0'):
                self.destinationAddress = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('shipment', node)
        if value is not None and 'shipment' not in already_processed:
            already_processed.add('shipment')
            if value in ('true', '1'):
                self.shipment = True
            elif value in ('false', '0'):
                self.shipment = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('package', node)
        if value is not None and 'package' not in already_processed:
            already_processed.add('package')
            if value in ('true', '1'):
                self.package = True
            elif value in ('false', '0'):
                self.package = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('podImage', node)
        if value is not None and 'podImage' not in already_processed:
            already_processed.add('podImage')
            if value in ('true', '1'):
                self.podImage = True
            elif value in ('false', '0'):
                self.podImage = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CompleteType


class PasswordType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type='PasswordText', valueOf_=None):
        self.original_tagname_ = None
        self.Type = _cast(None, Type)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PasswordType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PasswordType.subclass:
            return PasswordType.subclass(*args_, **kwargs_)
        else:
            return PasswordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PasswordType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PasswordType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PasswordType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PasswordType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PasswordType'):
        if self.Type != "PasswordText" and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Type), input_name='Type')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PasswordType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PasswordType


GDSClassesMapping = {
    'Account': AccountStructure,
    'DateFrom': DateType,
    'DateTo': DateType,
    'Period': TimeFrameStructure,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AccountStructure'
        rootClass = AccountStructure
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AccountStructure'
        rootClass = AccountStructure
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AccountStructure'
        rootClass = AccountStructure
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AccountStructure'
        rootClass = AccountStructure
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from trackrequest_v3.1 import *\n\n')
        sys.stdout.write('import trackrequest_v3.1 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AccountStructure",
    "CompleteType",
    "DateType",
    "LevelOfDetailType",
    "NumberOfDays",
    "PasswordType",
    "SearchCriteriaType",
    "TimeFrameStructure",
    "TrackRequest",
    "UsernameTokenStructure"
]
