#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:39 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/pricerequestin.py')
#
# Command line arguments:
#   ././pricerequestin.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/pricerequestin.py" ././pricerequestin.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class priceCheck(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, rateId=None, sender=None, delivery=None, collectionDateTime=None, product=None, account=None, insurance=None, termsOfPayment=None, currency=None, priceBreakDown=False, consignmentDetails=None, pieceLine=None):
        self.original_tagname_ = None
        self.rateId = rateId
        self.sender = sender
        self.delivery = delivery
        if isinstance(collectionDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(collectionDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = collectionDateTime
        self.collectionDateTime = initvalue_
        self.product = product
        self.account = account
        self.insurance = insurance
        self.termsOfPayment = termsOfPayment
        self.currency = currency
        self.priceBreakDown = priceBreakDown
        self.consignmentDetails = consignmentDetails
        if pieceLine is None:
            self.pieceLine = []
        else:
            self.pieceLine = pieceLine
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, priceCheck)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if priceCheck.subclass:
            return priceCheck.subclass(*args_, **kwargs_)
        else:
            return priceCheck(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_rateId(self): return self.rateId
    def set_rateId(self, rateId): self.rateId = rateId
    def get_sender(self): return self.sender
    def set_sender(self, sender): self.sender = sender
    def get_delivery(self): return self.delivery
    def set_delivery(self, delivery): self.delivery = delivery
    def get_collectionDateTime(self): return self.collectionDateTime
    def set_collectionDateTime(self, collectionDateTime): self.collectionDateTime = collectionDateTime
    def get_product(self): return self.product
    def set_product(self, product): self.product = product
    def get_account(self): return self.account
    def set_account(self, account): self.account = account
    def get_insurance(self): return self.insurance
    def set_insurance(self, insurance): self.insurance = insurance
    def get_termsOfPayment(self): return self.termsOfPayment
    def set_termsOfPayment(self, termsOfPayment): self.termsOfPayment = termsOfPayment
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_priceBreakDown(self): return self.priceBreakDown
    def set_priceBreakDown(self, priceBreakDown): self.priceBreakDown = priceBreakDown
    def get_consignmentDetails(self): return self.consignmentDetails
    def set_consignmentDetails(self, consignmentDetails): self.consignmentDetails = consignmentDetails
    def get_pieceLine(self): return self.pieceLine
    def set_pieceLine(self, pieceLine): self.pieceLine = pieceLine
    def add_pieceLine(self, value): self.pieceLine.append(value)
    def insert_pieceLine_at(self, index, value): self.pieceLine.insert(index, value)
    def replace_pieceLine_at(self, index, value): self.pieceLine[index] = value
    def hasContent_(self):
        if (
            self.rateId is not None or
            self.sender is not None or
            self.delivery is not None or
            self.collectionDateTime is not None or
            self.product is not None or
            self.account is not None or
            self.insurance is not None or
            self.termsOfPayment is not None or
            self.currency is not None or
            self.priceBreakDown or
            self.consignmentDetails is not None or
            self.pieceLine
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='priceCheck', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('priceCheck')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='priceCheck')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='priceCheck', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='priceCheck'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='priceCheck', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.rateId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rateId>%s</rateId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.rateId), input_name='rateId')), eol_))
        if self.sender is not None:
            self.sender.export(outfile, level, namespace_, name_='sender', pretty_print=pretty_print)
        if self.delivery is not None:
            self.delivery.export(outfile, level, namespace_, name_='delivery', pretty_print=pretty_print)
        if self.collectionDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<collectionDateTime>%s</collectionDateTime>%s' % (self.gds_format_datetime(self.collectionDateTime, input_name='collectionDateTime'), eol_))
        if self.product is not None:
            self.product.export(outfile, level, namespace_, name_='product', pretty_print=pretty_print)
        if self.account is not None:
            self.account.export(outfile, level, namespace_, name_='account', pretty_print=pretty_print)
        if self.insurance is not None:
            self.insurance.export(outfile, level, namespace_, name_='insurance', pretty_print=pretty_print)
        if self.termsOfPayment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<termsOfPayment>%s</termsOfPayment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.termsOfPayment), input_name='termsOfPayment')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        if self.priceBreakDown:
            showIndent(outfile, level, pretty_print)
            outfile.write('<priceBreakDown>%s</priceBreakDown>%s' % (self.gds_format_boolean(self.priceBreakDown, input_name='priceBreakDown'), eol_))
        if self.consignmentDetails is not None:
            self.consignmentDetails.export(outfile, level, namespace_, name_='consignmentDetails', pretty_print=pretty_print)
        for pieceLine_ in self.pieceLine:
            pieceLine_.export(outfile, level, namespace_, name_='pieceLine', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'rateId':
            rateId_ = child_.text
            rateId_ = self.gds_validate_string(rateId_, node, 'rateId')
            self.rateId = rateId_
        elif nodeName_ == 'sender':
            obj_ = address.factory()
            obj_.build(child_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'delivery':
            obj_ = address.factory()
            obj_.build(child_)
            self.delivery = obj_
            obj_.original_tagname_ = 'delivery'
        elif nodeName_ == 'collectionDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.collectionDateTime = dval_
        elif nodeName_ == 'product':
            obj_ = product.factory()
            obj_.build(child_)
            self.product = obj_
            obj_.original_tagname_ = 'product'
        elif nodeName_ == 'account':
            obj_ = account.factory()
            obj_.build(child_)
            self.account = obj_
            obj_.original_tagname_ = 'account'
        elif nodeName_ == 'insurance':
            obj_ = insurance.factory()
            obj_.build(child_)
            self.insurance = obj_
            obj_.original_tagname_ = 'insurance'
        elif nodeName_ == 'termsOfPayment':
            termsOfPayment_ = child_.text
            termsOfPayment_ = self.gds_validate_string(termsOfPayment_, node, 'termsOfPayment')
            self.termsOfPayment = termsOfPayment_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'priceBreakDown':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'priceBreakDown')
            self.priceBreakDown = ival_
        elif nodeName_ == 'consignmentDetails':
            obj_ = consignmentDetails.factory()
            obj_.build(child_)
            self.consignmentDetails = obj_
            obj_.original_tagname_ = 'consignmentDetails'
        elif nodeName_ == 'pieceLine':
            obj_ = pieceLine.factory()
            obj_.build(child_)
            self.pieceLine.append(obj_)
            obj_.original_tagname_ = 'pieceLine'
# end class priceCheck


class priceRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, appId=None, appVersion=None, priceCheck=None):
        self.original_tagname_ = None
        self.appId = appId
        self.appVersion = appVersion
        if priceCheck is None:
            self.priceCheck = []
        else:
            self.priceCheck = priceCheck
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, priceRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if priceRequest.subclass:
            return priceRequest.subclass(*args_, **kwargs_)
        else:
            return priceRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_appId(self): return self.appId
    def set_appId(self, appId): self.appId = appId
    def get_appVersion(self): return self.appVersion
    def set_appVersion(self, appVersion): self.appVersion = appVersion
    def get_priceCheck(self): return self.priceCheck
    def set_priceCheck(self, priceCheck): self.priceCheck = priceCheck
    def add_priceCheck(self, value): self.priceCheck.append(value)
    def insert_priceCheck_at(self, index, value): self.priceCheck.insert(index, value)
    def replace_priceCheck_at(self, index, value): self.priceCheck[index] = value
    def hasContent_(self):
        if (
            self.appId is not None or
            self.appVersion is not None or
            self.priceCheck
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='priceRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('priceRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='priceRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='priceRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='priceRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='priceRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.appId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<appId>%s</appId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.appId), input_name='appId')), eol_))
        if self.appVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<appVersion>%s</appVersion>%s' % (self.gds_format_float(self.appVersion, input_name='appVersion'), eol_))
        for priceCheck_ in self.priceCheck:
            priceCheck_.export(outfile, level, namespace_, name_='priceCheck', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'appId':
            appId_ = child_.text
            appId_ = self.gds_validate_string(appId_, node, 'appId')
            self.appId = appId_
        elif nodeName_ == 'appVersion':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'appVersion')
            self.appVersion = fval_
        elif nodeName_ == 'priceCheck':
            obj_ = priceCheck.factory()
            obj_.build(child_)
            self.priceCheck.append(obj_)
            obj_.original_tagname_ = 'priceCheck'
# end class priceRequest


class account(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, accountNumber=None, accountCountry=None):
        self.original_tagname_ = None
        self.accountNumber = accountNumber
        self.accountCountry = accountCountry
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, account)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if account.subclass:
            return account.subclass(*args_, **kwargs_)
        else:
            return account(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_accountNumber(self): return self.accountNumber
    def set_accountNumber(self, accountNumber): self.accountNumber = accountNumber
    def get_accountCountry(self): return self.accountCountry
    def set_accountCountry(self, accountCountry): self.accountCountry = accountCountry
    def hasContent_(self):
        if (
            self.accountNumber is not None or
            self.accountCountry is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='account', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('account')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='account')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='account', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='account'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='account', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.accountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<accountNumber>%s</accountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.accountNumber), input_name='accountNumber')), eol_))
        if self.accountCountry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<accountCountry>%s</accountCountry>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.accountCountry), input_name='accountCountry')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'accountNumber':
            accountNumber_ = child_.text
            accountNumber_ = self.gds_validate_string(accountNumber_, node, 'accountNumber')
            self.accountNumber = accountNumber_
        elif nodeName_ == 'accountCountry':
            accountCountry_ = child_.text
            accountCountry_ = self.gds_validate_string(accountCountry_, node, 'accountCountry')
            self.accountCountry = accountCountry_
# end class account


class address(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, country=None, town=None, postcode=None):
        self.original_tagname_ = None
        self.country = country
        self.town = town
        self.postcode = postcode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if address.subclass:
            return address.subclass(*args_, **kwargs_)
        else:
            return address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_country(self): return self.country
    def set_country(self, country): self.country = country
    def get_town(self): return self.town
    def set_town(self, town): self.town = town
    def get_postcode(self): return self.postcode
    def set_postcode(self, postcode): self.postcode = postcode
    def hasContent_(self):
        if (
            self.country is not None or
            self.town is not None or
            self.postcode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='address', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='address'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country>%s</country>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country), input_name='country')), eol_))
        if self.town is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<town>%s</town>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.town), input_name='town')), eol_))
        if self.postcode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postcode>%s</postcode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postcode), input_name='postcode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'country':
            country_ = child_.text
            country_ = self.gds_validate_string(country_, node, 'country')
            self.country = country_
        elif nodeName_ == 'town':
            town_ = child_.text
            town_ = self.gds_validate_string(town_, node, 'town')
            self.town = town_
        elif nodeName_ == 'postcode':
            postcode_ = child_.text
            postcode_ = self.gds_validate_string(postcode_, node, 'postcode')
            self.postcode = postcode_
# end class address


class consignmentDetails(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, totalWeight=None, totalVolume=None, totalNumberOfPieces=None):
        self.original_tagname_ = None
        self.totalWeight = totalWeight
        self.totalVolume = totalVolume
        self.totalNumberOfPieces = totalNumberOfPieces
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, consignmentDetails)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if consignmentDetails.subclass:
            return consignmentDetails.subclass(*args_, **kwargs_)
        else:
            return consignmentDetails(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_totalWeight(self): return self.totalWeight
    def set_totalWeight(self, totalWeight): self.totalWeight = totalWeight
    def get_totalVolume(self): return self.totalVolume
    def set_totalVolume(self, totalVolume): self.totalVolume = totalVolume
    def get_totalNumberOfPieces(self): return self.totalNumberOfPieces
    def set_totalNumberOfPieces(self, totalNumberOfPieces): self.totalNumberOfPieces = totalNumberOfPieces
    def hasContent_(self):
        if (
            self.totalWeight is not None or
            self.totalVolume is not None or
            self.totalNumberOfPieces is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='consignmentDetails', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('consignmentDetails')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='consignmentDetails')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='consignmentDetails', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='consignmentDetails'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='consignmentDetails', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.totalWeight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<totalWeight>%s</totalWeight>%s' % (self.gds_format_float(self.totalWeight, input_name='totalWeight'), eol_))
        if self.totalVolume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<totalVolume>%s</totalVolume>%s' % (self.gds_format_float(self.totalVolume, input_name='totalVolume'), eol_))
        if self.totalNumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<totalNumberOfPieces>%s</totalNumberOfPieces>%s' % (self.gds_format_integer(self.totalNumberOfPieces, input_name='totalNumberOfPieces'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'totalWeight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'totalWeight')
            self.totalWeight = fval_
        elif nodeName_ == 'totalVolume':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'totalVolume')
            self.totalVolume = fval_
        elif nodeName_ == 'totalNumberOfPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'totalNumberOfPieces')
            self.totalNumberOfPieces = ival_
# end class consignmentDetails


class insurance(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, insuranceValue=None, goodsValue=None):
        self.original_tagname_ = None
        self.insuranceValue = insuranceValue
        self.goodsValue = goodsValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, insurance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if insurance.subclass:
            return insurance.subclass(*args_, **kwargs_)
        else:
            return insurance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_insuranceValue(self): return self.insuranceValue
    def set_insuranceValue(self, insuranceValue): self.insuranceValue = insuranceValue
    def get_goodsValue(self): return self.goodsValue
    def set_goodsValue(self, goodsValue): self.goodsValue = goodsValue
    def hasContent_(self):
        if (
            self.insuranceValue is not None or
            self.goodsValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='insurance', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('insurance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='insurance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='insurance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='insurance'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='insurance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.insuranceValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<insuranceValue>%s</insuranceValue>%s' % (self.gds_format_float(self.insuranceValue, input_name='insuranceValue'), eol_))
        if self.goodsValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<goodsValue>%s</goodsValue>%s' % (self.gds_format_float(self.goodsValue, input_name='goodsValue'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'insuranceValue':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'insuranceValue')
            self.insuranceValue = fval_
        elif nodeName_ == 'goodsValue':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'goodsValue')
            self.goodsValue = fval_
# end class insurance


class pieceLine(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numberOfPieces=None, pieceMeasurements=None, pallet=False):
        self.original_tagname_ = None
        self.numberOfPieces = numberOfPieces
        self.pieceMeasurements = pieceMeasurements
        self.pallet = pallet
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pieceLine)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pieceLine.subclass:
            return pieceLine.subclass(*args_, **kwargs_)
        else:
            return pieceLine(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numberOfPieces(self): return self.numberOfPieces
    def set_numberOfPieces(self, numberOfPieces): self.numberOfPieces = numberOfPieces
    def get_pieceMeasurements(self): return self.pieceMeasurements
    def set_pieceMeasurements(self, pieceMeasurements): self.pieceMeasurements = pieceMeasurements
    def get_pallet(self): return self.pallet
    def set_pallet(self, pallet): self.pallet = pallet
    def hasContent_(self):
        if (
            self.numberOfPieces is not None or
            self.pieceMeasurements is not None or
            self.pallet
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pieceLine', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pieceLine')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pieceLine')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pieceLine', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pieceLine'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pieceLine', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<numberOfPieces>%s</numberOfPieces>%s' % (self.gds_format_integer(self.numberOfPieces, input_name='numberOfPieces'), eol_))
        if self.pieceMeasurements is not None:
            self.pieceMeasurements.export(outfile, level, namespace_, name_='pieceMeasurements', pretty_print=pretty_print)
        if self.pallet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pallet>%s</pallet>%s' % (self.gds_format_boolean(self.pallet, input_name='pallet'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numberOfPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfPieces')
            self.numberOfPieces = ival_
        elif nodeName_ == 'pieceMeasurements':
            obj_ = pieceMeasurements.factory()
            obj_.build(child_)
            self.pieceMeasurements = obj_
            obj_.original_tagname_ = 'pieceMeasurements'
        elif nodeName_ == 'pallet':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'pallet')
            self.pallet = ival_
# end class pieceLine


class pieceMeasurements(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, length=None, width=None, height=None, weight=None):
        self.original_tagname_ = None
        self.length = length
        self.width = width
        self.height = height
        self.weight = weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pieceMeasurements)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pieceMeasurements.subclass:
            return pieceMeasurements.subclass(*args_, **kwargs_)
        else:
            return pieceMeasurements(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_weight(self): return self.weight
    def set_weight(self, weight): self.weight = weight
    def hasContent_(self):
        if (
            self.length is not None or
            self.width is not None or
            self.height is not None or
            self.weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pieceMeasurements', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pieceMeasurements')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pieceMeasurements')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pieceMeasurements', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pieceMeasurements'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pieceMeasurements', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<length>%s</length>%s' % (self.gds_format_float(self.length, input_name='length'), eol_))
        if self.width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<width>%s</width>%s' % (self.gds_format_float(self.width, input_name='width'), eol_))
        if self.height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<height>%s</height>%s' % (self.gds_format_float(self.height, input_name='height'), eol_))
        if self.weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<weight>%s</weight>%s' % (self.gds_format_float(self.weight, input_name='weight'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'length':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'length')
            self.length = fval_
        elif nodeName_ == 'width':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'width')
            self.width = fval_
        elif nodeName_ == 'height':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'height')
            self.height = fval_
        elif nodeName_ == 'weight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
# end class pieceMeasurements


class option(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, optionCode=None, optionDesc=None):
        self.original_tagname_ = None
        self.optionCode = optionCode
        self.optionDesc = optionDesc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, option)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if option.subclass:
            return option.subclass(*args_, **kwargs_)
        else:
            return option(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_optionCode(self): return self.optionCode
    def set_optionCode(self, optionCode): self.optionCode = optionCode
    def get_optionDesc(self): return self.optionDesc
    def set_optionDesc(self, optionDesc): self.optionDesc = optionDesc
    def hasContent_(self):
        if (
            self.optionCode is not None or
            self.optionDesc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='option', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('option')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='option')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='option', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='option'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='option', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.optionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<optionCode>%s</optionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.optionCode), input_name='optionCode')), eol_))
        if self.optionDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<optionDesc>%s</optionDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.optionDesc), input_name='optionDesc')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'optionCode':
            optionCode_ = child_.text
            optionCode_ = self.gds_validate_string(optionCode_, node, 'optionCode')
            self.optionCode = optionCode_
        elif nodeName_ == 'optionDesc':
            optionDesc_ = child_.text
            optionDesc_ = self.gds_validate_string(optionDesc_, node, 'optionDesc')
            self.optionDesc = optionDesc_
# end class option


class options(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option=None):
        self.original_tagname_ = None
        if option is None:
            self.option = []
        else:
            self.option = option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, options)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if options.subclass:
            return options.subclass(*args_, **kwargs_)
        else:
            return options(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def hasContent_(self):
        if (
            self.option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='options', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('options')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='options')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='options', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='options'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='options', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option':
            obj_ = option.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
# end class options


class product(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, division=None, productDesc=None, type_=None, options=None):
        self.original_tagname_ = None
        self.id = id
        self.division = division
        self.productDesc = productDesc
        self.type_ = type_
        self.options = options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, product)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if product.subclass:
            return product.subclass(*args_, **kwargs_)
        else:
            return product(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_division(self): return self.division
    def set_division(self, division): self.division = division
    def get_productDesc(self): return self.productDesc
    def set_productDesc(self, productDesc): self.productDesc = productDesc
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_options(self): return self.options
    def set_options(self, options): self.options = options
    def hasContent_(self):
        if (
            self.id is not None or
            self.division is not None or
            self.productDesc is not None or
            self.type_ is not None or
            self.options is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='product', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('product')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='product')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='product', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='product'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='product', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<id>%s</id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), eol_))
        if self.division is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<division>%s</division>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.division), input_name='division')), eol_))
        if self.productDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<productDesc>%s</productDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.productDesc), input_name='productDesc')), eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<type>%s</type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), eol_))
        if self.options is not None:
            self.options.export(outfile, level, namespace_, name_='options', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
        elif nodeName_ == 'division':
            division_ = child_.text
            division_ = self.gds_validate_string(division_, node, 'division')
            self.division = division_
        elif nodeName_ == 'productDesc':
            productDesc_ = child_.text
            productDesc_ = self.gds_validate_string(productDesc_, node, 'productDesc')
            self.productDesc = productDesc_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'options':
            obj_ = options.factory()
            obj_.build(child_)
            self.options = obj_
            obj_.original_tagname_ = 'options'
# end class product


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'priceCheck'
        rootClass = priceCheck
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'priceCheck'
        rootClass = priceCheck
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'priceCheck'
        rootClass = priceCheck
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'priceCheck'
        rootClass = priceCheck
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from pricerequestin import *\n\n')
        sys.stdout.write('import pricerequestin as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "account",
    "address",
    "consignmentDetails",
    "insurance",
    "option",
    "options",
    "pieceLine",
    "pieceMeasurements",
    "priceCheck",
    "priceRequest",
    "product"
]
