#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:39 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/priceresponseout.py')
#
# Command line arguments:
#   ././priceresponseout.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/priceresponseout.py" ././priceresponseout.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class document(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestId=None, errors=None, priceResponse=None):
        self.original_tagname_ = None
        self.requestId = requestId
        self.errors = errors
        if priceResponse is None:
            self.priceResponse = []
        else:
            self.priceResponse = priceResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, document)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if document.subclass:
            return document.subclass(*args_, **kwargs_)
        else:
            return document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_requestId(self): return self.requestId
    def set_requestId(self, requestId): self.requestId = requestId
    def get_errors(self): return self.errors
    def set_errors(self, errors): self.errors = errors
    def get_priceResponse(self): return self.priceResponse
    def set_priceResponse(self, priceResponse): self.priceResponse = priceResponse
    def add_priceResponse(self, value): self.priceResponse.append(value)
    def insert_priceResponse_at(self, index, value): self.priceResponse.insert(index, value)
    def replace_priceResponse_at(self, index, value): self.priceResponse[index] = value
    def hasContent_(self):
        if (
            self.requestId is not None or
            self.errors is not None or
            self.priceResponse
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='document', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('document')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='document')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='document', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='document'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='document', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.requestId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<requestId>%s</requestId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.requestId), input_name='requestId')), eol_))
        if self.errors is not None:
            self.errors.export(outfile, level, namespace_, name_='errors', pretty_print=pretty_print)
        for priceResponse_ in self.priceResponse:
            priceResponse_.export(outfile, level, namespace_, name_='priceResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'requestId':
            requestId_ = child_.text
            requestId_ = self.gds_validate_string(requestId_, node, 'requestId')
            self.requestId = requestId_
        elif nodeName_ == 'errors':
            obj_ = errors.factory()
            obj_.build(child_)
            self.errors = obj_
            obj_.original_tagname_ = 'errors'
        elif nodeName_ == 'priceResponse':
            obj_ = priceResponse.factory()
            obj_.build(child_)
            self.priceResponse.append(obj_)
            obj_.original_tagname_ = 'priceResponse'
# end class document


class brokenRule(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, rateId=None, messageType=None, code=None, description=None):
        self.original_tagname_ = None
        self.rateId = rateId
        self.messageType = messageType
        self.code = code
        self.description = description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, brokenRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if brokenRule.subclass:
            return brokenRule.subclass(*args_, **kwargs_)
        else:
            return brokenRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_rateId(self): return self.rateId
    def set_rateId(self, rateId): self.rateId = rateId
    def get_messageType(self): return self.messageType
    def set_messageType(self, messageType): self.messageType = messageType
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def hasContent_(self):
        if (
            self.rateId is not None or
            self.messageType is not None or
            self.code is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='brokenRule', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('brokenRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='brokenRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='brokenRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='brokenRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='brokenRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.rateId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rateId>%s</rateId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.rateId), input_name='rateId')), eol_))
        if self.messageType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<messageType>%s</messageType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.messageType), input_name='messageType')), eol_))
        if self.code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<code>%s</code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.code), input_name='code')), eol_))
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'rateId':
            rateId_ = child_.text
            rateId_ = self.gds_validate_string(rateId_, node, 'rateId')
            self.rateId = rateId_
        elif nodeName_ == 'messageType':
            messageType_ = child_.text
            messageType_ = self.gds_validate_string(messageType_, node, 'messageType')
            self.messageType = messageType_
        elif nodeName_ == 'code':
            code_ = child_.text
            code_ = self.gds_validate_string(code_, node, 'code')
            self.code = code_
        elif nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
# end class brokenRule


class chargeElement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, chargeItem=None, chargeCategory=None, chargeCode=None, description=None, chargeValue=None, vatIndicator=None):
        self.original_tagname_ = None
        self.chargeItem = chargeItem
        self.chargeCategory = chargeCategory
        self.chargeCode = chargeCode
        self.description = description
        self.chargeValue = chargeValue
        self.vatIndicator = vatIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, chargeElement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if chargeElement.subclass:
            return chargeElement.subclass(*args_, **kwargs_)
        else:
            return chargeElement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_chargeItem(self): return self.chargeItem
    def set_chargeItem(self, chargeItem): self.chargeItem = chargeItem
    def get_chargeCategory(self): return self.chargeCategory
    def set_chargeCategory(self, chargeCategory): self.chargeCategory = chargeCategory
    def get_chargeCode(self): return self.chargeCode
    def set_chargeCode(self, chargeCode): self.chargeCode = chargeCode
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_chargeValue(self): return self.chargeValue
    def set_chargeValue(self, chargeValue): self.chargeValue = chargeValue
    def get_vatIndicator(self): return self.vatIndicator
    def set_vatIndicator(self, vatIndicator): self.vatIndicator = vatIndicator
    def hasContent_(self):
        if (
            self.chargeItem is not None or
            self.chargeCategory is not None or
            self.chargeCode is not None or
            self.description is not None or
            self.chargeValue is not None or
            self.vatIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='chargeElement', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('chargeElement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='chargeElement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='chargeElement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='chargeElement'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='chargeElement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.chargeItem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<chargeItem>%s</chargeItem>%s' % (self.gds_format_integer(self.chargeItem, input_name='chargeItem'), eol_))
        if self.chargeCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<chargeCategory>%s</chargeCategory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.chargeCategory), input_name='chargeCategory')), eol_))
        if self.chargeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<chargeCode>%s</chargeCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.chargeCode), input_name='chargeCode')), eol_))
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        if self.chargeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<chargeValue>%s</chargeValue>%s' % (self.gds_format_float(self.chargeValue, input_name='chargeValue'), eol_))
        if self.vatIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<vatIndicator>%s</vatIndicator>%s' % (self.gds_format_boolean(self.vatIndicator, input_name='vatIndicator'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chargeItem':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'chargeItem')
            self.chargeItem = ival_
        elif nodeName_ == 'chargeCategory':
            chargeCategory_ = child_.text
            chargeCategory_ = self.gds_validate_string(chargeCategory_, node, 'chargeCategory')
            self.chargeCategory = chargeCategory_
        elif nodeName_ == 'chargeCode':
            chargeCode_ = child_.text
            chargeCode_ = self.gds_validate_string(chargeCode_, node, 'chargeCode')
            self.chargeCode = chargeCode_
        elif nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'chargeValue':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'chargeValue')
            self.chargeValue = fval_
        elif nodeName_ == 'vatIndicator':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'vatIndicator')
            self.vatIndicator = ival_
# end class chargeElement


class chargeElements(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, chargeElement=None):
        self.original_tagname_ = None
        if chargeElement is None:
            self.chargeElement = []
        else:
            self.chargeElement = chargeElement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, chargeElements)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if chargeElements.subclass:
            return chargeElements.subclass(*args_, **kwargs_)
        else:
            return chargeElements(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_chargeElement(self): return self.chargeElement
    def set_chargeElement(self, chargeElement): self.chargeElement = chargeElement
    def add_chargeElement(self, value): self.chargeElement.append(value)
    def insert_chargeElement_at(self, index, value): self.chargeElement.insert(index, value)
    def replace_chargeElement_at(self, index, value): self.chargeElement[index] = value
    def hasContent_(self):
        if (
            self.chargeElement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='chargeElements', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('chargeElements')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='chargeElements')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='chargeElements', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='chargeElements'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='chargeElements', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for chargeElement_ in self.chargeElement:
            chargeElement_.export(outfile, level, namespace_, name_='chargeElement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chargeElement':
            obj_ = chargeElement.factory()
            obj_.build(child_)
            self.chargeElement.append(obj_)
            obj_.original_tagname_ = 'chargeElement'
# end class chargeElements


class errors(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, runtimeError=None, parseError=None, brokenRule=None):
        self.original_tagname_ = None
        if runtimeError is None:
            self.runtimeError = []
        else:
            self.runtimeError = runtimeError
        if parseError is None:
            self.parseError = []
        else:
            self.parseError = parseError
        if brokenRule is None:
            self.brokenRule = []
        else:
            self.brokenRule = brokenRule
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, errors)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if errors.subclass:
            return errors.subclass(*args_, **kwargs_)
        else:
            return errors(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_runtimeError(self): return self.runtimeError
    def set_runtimeError(self, runtimeError): self.runtimeError = runtimeError
    def add_runtimeError(self, value): self.runtimeError.append(value)
    def insert_runtimeError_at(self, index, value): self.runtimeError.insert(index, value)
    def replace_runtimeError_at(self, index, value): self.runtimeError[index] = value
    def get_parseError(self): return self.parseError
    def set_parseError(self, parseError): self.parseError = parseError
    def add_parseError(self, value): self.parseError.append(value)
    def insert_parseError_at(self, index, value): self.parseError.insert(index, value)
    def replace_parseError_at(self, index, value): self.parseError[index] = value
    def get_brokenRule(self): return self.brokenRule
    def set_brokenRule(self, brokenRule): self.brokenRule = brokenRule
    def add_brokenRule(self, value): self.brokenRule.append(value)
    def insert_brokenRule_at(self, index, value): self.brokenRule.insert(index, value)
    def replace_brokenRule_at(self, index, value): self.brokenRule[index] = value
    def hasContent_(self):
        if (
            self.runtimeError or
            self.parseError or
            self.brokenRule
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='errors', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('errors')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='errors')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='errors', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='errors'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='errors', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for runtimeError_ in self.runtimeError:
            runtimeError_.export(outfile, level, namespace_, name_='runtimeError', pretty_print=pretty_print)
        for parseError_ in self.parseError:
            parseError_.export(outfile, level, namespace_, name_='parseError', pretty_print=pretty_print)
        for brokenRule_ in self.brokenRule:
            brokenRule_.export(outfile, level, namespace_, name_='brokenRule', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'runtimeError':
            obj_ = runtimeError.factory()
            obj_.build(child_)
            self.runtimeError.append(obj_)
            obj_.original_tagname_ = 'runtimeError'
        elif nodeName_ == 'parseError':
            obj_ = parseError.factory()
            obj_.build(child_)
            self.parseError.append(obj_)
            obj_.original_tagname_ = 'parseError'
        elif nodeName_ == 'brokenRule':
            obj_ = brokenRule.factory()
            obj_.build(child_)
            self.brokenRule.append(obj_)
            obj_.original_tagname_ = 'brokenRule'
# end class errors


class parseError(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, errorReason=None, errorLine=None, errorLinepos=None, errorSrcText=None):
        self.original_tagname_ = None
        self.errorReason = errorReason
        self.errorLine = errorLine
        self.errorLinepos = errorLinepos
        self.errorSrcText = errorSrcText
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, parseError)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if parseError.subclass:
            return parseError.subclass(*args_, **kwargs_)
        else:
            return parseError(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_errorReason(self): return self.errorReason
    def set_errorReason(self, errorReason): self.errorReason = errorReason
    def get_errorLine(self): return self.errorLine
    def set_errorLine(self, errorLine): self.errorLine = errorLine
    def get_errorLinepos(self): return self.errorLinepos
    def set_errorLinepos(self, errorLinepos): self.errorLinepos = errorLinepos
    def get_errorSrcText(self): return self.errorSrcText
    def set_errorSrcText(self, errorSrcText): self.errorSrcText = errorSrcText
    def hasContent_(self):
        if (
            self.errorReason is not None or
            self.errorLine is not None or
            self.errorLinepos is not None or
            self.errorSrcText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='parseError', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('parseError')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='parseError')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='parseError', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='parseError'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='parseError', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorReason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorReason>%s</errorReason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorReason), input_name='errorReason')), eol_))
        if self.errorLine is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorLine>%s</errorLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorLine), input_name='errorLine')), eol_))
        if self.errorLinepos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorLinepos>%s</errorLinepos>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorLinepos), input_name='errorLinepos')), eol_))
        if self.errorSrcText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorSrcText>%s</errorSrcText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorSrcText), input_name='errorSrcText')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'errorReason':
            errorReason_ = child_.text
            errorReason_ = self.gds_validate_string(errorReason_, node, 'errorReason')
            self.errorReason = errorReason_
        elif nodeName_ == 'errorLine':
            errorLine_ = child_.text
            errorLine_ = self.gds_validate_string(errorLine_, node, 'errorLine')
            self.errorLine = errorLine_
        elif nodeName_ == 'errorLinepos':
            errorLinepos_ = child_.text
            errorLinepos_ = self.gds_validate_string(errorLinepos_, node, 'errorLinepos')
            self.errorLinepos = errorLinepos_
        elif nodeName_ == 'errorSrcText':
            errorSrcText_ = child_.text
            errorSrcText_ = self.gds_validate_string(errorSrcText_, node, 'errorSrcText')
            self.errorSrcText = errorSrcText_
# end class parseError


class priceResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ratedServices=None):
        self.original_tagname_ = None
        self.ratedServices = ratedServices
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, priceResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if priceResponse.subclass:
            return priceResponse.subclass(*args_, **kwargs_)
        else:
            return priceResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ratedServices(self): return self.ratedServices
    def set_ratedServices(self, ratedServices): self.ratedServices = ratedServices
    def hasContent_(self):
        if (
            self.ratedServices is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='priceResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('priceResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='priceResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='priceResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='priceResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='priceResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ratedServices is not None:
            self.ratedServices.export(outfile, level, namespace_, name_='ratedServices', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ratedServices':
            obj_ = ratedServices.factory()
            obj_.build(child_)
            self.ratedServices = obj_
            obj_.original_tagname_ = 'ratedServices'
# end class priceResponse


class ratedService(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, product=None, totalPrice=None, totalPriceExclVat=None, vatAmount=None, chargeElements=None):
        self.original_tagname_ = None
        self.product = product
        self.totalPrice = totalPrice
        self.totalPriceExclVat = totalPriceExclVat
        self.vatAmount = vatAmount
        self.chargeElements = chargeElements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ratedService)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ratedService.subclass:
            return ratedService.subclass(*args_, **kwargs_)
        else:
            return ratedService(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_product(self): return self.product
    def set_product(self, product): self.product = product
    def get_totalPrice(self): return self.totalPrice
    def set_totalPrice(self, totalPrice): self.totalPrice = totalPrice
    def get_totalPriceExclVat(self): return self.totalPriceExclVat
    def set_totalPriceExclVat(self, totalPriceExclVat): self.totalPriceExclVat = totalPriceExclVat
    def get_vatAmount(self): return self.vatAmount
    def set_vatAmount(self, vatAmount): self.vatAmount = vatAmount
    def get_chargeElements(self): return self.chargeElements
    def set_chargeElements(self, chargeElements): self.chargeElements = chargeElements
    def hasContent_(self):
        if (
            self.product is not None or
            self.totalPrice is not None or
            self.totalPriceExclVat is not None or
            self.vatAmount is not None or
            self.chargeElements is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ratedService', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ratedService')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ratedService')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ratedService', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ratedService'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ratedService', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.product is not None:
            self.product.export(outfile, level, namespace_, name_='product', pretty_print=pretty_print)
        if self.totalPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<totalPrice>%s</totalPrice>%s' % (self.gds_format_float(self.totalPrice, input_name='totalPrice'), eol_))
        if self.totalPriceExclVat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<totalPriceExclVat>%s</totalPriceExclVat>%s' % (self.gds_format_float(self.totalPriceExclVat, input_name='totalPriceExclVat'), eol_))
        if self.vatAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<vatAmount>%s</vatAmount>%s' % (self.gds_format_float(self.vatAmount, input_name='vatAmount'), eol_))
        if self.chargeElements is not None:
            self.chargeElements.export(outfile, level, namespace_, name_='chargeElements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'product':
            obj_ = product.factory()
            obj_.build(child_)
            self.product = obj_
            obj_.original_tagname_ = 'product'
        elif nodeName_ == 'totalPrice':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'totalPrice')
            self.totalPrice = fval_
        elif nodeName_ == 'totalPriceExclVat':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'totalPriceExclVat')
            self.totalPriceExclVat = fval_
        elif nodeName_ == 'vatAmount':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vatAmount')
            self.vatAmount = fval_
        elif nodeName_ == 'chargeElements':
            obj_ = chargeElements.factory()
            obj_.build(child_)
            self.chargeElements = obj_
            obj_.original_tagname_ = 'chargeElements'
# end class ratedService


class ratedServices(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, rateId=None, currency=None, ratedService=None):
        self.original_tagname_ = None
        self.rateId = rateId
        self.currency = currency
        if ratedService is None:
            self.ratedService = []
        else:
            self.ratedService = ratedService
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ratedServices)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ratedServices.subclass:
            return ratedServices.subclass(*args_, **kwargs_)
        else:
            return ratedServices(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_rateId(self): return self.rateId
    def set_rateId(self, rateId): self.rateId = rateId
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_ratedService(self): return self.ratedService
    def set_ratedService(self, ratedService): self.ratedService = ratedService
    def add_ratedService(self, value): self.ratedService.append(value)
    def insert_ratedService_at(self, index, value): self.ratedService.insert(index, value)
    def replace_ratedService_at(self, index, value): self.ratedService[index] = value
    def hasContent_(self):
        if (
            self.rateId is not None or
            self.currency is not None or
            self.ratedService
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ratedServices', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ratedServices')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ratedServices')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ratedServices', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ratedServices'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ratedServices', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.rateId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<rateId>%s</rateId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.rateId), input_name='rateId')), eol_))
        if self.currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<currency>%s</currency>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), eol_))
        for ratedService_ in self.ratedService:
            ratedService_.export(outfile, level, namespace_, name_='ratedService', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'rateId':
            rateId_ = child_.text
            rateId_ = self.gds_validate_string(rateId_, node, 'rateId')
            self.rateId = rateId_
        elif nodeName_ == 'currency':
            currency_ = child_.text
            currency_ = self.gds_validate_string(currency_, node, 'currency')
            self.currency = currency_
        elif nodeName_ == 'ratedService':
            obj_ = ratedService.factory()
            obj_.build(child_)
            self.ratedService.append(obj_)
            obj_.original_tagname_ = 'ratedService'
# end class ratedServices


class runtimeError(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, errorReason=None, errorSrcText=None):
        self.original_tagname_ = None
        self.errorReason = errorReason
        self.errorSrcText = errorSrcText
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, runtimeError)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if runtimeError.subclass:
            return runtimeError.subclass(*args_, **kwargs_)
        else:
            return runtimeError(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_errorReason(self): return self.errorReason
    def set_errorReason(self, errorReason): self.errorReason = errorReason
    def get_errorSrcText(self): return self.errorSrcText
    def set_errorSrcText(self, errorSrcText): self.errorSrcText = errorSrcText
    def hasContent_(self):
        if (
            self.errorReason is not None or
            self.errorSrcText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='runtimeError', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('runtimeError')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='runtimeError')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='runtimeError', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='runtimeError'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='runtimeError', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorReason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorReason>%s</errorReason>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorReason), input_name='errorReason')), eol_))
        if self.errorSrcText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorSrcText>%s</errorSrcText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorSrcText), input_name='errorSrcText')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'errorReason':
            errorReason_ = child_.text
            errorReason_ = self.gds_validate_string(errorReason_, node, 'errorReason')
            self.errorReason = errorReason_
        elif nodeName_ == 'errorSrcText':
            errorSrcText_ = child_.text
            errorSrcText_ = self.gds_validate_string(errorSrcText_, node, 'errorSrcText')
            self.errorSrcText = errorSrcText_
# end class runtimeError


class option(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, optionCode=None, optionDesc=None):
        self.original_tagname_ = None
        self.optionCode = optionCode
        self.optionDesc = optionDesc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, option)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if option.subclass:
            return option.subclass(*args_, **kwargs_)
        else:
            return option(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_optionCode(self): return self.optionCode
    def set_optionCode(self, optionCode): self.optionCode = optionCode
    def get_optionDesc(self): return self.optionDesc
    def set_optionDesc(self, optionDesc): self.optionDesc = optionDesc
    def hasContent_(self):
        if (
            self.optionCode is not None or
            self.optionDesc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='option', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('option')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='option')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='option', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='option'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='option', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.optionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<optionCode>%s</optionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.optionCode), input_name='optionCode')), eol_))
        if self.optionDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<optionDesc>%s</optionDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.optionDesc), input_name='optionDesc')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'optionCode':
            optionCode_ = child_.text
            optionCode_ = self.gds_validate_string(optionCode_, node, 'optionCode')
            self.optionCode = optionCode_
        elif nodeName_ == 'optionDesc':
            optionDesc_ = child_.text
            optionDesc_ = self.gds_validate_string(optionDesc_, node, 'optionDesc')
            self.optionDesc = optionDesc_
# end class option


class options(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, option=None):
        self.original_tagname_ = None
        if option is None:
            self.option = []
        else:
            self.option = option
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, options)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if options.subclass:
            return options.subclass(*args_, **kwargs_)
        else:
            return options(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def hasContent_(self):
        if (
            self.option
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='options', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('options')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='options')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='options', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='options'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='options', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'option':
            obj_ = option.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
# end class options


class product(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, division=None, productDesc=None, type_=None, options=None):
        self.original_tagname_ = None
        self.id = id
        self.division = division
        self.productDesc = productDesc
        self.type_ = type_
        self.options = options
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, product)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if product.subclass:
            return product.subclass(*args_, **kwargs_)
        else:
            return product(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_division(self): return self.division
    def set_division(self, division): self.division = division
    def get_productDesc(self): return self.productDesc
    def set_productDesc(self, productDesc): self.productDesc = productDesc
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_options(self): return self.options
    def set_options(self, options): self.options = options
    def hasContent_(self):
        if (
            self.id is not None or
            self.division is not None or
            self.productDesc is not None or
            self.type_ is not None or
            self.options is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='product', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('product')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='product')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='product', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='product'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='product', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<id>%s</id>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), eol_))
        if self.division is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<division>%s</division>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.division), input_name='division')), eol_))
        if self.productDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<productDesc>%s</productDesc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.productDesc), input_name='productDesc')), eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<type>%s</type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), eol_))
        if self.options is not None:
            self.options.export(outfile, level, namespace_, name_='options', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
        elif nodeName_ == 'division':
            division_ = child_.text
            division_ = self.gds_validate_string(division_, node, 'division')
            self.division = division_
        elif nodeName_ == 'productDesc':
            productDesc_ = child_.text
            productDesc_ = self.gds_validate_string(productDesc_, node, 'productDesc')
            self.productDesc = productDesc_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'options':
            obj_ = options.factory()
            obj_.build(child_)
            self.options = obj_
            obj_.original_tagname_ = 'options'
# end class product


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'document'
        rootClass = document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'document'
        rootClass = document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'document'
        rootClass = document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'document'
        rootClass = document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from priceresponseout import *\n\n')
        sys.stdout.write('import priceresponseout as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "brokenRule",
    "chargeElement",
    "chargeElements",
    "document",
    "errors",
    "option",
    "options",
    "parseError",
    "priceResponse",
    "product",
    "ratedService",
    "ratedServices",
    "runtimeError"
]
