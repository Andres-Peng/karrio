#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:38 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/labelresponse.py')
#
# Command line arguments:
#   ././labelresponse.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/labelresponse.py" ././labelresponse.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class labelResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, consignment=None, brokenRules=None, fault=None):
        self.original_tagname_ = None
        if consignment is None:
            self.consignment = []
        else:
            self.consignment = consignment
        if brokenRules is None:
            self.brokenRules = []
        else:
            self.brokenRules = brokenRules
        if fault is None:
            self.fault = []
        else:
            self.fault = fault
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, labelResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if labelResponse.subclass:
            return labelResponse.subclass(*args_, **kwargs_)
        else:
            return labelResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_consignment(self): return self.consignment
    def set_consignment(self, consignment): self.consignment = consignment
    def add_consignment(self, value): self.consignment.append(value)
    def insert_consignment_at(self, index, value): self.consignment.insert(index, value)
    def replace_consignment_at(self, index, value): self.consignment[index] = value
    def get_brokenRules(self): return self.brokenRules
    def set_brokenRules(self, brokenRules): self.brokenRules = brokenRules
    def add_brokenRules(self, value): self.brokenRules.append(value)
    def insert_brokenRules_at(self, index, value): self.brokenRules.insert(index, value)
    def replace_brokenRules_at(self, index, value): self.brokenRules[index] = value
    def get_fault(self): return self.fault
    def set_fault(self, fault): self.fault = fault
    def add_fault(self, value): self.fault.append(value)
    def insert_fault_at(self, index, value): self.fault.insert(index, value)
    def replace_fault_at(self, index, value): self.fault[index] = value
    def hasContent_(self):
        if (
            self.consignment or
            self.brokenRules or
            self.fault
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='labelResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('labelResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='labelResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='labelResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='labelResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='labelResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for consignment_ in self.consignment:
            consignment_.export(outfile, level, namespace_, name_='consignment', pretty_print=pretty_print)
        for brokenRules_ in self.brokenRules:
            brokenRules_.export(outfile, level, namespace_, name_='brokenRules', pretty_print=pretty_print)
        for fault_ in self.fault:
            fault_.export(outfile, level, namespace_, name_='fault', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'consignment':
            obj_ = consignmentResponseType.factory()
            obj_.build(child_)
            self.consignment.append(obj_)
            obj_.original_tagname_ = 'consignment'
        elif nodeName_ == 'brokenRules':
            obj_ = brokenRules.factory()
            obj_.build(child_)
            self.brokenRules.append(obj_)
            obj_.original_tagname_ = 'brokenRules'
        elif nodeName_ == 'fault':
            obj_ = fault.factory()
            obj_.build(child_)
            self.fault.append(obj_)
            obj_.original_tagname_ = 'fault'
# end class labelResponse


class actionDepotType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, depotCode=None, actionDayOfWeek=None, actionDate=None):
        self.original_tagname_ = None
        self.depotCode = depotCode
        self.actionDayOfWeek = actionDayOfWeek
        if isinstance(actionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(actionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = actionDate
        self.actionDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, actionDepotType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if actionDepotType.subclass:
            return actionDepotType.subclass(*args_, **kwargs_)
        else:
            return actionDepotType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_depotCode(self): return self.depotCode
    def set_depotCode(self, depotCode): self.depotCode = depotCode
    def get_actionDayOfWeek(self): return self.actionDayOfWeek
    def set_actionDayOfWeek(self, actionDayOfWeek): self.actionDayOfWeek = actionDayOfWeek
    def get_actionDate(self): return self.actionDate
    def set_actionDate(self, actionDate): self.actionDate = actionDate
    def hasContent_(self):
        if (
            self.depotCode is not None or
            self.actionDayOfWeek is not None or
            self.actionDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='actionDepotType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('actionDepotType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='actionDepotType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='actionDepotType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='actionDepotType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='actionDepotType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.depotCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<depotCode>%s</depotCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.depotCode), input_name='depotCode')), eol_))
        if self.actionDayOfWeek is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<actionDayOfWeek>%s</actionDayOfWeek>%s' % (self.gds_format_integer(self.actionDayOfWeek, input_name='actionDayOfWeek'), eol_))
        if self.actionDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<actionDate>%s</actionDate>%s' % (self.gds_format_date(self.actionDate, input_name='actionDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'depotCode':
            depotCode_ = child_.text
            depotCode_ = self.gds_validate_string(depotCode_, node, 'depotCode')
            self.depotCode = depotCode_
        elif nodeName_ == 'actionDayOfWeek':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'actionDayOfWeek')
            self.actionDayOfWeek = ival_
        elif nodeName_ == 'actionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.actionDate = dval_
# end class actionDepotType


class barcodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, symbology=None, valueOf_=None):
        self.original_tagname_ = None
        self.symbology = _cast(None, symbology)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, barcodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if barcodeType.subclass:
            return barcodeType.subclass(*args_, **kwargs_)
        else:
            return barcodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_symbology(self): return self.symbology
    def set_symbology(self, symbology): self.symbology = symbology
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='barcodeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('barcodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='barcodeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='barcodeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='barcodeType'):
        if self.symbology is not None and 'symbology' not in already_processed:
            already_processed.add('symbology')
            outfile.write(' symbology=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.symbology), input_name='symbology')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='barcodeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('symbology', node)
        if value is not None and 'symbology' not in already_processed:
            already_processed.add('symbology')
            self.symbology = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class barcodeType


class consignmentResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None, pieceLabelData=None, consignmentLabelData=None):
        self.original_tagname_ = None
        self.key = _cast(None, key)
        if pieceLabelData is None:
            self.pieceLabelData = []
        else:
            self.pieceLabelData = pieceLabelData
        self.consignmentLabelData = consignmentLabelData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, consignmentResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if consignmentResponseType.subclass:
            return consignmentResponseType.subclass(*args_, **kwargs_)
        else:
            return consignmentResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_pieceLabelData(self): return self.pieceLabelData
    def set_pieceLabelData(self, pieceLabelData): self.pieceLabelData = pieceLabelData
    def add_pieceLabelData(self, value): self.pieceLabelData.append(value)
    def insert_pieceLabelData_at(self, index, value): self.pieceLabelData.insert(index, value)
    def replace_pieceLabelData_at(self, index, value): self.pieceLabelData[index] = value
    def get_consignmentLabelData(self): return self.consignmentLabelData
    def set_consignmentLabelData(self, consignmentLabelData): self.consignmentLabelData = consignmentLabelData
    def get_key(self): return self.key
    def set_key(self, key): self.key = key
    def hasContent_(self):
        if (
            self.pieceLabelData or
            self.consignmentLabelData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='consignmentResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('consignmentResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='consignmentResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='consignmentResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='consignmentResponseType'):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            outfile.write(' key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.key), input_name='key')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='consignmentResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for pieceLabelData_ in self.pieceLabelData:
            pieceLabelData_.export(outfile, level, namespace_, name_='pieceLabelData', pretty_print=pretty_print)
        if self.consignmentLabelData is not None:
            self.consignmentLabelData.export(outfile, level, namespace_, name_='consignmentLabelData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.add('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'pieceLabelData':
            obj_ = pieceRoutingLabelType.factory()
            obj_.build(child_)
            self.pieceLabelData.append(obj_)
            obj_.original_tagname_ = 'pieceLabelData'
        elif nodeName_ == 'consignmentLabelData':
            obj_ = consignmentRoutingLabelType.factory()
            obj_.build(child_)
            self.consignmentLabelData = obj_
            obj_.original_tagname_ = 'consignmentLabelData'
# end class consignmentResponseType


class consignmentRoutingLabelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, consignmentNumber=None, sender=None, delivery=None, contact=None, account=None, totalNumberOfPieces=None, product=None, option=None, collectionDate=None, marketDisplay=None, transportDisplay=None, freeCirculationDisplay=None, sortSplitText=None, xrayDisplay=None, originDepot=None, transitDepots=None, destinationDepot=None, microzone=None, clusterCode=None, legalComments=None, cashAmount=None, specialInstructions=None, bulkShipment=None):
        self.original_tagname_ = None
        self.consignmentNumber = consignmentNumber
        self.sender = sender
        self.delivery = delivery
        self.contact = contact
        self.account = account
        self.totalNumberOfPieces = totalNumberOfPieces
        self.product = product
        if option is None:
            self.option = []
        else:
            self.option = option
        if isinstance(collectionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(collectionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = collectionDate
        self.collectionDate = initvalue_
        self.marketDisplay = marketDisplay
        self.transportDisplay = transportDisplay
        self.freeCirculationDisplay = freeCirculationDisplay
        self.sortSplitText = sortSplitText
        self.xrayDisplay = xrayDisplay
        self.originDepot = originDepot
        self.transitDepots = transitDepots
        self.destinationDepot = destinationDepot
        self.microzone = microzone
        self.clusterCode = clusterCode
        self.legalComments = legalComments
        self.cashAmount = cashAmount
        self.specialInstructions = specialInstructions
        self.bulkShipment = bulkShipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, consignmentRoutingLabelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if consignmentRoutingLabelType.subclass:
            return consignmentRoutingLabelType.subclass(*args_, **kwargs_)
        else:
            return consignmentRoutingLabelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_consignmentNumber(self): return self.consignmentNumber
    def set_consignmentNumber(self, consignmentNumber): self.consignmentNumber = consignmentNumber
    def get_sender(self): return self.sender
    def set_sender(self, sender): self.sender = sender
    def get_delivery(self): return self.delivery
    def set_delivery(self, delivery): self.delivery = delivery
    def get_contact(self): return self.contact
    def set_contact(self, contact): self.contact = contact
    def get_account(self): return self.account
    def set_account(self, account): self.account = account
    def get_totalNumberOfPieces(self): return self.totalNumberOfPieces
    def set_totalNumberOfPieces(self, totalNumberOfPieces): self.totalNumberOfPieces = totalNumberOfPieces
    def get_product(self): return self.product
    def set_product(self, product): self.product = product
    def get_option(self): return self.option
    def set_option(self, option): self.option = option
    def add_option(self, value): self.option.append(value)
    def insert_option_at(self, index, value): self.option.insert(index, value)
    def replace_option_at(self, index, value): self.option[index] = value
    def get_collectionDate(self): return self.collectionDate
    def set_collectionDate(self, collectionDate): self.collectionDate = collectionDate
    def get_marketDisplay(self): return self.marketDisplay
    def set_marketDisplay(self, marketDisplay): self.marketDisplay = marketDisplay
    def get_transportDisplay(self): return self.transportDisplay
    def set_transportDisplay(self, transportDisplay): self.transportDisplay = transportDisplay
    def get_freeCirculationDisplay(self): return self.freeCirculationDisplay
    def set_freeCirculationDisplay(self, freeCirculationDisplay): self.freeCirculationDisplay = freeCirculationDisplay
    def get_sortSplitText(self): return self.sortSplitText
    def set_sortSplitText(self, sortSplitText): self.sortSplitText = sortSplitText
    def get_xrayDisplay(self): return self.xrayDisplay
    def set_xrayDisplay(self, xrayDisplay): self.xrayDisplay = xrayDisplay
    def get_originDepot(self): return self.originDepot
    def set_originDepot(self, originDepot): self.originDepot = originDepot
    def get_transitDepots(self): return self.transitDepots
    def set_transitDepots(self, transitDepots): self.transitDepots = transitDepots
    def get_destinationDepot(self): return self.destinationDepot
    def set_destinationDepot(self, destinationDepot): self.destinationDepot = destinationDepot
    def get_microzone(self): return self.microzone
    def set_microzone(self, microzone): self.microzone = microzone
    def get_clusterCode(self): return self.clusterCode
    def set_clusterCode(self, clusterCode): self.clusterCode = clusterCode
    def get_legalComments(self): return self.legalComments
    def set_legalComments(self, legalComments): self.legalComments = legalComments
    def get_cashAmount(self): return self.cashAmount
    def set_cashAmount(self, cashAmount): self.cashAmount = cashAmount
    def get_specialInstructions(self): return self.specialInstructions
    def set_specialInstructions(self, specialInstructions): self.specialInstructions = specialInstructions
    def get_bulkShipment(self): return self.bulkShipment
    def set_bulkShipment(self, bulkShipment): self.bulkShipment = bulkShipment
    def hasContent_(self):
        if (
            self.consignmentNumber is not None or
            self.sender is not None or
            self.delivery is not None or
            self.contact is not None or
            self.account is not None or
            self.totalNumberOfPieces is not None or
            self.product is not None or
            self.option or
            self.collectionDate is not None or
            self.marketDisplay is not None or
            self.transportDisplay is not None or
            self.freeCirculationDisplay is not None or
            self.sortSplitText is not None or
            self.xrayDisplay is not None or
            self.originDepot is not None or
            self.transitDepots is not None or
            self.destinationDepot is not None or
            self.microzone is not None or
            self.clusterCode is not None or
            self.legalComments is not None or
            self.cashAmount is not None or
            self.specialInstructions is not None or
            self.bulkShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='consignmentRoutingLabelType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('consignmentRoutingLabelType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='consignmentRoutingLabelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='consignmentRoutingLabelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='consignmentRoutingLabelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='consignmentRoutingLabelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.consignmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<consignmentNumber>%s</consignmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.consignmentNumber), input_name='consignmentNumber')), eol_))
        if self.sender is not None:
            self.sender.export(outfile, level, namespace_, name_='sender', pretty_print=pretty_print)
        if self.delivery is not None:
            self.delivery.export(outfile, level, namespace_, name_='delivery', pretty_print=pretty_print)
        if self.contact is not None:
            self.contact.export(outfile, level, namespace_, name_='contact', pretty_print=pretty_print)
        if self.account is not None:
            self.account.export(outfile, level, namespace_, name_='account', pretty_print=pretty_print)
        if self.totalNumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<totalNumberOfPieces>%s</totalNumberOfPieces>%s' % (self.gds_format_integer(self.totalNumberOfPieces, input_name='totalNumberOfPieces'), eol_))
        if self.product is not None:
            self.product.export(outfile, level, namespace_, name_='product', pretty_print=pretty_print)
        for option_ in self.option:
            option_.export(outfile, level, namespace_, name_='option', pretty_print=pretty_print)
        if self.collectionDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<collectionDate>%s</collectionDate>%s' % (self.gds_format_date(self.collectionDate, input_name='collectionDate'), eol_))
        if self.marketDisplay is not None:
            self.marketDisplay.export(outfile, level, namespace_, name_='marketDisplay', pretty_print=pretty_print)
        if self.transportDisplay is not None:
            self.transportDisplay.export(outfile, level, namespace_, name_='transportDisplay', pretty_print=pretty_print)
        if self.freeCirculationDisplay is not None:
            self.freeCirculationDisplay.export(outfile, level, namespace_, name_='freeCirculationDisplay', pretty_print=pretty_print)
        if self.sortSplitText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<sortSplitText>%s</sortSplitText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.sortSplitText), input_name='sortSplitText')), eol_))
        if self.xrayDisplay is not None:
            self.xrayDisplay.export(outfile, level, namespace_, name_='xrayDisplay', pretty_print=pretty_print)
        if self.originDepot is not None:
            self.originDepot.export(outfile, level, namespace_, name_='originDepot', pretty_print=pretty_print)
        if self.transitDepots is not None:
            self.transitDepots.export(outfile, level, namespace_, name_='transitDepots', pretty_print=pretty_print)
        if self.destinationDepot is not None:
            self.destinationDepot.export(outfile, level, namespace_, name_='destinationDepot', pretty_print=pretty_print)
        if self.microzone is not None:
            self.microzone.export(outfile, level, namespace_, name_='microzone', pretty_print=pretty_print)
        if self.clusterCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<clusterCode>%s</clusterCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.clusterCode), input_name='clusterCode')), eol_))
        if self.legalComments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<legalComments>%s</legalComments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.legalComments), input_name='legalComments')), eol_))
        if self.cashAmount is not None:
            self.cashAmount.export(outfile, level, namespace_, name_='cashAmount', pretty_print=pretty_print)
        if self.specialInstructions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<specialInstructions>%s</specialInstructions>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.specialInstructions), input_name='specialInstructions')), eol_))
        if self.bulkShipment is not None:
            self.bulkShipment.export(outfile, level, namespace_, name_='bulkShipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'consignmentNumber':
            consignmentNumber_ = child_.text
            consignmentNumber_ = self.gds_validate_string(consignmentNumber_, node, 'consignmentNumber')
            self.consignmentNumber = consignmentNumber_
        elif nodeName_ == 'sender':
            obj_ = nameAndAddressResponseType.factory()
            obj_.build(child_)
            self.sender = obj_
            obj_.original_tagname_ = 'sender'
        elif nodeName_ == 'delivery':
            obj_ = nameAndAddressResponseType.factory()
            obj_.build(child_)
            self.delivery = obj_
            obj_.original_tagname_ = 'delivery'
        elif nodeName_ == 'contact':
            obj_ = contactType.factory()
            obj_.build(child_)
            self.contact = obj_
            obj_.original_tagname_ = 'contact'
        elif nodeName_ == 'account':
            obj_ = accountType.factory()
            obj_.build(child_)
            self.account = obj_
            obj_.original_tagname_ = 'account'
        elif nodeName_ == 'totalNumberOfPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'totalNumberOfPieces')
            self.totalNumberOfPieces = ival_
        elif nodeName_ == 'product':
            obj_ = productDescriptionType.factory()
            obj_.build(child_)
            self.product = obj_
            obj_.original_tagname_ = 'product'
        elif nodeName_ == 'option':
            obj_ = optionDescriptionType.factory()
            obj_.build(child_)
            self.option.append(obj_)
            obj_.original_tagname_ = 'option'
        elif nodeName_ == 'collectionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.collectionDate = dval_
        elif nodeName_ == 'marketDisplay':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.marketDisplay = obj_
            obj_.original_tagname_ = 'marketDisplay'
        elif nodeName_ == 'transportDisplay':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.transportDisplay = obj_
            obj_.original_tagname_ = 'transportDisplay'
        elif nodeName_ == 'freeCirculationDisplay':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.freeCirculationDisplay = obj_
            obj_.original_tagname_ = 'freeCirculationDisplay'
        elif nodeName_ == 'sortSplitText':
            sortSplitText_ = child_.text
            sortSplitText_ = self.gds_validate_string(sortSplitText_, node, 'sortSplitText')
            self.sortSplitText = sortSplitText_
        elif nodeName_ == 'xrayDisplay':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.xrayDisplay = obj_
            obj_.original_tagname_ = 'xrayDisplay'
        elif nodeName_ == 'originDepot':
            obj_ = depotType.factory()
            obj_.build(child_)
            self.originDepot = obj_
            obj_.original_tagname_ = 'originDepot'
        elif nodeName_ == 'transitDepots':
            obj_ = transitDepotListType.factory()
            obj_.build(child_)
            self.transitDepots = obj_
            obj_.original_tagname_ = 'transitDepots'
        elif nodeName_ == 'destinationDepot':
            obj_ = destinationDepotType.factory()
            obj_.build(child_)
            self.destinationDepot = obj_
            obj_.original_tagname_ = 'destinationDepot'
        elif nodeName_ == 'microzone':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.microzone = obj_
            obj_.original_tagname_ = 'microzone'
        elif nodeName_ == 'clusterCode':
            clusterCode_ = child_.text
            clusterCode_ = self.gds_validate_string(clusterCode_, node, 'clusterCode')
            self.clusterCode = clusterCode_
        elif nodeName_ == 'legalComments':
            legalComments_ = child_.text
            legalComments_ = self.gds_validate_string(legalComments_, node, 'legalComments')
            self.legalComments = legalComments_
        elif nodeName_ == 'cashAmount':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.cashAmount = obj_
            obj_.original_tagname_ = 'cashAmount'
        elif nodeName_ == 'specialInstructions':
            specialInstructions_ = child_.text
            specialInstructions_ = self.gds_validate_string(specialInstructions_, node, 'specialInstructions')
            self.specialInstructions = specialInstructions_
        elif nodeName_ == 'bulkShipment':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.bulkShipment = obj_
            obj_.original_tagname_ = 'bulkShipment'
# end class consignmentRoutingLabelType


class destinationDepotType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, depotCode=None, dueDayOfMonth=None, dueDate=None):
        self.original_tagname_ = None
        self.depotCode = depotCode
        self.dueDayOfMonth = dueDayOfMonth
        if isinstance(dueDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dueDate, '%Y-%m-%d').date()
        else:
            initvalue_ = dueDate
        self.dueDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, destinationDepotType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if destinationDepotType.subclass:
            return destinationDepotType.subclass(*args_, **kwargs_)
        else:
            return destinationDepotType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_depotCode(self): return self.depotCode
    def set_depotCode(self, depotCode): self.depotCode = depotCode
    def get_dueDayOfMonth(self): return self.dueDayOfMonth
    def set_dueDayOfMonth(self, dueDayOfMonth): self.dueDayOfMonth = dueDayOfMonth
    def get_dueDate(self): return self.dueDate
    def set_dueDate(self, dueDate): self.dueDate = dueDate
    def hasContent_(self):
        if (
            self.depotCode is not None or
            self.dueDayOfMonth is not None or
            self.dueDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='destinationDepotType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('destinationDepotType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='destinationDepotType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='destinationDepotType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='destinationDepotType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='destinationDepotType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.depotCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<depotCode>%s</depotCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.depotCode), input_name='depotCode')), eol_))
        if self.dueDayOfMonth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dueDayOfMonth>%s</dueDayOfMonth>%s' % (self.gds_format_integer(self.dueDayOfMonth, input_name='dueDayOfMonth'), eol_))
        if self.dueDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dueDate>%s</dueDate>%s' % (self.gds_format_date(self.dueDate, input_name='dueDate'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'depotCode':
            depotCode_ = child_.text
            depotCode_ = self.gds_validate_string(depotCode_, node, 'depotCode')
            self.depotCode = depotCode_
        elif nodeName_ == 'dueDayOfMonth':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'dueDayOfMonth')
            self.dueDayOfMonth = ival_
        elif nodeName_ == 'dueDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dueDate = dval_
# end class destinationDepotType


class numericRenderInstructionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, code=None, renderInstructions=None, valueOf_=None):
        self.original_tagname_ = None
        self.code = _cast(None, code)
        self.renderInstructions = _cast(None, renderInstructions)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, numericRenderInstructionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if numericRenderInstructionsType.subclass:
            return numericRenderInstructionsType.subclass(*args_, **kwargs_)
        else:
            return numericRenderInstructionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    def get_renderInstructions(self): return self.renderInstructions
    def set_renderInstructions(self, renderInstructions): self.renderInstructions = renderInstructions
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='numericRenderInstructionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('numericRenderInstructionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='numericRenderInstructionsType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='numericRenderInstructionsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='numericRenderInstructionsType'):
        if self.code is not None and 'code' not in already_processed:
            already_processed.add('code')
            outfile.write(' code=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.code), input_name='code')), ))
        if self.renderInstructions is not None and 'renderInstructions' not in already_processed:
            already_processed.add('renderInstructions')
            outfile.write(' renderInstructions=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.renderInstructions), input_name='renderInstructions')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='numericRenderInstructionsType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('code', node)
        if value is not None and 'code' not in already_processed:
            already_processed.add('code')
            self.code = value
        value = find_attr_value_('renderInstructions', node)
        if value is not None and 'renderInstructions' not in already_processed:
            already_processed.add('renderInstructions')
            self.renderInstructions = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class numericRenderInstructionsType


class optionDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, valueOf_=None):
        self.original_tagname_ = None
        self.id = _cast(None, id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionDescriptionType.subclass:
            return optionDescriptionType.subclass(*args_, **kwargs_)
        else:
            return optionDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionDescriptionType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionDescriptionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionDescriptionType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='optionDescriptionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class optionDescriptionType


class pieceRoutingLabelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, pieceNumber=None, weightDisplay=None, pieceReference=None, barcode=None, barcodeForCustomer=None, twoDBarcode=None):
        self.original_tagname_ = None
        self.pieceNumber = pieceNumber
        self.weightDisplay = weightDisplay
        self.pieceReference = pieceReference
        self.barcode = barcode
        self.barcodeForCustomer = barcodeForCustomer
        self.twoDBarcode = twoDBarcode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pieceRoutingLabelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pieceRoutingLabelType.subclass:
            return pieceRoutingLabelType.subclass(*args_, **kwargs_)
        else:
            return pieceRoutingLabelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_pieceNumber(self): return self.pieceNumber
    def set_pieceNumber(self, pieceNumber): self.pieceNumber = pieceNumber
    def get_weightDisplay(self): return self.weightDisplay
    def set_weightDisplay(self, weightDisplay): self.weightDisplay = weightDisplay
    def get_pieceReference(self): return self.pieceReference
    def set_pieceReference(self, pieceReference): self.pieceReference = pieceReference
    def get_barcode(self): return self.barcode
    def set_barcode(self, barcode): self.barcode = barcode
    def get_barcodeForCustomer(self): return self.barcodeForCustomer
    def set_barcodeForCustomer(self, barcodeForCustomer): self.barcodeForCustomer = barcodeForCustomer
    def get_twoDBarcode(self): return self.twoDBarcode
    def set_twoDBarcode(self, twoDBarcode): self.twoDBarcode = twoDBarcode
    def hasContent_(self):
        if (
            self.pieceNumber is not None or
            self.weightDisplay is not None or
            self.pieceReference is not None or
            self.barcode is not None or
            self.barcodeForCustomer is not None or
            self.twoDBarcode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pieceRoutingLabelType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pieceRoutingLabelType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pieceRoutingLabelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pieceRoutingLabelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pieceRoutingLabelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pieceRoutingLabelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.pieceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pieceNumber>%s</pieceNumber>%s' % (self.gds_format_integer(self.pieceNumber, input_name='pieceNumber'), eol_))
        if self.weightDisplay is not None:
            self.weightDisplay.export(outfile, level, namespace_, name_='weightDisplay', pretty_print=pretty_print)
        if self.pieceReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pieceReference>%s</pieceReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.pieceReference), input_name='pieceReference')), eol_))
        if self.barcode is not None:
            self.barcode.export(outfile, level, namespace_, name_='barcode', pretty_print=pretty_print)
        if self.barcodeForCustomer is not None:
            self.barcodeForCustomer.export(outfile, level, namespace_, name_='barcodeForCustomer', pretty_print=pretty_print)
        if self.twoDBarcode is not None:
            self.twoDBarcode.export(outfile, level, namespace_, name_='twoDBarcode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'pieceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'pieceNumber')
            self.pieceNumber = ival_
        elif nodeName_ == 'weightDisplay':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.weightDisplay = obj_
            obj_.original_tagname_ = 'weightDisplay'
        elif nodeName_ == 'pieceReference':
            pieceReference_ = child_.text
            pieceReference_ = self.gds_validate_string(pieceReference_, node, 'pieceReference')
            self.pieceReference = pieceReference_
        elif nodeName_ == 'barcode':
            obj_ = barcodeType.factory()
            obj_.build(child_)
            self.barcode = obj_
            obj_.original_tagname_ = 'barcode'
        elif nodeName_ == 'barcodeForCustomer':
            obj_ = barcodeType.factory()
            obj_.build(child_)
            self.barcodeForCustomer = obj_
            obj_.original_tagname_ = 'barcodeForCustomer'
        elif nodeName_ == 'twoDBarcode':
            obj_ = twoDBarcodeType.factory()
            obj_.build(child_)
            self.twoDBarcode = obj_
            obj_.original_tagname_ = 'twoDBarcode'
# end class pieceRoutingLabelType


class productDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, valueOf_=None):
        self.original_tagname_ = None
        self.id = _cast(None, id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, productDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if productDescriptionType.subclass:
            return productDescriptionType.subclass(*args_, **kwargs_)
        else:
            return productDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='productDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('productDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='productDescriptionType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='productDescriptionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='productDescriptionType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='productDescriptionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class productDescriptionType


class renderInstructionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, code=None, renderInstructions=None, valueOf_=None):
        self.original_tagname_ = None
        self.code = _cast(None, code)
        self.renderInstructions = _cast(None, renderInstructions)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, renderInstructionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if renderInstructionsType.subclass:
            return renderInstructionsType.subclass(*args_, **kwargs_)
        else:
            return renderInstructionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    def get_renderInstructions(self): return self.renderInstructions
    def set_renderInstructions(self, renderInstructions): self.renderInstructions = renderInstructions
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='renderInstructionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('renderInstructionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='renderInstructionsType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='renderInstructionsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='renderInstructionsType'):
        if self.code is not None and 'code' not in already_processed:
            already_processed.add('code')
            outfile.write(' code=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.code), input_name='code')), ))
        if self.renderInstructions is not None and 'renderInstructions' not in already_processed:
            already_processed.add('renderInstructions')
            outfile.write(' renderInstructions=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.renderInstructions), input_name='renderInstructions')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='renderInstructionsType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('code', node)
        if value is not None and 'code' not in already_processed:
            already_processed.add('code')
            self.code = value
        value = find_attr_value_('renderInstructions', node)
        if value is not None and 'renderInstructions' not in already_processed:
            already_processed.add('renderInstructions')
            self.renderInstructions = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class renderInstructionsType


class sortDepotType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, depotCode=None, sortCellIndicator=None, sortLocationCode=None):
        self.original_tagname_ = None
        self.depotCode = depotCode
        self.sortCellIndicator = sortCellIndicator
        self.sortLocationCode = sortLocationCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, sortDepotType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if sortDepotType.subclass:
            return sortDepotType.subclass(*args_, **kwargs_)
        else:
            return sortDepotType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_depotCode(self): return self.depotCode
    def set_depotCode(self, depotCode): self.depotCode = depotCode
    def get_sortCellIndicator(self): return self.sortCellIndicator
    def set_sortCellIndicator(self, sortCellIndicator): self.sortCellIndicator = sortCellIndicator
    def get_sortLocationCode(self): return self.sortLocationCode
    def set_sortLocationCode(self, sortLocationCode): self.sortLocationCode = sortLocationCode
    def hasContent_(self):
        if (
            self.depotCode is not None or
            self.sortCellIndicator is not None or
            self.sortLocationCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sortDepotType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('sortDepotType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sortDepotType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sortDepotType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sortDepotType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sortDepotType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.depotCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<depotCode>%s</depotCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.depotCode), input_name='depotCode')), eol_))
        if self.sortCellIndicator is not None:
            self.sortCellIndicator.export(outfile, level, namespace_, name_='sortCellIndicator', pretty_print=pretty_print)
        if self.sortLocationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<sortLocationCode>%s</sortLocationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.sortLocationCode), input_name='sortLocationCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'depotCode':
            depotCode_ = child_.text
            depotCode_ = self.gds_validate_string(depotCode_, node, 'depotCode')
            self.depotCode = depotCode_
        elif nodeName_ == 'sortCellIndicator':
            obj_ = renderInstructionsType.factory()
            obj_.build(child_)
            self.sortCellIndicator = obj_
            obj_.original_tagname_ = 'sortCellIndicator'
        elif nodeName_ == 'sortLocationCode':
            sortLocationCode_ = child_.text
            sortLocationCode_ = self.gds_validate_string(sortLocationCode_, node, 'sortLocationCode')
            self.sortLocationCode = sortLocationCode_
# end class sortDepotType


class transitDepotListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, transitDepot=None, actionDepot=None, sortDepot=None):
        self.original_tagname_ = None
        if transitDepot is None:
            self.transitDepot = []
        else:
            self.transitDepot = transitDepot
        if actionDepot is None:
            self.actionDepot = []
        else:
            self.actionDepot = actionDepot
        if sortDepot is None:
            self.sortDepot = []
        else:
            self.sortDepot = sortDepot
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, transitDepotListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if transitDepotListType.subclass:
            return transitDepotListType.subclass(*args_, **kwargs_)
        else:
            return transitDepotListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_transitDepot(self): return self.transitDepot
    def set_transitDepot(self, transitDepot): self.transitDepot = transitDepot
    def add_transitDepot(self, value): self.transitDepot.append(value)
    def insert_transitDepot_at(self, index, value): self.transitDepot.insert(index, value)
    def replace_transitDepot_at(self, index, value): self.transitDepot[index] = value
    def get_actionDepot(self): return self.actionDepot
    def set_actionDepot(self, actionDepot): self.actionDepot = actionDepot
    def add_actionDepot(self, value): self.actionDepot.append(value)
    def insert_actionDepot_at(self, index, value): self.actionDepot.insert(index, value)
    def replace_actionDepot_at(self, index, value): self.actionDepot[index] = value
    def get_sortDepot(self): return self.sortDepot
    def set_sortDepot(self, sortDepot): self.sortDepot = sortDepot
    def add_sortDepot(self, value): self.sortDepot.append(value)
    def insert_sortDepot_at(self, index, value): self.sortDepot.insert(index, value)
    def replace_sortDepot_at(self, index, value): self.sortDepot[index] = value
    def hasContent_(self):
        if (
            self.transitDepot or
            self.actionDepot or
            self.sortDepot
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='transitDepotListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('transitDepotListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='transitDepotListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='transitDepotListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='transitDepotListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='transitDepotListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for transitDepot_ in self.transitDepot:
            transitDepot_.export(outfile, level, namespace_, name_='transitDepot', pretty_print=pretty_print)
        for actionDepot_ in self.actionDepot:
            actionDepot_.export(outfile, level, namespace_, name_='actionDepot', pretty_print=pretty_print)
        for sortDepot_ in self.sortDepot:
            sortDepot_.export(outfile, level, namespace_, name_='sortDepot', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'transitDepot':
            obj_ = depotType.factory()
            obj_.build(child_)
            self.transitDepot.append(obj_)
            obj_.original_tagname_ = 'transitDepot'
        elif nodeName_ == 'actionDepot':
            obj_ = actionDepotType.factory()
            obj_.build(child_)
            self.actionDepot.append(obj_)
            obj_.original_tagname_ = 'actionDepot'
        elif nodeName_ == 'sortDepot':
            obj_ = sortDepotType.factory()
            obj_.build(child_)
            self.sortDepot.append(obj_)
            obj_.original_tagname_ = 'sortDepot'
# end class transitDepotListType


class twoDBarcodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, symbology=None, valueOf_=None):
        self.original_tagname_ = None
        self.symbology = _cast(None, symbology)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, twoDBarcodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if twoDBarcodeType.subclass:
            return twoDBarcodeType.subclass(*args_, **kwargs_)
        else:
            return twoDBarcodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_symbology(self): return self.symbology
    def set_symbology(self, symbology): self.symbology = symbology
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='twoDBarcodeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('twoDBarcodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='twoDBarcodeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='twoDBarcodeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='twoDBarcodeType'):
        if self.symbology is not None and 'symbology' not in already_processed:
            already_processed.add('symbology')
            outfile.write(' symbology=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.symbology), input_name='symbology')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='twoDBarcodeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('symbology', node)
        if value is not None and 'symbology' not in already_processed:
            already_processed.add('symbology')
            self.symbology = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class twoDBarcodeType


class brokenRules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None, errorCode=None, errorDescription=None):
        self.original_tagname_ = None
        self.key = _cast(None, key)
        self.errorCode = errorCode
        self.errorDescription = errorDescription
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, brokenRules)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if brokenRules.subclass:
            return brokenRules.subclass(*args_, **kwargs_)
        else:
            return brokenRules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_errorCode(self): return self.errorCode
    def set_errorCode(self, errorCode): self.errorCode = errorCode
    def get_errorDescription(self): return self.errorDescription
    def set_errorDescription(self, errorDescription): self.errorDescription = errorDescription
    def get_key(self): return self.key
    def set_key(self, key): self.key = key
    def hasContent_(self):
        if (
            self.errorCode is not None or
            self.errorDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='brokenRules', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('brokenRules')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='brokenRules')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='brokenRules', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='brokenRules'):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            outfile.write(' key=%s' % (quote_attrib(self.key), ))
    def exportChildren(self, outfile, level, namespace_='', name_='brokenRules', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorCode>%s</errorCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorCode), input_name='errorCode')), eol_))
        if self.errorDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<errorDescription>%s</errorDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.errorDescription), input_name='errorDescription')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.add('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'errorCode':
            errorCode_ = child_.text
            errorCode_ = self.gds_validate_string(errorCode_, node, 'errorCode')
            self.errorCode = errorCode_
        elif nodeName_ == 'errorDescription':
            errorDescription_ = child_.text
            errorDescription_ = self.gds_validate_string(errorDescription_, node, 'errorDescription')
            self.errorDescription = errorDescription_
# end class brokenRules


class fault(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None):
        self.original_tagname_ = None
        self.key = _cast(None, key)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fault.subclass:
            return fault.subclass(*args_, **kwargs_)
        else:
            return fault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_key(self): return self.key
    def set_key(self, key): self.key = key
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='fault', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fault')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='fault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fault'):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            outfile.write(' key=%s' % (quote_attrib(self.key), ))
    def exportChildren(self, outfile, level, namespace_='', name_='fault', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.add('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fault


class accountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, accountNumber=None, accountCountry=None):
        self.original_tagname_ = None
        self.accountNumber = accountNumber
        self.accountCountry = accountCountry
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, accountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if accountType.subclass:
            return accountType.subclass(*args_, **kwargs_)
        else:
            return accountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_accountNumber(self): return self.accountNumber
    def set_accountNumber(self, accountNumber): self.accountNumber = accountNumber
    def get_accountCountry(self): return self.accountCountry
    def set_accountCountry(self, accountCountry): self.accountCountry = accountCountry
    def hasContent_(self):
        if (
            self.accountNumber is not None or
            self.accountCountry is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='accountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('accountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='accountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='accountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='accountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='accountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.accountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<accountNumber>%s</accountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.accountNumber), input_name='accountNumber')), eol_))
        if self.accountCountry is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<accountCountry>%s</accountCountry>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.accountCountry), input_name='accountCountry')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'accountNumber':
            accountNumber_ = child_.text
            accountNumber_ = self.gds_validate_string(accountNumber_, node, 'accountNumber')
            self.accountNumber = accountNumber_
        elif nodeName_ == 'accountCountry':
            accountCountry_ = child_.text
            accountCountry_ = self.gds_validate_string(accountCountry_, node, 'accountCountry')
            self.accountCountry = accountCountry_
# end class accountType


class consignmentIdentityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, consignmentNumber=None, customerReference=None):
        self.original_tagname_ = None
        self.consignmentNumber = consignmentNumber
        self.customerReference = customerReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, consignmentIdentityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if consignmentIdentityType.subclass:
            return consignmentIdentityType.subclass(*args_, **kwargs_)
        else:
            return consignmentIdentityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_consignmentNumber(self): return self.consignmentNumber
    def set_consignmentNumber(self, consignmentNumber): self.consignmentNumber = consignmentNumber
    def get_customerReference(self): return self.customerReference
    def set_customerReference(self, customerReference): self.customerReference = customerReference
    def hasContent_(self):
        if (
            self.consignmentNumber is not None or
            self.customerReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='consignmentIdentityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('consignmentIdentityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='consignmentIdentityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='consignmentIdentityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='consignmentIdentityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='consignmentIdentityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.consignmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<consignmentNumber>%s</consignmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.consignmentNumber), input_name='consignmentNumber')), eol_))
        if self.customerReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<customerReference>%s</customerReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.customerReference), input_name='customerReference')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'consignmentNumber':
            consignmentNumber_ = child_.text
            consignmentNumber_ = self.gds_validate_string(consignmentNumber_, node, 'consignmentNumber')
            self.consignmentNumber = consignmentNumber_
        elif nodeName_ == 'customerReference':
            customerReference_ = child_.text
            customerReference_ = self.gds_validate_string(customerReference_, node, 'customerReference')
            self.customerReference = customerReference_
# end class consignmentIdentityType


class contactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, telephoneNumber=None, emailAddress=None):
        self.original_tagname_ = None
        self.name = name
        self.telephoneNumber = telephoneNumber
        self.emailAddress = emailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactType.subclass:
            return contactType.subclass(*args_, **kwargs_)
        else:
            return contactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_telephoneNumber(self): return self.telephoneNumber
    def set_telephoneNumber(self, telephoneNumber): self.telephoneNumber = telephoneNumber
    def get_emailAddress(self): return self.emailAddress
    def set_emailAddress(self, emailAddress): self.emailAddress = emailAddress
    def hasContent_(self):
        if (
            self.name is not None or
            self.telephoneNumber is not None or
            self.emailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='contactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.telephoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<telephoneNumber>%s</telephoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.telephoneNumber), input_name='telephoneNumber')), eol_))
        if self.emailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<emailAddress>%s</emailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.emailAddress), input_name='emailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'telephoneNumber':
            telephoneNumber_ = child_.text
            telephoneNumber_ = self.gds_validate_string(telephoneNumber_, node, 'telephoneNumber')
            self.telephoneNumber = telephoneNumber_
        elif nodeName_ == 'emailAddress':
            emailAddress_ = child_.text
            emailAddress_ = self.gds_validate_string(emailAddress_, node, 'emailAddress')
            self.emailAddress = emailAddress_
# end class contactType


class depotType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, depotCode=None):
        self.original_tagname_ = None
        self.depotCode = depotCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, depotType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if depotType.subclass:
            return depotType.subclass(*args_, **kwargs_)
        else:
            return depotType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_depotCode(self): return self.depotCode
    def set_depotCode(self, depotCode): self.depotCode = depotCode
    def hasContent_(self):
        if (
            self.depotCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='depotType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('depotType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='depotType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='depotType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='depotType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='depotType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.depotCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<depotCode>%s</depotCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.depotCode), input_name='depotCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'depotCode':
            depotCode_ = child_.text
            depotCode_ = self.gds_validate_string(depotCode_, node, 'depotCode')
            self.depotCode = depotCode_
# end class depotType


class marketType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, originCountryCode=None, marketSpecification=None):
        self.original_tagname_ = None
        self.originCountryCode = originCountryCode
        self.marketSpecification = marketSpecification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, marketType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if marketType.subclass:
            return marketType.subclass(*args_, **kwargs_)
        else:
            return marketType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_originCountryCode(self): return self.originCountryCode
    def set_originCountryCode(self, originCountryCode): self.originCountryCode = originCountryCode
    def get_marketSpecification(self): return self.marketSpecification
    def set_marketSpecification(self, marketSpecification): self.marketSpecification = marketSpecification
    def hasContent_(self):
        if (
            self.originCountryCode is not None or
            self.marketSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='marketType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('marketType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='marketType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='marketType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='marketType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='marketType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.originCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<originCountryCode>%s</originCountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.originCountryCode), input_name='originCountryCode')), eol_))
        if self.marketSpecification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<marketSpecification>%s</marketSpecification>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.marketSpecification), input_name='marketSpecification')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'originCountryCode':
            originCountryCode_ = child_.text
            originCountryCode_ = self.gds_validate_string(originCountryCode_, node, 'originCountryCode')
            self.originCountryCode = originCountryCode_
        elif nodeName_ == 'marketSpecification':
            marketSpecification_ = child_.text
            marketSpecification_ = self.gds_validate_string(marketSpecification_, node, 'marketSpecification')
            self.marketSpecification = marketSpecification_
# end class marketType


class measurementsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, length=None, width=None, height=None, weight=None):
        self.original_tagname_ = None
        self.length = length
        self.width = width
        self.height = height
        self.weight = weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, measurementsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if measurementsType.subclass:
            return measurementsType.subclass(*args_, **kwargs_)
        else:
            return measurementsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_weight(self): return self.weight
    def set_weight(self, weight): self.weight = weight
    def hasContent_(self):
        if (
            self.length is not None or
            self.width is not None or
            self.height is not None or
            self.weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='measurementsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('measurementsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='measurementsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='measurementsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='measurementsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='measurementsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<length>%s</length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.length), input_name='length')), eol_))
        if self.width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<width>%s</width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.width), input_name='width')), eol_))
        if self.height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<height>%s</height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.height), input_name='height')), eol_))
        if self.weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<weight>%s</weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.weight), input_name='weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'length':
            length_ = child_.text
            length_ = self.gds_validate_string(length_, node, 'length')
            self.length = length_
        elif nodeName_ == 'width':
            width_ = child_.text
            width_ = self.gds_validate_string(width_, node, 'width')
            self.width = width_
        elif nodeName_ == 'height':
            height_ = child_.text
            height_ = self.gds_validate_string(height_, node, 'height')
            self.height = height_
        elif nodeName_ == 'weight':
            weight_ = child_.text
            weight_ = self.gds_validate_string(weight_, node, 'weight')
            self.weight = weight_
# end class measurementsType


class nameAndAddressRequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, addressLine1=None, addressLine2=None, addressLine3=None, town=None, exactMatch='Y', province=None, postcode=None, country=None):
        self.original_tagname_ = None
        self.name = name
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.addressLine3 = addressLine3
        self.town = town
        self.exactMatch = exactMatch
        self.province = province
        self.postcode = postcode
        self.country = country
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nameAndAddressRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nameAndAddressRequestType.subclass:
            return nameAndAddressRequestType.subclass(*args_, **kwargs_)
        else:
            return nameAndAddressRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_addressLine1(self): return self.addressLine1
    def set_addressLine1(self, addressLine1): self.addressLine1 = addressLine1
    def get_addressLine2(self): return self.addressLine2
    def set_addressLine2(self, addressLine2): self.addressLine2 = addressLine2
    def get_addressLine3(self): return self.addressLine3
    def set_addressLine3(self, addressLine3): self.addressLine3 = addressLine3
    def get_town(self): return self.town
    def set_town(self, town): self.town = town
    def get_exactMatch(self): return self.exactMatch
    def set_exactMatch(self, exactMatch): self.exactMatch = exactMatch
    def get_province(self): return self.province
    def set_province(self, province): self.province = province
    def get_postcode(self): return self.postcode
    def set_postcode(self, postcode): self.postcode = postcode
    def get_country(self): return self.country
    def set_country(self, country): self.country = country
    def hasContent_(self):
        if (
            self.name is not None or
            self.addressLine1 is not None or
            self.addressLine2 is not None or
            self.addressLine3 is not None or
            self.town is not None or
            self.exactMatch != "Y" or
            self.province is not None or
            self.postcode is not None or
            self.country is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nameAndAddressRequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nameAndAddressRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nameAndAddressRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nameAndAddressRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nameAndAddressRequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nameAndAddressRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.addressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<addressLine1>%s</addressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.addressLine1), input_name='addressLine1')), eol_))
        if self.addressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<addressLine2>%s</addressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.addressLine2), input_name='addressLine2')), eol_))
        if self.addressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<addressLine3>%s</addressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.addressLine3), input_name='addressLine3')), eol_))
        if self.town is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<town>%s</town>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.town), input_name='town')), eol_))
        if self.exactMatch != "Y":
            showIndent(outfile, level, pretty_print)
            outfile.write('<exactMatch>%s</exactMatch>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.exactMatch), input_name='exactMatch')), eol_))
        if self.province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<province>%s</province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.province), input_name='province')), eol_))
        if self.postcode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postcode>%s</postcode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postcode), input_name='postcode')), eol_))
        if self.country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country>%s</country>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country), input_name='country')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'addressLine1':
            addressLine1_ = child_.text
            addressLine1_ = self.gds_validate_string(addressLine1_, node, 'addressLine1')
            self.addressLine1 = addressLine1_
        elif nodeName_ == 'addressLine2':
            addressLine2_ = child_.text
            addressLine2_ = self.gds_validate_string(addressLine2_, node, 'addressLine2')
            self.addressLine2 = addressLine2_
        elif nodeName_ == 'addressLine3':
            addressLine3_ = child_.text
            addressLine3_ = self.gds_validate_string(addressLine3_, node, 'addressLine3')
            self.addressLine3 = addressLine3_
        elif nodeName_ == 'town':
            town_ = child_.text
            town_ = self.gds_validate_string(town_, node, 'town')
            self.town = town_
        elif nodeName_ == 'exactMatch':
            exactMatch_ = child_.text
            exactMatch_ = self.gds_validate_string(exactMatch_, node, 'exactMatch')
            self.exactMatch = exactMatch_
        elif nodeName_ == 'province':
            province_ = child_.text
            province_ = self.gds_validate_string(province_, node, 'province')
            self.province = province_
        elif nodeName_ == 'postcode':
            postcode_ = child_.text
            postcode_ = self.gds_validate_string(postcode_, node, 'postcode')
            self.postcode = postcode_
        elif nodeName_ == 'country':
            country_ = child_.text
            country_ = self.gds_validate_string(country_, node, 'country')
            self.country = country_
# end class nameAndAddressRequestType


class nameAndAddressResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, addressLine1=None, addressLine2=None, addressLine3=None, town=None, province=None, postcode=None, country=None):
        self.original_tagname_ = None
        self.name = name
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.addressLine3 = addressLine3
        self.town = town
        self.province = province
        self.postcode = postcode
        self.country = country
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nameAndAddressResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nameAndAddressResponseType.subclass:
            return nameAndAddressResponseType.subclass(*args_, **kwargs_)
        else:
            return nameAndAddressResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_addressLine1(self): return self.addressLine1
    def set_addressLine1(self, addressLine1): self.addressLine1 = addressLine1
    def get_addressLine2(self): return self.addressLine2
    def set_addressLine2(self, addressLine2): self.addressLine2 = addressLine2
    def get_addressLine3(self): return self.addressLine3
    def set_addressLine3(self, addressLine3): self.addressLine3 = addressLine3
    def get_town(self): return self.town
    def set_town(self, town): self.town = town
    def get_province(self): return self.province
    def set_province(self, province): self.province = province
    def get_postcode(self): return self.postcode
    def set_postcode(self, postcode): self.postcode = postcode
    def get_country(self): return self.country
    def set_country(self, country): self.country = country
    def hasContent_(self):
        if (
            self.name is not None or
            self.addressLine1 is not None or
            self.addressLine2 is not None or
            self.addressLine3 is not None or
            self.town is not None or
            self.province is not None or
            self.postcode is not None or
            self.country is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nameAndAddressResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nameAndAddressResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nameAndAddressResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nameAndAddressResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nameAndAddressResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nameAndAddressResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.addressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<addressLine1>%s</addressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.addressLine1), input_name='addressLine1')), eol_))
        if self.addressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<addressLine2>%s</addressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.addressLine2), input_name='addressLine2')), eol_))
        if self.addressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<addressLine3>%s</addressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.addressLine3), input_name='addressLine3')), eol_))
        if self.town is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<town>%s</town>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.town), input_name='town')), eol_))
        if self.province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<province>%s</province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.province), input_name='province')), eol_))
        if self.postcode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<postcode>%s</postcode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.postcode), input_name='postcode')), eol_))
        if self.country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<country>%s</country>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.country), input_name='country')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'addressLine1':
            addressLine1_ = child_.text
            addressLine1_ = self.gds_validate_string(addressLine1_, node, 'addressLine1')
            self.addressLine1 = addressLine1_
        elif nodeName_ == 'addressLine2':
            addressLine2_ = child_.text
            addressLine2_ = self.gds_validate_string(addressLine2_, node, 'addressLine2')
            self.addressLine2 = addressLine2_
        elif nodeName_ == 'addressLine3':
            addressLine3_ = child_.text
            addressLine3_ = self.gds_validate_string(addressLine3_, node, 'addressLine3')
            self.addressLine3 = addressLine3_
        elif nodeName_ == 'town':
            town_ = child_.text
            town_ = self.gds_validate_string(town_, node, 'town')
            self.town = town_
        elif nodeName_ == 'province':
            province_ = child_.text
            province_ = self.gds_validate_string(province_, node, 'province')
            self.province = province_
        elif nodeName_ == 'postcode':
            postcode_ = child_.text
            postcode_ = self.gds_validate_string(postcode_, node, 'postcode')
            self.postcode = postcode_
        elif nodeName_ == 'country':
            country_ = child_.text
            country_ = self.gds_validate_string(country_, node, 'country')
            self.country = country_
# end class nameAndAddressResponseType


class optionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, optionId=None):
        self.original_tagname_ = None
        if optionId is None:
            self.optionId = []
        else:
            self.optionId = optionId
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionType.subclass:
            return optionType.subclass(*args_, **kwargs_)
        else:
            return optionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_optionId(self): return self.optionId
    def set_optionId(self, optionId): self.optionId = optionId
    def add_optionId(self, value): self.optionId.append(value)
    def insert_optionId_at(self, index, value): self.optionId.insert(index, value)
    def replace_optionId_at(self, index, value): self.optionId[index] = value
    def hasContent_(self):
        if (
            self.optionId
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='optionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='optionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='optionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='optionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='optionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for optionId_ in self.optionId:
            showIndent(outfile, level, pretty_print)
            outfile.write('<optionId>%s</optionId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(optionId_), input_name='optionId')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'optionId':
            optionId_ = child_.text
            optionId_ = self.gds_validate_string(optionId_, node, 'optionId')
            self.optionId.append(optionId_)
# end class optionType


class pieceLineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identifier=None, goodsDescription=None, barcodeForCustomer=None, pieceMeasurements=None, pieces=None):
        self.original_tagname_ = None
        self.identifier = identifier
        self.goodsDescription = goodsDescription
        self.barcodeForCustomer = barcodeForCustomer
        self.pieceMeasurements = pieceMeasurements
        if pieces is None:
            self.pieces = []
        else:
            self.pieces = pieces
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pieceLineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pieceLineType.subclass:
            return pieceLineType.subclass(*args_, **kwargs_)
        else:
            return pieceLineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identifier(self): return self.identifier
    def set_identifier(self, identifier): self.identifier = identifier
    def get_goodsDescription(self): return self.goodsDescription
    def set_goodsDescription(self, goodsDescription): self.goodsDescription = goodsDescription
    def get_barcodeForCustomer(self): return self.barcodeForCustomer
    def set_barcodeForCustomer(self, barcodeForCustomer): self.barcodeForCustomer = barcodeForCustomer
    def get_pieceMeasurements(self): return self.pieceMeasurements
    def set_pieceMeasurements(self, pieceMeasurements): self.pieceMeasurements = pieceMeasurements
    def get_pieces(self): return self.pieces
    def set_pieces(self, pieces): self.pieces = pieces
    def add_pieces(self, value): self.pieces.append(value)
    def insert_pieces_at(self, index, value): self.pieces.insert(index, value)
    def replace_pieces_at(self, index, value): self.pieces[index] = value
    def hasContent_(self):
        if (
            self.identifier is not None or
            self.goodsDescription is not None or
            self.barcodeForCustomer is not None or
            self.pieceMeasurements is not None or
            self.pieces
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pieceLineType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pieceLineType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pieceLineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pieceLineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pieceLineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pieceLineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<identifier>%s</identifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.identifier), input_name='identifier')), eol_))
        if self.goodsDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<goodsDescription>%s</goodsDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.goodsDescription), input_name='goodsDescription')), eol_))
        if self.barcodeForCustomer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<barcodeForCustomer>%s</barcodeForCustomer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.barcodeForCustomer), input_name='barcodeForCustomer')), eol_))
        if self.pieceMeasurements is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pieceMeasurements>%s</pieceMeasurements>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.pieceMeasurements), input_name='pieceMeasurements')), eol_))
        for pieces_ in self.pieces:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pieces>%s</pieces>%s' % (self.gds_encode(self.gds_format_string(quote_xml(pieces_), input_name='pieces')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identifier':
            identifier_ = child_.text
            identifier_ = self.gds_validate_string(identifier_, node, 'identifier')
            self.identifier = identifier_
        elif nodeName_ == 'goodsDescription':
            goodsDescription_ = child_.text
            goodsDescription_ = self.gds_validate_string(goodsDescription_, node, 'goodsDescription')
            self.goodsDescription = goodsDescription_
        elif nodeName_ == 'barcodeForCustomer':
            barcodeForCustomer_ = child_.text
            barcodeForCustomer_ = self.gds_validate_string(barcodeForCustomer_, node, 'barcodeForCustomer')
            self.barcodeForCustomer = barcodeForCustomer_
        elif nodeName_ == 'pieceMeasurements':
            pieceMeasurements_ = child_.text
            pieceMeasurements_ = self.gds_validate_string(pieceMeasurements_, node, 'pieceMeasurements')
            self.pieceMeasurements = pieceMeasurements_
        elif nodeName_ == 'pieces':
            pieces_ = child_.text
            pieces_ = self.gds_validate_string(pieces_, node, 'pieces')
            self.pieces.append(pieces_)
# end class pieceLineType


class pieceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sequenceNumbers=None, pieceReference=None):
        self.original_tagname_ = None
        self.sequenceNumbers = sequenceNumbers
        self.pieceReference = pieceReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pieceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pieceType.subclass:
            return pieceType.subclass(*args_, **kwargs_)
        else:
            return pieceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sequenceNumbers(self): return self.sequenceNumbers
    def set_sequenceNumbers(self, sequenceNumbers): self.sequenceNumbers = sequenceNumbers
    def get_pieceReference(self): return self.pieceReference
    def set_pieceReference(self, pieceReference): self.pieceReference = pieceReference
    def hasContent_(self):
        if (
            self.sequenceNumbers is not None or
            self.pieceReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pieceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pieceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pieceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pieceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pieceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pieceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.sequenceNumbers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<sequenceNumbers>%s</sequenceNumbers>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.sequenceNumbers), input_name='sequenceNumbers')), eol_))
        if self.pieceReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<pieceReference>%s</pieceReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.pieceReference), input_name='pieceReference')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sequenceNumbers':
            sequenceNumbers_ = child_.text
            sequenceNumbers_ = self.gds_validate_string(sequenceNumbers_, node, 'sequenceNumbers')
            self.sequenceNumbers = sequenceNumbers_
        elif nodeName_ == 'pieceReference':
            pieceReference_ = child_.text
            pieceReference_ = self.gds_validate_string(pieceReference_, node, 'pieceReference')
            self.pieceReference = pieceReference_
# end class pieceType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'labelResponse'
        rootClass = labelResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'labelResponse'
        rootClass = labelResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'labelResponse'
        rootClass = labelResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'labelResponse'
        rootClass = labelResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from labelresponse import *\n\n')
        sys.stdout.write('import labelresponse as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "accountType",
    "actionDepotType",
    "barcodeType",
    "brokenRules",
    "consignmentIdentityType",
    "consignmentResponseType",
    "consignmentRoutingLabelType",
    "contactType",
    "depotType",
    "destinationDepotType",
    "fault",
    "labelResponse",
    "marketType",
    "measurementsType",
    "nameAndAddressRequestType",
    "nameAndAddressResponseType",
    "numericRenderInstructionsType",
    "optionDescriptionType",
    "optionType",
    "pieceLineType",
    "pieceRoutingLabelType",
    "pieceType",
    "productDescriptionType",
    "renderInstructionsType",
    "sortDepotType",
    "transitDepotListType",
    "twoDBarcodeType"
]
