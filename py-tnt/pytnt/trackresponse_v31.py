#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jun 14 23:10:44 2018 by generateDS.py version 2.29.14.
# Python 3.6.5 (default, May 19 2018, 11:27:13)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', '../pytnt/trackresponse_v3.1.py')
#
# Command line arguments:
#   ././trackresponse_v3.1.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/bin/generateDS --no-namespace-defs -o "../pytnt/trackresponse_v3.1.py" ././trackresponse_v3.1.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class TrackResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Consignment=None, ContinuationKey=None, Error=None):
        self.original_tagname_ = None
        if Consignment is None:
            self.Consignment = []
        else:
            self.Consignment = Consignment
        self.ContinuationKey = ContinuationKey
        self.Error = Error
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackResponse.subclass:
            return TrackResponse.subclass(*args_, **kwargs_)
        else:
            return TrackResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Consignment(self): return self.Consignment
    def set_Consignment(self, Consignment): self.Consignment = Consignment
    def add_Consignment(self, value): self.Consignment.append(value)
    def insert_Consignment_at(self, index, value): self.Consignment.insert(index, value)
    def replace_Consignment_at(self, index, value): self.Consignment[index] = value
    def get_ContinuationKey(self): return self.ContinuationKey
    def set_ContinuationKey(self, ContinuationKey): self.ContinuationKey = ContinuationKey
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def hasContent_(self):
        if (
            self.Consignment or
            self.ContinuationKey is not None or
            self.Error is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TrackResponse', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TrackResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TrackResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TrackResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Consignment_ in self.Consignment:
            Consignment_.export(outfile, level, namespace_, name_='Consignment', pretty_print=pretty_print)
        if self.ContinuationKey is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContinuationKey>%s</ContinuationKey>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContinuationKey), input_name='ContinuationKey')), eol_))
        if self.Error is not None:
            self.Error.export(outfile, level, namespace_, name_='Error', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Consignment':
            obj_ = ConsignmentType.factory()
            obj_.build(child_)
            self.Consignment.append(obj_)
            obj_.original_tagname_ = 'Consignment'
        elif nodeName_ == 'ContinuationKey':
            ContinuationKey_ = child_.text
            ContinuationKey_ = self.gds_validate_string(ContinuationKey_, node, 'ContinuationKey')
            self.ContinuationKey = ContinuationKey_
        elif nodeName_ == 'Error':
            obj_ = ErrorStructure.factory()
            obj_.build(child_)
            self.Error = obj_
            obj_.original_tagname_ = 'Error'
# end class TrackResponse


class AccountStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, CountryCode=None):
        self.original_tagname_ = None
        self.Number = Number
        self.validate_NumberType(self.Number)
        self.CountryCode = CountryCode
        self.validate_CountryCodeType(self.CountryCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountStructure.subclass:
            return AccountStructure.subclass(*args_, **kwargs_)
        else:
            return AccountStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def validate_NumberType(self, value):
        # Validate type NumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NumberType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NumberType_patterns_, ))
    validate_NumberType_patterns_ = [['^[A-Za-z0-9]+$']]
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CountryCodeType_patterns_, ))
    validate_CountryCodeType_patterns_ = [['^[A-Z][A-Z][A-Z0-9]?$']]
    def hasContent_(self):
        if (
            self.Number is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AccountStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AccountStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
            # validate type NumberType
            self.validate_NumberType(self.Number)
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
            # validate type CountryCodeType
            self.validate_CountryCodeType(self.CountryCode)
# end class AccountStructure


class AddressStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, addressParty=None, Name=None, AddressLine=None, City=None, Province=None, Postcode=None, Country=None, PhoneNumber=None, ContactName=None, ContactPhoneNumber=None, AccountNumber=None, VATNumber=None):
        self.original_tagname_ = None
        self.addressParty = _cast(None, addressParty)
        self.Name = Name
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.City = City
        self.Province = Province
        self.Postcode = Postcode
        self.Country = Country
        self.PhoneNumber = PhoneNumber
        self.ContactName = ContactName
        self.ContactPhoneNumber = ContactPhoneNumber
        self.AccountNumber = AccountNumber
        self.VATNumber = VATNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressStructure.subclass:
            return AddressStructure.subclass(*args_, **kwargs_)
        else:
            return AddressStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value): self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value): self.AddressLine[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_Province(self): return self.Province
    def set_Province(self, Province): self.Province = Province
    def get_Postcode(self): return self.Postcode
    def set_Postcode(self, Postcode): self.Postcode = Postcode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_ContactPhoneNumber(self): return self.ContactPhoneNumber
    def set_ContactPhoneNumber(self, ContactPhoneNumber): self.ContactPhoneNumber = ContactPhoneNumber
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_VATNumber(self): return self.VATNumber
    def set_VATNumber(self, VATNumber): self.VATNumber = VATNumber
    def get_addressParty(self): return self.addressParty
    def set_addressParty(self, addressParty): self.addressParty = addressParty
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AddressLine or
            self.City is not None or
            self.Province is not None or
            self.Postcode is not None or
            self.Country is not None or
            self.PhoneNumber is not None or
            self.ContactName is not None or
            self.ContactPhoneNumber is not None or
            self.AccountNumber is not None or
            self.VATNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressStructure'):
        if self.addressParty is not None and 'addressParty' not in already_processed:
            already_processed.add('addressParty')
            outfile.write(' addressParty=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.addressParty), input_name='addressParty')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AddressStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine>%s</AddressLine>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.Province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Province>%s</Province>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Province), input_name='Province')), eol_))
        if self.Postcode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Postcode>%s</Postcode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Postcode), input_name='Postcode')), eol_))
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContactName>%s</ContactName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), eol_))
        if self.ContactPhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContactPhoneNumber>%s</ContactPhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContactPhoneNumber), input_name='ContactPhoneNumber')), eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountNumber>%s</AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.VATNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<VATNumber>%s</VATNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VATNumber), input_name='VATNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('addressParty', node)
        if value is not None and 'addressParty' not in already_processed:
            already_processed.add('addressParty')
            self.addressParty = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'Province':
            Province_ = child_.text
            Province_ = self.gds_validate_string(Province_, node, 'Province')
            self.Province = Province_
        elif nodeName_ == 'Postcode':
            Postcode_ = child_.text
            Postcode_ = self.gds_validate_string(Postcode_, node, 'Postcode')
            self.Postcode = Postcode_
        elif nodeName_ == 'Country':
            obj_ = CountryStructure.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'ContactPhoneNumber':
            ContactPhoneNumber_ = child_.text
            ContactPhoneNumber_ = self.gds_validate_string(ContactPhoneNumber_, node, 'ContactPhoneNumber')
            self.ContactPhoneNumber = ContactPhoneNumber_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'VATNumber':
            VATNumber_ = child_.text
            VATNumber_ = self.gds_validate_string(VATNumber_, node, 'VATNumber')
            self.VATNumber = VATNumber_
# end class AddressStructure


class AccountNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountNumber)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountNumber.subclass:
            return AccountNumber.subclass(*args_, **kwargs_)
        else:
            return AccountNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AccountNumber', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountNumber')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AccountNumber', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountNumber', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AccountNumber


class CountryStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, CountryName=None):
        self.original_tagname_ = None
        self.CountryCode = CountryCode
        self.validate_CountryCodeType(self.CountryCode)
        self.CountryName = CountryName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryStructure.subclass:
            return CountryStructure.subclass(*args_, **kwargs_)
        else:
            return CountryStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_CountryName(self): return self.CountryName
    def set_CountryName(self, CountryName): self.CountryName = CountryName
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCodeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CountryCodeType_patterns_, ))
    validate_CountryCodeType_patterns_ = [['^[A-Z][A-Z][A-Z0-9]?$']]
    def hasContent_(self):
        if (
            self.CountryCode is not None or
            self.CountryName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CountryStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CountryStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CountryStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CountryStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CountryStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.CountryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryName>%s</CountryName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
            # validate type CountryCodeType
            self.validate_CountryCodeType(self.CountryCode)
        elif nodeName_ == 'CountryName':
            CountryName_ = child_.text
            CountryName_ = self.gds_validate_string(CountryName_, node, 'CountryName')
            self.CountryName = CountryName_
# end class CountryStructure


class DateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, format='YYYYMMDD', valueOf_=None):
        self.original_tagname_ = None
        self.format = _cast(None, format)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType.subclass:
            return DateType.subclass(*args_, **kwargs_)
        else:
            return DateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType'):
        if self.format != "YYYYMMDD" and 'format' not in already_processed:
            already_processed.add('format')
            outfile.write(' format=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.format), input_name='format')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('format', node)
        if value is not None and 'format' not in already_processed:
            already_processed.add('format')
            self.format = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DateType


class ErrorStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Message=None):
        self.original_tagname_ = None
        if Code is None:
            self.Code = []
        else:
            self.Code = Code
        if Message is None:
            self.Message = []
        else:
            self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ErrorStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ErrorStructure.subclass:
            return ErrorStructure.subclass(*args_, **kwargs_)
        else:
            return ErrorStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def add_Code(self, value): self.Code.append(value)
    def insert_Code_at(self, index, value): self.Code.insert(index, value)
    def replace_Code_at(self, index, value): self.Code[index] = value
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def add_Message(self, value): self.Message.append(value)
    def insert_Message_at(self, index, value): self.Message.insert(index, value)
    def replace_Message_at(self, index, value): self.Message[index] = value
    def hasContent_(self):
        if (
            self.Code or
            self.Message
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ErrorStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ErrorStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ErrorStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ErrorStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ErrorStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ErrorStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Code_ in self.Code:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_format_integer(Code_, input_name='Code'), eol_))
        for Message_ in self.Message:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Message>%s</Message>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Message_), input_name='Message')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Code')
            self.Code.append(ival_)
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message.append(Message_)
# end class ErrorStructure


class PackageSummaryStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfPieces=None, Weight=None, PackageDescription=None, GoodsDescription=None, InvoiceAmount=None):
        self.original_tagname_ = None
        self.NumberOfPieces = NumberOfPieces
        self.Weight = Weight
        self.PackageDescription = PackageDescription
        self.GoodsDescription = GoodsDescription
        self.InvoiceAmount = InvoiceAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageSummaryStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageSummaryStructure.subclass:
            return PackageSummaryStructure.subclass(*args_, **kwargs_)
        else:
            return PackageSummaryStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfPieces(self): return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces): self.NumberOfPieces = NumberOfPieces
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_PackageDescription(self): return self.PackageDescription
    def set_PackageDescription(self, PackageDescription): self.PackageDescription = PackageDescription
    def get_GoodsDescription(self): return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription): self.GoodsDescription = GoodsDescription
    def get_InvoiceAmount(self): return self.InvoiceAmount
    def set_InvoiceAmount(self, InvoiceAmount): self.InvoiceAmount = InvoiceAmount
    def hasContent_(self):
        if (
            self.NumberOfPieces is not None or
            self.Weight is not None or
            self.PackageDescription is not None or
            self.GoodsDescription is not None or
            self.InvoiceAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackageSummaryStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageSummaryStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageSummaryStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackageSummaryStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackageSummaryStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackageSummaryStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfPieces is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NumberOfPieces>%s</NumberOfPieces>%s' % (self.gds_format_integer(self.NumberOfPieces, input_name='NumberOfPieces'), eol_))
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.PackageDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackageDescription>%s</PackageDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageDescription), input_name='PackageDescription')), eol_))
        if self.GoodsDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GoodsDescription>%s</GoodsDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GoodsDescription), input_name='GoodsDescription')), eol_))
        if self.InvoiceAmount is not None:
            self.InvoiceAmount.export(outfile, level, namespace_, name_='InvoiceAmount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPieces')
            self.NumberOfPieces = ival_
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'PackageDescription':
            PackageDescription_ = child_.text
            PackageDescription_ = self.gds_validate_string(PackageDescription_, node, 'PackageDescription')
            self.PackageDescription = PackageDescription_
        elif nodeName_ == 'GoodsDescription':
            GoodsDescription_ = child_.text
            GoodsDescription_ = self.gds_validate_string(GoodsDescription_, node, 'GoodsDescription')
            self.GoodsDescription = GoodsDescription_
        elif nodeName_ == 'InvoiceAmount':
            obj_ = InvoiceAmountType.factory()
            obj_.build(child_)
            self.InvoiceAmount = obj_
            obj_.original_tagname_ = 'InvoiceAmount'
# end class PackageSummaryStructure


class ShipmentSummaryStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TermsOfPayment=None, DueDate=None, Service=None):
        self.original_tagname_ = None
        self.TermsOfPayment = TermsOfPayment
        self.validate_TermsOfPaymentType(self.TermsOfPayment)
        self.DueDate = DueDate
        self.Service = Service
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSummaryStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSummaryStructure.subclass:
            return ShipmentSummaryStructure.subclass(*args_, **kwargs_)
        else:
            return ShipmentSummaryStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TermsOfPayment(self): return self.TermsOfPayment
    def set_TermsOfPayment(self, TermsOfPayment): self.TermsOfPayment = TermsOfPayment
    def get_DueDate(self): return self.DueDate
    def set_DueDate(self, DueDate): self.DueDate = DueDate
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def validate_TermsOfPaymentType(self, value):
        # Validate type TermsOfPaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Sender', 'Receiver']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TermsOfPaymentType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TermsOfPayment is not None or
            self.DueDate is not None or
            self.Service is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentSummaryStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSummaryStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentSummaryStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentSummaryStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentSummaryStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentSummaryStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TermsOfPayment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TermsOfPayment>%s</TermsOfPayment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfPayment), input_name='TermsOfPayment')), eol_))
        if self.DueDate is not None:
            self.DueDate.export(outfile, level, namespace_, name_='DueDate', pretty_print=pretty_print)
        if self.Service is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Service>%s</Service>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TermsOfPayment':
            TermsOfPayment_ = child_.text
            TermsOfPayment_ = self.gds_validate_string(TermsOfPayment_, node, 'TermsOfPayment')
            self.TermsOfPayment = TermsOfPayment_
            # validate type TermsOfPaymentType
            self.validate_TermsOfPaymentType(self.TermsOfPayment)
        elif nodeName_ == 'DueDate':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.DueDate = obj_
            obj_.original_tagname_ = 'DueDate'
        elif nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
# end class ShipmentSummaryStructure


class StatusStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, StatusDescription=None, LocalEventDate=None, LocalEventTime=None, Depot=None, DepotName=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.StatusDescription = StatusDescription
        self.LocalEventDate = LocalEventDate
        self.LocalEventTime = LocalEventTime
        self.Depot = Depot
        self.DepotName = DepotName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusStructure.subclass:
            return StatusStructure.subclass(*args_, **kwargs_)
        else:
            return StatusStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_StatusDescription(self): return self.StatusDescription
    def set_StatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def get_LocalEventDate(self): return self.LocalEventDate
    def set_LocalEventDate(self, LocalEventDate): self.LocalEventDate = LocalEventDate
    def get_LocalEventTime(self): return self.LocalEventTime
    def set_LocalEventTime(self, LocalEventTime): self.LocalEventTime = LocalEventTime
    def get_Depot(self): return self.Depot
    def set_Depot(self, Depot): self.Depot = Depot
    def get_DepotName(self): return self.DepotName
    def set_DepotName(self, DepotName): self.DepotName = DepotName
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.StatusDescription is not None or
            self.LocalEventDate is not None or
            self.LocalEventTime is not None or
            self.Depot is not None or
            self.DepotName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StatusStructure', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatusStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StatusStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StatusStructure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StatusStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StatusCode>%s</StatusCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), eol_))
        if self.StatusDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StatusDescription>%s</StatusDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), eol_))
        if self.LocalEventDate is not None:
            self.LocalEventDate.export(outfile, level, namespace_, name_='LocalEventDate', pretty_print=pretty_print)
        if self.LocalEventTime is not None:
            self.LocalEventTime.export(outfile, level, namespace_, name_='LocalEventTime', pretty_print=pretty_print)
        if self.Depot is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Depot>%s</Depot>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Depot), input_name='Depot')), eol_))
        if self.DepotName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DepotName>%s</DepotName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DepotName), input_name='DepotName')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'StatusDescription':
            StatusDescription_ = child_.text
            StatusDescription_ = self.gds_validate_string(StatusDescription_, node, 'StatusDescription')
            self.StatusDescription = StatusDescription_
        elif nodeName_ == 'LocalEventDate':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.LocalEventDate = obj_
            obj_.original_tagname_ = 'LocalEventDate'
        elif nodeName_ == 'LocalEventTime':
            obj_ = TimeType.factory()
            obj_.build(child_)
            self.LocalEventTime = obj_
            obj_.original_tagname_ = 'LocalEventTime'
        elif nodeName_ == 'Depot':
            Depot_ = child_.text
            Depot_ = self.gds_validate_string(Depot_, node, 'Depot')
            self.Depot = Depot_
        elif nodeName_ == 'DepotName':
            DepotName_ = child_.text
            DepotName_ = self.gds_validate_string(DepotName_, node, 'DepotName')
            self.DepotName = DepotName_
# end class StatusStructure


class TimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, format='HHMM', valueOf_=None):
        self.original_tagname_ = None
        self.format = _cast(None, format)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeType.subclass:
            return TimeType.subclass(*args_, **kwargs_)
        else:
            return TimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TimeType'):
        if self.format != "HHMM" and 'format' not in already_processed:
            already_processed.add('format')
            outfile.write(' format=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.format), input_name='format')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('format', node)
        if value is not None and 'format' not in already_processed:
            already_processed.add('format')
            self.format = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TimeType


class ConsignmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, access=None, ConsignmentNumber=None, AlternativeConsignmentNumber=None, OriginDepot=None, OriginDepotName=None, CustomerReference=None, CollectionDate=None, DeliveryTown=None, DeliveryDate=None, DeliveryTime=None, Signatory=None, SummaryCode=None, DestinationCountry=None, OriginCountry=None, TermsOfPaymentAccount=None, SenderAccount=None, PieceQuantity=None, StatusData=None, PackageSummary=None, ShipmentSummary=None, Addresses=None, POD=None):
        self.original_tagname_ = None
        self.access = _cast(None, access)
        self.ConsignmentNumber = ConsignmentNumber
        self.AlternativeConsignmentNumber = AlternativeConsignmentNumber
        self.OriginDepot = OriginDepot
        self.OriginDepotName = OriginDepotName
        self.CustomerReference = CustomerReference
        self.CollectionDate = CollectionDate
        self.DeliveryTown = DeliveryTown
        self.DeliveryDate = DeliveryDate
        self.DeliveryTime = DeliveryTime
        self.Signatory = Signatory
        self.SummaryCode = SummaryCode
        self.validate_SummaryCodeType(self.SummaryCode)
        self.DestinationCountry = DestinationCountry
        self.OriginCountry = OriginCountry
        self.TermsOfPaymentAccount = TermsOfPaymentAccount
        self.SenderAccount = SenderAccount
        self.PieceQuantity = PieceQuantity
        if StatusData is None:
            self.StatusData = []
        else:
            self.StatusData = StatusData
        self.PackageSummary = PackageSummary
        self.ShipmentSummary = ShipmentSummary
        self.Addresses = Addresses
        self.POD = POD
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsignmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsignmentType.subclass:
            return ConsignmentType.subclass(*args_, **kwargs_)
        else:
            return ConsignmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ConsignmentNumber(self): return self.ConsignmentNumber
    def set_ConsignmentNumber(self, ConsignmentNumber): self.ConsignmentNumber = ConsignmentNumber
    def get_AlternativeConsignmentNumber(self): return self.AlternativeConsignmentNumber
    def set_AlternativeConsignmentNumber(self, AlternativeConsignmentNumber): self.AlternativeConsignmentNumber = AlternativeConsignmentNumber
    def get_OriginDepot(self): return self.OriginDepot
    def set_OriginDepot(self, OriginDepot): self.OriginDepot = OriginDepot
    def get_OriginDepotName(self): return self.OriginDepotName
    def set_OriginDepotName(self, OriginDepotName): self.OriginDepotName = OriginDepotName
    def get_CustomerReference(self): return self.CustomerReference
    def set_CustomerReference(self, CustomerReference): self.CustomerReference = CustomerReference
    def get_CollectionDate(self): return self.CollectionDate
    def set_CollectionDate(self, CollectionDate): self.CollectionDate = CollectionDate
    def get_DeliveryTown(self): return self.DeliveryTown
    def set_DeliveryTown(self, DeliveryTown): self.DeliveryTown = DeliveryTown
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_DeliveryTime(self): return self.DeliveryTime
    def set_DeliveryTime(self, DeliveryTime): self.DeliveryTime = DeliveryTime
    def get_Signatory(self): return self.Signatory
    def set_Signatory(self, Signatory): self.Signatory = Signatory
    def get_SummaryCode(self): return self.SummaryCode
    def set_SummaryCode(self, SummaryCode): self.SummaryCode = SummaryCode
    def get_DestinationCountry(self): return self.DestinationCountry
    def set_DestinationCountry(self, DestinationCountry): self.DestinationCountry = DestinationCountry
    def get_OriginCountry(self): return self.OriginCountry
    def set_OriginCountry(self, OriginCountry): self.OriginCountry = OriginCountry
    def get_TermsOfPaymentAccount(self): return self.TermsOfPaymentAccount
    def set_TermsOfPaymentAccount(self, TermsOfPaymentAccount): self.TermsOfPaymentAccount = TermsOfPaymentAccount
    def get_SenderAccount(self): return self.SenderAccount
    def set_SenderAccount(self, SenderAccount): self.SenderAccount = SenderAccount
    def get_PieceQuantity(self): return self.PieceQuantity
    def set_PieceQuantity(self, PieceQuantity): self.PieceQuantity = PieceQuantity
    def get_StatusData(self): return self.StatusData
    def set_StatusData(self, StatusData): self.StatusData = StatusData
    def add_StatusData(self, value): self.StatusData.append(value)
    def insert_StatusData_at(self, index, value): self.StatusData.insert(index, value)
    def replace_StatusData_at(self, index, value): self.StatusData[index] = value
    def get_PackageSummary(self): return self.PackageSummary
    def set_PackageSummary(self, PackageSummary): self.PackageSummary = PackageSummary
    def get_ShipmentSummary(self): return self.ShipmentSummary
    def set_ShipmentSummary(self, ShipmentSummary): self.ShipmentSummary = ShipmentSummary
    def get_Addresses(self): return self.Addresses
    def set_Addresses(self, Addresses): self.Addresses = Addresses
    def get_POD(self): return self.POD
    def set_POD(self, POD): self.POD = POD
    def get_access(self): return self.access
    def set_access(self, access): self.access = access
    def validate_SummaryCodeType(self, value):
        # Validate type SummaryCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['EXC', 'INT', 'DEL', 'CNF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SummaryCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ConsignmentNumber is not None or
            self.AlternativeConsignmentNumber is not None or
            self.OriginDepot is not None or
            self.OriginDepotName is not None or
            self.CustomerReference is not None or
            self.CollectionDate is not None or
            self.DeliveryTown is not None or
            self.DeliveryDate is not None or
            self.DeliveryTime is not None or
            self.Signatory is not None or
            self.SummaryCode is not None or
            self.DestinationCountry is not None or
            self.OriginCountry is not None or
            self.TermsOfPaymentAccount is not None or
            self.SenderAccount is not None or
            self.PieceQuantity is not None or
            self.StatusData or
            self.PackageSummary is not None or
            self.ShipmentSummary is not None or
            self.Addresses is not None or
            self.POD is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ConsignmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsignmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConsignmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ConsignmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ConsignmentType'):
        if self.access is not None and 'access' not in already_processed:
            already_processed.add('access')
            outfile.write(' access=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.access), input_name='access')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ConsignmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ConsignmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ConsignmentNumber>%s</ConsignmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConsignmentNumber), input_name='ConsignmentNumber')), eol_))
        if self.AlternativeConsignmentNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AlternativeConsignmentNumber>%s</AlternativeConsignmentNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AlternativeConsignmentNumber), input_name='AlternativeConsignmentNumber')), eol_))
        if self.OriginDepot is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OriginDepot>%s</OriginDepot>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginDepot), input_name='OriginDepot')), eol_))
        if self.OriginDepotName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OriginDepotName>%s</OriginDepotName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginDepotName), input_name='OriginDepotName')), eol_))
        if self.CustomerReference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CustomerReference>%s</CustomerReference>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), eol_))
        if self.CollectionDate is not None:
            self.CollectionDate.export(outfile, level, namespace_, name_='CollectionDate', pretty_print=pretty_print)
        if self.DeliveryTown is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DeliveryTown>%s</DeliveryTown>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTown), input_name='DeliveryTown')), eol_))
        if self.DeliveryDate is not None:
            self.DeliveryDate.export(outfile, level, namespace_, name_='DeliveryDate', pretty_print=pretty_print)
        if self.DeliveryTime is not None:
            self.DeliveryTime.export(outfile, level, namespace_, name_='DeliveryTime', pretty_print=pretty_print)
        if self.Signatory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Signatory>%s</Signatory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Signatory), input_name='Signatory')), eol_))
        if self.SummaryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SummaryCode>%s</SummaryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SummaryCode), input_name='SummaryCode')), eol_))
        if self.DestinationCountry is not None:
            self.DestinationCountry.export(outfile, level, namespace_, name_='DestinationCountry', pretty_print=pretty_print)
        if self.OriginCountry is not None:
            self.OriginCountry.export(outfile, level, namespace_, name_='OriginCountry', pretty_print=pretty_print)
        if self.TermsOfPaymentAccount is not None:
            self.TermsOfPaymentAccount.export(outfile, level, namespace_, name_='TermsOfPaymentAccount', pretty_print=pretty_print)
        if self.SenderAccount is not None:
            self.SenderAccount.export(outfile, level, namespace_, name_='SenderAccount', pretty_print=pretty_print)
        if self.PieceQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PieceQuantity>%s</PieceQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PieceQuantity), input_name='PieceQuantity')), eol_))
        for StatusData_ in self.StatusData:
            StatusData_.export(outfile, level, namespace_, name_='StatusData', pretty_print=pretty_print)
        if self.PackageSummary is not None:
            self.PackageSummary.export(outfile, level, namespace_, name_='PackageSummary', pretty_print=pretty_print)
        if self.ShipmentSummary is not None:
            self.ShipmentSummary.export(outfile, level, namespace_, name_='ShipmentSummary', pretty_print=pretty_print)
        if self.Addresses is not None:
            self.Addresses.export(outfile, level, namespace_, name_='Addresses', pretty_print=pretty_print)
        if self.POD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<POD>%s</POD>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.POD), input_name='POD')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('access', node)
        if value is not None and 'access' not in already_processed:
            already_processed.add('access')
            self.access = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ConsignmentNumber':
            ConsignmentNumber_ = child_.text
            ConsignmentNumber_ = self.gds_validate_string(ConsignmentNumber_, node, 'ConsignmentNumber')
            self.ConsignmentNumber = ConsignmentNumber_
        elif nodeName_ == 'AlternativeConsignmentNumber':
            AlternativeConsignmentNumber_ = child_.text
            AlternativeConsignmentNumber_ = self.gds_validate_string(AlternativeConsignmentNumber_, node, 'AlternativeConsignmentNumber')
            self.AlternativeConsignmentNumber = AlternativeConsignmentNumber_
        elif nodeName_ == 'OriginDepot':
            OriginDepot_ = child_.text
            OriginDepot_ = self.gds_validate_string(OriginDepot_, node, 'OriginDepot')
            self.OriginDepot = OriginDepot_
        elif nodeName_ == 'OriginDepotName':
            OriginDepotName_ = child_.text
            OriginDepotName_ = self.gds_validate_string(OriginDepotName_, node, 'OriginDepotName')
            self.OriginDepotName = OriginDepotName_
        elif nodeName_ == 'CustomerReference':
            CustomerReference_ = child_.text
            CustomerReference_ = self.gds_validate_string(CustomerReference_, node, 'CustomerReference')
            self.CustomerReference = CustomerReference_
        elif nodeName_ == 'CollectionDate':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.CollectionDate = obj_
            obj_.original_tagname_ = 'CollectionDate'
        elif nodeName_ == 'DeliveryTown':
            DeliveryTown_ = child_.text
            DeliveryTown_ = self.gds_validate_string(DeliveryTown_, node, 'DeliveryTown')
            self.DeliveryTown = DeliveryTown_
        elif nodeName_ == 'DeliveryDate':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.DeliveryDate = obj_
            obj_.original_tagname_ = 'DeliveryDate'
        elif nodeName_ == 'DeliveryTime':
            obj_ = TimeType.factory()
            obj_.build(child_)
            self.DeliveryTime = obj_
            obj_.original_tagname_ = 'DeliveryTime'
        elif nodeName_ == 'Signatory':
            Signatory_ = child_.text
            Signatory_ = self.gds_validate_string(Signatory_, node, 'Signatory')
            self.Signatory = Signatory_
        elif nodeName_ == 'SummaryCode':
            SummaryCode_ = child_.text
            SummaryCode_ = self.gds_validate_string(SummaryCode_, node, 'SummaryCode')
            self.SummaryCode = SummaryCode_
            # validate type SummaryCodeType
            self.validate_SummaryCodeType(self.SummaryCode)
        elif nodeName_ == 'DestinationCountry':
            obj_ = CountryStructure.factory()
            obj_.build(child_)
            self.DestinationCountry = obj_
            obj_.original_tagname_ = 'DestinationCountry'
        elif nodeName_ == 'OriginCountry':
            obj_ = CountryStructure.factory()
            obj_.build(child_)
            self.OriginCountry = obj_
            obj_.original_tagname_ = 'OriginCountry'
        elif nodeName_ == 'TermsOfPaymentAccount':
            obj_ = AccountStructure.factory()
            obj_.build(child_)
            self.TermsOfPaymentAccount = obj_
            obj_.original_tagname_ = 'TermsOfPaymentAccount'
        elif nodeName_ == 'SenderAccount':
            obj_ = AccountStructure.factory()
            obj_.build(child_)
            self.SenderAccount = obj_
            obj_.original_tagname_ = 'SenderAccount'
        elif nodeName_ == 'PieceQuantity':
            PieceQuantity_ = child_.text
            PieceQuantity_ = self.gds_validate_string(PieceQuantity_, node, 'PieceQuantity')
            self.PieceQuantity = PieceQuantity_
        elif nodeName_ == 'StatusData':
            obj_ = StatusStructure.factory()
            obj_.build(child_)
            self.StatusData.append(obj_)
            obj_.original_tagname_ = 'StatusData'
        elif nodeName_ == 'PackageSummary':
            obj_ = PackageSummaryStructure.factory()
            obj_.build(child_)
            self.PackageSummary = obj_
            obj_.original_tagname_ = 'PackageSummary'
        elif nodeName_ == 'ShipmentSummary':
            obj_ = ShipmentSummaryStructure.factory()
            obj_.build(child_)
            self.ShipmentSummary = obj_
            obj_.original_tagname_ = 'ShipmentSummary'
        elif nodeName_ == 'Addresses':
            obj_ = AddressesType.factory()
            obj_.build(child_)
            self.Addresses = obj_
            obj_.original_tagname_ = 'Addresses'
        elif nodeName_ == 'POD':
            POD_ = child_.text
            POD_ = self.gds_validate_string(POD_, node, 'POD')
            self.POD = POD_
# end class ConsignmentType


class PieceQuantity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PieceQuantity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PieceQuantity.subclass:
            return PieceQuantity.subclass(*args_, **kwargs_)
        else:
            return PieceQuantity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PieceQuantity', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PieceQuantity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PieceQuantity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PieceQuantity', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PieceQuantity'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PieceQuantity', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PieceQuantity


class AddressesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None):
        self.original_tagname_ = None
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressesType.subclass:
            return AddressesType.subclass(*args_, **kwargs_)
        else:
            return AddressesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def hasContent_(self):
        if (
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = AddressStructure.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class AddressesType


class WeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, units='kgs', valueOf_=None):
        self.original_tagname_ = None
        self.units = _cast(None, units)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightType.subclass:
            return WeightType.subclass(*args_, **kwargs_)
        else:
            return WeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='WeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='WeightType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='WeightType'):
        if self.units != "kgs" and 'units' not in already_processed:
            already_processed.add('units')
            outfile.write(' units=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.units), input_name='units')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='WeightType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('units', node)
        if value is not None and 'units' not in already_processed:
            already_processed.add('units')
            self.units = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class WeightType


class InvoiceAmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, currency=None, valueOf_=None):
        self.original_tagname_ = None
        self.currency = _cast(None, currency)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvoiceAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvoiceAmountType.subclass:
            return InvoiceAmountType.subclass(*args_, **kwargs_)
        else:
            return InvoiceAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InvoiceAmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvoiceAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InvoiceAmountType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InvoiceAmountType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InvoiceAmountType'):
        if self.currency is not None and 'currency' not in already_processed:
            already_processed.add('currency')
            outfile.write(' currency=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.currency), input_name='currency')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='InvoiceAmountType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('currency', node)
        if value is not None and 'currency' not in already_processed:
            already_processed.add('currency')
            self.currency = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class InvoiceAmountType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TrackResponse'
        rootClass = TrackResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from trackresponse_v3.1 import *\n\n')
        sys.stdout.write('import trackresponse_v3.1 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AccountStructure",
    "AddressStructure",
    "AddressesType",
    "ConsignmentType",
    "CountryStructure",
    "DateType",
    "ErrorStructure",
    "InvoiceAmountType",
    "PackageSummaryStructure",
    "ShipmentSummaryStructure",
    "StatusStructure",
    "TimeType",
    "TrackResponse",
    "WeightType"
]
