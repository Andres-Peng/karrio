(self["webpackChunkpurplship_webapp"] = self["webpackChunkpurplship_webapp"] || []).push([["rest"],{

/***/ "./api/apis/APIApi.ts":
/*!****************************!*\
  !*** ./api/apis/APIApi.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.APIApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class APIApi extends runtime.BaseAPI {
    /**
     * Authenticate the user and return a token pair
     * Obtain auth token pair
     */
    authenticateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling authenticate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/api/token`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.TokenObtainPairToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TokenPairFromJSON(jsonValue));
        });
    }
    /**
     * Authenticate the user and return a token pair
     * Obtain auth token pair
     */
    authenticate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authenticateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Data References
     */
    dataRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/references`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ReferencesFromJSON(jsonValue));
        });
    }
    /**
     * Data References
     */
    data() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.dataRaw();
            return yield response.value();
        });
    }
    /**
     * Authenticate the user and return a token pair
     * Refresh auth token
     */
    refreshTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling refreshToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/api/token/refresh`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.TokenRefreshToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TokenPairFromJSON(jsonValue));
        });
    }
    /**
     * Authenticate the user and return a token pair
     * Refresh auth token
     */
    refreshToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.refreshTokenRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Verify an existent authentication token
     * Verify auth token
     */
    verifyTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling verifyToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/api/token/verify`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.TokenVerifyToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Verify an existent authentication token
     * Verify auth token
     */
    verifyToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.verifyTokenRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.APIApi = APIApi;


/***/ }),

/***/ "./api/apis/AddressesApi.ts":
/*!**********************************!*\
  !*** ./api/apis/AddressesApi.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddressesApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class AddressesApi extends runtime.BaseAPI {
    /**
     * Create a new address.
     * Create an address
     */
    createRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling create.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/addresses`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.AddressDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AddressFromJSON(jsonValue));
        });
    }
    /**
     * Create a new address.
     * Create an address
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Discard an address.
     * Discard an address
     */
    discardRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling discard.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * Discard an address.
     * Discard an address
     */
    discard(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.discardRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all addresses.
     * List all addresses
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/addresses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AddressListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all addresses.
     * List all addresses
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve an address.
     * Retrieve an address
     */
    retrieveRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AddressFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve an address.
     * Retrieve an address
     */
    retrieve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * update an address.
     * Update an address
     */
    updateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling update.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling update.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.AddressDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AddressFromJSON(jsonValue));
        });
    }
    /**
     * update an address.
     * Update an address
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.AddressesApi = AddressesApi;


/***/ }),

/***/ "./api/apis/CarriersApi.ts":
/*!*********************************!*\
  !*** ./api/apis/CarriersApi.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListCarrierNameEnum = exports.CarriersApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class CarriersApi extends runtime.BaseAPI {
    /**
     * Returns the list of configured carriers
     * List all carriers
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.carrierName !== undefined) {
                queryParameters['carrier_name'] = requestParameters.carrierName;
            }
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            if (requestParameters.active !== undefined) {
                queryParameters['active'] = requestParameters.active;
            }
            if (requestParameters.systemOnly !== undefined) {
                queryParameters['system_only'] = requestParameters.systemOnly;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/carriers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CarrierListFromJSON(jsonValue));
        });
    }
    /**
     * Returns the list of configured carriers
     * List all carriers
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.CarriersApi = CarriersApi;
/**
    * @export
    * @enum {string}
    */
var ListCarrierNameEnum;
(function (ListCarrierNameEnum) {
    ListCarrierNameEnum["Aramex"] = "aramex";
    ListCarrierNameEnum["Australiapost"] = "australiapost";
    ListCarrierNameEnum["Canadapost"] = "canadapost";
    ListCarrierNameEnum["Canpar"] = "canpar";
    ListCarrierNameEnum["DhlExpress"] = "dhl_express";
    ListCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    ListCarrierNameEnum["Dicom"] = "dicom";
    ListCarrierNameEnum["Eshipper"] = "eshipper";
    ListCarrierNameEnum["Fedex"] = "fedex";
    ListCarrierNameEnum["Freightcom"] = "freightcom";
    ListCarrierNameEnum["Purolator"] = "purolator";
    ListCarrierNameEnum["Royalmail"] = "royalmail";
    ListCarrierNameEnum["Sendle"] = "sendle";
    ListCarrierNameEnum["SfExpress"] = "sf_express";
    ListCarrierNameEnum["Tnt"] = "tnt";
    ListCarrierNameEnum["Ups"] = "ups";
    ListCarrierNameEnum["Usps"] = "usps";
    ListCarrierNameEnum["UspsInternational"] = "usps_international";
    ListCarrierNameEnum["Yanwen"] = "yanwen";
    ListCarrierNameEnum["Yunexpress"] = "yunexpress";
})(ListCarrierNameEnum = exports.ListCarrierNameEnum || (exports.ListCarrierNameEnum = {}));


/***/ }),

/***/ "./api/apis/CustomsApi.ts":
/*!********************************!*\
  !*** ./api/apis/CustomsApi.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomsApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class CustomsApi extends runtime.BaseAPI {
    /**
     * Add a customs commodity.
     * Add a commodity
     */
    addCommodityRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling addCommodity.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling addCommodity.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info/{id}/commodities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CommodityDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CustomsFromJSON(jsonValue));
        });
    }
    /**
     * Add a customs commodity.
     * Add a commodity
     */
    addCommodity(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addCommodityRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Create a new customs declaration.
     * Create a customs info
     */
    createRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling create.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CustomsDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CustomsFromJSON(jsonValue));
        });
    }
    /**
     * Create a new customs declaration.
     * Create a customs info
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Discard a customs declaration.
     * Discard a customs info
     */
    discardRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling discard.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * Discard a customs declaration.
     * Discard a customs info
     */
    discard(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.discardRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Discard a customs commodity.
     * Discard a commodity
     */
    discardCommodityRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ck === null || requestParameters.ck === undefined) {
                throw new runtime.RequiredError('ck', 'Required parameter requestParameters.ck was null or undefined when calling discardCommodity.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling discardCommodity.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info/{id}/commodities/{ck}`.replace(`{${"ck"}}`, encodeURIComponent(String(requestParameters.ck))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * Discard a customs commodity.
     * Discard a commodity
     */
    discardCommodity(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.discardCommodityRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all stored customs declarations.
     * List all customs info
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CustomsListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all stored customs declarations.
     * List all customs info
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve customs declaration.
     * Retrieve a customs info
     */
    retrieveRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CustomsFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve customs declaration.
     * Retrieve a customs info
     */
    retrieve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * modify an existing customs declaration.
     * Update a customs info
     */
    updateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling update.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling update.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/customs_info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CustomsDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CustomsFromJSON(jsonValue));
        });
    }
    /**
     * modify an existing customs declaration.
     * Update a customs info
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.CustomsApi = CustomsApi;


/***/ }),

/***/ "./api/apis/ParcelsApi.ts":
/*!********************************!*\
  !*** ./api/apis/ParcelsApi.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParcelsApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class ParcelsApi extends runtime.BaseAPI {
    /**
     * Create a new parcel.
     * Create a parcel
     */
    createRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling create.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/parcels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ParcelDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ParcelFromJSON(jsonValue));
        });
    }
    /**
     * Create a new parcel.
     * Create a parcel
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Remove a parcel.
     * Remove a parcel
     */
    discardRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling discard.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/parcels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * Remove a parcel.
     * Remove a parcel
     */
    discard(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.discardRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all stored parcels.
     * List all parcels
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/parcels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ParcelListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all stored parcels.
     * List all parcels
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve a parcel.
     * Retrieve a parcel
     */
    retrieveRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/parcels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ParcelFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a parcel.
     * Retrieve a parcel
     */
    retrieve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * modify an existing parcel\'s details.
     * Update a parcel
     */
    updateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling update.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling update.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/parcels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ParcelDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ParcelFromJSON(jsonValue));
        });
    }
    /**
     * modify an existing parcel\'s details.
     * Update a parcel
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.ParcelsApi = ParcelsApi;


/***/ }),

/***/ "./api/apis/PickupsApi.ts":
/*!********************************!*\
  !*** ./api/apis/PickupsApi.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupsApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class PickupsApi extends runtime.BaseAPI {
    /**
     * Cancel a pickup of one or more shipments.
     * Cancel a pickup
     */
    cancelRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancel.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling cancel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/pickups/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PickupCancelDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationConfirmationFromJSON(jsonValue));
        });
    }
    /**
     * Cancel a pickup of one or more shipments.
     * Cancel a pickup
     */
    cancel(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all scheduled pickups.
     * List shipment pickups
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.testMode !== undefined) {
                queryParameters['test_mode'] = requestParameters.testMode;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/pickups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PickupListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all scheduled pickups.
     * List shipment pickups
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve a scheduled pickup.
     * Retrieve a pickup
     */
    retrieveRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/pickups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PickupFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a scheduled pickup.
     * Retrieve a pickup
     */
    retrieve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Schedule a pickup for one or many shipments with labels already purchased.
     * Schedule a pickup
     */
    scheduleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling schedule.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling schedule.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/pickups/{carrier_name}/schedule`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PickupDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PickupFromJSON(jsonValue));
        });
    }
    /**
     * Schedule a pickup for one or many shipments with labels already purchased.
     * Schedule a pickup
     */
    schedule(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.scheduleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Modify a pickup for one or many shipments with labels already purchased.
     * Update a pickup
     */
    updateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling update.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling update.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/pickups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PickupUpdateDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationConfirmationFromJSON(jsonValue));
        });
    }
    /**
     * Modify a pickup for one or many shipments with labels already purchased.
     * Update a pickup
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.PickupsApi = PickupsApi;


/***/ }),

/***/ "./api/apis/ProxyApi.ts":
/*!******************************!*\
  !*** ./api/apis/ProxyApi.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VoidLabelCarrierNameEnum = exports.UpdatePickupCarrierNameEnum = exports.TrackShipmentCarrierNameEnum = exports.SchedulePickupCarrierNameEnum = exports.CancelPickupCarrierNameEnum = exports.ProxyApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class ProxyApi extends runtime.BaseAPI {
    /**
     * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
     * Buy a shipment label
     */
    buyLabelRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling buyLabel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/shipping`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ShippingRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
     * Buy a shipment label
     */
    buyLabel(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buyLabelRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Cancel a pickup previously scheduled
     * Cancel a pickup
     */
    cancelPickupRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling cancelPickup.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling cancelPickup.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/pickups/{carrier_name}/cancel`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PickupCancelRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationResponseFromJSON(jsonValue));
        });
    }
    /**
     * Cancel a pickup previously scheduled
     * Cancel a pickup
     */
    cancelPickup(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelPickupRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available.
     * Fetch shipment rates
     */
    fetchRatesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling fetchRates.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/rates`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.RateRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RateResponseFromJSON(jsonValue));
        });
    }
    /**
     *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available.
     * Fetch shipment rates
     */
    fetchRates(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.fetchRatesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Schedule one or many parcels pickup
     * Schedule a pickup
     */
    schedulePickupRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling schedulePickup.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling schedulePickup.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/pickups/{carrier_name}`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PickupRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PickupResponseFromJSON(jsonValue));
        });
    }
    /**
     * Schedule one or many parcels pickup
     * Schedule a pickup
     */
    schedulePickup(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.schedulePickupRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * Track a shipment
     */
    trackShipmentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.trackingNumber === null || requestParameters.trackingNumber === undefined) {
                throw new runtime.RequiredError('trackingNumber', 'Required parameter requestParameters.trackingNumber was null or undefined when calling trackShipment.');
            }
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling trackShipment.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/tracking/{carrier_name}/{tracking_number}`.replace(`{${"tracking_number"}}`, encodeURIComponent(String(requestParameters.trackingNumber))).replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TrackingResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * Track a shipment
     */
    trackShipment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.trackShipmentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Modify a scheduled pickup
     * Update a pickup
     */
    updatePickupRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling updatePickup.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling updatePickup.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/pickups/{carrier_name}`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PickupUpdateRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PickupResponseFromJSON(jsonValue));
        });
    }
    /**
     * Modify a scheduled pickup
     * Update a pickup
     */
    updatePickup(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updatePickupRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Cancel a shipment and the label previously created
     * Void a shipment label
     */
    voidLabelRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling voidLabel.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling voidLabel.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/proxy/shipping/{carrier_name}/cancel`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ShipmentCancelRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationResponseFromJSON(jsonValue));
        });
    }
    /**
     * Cancel a shipment and the label previously created
     * Void a shipment label
     */
    voidLabel(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.voidLabelRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.ProxyApi = ProxyApi;
/**
    * @export
    * @enum {string}
    */
var CancelPickupCarrierNameEnum;
(function (CancelPickupCarrierNameEnum) {
    CancelPickupCarrierNameEnum["Aramex"] = "aramex";
    CancelPickupCarrierNameEnum["Australiapost"] = "australiapost";
    CancelPickupCarrierNameEnum["Canadapost"] = "canadapost";
    CancelPickupCarrierNameEnum["Canpar"] = "canpar";
    CancelPickupCarrierNameEnum["DhlExpress"] = "dhl_express";
    CancelPickupCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    CancelPickupCarrierNameEnum["Dicom"] = "dicom";
    CancelPickupCarrierNameEnum["Fedex"] = "fedex";
    CancelPickupCarrierNameEnum["Purolator"] = "purolator";
    CancelPickupCarrierNameEnum["Royalmail"] = "royalmail";
    CancelPickupCarrierNameEnum["Sendle"] = "sendle";
    CancelPickupCarrierNameEnum["SfExpress"] = "sf_express";
    CancelPickupCarrierNameEnum["Tnt"] = "tnt";
    CancelPickupCarrierNameEnum["Ups"] = "ups";
    CancelPickupCarrierNameEnum["Usps"] = "usps";
    CancelPickupCarrierNameEnum["UspsInternational"] = "usps_international";
    CancelPickupCarrierNameEnum["Yanwen"] = "yanwen";
    CancelPickupCarrierNameEnum["Yunexpress"] = "yunexpress";
    CancelPickupCarrierNameEnum["Eshipper"] = "eshipper";
    CancelPickupCarrierNameEnum["Freightcom"] = "freightcom";
})(CancelPickupCarrierNameEnum = exports.CancelPickupCarrierNameEnum || (exports.CancelPickupCarrierNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SchedulePickupCarrierNameEnum;
(function (SchedulePickupCarrierNameEnum) {
    SchedulePickupCarrierNameEnum["Aramex"] = "aramex";
    SchedulePickupCarrierNameEnum["Australiapost"] = "australiapost";
    SchedulePickupCarrierNameEnum["Canadapost"] = "canadapost";
    SchedulePickupCarrierNameEnum["Canpar"] = "canpar";
    SchedulePickupCarrierNameEnum["DhlExpress"] = "dhl_express";
    SchedulePickupCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    SchedulePickupCarrierNameEnum["Dicom"] = "dicom";
    SchedulePickupCarrierNameEnum["Fedex"] = "fedex";
    SchedulePickupCarrierNameEnum["Purolator"] = "purolator";
    SchedulePickupCarrierNameEnum["Royalmail"] = "royalmail";
    SchedulePickupCarrierNameEnum["Sendle"] = "sendle";
    SchedulePickupCarrierNameEnum["SfExpress"] = "sf_express";
    SchedulePickupCarrierNameEnum["Tnt"] = "tnt";
    SchedulePickupCarrierNameEnum["Ups"] = "ups";
    SchedulePickupCarrierNameEnum["Usps"] = "usps";
    SchedulePickupCarrierNameEnum["UspsInternational"] = "usps_international";
    SchedulePickupCarrierNameEnum["Yanwen"] = "yanwen";
    SchedulePickupCarrierNameEnum["Yunexpress"] = "yunexpress";
    SchedulePickupCarrierNameEnum["Eshipper"] = "eshipper";
    SchedulePickupCarrierNameEnum["Freightcom"] = "freightcom";
})(SchedulePickupCarrierNameEnum = exports.SchedulePickupCarrierNameEnum || (exports.SchedulePickupCarrierNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TrackShipmentCarrierNameEnum;
(function (TrackShipmentCarrierNameEnum) {
    TrackShipmentCarrierNameEnum["Aramex"] = "aramex";
    TrackShipmentCarrierNameEnum["Australiapost"] = "australiapost";
    TrackShipmentCarrierNameEnum["Canadapost"] = "canadapost";
    TrackShipmentCarrierNameEnum["Canpar"] = "canpar";
    TrackShipmentCarrierNameEnum["DhlExpress"] = "dhl_express";
    TrackShipmentCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    TrackShipmentCarrierNameEnum["Dicom"] = "dicom";
    TrackShipmentCarrierNameEnum["Fedex"] = "fedex";
    TrackShipmentCarrierNameEnum["Purolator"] = "purolator";
    TrackShipmentCarrierNameEnum["Royalmail"] = "royalmail";
    TrackShipmentCarrierNameEnum["Sendle"] = "sendle";
    TrackShipmentCarrierNameEnum["SfExpress"] = "sf_express";
    TrackShipmentCarrierNameEnum["Tnt"] = "tnt";
    TrackShipmentCarrierNameEnum["Ups"] = "ups";
    TrackShipmentCarrierNameEnum["Usps"] = "usps";
    TrackShipmentCarrierNameEnum["UspsInternational"] = "usps_international";
    TrackShipmentCarrierNameEnum["Yanwen"] = "yanwen";
    TrackShipmentCarrierNameEnum["Yunexpress"] = "yunexpress";
    TrackShipmentCarrierNameEnum["Eshipper"] = "eshipper";
    TrackShipmentCarrierNameEnum["Freightcom"] = "freightcom";
})(TrackShipmentCarrierNameEnum = exports.TrackShipmentCarrierNameEnum || (exports.TrackShipmentCarrierNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdatePickupCarrierNameEnum;
(function (UpdatePickupCarrierNameEnum) {
    UpdatePickupCarrierNameEnum["Aramex"] = "aramex";
    UpdatePickupCarrierNameEnum["Australiapost"] = "australiapost";
    UpdatePickupCarrierNameEnum["Canadapost"] = "canadapost";
    UpdatePickupCarrierNameEnum["Canpar"] = "canpar";
    UpdatePickupCarrierNameEnum["DhlExpress"] = "dhl_express";
    UpdatePickupCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    UpdatePickupCarrierNameEnum["Dicom"] = "dicom";
    UpdatePickupCarrierNameEnum["Fedex"] = "fedex";
    UpdatePickupCarrierNameEnum["Purolator"] = "purolator";
    UpdatePickupCarrierNameEnum["Royalmail"] = "royalmail";
    UpdatePickupCarrierNameEnum["Sendle"] = "sendle";
    UpdatePickupCarrierNameEnum["SfExpress"] = "sf_express";
    UpdatePickupCarrierNameEnum["Tnt"] = "tnt";
    UpdatePickupCarrierNameEnum["Ups"] = "ups";
    UpdatePickupCarrierNameEnum["Usps"] = "usps";
    UpdatePickupCarrierNameEnum["UspsInternational"] = "usps_international";
    UpdatePickupCarrierNameEnum["Yanwen"] = "yanwen";
    UpdatePickupCarrierNameEnum["Yunexpress"] = "yunexpress";
    UpdatePickupCarrierNameEnum["Eshipper"] = "eshipper";
    UpdatePickupCarrierNameEnum["Freightcom"] = "freightcom";
})(UpdatePickupCarrierNameEnum = exports.UpdatePickupCarrierNameEnum || (exports.UpdatePickupCarrierNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var VoidLabelCarrierNameEnum;
(function (VoidLabelCarrierNameEnum) {
    VoidLabelCarrierNameEnum["Aramex"] = "aramex";
    VoidLabelCarrierNameEnum["Australiapost"] = "australiapost";
    VoidLabelCarrierNameEnum["Canadapost"] = "canadapost";
    VoidLabelCarrierNameEnum["Canpar"] = "canpar";
    VoidLabelCarrierNameEnum["DhlExpress"] = "dhl_express";
    VoidLabelCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    VoidLabelCarrierNameEnum["Dicom"] = "dicom";
    VoidLabelCarrierNameEnum["Fedex"] = "fedex";
    VoidLabelCarrierNameEnum["Purolator"] = "purolator";
    VoidLabelCarrierNameEnum["Royalmail"] = "royalmail";
    VoidLabelCarrierNameEnum["Sendle"] = "sendle";
    VoidLabelCarrierNameEnum["SfExpress"] = "sf_express";
    VoidLabelCarrierNameEnum["Tnt"] = "tnt";
    VoidLabelCarrierNameEnum["Ups"] = "ups";
    VoidLabelCarrierNameEnum["Usps"] = "usps";
    VoidLabelCarrierNameEnum["UspsInternational"] = "usps_international";
    VoidLabelCarrierNameEnum["Yanwen"] = "yanwen";
    VoidLabelCarrierNameEnum["Yunexpress"] = "yunexpress";
    VoidLabelCarrierNameEnum["Eshipper"] = "eshipper";
    VoidLabelCarrierNameEnum["Freightcom"] = "freightcom";
})(VoidLabelCarrierNameEnum = exports.VoidLabelCarrierNameEnum || (exports.VoidLabelCarrierNameEnum = {}));


/***/ }),

/***/ "./api/apis/ShipmentsApi.ts":
/*!**********************************!*\
  !*** ./api/apis/ShipmentsApi.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListCarrierNameEnum = exports.ListStatusEnum = exports.ShipmentsApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class ShipmentsApi extends runtime.BaseAPI {
    /**
     * Add the customs declaration for the shipment if non existent.
     * Add a customs declaration
     */
    addCustomsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling addCustoms.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling addCustoms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}/customs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CustomsDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Add the customs declaration for the shipment if non existent.
     * Add a customs declaration
     */
    addCustoms(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addCustomsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Add a parcel to an existing shipment for a multi-parcel shipment.
     * Add a shipment parcel
     */
    addParcelRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling addParcel.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling addParcel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}/parcels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ParcelDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Add a parcel to an existing shipment for a multi-parcel shipment.
     * Add a shipment parcel
     */
    addParcel(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addParcelRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Void a shipment with the associated label.
     * Cancel a shipment
     */
    cancelRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationResponseFromJSON(jsonValue));
        });
    }
    /**
     * Void a shipment with the associated label.
     * Cancel a shipment
     */
    cancel(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Create a new shipment instance.
     * Create a shipment
     */
    createRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling create.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ShipmentDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Create a new shipment instance.
     * Create a shipment
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all shipments.
     * List all shipments
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.testMode !== undefined) {
                queryParameters['test_mode'] = requestParameters.testMode;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.createdStart !== undefined) {
                queryParameters['created_start'] = requestParameters.createdStart.toISOString().substr(0, 10);
            }
            if (requestParameters.createdEnd !== undefined) {
                queryParameters['created_end'] = requestParameters.createdEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.carrierId !== undefined) {
                queryParameters['carrier_id'] = requestParameters.carrierId;
            }
            if (requestParameters.service !== undefined) {
                queryParameters['service'] = requestParameters.service;
            }
            if (requestParameters.reference !== undefined) {
                queryParameters['reference'] = requestParameters.reference;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.carrierName !== undefined) {
                queryParameters['carrier_name'] = requestParameters.carrierName;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all shipments.
     * List all shipments
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Select your preferred rates to buy a shipment label.
     * Buy a shipment label
     */
    purchaseRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling purchase.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling purchase.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}/purchase`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ShipmentPurchaseDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Select your preferred rates to buy a shipment label.
     * Buy a shipment label
     */
    purchase(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.purchaseRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Refresh the list of the shipment rates
     * Fetch new shipment rates
     */
    ratesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rates.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling rates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}/rates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ShipmentRateDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Refresh the list of the shipment rates
     * Fetch new shipment rates
     */
    rates(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ratesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve a shipment.
     * Retrieve a shipment
     */
    retrieveRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a shipment.
     * Retrieve a shipment
     */
    retrieve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Add one or many options to your shipment.<br/> **eg:**<br/> - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  ```json {     \"insurance\": 120,     \"currency\": \"USD\" } ```  And many more, check additional options available in the [reference](#operation/all_references).
     * Add shipment options
     */
    setOptionsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling setOptions.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling setOptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/shipments/{id}/options`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.data,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ShipmentFromJSON(jsonValue));
        });
    }
    /**
     * Add one or many options to your shipment.<br/> **eg:**<br/> - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  ```json {     \"insurance\": 120,     \"currency\": \"USD\" } ```  And many more, check additional options available in the [reference](#operation/all_references).
     * Add shipment options
     */
    setOptions(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setOptionsRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.ShipmentsApi = ShipmentsApi;
/**
    * @export
    * @enum {string}
    */
var ListStatusEnum;
(function (ListStatusEnum) {
    ListStatusEnum["Created"] = "created";
    ListStatusEnum["Purchased"] = "purchased";
    ListStatusEnum["Cancelled"] = "cancelled";
    ListStatusEnum["Shipped"] = "shipped";
    ListStatusEnum["InTransit"] = "in-transit";
    ListStatusEnum["Delivered"] = "delivered";
})(ListStatusEnum = exports.ListStatusEnum || (exports.ListStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListCarrierNameEnum;
(function (ListCarrierNameEnum) {
    ListCarrierNameEnum["Aramex"] = "aramex";
    ListCarrierNameEnum["Australiapost"] = "australiapost";
    ListCarrierNameEnum["Canadapost"] = "canadapost";
    ListCarrierNameEnum["Canpar"] = "canpar";
    ListCarrierNameEnum["DhlExpress"] = "dhl_express";
    ListCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    ListCarrierNameEnum["Dicom"] = "dicom";
    ListCarrierNameEnum["Fedex"] = "fedex";
    ListCarrierNameEnum["Purolator"] = "purolator";
    ListCarrierNameEnum["Royalmail"] = "royalmail";
    ListCarrierNameEnum["Sendle"] = "sendle";
    ListCarrierNameEnum["SfExpress"] = "sf_express";
    ListCarrierNameEnum["Tnt"] = "tnt";
    ListCarrierNameEnum["Ups"] = "ups";
    ListCarrierNameEnum["Usps"] = "usps";
    ListCarrierNameEnum["UspsInternational"] = "usps_international";
    ListCarrierNameEnum["Yanwen"] = "yanwen";
    ListCarrierNameEnum["Yunexpress"] = "yunexpress";
    ListCarrierNameEnum["Eshipper"] = "eshipper";
    ListCarrierNameEnum["Freightcom"] = "freightcom";
})(ListCarrierNameEnum = exports.ListCarrierNameEnum || (exports.ListCarrierNameEnum = {}));


/***/ }),

/***/ "./api/apis/TrackersApi.ts":
/*!*********************************!*\
  !*** ./api/apis/TrackersApi.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListCarrierNameEnum = exports.ListStatusEnum = exports.CreateCarrierNameEnum = exports.TrackersApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class TrackersApi extends runtime.BaseAPI {
    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Create a shipment tracker
     */
    createRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.trackingNumber === null || requestParameters.trackingNumber === undefined) {
                throw new runtime.RequiredError('trackingNumber', 'Required parameter requestParameters.trackingNumber was null or undefined when calling create.');
            }
            if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
                throw new runtime.RequiredError('carrierName', 'Required parameter requestParameters.carrierName was null or undefined when calling create.');
            }
            const queryParameters = {};
            if (requestParameters.test !== undefined) {
                queryParameters['test'] = requestParameters.test;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/trackers/{carrier_name}/{tracking_number}`.replace(`{${"tracking_number"}}`, encodeURIComponent(String(requestParameters.trackingNumber))).replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TrackingStatusFromJSON(jsonValue));
        });
    }
    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Create a shipment tracker
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all shipment trackers.
     * List all shipment trackers
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.testMode !== undefined) {
                queryParameters['test_mode'] = requestParameters.testMode;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.carrierId !== undefined) {
                queryParameters['carrier_id'] = requestParameters.carrierId;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.carrierName !== undefined) {
                queryParameters['carrier_name'] = requestParameters.carrierName;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/trackers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TrackerListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all shipment trackers.
     * List all shipment trackers
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Discard a shipment tracker.
     * Discard a shipment tracker
     */
    removeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.idOrTrackingNumber === null || requestParameters.idOrTrackingNumber === undefined) {
                throw new runtime.RequiredError('idOrTrackingNumber', 'Required parameter requestParameters.idOrTrackingNumber was null or undefined when calling remove.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/trackers/{id_or_tracking_number}`.replace(`{${"id_or_tracking_number"}}`, encodeURIComponent(String(requestParameters.idOrTrackingNumber))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * Discard a shipment tracker.
     * Discard a shipment tracker
     */
    remove(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve a shipment tracker
     * Retrieves a shipment tracker
     */
    retrievesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.idOrTrackingNumber === null || requestParameters.idOrTrackingNumber === undefined) {
                throw new runtime.RequiredError('idOrTrackingNumber', 'Required parameter requestParameters.idOrTrackingNumber was null or undefined when calling retrieves.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/trackers/{id_or_tracking_number}`.replace(`{${"id_or_tracking_number"}}`, encodeURIComponent(String(requestParameters.idOrTrackingNumber))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TrackingStatusFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a shipment tracker
     * Retrieves a shipment tracker
     */
    retrieves(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrievesRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.TrackersApi = TrackersApi;
/**
    * @export
    * @enum {string}
    */
var CreateCarrierNameEnum;
(function (CreateCarrierNameEnum) {
    CreateCarrierNameEnum["Aramex"] = "aramex";
    CreateCarrierNameEnum["Australiapost"] = "australiapost";
    CreateCarrierNameEnum["Canadapost"] = "canadapost";
    CreateCarrierNameEnum["Canpar"] = "canpar";
    CreateCarrierNameEnum["DhlExpress"] = "dhl_express";
    CreateCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    CreateCarrierNameEnum["Dicom"] = "dicom";
    CreateCarrierNameEnum["Fedex"] = "fedex";
    CreateCarrierNameEnum["Purolator"] = "purolator";
    CreateCarrierNameEnum["Royalmail"] = "royalmail";
    CreateCarrierNameEnum["Sendle"] = "sendle";
    CreateCarrierNameEnum["SfExpress"] = "sf_express";
    CreateCarrierNameEnum["Tnt"] = "tnt";
    CreateCarrierNameEnum["Ups"] = "ups";
    CreateCarrierNameEnum["Usps"] = "usps";
    CreateCarrierNameEnum["UspsInternational"] = "usps_international";
    CreateCarrierNameEnum["Yanwen"] = "yanwen";
    CreateCarrierNameEnum["Yunexpress"] = "yunexpress";
    CreateCarrierNameEnum["Eshipper"] = "eshipper";
    CreateCarrierNameEnum["Freightcom"] = "freightcom";
})(CreateCarrierNameEnum = exports.CreateCarrierNameEnum || (exports.CreateCarrierNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListStatusEnum;
(function (ListStatusEnum) {
    ListStatusEnum["Pending"] = "pending";
    ListStatusEnum["InTransit"] = "in-transit";
    ListStatusEnum["Incident"] = "incident";
    ListStatusEnum["Delivered"] = "delivered";
})(ListStatusEnum = exports.ListStatusEnum || (exports.ListStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListCarrierNameEnum;
(function (ListCarrierNameEnum) {
    ListCarrierNameEnum["Aramex"] = "aramex";
    ListCarrierNameEnum["Australiapost"] = "australiapost";
    ListCarrierNameEnum["Canadapost"] = "canadapost";
    ListCarrierNameEnum["Canpar"] = "canpar";
    ListCarrierNameEnum["DhlExpress"] = "dhl_express";
    ListCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    ListCarrierNameEnum["Dicom"] = "dicom";
    ListCarrierNameEnum["Fedex"] = "fedex";
    ListCarrierNameEnum["Purolator"] = "purolator";
    ListCarrierNameEnum["Royalmail"] = "royalmail";
    ListCarrierNameEnum["Sendle"] = "sendle";
    ListCarrierNameEnum["SfExpress"] = "sf_express";
    ListCarrierNameEnum["Tnt"] = "tnt";
    ListCarrierNameEnum["Ups"] = "ups";
    ListCarrierNameEnum["Usps"] = "usps";
    ListCarrierNameEnum["UspsInternational"] = "usps_international";
    ListCarrierNameEnum["Yanwen"] = "yanwen";
    ListCarrierNameEnum["Yunexpress"] = "yunexpress";
    ListCarrierNameEnum["Eshipper"] = "eshipper";
    ListCarrierNameEnum["Freightcom"] = "freightcom";
})(ListCarrierNameEnum = exports.ListCarrierNameEnum || (exports.ListCarrierNameEnum = {}));


/***/ }),

/***/ "./api/apis/WebhooksApi.ts":
/*!*********************************!*\
  !*** ./api/apis/WebhooksApi.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhooksApi = void 0;
const runtime = __importStar(__webpack_require__(/*! ../runtime */ "./api/runtime.ts"));
const models_1 = __webpack_require__(/*! ../models */ "./api/models/index.ts");
/**
 *
 */
class WebhooksApi extends runtime.BaseAPI {
    /**
     * Create a new webhook.
     * Create a webhook
     */
    createRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling create.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/webhooks`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.WebhookDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.WebhookFromJSON(jsonValue));
        });
    }
    /**
     * Create a new webhook.
     * Create a webhook
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve all webhooks.
     * List all webhooks
     */
    listRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.testMode !== undefined) {
                queryParameters['test_mode'] = requestParameters.testMode;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/webhooks`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.WebhookListFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all webhooks.
     * List all webhooks
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Remove a webhook.
     * Remove a webhook
     */
    removeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling remove.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * Remove a webhook.
     * Remove a webhook
     */
    remove(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieve a webhook.
     * Retrieve a webhook
     */
    retrieveRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.WebhookFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a webhook.
     * Retrieve a webhook
     */
    retrieve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * test a webhook.
     * Test a webhook
     */
    testRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling test.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling test.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/webhooks/{id}/test`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.WebhookTestRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.OperationFromJSON(jsonValue));
        });
    }
    /**
     * test a webhook.
     * Test a webhook
     */
    test(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * update a webhook.
     * Update a webhook
     */
    updateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling update.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling update.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
            }
            const response = yield this.request({
                path: `/v1/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.WebhookDataToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.WebhookFromJSON(jsonValue));
        });
    }
    /**
     * update a webhook.
     * Update a webhook
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.WebhooksApi = WebhooksApi;


/***/ }),

/***/ "./api/index.ts":
/*!**********************!*\
  !*** ./api/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PurplshipClient = void 0;
const AddressesApi_1 = __webpack_require__(/*! ./apis/AddressesApi */ "./api/apis/AddressesApi.ts");
const APIApi_1 = __webpack_require__(/*! ./apis/APIApi */ "./api/apis/APIApi.ts");
const CarriersApi_1 = __webpack_require__(/*! ./apis/CarriersApi */ "./api/apis/CarriersApi.ts");
const CustomsApi_1 = __webpack_require__(/*! ./apis/CustomsApi */ "./api/apis/CustomsApi.ts");
const ParcelsApi_1 = __webpack_require__(/*! ./apis/ParcelsApi */ "./api/apis/ParcelsApi.ts");
const PickupsApi_1 = __webpack_require__(/*! ./apis/PickupsApi */ "./api/apis/PickupsApi.ts");
const ProxyApi_1 = __webpack_require__(/*! ./apis/ProxyApi */ "./api/apis/ProxyApi.ts");
const ShipmentsApi_1 = __webpack_require__(/*! ./apis/ShipmentsApi */ "./api/apis/ShipmentsApi.ts");
const TrackersApi_1 = __webpack_require__(/*! ./apis/TrackersApi */ "./api/apis/TrackersApi.ts");
const WebhooksApi_1 = __webpack_require__(/*! ./apis/WebhooksApi */ "./api/apis/WebhooksApi.ts");
const runtime_1 = __webpack_require__(/*! ./runtime */ "./api/runtime.ts");
__exportStar(__webpack_require__(/*! ./runtime */ "./api/runtime.ts"), exports);
__exportStar(__webpack_require__(/*! ./models */ "./api/models/index.ts"), exports);
class PurplshipClient {
    constructor(clientConfig) {
        const config = new runtime_1.Configuration(clientConfig);
        this.API = new APIApi_1.APIApi(config);
        this.addresses = new AddressesApi_1.AddressesApi(config);
        this.carriers = new CarriersApi_1.CarriersApi(config);
        this.customs = new CustomsApi_1.CustomsApi(config);
        this.parcels = new ParcelsApi_1.ParcelsApi(config);
        this.pickups = new PickupsApi_1.PickupsApi(config);
        this.proxy = new ProxyApi_1.ProxyApi(config);
        this.shipments = new ShipmentsApi_1.ShipmentsApi(config);
        this.trackers = new TrackersApi_1.TrackersApi(config);
        this.webhooks = new WebhooksApi_1.WebhooksApi(config);
    }
}
exports.PurplshipClient = PurplshipClient;


/***/ }),

/***/ "./api/models/Address.ts":
/*!*******************************!*\
  !*** ./api/models/Address.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddressToJSON = exports.AddressFromJSONTyped = exports.AddressFromJSON = exports.AddressCountryCodeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var AddressCountryCodeEnum;
(function (AddressCountryCodeEnum) {
    AddressCountryCodeEnum["Ad"] = "AD";
    AddressCountryCodeEnum["Ae"] = "AE";
    AddressCountryCodeEnum["Af"] = "AF";
    AddressCountryCodeEnum["Ag"] = "AG";
    AddressCountryCodeEnum["Ai"] = "AI";
    AddressCountryCodeEnum["Al"] = "AL";
    AddressCountryCodeEnum["Am"] = "AM";
    AddressCountryCodeEnum["An"] = "AN";
    AddressCountryCodeEnum["Ao"] = "AO";
    AddressCountryCodeEnum["Ar"] = "AR";
    AddressCountryCodeEnum["As"] = "AS";
    AddressCountryCodeEnum["At"] = "AT";
    AddressCountryCodeEnum["Au"] = "AU";
    AddressCountryCodeEnum["Aw"] = "AW";
    AddressCountryCodeEnum["Az"] = "AZ";
    AddressCountryCodeEnum["Ba"] = "BA";
    AddressCountryCodeEnum["Bb"] = "BB";
    AddressCountryCodeEnum["Bd"] = "BD";
    AddressCountryCodeEnum["Be"] = "BE";
    AddressCountryCodeEnum["Bf"] = "BF";
    AddressCountryCodeEnum["Bg"] = "BG";
    AddressCountryCodeEnum["Bh"] = "BH";
    AddressCountryCodeEnum["Bi"] = "BI";
    AddressCountryCodeEnum["Bj"] = "BJ";
    AddressCountryCodeEnum["Bm"] = "BM";
    AddressCountryCodeEnum["Bn"] = "BN";
    AddressCountryCodeEnum["Bo"] = "BO";
    AddressCountryCodeEnum["Br"] = "BR";
    AddressCountryCodeEnum["Bs"] = "BS";
    AddressCountryCodeEnum["Bt"] = "BT";
    AddressCountryCodeEnum["Bw"] = "BW";
    AddressCountryCodeEnum["By"] = "BY";
    AddressCountryCodeEnum["Bz"] = "BZ";
    AddressCountryCodeEnum["Ca"] = "CA";
    AddressCountryCodeEnum["Cd"] = "CD";
    AddressCountryCodeEnum["Cf"] = "CF";
    AddressCountryCodeEnum["Cg"] = "CG";
    AddressCountryCodeEnum["Ch"] = "CH";
    AddressCountryCodeEnum["Ci"] = "CI";
    AddressCountryCodeEnum["Ck"] = "CK";
    AddressCountryCodeEnum["Cl"] = "CL";
    AddressCountryCodeEnum["Cm"] = "CM";
    AddressCountryCodeEnum["Cn"] = "CN";
    AddressCountryCodeEnum["Co"] = "CO";
    AddressCountryCodeEnum["Cr"] = "CR";
    AddressCountryCodeEnum["Cu"] = "CU";
    AddressCountryCodeEnum["Cv"] = "CV";
    AddressCountryCodeEnum["Cy"] = "CY";
    AddressCountryCodeEnum["Cz"] = "CZ";
    AddressCountryCodeEnum["De"] = "DE";
    AddressCountryCodeEnum["Dj"] = "DJ";
    AddressCountryCodeEnum["Dk"] = "DK";
    AddressCountryCodeEnum["Dm"] = "DM";
    AddressCountryCodeEnum["Do"] = "DO";
    AddressCountryCodeEnum["Dz"] = "DZ";
    AddressCountryCodeEnum["Ec"] = "EC";
    AddressCountryCodeEnum["Ee"] = "EE";
    AddressCountryCodeEnum["Eg"] = "EG";
    AddressCountryCodeEnum["Er"] = "ER";
    AddressCountryCodeEnum["Es"] = "ES";
    AddressCountryCodeEnum["Et"] = "ET";
    AddressCountryCodeEnum["Fi"] = "FI";
    AddressCountryCodeEnum["Fj"] = "FJ";
    AddressCountryCodeEnum["Fk"] = "FK";
    AddressCountryCodeEnum["Fm"] = "FM";
    AddressCountryCodeEnum["Fo"] = "FO";
    AddressCountryCodeEnum["Fr"] = "FR";
    AddressCountryCodeEnum["Ga"] = "GA";
    AddressCountryCodeEnum["Gb"] = "GB";
    AddressCountryCodeEnum["Gd"] = "GD";
    AddressCountryCodeEnum["Ge"] = "GE";
    AddressCountryCodeEnum["Gf"] = "GF";
    AddressCountryCodeEnum["Gg"] = "GG";
    AddressCountryCodeEnum["Gh"] = "GH";
    AddressCountryCodeEnum["Gi"] = "GI";
    AddressCountryCodeEnum["Gl"] = "GL";
    AddressCountryCodeEnum["Gm"] = "GM";
    AddressCountryCodeEnum["Gn"] = "GN";
    AddressCountryCodeEnum["Gp"] = "GP";
    AddressCountryCodeEnum["Gq"] = "GQ";
    AddressCountryCodeEnum["Gr"] = "GR";
    AddressCountryCodeEnum["Gt"] = "GT";
    AddressCountryCodeEnum["Gu"] = "GU";
    AddressCountryCodeEnum["Gw"] = "GW";
    AddressCountryCodeEnum["Gy"] = "GY";
    AddressCountryCodeEnum["Hk"] = "HK";
    AddressCountryCodeEnum["Hn"] = "HN";
    AddressCountryCodeEnum["Hr"] = "HR";
    AddressCountryCodeEnum["Ht"] = "HT";
    AddressCountryCodeEnum["Hu"] = "HU";
    AddressCountryCodeEnum["Ic"] = "IC";
    AddressCountryCodeEnum["Id"] = "ID";
    AddressCountryCodeEnum["Ie"] = "IE";
    AddressCountryCodeEnum["Il"] = "IL";
    AddressCountryCodeEnum["In"] = "IN";
    AddressCountryCodeEnum["Iq"] = "IQ";
    AddressCountryCodeEnum["Ir"] = "IR";
    AddressCountryCodeEnum["Is"] = "IS";
    AddressCountryCodeEnum["It"] = "IT";
    AddressCountryCodeEnum["Je"] = "JE";
    AddressCountryCodeEnum["Jm"] = "JM";
    AddressCountryCodeEnum["Jo"] = "JO";
    AddressCountryCodeEnum["Jp"] = "JP";
    AddressCountryCodeEnum["Ke"] = "KE";
    AddressCountryCodeEnum["Kg"] = "KG";
    AddressCountryCodeEnum["Kh"] = "KH";
    AddressCountryCodeEnum["Ki"] = "KI";
    AddressCountryCodeEnum["Km"] = "KM";
    AddressCountryCodeEnum["Kn"] = "KN";
    AddressCountryCodeEnum["Kp"] = "KP";
    AddressCountryCodeEnum["Kr"] = "KR";
    AddressCountryCodeEnum["Kv"] = "KV";
    AddressCountryCodeEnum["Kw"] = "KW";
    AddressCountryCodeEnum["Ky"] = "KY";
    AddressCountryCodeEnum["Kz"] = "KZ";
    AddressCountryCodeEnum["La"] = "LA";
    AddressCountryCodeEnum["Lb"] = "LB";
    AddressCountryCodeEnum["Lc"] = "LC";
    AddressCountryCodeEnum["Li"] = "LI";
    AddressCountryCodeEnum["Lk"] = "LK";
    AddressCountryCodeEnum["Lr"] = "LR";
    AddressCountryCodeEnum["Ls"] = "LS";
    AddressCountryCodeEnum["Lt"] = "LT";
    AddressCountryCodeEnum["Lu"] = "LU";
    AddressCountryCodeEnum["Lv"] = "LV";
    AddressCountryCodeEnum["Ly"] = "LY";
    AddressCountryCodeEnum["Ma"] = "MA";
    AddressCountryCodeEnum["Mc"] = "MC";
    AddressCountryCodeEnum["Md"] = "MD";
    AddressCountryCodeEnum["Me"] = "ME";
    AddressCountryCodeEnum["Mg"] = "MG";
    AddressCountryCodeEnum["Mh"] = "MH";
    AddressCountryCodeEnum["Mk"] = "MK";
    AddressCountryCodeEnum["Ml"] = "ML";
    AddressCountryCodeEnum["Mm"] = "MM";
    AddressCountryCodeEnum["Mn"] = "MN";
    AddressCountryCodeEnum["Mo"] = "MO";
    AddressCountryCodeEnum["Mp"] = "MP";
    AddressCountryCodeEnum["Mq"] = "MQ";
    AddressCountryCodeEnum["Mr"] = "MR";
    AddressCountryCodeEnum["Ms"] = "MS";
    AddressCountryCodeEnum["Mt"] = "MT";
    AddressCountryCodeEnum["Mu"] = "MU";
    AddressCountryCodeEnum["Mv"] = "MV";
    AddressCountryCodeEnum["Mw"] = "MW";
    AddressCountryCodeEnum["Mx"] = "MX";
    AddressCountryCodeEnum["My"] = "MY";
    AddressCountryCodeEnum["Mz"] = "MZ";
    AddressCountryCodeEnum["Na"] = "NA";
    AddressCountryCodeEnum["Nc"] = "NC";
    AddressCountryCodeEnum["Ne"] = "NE";
    AddressCountryCodeEnum["Ng"] = "NG";
    AddressCountryCodeEnum["Ni"] = "NI";
    AddressCountryCodeEnum["Nl"] = "NL";
    AddressCountryCodeEnum["No"] = "NO";
    AddressCountryCodeEnum["Np"] = "NP";
    AddressCountryCodeEnum["Nr"] = "NR";
    AddressCountryCodeEnum["Nu"] = "NU";
    AddressCountryCodeEnum["Nz"] = "NZ";
    AddressCountryCodeEnum["Om"] = "OM";
    AddressCountryCodeEnum["Pa"] = "PA";
    AddressCountryCodeEnum["Pe"] = "PE";
    AddressCountryCodeEnum["Pf"] = "PF";
    AddressCountryCodeEnum["Pg"] = "PG";
    AddressCountryCodeEnum["Ph"] = "PH";
    AddressCountryCodeEnum["Pk"] = "PK";
    AddressCountryCodeEnum["Pl"] = "PL";
    AddressCountryCodeEnum["Pr"] = "PR";
    AddressCountryCodeEnum["Pt"] = "PT";
    AddressCountryCodeEnum["Pw"] = "PW";
    AddressCountryCodeEnum["Py"] = "PY";
    AddressCountryCodeEnum["Qa"] = "QA";
    AddressCountryCodeEnum["Re"] = "RE";
    AddressCountryCodeEnum["Ro"] = "RO";
    AddressCountryCodeEnum["Rs"] = "RS";
    AddressCountryCodeEnum["Ru"] = "RU";
    AddressCountryCodeEnum["Rw"] = "RW";
    AddressCountryCodeEnum["Sa"] = "SA";
    AddressCountryCodeEnum["Sb"] = "SB";
    AddressCountryCodeEnum["Sc"] = "SC";
    AddressCountryCodeEnum["Sd"] = "SD";
    AddressCountryCodeEnum["Se"] = "SE";
    AddressCountryCodeEnum["Sg"] = "SG";
    AddressCountryCodeEnum["Sh"] = "SH";
    AddressCountryCodeEnum["Si"] = "SI";
    AddressCountryCodeEnum["Sk"] = "SK";
    AddressCountryCodeEnum["Sl"] = "SL";
    AddressCountryCodeEnum["Sm"] = "SM";
    AddressCountryCodeEnum["Sn"] = "SN";
    AddressCountryCodeEnum["So"] = "SO";
    AddressCountryCodeEnum["Sr"] = "SR";
    AddressCountryCodeEnum["Ss"] = "SS";
    AddressCountryCodeEnum["St"] = "ST";
    AddressCountryCodeEnum["Sv"] = "SV";
    AddressCountryCodeEnum["Sy"] = "SY";
    AddressCountryCodeEnum["Sz"] = "SZ";
    AddressCountryCodeEnum["Tc"] = "TC";
    AddressCountryCodeEnum["Td"] = "TD";
    AddressCountryCodeEnum["Tg"] = "TG";
    AddressCountryCodeEnum["Th"] = "TH";
    AddressCountryCodeEnum["Tj"] = "TJ";
    AddressCountryCodeEnum["Tl"] = "TL";
    AddressCountryCodeEnum["Tn"] = "TN";
    AddressCountryCodeEnum["To"] = "TO";
    AddressCountryCodeEnum["Tr"] = "TR";
    AddressCountryCodeEnum["Tt"] = "TT";
    AddressCountryCodeEnum["Tv"] = "TV";
    AddressCountryCodeEnum["Tw"] = "TW";
    AddressCountryCodeEnum["Tz"] = "TZ";
    AddressCountryCodeEnum["Ua"] = "UA";
    AddressCountryCodeEnum["Ug"] = "UG";
    AddressCountryCodeEnum["Us"] = "US";
    AddressCountryCodeEnum["Uy"] = "UY";
    AddressCountryCodeEnum["Uz"] = "UZ";
    AddressCountryCodeEnum["Va"] = "VA";
    AddressCountryCodeEnum["Vc"] = "VC";
    AddressCountryCodeEnum["Ve"] = "VE";
    AddressCountryCodeEnum["Vg"] = "VG";
    AddressCountryCodeEnum["Vi"] = "VI";
    AddressCountryCodeEnum["Vn"] = "VN";
    AddressCountryCodeEnum["Vu"] = "VU";
    AddressCountryCodeEnum["Ws"] = "WS";
    AddressCountryCodeEnum["Xb"] = "XB";
    AddressCountryCodeEnum["Xc"] = "XC";
    AddressCountryCodeEnum["Xe"] = "XE";
    AddressCountryCodeEnum["Xm"] = "XM";
    AddressCountryCodeEnum["Xn"] = "XN";
    AddressCountryCodeEnum["Xs"] = "XS";
    AddressCountryCodeEnum["Xy"] = "XY";
    AddressCountryCodeEnum["Ye"] = "YE";
    AddressCountryCodeEnum["Yt"] = "YT";
    AddressCountryCodeEnum["Za"] = "ZA";
    AddressCountryCodeEnum["Zm"] = "ZM";
    AddressCountryCodeEnum["Zw"] = "ZW";
})(AddressCountryCodeEnum = exports.AddressCountryCodeEnum || (exports.AddressCountryCodeEnum = {}));
function AddressFromJSON(json) {
    return AddressFromJSONTyped(json, false);
}
exports.AddressFromJSON = AddressFromJSON;
function AddressFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'postal_code': !runtime_1.exists(json, 'postal_code') ? undefined : json['postal_code'],
        'city': !runtime_1.exists(json, 'city') ? undefined : json['city'],
        'federal_tax_id': !runtime_1.exists(json, 'federal_tax_id') ? undefined : json['federal_tax_id'],
        'state_tax_id': !runtime_1.exists(json, 'state_tax_id') ? undefined : json['state_tax_id'],
        'person_name': !runtime_1.exists(json, 'person_name') ? undefined : json['person_name'],
        'company_name': !runtime_1.exists(json, 'company_name') ? undefined : json['company_name'],
        'country_code': json['country_code'],
        'email': !runtime_1.exists(json, 'email') ? undefined : json['email'],
        'phone_number': !runtime_1.exists(json, 'phone_number') ? undefined : json['phone_number'],
        'state_code': !runtime_1.exists(json, 'state_code') ? undefined : json['state_code'],
        'suburb': !runtime_1.exists(json, 'suburb') ? undefined : json['suburb'],
        'residential': !runtime_1.exists(json, 'residential') ? undefined : json['residential'],
        'address_line1': !runtime_1.exists(json, 'address_line1') ? undefined : json['address_line1'],
        'address_line2': !runtime_1.exists(json, 'address_line2') ? undefined : json['address_line2'],
        'validate_location': !runtime_1.exists(json, 'validate_location') ? undefined : json['validate_location'],
        'validation': !runtime_1.exists(json, 'validation') ? undefined : _1.AddressValidationFromJSON(json['validation']),
    };
}
exports.AddressFromJSONTyped = AddressFromJSONTyped;
function AddressToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'postal_code': value.postal_code,
        'city': value.city,
        'federal_tax_id': value.federal_tax_id,
        'state_tax_id': value.state_tax_id,
        'person_name': value.person_name,
        'company_name': value.company_name,
        'country_code': value.country_code,
        'email': value.email,
        'phone_number': value.phone_number,
        'state_code': value.state_code,
        'suburb': value.suburb,
        'residential': value.residential,
        'address_line1': value.address_line1,
        'address_line2': value.address_line2,
        'validate_location': value.validate_location,
        'validation': _1.AddressValidationToJSON(value.validation),
    };
}
exports.AddressToJSON = AddressToJSON;


/***/ }),

/***/ "./api/models/AddressData.ts":
/*!***********************************!*\
  !*** ./api/models/AddressData.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddressDataToJSON = exports.AddressDataFromJSONTyped = exports.AddressDataFromJSON = exports.AddressDataCountryCodeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var AddressDataCountryCodeEnum;
(function (AddressDataCountryCodeEnum) {
    AddressDataCountryCodeEnum["Ad"] = "AD";
    AddressDataCountryCodeEnum["Ae"] = "AE";
    AddressDataCountryCodeEnum["Af"] = "AF";
    AddressDataCountryCodeEnum["Ag"] = "AG";
    AddressDataCountryCodeEnum["Ai"] = "AI";
    AddressDataCountryCodeEnum["Al"] = "AL";
    AddressDataCountryCodeEnum["Am"] = "AM";
    AddressDataCountryCodeEnum["An"] = "AN";
    AddressDataCountryCodeEnum["Ao"] = "AO";
    AddressDataCountryCodeEnum["Ar"] = "AR";
    AddressDataCountryCodeEnum["As"] = "AS";
    AddressDataCountryCodeEnum["At"] = "AT";
    AddressDataCountryCodeEnum["Au"] = "AU";
    AddressDataCountryCodeEnum["Aw"] = "AW";
    AddressDataCountryCodeEnum["Az"] = "AZ";
    AddressDataCountryCodeEnum["Ba"] = "BA";
    AddressDataCountryCodeEnum["Bb"] = "BB";
    AddressDataCountryCodeEnum["Bd"] = "BD";
    AddressDataCountryCodeEnum["Be"] = "BE";
    AddressDataCountryCodeEnum["Bf"] = "BF";
    AddressDataCountryCodeEnum["Bg"] = "BG";
    AddressDataCountryCodeEnum["Bh"] = "BH";
    AddressDataCountryCodeEnum["Bi"] = "BI";
    AddressDataCountryCodeEnum["Bj"] = "BJ";
    AddressDataCountryCodeEnum["Bm"] = "BM";
    AddressDataCountryCodeEnum["Bn"] = "BN";
    AddressDataCountryCodeEnum["Bo"] = "BO";
    AddressDataCountryCodeEnum["Br"] = "BR";
    AddressDataCountryCodeEnum["Bs"] = "BS";
    AddressDataCountryCodeEnum["Bt"] = "BT";
    AddressDataCountryCodeEnum["Bw"] = "BW";
    AddressDataCountryCodeEnum["By"] = "BY";
    AddressDataCountryCodeEnum["Bz"] = "BZ";
    AddressDataCountryCodeEnum["Ca"] = "CA";
    AddressDataCountryCodeEnum["Cd"] = "CD";
    AddressDataCountryCodeEnum["Cf"] = "CF";
    AddressDataCountryCodeEnum["Cg"] = "CG";
    AddressDataCountryCodeEnum["Ch"] = "CH";
    AddressDataCountryCodeEnum["Ci"] = "CI";
    AddressDataCountryCodeEnum["Ck"] = "CK";
    AddressDataCountryCodeEnum["Cl"] = "CL";
    AddressDataCountryCodeEnum["Cm"] = "CM";
    AddressDataCountryCodeEnum["Cn"] = "CN";
    AddressDataCountryCodeEnum["Co"] = "CO";
    AddressDataCountryCodeEnum["Cr"] = "CR";
    AddressDataCountryCodeEnum["Cu"] = "CU";
    AddressDataCountryCodeEnum["Cv"] = "CV";
    AddressDataCountryCodeEnum["Cy"] = "CY";
    AddressDataCountryCodeEnum["Cz"] = "CZ";
    AddressDataCountryCodeEnum["De"] = "DE";
    AddressDataCountryCodeEnum["Dj"] = "DJ";
    AddressDataCountryCodeEnum["Dk"] = "DK";
    AddressDataCountryCodeEnum["Dm"] = "DM";
    AddressDataCountryCodeEnum["Do"] = "DO";
    AddressDataCountryCodeEnum["Dz"] = "DZ";
    AddressDataCountryCodeEnum["Ec"] = "EC";
    AddressDataCountryCodeEnum["Ee"] = "EE";
    AddressDataCountryCodeEnum["Eg"] = "EG";
    AddressDataCountryCodeEnum["Er"] = "ER";
    AddressDataCountryCodeEnum["Es"] = "ES";
    AddressDataCountryCodeEnum["Et"] = "ET";
    AddressDataCountryCodeEnum["Fi"] = "FI";
    AddressDataCountryCodeEnum["Fj"] = "FJ";
    AddressDataCountryCodeEnum["Fk"] = "FK";
    AddressDataCountryCodeEnum["Fm"] = "FM";
    AddressDataCountryCodeEnum["Fo"] = "FO";
    AddressDataCountryCodeEnum["Fr"] = "FR";
    AddressDataCountryCodeEnum["Ga"] = "GA";
    AddressDataCountryCodeEnum["Gb"] = "GB";
    AddressDataCountryCodeEnum["Gd"] = "GD";
    AddressDataCountryCodeEnum["Ge"] = "GE";
    AddressDataCountryCodeEnum["Gf"] = "GF";
    AddressDataCountryCodeEnum["Gg"] = "GG";
    AddressDataCountryCodeEnum["Gh"] = "GH";
    AddressDataCountryCodeEnum["Gi"] = "GI";
    AddressDataCountryCodeEnum["Gl"] = "GL";
    AddressDataCountryCodeEnum["Gm"] = "GM";
    AddressDataCountryCodeEnum["Gn"] = "GN";
    AddressDataCountryCodeEnum["Gp"] = "GP";
    AddressDataCountryCodeEnum["Gq"] = "GQ";
    AddressDataCountryCodeEnum["Gr"] = "GR";
    AddressDataCountryCodeEnum["Gt"] = "GT";
    AddressDataCountryCodeEnum["Gu"] = "GU";
    AddressDataCountryCodeEnum["Gw"] = "GW";
    AddressDataCountryCodeEnum["Gy"] = "GY";
    AddressDataCountryCodeEnum["Hk"] = "HK";
    AddressDataCountryCodeEnum["Hn"] = "HN";
    AddressDataCountryCodeEnum["Hr"] = "HR";
    AddressDataCountryCodeEnum["Ht"] = "HT";
    AddressDataCountryCodeEnum["Hu"] = "HU";
    AddressDataCountryCodeEnum["Ic"] = "IC";
    AddressDataCountryCodeEnum["Id"] = "ID";
    AddressDataCountryCodeEnum["Ie"] = "IE";
    AddressDataCountryCodeEnum["Il"] = "IL";
    AddressDataCountryCodeEnum["In"] = "IN";
    AddressDataCountryCodeEnum["Iq"] = "IQ";
    AddressDataCountryCodeEnum["Ir"] = "IR";
    AddressDataCountryCodeEnum["Is"] = "IS";
    AddressDataCountryCodeEnum["It"] = "IT";
    AddressDataCountryCodeEnum["Je"] = "JE";
    AddressDataCountryCodeEnum["Jm"] = "JM";
    AddressDataCountryCodeEnum["Jo"] = "JO";
    AddressDataCountryCodeEnum["Jp"] = "JP";
    AddressDataCountryCodeEnum["Ke"] = "KE";
    AddressDataCountryCodeEnum["Kg"] = "KG";
    AddressDataCountryCodeEnum["Kh"] = "KH";
    AddressDataCountryCodeEnum["Ki"] = "KI";
    AddressDataCountryCodeEnum["Km"] = "KM";
    AddressDataCountryCodeEnum["Kn"] = "KN";
    AddressDataCountryCodeEnum["Kp"] = "KP";
    AddressDataCountryCodeEnum["Kr"] = "KR";
    AddressDataCountryCodeEnum["Kv"] = "KV";
    AddressDataCountryCodeEnum["Kw"] = "KW";
    AddressDataCountryCodeEnum["Ky"] = "KY";
    AddressDataCountryCodeEnum["Kz"] = "KZ";
    AddressDataCountryCodeEnum["La"] = "LA";
    AddressDataCountryCodeEnum["Lb"] = "LB";
    AddressDataCountryCodeEnum["Lc"] = "LC";
    AddressDataCountryCodeEnum["Li"] = "LI";
    AddressDataCountryCodeEnum["Lk"] = "LK";
    AddressDataCountryCodeEnum["Lr"] = "LR";
    AddressDataCountryCodeEnum["Ls"] = "LS";
    AddressDataCountryCodeEnum["Lt"] = "LT";
    AddressDataCountryCodeEnum["Lu"] = "LU";
    AddressDataCountryCodeEnum["Lv"] = "LV";
    AddressDataCountryCodeEnum["Ly"] = "LY";
    AddressDataCountryCodeEnum["Ma"] = "MA";
    AddressDataCountryCodeEnum["Mc"] = "MC";
    AddressDataCountryCodeEnum["Md"] = "MD";
    AddressDataCountryCodeEnum["Me"] = "ME";
    AddressDataCountryCodeEnum["Mg"] = "MG";
    AddressDataCountryCodeEnum["Mh"] = "MH";
    AddressDataCountryCodeEnum["Mk"] = "MK";
    AddressDataCountryCodeEnum["Ml"] = "ML";
    AddressDataCountryCodeEnum["Mm"] = "MM";
    AddressDataCountryCodeEnum["Mn"] = "MN";
    AddressDataCountryCodeEnum["Mo"] = "MO";
    AddressDataCountryCodeEnum["Mp"] = "MP";
    AddressDataCountryCodeEnum["Mq"] = "MQ";
    AddressDataCountryCodeEnum["Mr"] = "MR";
    AddressDataCountryCodeEnum["Ms"] = "MS";
    AddressDataCountryCodeEnum["Mt"] = "MT";
    AddressDataCountryCodeEnum["Mu"] = "MU";
    AddressDataCountryCodeEnum["Mv"] = "MV";
    AddressDataCountryCodeEnum["Mw"] = "MW";
    AddressDataCountryCodeEnum["Mx"] = "MX";
    AddressDataCountryCodeEnum["My"] = "MY";
    AddressDataCountryCodeEnum["Mz"] = "MZ";
    AddressDataCountryCodeEnum["Na"] = "NA";
    AddressDataCountryCodeEnum["Nc"] = "NC";
    AddressDataCountryCodeEnum["Ne"] = "NE";
    AddressDataCountryCodeEnum["Ng"] = "NG";
    AddressDataCountryCodeEnum["Ni"] = "NI";
    AddressDataCountryCodeEnum["Nl"] = "NL";
    AddressDataCountryCodeEnum["No"] = "NO";
    AddressDataCountryCodeEnum["Np"] = "NP";
    AddressDataCountryCodeEnum["Nr"] = "NR";
    AddressDataCountryCodeEnum["Nu"] = "NU";
    AddressDataCountryCodeEnum["Nz"] = "NZ";
    AddressDataCountryCodeEnum["Om"] = "OM";
    AddressDataCountryCodeEnum["Pa"] = "PA";
    AddressDataCountryCodeEnum["Pe"] = "PE";
    AddressDataCountryCodeEnum["Pf"] = "PF";
    AddressDataCountryCodeEnum["Pg"] = "PG";
    AddressDataCountryCodeEnum["Ph"] = "PH";
    AddressDataCountryCodeEnum["Pk"] = "PK";
    AddressDataCountryCodeEnum["Pl"] = "PL";
    AddressDataCountryCodeEnum["Pr"] = "PR";
    AddressDataCountryCodeEnum["Pt"] = "PT";
    AddressDataCountryCodeEnum["Pw"] = "PW";
    AddressDataCountryCodeEnum["Py"] = "PY";
    AddressDataCountryCodeEnum["Qa"] = "QA";
    AddressDataCountryCodeEnum["Re"] = "RE";
    AddressDataCountryCodeEnum["Ro"] = "RO";
    AddressDataCountryCodeEnum["Rs"] = "RS";
    AddressDataCountryCodeEnum["Ru"] = "RU";
    AddressDataCountryCodeEnum["Rw"] = "RW";
    AddressDataCountryCodeEnum["Sa"] = "SA";
    AddressDataCountryCodeEnum["Sb"] = "SB";
    AddressDataCountryCodeEnum["Sc"] = "SC";
    AddressDataCountryCodeEnum["Sd"] = "SD";
    AddressDataCountryCodeEnum["Se"] = "SE";
    AddressDataCountryCodeEnum["Sg"] = "SG";
    AddressDataCountryCodeEnum["Sh"] = "SH";
    AddressDataCountryCodeEnum["Si"] = "SI";
    AddressDataCountryCodeEnum["Sk"] = "SK";
    AddressDataCountryCodeEnum["Sl"] = "SL";
    AddressDataCountryCodeEnum["Sm"] = "SM";
    AddressDataCountryCodeEnum["Sn"] = "SN";
    AddressDataCountryCodeEnum["So"] = "SO";
    AddressDataCountryCodeEnum["Sr"] = "SR";
    AddressDataCountryCodeEnum["Ss"] = "SS";
    AddressDataCountryCodeEnum["St"] = "ST";
    AddressDataCountryCodeEnum["Sv"] = "SV";
    AddressDataCountryCodeEnum["Sy"] = "SY";
    AddressDataCountryCodeEnum["Sz"] = "SZ";
    AddressDataCountryCodeEnum["Tc"] = "TC";
    AddressDataCountryCodeEnum["Td"] = "TD";
    AddressDataCountryCodeEnum["Tg"] = "TG";
    AddressDataCountryCodeEnum["Th"] = "TH";
    AddressDataCountryCodeEnum["Tj"] = "TJ";
    AddressDataCountryCodeEnum["Tl"] = "TL";
    AddressDataCountryCodeEnum["Tn"] = "TN";
    AddressDataCountryCodeEnum["To"] = "TO";
    AddressDataCountryCodeEnum["Tr"] = "TR";
    AddressDataCountryCodeEnum["Tt"] = "TT";
    AddressDataCountryCodeEnum["Tv"] = "TV";
    AddressDataCountryCodeEnum["Tw"] = "TW";
    AddressDataCountryCodeEnum["Tz"] = "TZ";
    AddressDataCountryCodeEnum["Ua"] = "UA";
    AddressDataCountryCodeEnum["Ug"] = "UG";
    AddressDataCountryCodeEnum["Us"] = "US";
    AddressDataCountryCodeEnum["Uy"] = "UY";
    AddressDataCountryCodeEnum["Uz"] = "UZ";
    AddressDataCountryCodeEnum["Va"] = "VA";
    AddressDataCountryCodeEnum["Vc"] = "VC";
    AddressDataCountryCodeEnum["Ve"] = "VE";
    AddressDataCountryCodeEnum["Vg"] = "VG";
    AddressDataCountryCodeEnum["Vi"] = "VI";
    AddressDataCountryCodeEnum["Vn"] = "VN";
    AddressDataCountryCodeEnum["Vu"] = "VU";
    AddressDataCountryCodeEnum["Ws"] = "WS";
    AddressDataCountryCodeEnum["Xb"] = "XB";
    AddressDataCountryCodeEnum["Xc"] = "XC";
    AddressDataCountryCodeEnum["Xe"] = "XE";
    AddressDataCountryCodeEnum["Xm"] = "XM";
    AddressDataCountryCodeEnum["Xn"] = "XN";
    AddressDataCountryCodeEnum["Xs"] = "XS";
    AddressDataCountryCodeEnum["Xy"] = "XY";
    AddressDataCountryCodeEnum["Ye"] = "YE";
    AddressDataCountryCodeEnum["Yt"] = "YT";
    AddressDataCountryCodeEnum["Za"] = "ZA";
    AddressDataCountryCodeEnum["Zm"] = "ZM";
    AddressDataCountryCodeEnum["Zw"] = "ZW";
})(AddressDataCountryCodeEnum = exports.AddressDataCountryCodeEnum || (exports.AddressDataCountryCodeEnum = {}));
function AddressDataFromJSON(json) {
    return AddressDataFromJSONTyped(json, false);
}
exports.AddressDataFromJSON = AddressDataFromJSON;
function AddressDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'postal_code': !runtime_1.exists(json, 'postal_code') ? undefined : json['postal_code'],
        'city': !runtime_1.exists(json, 'city') ? undefined : json['city'],
        'federal_tax_id': !runtime_1.exists(json, 'federal_tax_id') ? undefined : json['federal_tax_id'],
        'state_tax_id': !runtime_1.exists(json, 'state_tax_id') ? undefined : json['state_tax_id'],
        'person_name': !runtime_1.exists(json, 'person_name') ? undefined : json['person_name'],
        'company_name': !runtime_1.exists(json, 'company_name') ? undefined : json['company_name'],
        'country_code': json['country_code'],
        'email': !runtime_1.exists(json, 'email') ? undefined : json['email'],
        'phone_number': !runtime_1.exists(json, 'phone_number') ? undefined : json['phone_number'],
        'state_code': !runtime_1.exists(json, 'state_code') ? undefined : json['state_code'],
        'suburb': !runtime_1.exists(json, 'suburb') ? undefined : json['suburb'],
        'residential': !runtime_1.exists(json, 'residential') ? undefined : json['residential'],
        'address_line1': !runtime_1.exists(json, 'address_line1') ? undefined : json['address_line1'],
        'address_line2': !runtime_1.exists(json, 'address_line2') ? undefined : json['address_line2'],
        'validate_location': !runtime_1.exists(json, 'validate_location') ? undefined : json['validate_location'],
    };
}
exports.AddressDataFromJSONTyped = AddressDataFromJSONTyped;
function AddressDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'postal_code': value.postal_code,
        'city': value.city,
        'federal_tax_id': value.federal_tax_id,
        'state_tax_id': value.state_tax_id,
        'person_name': value.person_name,
        'company_name': value.company_name,
        'country_code': value.country_code,
        'email': value.email,
        'phone_number': value.phone_number,
        'state_code': value.state_code,
        'suburb': value.suburb,
        'residential': value.residential,
        'address_line1': value.address_line1,
        'address_line2': value.address_line2,
        'validate_location': value.validate_location,
    };
}
exports.AddressDataToJSON = AddressDataToJSON;


/***/ }),

/***/ "./api/models/AddressList.ts":
/*!***********************************!*\
  !*** ./api/models/AddressList.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddressListToJSON = exports.AddressListFromJSONTyped = exports.AddressListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function AddressListFromJSON(json) {
    return AddressListFromJSONTyped(json, false);
}
exports.AddressListFromJSON = AddressListFromJSON;
function AddressListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.AddressFromJSON)),
    };
}
exports.AddressListFromJSONTyped = AddressListFromJSONTyped;
function AddressListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.AddressToJSON)),
    };
}
exports.AddressListToJSON = AddressListToJSON;


/***/ }),

/***/ "./api/models/AddressValidation.ts":
/*!*****************************************!*\
  !*** ./api/models/AddressValidation.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddressValidationToJSON = exports.AddressValidationFromJSONTyped = exports.AddressValidationFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function AddressValidationFromJSON(json) {
    return AddressValidationFromJSONTyped(json, false);
}
exports.AddressValidationFromJSON = AddressValidationFromJSON;
function AddressValidationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'success': json['success'],
        'meta': !runtime_1.exists(json, 'meta') ? undefined : json['meta'],
    };
}
exports.AddressValidationFromJSONTyped = AddressValidationFromJSONTyped;
function AddressValidationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'success': value.success,
        'meta': value.meta,
    };
}
exports.AddressValidationToJSON = AddressValidationToJSON;


/***/ }),

/***/ "./api/models/CarrierList.ts":
/*!***********************************!*\
  !*** ./api/models/CarrierList.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CarrierListToJSON = exports.CarrierListFromJSONTyped = exports.CarrierListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function CarrierListFromJSON(json) {
    return CarrierListFromJSONTyped(json, false);
}
exports.CarrierListFromJSON = CarrierListFromJSON;
function CarrierListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.CarrierSettingsFromJSON)),
    };
}
exports.CarrierListFromJSONTyped = CarrierListFromJSONTyped;
function CarrierListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.CarrierSettingsToJSON)),
    };
}
exports.CarrierListToJSON = CarrierListToJSON;


/***/ }),

/***/ "./api/models/CarrierSettings.ts":
/*!***************************************!*\
  !*** ./api/models/CarrierSettings.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CarrierSettingsToJSON = exports.CarrierSettingsFromJSONTyped = exports.CarrierSettingsFromJSON = exports.CarrierSettingsCarrierNameEnum = void 0;
/**
* @export
* @enum {string}
*/
var CarrierSettingsCarrierNameEnum;
(function (CarrierSettingsCarrierNameEnum) {
    CarrierSettingsCarrierNameEnum["Aramex"] = "aramex";
    CarrierSettingsCarrierNameEnum["Australiapost"] = "australiapost";
    CarrierSettingsCarrierNameEnum["Canadapost"] = "canadapost";
    CarrierSettingsCarrierNameEnum["Canpar"] = "canpar";
    CarrierSettingsCarrierNameEnum["DhlExpress"] = "dhl_express";
    CarrierSettingsCarrierNameEnum["DhlUniversal"] = "dhl_universal";
    CarrierSettingsCarrierNameEnum["Dicom"] = "dicom";
    CarrierSettingsCarrierNameEnum["Eshipper"] = "eshipper";
    CarrierSettingsCarrierNameEnum["Fedex"] = "fedex";
    CarrierSettingsCarrierNameEnum["Freightcom"] = "freightcom";
    CarrierSettingsCarrierNameEnum["Purolator"] = "purolator";
    CarrierSettingsCarrierNameEnum["Royalmail"] = "royalmail";
    CarrierSettingsCarrierNameEnum["Sendle"] = "sendle";
    CarrierSettingsCarrierNameEnum["SfExpress"] = "sf_express";
    CarrierSettingsCarrierNameEnum["Tnt"] = "tnt";
    CarrierSettingsCarrierNameEnum["Ups"] = "ups";
    CarrierSettingsCarrierNameEnum["Usps"] = "usps";
    CarrierSettingsCarrierNameEnum["UspsInternational"] = "usps_international";
    CarrierSettingsCarrierNameEnum["Yanwen"] = "yanwen";
    CarrierSettingsCarrierNameEnum["Yunexpress"] = "yunexpress";
})(CarrierSettingsCarrierNameEnum = exports.CarrierSettingsCarrierNameEnum || (exports.CarrierSettingsCarrierNameEnum = {}));
function CarrierSettingsFromJSON(json) {
    return CarrierSettingsFromJSONTyped(json, false);
}
exports.CarrierSettingsFromJSON = CarrierSettingsFromJSON;
function CarrierSettingsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'carrier_name': json['carrier_name'],
        'carrier_id': json['carrier_id'],
        'test': json['test'],
        'active': json['active'],
    };
}
exports.CarrierSettingsFromJSONTyped = CarrierSettingsFromJSONTyped;
function CarrierSettingsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'test': value.test,
        'active': value.active,
    };
}
exports.CarrierSettingsToJSON = CarrierSettingsToJSON;


/***/ }),

/***/ "./api/models/Charge.ts":
/*!******************************!*\
  !*** ./api/models/Charge.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChargeToJSON = exports.ChargeFromJSONTyped = exports.ChargeFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function ChargeFromJSON(json) {
    return ChargeFromJSONTyped(json, false);
}
exports.ChargeFromJSON = ChargeFromJSON;
function ChargeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': !runtime_1.exists(json, 'name') ? undefined : json['name'],
        'amount': !runtime_1.exists(json, 'amount') ? undefined : json['amount'],
        'currency': !runtime_1.exists(json, 'currency') ? undefined : json['currency'],
    };
}
exports.ChargeFromJSONTyped = ChargeFromJSONTyped;
function ChargeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'amount': value.amount,
        'currency': value.currency,
    };
}
exports.ChargeToJSON = ChargeToJSON;


/***/ }),

/***/ "./api/models/Commodity.ts":
/*!*********************************!*\
  !*** ./api/models/Commodity.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommodityToJSON = exports.CommodityFromJSONTyped = exports.CommodityFromJSON = exports.CommodityWeightUnitEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var CommodityWeightUnitEnum;
(function (CommodityWeightUnitEnum) {
    CommodityWeightUnitEnum["Kg"] = "KG";
    CommodityWeightUnitEnum["Lb"] = "LB";
})(CommodityWeightUnitEnum = exports.CommodityWeightUnitEnum || (exports.CommodityWeightUnitEnum = {}));
function CommodityFromJSON(json) {
    return CommodityFromJSONTyped(json, false);
}
exports.CommodityFromJSON = CommodityFromJSON;
function CommodityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'weight': json['weight'],
        'weight_unit': json['weight_unit'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'quantity': !runtime_1.exists(json, 'quantity') ? undefined : json['quantity'],
        'sku': !runtime_1.exists(json, 'sku') ? undefined : json['sku'],
        'value_amount': !runtime_1.exists(json, 'value_amount') ? undefined : json['value_amount'],
        'value_currency': !runtime_1.exists(json, 'value_currency') ? undefined : json['value_currency'],
        'origin_country': !runtime_1.exists(json, 'origin_country') ? undefined : json['origin_country'],
    };
}
exports.CommodityFromJSONTyped = CommodityFromJSONTyped;
function CommodityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'weight': value.weight,
        'weight_unit': value.weight_unit,
        'description': value.description,
        'quantity': value.quantity,
        'sku': value.sku,
        'value_amount': value.value_amount,
        'value_currency': value.value_currency,
        'origin_country': value.origin_country,
    };
}
exports.CommodityToJSON = CommodityToJSON;


/***/ }),

/***/ "./api/models/CommodityData.ts":
/*!*************************************!*\
  !*** ./api/models/CommodityData.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommodityDataToJSON = exports.CommodityDataFromJSONTyped = exports.CommodityDataFromJSON = exports.CommodityDataWeightUnitEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var CommodityDataWeightUnitEnum;
(function (CommodityDataWeightUnitEnum) {
    CommodityDataWeightUnitEnum["Kg"] = "KG";
    CommodityDataWeightUnitEnum["Lb"] = "LB";
})(CommodityDataWeightUnitEnum = exports.CommodityDataWeightUnitEnum || (exports.CommodityDataWeightUnitEnum = {}));
function CommodityDataFromJSON(json) {
    return CommodityDataFromJSONTyped(json, false);
}
exports.CommodityDataFromJSON = CommodityDataFromJSON;
function CommodityDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'weight': json['weight'],
        'weight_unit': json['weight_unit'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'quantity': !runtime_1.exists(json, 'quantity') ? undefined : json['quantity'],
        'sku': !runtime_1.exists(json, 'sku') ? undefined : json['sku'],
        'value_amount': !runtime_1.exists(json, 'value_amount') ? undefined : json['value_amount'],
        'value_currency': !runtime_1.exists(json, 'value_currency') ? undefined : json['value_currency'],
        'origin_country': !runtime_1.exists(json, 'origin_country') ? undefined : json['origin_country'],
    };
}
exports.CommodityDataFromJSONTyped = CommodityDataFromJSONTyped;
function CommodityDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'weight': value.weight,
        'weight_unit': value.weight_unit,
        'description': value.description,
        'quantity': value.quantity,
        'sku': value.sku,
        'value_amount': value.value_amount,
        'value_currency': value.value_currency,
        'origin_country': value.origin_country,
    };
}
exports.CommodityDataToJSON = CommodityDataToJSON;


/***/ }),

/***/ "./api/models/Customs.ts":
/*!*******************************!*\
  !*** ./api/models/Customs.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomsToJSON = exports.CustomsFromJSONTyped = exports.CustomsFromJSON = exports.CustomsIncotermEnum = exports.CustomsContentTypeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var CustomsContentTypeEnum;
(function (CustomsContentTypeEnum) {
    CustomsContentTypeEnum["Documents"] = "documents";
    CustomsContentTypeEnum["Gift"] = "gift";
    CustomsContentTypeEnum["Sample"] = "sample";
    CustomsContentTypeEnum["Merchandise"] = "merchandise";
    CustomsContentTypeEnum["ReturnMerchandise"] = "return_merchandise";
    CustomsContentTypeEnum["Other"] = "other";
})(CustomsContentTypeEnum = exports.CustomsContentTypeEnum || (exports.CustomsContentTypeEnum = {})); /**
* @export
* @enum {string}
*/
var CustomsIncotermEnum;
(function (CustomsIncotermEnum) {
    CustomsIncotermEnum["Cfr"] = "CFR";
    CustomsIncotermEnum["Cif"] = "CIF";
    CustomsIncotermEnum["Cip"] = "CIP";
    CustomsIncotermEnum["Cpt"] = "CPT";
    CustomsIncotermEnum["Daf"] = "DAF";
    CustomsIncotermEnum["Ddp"] = "DDP";
    CustomsIncotermEnum["Ddu"] = "DDU";
    CustomsIncotermEnum["Deq"] = "DEQ";
    CustomsIncotermEnum["Des"] = "DES";
    CustomsIncotermEnum["Exw"] = "EXW";
    CustomsIncotermEnum["Fas"] = "FAS";
    CustomsIncotermEnum["Fca"] = "FCA";
    CustomsIncotermEnum["Fob"] = "FOB";
})(CustomsIncotermEnum = exports.CustomsIncotermEnum || (exports.CustomsIncotermEnum = {}));
function CustomsFromJSON(json) {
    return CustomsFromJSONTyped(json, false);
}
exports.CustomsFromJSON = CustomsFromJSON;
function CustomsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'aes': !runtime_1.exists(json, 'aes') ? undefined : json['aes'],
        'eel_pfc': !runtime_1.exists(json, 'eel_pfc') ? undefined : json['eel_pfc'],
        'content_type': !runtime_1.exists(json, 'content_type') ? undefined : json['content_type'],
        'content_description': !runtime_1.exists(json, 'content_description') ? undefined : json['content_description'],
        'incoterm': !runtime_1.exists(json, 'incoterm') ? undefined : json['incoterm'],
        'commodities': !runtime_1.exists(json, 'commodities') ? undefined : (json['commodities'] === null ? null : json['commodities'].map(_1.CommodityFromJSON)),
        'duty': !runtime_1.exists(json, 'duty') ? undefined : _1.DutyFromJSON(json['duty']),
        'invoice': !runtime_1.exists(json, 'invoice') ? undefined : json['invoice'],
        'invoice_date': !runtime_1.exists(json, 'invoice_date') ? undefined : json['invoice_date'],
        'commercial_invoice': !runtime_1.exists(json, 'commercial_invoice') ? undefined : json['commercial_invoice'],
        'certify': !runtime_1.exists(json, 'certify') ? undefined : json['certify'],
        'signer': !runtime_1.exists(json, 'signer') ? undefined : json['signer'],
        'certificate_number': !runtime_1.exists(json, 'certificate_number') ? undefined : json['certificate_number'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
    };
}
exports.CustomsFromJSONTyped = CustomsFromJSONTyped;
function CustomsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'aes': value.aes,
        'eel_pfc': value.eel_pfc,
        'content_type': value.content_type,
        'content_description': value.content_description,
        'incoterm': value.incoterm,
        'commodities': value.commodities === undefined ? undefined : (value.commodities === null ? null : value.commodities.map(_1.CommodityToJSON)),
        'duty': _1.DutyToJSON(value.duty),
        'invoice': value.invoice,
        'invoice_date': value.invoice_date,
        'commercial_invoice': value.commercial_invoice,
        'certify': value.certify,
        'signer': value.signer,
        'certificate_number': value.certificate_number,
        'options': value.options,
    };
}
exports.CustomsToJSON = CustomsToJSON;


/***/ }),

/***/ "./api/models/CustomsData.ts":
/*!***********************************!*\
  !*** ./api/models/CustomsData.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomsDataToJSON = exports.CustomsDataFromJSONTyped = exports.CustomsDataFromJSON = exports.CustomsDataIncotermEnum = exports.CustomsDataContentTypeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var CustomsDataContentTypeEnum;
(function (CustomsDataContentTypeEnum) {
    CustomsDataContentTypeEnum["Documents"] = "documents";
    CustomsDataContentTypeEnum["Gift"] = "gift";
    CustomsDataContentTypeEnum["Sample"] = "sample";
    CustomsDataContentTypeEnum["Merchandise"] = "merchandise";
    CustomsDataContentTypeEnum["ReturnMerchandise"] = "return_merchandise";
    CustomsDataContentTypeEnum["Other"] = "other";
})(CustomsDataContentTypeEnum = exports.CustomsDataContentTypeEnum || (exports.CustomsDataContentTypeEnum = {})); /**
* @export
* @enum {string}
*/
var CustomsDataIncotermEnum;
(function (CustomsDataIncotermEnum) {
    CustomsDataIncotermEnum["Cfr"] = "CFR";
    CustomsDataIncotermEnum["Cif"] = "CIF";
    CustomsDataIncotermEnum["Cip"] = "CIP";
    CustomsDataIncotermEnum["Cpt"] = "CPT";
    CustomsDataIncotermEnum["Daf"] = "DAF";
    CustomsDataIncotermEnum["Ddp"] = "DDP";
    CustomsDataIncotermEnum["Ddu"] = "DDU";
    CustomsDataIncotermEnum["Deq"] = "DEQ";
    CustomsDataIncotermEnum["Des"] = "DES";
    CustomsDataIncotermEnum["Exw"] = "EXW";
    CustomsDataIncotermEnum["Fas"] = "FAS";
    CustomsDataIncotermEnum["Fca"] = "FCA";
    CustomsDataIncotermEnum["Fob"] = "FOB";
})(CustomsDataIncotermEnum = exports.CustomsDataIncotermEnum || (exports.CustomsDataIncotermEnum = {}));
function CustomsDataFromJSON(json) {
    return CustomsDataFromJSONTyped(json, false);
}
exports.CustomsDataFromJSON = CustomsDataFromJSON;
function CustomsDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'aes': !runtime_1.exists(json, 'aes') ? undefined : json['aes'],
        'eel_pfc': !runtime_1.exists(json, 'eel_pfc') ? undefined : json['eel_pfc'],
        'content_type': !runtime_1.exists(json, 'content_type') ? undefined : json['content_type'],
        'content_description': !runtime_1.exists(json, 'content_description') ? undefined : json['content_description'],
        'incoterm': !runtime_1.exists(json, 'incoterm') ? undefined : json['incoterm'],
        'commodities': !runtime_1.exists(json, 'commodities') ? undefined : (json['commodities'] === null ? null : json['commodities'].map(_1.CommodityFromJSON)),
        'duty': !runtime_1.exists(json, 'duty') ? undefined : _1.DutyFromJSON(json['duty']),
        'invoice': !runtime_1.exists(json, 'invoice') ? undefined : json['invoice'],
        'invoice_date': !runtime_1.exists(json, 'invoice_date') ? undefined : json['invoice_date'],
        'commercial_invoice': !runtime_1.exists(json, 'commercial_invoice') ? undefined : json['commercial_invoice'],
        'certify': !runtime_1.exists(json, 'certify') ? undefined : json['certify'],
        'signer': !runtime_1.exists(json, 'signer') ? undefined : json['signer'],
        'certificate_number': !runtime_1.exists(json, 'certificate_number') ? undefined : json['certificate_number'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
    };
}
exports.CustomsDataFromJSONTyped = CustomsDataFromJSONTyped;
function CustomsDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'aes': value.aes,
        'eel_pfc': value.eel_pfc,
        'content_type': value.content_type,
        'content_description': value.content_description,
        'incoterm': value.incoterm,
        'commodities': value.commodities === undefined ? undefined : (value.commodities === null ? null : value.commodities.map(_1.CommodityToJSON)),
        'duty': _1.DutyToJSON(value.duty),
        'invoice': value.invoice,
        'invoice_date': value.invoice_date,
        'commercial_invoice': value.commercial_invoice,
        'certify': value.certify,
        'signer': value.signer,
        'certificate_number': value.certificate_number,
        'options': value.options,
    };
}
exports.CustomsDataToJSON = CustomsDataToJSON;


/***/ }),

/***/ "./api/models/CustomsList.ts":
/*!***********************************!*\
  !*** ./api/models/CustomsList.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomsListToJSON = exports.CustomsListFromJSONTyped = exports.CustomsListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function CustomsListFromJSON(json) {
    return CustomsListFromJSONTyped(json, false);
}
exports.CustomsListFromJSON = CustomsListFromJSON;
function CustomsListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.CustomsFromJSON)),
    };
}
exports.CustomsListFromJSONTyped = CustomsListFromJSONTyped;
function CustomsListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.CustomsToJSON)),
    };
}
exports.CustomsListToJSON = CustomsListToJSON;


/***/ }),

/***/ "./api/models/Duty.ts":
/*!****************************!*\
  !*** ./api/models/Duty.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DutyToJSON = exports.DutyFromJSONTyped = exports.DutyFromJSON = exports.DutyCurrencyEnum = exports.DutyPaidByEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var DutyPaidByEnum;
(function (DutyPaidByEnum) {
    DutyPaidByEnum["Sender"] = "sender";
    DutyPaidByEnum["Recipient"] = "recipient";
    DutyPaidByEnum["ThirdParty"] = "third_party";
})(DutyPaidByEnum = exports.DutyPaidByEnum || (exports.DutyPaidByEnum = {})); /**
* @export
* @enum {string}
*/
var DutyCurrencyEnum;
(function (DutyCurrencyEnum) {
    DutyCurrencyEnum["Eur"] = "EUR";
    DutyCurrencyEnum["Aed"] = "AED";
    DutyCurrencyEnum["Usd"] = "USD";
    DutyCurrencyEnum["Xcd"] = "XCD";
    DutyCurrencyEnum["Amd"] = "AMD";
    DutyCurrencyEnum["Ang"] = "ANG";
    DutyCurrencyEnum["Aoa"] = "AOA";
    DutyCurrencyEnum["Ars"] = "ARS";
    DutyCurrencyEnum["Aud"] = "AUD";
    DutyCurrencyEnum["Awg"] = "AWG";
    DutyCurrencyEnum["Azn"] = "AZN";
    DutyCurrencyEnum["Bam"] = "BAM";
    DutyCurrencyEnum["Bbd"] = "BBD";
    DutyCurrencyEnum["Bdt"] = "BDT";
    DutyCurrencyEnum["Xof"] = "XOF";
    DutyCurrencyEnum["Bgn"] = "BGN";
    DutyCurrencyEnum["Bhd"] = "BHD";
    DutyCurrencyEnum["Bif"] = "BIF";
    DutyCurrencyEnum["Bmd"] = "BMD";
    DutyCurrencyEnum["Bnd"] = "BND";
    DutyCurrencyEnum["Bob"] = "BOB";
    DutyCurrencyEnum["Brl"] = "BRL";
    DutyCurrencyEnum["Bsd"] = "BSD";
    DutyCurrencyEnum["Btn"] = "BTN";
    DutyCurrencyEnum["Bwp"] = "BWP";
    DutyCurrencyEnum["Byn"] = "BYN";
    DutyCurrencyEnum["Bzd"] = "BZD";
    DutyCurrencyEnum["Cad"] = "CAD";
    DutyCurrencyEnum["Cdf"] = "CDF";
    DutyCurrencyEnum["Xaf"] = "XAF";
    DutyCurrencyEnum["Chf"] = "CHF";
    DutyCurrencyEnum["Nzd"] = "NZD";
    DutyCurrencyEnum["Clp"] = "CLP";
    DutyCurrencyEnum["Cny"] = "CNY";
    DutyCurrencyEnum["Cop"] = "COP";
    DutyCurrencyEnum["Crc"] = "CRC";
    DutyCurrencyEnum["Cuc"] = "CUC";
    DutyCurrencyEnum["Cve"] = "CVE";
    DutyCurrencyEnum["Czk"] = "CZK";
    DutyCurrencyEnum["Djf"] = "DJF";
    DutyCurrencyEnum["Dkk"] = "DKK";
    DutyCurrencyEnum["Dop"] = "DOP";
    DutyCurrencyEnum["Dzd"] = "DZD";
    DutyCurrencyEnum["Egp"] = "EGP";
    DutyCurrencyEnum["Ern"] = "ERN";
    DutyCurrencyEnum["Etb"] = "ETB";
    DutyCurrencyEnum["Fjd"] = "FJD";
    DutyCurrencyEnum["Gbp"] = "GBP";
    DutyCurrencyEnum["Gel"] = "GEL";
    DutyCurrencyEnum["Ghs"] = "GHS";
    DutyCurrencyEnum["Gmd"] = "GMD";
    DutyCurrencyEnum["Gnf"] = "GNF";
    DutyCurrencyEnum["Gtq"] = "GTQ";
    DutyCurrencyEnum["Gyd"] = "GYD";
    DutyCurrencyEnum["Hkd"] = "HKD";
    DutyCurrencyEnum["Hnl"] = "HNL";
    DutyCurrencyEnum["Hrk"] = "HRK";
    DutyCurrencyEnum["Htg"] = "HTG";
    DutyCurrencyEnum["Huf"] = "HUF";
    DutyCurrencyEnum["Idr"] = "IDR";
    DutyCurrencyEnum["Ils"] = "ILS";
    DutyCurrencyEnum["Inr"] = "INR";
    DutyCurrencyEnum["Irr"] = "IRR";
    DutyCurrencyEnum["Isk"] = "ISK";
    DutyCurrencyEnum["Jmd"] = "JMD";
    DutyCurrencyEnum["Jod"] = "JOD";
    DutyCurrencyEnum["Jpy"] = "JPY";
    DutyCurrencyEnum["Kes"] = "KES";
    DutyCurrencyEnum["Kgs"] = "KGS";
    DutyCurrencyEnum["Khr"] = "KHR";
    DutyCurrencyEnum["Kmf"] = "KMF";
    DutyCurrencyEnum["Kpw"] = "KPW";
    DutyCurrencyEnum["Krw"] = "KRW";
    DutyCurrencyEnum["Kwd"] = "KWD";
    DutyCurrencyEnum["Kyd"] = "KYD";
    DutyCurrencyEnum["Kzt"] = "KZT";
    DutyCurrencyEnum["Lak"] = "LAK";
    DutyCurrencyEnum["Lkr"] = "LKR";
    DutyCurrencyEnum["Lrd"] = "LRD";
    DutyCurrencyEnum["Lsl"] = "LSL";
    DutyCurrencyEnum["Lyd"] = "LYD";
    DutyCurrencyEnum["Mad"] = "MAD";
    DutyCurrencyEnum["Mdl"] = "MDL";
    DutyCurrencyEnum["Mga"] = "MGA";
    DutyCurrencyEnum["Mkd"] = "MKD";
    DutyCurrencyEnum["Mmk"] = "MMK";
    DutyCurrencyEnum["Mnt"] = "MNT";
    DutyCurrencyEnum["Mop"] = "MOP";
    DutyCurrencyEnum["Mro"] = "MRO";
    DutyCurrencyEnum["Mur"] = "MUR";
    DutyCurrencyEnum["Mvr"] = "MVR";
    DutyCurrencyEnum["Mwk"] = "MWK";
    DutyCurrencyEnum["Mxn"] = "MXN";
    DutyCurrencyEnum["Myr"] = "MYR";
    DutyCurrencyEnum["Mzn"] = "MZN";
    DutyCurrencyEnum["Nad"] = "NAD";
    DutyCurrencyEnum["Xpf"] = "XPF";
    DutyCurrencyEnum["Ngn"] = "NGN";
    DutyCurrencyEnum["Nio"] = "NIO";
    DutyCurrencyEnum["Nok"] = "NOK";
    DutyCurrencyEnum["Npr"] = "NPR";
    DutyCurrencyEnum["Omr"] = "OMR";
    DutyCurrencyEnum["Pen"] = "PEN";
    DutyCurrencyEnum["Pgk"] = "PGK";
    DutyCurrencyEnum["Php"] = "PHP";
    DutyCurrencyEnum["Pkr"] = "PKR";
    DutyCurrencyEnum["Pln"] = "PLN";
    DutyCurrencyEnum["Pyg"] = "PYG";
    DutyCurrencyEnum["Qar"] = "QAR";
    DutyCurrencyEnum["Rsd"] = "RSD";
    DutyCurrencyEnum["Rub"] = "RUB";
    DutyCurrencyEnum["Rwf"] = "RWF";
    DutyCurrencyEnum["Sar"] = "SAR";
    DutyCurrencyEnum["Sbd"] = "SBD";
    DutyCurrencyEnum["Scr"] = "SCR";
    DutyCurrencyEnum["Sdg"] = "SDG";
    DutyCurrencyEnum["Sek"] = "SEK";
    DutyCurrencyEnum["Sgd"] = "SGD";
    DutyCurrencyEnum["Shp"] = "SHP";
    DutyCurrencyEnum["Sll"] = "SLL";
    DutyCurrencyEnum["Sos"] = "SOS";
    DutyCurrencyEnum["Srd"] = "SRD";
    DutyCurrencyEnum["Ssp"] = "SSP";
    DutyCurrencyEnum["Std"] = "STD";
    DutyCurrencyEnum["Syp"] = "SYP";
    DutyCurrencyEnum["Szl"] = "SZL";
    DutyCurrencyEnum["Thb"] = "THB";
    DutyCurrencyEnum["Tjs"] = "TJS";
    DutyCurrencyEnum["Tnd"] = "TND";
    DutyCurrencyEnum["Top"] = "TOP";
    DutyCurrencyEnum["Try"] = "TRY";
    DutyCurrencyEnum["Ttd"] = "TTD";
    DutyCurrencyEnum["Twd"] = "TWD";
    DutyCurrencyEnum["Tzs"] = "TZS";
    DutyCurrencyEnum["Uah"] = "UAH";
    DutyCurrencyEnum["Uyu"] = "UYU";
    DutyCurrencyEnum["Uzs"] = "UZS";
    DutyCurrencyEnum["Vef"] = "VEF";
    DutyCurrencyEnum["Vnd"] = "VND";
    DutyCurrencyEnum["Vuv"] = "VUV";
    DutyCurrencyEnum["Wst"] = "WST";
    DutyCurrencyEnum["Yer"] = "YER";
    DutyCurrencyEnum["Zar"] = "ZAR";
})(DutyCurrencyEnum = exports.DutyCurrencyEnum || (exports.DutyCurrencyEnum = {}));
function DutyFromJSON(json) {
    return DutyFromJSONTyped(json, false);
}
exports.DutyFromJSON = DutyFromJSON;
function DutyFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'paid_by': !runtime_1.exists(json, 'paid_by') ? undefined : json['paid_by'],
        'currency': !runtime_1.exists(json, 'currency') ? undefined : json['currency'],
        'declared_value': !runtime_1.exists(json, 'declared_value') ? undefined : json['declared_value'],
        'account_number': !runtime_1.exists(json, 'account_number') ? undefined : json['account_number'],
        'bill_to': !runtime_1.exists(json, 'bill_to') ? undefined : _1.AddressFromJSON(json['bill_to']),
    };
}
exports.DutyFromJSONTyped = DutyFromJSONTyped;
function DutyToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'paid_by': value.paid_by,
        'currency': value.currency,
        'declared_value': value.declared_value,
        'account_number': value.account_number,
        'bill_to': _1.AddressToJSON(value.bill_to),
    };
}
exports.DutyToJSON = DutyToJSON;


/***/ }),

/***/ "./api/models/ErrorResponse.ts":
/*!*************************************!*\
  !*** ./api/models/ErrorResponse.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorResponseToJSON = exports.ErrorResponseFromJSONTyped = exports.ErrorResponseFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function ErrorResponseFromJSON(json) {
    return ErrorResponseFromJSONTyped(json, false);
}
exports.ErrorResponseFromJSON = ErrorResponseFromJSON;
function ErrorResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'messages': !runtime_1.exists(json, 'messages') ? undefined : (json['messages'].map(_1.MessageFromJSON)),
    };
}
exports.ErrorResponseFromJSONTyped = ErrorResponseFromJSONTyped;
function ErrorResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'messages': value.messages === undefined ? undefined : (value.messages.map(_1.MessageToJSON)),
    };
}
exports.ErrorResponseToJSON = ErrorResponseToJSON;


/***/ }),

/***/ "./api/models/Message.ts":
/*!*******************************!*\
  !*** ./api/models/Message.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageToJSON = exports.MessageFromJSONTyped = exports.MessageFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function MessageFromJSON(json) {
    return MessageFromJSONTyped(json, false);
}
exports.MessageFromJSON = MessageFromJSON;
function MessageFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'carrier_name': !runtime_1.exists(json, 'carrier_name') ? undefined : json['carrier_name'],
        'carrier_id': !runtime_1.exists(json, 'carrier_id') ? undefined : json['carrier_id'],
        'message': !runtime_1.exists(json, 'message') ? undefined : json['message'],
        'code': !runtime_1.exists(json, 'code') ? undefined : json['code'],
        'details': !runtime_1.exists(json, 'details') ? undefined : json['details'],
    };
}
exports.MessageFromJSONTyped = MessageFromJSONTyped;
function MessageToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'message': value.message,
        'code': value.code,
        'details': value.details,
    };
}
exports.MessageToJSON = MessageToJSON;


/***/ }),

/***/ "./api/models/Operation.ts":
/*!*********************************!*\
  !*** ./api/models/Operation.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OperationToJSON = exports.OperationFromJSONTyped = exports.OperationFromJSON = void 0;
function OperationFromJSON(json) {
    return OperationFromJSONTyped(json, false);
}
exports.OperationFromJSON = OperationFromJSON;
function OperationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'operation': json['operation'],
        'success': json['success'],
    };
}
exports.OperationFromJSONTyped = OperationFromJSONTyped;
function OperationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'operation': value.operation,
        'success': value.success,
    };
}
exports.OperationToJSON = OperationToJSON;


/***/ }),

/***/ "./api/models/OperationConfirmation.ts":
/*!*********************************************!*\
  !*** ./api/models/OperationConfirmation.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OperationConfirmationToJSON = exports.OperationConfirmationFromJSONTyped = exports.OperationConfirmationFromJSON = void 0;
function OperationConfirmationFromJSON(json) {
    return OperationConfirmationFromJSONTyped(json, false);
}
exports.OperationConfirmationFromJSON = OperationConfirmationFromJSON;
function OperationConfirmationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'operation': json['operation'],
        'success': json['success'],
        'carrier_name': json['carrier_name'],
        'carrier_id': json['carrier_id'],
    };
}
exports.OperationConfirmationFromJSONTyped = OperationConfirmationFromJSONTyped;
function OperationConfirmationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'operation': value.operation,
        'success': value.success,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
    };
}
exports.OperationConfirmationToJSON = OperationConfirmationToJSON;


/***/ }),

/***/ "./api/models/OperationResponse.ts":
/*!*****************************************!*\
  !*** ./api/models/OperationResponse.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OperationResponseToJSON = exports.OperationResponseFromJSONTyped = exports.OperationResponseFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function OperationResponseFromJSON(json) {
    return OperationResponseFromJSONTyped(json, false);
}
exports.OperationResponseFromJSON = OperationResponseFromJSON;
function OperationResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'messages': !runtime_1.exists(json, 'messages') ? undefined : (json['messages'].map(_1.MessageFromJSON)),
        'confirmation': !runtime_1.exists(json, 'confirmation') ? undefined : _1.OperationConfirmationFromJSON(json['confirmation']),
    };
}
exports.OperationResponseFromJSONTyped = OperationResponseFromJSONTyped;
function OperationResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'messages': value.messages === undefined ? undefined : (value.messages.map(_1.MessageToJSON)),
        'confirmation': _1.OperationConfirmationToJSON(value.confirmation),
    };
}
exports.OperationResponseToJSON = OperationResponseToJSON;


/***/ }),

/***/ "./api/models/Parcel.ts":
/*!******************************!*\
  !*** ./api/models/Parcel.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParcelToJSON = exports.ParcelFromJSONTyped = exports.ParcelFromJSON = exports.ParcelDimensionUnitEnum = exports.ParcelWeightUnitEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var ParcelWeightUnitEnum;
(function (ParcelWeightUnitEnum) {
    ParcelWeightUnitEnum["Kg"] = "KG";
    ParcelWeightUnitEnum["Lb"] = "LB";
})(ParcelWeightUnitEnum = exports.ParcelWeightUnitEnum || (exports.ParcelWeightUnitEnum = {})); /**
* @export
* @enum {string}
*/
var ParcelDimensionUnitEnum;
(function (ParcelDimensionUnitEnum) {
    ParcelDimensionUnitEnum["Cm"] = "CM";
    ParcelDimensionUnitEnum["In"] = "IN";
})(ParcelDimensionUnitEnum = exports.ParcelDimensionUnitEnum || (exports.ParcelDimensionUnitEnum = {}));
function ParcelFromJSON(json) {
    return ParcelFromJSONTyped(json, false);
}
exports.ParcelFromJSON = ParcelFromJSON;
function ParcelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'weight': json['weight'],
        'width': !runtime_1.exists(json, 'width') ? undefined : json['width'],
        'height': !runtime_1.exists(json, 'height') ? undefined : json['height'],
        'length': !runtime_1.exists(json, 'length') ? undefined : json['length'],
        'packaging_type': !runtime_1.exists(json, 'packaging_type') ? undefined : json['packaging_type'],
        'package_preset': !runtime_1.exists(json, 'package_preset') ? undefined : json['package_preset'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'content': !runtime_1.exists(json, 'content') ? undefined : json['content'],
        'is_document': !runtime_1.exists(json, 'is_document') ? undefined : json['is_document'],
        'weight_unit': json['weight_unit'],
        'dimension_unit': !runtime_1.exists(json, 'dimension_unit') ? undefined : json['dimension_unit'],
    };
}
exports.ParcelFromJSONTyped = ParcelFromJSONTyped;
function ParcelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'weight': value.weight,
        'width': value.width,
        'height': value.height,
        'length': value.length,
        'packaging_type': value.packaging_type,
        'package_preset': value.package_preset,
        'description': value.description,
        'content': value.content,
        'is_document': value.is_document,
        'weight_unit': value.weight_unit,
        'dimension_unit': value.dimension_unit,
    };
}
exports.ParcelToJSON = ParcelToJSON;


/***/ }),

/***/ "./api/models/ParcelData.ts":
/*!**********************************!*\
  !*** ./api/models/ParcelData.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParcelDataToJSON = exports.ParcelDataFromJSONTyped = exports.ParcelDataFromJSON = exports.ParcelDataDimensionUnitEnum = exports.ParcelDataWeightUnitEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var ParcelDataWeightUnitEnum;
(function (ParcelDataWeightUnitEnum) {
    ParcelDataWeightUnitEnum["Kg"] = "KG";
    ParcelDataWeightUnitEnum["Lb"] = "LB";
})(ParcelDataWeightUnitEnum = exports.ParcelDataWeightUnitEnum || (exports.ParcelDataWeightUnitEnum = {})); /**
* @export
* @enum {string}
*/
var ParcelDataDimensionUnitEnum;
(function (ParcelDataDimensionUnitEnum) {
    ParcelDataDimensionUnitEnum["Cm"] = "CM";
    ParcelDataDimensionUnitEnum["In"] = "IN";
})(ParcelDataDimensionUnitEnum = exports.ParcelDataDimensionUnitEnum || (exports.ParcelDataDimensionUnitEnum = {}));
function ParcelDataFromJSON(json) {
    return ParcelDataFromJSONTyped(json, false);
}
exports.ParcelDataFromJSON = ParcelDataFromJSON;
function ParcelDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'weight': json['weight'],
        'width': !runtime_1.exists(json, 'width') ? undefined : json['width'],
        'height': !runtime_1.exists(json, 'height') ? undefined : json['height'],
        'length': !runtime_1.exists(json, 'length') ? undefined : json['length'],
        'packaging_type': !runtime_1.exists(json, 'packaging_type') ? undefined : json['packaging_type'],
        'package_preset': !runtime_1.exists(json, 'package_preset') ? undefined : json['package_preset'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'content': !runtime_1.exists(json, 'content') ? undefined : json['content'],
        'is_document': !runtime_1.exists(json, 'is_document') ? undefined : json['is_document'],
        'weight_unit': json['weight_unit'],
        'dimension_unit': !runtime_1.exists(json, 'dimension_unit') ? undefined : json['dimension_unit'],
    };
}
exports.ParcelDataFromJSONTyped = ParcelDataFromJSONTyped;
function ParcelDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'weight': value.weight,
        'width': value.width,
        'height': value.height,
        'length': value.length,
        'packaging_type': value.packaging_type,
        'package_preset': value.package_preset,
        'description': value.description,
        'content': value.content,
        'is_document': value.is_document,
        'weight_unit': value.weight_unit,
        'dimension_unit': value.dimension_unit,
    };
}
exports.ParcelDataToJSON = ParcelDataToJSON;


/***/ }),

/***/ "./api/models/ParcelList.ts":
/*!**********************************!*\
  !*** ./api/models/ParcelList.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParcelListToJSON = exports.ParcelListFromJSONTyped = exports.ParcelListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function ParcelListFromJSON(json) {
    return ParcelListFromJSONTyped(json, false);
}
exports.ParcelListFromJSON = ParcelListFromJSON;
function ParcelListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.ParcelFromJSON)),
    };
}
exports.ParcelListFromJSONTyped = ParcelListFromJSONTyped;
function ParcelListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.ParcelToJSON)),
    };
}
exports.ParcelListToJSON = ParcelListToJSON;


/***/ }),

/***/ "./api/models/Payment.ts":
/*!*******************************!*\
  !*** ./api/models/Payment.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaymentToJSON = exports.PaymentFromJSONTyped = exports.PaymentFromJSON = exports.PaymentCurrencyEnum = exports.PaymentPaidByEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var PaymentPaidByEnum;
(function (PaymentPaidByEnum) {
    PaymentPaidByEnum["Sender"] = "sender";
    PaymentPaidByEnum["Recipient"] = "recipient";
    PaymentPaidByEnum["ThirdParty"] = "third_party";
})(PaymentPaidByEnum = exports.PaymentPaidByEnum || (exports.PaymentPaidByEnum = {})); /**
* @export
* @enum {string}
*/
var PaymentCurrencyEnum;
(function (PaymentCurrencyEnum) {
    PaymentCurrencyEnum["Eur"] = "EUR";
    PaymentCurrencyEnum["Aed"] = "AED";
    PaymentCurrencyEnum["Usd"] = "USD";
    PaymentCurrencyEnum["Xcd"] = "XCD";
    PaymentCurrencyEnum["Amd"] = "AMD";
    PaymentCurrencyEnum["Ang"] = "ANG";
    PaymentCurrencyEnum["Aoa"] = "AOA";
    PaymentCurrencyEnum["Ars"] = "ARS";
    PaymentCurrencyEnum["Aud"] = "AUD";
    PaymentCurrencyEnum["Awg"] = "AWG";
    PaymentCurrencyEnum["Azn"] = "AZN";
    PaymentCurrencyEnum["Bam"] = "BAM";
    PaymentCurrencyEnum["Bbd"] = "BBD";
    PaymentCurrencyEnum["Bdt"] = "BDT";
    PaymentCurrencyEnum["Xof"] = "XOF";
    PaymentCurrencyEnum["Bgn"] = "BGN";
    PaymentCurrencyEnum["Bhd"] = "BHD";
    PaymentCurrencyEnum["Bif"] = "BIF";
    PaymentCurrencyEnum["Bmd"] = "BMD";
    PaymentCurrencyEnum["Bnd"] = "BND";
    PaymentCurrencyEnum["Bob"] = "BOB";
    PaymentCurrencyEnum["Brl"] = "BRL";
    PaymentCurrencyEnum["Bsd"] = "BSD";
    PaymentCurrencyEnum["Btn"] = "BTN";
    PaymentCurrencyEnum["Bwp"] = "BWP";
    PaymentCurrencyEnum["Byn"] = "BYN";
    PaymentCurrencyEnum["Bzd"] = "BZD";
    PaymentCurrencyEnum["Cad"] = "CAD";
    PaymentCurrencyEnum["Cdf"] = "CDF";
    PaymentCurrencyEnum["Xaf"] = "XAF";
    PaymentCurrencyEnum["Chf"] = "CHF";
    PaymentCurrencyEnum["Nzd"] = "NZD";
    PaymentCurrencyEnum["Clp"] = "CLP";
    PaymentCurrencyEnum["Cny"] = "CNY";
    PaymentCurrencyEnum["Cop"] = "COP";
    PaymentCurrencyEnum["Crc"] = "CRC";
    PaymentCurrencyEnum["Cuc"] = "CUC";
    PaymentCurrencyEnum["Cve"] = "CVE";
    PaymentCurrencyEnum["Czk"] = "CZK";
    PaymentCurrencyEnum["Djf"] = "DJF";
    PaymentCurrencyEnum["Dkk"] = "DKK";
    PaymentCurrencyEnum["Dop"] = "DOP";
    PaymentCurrencyEnum["Dzd"] = "DZD";
    PaymentCurrencyEnum["Egp"] = "EGP";
    PaymentCurrencyEnum["Ern"] = "ERN";
    PaymentCurrencyEnum["Etb"] = "ETB";
    PaymentCurrencyEnum["Fjd"] = "FJD";
    PaymentCurrencyEnum["Gbp"] = "GBP";
    PaymentCurrencyEnum["Gel"] = "GEL";
    PaymentCurrencyEnum["Ghs"] = "GHS";
    PaymentCurrencyEnum["Gmd"] = "GMD";
    PaymentCurrencyEnum["Gnf"] = "GNF";
    PaymentCurrencyEnum["Gtq"] = "GTQ";
    PaymentCurrencyEnum["Gyd"] = "GYD";
    PaymentCurrencyEnum["Hkd"] = "HKD";
    PaymentCurrencyEnum["Hnl"] = "HNL";
    PaymentCurrencyEnum["Hrk"] = "HRK";
    PaymentCurrencyEnum["Htg"] = "HTG";
    PaymentCurrencyEnum["Huf"] = "HUF";
    PaymentCurrencyEnum["Idr"] = "IDR";
    PaymentCurrencyEnum["Ils"] = "ILS";
    PaymentCurrencyEnum["Inr"] = "INR";
    PaymentCurrencyEnum["Irr"] = "IRR";
    PaymentCurrencyEnum["Isk"] = "ISK";
    PaymentCurrencyEnum["Jmd"] = "JMD";
    PaymentCurrencyEnum["Jod"] = "JOD";
    PaymentCurrencyEnum["Jpy"] = "JPY";
    PaymentCurrencyEnum["Kes"] = "KES";
    PaymentCurrencyEnum["Kgs"] = "KGS";
    PaymentCurrencyEnum["Khr"] = "KHR";
    PaymentCurrencyEnum["Kmf"] = "KMF";
    PaymentCurrencyEnum["Kpw"] = "KPW";
    PaymentCurrencyEnum["Krw"] = "KRW";
    PaymentCurrencyEnum["Kwd"] = "KWD";
    PaymentCurrencyEnum["Kyd"] = "KYD";
    PaymentCurrencyEnum["Kzt"] = "KZT";
    PaymentCurrencyEnum["Lak"] = "LAK";
    PaymentCurrencyEnum["Lkr"] = "LKR";
    PaymentCurrencyEnum["Lrd"] = "LRD";
    PaymentCurrencyEnum["Lsl"] = "LSL";
    PaymentCurrencyEnum["Lyd"] = "LYD";
    PaymentCurrencyEnum["Mad"] = "MAD";
    PaymentCurrencyEnum["Mdl"] = "MDL";
    PaymentCurrencyEnum["Mga"] = "MGA";
    PaymentCurrencyEnum["Mkd"] = "MKD";
    PaymentCurrencyEnum["Mmk"] = "MMK";
    PaymentCurrencyEnum["Mnt"] = "MNT";
    PaymentCurrencyEnum["Mop"] = "MOP";
    PaymentCurrencyEnum["Mro"] = "MRO";
    PaymentCurrencyEnum["Mur"] = "MUR";
    PaymentCurrencyEnum["Mvr"] = "MVR";
    PaymentCurrencyEnum["Mwk"] = "MWK";
    PaymentCurrencyEnum["Mxn"] = "MXN";
    PaymentCurrencyEnum["Myr"] = "MYR";
    PaymentCurrencyEnum["Mzn"] = "MZN";
    PaymentCurrencyEnum["Nad"] = "NAD";
    PaymentCurrencyEnum["Xpf"] = "XPF";
    PaymentCurrencyEnum["Ngn"] = "NGN";
    PaymentCurrencyEnum["Nio"] = "NIO";
    PaymentCurrencyEnum["Nok"] = "NOK";
    PaymentCurrencyEnum["Npr"] = "NPR";
    PaymentCurrencyEnum["Omr"] = "OMR";
    PaymentCurrencyEnum["Pen"] = "PEN";
    PaymentCurrencyEnum["Pgk"] = "PGK";
    PaymentCurrencyEnum["Php"] = "PHP";
    PaymentCurrencyEnum["Pkr"] = "PKR";
    PaymentCurrencyEnum["Pln"] = "PLN";
    PaymentCurrencyEnum["Pyg"] = "PYG";
    PaymentCurrencyEnum["Qar"] = "QAR";
    PaymentCurrencyEnum["Rsd"] = "RSD";
    PaymentCurrencyEnum["Rub"] = "RUB";
    PaymentCurrencyEnum["Rwf"] = "RWF";
    PaymentCurrencyEnum["Sar"] = "SAR";
    PaymentCurrencyEnum["Sbd"] = "SBD";
    PaymentCurrencyEnum["Scr"] = "SCR";
    PaymentCurrencyEnum["Sdg"] = "SDG";
    PaymentCurrencyEnum["Sek"] = "SEK";
    PaymentCurrencyEnum["Sgd"] = "SGD";
    PaymentCurrencyEnum["Shp"] = "SHP";
    PaymentCurrencyEnum["Sll"] = "SLL";
    PaymentCurrencyEnum["Sos"] = "SOS";
    PaymentCurrencyEnum["Srd"] = "SRD";
    PaymentCurrencyEnum["Ssp"] = "SSP";
    PaymentCurrencyEnum["Std"] = "STD";
    PaymentCurrencyEnum["Syp"] = "SYP";
    PaymentCurrencyEnum["Szl"] = "SZL";
    PaymentCurrencyEnum["Thb"] = "THB";
    PaymentCurrencyEnum["Tjs"] = "TJS";
    PaymentCurrencyEnum["Tnd"] = "TND";
    PaymentCurrencyEnum["Top"] = "TOP";
    PaymentCurrencyEnum["Try"] = "TRY";
    PaymentCurrencyEnum["Ttd"] = "TTD";
    PaymentCurrencyEnum["Twd"] = "TWD";
    PaymentCurrencyEnum["Tzs"] = "TZS";
    PaymentCurrencyEnum["Uah"] = "UAH";
    PaymentCurrencyEnum["Uyu"] = "UYU";
    PaymentCurrencyEnum["Uzs"] = "UZS";
    PaymentCurrencyEnum["Vef"] = "VEF";
    PaymentCurrencyEnum["Vnd"] = "VND";
    PaymentCurrencyEnum["Vuv"] = "VUV";
    PaymentCurrencyEnum["Wst"] = "WST";
    PaymentCurrencyEnum["Yer"] = "YER";
    PaymentCurrencyEnum["Zar"] = "ZAR";
})(PaymentCurrencyEnum = exports.PaymentCurrencyEnum || (exports.PaymentCurrencyEnum = {}));
function PaymentFromJSON(json) {
    return PaymentFromJSONTyped(json, false);
}
exports.PaymentFromJSON = PaymentFromJSON;
function PaymentFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'paid_by': !runtime_1.exists(json, 'paid_by') ? undefined : json['paid_by'],
        'currency': !runtime_1.exists(json, 'currency') ? undefined : json['currency'],
        'account_number': !runtime_1.exists(json, 'account_number') ? undefined : json['account_number'],
    };
}
exports.PaymentFromJSONTyped = PaymentFromJSONTyped;
function PaymentToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'paid_by': value.paid_by,
        'currency': value.currency,
        'account_number': value.account_number,
    };
}
exports.PaymentToJSON = PaymentToJSON;


/***/ }),

/***/ "./api/models/Pickup.ts":
/*!******************************!*\
  !*** ./api/models/Pickup.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupToJSON = exports.PickupFromJSONTyped = exports.PickupFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupFromJSON(json) {
    return PickupFromJSONTyped(json, false);
}
exports.PickupFromJSON = PickupFromJSON;
function PickupFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'carrier_name': json['carrier_name'],
        'carrier_id': json['carrier_id'],
        'confirmation_number': json['confirmation_number'],
        'pickup_date': !runtime_1.exists(json, 'pickup_date') ? undefined : json['pickup_date'],
        'pickup_charge': !runtime_1.exists(json, 'pickup_charge') ? undefined : _1.ChargeFromJSON(json['pickup_charge']),
        'ready_time': !runtime_1.exists(json, 'ready_time') ? undefined : json['ready_time'],
        'closing_time': !runtime_1.exists(json, 'closing_time') ? undefined : json['closing_time'],
        'address': _1.AddressFromJSON(json['address']),
        'parcels': (json['parcels'] === null ? null : json['parcels'].map(_1.ParcelFromJSON)),
        'instruction': !runtime_1.exists(json, 'instruction') ? undefined : json['instruction'],
        'package_location': !runtime_1.exists(json, 'package_location') ? undefined : json['package_location'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'test_mode': json['test_mode'],
    };
}
exports.PickupFromJSONTyped = PickupFromJSONTyped;
function PickupToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'confirmation_number': value.confirmation_number,
        'pickup_date': value.pickup_date,
        'pickup_charge': _1.ChargeToJSON(value.pickup_charge),
        'ready_time': value.ready_time,
        'closing_time': value.closing_time,
        'address': _1.AddressToJSON(value.address),
        'parcels': (value.parcels === null ? null : value.parcels.map(_1.ParcelToJSON)),
        'instruction': value.instruction,
        'package_location': value.package_location,
        'options': value.options,
        'test_mode': value.test_mode,
    };
}
exports.PickupToJSON = PickupToJSON;


/***/ }),

/***/ "./api/models/PickupCancelData.ts":
/*!****************************************!*\
  !*** ./api/models/PickupCancelData.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupCancelDataToJSON = exports.PickupCancelDataFromJSONTyped = exports.PickupCancelDataFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function PickupCancelDataFromJSON(json) {
    return PickupCancelDataFromJSONTyped(json, false);
}
exports.PickupCancelDataFromJSON = PickupCancelDataFromJSON;
function PickupCancelDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reason': !runtime_1.exists(json, 'reason') ? undefined : json['reason'],
    };
}
exports.PickupCancelDataFromJSONTyped = PickupCancelDataFromJSONTyped;
function PickupCancelDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reason': value.reason,
    };
}
exports.PickupCancelDataToJSON = PickupCancelDataToJSON;


/***/ }),

/***/ "./api/models/PickupCancelRequest.ts":
/*!*******************************************!*\
  !*** ./api/models/PickupCancelRequest.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupCancelRequestToJSON = exports.PickupCancelRequestFromJSONTyped = exports.PickupCancelRequestFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupCancelRequestFromJSON(json) {
    return PickupCancelRequestFromJSONTyped(json, false);
}
exports.PickupCancelRequestFromJSON = PickupCancelRequestFromJSON;
function PickupCancelRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'confirmation_number': json['confirmation_number'],
        'address': !runtime_1.exists(json, 'address') ? undefined : _1.AddressDataFromJSON(json['address']),
        'pickup_date': !runtime_1.exists(json, 'pickup_date') ? undefined : json['pickup_date'],
        'reason': !runtime_1.exists(json, 'reason') ? undefined : json['reason'],
    };
}
exports.PickupCancelRequestFromJSONTyped = PickupCancelRequestFromJSONTyped;
function PickupCancelRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'confirmation_number': value.confirmation_number,
        'address': _1.AddressDataToJSON(value.address),
        'pickup_date': value.pickup_date,
        'reason': value.reason,
    };
}
exports.PickupCancelRequestToJSON = PickupCancelRequestToJSON;


/***/ }),

/***/ "./api/models/PickupData.ts":
/*!**********************************!*\
  !*** ./api/models/PickupData.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupDataToJSON = exports.PickupDataFromJSONTyped = exports.PickupDataFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupDataFromJSON(json) {
    return PickupDataFromJSONTyped(json, false);
}
exports.PickupDataFromJSON = PickupDataFromJSON;
function PickupDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pickup_date': json['pickup_date'],
        'address': !runtime_1.exists(json, 'address') ? undefined : _1.AddressDataFromJSON(json['address']),
        'ready_time': json['ready_time'],
        'closing_time': json['closing_time'],
        'instruction': !runtime_1.exists(json, 'instruction') ? undefined : json['instruction'],
        'package_location': !runtime_1.exists(json, 'package_location') ? undefined : json['package_location'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'tracking_numbers': json['tracking_numbers'],
    };
}
exports.PickupDataFromJSONTyped = PickupDataFromJSONTyped;
function PickupDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'pickup_date': value.pickup_date,
        'address': _1.AddressDataToJSON(value.address),
        'ready_time': value.ready_time,
        'closing_time': value.closing_time,
        'instruction': value.instruction,
        'package_location': value.package_location,
        'options': value.options,
        'tracking_numbers': value.tracking_numbers,
    };
}
exports.PickupDataToJSON = PickupDataToJSON;


/***/ }),

/***/ "./api/models/PickupList.ts":
/*!**********************************!*\
  !*** ./api/models/PickupList.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupListToJSON = exports.PickupListFromJSONTyped = exports.PickupListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupListFromJSON(json) {
    return PickupListFromJSONTyped(json, false);
}
exports.PickupListFromJSON = PickupListFromJSON;
function PickupListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.PickupFromJSON)),
    };
}
exports.PickupListFromJSONTyped = PickupListFromJSONTyped;
function PickupListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.PickupToJSON)),
    };
}
exports.PickupListToJSON = PickupListToJSON;


/***/ }),

/***/ "./api/models/PickupRequest.ts":
/*!*************************************!*\
  !*** ./api/models/PickupRequest.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupRequestToJSON = exports.PickupRequestFromJSONTyped = exports.PickupRequestFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupRequestFromJSON(json) {
    return PickupRequestFromJSONTyped(json, false);
}
exports.PickupRequestFromJSON = PickupRequestFromJSON;
function PickupRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pickup_date': json['pickup_date'],
        'address': _1.AddressDataFromJSON(json['address']),
        'parcels': (json['parcels'] === null ? null : json['parcels'].map(_1.ParcelDataFromJSON)),
        'ready_time': json['ready_time'],
        'closing_time': json['closing_time'],
        'instruction': !runtime_1.exists(json, 'instruction') ? undefined : json['instruction'],
        'package_location': !runtime_1.exists(json, 'package_location') ? undefined : json['package_location'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
    };
}
exports.PickupRequestFromJSONTyped = PickupRequestFromJSONTyped;
function PickupRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'pickup_date': value.pickup_date,
        'address': _1.AddressDataToJSON(value.address),
        'parcels': (value.parcels === null ? null : value.parcels.map(_1.ParcelDataToJSON)),
        'ready_time': value.ready_time,
        'closing_time': value.closing_time,
        'instruction': value.instruction,
        'package_location': value.package_location,
        'options': value.options,
    };
}
exports.PickupRequestToJSON = PickupRequestToJSON;


/***/ }),

/***/ "./api/models/PickupResponse.ts":
/*!**************************************!*\
  !*** ./api/models/PickupResponse.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupResponseToJSON = exports.PickupResponseFromJSONTyped = exports.PickupResponseFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupResponseFromJSON(json) {
    return PickupResponseFromJSONTyped(json, false);
}
exports.PickupResponseFromJSON = PickupResponseFromJSON;
function PickupResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'messages': !runtime_1.exists(json, 'messages') ? undefined : (json['messages'].map(_1.MessageFromJSON)),
        'pickup': !runtime_1.exists(json, 'pickup') ? undefined : _1.PickupFromJSON(json['pickup']),
    };
}
exports.PickupResponseFromJSONTyped = PickupResponseFromJSONTyped;
function PickupResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'messages': value.messages === undefined ? undefined : (value.messages.map(_1.MessageToJSON)),
        'pickup': _1.PickupToJSON(value.pickup),
    };
}
exports.PickupResponseToJSON = PickupResponseToJSON;


/***/ }),

/***/ "./api/models/PickupUpdateData.ts":
/*!****************************************!*\
  !*** ./api/models/PickupUpdateData.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupUpdateDataToJSON = exports.PickupUpdateDataFromJSONTyped = exports.PickupUpdateDataFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupUpdateDataFromJSON(json) {
    return PickupUpdateDataFromJSONTyped(json, false);
}
exports.PickupUpdateDataFromJSON = PickupUpdateDataFromJSON;
function PickupUpdateDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pickup_date': !runtime_1.exists(json, 'pickup_date') ? undefined : json['pickup_date'],
        'address': !runtime_1.exists(json, 'address') ? undefined : _1.AddressDataFromJSON(json['address']),
        'ready_time': !runtime_1.exists(json, 'ready_time') ? undefined : json['ready_time'],
        'closing_time': !runtime_1.exists(json, 'closing_time') ? undefined : json['closing_time'],
        'instruction': !runtime_1.exists(json, 'instruction') ? undefined : json['instruction'],
        'package_location': !runtime_1.exists(json, 'package_location') ? undefined : json['package_location'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'tracking_numbers': !runtime_1.exists(json, 'tracking_numbers') ? undefined : json['tracking_numbers'],
        'confirmation_number': json['confirmation_number'],
    };
}
exports.PickupUpdateDataFromJSONTyped = PickupUpdateDataFromJSONTyped;
function PickupUpdateDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'pickup_date': value.pickup_date,
        'address': _1.AddressDataToJSON(value.address),
        'ready_time': value.ready_time,
        'closing_time': value.closing_time,
        'instruction': value.instruction,
        'package_location': value.package_location,
        'options': value.options,
        'tracking_numbers': value.tracking_numbers,
        'confirmation_number': value.confirmation_number,
    };
}
exports.PickupUpdateDataToJSON = PickupUpdateDataToJSON;


/***/ }),

/***/ "./api/models/PickupUpdateRequest.ts":
/*!*******************************************!*\
  !*** ./api/models/PickupUpdateRequest.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupUpdateRequestToJSON = exports.PickupUpdateRequestFromJSONTyped = exports.PickupUpdateRequestFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function PickupUpdateRequestFromJSON(json) {
    return PickupUpdateRequestFromJSONTyped(json, false);
}
exports.PickupUpdateRequestFromJSON = PickupUpdateRequestFromJSON;
function PickupUpdateRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pickup_date': json['pickup_date'],
        'address': _1.AddressFromJSON(json['address']),
        'parcels': (json['parcels'] === null ? null : json['parcels'].map(_1.ParcelFromJSON)),
        'confirmation_number': json['confirmation_number'],
        'ready_time': json['ready_time'],
        'closing_time': json['closing_time'],
        'instruction': !runtime_1.exists(json, 'instruction') ? undefined : json['instruction'],
        'package_location': !runtime_1.exists(json, 'package_location') ? undefined : json['package_location'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
    };
}
exports.PickupUpdateRequestFromJSONTyped = PickupUpdateRequestFromJSONTyped;
function PickupUpdateRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'pickup_date': value.pickup_date,
        'address': _1.AddressToJSON(value.address),
        'parcels': (value.parcels === null ? null : value.parcels.map(_1.ParcelToJSON)),
        'confirmation_number': value.confirmation_number,
        'ready_time': value.ready_time,
        'closing_time': value.closing_time,
        'instruction': value.instruction,
        'package_location': value.package_location,
        'options': value.options,
    };
}
exports.PickupUpdateRequestToJSON = PickupUpdateRequestToJSON;


/***/ }),

/***/ "./api/models/Rate.ts":
/*!****************************!*\
  !*** ./api/models/Rate.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RateToJSON = exports.RateFromJSONTyped = exports.RateFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function RateFromJSON(json) {
    return RateFromJSONTyped(json, false);
}
exports.RateFromJSON = RateFromJSON;
function RateFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'carrier_name': json['carrier_name'],
        'carrier_id': json['carrier_id'],
        'currency': json['currency'],
        'service': !runtime_1.exists(json, 'service') ? undefined : json['service'],
        'discount': !runtime_1.exists(json, 'discount') ? undefined : json['discount'],
        'base_charge': !runtime_1.exists(json, 'base_charge') ? undefined : json['base_charge'],
        'total_charge': !runtime_1.exists(json, 'total_charge') ? undefined : json['total_charge'],
        'duties_and_taxes': !runtime_1.exists(json, 'duties_and_taxes') ? undefined : json['duties_and_taxes'],
        'transit_days': !runtime_1.exists(json, 'transit_days') ? undefined : json['transit_days'],
        'extra_charges': !runtime_1.exists(json, 'extra_charges') ? undefined : (json['extra_charges'].map(_1.ChargeFromJSON)),
        'meta': !runtime_1.exists(json, 'meta') ? undefined : json['meta'],
        'carrier_ref': !runtime_1.exists(json, 'carrier_ref') ? undefined : json['carrier_ref'],
        'test_mode': json['test_mode'],
    };
}
exports.RateFromJSONTyped = RateFromJSONTyped;
function RateToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'currency': value.currency,
        'service': value.service,
        'discount': value.discount,
        'base_charge': value.base_charge,
        'total_charge': value.total_charge,
        'duties_and_taxes': value.duties_and_taxes,
        'transit_days': value.transit_days,
        'extra_charges': value.extra_charges === undefined ? undefined : (value.extra_charges.map(_1.ChargeToJSON)),
        'meta': value.meta,
        'carrier_ref': value.carrier_ref,
        'test_mode': value.test_mode,
    };
}
exports.RateToJSON = RateToJSON;


/***/ }),

/***/ "./api/models/RateRequest.ts":
/*!***********************************!*\
  !*** ./api/models/RateRequest.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RateRequestToJSON = exports.RateRequestFromJSONTyped = exports.RateRequestFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function RateRequestFromJSON(json) {
    return RateRequestFromJSONTyped(json, false);
}
exports.RateRequestFromJSON = RateRequestFromJSON;
function RateRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'shipper': _1.AddressDataFromJSON(json['shipper']),
        'recipient': _1.AddressDataFromJSON(json['recipient']),
        'parcels': (json['parcels'].map(_1.ParcelDataFromJSON)),
        'services': !runtime_1.exists(json, 'services') ? undefined : json['services'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'reference': !runtime_1.exists(json, 'reference') ? undefined : json['reference'],
        'carrier_ids': !runtime_1.exists(json, 'carrier_ids') ? undefined : json['carrier_ids'],
    };
}
exports.RateRequestFromJSONTyped = RateRequestFromJSONTyped;
function RateRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'shipper': _1.AddressDataToJSON(value.shipper),
        'recipient': _1.AddressDataToJSON(value.recipient),
        'parcels': (value.parcels.map(_1.ParcelDataToJSON)),
        'services': value.services,
        'options': value.options,
        'reference': value.reference,
        'carrier_ids': value.carrier_ids,
    };
}
exports.RateRequestToJSON = RateRequestToJSON;


/***/ }),

/***/ "./api/models/RateResponse.ts":
/*!************************************!*\
  !*** ./api/models/RateResponse.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RateResponseToJSON = exports.RateResponseFromJSONTyped = exports.RateResponseFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function RateResponseFromJSON(json) {
    return RateResponseFromJSONTyped(json, false);
}
exports.RateResponseFromJSON = RateResponseFromJSON;
function RateResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'messages': !runtime_1.exists(json, 'messages') ? undefined : (json['messages'].map(_1.MessageFromJSON)),
        'rates': (json['rates'].map(_1.RateFromJSON)),
    };
}
exports.RateResponseFromJSONTyped = RateResponseFromJSONTyped;
function RateResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'messages': value.messages === undefined ? undefined : (value.messages.map(_1.MessageToJSON)),
        'rates': (value.rates.map(_1.RateToJSON)),
    };
}
exports.RateResponseToJSON = RateResponseToJSON;


/***/ }),

/***/ "./api/models/References.ts":
/*!**********************************!*\
  !*** ./api/models/References.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReferencesToJSON = exports.ReferencesFromJSONTyped = exports.ReferencesFromJSON = void 0;
function ReferencesFromJSON(json) {
    return ReferencesFromJSONTyped(json, false);
}
exports.ReferencesFromJSON = ReferencesFromJSON;
function ReferencesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'app_name': json['APP_NAME'],
        'app_version': json['APP_VERSION'],
        'app_website': json['APP_WEBSITE'],
        'multi_organizations': json['MULTI_ORGANIZATIONS'],
        'address_auto_complete': json['ADDRESS_AUTO_COMPLETE'],
        'countries': json['countries'],
        'currencies': json['currencies'],
        'carriers': json['carriers'],
        'customs_content_type': json['customs_content_type'],
        'incoterms': json['incoterms'],
        'states': json['states'],
        'services': json['services'],
        'service_names': json['service_names'],
        'options': json['options'],
        'option_names': json['option_names'],
        'package_presets': json['package_presets'],
        'packaging_types': json['packaging_types'],
        'payment_types': json['payment_types'],
        'carrier_capabilities': json['carrier_capabilities'],
    };
}
exports.ReferencesFromJSONTyped = ReferencesFromJSONTyped;
function ReferencesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'APP_NAME': value.app_name,
        'APP_VERSION': value.app_version,
        'APP_WEBSITE': value.app_website,
        'MULTI_ORGANIZATIONS': value.multi_organizations,
        'ADDRESS_AUTO_COMPLETE': value.address_auto_complete,
        'countries': value.countries,
        'currencies': value.currencies,
        'carriers': value.carriers,
        'customs_content_type': value.customs_content_type,
        'incoterms': value.incoterms,
        'states': value.states,
        'services': value.services,
        'service_names': value.service_names,
        'options': value.options,
        'option_names': value.option_names,
        'package_presets': value.package_presets,
        'packaging_types': value.packaging_types,
        'payment_types': value.payment_types,
        'carrier_capabilities': value.carrier_capabilities,
    };
}
exports.ReferencesToJSON = ReferencesToJSON;


/***/ }),

/***/ "./api/models/Shipment.ts":
/*!********************************!*\
  !*** ./api/models/Shipment.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShipmentToJSON = exports.ShipmentFromJSONTyped = exports.ShipmentFromJSON = exports.ShipmentLabelTypeEnum = exports.ShipmentStatusEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var ShipmentStatusEnum;
(function (ShipmentStatusEnum) {
    ShipmentStatusEnum["Created"] = "created";
    ShipmentStatusEnum["Purchased"] = "purchased";
    ShipmentStatusEnum["Cancelled"] = "cancelled";
    ShipmentStatusEnum["Shipped"] = "shipped";
    ShipmentStatusEnum["InTransit"] = "in-transit";
    ShipmentStatusEnum["Delivered"] = "delivered";
})(ShipmentStatusEnum = exports.ShipmentStatusEnum || (exports.ShipmentStatusEnum = {})); /**
* @export
* @enum {string}
*/
var ShipmentLabelTypeEnum;
(function (ShipmentLabelTypeEnum) {
    ShipmentLabelTypeEnum["Pdf"] = "PDF";
    ShipmentLabelTypeEnum["Zpl"] = "ZPL";
})(ShipmentLabelTypeEnum = exports.ShipmentLabelTypeEnum || (exports.ShipmentLabelTypeEnum = {}));
function ShipmentFromJSON(json) {
    return ShipmentFromJSONTyped(json, false);
}
exports.ShipmentFromJSON = ShipmentFromJSON;
function ShipmentFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'status': !runtime_1.exists(json, 'status') ? undefined : json['status'],
        'carrier_name': !runtime_1.exists(json, 'carrier_name') ? undefined : json['carrier_name'],
        'carrier_id': !runtime_1.exists(json, 'carrier_id') ? undefined : json['carrier_id'],
        'label': !runtime_1.exists(json, 'label') ? undefined : json['label'],
        'tracking_number': !runtime_1.exists(json, 'tracking_number') ? undefined : json['tracking_number'],
        'shipment_identifier': !runtime_1.exists(json, 'shipment_identifier') ? undefined : json['shipment_identifier'],
        'selected_rate': !runtime_1.exists(json, 'selected_rate') ? undefined : _1.RateFromJSON(json['selected_rate']),
        'selected_rate_id': !runtime_1.exists(json, 'selected_rate_id') ? undefined : json['selected_rate_id'],
        'rates': !runtime_1.exists(json, 'rates') ? undefined : (json['rates'].map(_1.RateFromJSON)),
        'tracking_url': !runtime_1.exists(json, 'tracking_url') ? undefined : json['tracking_url'],
        'service': !runtime_1.exists(json, 'service') ? undefined : json['service'],
        'shipper': _1.AddressFromJSON(json['shipper']),
        'recipient': _1.AddressFromJSON(json['recipient']),
        'parcels': (json['parcels'].map(_1.ParcelFromJSON)),
        'services': !runtime_1.exists(json, 'services') ? undefined : json['services'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'payment': !runtime_1.exists(json, 'payment') ? undefined : _1.PaymentFromJSON(json['payment']),
        'customs': !runtime_1.exists(json, 'customs') ? undefined : _1.CustomsFromJSON(json['customs']),
        'reference': !runtime_1.exists(json, 'reference') ? undefined : json['reference'],
        'label_type': !runtime_1.exists(json, 'label_type') ? undefined : json['label_type'],
        'carrier_ids': !runtime_1.exists(json, 'carrier_ids') ? undefined : json['carrier_ids'],
        'tracker_id': !runtime_1.exists(json, 'tracker_id') ? undefined : json['tracker_id'],
        'created_at': json['created_at'],
        'test_mode': json['test_mode'],
        'meta': !runtime_1.exists(json, 'meta') ? undefined : json['meta'],
        'messages': !runtime_1.exists(json, 'messages') ? undefined : (json['messages'].map(_1.MessageFromJSON)),
    };
}
exports.ShipmentFromJSONTyped = ShipmentFromJSONTyped;
function ShipmentToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'status': value.status,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'label': value.label,
        'tracking_number': value.tracking_number,
        'shipment_identifier': value.shipment_identifier,
        'selected_rate': _1.RateToJSON(value.selected_rate),
        'selected_rate_id': value.selected_rate_id,
        'rates': value.rates === undefined ? undefined : (value.rates.map(_1.RateToJSON)),
        'tracking_url': value.tracking_url,
        'service': value.service,
        'shipper': _1.AddressToJSON(value.shipper),
        'recipient': _1.AddressToJSON(value.recipient),
        'parcels': (value.parcels.map(_1.ParcelToJSON)),
        'services': value.services,
        'options': value.options,
        'payment': _1.PaymentToJSON(value.payment),
        'customs': _1.CustomsToJSON(value.customs),
        'reference': value.reference,
        'label_type': value.label_type,
        'carrier_ids': value.carrier_ids,
        'tracker_id': value.tracker_id,
        'created_at': value.created_at,
        'test_mode': value.test_mode,
        'meta': value.meta,
        'messages': value.messages === undefined ? undefined : (value.messages.map(_1.MessageToJSON)),
    };
}
exports.ShipmentToJSON = ShipmentToJSON;


/***/ }),

/***/ "./api/models/ShipmentCancelRequest.ts":
/*!*********************************************!*\
  !*** ./api/models/ShipmentCancelRequest.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShipmentCancelRequestToJSON = exports.ShipmentCancelRequestFromJSONTyped = exports.ShipmentCancelRequestFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function ShipmentCancelRequestFromJSON(json) {
    return ShipmentCancelRequestFromJSONTyped(json, false);
}
exports.ShipmentCancelRequestFromJSON = ShipmentCancelRequestFromJSON;
function ShipmentCancelRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'shipment_identifier': json['shipment_identifier'],
        'service': !runtime_1.exists(json, 'service') ? undefined : json['service'],
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
    };
}
exports.ShipmentCancelRequestFromJSONTyped = ShipmentCancelRequestFromJSONTyped;
function ShipmentCancelRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'shipment_identifier': value.shipment_identifier,
        'service': value.service,
        'options': value.options,
    };
}
exports.ShipmentCancelRequestToJSON = ShipmentCancelRequestToJSON;


/***/ }),

/***/ "./api/models/ShipmentData.ts":
/*!************************************!*\
  !*** ./api/models/ShipmentData.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShipmentDataToJSON = exports.ShipmentDataFromJSONTyped = exports.ShipmentDataFromJSON = exports.ShipmentDataLabelTypeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var ShipmentDataLabelTypeEnum;
(function (ShipmentDataLabelTypeEnum) {
    ShipmentDataLabelTypeEnum["Pdf"] = "PDF";
    ShipmentDataLabelTypeEnum["Zpl"] = "ZPL";
})(ShipmentDataLabelTypeEnum = exports.ShipmentDataLabelTypeEnum || (exports.ShipmentDataLabelTypeEnum = {}));
function ShipmentDataFromJSON(json) {
    return ShipmentDataFromJSONTyped(json, false);
}
exports.ShipmentDataFromJSON = ShipmentDataFromJSON;
function ShipmentDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'shipper': _1.AddressDataFromJSON(json['shipper']),
        'recipient': _1.AddressDataFromJSON(json['recipient']),
        'parcels': (json['parcels'].map(_1.ParcelDataFromJSON)),
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'payment': !runtime_1.exists(json, 'payment') ? undefined : _1.PaymentFromJSON(json['payment']),
        'customs': !runtime_1.exists(json, 'customs') ? undefined : _1.CustomsDataFromJSON(json['customs']),
        'reference': !runtime_1.exists(json, 'reference') ? undefined : json['reference'],
        'label_type': !runtime_1.exists(json, 'label_type') ? undefined : json['label_type'],
        'services': !runtime_1.exists(json, 'services') ? undefined : json['services'],
        'carrier_ids': !runtime_1.exists(json, 'carrier_ids') ? undefined : json['carrier_ids'],
    };
}
exports.ShipmentDataFromJSONTyped = ShipmentDataFromJSONTyped;
function ShipmentDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'shipper': _1.AddressDataToJSON(value.shipper),
        'recipient': _1.AddressDataToJSON(value.recipient),
        'parcels': (value.parcels.map(_1.ParcelDataToJSON)),
        'options': value.options,
        'payment': _1.PaymentToJSON(value.payment),
        'customs': _1.CustomsDataToJSON(value.customs),
        'reference': value.reference,
        'label_type': value.label_type,
        'services': value.services,
        'carrier_ids': value.carrier_ids,
    };
}
exports.ShipmentDataToJSON = ShipmentDataToJSON;


/***/ }),

/***/ "./api/models/ShipmentList.ts":
/*!************************************!*\
  !*** ./api/models/ShipmentList.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShipmentListToJSON = exports.ShipmentListFromJSONTyped = exports.ShipmentListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function ShipmentListFromJSON(json) {
    return ShipmentListFromJSONTyped(json, false);
}
exports.ShipmentListFromJSON = ShipmentListFromJSON;
function ShipmentListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.ShipmentFromJSON)),
    };
}
exports.ShipmentListFromJSONTyped = ShipmentListFromJSONTyped;
function ShipmentListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.ShipmentToJSON)),
    };
}
exports.ShipmentListToJSON = ShipmentListToJSON;


/***/ }),

/***/ "./api/models/ShipmentPurchaseData.ts":
/*!********************************************!*\
  !*** ./api/models/ShipmentPurchaseData.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShipmentPurchaseDataToJSON = exports.ShipmentPurchaseDataFromJSONTyped = exports.ShipmentPurchaseDataFromJSON = exports.ShipmentPurchaseDataLabelTypeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var ShipmentPurchaseDataLabelTypeEnum;
(function (ShipmentPurchaseDataLabelTypeEnum) {
    ShipmentPurchaseDataLabelTypeEnum["Pdf"] = "PDF";
    ShipmentPurchaseDataLabelTypeEnum["Zpl"] = "ZPL";
})(ShipmentPurchaseDataLabelTypeEnum = exports.ShipmentPurchaseDataLabelTypeEnum || (exports.ShipmentPurchaseDataLabelTypeEnum = {}));
function ShipmentPurchaseDataFromJSON(json) {
    return ShipmentPurchaseDataFromJSONTyped(json, false);
}
exports.ShipmentPurchaseDataFromJSON = ShipmentPurchaseDataFromJSON;
function ShipmentPurchaseDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'selected_rate_id': json['selected_rate_id'],
        'label_type': !runtime_1.exists(json, 'label_type') ? undefined : json['label_type'],
        'payment': !runtime_1.exists(json, 'payment') ? undefined : _1.PaymentFromJSON(json['payment']),
        'reference': !runtime_1.exists(json, 'reference') ? undefined : json['reference'],
    };
}
exports.ShipmentPurchaseDataFromJSONTyped = ShipmentPurchaseDataFromJSONTyped;
function ShipmentPurchaseDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'selected_rate_id': value.selected_rate_id,
        'label_type': value.label_type,
        'payment': _1.PaymentToJSON(value.payment),
        'reference': value.reference,
    };
}
exports.ShipmentPurchaseDataToJSON = ShipmentPurchaseDataToJSON;


/***/ }),

/***/ "./api/models/ShipmentRateData.ts":
/*!****************************************!*\
  !*** ./api/models/ShipmentRateData.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShipmentRateDataToJSON = exports.ShipmentRateDataFromJSONTyped = exports.ShipmentRateDataFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function ShipmentRateDataFromJSON(json) {
    return ShipmentRateDataFromJSONTyped(json, false);
}
exports.ShipmentRateDataFromJSON = ShipmentRateDataFromJSON;
function ShipmentRateDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'services': !runtime_1.exists(json, 'services') ? undefined : json['services'],
        'carrier_ids': !runtime_1.exists(json, 'carrier_ids') ? undefined : json['carrier_ids'],
        'reference': !runtime_1.exists(json, 'reference') ? undefined : json['reference'],
    };
}
exports.ShipmentRateDataFromJSONTyped = ShipmentRateDataFromJSONTyped;
function ShipmentRateDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'services': value.services,
        'carrier_ids': value.carrier_ids,
        'reference': value.reference,
    };
}
exports.ShipmentRateDataToJSON = ShipmentRateDataToJSON;


/***/ }),

/***/ "./api/models/ShippingRequest.ts":
/*!***************************************!*\
  !*** ./api/models/ShippingRequest.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShippingRequestToJSON = exports.ShippingRequestFromJSONTyped = exports.ShippingRequestFromJSON = exports.ShippingRequestLabelTypeEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var ShippingRequestLabelTypeEnum;
(function (ShippingRequestLabelTypeEnum) {
    ShippingRequestLabelTypeEnum["Pdf"] = "PDF";
    ShippingRequestLabelTypeEnum["Zpl"] = "ZPL";
})(ShippingRequestLabelTypeEnum = exports.ShippingRequestLabelTypeEnum || (exports.ShippingRequestLabelTypeEnum = {}));
function ShippingRequestFromJSON(json) {
    return ShippingRequestFromJSONTyped(json, false);
}
exports.ShippingRequestFromJSON = ShippingRequestFromJSON;
function ShippingRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'shipper': _1.AddressDataFromJSON(json['shipper']),
        'recipient': _1.AddressDataFromJSON(json['recipient']),
        'parcels': (json['parcels'].map(_1.ParcelDataFromJSON)),
        'options': !runtime_1.exists(json, 'options') ? undefined : json['options'],
        'payment': _1.PaymentFromJSON(json['payment']),
        'customs': !runtime_1.exists(json, 'customs') ? undefined : _1.CustomsDataFromJSON(json['customs']),
        'reference': !runtime_1.exists(json, 'reference') ? undefined : json['reference'],
        'label_type': !runtime_1.exists(json, 'label_type') ? undefined : json['label_type'],
        'selected_rate_id': json['selected_rate_id'],
        'rates': (json['rates'].map(_1.RateFromJSON)),
    };
}
exports.ShippingRequestFromJSONTyped = ShippingRequestFromJSONTyped;
function ShippingRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'shipper': _1.AddressDataToJSON(value.shipper),
        'recipient': _1.AddressDataToJSON(value.recipient),
        'parcels': (value.parcels.map(_1.ParcelDataToJSON)),
        'options': value.options,
        'payment': _1.PaymentToJSON(value.payment),
        'customs': _1.CustomsDataToJSON(value.customs),
        'reference': value.reference,
        'label_type': value.label_type,
        'selected_rate_id': value.selected_rate_id,
        'rates': (value.rates.map(_1.RateToJSON)),
    };
}
exports.ShippingRequestToJSON = ShippingRequestToJSON;


/***/ }),

/***/ "./api/models/TokenObtainPair.ts":
/*!***************************************!*\
  !*** ./api/models/TokenObtainPair.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenObtainPairToJSON = exports.TokenObtainPairFromJSONTyped = exports.TokenObtainPairFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function TokenObtainPairFromJSON(json) {
    return TokenObtainPairFromJSONTyped(json, false);
}
exports.TokenObtainPairFromJSON = TokenObtainPairFromJSON;
function TokenObtainPairFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'email': json['email'],
        'password': json['password'],
        'org_id': !runtime_1.exists(json, 'org_id') ? undefined : json['org_id'],
    };
}
exports.TokenObtainPairFromJSONTyped = TokenObtainPairFromJSONTyped;
function TokenObtainPairToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'email': value.email,
        'password': value.password,
        'org_id': value.org_id,
    };
}
exports.TokenObtainPairToJSON = TokenObtainPairToJSON;


/***/ }),

/***/ "./api/models/TokenPair.ts":
/*!*********************************!*\
  !*** ./api/models/TokenPair.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenPairToJSON = exports.TokenPairFromJSONTyped = exports.TokenPairFromJSON = void 0;
function TokenPairFromJSON(json) {
    return TokenPairFromJSONTyped(json, false);
}
exports.TokenPairFromJSON = TokenPairFromJSON;
function TokenPairFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'access': json['access'],
        'refresh': json['refresh'],
    };
}
exports.TokenPairFromJSONTyped = TokenPairFromJSONTyped;
function TokenPairToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'access': value.access,
        'refresh': value.refresh,
    };
}
exports.TokenPairToJSON = TokenPairToJSON;


/***/ }),

/***/ "./api/models/TokenRefresh.ts":
/*!************************************!*\
  !*** ./api/models/TokenRefresh.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenRefreshToJSON = exports.TokenRefreshFromJSONTyped = exports.TokenRefreshFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function TokenRefreshFromJSON(json) {
    return TokenRefreshFromJSONTyped(json, false);
}
exports.TokenRefreshFromJSON = TokenRefreshFromJSON;
function TokenRefreshFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'refresh': json['refresh'],
        'access': !runtime_1.exists(json, 'access') ? undefined : json['access'],
        'org_id': !runtime_1.exists(json, 'org_id') ? undefined : json['org_id'],
    };
}
exports.TokenRefreshFromJSONTyped = TokenRefreshFromJSONTyped;
function TokenRefreshToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'refresh': value.refresh,
        'org_id': value.org_id,
    };
}
exports.TokenRefreshToJSON = TokenRefreshToJSON;


/***/ }),

/***/ "./api/models/TokenVerify.ts":
/*!***********************************!*\
  !*** ./api/models/TokenVerify.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenVerifyToJSON = exports.TokenVerifyFromJSONTyped = exports.TokenVerifyFromJSON = void 0;
function TokenVerifyFromJSON(json) {
    return TokenVerifyFromJSONTyped(json, false);
}
exports.TokenVerifyFromJSON = TokenVerifyFromJSON;
function TokenVerifyFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'token': json['token'],
    };
}
exports.TokenVerifyFromJSONTyped = TokenVerifyFromJSONTyped;
function TokenVerifyToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'token': value.token,
    };
}
exports.TokenVerifyToJSON = TokenVerifyToJSON;


/***/ }),

/***/ "./api/models/TrackerList.ts":
/*!***********************************!*\
  !*** ./api/models/TrackerList.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TrackerListToJSON = exports.TrackerListFromJSONTyped = exports.TrackerListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function TrackerListFromJSON(json) {
    return TrackerListFromJSONTyped(json, false);
}
exports.TrackerListFromJSON = TrackerListFromJSON;
function TrackerListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.TrackingStatusFromJSON)),
    };
}
exports.TrackerListFromJSONTyped = TrackerListFromJSONTyped;
function TrackerListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.TrackingStatusToJSON)),
    };
}
exports.TrackerListToJSON = TrackerListToJSON;


/***/ }),

/***/ "./api/models/TrackingEvent.ts":
/*!*************************************!*\
  !*** ./api/models/TrackingEvent.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TrackingEventToJSON = exports.TrackingEventFromJSONTyped = exports.TrackingEventFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
function TrackingEventFromJSON(json) {
    return TrackingEventFromJSONTyped(json, false);
}
exports.TrackingEventFromJSON = TrackingEventFromJSON;
function TrackingEventFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'date': !runtime_1.exists(json, 'date') ? undefined : json['date'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'location': !runtime_1.exists(json, 'location') ? undefined : json['location'],
        'code': !runtime_1.exists(json, 'code') ? undefined : json['code'],
        'time': !runtime_1.exists(json, 'time') ? undefined : json['time'],
    };
}
exports.TrackingEventFromJSONTyped = TrackingEventFromJSONTyped;
function TrackingEventToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'date': value.date,
        'description': value.description,
        'location': value.location,
        'code': value.code,
        'time': value.time,
    };
}
exports.TrackingEventToJSON = TrackingEventToJSON;


/***/ }),

/***/ "./api/models/TrackingResponse.ts":
/*!****************************************!*\
  !*** ./api/models/TrackingResponse.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TrackingResponseToJSON = exports.TrackingResponseFromJSONTyped = exports.TrackingResponseFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function TrackingResponseFromJSON(json) {
    return TrackingResponseFromJSONTyped(json, false);
}
exports.TrackingResponseFromJSON = TrackingResponseFromJSON;
function TrackingResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'messages': !runtime_1.exists(json, 'messages') ? undefined : (json['messages'].map(_1.MessageFromJSON)),
        'tracking': !runtime_1.exists(json, 'tracking') ? undefined : _1.TrackingStatusFromJSON(json['tracking']),
    };
}
exports.TrackingResponseFromJSONTyped = TrackingResponseFromJSONTyped;
function TrackingResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'messages': value.messages === undefined ? undefined : (value.messages.map(_1.MessageToJSON)),
        'tracking': _1.TrackingStatusToJSON(value.tracking),
    };
}
exports.TrackingResponseToJSON = TrackingResponseToJSON;


/***/ }),

/***/ "./api/models/TrackingStatus.ts":
/*!**************************************!*\
  !*** ./api/models/TrackingStatus.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TrackingStatusToJSON = exports.TrackingStatusFromJSONTyped = exports.TrackingStatusFromJSON = exports.TrackingStatusStatusEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
/**
* @export
* @enum {string}
*/
var TrackingStatusStatusEnum;
(function (TrackingStatusStatusEnum) {
    TrackingStatusStatusEnum["Created"] = "created";
    TrackingStatusStatusEnum["Purchased"] = "purchased";
    TrackingStatusStatusEnum["Cancelled"] = "cancelled";
    TrackingStatusStatusEnum["Shipped"] = "shipped";
    TrackingStatusStatusEnum["InTransit"] = "in-transit";
    TrackingStatusStatusEnum["Delivered"] = "delivered";
})(TrackingStatusStatusEnum = exports.TrackingStatusStatusEnum || (exports.TrackingStatusStatusEnum = {}));
function TrackingStatusFromJSON(json) {
    return TrackingStatusFromJSONTyped(json, false);
}
exports.TrackingStatusFromJSON = TrackingStatusFromJSON;
function TrackingStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'carrier_name': json['carrier_name'],
        'carrier_id': json['carrier_id'],
        'tracking_number': json['tracking_number'],
        'events': !runtime_1.exists(json, 'events') ? undefined : (json['events'] === null ? null : json['events'].map(_1.TrackingEventFromJSON)),
        'delivered': !runtime_1.exists(json, 'delivered') ? undefined : json['delivered'],
        'test_mode': json['test_mode'],
        'status': !runtime_1.exists(json, 'status') ? undefined : json['status'],
    };
}
exports.TrackingStatusFromJSONTyped = TrackingStatusFromJSONTyped;
function TrackingStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'tracking_number': value.tracking_number,
        'events': value.events === undefined ? undefined : (value.events === null ? null : value.events.map(_1.TrackingEventToJSON)),
        'delivered': value.delivered,
        'test_mode': value.test_mode,
        'status': value.status,
    };
}
exports.TrackingStatusToJSON = TrackingStatusToJSON;


/***/ }),

/***/ "./api/models/Webhook.ts":
/*!*******************************!*\
  !*** ./api/models/Webhook.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookToJSON = exports.WebhookFromJSONTyped = exports.WebhookFromJSON = exports.WebhookEnabledEventsEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var WebhookEnabledEventsEnum;
(function (WebhookEnabledEventsEnum) {
    WebhookEnabledEventsEnum["All"] = "all";
    WebhookEnabledEventsEnum["ShipmentPurchased"] = "shipment.purchased";
    WebhookEnabledEventsEnum["ShipmentCancelled"] = "shipment.cancelled";
    WebhookEnabledEventsEnum["ShipmentFulfilled"] = "shipment.fulfilled";
    WebhookEnabledEventsEnum["TrackerCreated"] = "tracker.created";
    WebhookEnabledEventsEnum["TrackerUpdated"] = "tracker.updated";
})(WebhookEnabledEventsEnum = exports.WebhookEnabledEventsEnum || (exports.WebhookEnabledEventsEnum = {}));
function WebhookFromJSON(json) {
    return WebhookFromJSONTyped(json, false);
}
exports.WebhookFromJSON = WebhookFromJSON;
function WebhookFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'url': json['url'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'enabled_events': json['enabled_events'],
        'test_mode': json['test_mode'],
        'disabled': !runtime_1.exists(json, 'disabled') ? undefined : json['disabled'],
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'last_event_at': !runtime_1.exists(json, 'last_event_at') ? undefined : (json['last_event_at'] === null ? null : new Date(json['last_event_at'])),
    };
}
exports.WebhookFromJSONTyped = WebhookFromJSONTyped;
function WebhookToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'url': value.url,
        'description': value.description,
        'enabled_events': value.enabled_events,
        'test_mode': value.test_mode,
        'disabled': value.disabled,
        'id': value.id,
        'last_event_at': value.last_event_at === undefined ? undefined : (value.last_event_at === null ? null : value.last_event_at.toISOString()),
    };
}
exports.WebhookToJSON = WebhookToJSON;


/***/ }),

/***/ "./api/models/WebhookData.ts":
/*!***********************************!*\
  !*** ./api/models/WebhookData.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookDataToJSON = exports.WebhookDataFromJSONTyped = exports.WebhookDataFromJSON = exports.WebhookDataEnabledEventsEnum = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
/**
* @export
* @enum {string}
*/
var WebhookDataEnabledEventsEnum;
(function (WebhookDataEnabledEventsEnum) {
    WebhookDataEnabledEventsEnum["All"] = "all";
    WebhookDataEnabledEventsEnum["ShipmentPurchased"] = "shipment.purchased";
    WebhookDataEnabledEventsEnum["ShipmentCancelled"] = "shipment.cancelled";
    WebhookDataEnabledEventsEnum["ShipmentFulfilled"] = "shipment.fulfilled";
    WebhookDataEnabledEventsEnum["TrackerCreated"] = "tracker.created";
    WebhookDataEnabledEventsEnum["TrackerUpdated"] = "tracker.updated";
})(WebhookDataEnabledEventsEnum = exports.WebhookDataEnabledEventsEnum || (exports.WebhookDataEnabledEventsEnum = {}));
function WebhookDataFromJSON(json) {
    return WebhookDataFromJSONTyped(json, false);
}
exports.WebhookDataFromJSON = WebhookDataFromJSON;
function WebhookDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'url': json['url'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'enabled_events': json['enabled_events'],
        'test_mode': json['test_mode'],
        'disabled': !runtime_1.exists(json, 'disabled') ? undefined : json['disabled'],
    };
}
exports.WebhookDataFromJSONTyped = WebhookDataFromJSONTyped;
function WebhookDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'url': value.url,
        'description': value.description,
        'enabled_events': value.enabled_events,
        'test_mode': value.test_mode,
        'disabled': value.disabled,
    };
}
exports.WebhookDataToJSON = WebhookDataToJSON;


/***/ }),

/***/ "./api/models/WebhookList.ts":
/*!***********************************!*\
  !*** ./api/models/WebhookList.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookListToJSON = exports.WebhookListFromJSONTyped = exports.WebhookListFromJSON = void 0;
const runtime_1 = __webpack_require__(/*! ../runtime */ "./api/runtime.ts");
const _1 = __webpack_require__(/*! ./ */ "./api/models/index.ts");
function WebhookListFromJSON(json) {
    return WebhookListFromJSONTyped(json, false);
}
exports.WebhookListFromJSON = WebhookListFromJSON;
function WebhookListFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'next': !runtime_1.exists(json, 'next') ? undefined : json['next'],
        'previous': !runtime_1.exists(json, 'previous') ? undefined : json['previous'],
        'results': (json['results'].map(_1.WebhookFromJSON)),
    };
}
exports.WebhookListFromJSONTyped = WebhookListFromJSONTyped;
function WebhookListToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'next': value.next,
        'previous': value.previous,
        'results': (value.results.map(_1.WebhookToJSON)),
    };
}
exports.WebhookListToJSON = WebhookListToJSON;


/***/ }),

/***/ "./api/models/WebhookTestRequest.ts":
/*!******************************************!*\
  !*** ./api/models/WebhookTestRequest.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookTestRequestToJSON = exports.WebhookTestRequestFromJSONTyped = exports.WebhookTestRequestFromJSON = void 0;
function WebhookTestRequestFromJSON(json) {
    return WebhookTestRequestFromJSONTyped(json, false);
}
exports.WebhookTestRequestFromJSON = WebhookTestRequestFromJSON;
function WebhookTestRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'payload': json['payload'],
    };
}
exports.WebhookTestRequestFromJSONTyped = WebhookTestRequestFromJSONTyped;
function WebhookTestRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'payload': value.payload,
    };
}
exports.WebhookTestRequestToJSON = WebhookTestRequestToJSON;


/***/ }),

/***/ "./api/models/index.ts":
/*!*****************************!*\
  !*** ./api/models/index.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./Address */ "./api/models/Address.ts"), exports);
__exportStar(__webpack_require__(/*! ./AddressData */ "./api/models/AddressData.ts"), exports);
__exportStar(__webpack_require__(/*! ./AddressList */ "./api/models/AddressList.ts"), exports);
__exportStar(__webpack_require__(/*! ./AddressValidation */ "./api/models/AddressValidation.ts"), exports);
__exportStar(__webpack_require__(/*! ./CarrierList */ "./api/models/CarrierList.ts"), exports);
__exportStar(__webpack_require__(/*! ./CarrierSettings */ "./api/models/CarrierSettings.ts"), exports);
__exportStar(__webpack_require__(/*! ./Charge */ "./api/models/Charge.ts"), exports);
__exportStar(__webpack_require__(/*! ./Commodity */ "./api/models/Commodity.ts"), exports);
__exportStar(__webpack_require__(/*! ./CommodityData */ "./api/models/CommodityData.ts"), exports);
__exportStar(__webpack_require__(/*! ./Customs */ "./api/models/Customs.ts"), exports);
__exportStar(__webpack_require__(/*! ./CustomsData */ "./api/models/CustomsData.ts"), exports);
__exportStar(__webpack_require__(/*! ./CustomsList */ "./api/models/CustomsList.ts"), exports);
__exportStar(__webpack_require__(/*! ./Duty */ "./api/models/Duty.ts"), exports);
__exportStar(__webpack_require__(/*! ./ErrorResponse */ "./api/models/ErrorResponse.ts"), exports);
__exportStar(__webpack_require__(/*! ./Message */ "./api/models/Message.ts"), exports);
__exportStar(__webpack_require__(/*! ./Operation */ "./api/models/Operation.ts"), exports);
__exportStar(__webpack_require__(/*! ./OperationConfirmation */ "./api/models/OperationConfirmation.ts"), exports);
__exportStar(__webpack_require__(/*! ./OperationResponse */ "./api/models/OperationResponse.ts"), exports);
__exportStar(__webpack_require__(/*! ./Parcel */ "./api/models/Parcel.ts"), exports);
__exportStar(__webpack_require__(/*! ./ParcelData */ "./api/models/ParcelData.ts"), exports);
__exportStar(__webpack_require__(/*! ./ParcelList */ "./api/models/ParcelList.ts"), exports);
__exportStar(__webpack_require__(/*! ./Payment */ "./api/models/Payment.ts"), exports);
__exportStar(__webpack_require__(/*! ./Pickup */ "./api/models/Pickup.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupCancelData */ "./api/models/PickupCancelData.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupCancelRequest */ "./api/models/PickupCancelRequest.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupData */ "./api/models/PickupData.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupList */ "./api/models/PickupList.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupRequest */ "./api/models/PickupRequest.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupResponse */ "./api/models/PickupResponse.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupUpdateData */ "./api/models/PickupUpdateData.ts"), exports);
__exportStar(__webpack_require__(/*! ./PickupUpdateRequest */ "./api/models/PickupUpdateRequest.ts"), exports);
__exportStar(__webpack_require__(/*! ./Rate */ "./api/models/Rate.ts"), exports);
__exportStar(__webpack_require__(/*! ./RateRequest */ "./api/models/RateRequest.ts"), exports);
__exportStar(__webpack_require__(/*! ./RateResponse */ "./api/models/RateResponse.ts"), exports);
__exportStar(__webpack_require__(/*! ./References */ "./api/models/References.ts"), exports);
__exportStar(__webpack_require__(/*! ./Shipment */ "./api/models/Shipment.ts"), exports);
__exportStar(__webpack_require__(/*! ./ShipmentCancelRequest */ "./api/models/ShipmentCancelRequest.ts"), exports);
__exportStar(__webpack_require__(/*! ./ShipmentData */ "./api/models/ShipmentData.ts"), exports);
__exportStar(__webpack_require__(/*! ./ShipmentList */ "./api/models/ShipmentList.ts"), exports);
__exportStar(__webpack_require__(/*! ./ShipmentPurchaseData */ "./api/models/ShipmentPurchaseData.ts"), exports);
__exportStar(__webpack_require__(/*! ./ShipmentRateData */ "./api/models/ShipmentRateData.ts"), exports);
__exportStar(__webpack_require__(/*! ./ShippingRequest */ "./api/models/ShippingRequest.ts"), exports);
__exportStar(__webpack_require__(/*! ./TokenObtainPair */ "./api/models/TokenObtainPair.ts"), exports);
__exportStar(__webpack_require__(/*! ./TokenPair */ "./api/models/TokenPair.ts"), exports);
__exportStar(__webpack_require__(/*! ./TokenRefresh */ "./api/models/TokenRefresh.ts"), exports);
__exportStar(__webpack_require__(/*! ./TokenVerify */ "./api/models/TokenVerify.ts"), exports);
__exportStar(__webpack_require__(/*! ./TrackerList */ "./api/models/TrackerList.ts"), exports);
__exportStar(__webpack_require__(/*! ./TrackingEvent */ "./api/models/TrackingEvent.ts"), exports);
__exportStar(__webpack_require__(/*! ./TrackingResponse */ "./api/models/TrackingResponse.ts"), exports);
__exportStar(__webpack_require__(/*! ./TrackingStatus */ "./api/models/TrackingStatus.ts"), exports);
__exportStar(__webpack_require__(/*! ./Webhook */ "./api/models/Webhook.ts"), exports);
__exportStar(__webpack_require__(/*! ./WebhookData */ "./api/models/WebhookData.ts"), exports);
__exportStar(__webpack_require__(/*! ./WebhookList */ "./api/models/WebhookList.ts"), exports);
__exportStar(__webpack_require__(/*! ./WebhookTestRequest */ "./api/models/WebhookTestRequest.ts"), exports);


/***/ }),

/***/ "./api/runtime.ts":
/*!************************!*\
  !*** ./api/runtime.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Purplship API
 *  ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.7`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.
 *
 * The version of the OpenAPI document: 2021.7
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextApiResponse = exports.BlobApiResponse = exports.VoidApiResponse = exports.JSONApiResponse = exports.canConsumeForm = exports.mapValues = exports.querystring = exports.exists = exports.Configuration = exports.COLLECTION_FORMATS = exports.RequiredError = exports.BaseAPI = exports.BASE_PATH = void 0;
exports.BASE_PATH = "https://app.purplship.com".replace(/\/+$/, "");
const isBlob = (value) => typeof Blob !== 'undefined' && value instanceof Blob;
/**
 * This is the base class for all generated API classes.
 */
class BaseAPI {
    constructor(configuration = new Configuration()) {
        this.configuration = configuration;
        this.fetchApi = (url, init) => __awaiter(this, void 0, void 0, function* () {
            let fetchParams = { url, init };
            for (const middleware of this.middleware) {
                if (middleware.pre) {
                    fetchParams = (yield middleware.pre(Object.assign({ fetch: this.fetchApi }, fetchParams))) || fetchParams;
                }
            }
            let response = yield this.configuration.fetchApi(fetchParams.url, fetchParams.init);
            for (const middleware of this.middleware) {
                if (middleware.post) {
                    response = (yield middleware.post({
                        fetch: this.fetchApi,
                        url: fetchParams.url,
                        init: fetchParams.init,
                        response: response.clone(),
                    })) || response;
                }
            }
            return response;
        });
        this.middleware = configuration.middleware;
    }
    withMiddleware(...middlewares) {
        const next = this.clone();
        next.middleware = next.middleware.concat(...middlewares);
        return next;
    }
    withPreMiddleware(...preMiddlewares) {
        const middlewares = preMiddlewares.map((pre) => ({ pre }));
        return this.withMiddleware(...middlewares);
    }
    withPostMiddleware(...postMiddlewares) {
        const middlewares = postMiddlewares.map((post) => ({ post }));
        return this.withMiddleware(...middlewares);
    }
    request(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const { url, init } = this.createFetchParams(context);
            const response = yield this.fetchApi(url, init);
            if (response.status >= 200 && response.status < 300) {
                return response;
            }
            throw response;
        });
    }
    createFetchParams(context) {
        let url = this.configuration.basePath + context.path;
        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
            // only add the querystring to the URL if there are query parameters.
            // this is done to avoid urls ending with a "?" character which buggy webservers
            // do not handle correctly sometimes.
            url += '?' + this.configuration.queryParamsStringify(context.query);
        }
        const body = ((typeof FormData !== "undefined" && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body))
            ? context.body
            : JSON.stringify(context.body);
        const headers = Object.assign({}, this.configuration.headers, context.headers);
        const init = {
            method: context.method,
            headers: headers,
            body,
            credentials: this.configuration.credentials
        };
        return { url, init };
    }
    /**
     * Create a shallow clone of `this` by constructing a new instance
     * and then shallow cloning data members.
     */
    clone() {
        const constructor = this.constructor;
        const next = new constructor(this.configuration);
        next.middleware = this.middleware.slice();
        return next;
    }
}
exports.BaseAPI = BaseAPI;
;
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
    }
}
exports.RequiredError = RequiredError;
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
class Configuration {
    constructor(configuration = {}) {
        this.configuration = configuration;
    }
    get basePath() {
        return this.configuration.basePath != null ? this.configuration.basePath : exports.BASE_PATH;
    }
    get fetchApi() {
        return this.configuration.fetchApi || window.fetch.bind(window);
    }
    get middleware() {
        return this.configuration.middleware || [];
    }
    get queryParamsStringify() {
        return this.configuration.queryParamsStringify || querystring;
    }
    get username() {
        return this.configuration.username;
    }
    get password() {
        return this.configuration.password;
    }
    get apiKey() {
        const apiKey = this.configuration.apiKey;
        if (apiKey) {
            return typeof apiKey === 'function' ? apiKey : () => apiKey;
        }
        return undefined;
    }
    get accessToken() {
        const accessToken = this.configuration.accessToken;
        if (accessToken) {
            return typeof accessToken === 'function' ? accessToken : () => __awaiter(this, void 0, void 0, function* () { return accessToken; });
        }
        return undefined;
    }
    get headers() {
        return this.configuration.headers;
    }
    get credentials() {
        return this.configuration.credentials;
    }
}
exports.Configuration = Configuration;
function exists(json, key) {
    const value = json[key];
    return value !== null && value !== undefined;
}
exports.exists = exists;
function querystring(params, prefix = '') {
    return Object.keys(params)
        .map((key) => {
        const fullKey = prefix + (prefix.length ? `[${key}]` : key);
        const value = params[key];
        if (value instanceof Array) {
            const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))
                .join(`&${encodeURIComponent(fullKey)}=`);
            return `${encodeURIComponent(fullKey)}=${multiValue}`;
        }
        if (value instanceof Date) {
            return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
        }
        if (value instanceof Object) {
            return querystring(value, fullKey);
        }
        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
    })
        .filter(part => part.length > 0)
        .join('&');
}
exports.querystring = querystring;
function mapValues(data, fn) {
    return Object.keys(data).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: fn(data[key]) })), {});
}
exports.mapValues = mapValues;
function canConsumeForm(consumes) {
    for (const consume of consumes) {
        if ('multipart/form-data' === consume.contentType) {
            return true;
        }
    }
    return false;
}
exports.canConsumeForm = canConsumeForm;
class JSONApiResponse {
    constructor(raw, transformer = (jsonValue) => jsonValue) {
        this.raw = raw;
        this.transformer = transformer;
    }
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.transformer(yield this.raw.json());
        });
    }
}
exports.JSONApiResponse = JSONApiResponse;
class VoidApiResponse {
    constructor(raw) {
        this.raw = raw;
    }
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            return undefined;
        });
    }
}
exports.VoidApiResponse = VoidApiResponse;
class BlobApiResponse {
    constructor(raw) {
        this.raw = raw;
    }
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.raw.blob();
        });
    }
    ;
}
exports.BlobApiResponse = BlobApiResponse;
class TextApiResponse {
    constructor(raw) {
        this.raw = raw;
    }
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.raw.text();
        });
    }
    ;
}
exports.TextApiResponse = TextApiResponse;


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__("./api/index.ts")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=purplship.rest.min.js.map